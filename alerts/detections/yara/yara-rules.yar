rule eicar_av_test {
    /*
       Per standard, match only if entire file is EICAR string plus optional trailing whitespace.
       The raw EICAR string to be matched is:
       X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
    */

    meta:
        description = "This is a standard AV test, intended to verify that BinaryAlert is working correctly."
        author = "Austin Byers | Airbnb CSIRT"
        reference = "http://www.eicar.org/86-0-Intended-use.html"

    strings:
        $eicar_regex = /^X5O!P%@AP\[4\\PZX54\(P\^\)7CC\)7\}\$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!\$H\+H\*\s*$/

    condition:
        all of them
}

rule eicar_substring_test {
    /*
       More generic - match just the embedded EICAR string (e.g. in packed executables, PDFs, etc)
    */

    meta:
        description = "Standard AV test, checking for an EICAR substring"
        author = "Austin Byers | Airbnb CSIRT"

    strings:
        $eicar_substring = "$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!"

    condition:
        all of them
}

rule asp_backdoor_3FEShell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<title>.:"
        $s2 = "3FEShell"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_AspRootkit_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "=\"AspRootkit 1.0 by BloodSword"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = ">.:: kabuss EC Asp shell"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "case\"hiddenshell\":hiddenshell()"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Response.Write(\"bhssokbhss\");"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_003_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "XBCode=\"97a103a101a110"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "&copy;CopyLeft 2006. Coded By rssn, Hebust."
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "stm.SaveToFile server.MapPath(\"/\"&cachefile&downfilename)"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "For iEn=0 To UBound(Daimaa)"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "?action=goto&scr=#deletedir#\" style=\"color: rgb(255, 0, 0);\"><u> <- DeleteDir"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "UserPass"
        $s2 = "ShellName"
        $s3 = "SFlag"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_aspshell_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "SeRvEr AccEss d00r ]--</title>"
    condition:
        $s0 and $s1
}

rule asp_backdoor_aspshell_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>KACAK Shell<"
    condition:
        $s0 and $s1
}

rule asp_backdoor_ASPXSpy_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "shell"
        $s2 = ">Add xp_cmdshell(SQL2005)<"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_attributes_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "file.attributes=39"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_backdoor_installer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "htmls=chr(60)&chr(37)&\"eval request(\"&chr(34)&\""
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_commandexecuter_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "COMMAND EXECUTER (CODED BY NEO)"
    condition:
        $s0 and $s1
}

rule asp_backdoor_commandexecuter_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$_file ->Run('cmd.exe /c'.$post.' > '.dirname($_SERVER[SCRIPT_FILENAME]).'/'.$file.'');"
    condition:
        $s0 and $s1
}

rule asp_backdoor_cooldiyer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "[CoolDiyer@<%=Request"
    condition:
        $s0 and $s1
}

rule asp_backdoor_cooldiyer_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "?Action=ScanDrive&Drive=<%=DriveB.DriveLetter%"
    condition:
        $s0 and $s1
}

rule asp_backdoor_eval_Request_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Dim InValue:InValue=Request(ConKey)"
    condition:
        $s0 and $s1
}

rule asp_backdoor_eval_Request_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "Response.write CreateObject(\"wscript.shell\").exec(\"cmd.exe /c whoami\").StdOut.ReadAll%>"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_eval_Request_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<%response.write(now):eval(request("
    condition:
        $s0 and $s1
}

rule asp_backdoor_eval_Request_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "(\"autoshell\"):"
    condition:
        $s0 and $s1
}

rule asp_backdoor_eval_Request_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "<%eval Request("
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_eval_Request_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Request[\"\\x61\\x62\\x63\\x64\"];eval"
    condition:
        $s0 and $s1
}

rule asp_backdoor_eval_Request_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "eval(play)"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_eval_Request_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "=Server.CreateObject(\"Scrip\"&"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_eval_Request_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "(Replace(StrReverse("
        $s2 = "(tseuqer lave\")"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_eval_Request_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "<%eval\"\"&(\"e\"&\"v\"&\"a\"&\"l\"&\"(\"&\"r\"&\"e\"&\"q\"&\"u\"&\"e\"&\"s\"&\"t\""
    condition:
        $s0 and $s1
}

rule asp_backdoor_eval_Request_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "void EvalRequest(string action)"
        $s3 = "strDat.IndexOf(\"EXEC \") == 0 || strDat.IndexOf(\"DECLARE \") == 0)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_execute_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "xecute"
        $s3 = "execute E"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_execute_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "WshShell.Run \"c:"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_execute_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "xecute"
        $s3 = "ExecuteGlobal request"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_execute_003_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "xecute"
        $s3 = "ExecuteGlobal(request"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_execute_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Execute(chopper)"
    condition:
        $s0 and $s1
}

rule asp_backdoor_execute_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "re= request(\"a\")"
        $s3 = "execute re"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_execute_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = "Sub RunPOP3Brute(ByVal"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_execute_request_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "<%execute(request(\""
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_filesman_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = "GetFiles_Dirs(base64Decode(args)"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_generic_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "request(\""
        $s3 = "getHTTPPage=bytesToBSTR"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_generic_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "EXecutE("
        $s2 = "154%171%150%161%85%167%154%166%170%154%168%169%93%87%103%101%103%101%87%94"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_generic_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "eval("
        $s2 = "KSIuoUHMmBFpkWcPqfVvlxnErCyNTLDRZGJagsjwAbzedQtOhXiY"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_generic_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "eval("
        $s2 = "\\x78\"+\"\\x5F\"+\"\\x62\\x65\"+\"\\x73\"+\"\\x74\\x5F\"+\"\\x39\\x31\\x31"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_generic_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "eval("
        $s2 = "\\x4E\"+\"\\x45\"+\"\\x50"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_InsomniaShell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "shell"
        $s2 = "sb.Append(\"Impersonation - Identification\");"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_jspopup_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "<script runat=\"server\""
        $s3 = "= eval"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_jspopup_001_01 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = "popup(popup(System.Text.Encoding.Default.GetString"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_pejvak_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Coded By Pejvak"
    condition:
        $s0 and $s1
}

rule asp_backdoor_request_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "Request ( Chr ("
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_request_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "Request[\"\\x78"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_smallsystem_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<title>Small System</title>"
    condition:
        $s0 and $s1
}

rule asp_backdoor_umer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Umer Rock's ASP SHELL"
    condition:
        $s0 and $s1
}

rule asp_backdoor_umer_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "?raiz=root\">DRIVES</a> ::."
    condition:
        $s0 and $s1
}

rule asp_backdoor_uploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Dim action,password,pathname,pathname2,keywordindex"
    condition:
        $s0 and $s1
}

rule asp_backdoor_uploader_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = ".SaveToFile"
        $s2 = "sys_password=\""
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_uploader_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "dim upload,file,formName,formPath,iCount,upfileName,nowTime"
    condition:
        $s0 and $s1
}

rule asp_backdoor_uploader_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "upload_5xsoft"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_uploader_005_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "upload_5xSoft"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_uploader_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "if request(\"password\") <> \"yt\" Then"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_uploader_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "response.write"
        $s1 = "dim password,action,filename,filepath,body"
        $s2 = "response.write(\"uploaded\")"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_uploader_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>|[NTDaddy"
    condition:
        $s0 and $s1
}

rule asp_backdoor_uploader_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>WwW.SaNaLTeRoR.OrG - inDEXER And ReaDer</title>"
    condition:
        $s0 and $s1
}

rule asp_backdoor_uploader_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Aventis KlasVayv"
    condition:
        $s0 and $s1
}

rule asp_backdoor_uploader_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Remote Explorer</title>"
    condition:
        $s0 and $s1
}

rule asp_backdoor_uploader_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "Dim"
        $s3 = "freeaspupload"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_uploader_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = "System.IO.Path.GetExtension(fileName);"
        $s3 = "Server.HtmlEncode(FileUpload1.FileName);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_uploader_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = ".SaveAs(Server.MapPath"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_uploader_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "<TITLE>Expdoor"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_uploader_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = "new FileStream(Path.Combine(fileInfo.DirectoryName, Path.GetFileName(httpPostedFile"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_WanExplorer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "SysName=\"WanExplorer\""
    condition:
        $s0 and $s1
}

rule asp_backdoor_webshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "html_title = shell_fake_name"
    condition:
        $s0 and $s1
}

rule asp_backdoor_webshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GIF8"
        $s1 = "<%-- ASPX Shell"
    condition:
        $s0 and $s1
}

rule asp_backdoor_webshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "Dim"
        $s3 = "oProcess.BuildUploadRequest"
        $s4 = "ubound(uploadrequest.item(key).keys)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule asp_backdoor_webshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "sinf.UseShellExecute = false;"
        $s3 = "DataColumn dcFileDownload = new DataColumn(\"Download\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_webshell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "outstr += string.Format(\"<a href='?fdir={0}'>{1}/</a>"
        $s3 = "File.Delete(Request.QueryString[\"del\"]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_backdoor_webshell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "thisDir = getCommandOutput(\"cmd /c\" & szCMD)"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_zehir_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "zehir"
        $s2 = "objFSO.CreateTextFile"
    condition:
        $s0 and $s1 and $s2
}

rule asp_backdoor_zehir_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GIF8"
        $s1 = "&drive_.DriveLetter&"
    condition:
        $s0 and $s1
}

rule asp_hacktool_portforward_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".Start(remoteip,int.Parse(remoteport),localip,int.Parse(localport));"
    condition:
        $s0 and $s1
}

rule asp_malware_obfuscated_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Dim "
        $s1 = "0O0"
    condition:
        $s0 and $s1
}

rule asp_malware_obfuscated_001_05 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Dim "
        $s1 = ") & Request.ServerVariables ( Chr ("
    condition:
        $s0 and $s1
}

rule asp_malware_seospam_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script language=\"vbscript\" runat=\"server\">"
        $s2 = "if GetBot=\"baidu\" or GetBot=\"google\" or GetBot=\"Yahoo\" or GetBot=\"MSN\" or  GetBot=\"Sohu\" or GetBot=\"114\" or GetBot=\"sogou\" or GetBot=\"soso\"  then"
        $s3 = "(Request.ServerVariables(\"HTTP_REFERER\"))"
        $s4 = "set Http=server.createobject(\"MSXML2.XMLHTTP\")"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule asp_malware_seospam_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = "string spider_flag = \"google|"
    condition:
        $s0 and $s1 and $s2
}

rule asp_malware_win32_trojan_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = ".replace("
        $s4 = "zone-h.gif"
        $s5 = "\\Wds\\rdpwd\\Tds\\tcp\\PortNumber"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule asp_spamseo_aQ0O010O_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "User-Agent"
        $s1 = "aQ0O010O"
        $s2 = "\"User-Agent\",\"aQ0O010O\""
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_aQ0O010O_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "User-Agent"
        $s1 = "aQ0O010O"
        $s2 = "\"User-Agent\", \"aQ0O010O\""
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_doorway_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "Dim"
        $s3 = "title='\"&temp_title(0)&\"'><img border='0' src='https://www.google.com/images/logos/google_logo_41"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_doorway_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "response.write"
        $s1 = "Content_mb=GetHtml(Remote_server&\"/index.asp\"&"
    condition:
        $s0 and $s1
}

rule asp_spamseo_doorway_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "document.getElementById('linkbyme').style.display='none';"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_doorway_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "yumingid"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_generic_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "array(\"google\",\"yahoo\",\"bing\",\"aol"
        $s2 = "Function GetHTTPPage(url)"
        $s3 = "Server.CreateObject("
        $s4 = "GetHTTPPage"
        $s5 = "Response.Write strHtml"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule asp_spamseo_generic_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "response.write"
        $s1 = "Remote_file = Remote_server"
        $s2 = "GetHtml(Remote_file)"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_injector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "dim O0Oo000OO0O0,O0O000OO0O0,O00O000OO0O0"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Execute(OOOO(OOO))"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "(\"k9E>=mk9625mkE:E=6mc_c ,}@E"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "=\"&Request.ServerVariables(\"REMOTE_ADDR\")&\"&shell=\"&Request.ServerVariables(\"SERVER_NAME\"))"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Chr"
        $s1 = "Server.CreateObject ( Chr ( 97 ) & Chr ( 100 ) & Chr ( 111 ) & Chr ( 100 ) & Chr ( 98 ) & Chr ( 46 ) & Chr ( 115 ) & Chr ( 116 ) & Chr ( 114 )"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Dim "
        $s1 = "Dim action,password,pathname,pathname2,keywordindex,indexfile,filename,body"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Chr"
        $s1 = "= Chr ( 104 ) & Chr ( 116 ) & Chr ( 116 ) & Chr ( 112 ) & Chr ( 58 ) & Chr ( 47 ) & Chr ( 47 ) & Chr"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "response.write"
        $s1 = "response.write GetResStr(\"http://"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Chr"
        $s1 = ", Chr(37) & ChrW(-243) & Chr(62), Chr(37) & Chr(62))"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "infile1 = mydir&\"index.html\""
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "content=ReplaceReg(content,\"<a [.>]*href=\"\"\"&purl&"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_012 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Chr"
        $s1 = "dim god, faith, holy, pray, amen, Christz"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_013 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "execute(\"Function AscDecrypt(AE9):AE9 = Replace(AE9,\"\"u\"\",\"\"-\"\"):EncodeArr"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_014 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "string mydomain"
        $s3 = "string[] spider_flag_arr = spider_flag.Split('|');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_injector_015 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "response.write"
        $s1 = "response.clear:response.charset"
        $s2 = ".GetSpecialFolder("
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_injector_016 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = ".SaveToFile"
        $s2 = "url = clone_url&QUERYSTRING"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_injector_017 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Google Web Preview|bot|spider|wget"
        $s2 = "Set http = Nothing"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_injector_018 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "regexn.pattern = \"Google Web Preview|google|yahoo|msnbot\""
        $s2 = "if regexn.test(request.ServerVariables(\"HTTP_USER_AGENT\")) then"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_injector_019 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "request(\""
        $s2 = "sourceBody=GetResStr(siteUrl&\"/\"&queryStr)"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_injector_020 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "first=first&\"if instr(1,s_agent,\"\"googlebot"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_injector_gen_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "Or InStr(REFERER,\"google\") > 0 Or InStr(REFERER,\"soso.com"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_gen_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "\"Baiduspider,Sogou,baidu,Sosospider"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_gen_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "execute body"
        $s3 = "Public Function GetHtml(url)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_injector_gen_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "execute body"
        $s3 = "body=GetHtml"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_injector_gen_003_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "execute body"
        $s3 = "Server.ScriptTimeout="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_injector_gen_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "(uastr.IndexOf(\"google\") > -1) || (uastr.IndexOf(\"baidu\")"
    condition:
        $s0 and $s1
}

rule asp_spamseo_injector_gen_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "<script runat=\"server\""
        $s2 = "new AjaxControlToo1kit.Ajax("
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "response.write"
        $s1 = "response.write htmls"
    condition:
        $s0 and $s1
}

rule asp_spamseo_redirect_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "If instr(zhizhu,\"google\")>0 Or instr(zhizhu,\"yahoo\")>0"
        $s2 = "let_301 = getHTTPPage(Replace(\"http"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_redirect_002_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "HTTPReq.Open"
    condition:
        $s0 and $s1
}

rule asp_spamseo_redirect_002_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "If instr(zhizhu,\"google\")>0 Or instr(zhizhu,\"yahoo\")>0"
        $s2 = "response.write jumpcode"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_redirect_002_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "If instr(zhizhu,\"google\")>0 Or instr(zhizhu,\"yahoo\")>0"
        $s2 = "htmls = getHTTPPage(\""
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_redirect_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Dim "
        $s1 = "if instr(strTemp1,\"northface\")>0 or instr(strTemp1,\"north-face\")>0"
    condition:
        $s0 and $s1
}

rule asp_spamseo_redirect_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "<cfif (Find( \"google\", REQUEST.UserAgent ) or Find( \"yahoo"
    condition:
        $s0 and $s1
}

rule asp_spamseo_redirect_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "function Getbot()"
        $s2 = "s_agent,\"googlebot\",1)"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_redirect_006 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "Response.Redirect(jump)"
    condition:
        $s0 and $s1
}

rule asp_spamseo_redirect_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "ses=split(\"google,bing"
        $s2 = "response.write(\"<!DOCTYPE html><html><body><script>document.location=(\"\"\"&DataCenterURL"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_redirect_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "bodyContext = replace(bodyContext, REDIRECT_DOMAIN, REDIRECT_MAIN_PATH)"
    condition:
        $s0 and $s1
}

rule asp_spamseo_redirect_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "Request.ServerVariables(\"HTTP_USER_AGENT"
        $s3 = "response.write jumpcode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_redirect_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "content = webclient.DownloadString(URL);"
        $s2 = "if (domain.IndexOf(\"google\") == -1 && domain.IndexOf(\"msn.com"
    condition:
        $s0 and $s1 and $s2
}

rule asp_spamseo_redirect_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".Contains(\"exec\") ||"
        $s2 = "HttpContext.Current.Response.Redirect(redirect_url, true);"
        $s3 = "string[] spider_flag_arr = spider_flag.Split('|');"
        $s4 = "string redirect_url"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule asp_spamseo_redirect_011_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".Contains(\"exec\") ||"
        $s2 = "HttpContext.Current.Response.Redirect(redirect_url, true);"
        $s3 = "string[] spider_flag_arr = spider_flag.Split('|');"
        $s4 = "var HOST = extools.GetSiteAddress"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule asp_spamseo_redirect_011_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".Contains(\"exec\") ||"
        $s2 = "HttpContext.Current.Response.Redirect(redirect_url, true);"
        $s3 = "string[] spider_flag_arr = spider_flag.Split('|');"
        $s4 = "string[] spider_flag_arr"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule asp_spamseo_redirect_gen_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "Server.CreateObject("
        $s2 = "Request.ServerVariables(\"HTTP_USER_AGENT"
        $s3 = "\"h\"&\"t\"&\"t\"&\"p\"&\":\"&\"/\"&\"/\"&\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule asp_spamseo_user_agent_check_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Dim "
        $s1 = "instr(request.servervariables(\"HTTP_USER_AGENT\"),\"aidu\")"
    condition:
        $s0 and $s1
}

rule asp_spamseo_web_configredirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "add input=\"{"
        $s2 = "action type=\"Rewrite\" url="
        $s3 = "_USER_AGENT}\" pattern=\"(bing"
        $s4 = "type=\"Rewrite\" url="
        $s5 = "aol)\" ignoreCase=\"true"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule dir_hacktool_citadel_botnet_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "botnet"
        $s2 = "mysqlQueryEx('botnet_list'"
    condition:
        $s0 and $s1 and $s2
}

rule dir_hacktool_remote_whm_creator_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "echo '    <center><b>Remote WHM Creator</b><br>"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_backdoor_cgienabler_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "AddType application/x-httpd-php .jpg"
    condition:
        $s0 and $s1
}

rule htaccess_backdoor_cgienabler_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "AddType text/plain .php"
        $s2 = "<Files ^(*.txt)>"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_backdoor_cgienabler_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "AddType application/x-httpd-php .html"
    condition:
        $s0 and $s1
}

rule htaccess_backdoor_script_execute_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = ".%{ENV:SITE_WEB_SCRIPT_EXECUTE}?main-"
        $s2 = "check-script-vorking)"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_defaced_directoryindex_001 : defaced
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Add"
        $s1 = "DirectoryIndex 1337mir.htm"
    condition:
        $s0 and $s1
}

rule htaccess_defaced_directoryindex_002 : defaced
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Add"
        $s1 = "DirectoryIndex Sux.html"
    condition:
        $s0 and $s1
}

rule htaccess_hacktool_cgi_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Add"
        $s1 = "AddHandler"
        $s2 = "AddHandler cgi-script .py"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_hacktool_cgi_002 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Add"
        $s1 = "AddHandler"
        $s2 = "AddHandler cgi-script .izo"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_hacktool_cgi_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FollowSymLinks"
        $s1 = "#Coded By Sole Sad"
    condition:
        $s0 and $s1
}

rule htaccess_hacktool_safemodedisabler_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "<Files *.php>"
        $s2 = "SecFilterEngine Off"
        $s3 = "SecFilterScanPOST Off"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_hacktool_symlinkviewer_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Add"
        $s1 = "AddType text/plain .php"
    condition:
        $s0 and $s1
}

rule htaccess_hacktool_symlinkviewer_002 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Add"
        $s1 = "AddHandler"
        $s2 = "AddHandler txt .php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_hacktool_symlinkviewer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "DirectoryIndex indoxploit"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_185_93_187_90_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "185.93.187.90/"
    condition:
        $s0 and $s1
}

rule htaccess_malware_allow_all_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "|^chosen.php|^style.php|^wp-conflg.php|^wp-22.php|^class.phtml|^index.php)$\">"
    condition:
        $s0 and $s1
}

rule htaccess_malware_allow_all_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Allow from all"
        $s2 = "<FilesMatch \"^(postfs.php|votes.php|wjsindex.php|lock666.php|"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_allow_all_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Allow from all"
        $s2 = "<FilesMatch \"^(wp-blog.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_browsercheck_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "/BrowserCheck"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_env_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteRule .* - [E=VWM:"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "google|yahoo|msn|aol|ANTIPIDERSIA"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Add"
        $s1 = "AddHandler"
        $s2 = "AddHandler php5-script ."
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "%{REQUEST_URI} !(login|auth|register|secure|admin"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $w0 = ">Add the following snippet of code"
        $s2 = "\x09\x09\x09\x09\x09\x09\x09\x09\x09\x09RewriteCond %"
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule htaccess_malware_generic_005_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "                                                                                      RewriteCond %"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} {google|bing|slurp|msn|yahoo|bot|crawler|spider"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "/wp-cache.php?p=$1 L"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "/wp-stat\\.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_008_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "/wp-stat.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_008_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteRule ^(.*)$ wp-"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "/webdirect.php?link=$1"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "?$3$1=$2&%{QUERY_STRING}"
        $s5 = ".*P.*L.*-.*J.*PH"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_malware_generic_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{REQUEST_URI}%{QUERY_STRING} valium"
    condition:
        $s0 and $s1
}

rule htaccess_malware_generic_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "AddHandler"
        $s1 = "DirectoryIndex Sux.html"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule htaccess_malware_generic_013 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "AddHandler"
        $s1 = /Options\s*Indexes\s*FollowSymLinks\s*DirectoryIndex\s*\w+\.(html?|phtml|js|php|asp)\s*(AddType\s*txt\s*\.php\s*AddHandler\s*txt\s*\.php|AddType\s*txt\s*\.html?\s*AddHandler\s*txt\s*\.html?)\s*(AddType\s*txt\s*\.php\s*AddHandler\s*txt\s*\.php|AddType\s*txt\s*\.html?\s*AddHandler\s*txt\s*\.html?)?\s*Options\s*\w+\s*(Options\s*\w+)?\s*ReadmeName\s*\w+\.txt/
    condition:
        $s0 and $s1
}

rule htaccess_malware_generic_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "<IfModule mod_rewrite.c>"
        $s4 = "RewriteRule ^(.*)\\/(gossaniferous)\\/([0-9]+)_([0-9]+).cgi$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_malware_generic_015 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Deny from all"
        $s2 = "suspected"
        $s3 = "|suspected)$\">"
        $s4 = /<FilesMatch[\s]*[^(]+\([^\)]+\|php\|PhP\|php5[^>]*\|suspected\)\$.>\s*Order\s*Allow,Deny\s*Deny\s*from\s*all\s*<.FilesMatch>/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_malware_generic_015_02 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "Deny from all"
        $s2 = "(py|exe|php)"
        $s3 = /<FilesMatch\s*\"\.\(py\|exe\|php\)\$\\">\s*Order\s*allow,deny\s*Deny\sfrom\sall\s*<.FilesMatch>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_malware_generic_015_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Deny from all"
        $s2 = "suspected"
        $s3 = "|suspected)$\">"
        $s4 = "<FilesMatch \"(index).php$\">"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_malware_generic_015_04 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "Deny from all"
        $s2 = "(phtml|php)$\">"
        $s3 = /\<FilesMatch\s*\"\.\*.\.\(phtml\|php\)\$\\">\s*Order\sAllow,Deny\s*Deny\sfrom\sall\s*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_malware_generic_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Allow from all"
        $s2 = "<FilesMatch \"^(postfs.php|votes.php|index.php|wjsindex.php|lock666"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Deny from all"
        $s2 = "suspected"
        $s3 = "|suspected)$\">"
        $s4 = "booking.php|^css.php|^shell.php|^alfa.php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_malware_generic_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Deny from all"
        $s2 = "suspected"
        $s3 = "|suspected)$\">"
        $s4 = "|^wpcss.php|^log.txt|^config.bak.php|^wpconfig.bak.php|^wp-1ogin_bak.php|^1ndex.php|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_malware_generic_019 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FollowSymLinks"
        $s1 = "Options Indexes FollowSymLinks"
        $s2 = "HeaderName fox.txt"
        $s3 = "DirectoryIndex foxnoindex.html"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_malware_generic_020 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FollowSymLinks"
        $s1 = "Options Indexes FollowSymLinks"
        $s2 = "HeaderName Fox.txt"
        $s3 = "DirectoryIndex foxNo.html"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_malware_generic_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Deny from all"
        $s2 = "suspected"
        $s3 = "php5|suspected"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_malware_generic_021_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Deny from all"
        $s2 = "(php|php5|phtml)"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_021_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Deny from all"
        $s2 = "(py|exe|php)"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_generic_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Allow from all"
        $s2 = "php5|suspected"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_safezone_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "/safezone"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_malware_safezone_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "/safezone [L,R=302]"
    condition:
        $s0 and $s1
}

rule htaccess_malware_wp_theme_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteRule . /wp-content/themes"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_phishing_block_bots_001 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "deny from 173.194."
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_phishing_block_bots_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{HTTP_REFERER} ^http(s)?://(www\\.)?http://safebrowsing-cache.google.com/.*$ [NC]"
        $s2 = "deny from 173.194."
        $s3 = "deny from google.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_phishing_block_bots_002 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "allow from 200"
        $s3 = "<Limit GET HEAD POST>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_phishing_block_bots_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "deny from virustotal.com"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_phishing_block_bots_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "# security-lab1.juniper.net "
    condition:
        $s0 and $s1
}

rule htaccess_phishing_block_bots_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "RewriteCond %{HTTP_REFERER} ^http(s)?://(www\\.)?http://safebrowsing-cache.google.com/.*$ [NC]"
    condition:
        $s0 and $s1
}

rule htaccess_phishing_denyusers_001 : phishing
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "<Limit GET POST>"
        $s2 = "deny from"
        $s3 = "## USER IP BANNING"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_Autodor_Wmsn_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "^robots.txt$ robots.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_cache_managed_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "ryIndex cache.managed.php"
        $s2 = "RewriteEngine On"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_clearcode_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "BEGIN SYSTEM API"
        $s2 = "myclearcode"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_doctorceme_ru_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "doctorceme.ru"
        $s2 = "doctorceme.ru/ [R,L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_doctorceme_ru_redirect_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "doctorceme.ru"
        $s2 = "404 http://doctorceme.ru"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_doorwayrewrite_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = ".php?p=$1-$2-$3-$4.html [L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_doorwayrewrite_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule ^list.xml$"
        $s2 = "RewriteRule ^goose-(.*).html$"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_doorwayrewrite_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = ".php?q=$"
        $s5 = "RewriteRule (.*"
        $s6 = ".*) /"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule htaccess_spamseo_doorwayrewrite_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "RewriteCond %{HTTP_REFERER} ^.*(google|ask|yahoo|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorwayrewrite_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "RewriteCond %{HTTP_REFERER} .*google.* [OR]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorwayrewrite_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "RewriteCond %{HTTP_REFERER} .*mail* [OR]"
        $s5 = "RewriteCond %{HTTP_REFERER} .*inbox*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_doorwayrewrite_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "##!!##!!##!!##!!##!!####!!##!!##!!##!!##!!##"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorwayrewrite_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{THE_REQUEST} ^[^/]*/index\\.php [NC]"
        $s4 = "RewriteRule ^shop/(.*)$ themes/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorwayrewrite_008_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %"
        $s3 = "RewriteCond %{REQUEST_FILENAME} !-f"
        $s4 = "RewriteRule .* client.php [L,QSA]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorwayrewrite_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "<IfModule mod_rewrite.c>"
        $s4 = "..*$ ?$2$4=$3&%{QUERY"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorway_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "php?ximg=$1&ext=$2 [L]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_doorway_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{ENV:REDIRECT_STATUS} 200"
        $s2 = "RewriteCond %{HTTP_USER_AGENT}"
        $s3 = "RewriteCond %{HTTP_REFERER}"
        $w0 = "Comodo\\ DCV)?$"
        $s4 = "RewriteRule ^("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and not $w0
}

rule htaccess_spamseo_doorway_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "&%{QUERY_STRING}[L]"
        $s3 = "..*$ ?$"
        $s4 = ")([0-9]+)..*$ ?$2$1=$3&%{QUERY_STRING}[L]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorway_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = ")([0-9]+)..*$ ?$2$1=$3&%{QUERY_STRING}[L]"
        $s3 = "RewriteRule ^([0-9]+)\\/([^\\d\\/]+)([0-9]+)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_003_03 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "&%{QUERY_STRING}[L]"
        $s3 = "SEMXW"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_003_04 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "&%{QUERY_STRING}[L]"
        $s3 = "..*$ ?$"
        $s4 = "RewriteRule ^([^\\d\\/]+)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorway_003_05 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "&%{QUERY_STRING}[L]"
        $s3 = "..*$ ?$"
        $s4 = "RewriteRule ^.*\\/.*\\/([^\\d\\/]+)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorway_003_06 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "file.php?$1=$2-$3 [L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_003_07 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteRule ^"
        $s3 = ".php?site=$1&id=$3&temp=$2 [L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_doorway_003_08 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "&%{QUERY_STRING} [L]"
        $s4 = /(RewriteRule \^[^\?]+\.php\?[\w]+=\$[^&\n]+&%\{QUERY_STRING\} \[L\][\s]*){2,}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorway_003_09 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "&%{QUERY_STRING}[L]"
        $s3 = "RewriteRule ^.*-.*-.*_([0-9]+)_([0-9]+)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_003_10 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "*$ ?$2$3=$4&%{QUERY_STRING}[L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_003_11 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "$ ?$2$1=$3&%{QUERY_STRING}[L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_003_12 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "$ ?$1$3=$2&%{QUERY_STRING}[L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "/([^\\.]+) /modules/mod_"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_doorway_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "index.php?smsite=$1&smid=$3&smtemp=$2 [L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".html$ index.php?tempweb=$1&smid=$2"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_doorway_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{HTTP_USER_AGENT} (google|yahoo|msn|aol|bing|snsbot)"
        $s4 = "RewriteRule ^index.php$ wp-content/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorway_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{ENV:REDIRECT_STATUS} 200"
        $s4 = "RewriteCond %{HTTP_USER_AGENT} ("
        $s5 = "RewriteCond %{HTTP_REFERER} ("
        $s6 = "RewriteRule ^.*$"
        $s7 = ".php [L]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule htaccess_spamseo_doorway_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "<IfModule mod_rewrite.c>"
        $s4 = "$ /include.php?id=$1 [L]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_doorway_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "]+)\\/.*=.*\\/$ ?$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_doorway_012 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = /RewriteEngine\s+On\s+RewriteRule\s.\..\(\w+\[a-z\]\+map.\.xml..\s*\w+\/\$1\s[^\s*]*\s+RewriteRule.\^\.\*\(sitemap.\.xml\)\$\s*\w+\/\$1\s\[[^\s*]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_google_verification_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = ")\\.html$ wp-content/"
        $s2 = "google(.*)\\.html$ wp-content/"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_google_verification_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "^google(.*)\\.html"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_google_verification_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)-(.*)\\.html$ "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_googleadservices_at_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{HTTP_ACCEPT} \"text/vnd.wap.wml|application/vnd.wap.xhtml+xml\" [NC,OR]"
        $s2 = "RewriteRule ^(.*)$ http://mobile.googleadservices.at [L,R=302]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_gopni3g_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule ^([A-Za-z0-9-]+).html$ story.php?hl=$1 [L]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_injector_045 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "RewriteCond %{REQUEST_FILENAME} !wp-include.php"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_injector_046 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = /RewriteRule.\..\w+\-\w+\.php/
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_injector_047 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{REQUEST_FILENAME} !-f"
        $s4 = ".xml(\\.gz)?$"
        $s5 = ".php?name=$1&%{QUERY_STRING} [L]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_injector_048 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{REQUEST_FILENAME} !-f"
        $s4 = "RewriteRule ^.+\\.txt$ http://"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_injector_049 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{REQUEST_FILENAME} !-f"
        $s4 = "about.php|radio.php|index.php|content.php|lock360.php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_pseudophplist_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "<FilesMatch \"\\.(php|inc)$\">"
        $s2 = "500 errors, https://mantis.phplist.com/view.php?id=9937"
        $s3 = ".php)$\">"
        $s4 = ".php|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{HTTP_USER_AGENT} ^1207.*|^3gso.*|^4thp.*|^501i.*|^502i.*|^503i.*|"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule (.*) /phpinfo.php"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_001_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{HTTP_REFERER} ^http://[w.]*([^/]+)"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_001_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule ^(.*)$ http://gerania.r"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_001_05 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "RewriteCond %{HTTP_USER_AGENT} (mini\\ 9.5|vx1000|lge\\ |m800|e860|u940|ux840|compal|wireless|\\ mobi|ahong|lg380|lgku|lgu900|lg210|lg47|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_001_06 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "http://trusted-online-casinos2014.com  [R=301,L]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_001_07 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT} android|avantgo"
        $s2 = "your|zeto|zte\\-) [NC]"
        $s3 = "RewriteRule ^$ http://"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_001_08 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule ^(.*)$ http://coding-paradise.ru"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "jpartner.org [L,R=302]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_002_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "hostedd.ru [L,R=302]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{HTTP_USER_AGENT} android"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} ^(1207"
        $s3 = "/top/top"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "aspx\\?jumpid=0sichm [NC]"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_006_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $s3 = "RewriteRule ^.*$ index.php [L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "seznam"
        $s3 = "redirect.php?"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "Redirect 301 / http"
        $s2 = "Redirect 301 / http://loading-loading"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "<action type=\"Rewrite\" url=\"bot.asp\""
        $s2 = "cript\" stopProcessing=\"true\">"
        $s3 = "<add input=\"{HTTP_USER_AGENT}\" pattern=\"Googlebot"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{HTTP_USER_AGENT} google [OR]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "/(.*)$ exploitation-ddene.php [QSA,L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "^(http\\:\\/\\/)?([^\\/\\?]*\\.)?(wordpress|twit|tweet"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_013 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "%{ENV:REDIRECT_STATUS}"
        $s5 = /RewriteCond\s*\%{HTTP_REFERER}\s*\([\|\s*googleyahoomsnaolbing]+\)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_014 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = /RewriteCond %\{HTTP_USER_AGENT}[\s]*(\"A|(\.\*))ndroid[^(]+RewriteRule \^\(\.\*\)\$ http/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = ".php?q=$"
        $s5 = /RewriteRule \^[^\s]+\(\.\*\)\$[\s]*[^\.]+\.php\?q=\$1[\s]*\[L\]/
        $s6 = /RewriteCond %\{REQUEST_FILENAME\}[^\n]+[\s]*RewriteRule \^[^\s]+\(\.\*\)\$[\s]*[^\.]+\.php\?q=\$1[\s]*\[L\]/
        $s7 = ".php?q="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_015_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = ".php?q=$"
        $s5 = /RewriteRule \^[^\s]+\(\.\*\)\$[\s]*[^\.]+\.php\?q=\$1[\s]*\[L\]/
        $s6 = "php?q=$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule htaccess_spamseo_redirect_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "RewriteCond %{REQUEST_URI} !(\\.css|\\.js|\\.png|\\.jpg|\\.gif|robots\\.txt|\\.tmps|\\.php|\\.txt|\\.html)$ [NC]"
        $s5 = "/(.*)$ wp-content/plugins/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_017 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "<IfModule mod_rewrite.c>"
        $s4 = ".html$ index.php?web="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_018 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} (google|yahoo"
        $w0 = "Comodo\\ DCV)?$"
        $s3 = /RewriteCond\s\%\{HTTP_USER_AGENT\}\s\(google\|yahoo[^\)]*\)\s+\[OR\]\s+RewriteCond\s\%\{HTTP_REFERER\}\s\(google\|/
    condition:
        $s0 and $s1 and $s2 and $s3 and not $w0
}

rule htaccess_spamseo_redirect_019 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "?$1$2=$3&%{QUERY_STRING}[L]"
        $s5 = "RewriteRule ^.*([^\\d\\/]+)\\/([0-9]+)-([0-9]+)\\/(.*)-.*\\/.*."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_020 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "^GET$"
        $s4 = "!^.*(exactseek|Feed|Fetch|"
        $s5 = "^(http\\:\\/\\/)?([^\\/\\?]*\\.)?(tweet|twit|linkedin"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_021 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "?degasify$3=$1&%{QUERY_STRING}[L]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_022 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $s3 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[(NC|OR),(NC|OR)\]\s*RewriteCond\s*\%{HTTP_REFERER}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*RewriteRule\s*\^\(\.\*\)\$\s*\w+\.\w+\s*\[L,QSA\]/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_023 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "RewriteRule ^(.+).html$ wp-content/languages/img/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_024 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = ")([0-9]+)\\/nsx([0-9]+)\\/(.*)$ ?"
        $s5 = "RewriteRule ^\\/(.*)("
        $s6 = /\$[\d]=\$[\d]&%\{QUERY_STRING\}\[L\]/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule htaccess_spamseo_redirect_030 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{HTTP_USER_AGENT} android"
        $s2 = "RewriteRule ^$ http://crazytds.club"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_031 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "USER_AGENT} !(windows\\.nt|bsd|x11|unix|macos|macintosh|playstation|google|yandex|bot|libwww|msn|america|avant|download|fdm|maui|webmoney|windows-media-player) [NC]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "####GET####"
        $s5 = "RewriteRule \\.(jpg|png|gif|jpeg|bmp)$ - [L]"
        $s6 = "RewriteCond %{HTTP_USER_AGENT} !windows-media-player [NC]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_033 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $s3 = "RewriteRule ^(.*)$ default.php?$1 [L,QSA]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_034 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "RewriteRule ^hot/(\\w+)i\\d+\\.do$ /wp-content/plugins/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_035 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "deny from all"
        $s4 = "?key=5ed88d80c7ee4458c3714a64ef5203b4"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_036 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteCond %{HTTP_ACCEPT} \"text/vnd.wap.wml|application/vnd.wap.xhtml+xml\" [NC,OR]"
        $s2 = /RewriteEngine On[\s]*RewriteCond %\{HTTP_ACCEPT\} \"text.vnd.wap.wml\|application.vnd.wap.xhtml\+xml\" \[NC,OR\][\s]*(RewriteCond %\{H[^\n]+\][\s]*){2,}RewriteRule \^\(\.\*\)\$ http[^\]]+\]/
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_037 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{REQUEST_URI} \\.htm$"
        $s4 = "RewriteCond %{REQUEST_URI} !.+/.*"
        $s5 = "RewriteRule ^(.*)$ wp-content/uploads/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_039 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "RewriteRule ^(cram|exam|prep|notes|pdf|site)-(.*)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_040 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{HTTP_USER_AGENT} Googlebot [OR]"
        $s4 = "RewriteCond %{HTTP_REFERER} (yahoo|msn|aol|bing|google)"
        $s5 = "RewriteCond %{REQUEST_URI} !^.*\\.(jpg|css|js|gif|png|css|js|xml)$ [NC]"
        $s6 = "RewriteRule ^(.*)$ "
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule htaccess_spamseo_redirect_041 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} IEMobile [OR]"
        $s3 = "RewriteCond %{HTTP_USER_AGENT} Googlebot [OR]"
        $s4 = "RewriteCond %{HTTP_USER_AGENT} BingBot [OR]"
        $s5 = "RewriteRule !.php$ http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_042 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "RewriteRule ^(.*)--(devata)([0-9"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_043 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "&%{QUERY_STRING}[L]"
        $s5 = "(.*)--("
        $s6 = /RewriteRule \^[^\*\n]*\(\.\*\)--\([\w]+\)[^\$]+\(\.\*\)\$[\s]*\?[\w]+\$[\d]+=\$[\d]+&%\{QUERY_STRING\}\[L\]/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule htaccess_spamseo_redirect_044 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "^([A-Za-z0-9-]+).html$ http"
        $s4 = "^([A-Za-z0-9-]+).txt$ http"
        $s5 = "RewriteCond %{REQUEST_FILENAME}"
        $s6 = "RewriteRule . http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule htaccess_spamseo_redirect_045 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{HTTP_REFERER} (google|facebook|twitter"
        $s4 = "RewriteCond %{REQUEST_URI} .____.  [NC]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_046 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "RewriteRule . /indeeex.php [L]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_047 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = ".php?key=$1 [L]"
        $s5 = "RewriteRule ^wp\\-content/.*\\.(php[1-7]?|pht|phtml?|phps)\\.?$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_048 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = ".php(.*) http:"
        $s5 = "RewriteCond %{HTTP_USER_AGENT} (.*Googlebot.*|.*Yahoo!"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_049 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteCond %{REQUEST_URI} !/(cc)\\.php [NC]"
        $s3 = "RewriteCond %{REQUEST_URI} !/(ss)\\.php [NC]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_050 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^([A-Za-z0-9-]+).html$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_051 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*).html$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_053 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $s3 = "RewriteCond %{HTTP_REFERER} ("
        $s4 = "RewriteCond %{HTTP_USER_AGENT} ("
        $s5 = /(RewriteCond %\{HTTP_[\w]+\} \(((bing|google|yahoo|msn|aol)\|){3,}[^\n]*[\s]*){2,}(RewriteCond %[^\n]+[\s]*)*RewriteRule[^\n]+L[^\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_054 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "getyourprizenow"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_055 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $s3 = "RewriteRule . default.php [L,S=10000]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_057 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^.+\\.txt$ https://bit.ly"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_058 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = ".php$ - [L]"
        $s4 = "RewriteCond %{HTTP_REFERER} (yahoo"
        $s5 = ".inc.php [L,S=10000]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_059 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "smsite=$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_060 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteCond %{HTTP:X-Wap-Profile} ^.+$ [OR]"
        $s4 = "RewriteCond %{HTTP_USER_AGENT} (android|iphone|ipod|ipad) [NC]"
        $s5 = "RewriteRule ^(.*)$ http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_gen_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_ACCEPT} \"text/vnd.wap.wml|application/vnd.wap.xhtml+xml\" [NC,OR]"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "RewriteRule ^(.*)$ http://"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_gen_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "in/go.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "%{HTTP_REFERER} ^http://[w.]*([^/]+"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_REFERER} ^.*(go"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_005 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "msnbot|Libwww-perl|FAST|Baidu"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_006 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "/common.php [L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "/go.php?sid="
        $s3 = "/go.php?sid="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_gen_008 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{REMOTE_ADDR}      !^66\\.249."
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_009 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "!^.*nUN.*$ [NC]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_010 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "#apachecodes"
        $s2 = "RewriteCond %{HTTP_REFERER}"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_011 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_REFERER} .*(msn|live|altavista|excite|ask|aol|google|mail|bing|yahoo).*$ [NC]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_012 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{REQUEST_URI} (ciali|viag|propec)"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_013 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} android [NC"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_013_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} \"Android\" [NC"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_013_03 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} \"android\" [NC"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_013_05 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = ".cgi?default [L,R=302]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_gen_013_06 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "RewriteCond %{HTTP:x-operamini-phone-ua} .+ [NC,OR]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_redirect_gen_014 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "Redirect 302 /betonmarkets http"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_gen_015 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "/index.php?cx=$1"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_016 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "\"MSIE|Trident|iPhone|Presto\""
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_016_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^(.*)$ http://194.6.233"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_017 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "/wp-maps/index.php [NC,L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_018 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "modules/system/system.php?$1 [L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_019 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "/ms/$1\\.php [L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_020 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = ".php?uu=$1-$2-$3 [L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_021 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "/mobiledirect/?aid=35509&uid=2477 [R=301,L]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_022 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_USER_AGENT} \"Android|MSIE|Trident|Edge\" [NC]"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_023 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{REQUEST_URI} (viagra|cialis|levitra"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_024 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "http://osta-x.ru"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_025 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "[NE,L,R=302]"
        $s3 = "RewriteCond %{HTTP_USER_AGENT} .*alcatel.*|.*android.*|.*BlackBerry.*|.*ericsson.*|.*htc.*|.*Huawei.*|.*ipad.*|.*iphone.*|.*iPod."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_gen_026 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "RewriteCond %{QUERY_STRING} !^desktop"
        $s3 = "RewriteRule ^$ http:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_redirect_gen_027 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %{HTTP_REFERER} (google|aol|yahoo|msn|search|bing|Seznam|seznam)"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_028 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^(.*)$ 1.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_029 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "preg_match(\"/RewriteRule"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_030 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule ^([a-zA-Z0-9]+)-(.*)-([0-9]+)\\.htm$ file.php?$1=$2-$3 [L]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_redirect_gen_031 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "futility-few.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = " ?$1$3=$4&%{QUERY_STRING}[L]"
        $s4 = ")_.*_.*-.*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_034 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Document 40"
        $s1 = /40\d[\s]*http/
        $s2 = "\x09\x09ErrorDocument 40"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_035 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Document 40"
        $s1 = /40\d[\s]*http/
        $s2 = "404 http://toptanbayangiyim.com"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_036 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "text/vnd.wap.wml|application/vnd.wap.xhtml\\+xml"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_037 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "<IfModule mod_rewrite.c>"
        $s4 = "RewriteRule .* "
        $s5 = /RewriteEngine\s+[Oo][Nn]\s+RewriteCond\s+%{HTTP:Accept-Language}\s*\(\w+\)\s+\[[^]]+\]\s+RewriteRule \.\* /
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule htaccess_spamseo_redirect_gen_038 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "<IfModule mod_rewrite.c>"
        $s4 = "^.*[-/]n(\\d+)-.*$ index\\.php?id=$1&%{QUERY_STRING}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_039 : spamseo
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = /[\t]{30,}RewriteRule/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_redirect_gen_040 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond %.HTTP_USER_AGENT}.{300,}\[NC,OR\][\s]*RewriteCond %.HTTP_USER_AGENT} \^.{1000,}\[NC\][\s]*RewriteRule \^\$ http[^,]+\[R,L\]/
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_041 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^(.*)$  service/"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_redirect_gen_042 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = "{HTTP:X-Wap-Profile}"
        $s3 = "vnd.wap.wml"
        $s4 = "RewriteRule ^(.*)$ https://tinyurl.com/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_rediret_001_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "mob-update.ru"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_rediret_001_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "updatemaster.net"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_serverjump_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "serverjump"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_suspiciousrewrite_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = ")\\.html$ wp-content/"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_suspiciousrewrite_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^ugg-(.*).html$"
        $s3 = "/js/cache/index.php?keyurl=$1"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule htaccess_spamseo_suspiciousrewrite_003 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = /RewriteRule \^[\d]{6,}.\(\.\*\)\$[\s]*[^[]+\.php[\s]*\[QSA,L\]/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule htaccess_spamseo_suspiciousrewrite_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteCo"
        $s2 = "RewriteCond %"
        $s3 = "RewriteCond %{REQUEST_FILENAME} !-f"
        $s4 = "RewriteRule .*.html?$ index.php [L]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule htaccess_spamseo_suspiciousrewrite_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "fwrite($htout, \"RewriteEngine On"
        $s5 = "fclose($"
        $s6 = "RewriteRule"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule htaccess_spamseo_suspiciousrewrite_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Allow from all"
        $s2 = "|^adminsindex.php|^adminindex.php)$\">"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_wp404_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "wp-404.php"
        $s2 = "*) wp-404.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_wp404_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "wp-404.php"
        $s2 = ")$ wp-404.php"
    condition:
        $s0 and $s1 and $s2
}

rule htaccess_spamseo_wplicence_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule ^info/(.*)$ wp-licence.php [L]"
    condition:
        $s0 and $s1
}

rule htaccess_spamseo_wp_content_rewrite_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = ")\\.html$ wp-content/"
        $s2 = "([0-9]+)\\.html$ wp-content/"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_0xfans_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>0xfans"
    condition:
        $s0 and $s1
}

rule html_defaced_Absent_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "HACKED BY"
        $s2 = "HACKED BY Absent"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_AchanDotID_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = ">[#] Achan Dot ID"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_anonymous_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "We are Anonymous"
    condition:
        $s0 and $s1
}

rule html_defaced_berdendangc0de_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "BerdendangC0de"
    condition:
        $s0 and $s1
}

rule html_defaced_BFA_001_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "H!tl3r007"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_BFA_001_02 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Hitler007"
    condition:
        $s0 and $s1
}

rule html_defaced_BGHH_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "<link rel=\"shortcut icon\" href=\"http://error-404.ucoz.com/bghh.jpg\" type=\"image/x-icon\""
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_BGHH_001_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Emau Jinak</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_bloodsec_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">BloodSec International"
    condition:
        $s0 and $s1
}

rule html_defaced_c0der_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<u><b>Fucked By C0der"
    condition:
        $s0 and $s1
}

rule html_defaced_Cpanel404_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "<!-- Cpanel404 -->"
    condition:
        $s0 and $s1
}

rule html_defaced_Cyb3rSw0rd_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "alert("
        $s1 = "alert('Access Denied! Protected By Cyb3r Sw0rd!')"
    condition:
        $s0 and $s1
}

rule html_defaced_cyber_hats_crew_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Cyber Hats Crew"
    condition:
        $s0 and $s1
}

rule html_defaced_CyberHeroez_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "href=\"http://cyberheroez.ddos.im/ico.png"
    condition:
        $s0 and $s1
}

rule html_defaced_cyberpunkshackers_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "\"Cyberpunks Hackers 2007"
    condition:
        $s0 and $s1
}

rule html_defaced_devil_security_crew_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Devil Security Crew<"
    condition:
        $s0 and $s1
}

rule html_defaced_DkBrazil_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "Gtz : BEC  - Defacer killers - Bonde Dos killers"
    condition:
        $s0 and $s1
}

rule html_defaced_DotID_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "Jagad Dot ID"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_expiredpastebin_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Pastebin.com - Page Removed"
    condition:
        $s0 and $s1
}

rule html_defaced_GeNErAL_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "GeNErAL"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_020 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "%22Hacked%20By%20"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_022 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "<TITLE>./pwned</TITLE>"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_025 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "[+] We Hack This Site To Inform About"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_026 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "<meta name=\"keywords\" content=\"kmq@hotmail.com kna@hotmail.com"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_029 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title> ~OWNED"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_031 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "var msg  = \"This Website Hacked By"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_032 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>#DEFACED By"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_044 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "EMEGE SAYGIN OLSUN BIRAZ"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_046 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>-=[ The Crows Crew ]=-</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_051 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "ESTE SITIO A SIDO HACKEADO by [YEI ZETA]"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_051_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "ESTE SITIO ESTA EN NUESTRAS MANOS."
    condition:
        $s0 and $s1
}

rule html_defaced_generic_054 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Moroccan Attacker"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_059 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = ">Bangladesh Cyber Army"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_060 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>OP Payback"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_062 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>K4RDAN4DAM"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_067 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "[+] Indonesian Defacer Newbie"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_068 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Arabia Hackers<"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_070 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "+++An Indian Hacker"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_072 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "<h1>PwnEd by : "
    condition:
        $s0 and $s1
}

rule html_defaced_generic_073 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">ACCESO DENEGADO, DESFACEADA"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_074 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>0wn3d "
    condition:
        $s0 and $s1
}

rule html_defaced_generic_075 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">./Albanian Attackers<"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_075_02 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">./DeFaceD<"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_076 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>[!] STAMPED BY"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_079 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">.: ! Owned"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_080 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "/AzerbaijanDefacersGroup/\""
    condition:
        $s0 and $s1
}

rule html_defaced_generic_081 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">[!] Own3d"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_082 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Pawned By"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_084 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>F.B.S!"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_085 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "Team Was here [+] <"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_086 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Anniversary Cinta :*<"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_087 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "HACKTEAM<"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_091 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>You Lose"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_092 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>.::[+] Defaced"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_093 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Hacker Rulez"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_095 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Tested by ./cLaw"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_097 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Orang Govlog :v"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_099 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Ow3nd"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_101 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>[ Fast Deface ]"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_102 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>#Pwned</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_103 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>[Mister][Spy]"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_104 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Hcked By"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_105 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Tr4xb0y ownz you"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_106 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Indonesian Freedom Security"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_107 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>~pwn3d"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_108 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Zikter Here"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_109 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "reet"
        $s1 = "Kamu Bajingan"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_110 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "<code>MY FRIENDS"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_111 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "<title>Xai Syndicate"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_112 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "<title>PwnZ by"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_113 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Ayy\xc4\xb1ld\xc4\xb1z Tim"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_114 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>BLACK ILLUSION SECURITY"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_115 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "hacker by .moncef"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_116 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "Defaced by BILGEKULTIGIN</H1>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_118 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title> Who_Cares?"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_119 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>0x00"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_121 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "Muhamad Irhash Syn's <"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_defaced_generic_122 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Egyptian Information Security Team"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_123 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>cr000tz"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_128 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "Hacked by G_OUULL"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_130 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "Edited By KingDefacer"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_132 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "Deadrz_404"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_135 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>p0r7s</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_136 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>x-m0bY"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_137 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "HACKED BY SKYNET<"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_138 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Siber Konseyi / Mass </title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_139 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>-=> Qu4t4ck0"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_140 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Cvar1984</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_141 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>T0uch3d"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_142 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>TurkHackTeam"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_143 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Mr.AL Was Here</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_144 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Free Gaza"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_145 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "5F%69%66%72%65%6C%65%79%69%63%69"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_defaced_generic_146 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Dear Admin your Website"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_147 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Virus and Trojan</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_148 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">H4CK3R N4O U5A"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_149 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "InFamouz Was Here"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule html_defaced_generic_150 : defaced
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CK"
        $s1 = /^[\s]*HACKED/
    condition:
        $s0 and $s1
}

rule html_defaced_generic_152 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "<title>hacked by hector"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_153 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "ALPHRA87"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_154 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Khazekira AR"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_155 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>PacmanCorp"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_156 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Ayy\xc4\xb1ld\xc4\xb1z Tim"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_157 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "0wn3d by"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_158 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "DEFACE BY"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_159 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "GalaxyXploiterTeam"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_160 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "pwnd by"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_161 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AYYILDIZ"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_162 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Rooted by"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_163 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = ">Payloud by"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_164 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>touch by"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_165 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "document.write%28unescape%28%22%253Cscript%"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_166 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Touched By Root"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_167 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Lutfie404"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_168 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Gambrush"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_170 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "./Xlion<"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_171 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<p style"
        $s2 = "remotexdesktopshopv2</a>"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_172 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Iran Cyber Security Group"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_173 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = "GrayHat Phantom"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_174 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = ">Spamtools.io"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_175 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Kissed by Gunawan"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_176 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "UnknownSec"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_177 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>pwned</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_generic_178 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "://anthack."
        $s2 = "Aslan Neferler Tim"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_generic_179 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Touched By "
    condition:
        $s0 and $s1
}

rule html_defaced_generic_180 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "playAudio("
        $s3 = "Hacked by"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_defaced_ghostsec_team_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "<title>GHOSTSEC-TEAM |"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_gokturk_ordusu_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "rk Ordusu</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_Hmei7_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "only mail, n1cedre4m[at]yahoo[dot]com"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_HorrorScary_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>./HorrorScary Was Here</title>"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "| Indonesia Cyber Army"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SYSTEM LEMAH"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_003 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Indonesia To World Team"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_004 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Dispotube Indonesia"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_005 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>IndonesianPeople!"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_006 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "WE ARE DEFACER INDONESIA"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_indonesia_007 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "INDONESIAN DEFACER"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_008 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "IndoGhostSec<"
    condition:
        $s0 and $s1
}

rule html_defaced_indonesia_009 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "XenboyOfficial<"
    condition:
        $s0 and $s1
}

rule html_defaced_jemroot_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>JemROOT"
    condition:
        $s0 and $s1
}

rule html_defaced_JOK3R_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "<h1>In The Name Of Allah</h1>"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_l0s4r_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "l0s4r"
    condition:
        $s0 and $s1
}

rule html_defaced_lolzsec_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "by LolzSec<"
    condition:
        $s0 and $s1
}

rule html_defaced_madleets_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "href=\"http://www.MadLeets.com\">"
    condition:
        $s0 and $s1
}

rule html_defaced_Malaysia_Defacer_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "content=\"Malaysia Defacer"
    condition:
        $s0 and $s1
}

rule html_defaced_monkeybluffy_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Monkey B Luffy"
    condition:
        $s0 and $s1
}

rule html_defaced_MonstersDefacers_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = ">:: MonstersDefacers Team ::"
    condition:
        $s0 and $s1
}

rule html_defaced_MrAhmed_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "alert("
        $s1 = "alert(\"                ..:: HaCkeD By Mr-Ahmed"
    condition:
        $s0 and $s1
}

rule html_defaced_muslim_army_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "message[22] = \"Albalooshi\";"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_owned_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "XaiSyndicate"
    condition:
        $s0 and $s1
}

rule html_defaced_owned_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "by iaM<"
    condition:
        $s0 and $s1
}

rule html_defaced_owned_003 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "by STMIK"
    condition:
        $s0 and $s1
}

rule html_defaced_owned_004 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "DayWalker"
    condition:
        $s0 and $s1
}

rule html_defaced_owned_005 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = ">Owned By Ante"
    condition:
        $s0 and $s1
}

rule html_defaced_owned_006 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "r00t"
    condition:
        $s0 and $s1
}

rule html_defaced_owned_007 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "GreetZ"
    condition:
        $s0 and $s1
}

rule html_defaced_owned_008 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ":Owned:"
    condition:
        $s0 and $s1
}

rule html_defaced_p0r7s_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">p0r7s"
    condition:
        $s0 and $s1
}

rule html_defaced_people_hurt_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>people_hurt |"
    condition:
        $s0 and $s1
}

rule html_defaced_persiangig_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "<script type=\"text/javascript\" src=\"http://hellox.persiangig.com/DefacePage/"
    condition:
        $s0 and $s1
}

rule html_defaced_ph_haxxors_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "<h1 style=color:Red;>YOUR SYSTEM'S SECURITY HAS BEEN SHUTTED DOWN!"
    condition:
        $s0 and $s1
}

rule html_defaced_pwnd_by_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Pwnd by"
    condition:
        $s0 and $s1
}

rule html_defaced_redsecurity_group_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Red-Security Group"
    condition:
        $s0 and $s1
}

rule html_defaced_Red_Viper_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Red V!per Was HeRe"
    condition:
        $s0 and $s1
}

rule html_defaced_shgaaoi_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "From : Hell"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_sinan_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "http://i.hizliresim.com/EYL999.png"
    condition:
        $s0 and $s1
}

rule html_defaced_sp4mp3d_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sp4mp3d By"
    condition:
        $s0 and $s1
}

rule html_defaced_TurkHackTeam_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "www.turkhackteam"
    condition:
        $s0 and $s1 and $s2
}

rule html_defaced_TurkHackTeam_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Anka Neferler Tim"
    condition:
        $s0 and $s1
}

rule html_defaced_ZasieuN_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "%3C%74%69%74%6C%65%3E%5A%61%73%69%65%75%4E%20"
    condition:
        $s0 and $s1
}

rule html_dropper_kingtranslate_001 : dropper
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "base href=\"http://lp.kingtranslate.com"
    condition:
        $s0 and $s1
}

rule html_hacktool_generic_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Havij - Report<"
    condition:
        $s0 and $s1
}

rule html_hacktool_generic_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>:: k2ll33d ::</title>"
    condition:
        $s0 and $s1
}

rule html_hacktool_mailer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Mailer by Sphinx"
    condition:
        $s0 and $s1
}

rule html_hacktool_mailer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title> Inbox kabylieteam </title>"
    condition:
        $s0 and $s1
}

rule html_hacktool_mailer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "obfuscator.obfuscate(document.getElementById("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_hacktool_ppcheck_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>PayPal Account Checker - "
    condition:
        $s0 and $s1
}

rule html_hacktool_social_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = ">Panel Liker Instagram"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_hacktool_uploader_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "&nbsp; Evil Upload !!! </div>"
    condition:
        $s0 and $s1
}

rule html_iframe_flashinject_001 : iframe
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "/swf.swf?myid="
    condition:
        $s0 and $s1
}

rule html_iframe_generic_001 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "analitics1.in"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_002 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "/counter.php\" > </iframe><!--"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_003 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".dyndns.info/"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_004 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = ");}$_0=$GLOBALS['_"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_005 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<!-- counter --><script language="
    condition:
        $s0 and $s1
}

rule html_iframe_generic_006 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "_on*/ $"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_007 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "Twitter"
        $s2 = "<iframe name=Twitter scrolling=auto"
    condition:
        $s0 and $s1 and $s2
}

rule html_iframe_generic_008 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "</iframe><!--/"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_009 : iframe
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = ".split(\\\"\\\").reverse().join(\\\"\\\"));"
    condition:
        $s0 and $s1 and $s2
}

rule html_iframe_generic_010 : iframe
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "if ($getArrWPForm[$urlWPThemeIndex]) echo \"$getArrWPForm[$urlWPThemeIndex]\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule html_iframe_generic_012 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "chura.pl/rc/\""
    condition:
        $s0 and $s1
}

rule html_iframe_generic_013 : iframe
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "src=\"http://cort.as/O2Ak"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_014 : iframe
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<iframe"
        $s1 = ".cgi?default\" width=0"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_015 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "iframe/index.php\" width=\"0\" height=\"0\" align=\"left\"></iframe>"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_016 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "src=\"http://stats3244-toolbar-google.ru/"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_017 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src=\"http://lskogujft"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_019 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "/hide.php"
    condition:
        $s0 and $s1
}

rule html_iframe_generic_021 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = "<iframe src=\"<?php echo file_get_contents('http:"
    condition:
        $s0 and $s1 and $s2
}

rule html_iframe_google_ru_in_cgi_001 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "google.ru/in.cgi"
    condition:
        $s0 and $s1
}

rule html_iframe_wsapro_001 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src=\"http://web-service-amazon.pro/"
    condition:
        $s0 and $s1
}

rule html_injected_hcifx_001 : injected
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "src=\"http://www.hcifx.com/"
    condition:
        $s0 and $s1
}

rule html_injected_scounter_002 : injected
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "<!--scounter-->"
    condition:
        $s0 and $s1
}

rule html_malware_challs_uploader_interface_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "function challs_flash_update()"
    condition:
        $s0 and $s1
}

rule html_malware_cssbehavior_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "style=\"\\64\\69\\73\\70\\6c\\61\\79:\\6e\\6f\\6e\\65\""
    condition:
        $s0 and $s1
}

rule html_malware_dropper_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "/downloader/js"
    condition:
        $s0 and $s1
}

rule html_malware_dropper_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = ">The \"HoeflerText\" font wasn't found.<"
    condition:
        $s0 and $s1 and $s2
}

rule html_malware_dropper_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "createElement"
        $s2 = "src=\"//wibeee.com.ua"
    condition:
        $s0 and $s1 and $s2
}

rule html_malware_email_checker_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Dexter Checker</title>"
    condition:
        $s0 and $s1
}

rule html_malware_fake_jquery_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "http://gccanada.com/jquery.js"
    condition:
        $s0 and $s1
}

rule html_malware_fake_jquery_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "king.cash"
    condition:
        $s0 and $s1
}

rule html_malware_fake_jquery_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "/js/jquery.min.php"
        $s4 = "/js/jquery.min.php?"
        $s5 = ");if(document.referrer.indexOf(location.protocol+\"//\"+location.host"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule html_malware_fake_jquery_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "/js/jquery.min.php"
        $s4 = "/js/jquery.min.php'"
        $s5 = "&utm_campaign"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule html_malware_fake_jquery_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "<!-- . --><script"
        $s2 = ".min.js\"></script><!-- ."
    condition:
        $s0 and $s1 and $s2
}

rule html_malware_fakeCDN_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "securemaxcdn.com"
    condition:
        $s0 and $s1
}

rule html_malware_g00_co_003_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "src=\"http://g00.co/BtFVPd\""
    condition:
        $s0 and $s1
}

rule html_malware_goo_gl_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x68\\x74\\x74\\x70\\x73\\x3a\\x2f\\x2f\\x67\\x6f\\x6f\\x2e\\x67\\x6c\\x2f"
    condition:
        $s0 and $s1
}

rule html_malware_iframe_glendaleoffice_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<IFRAME SRC=\"http://glendaleoffice.com/"
    condition:
        $s0 and $s1
}

rule html_malware_img_src_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "/2c3r\" style"
    condition:
        $s0 and $s1
}

rule html_malware_log_viewer_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>!LOG VIEW!"
    condition:
        $s0 and $s1
}

rule html_malware_malvertising_sharebutton_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "sharebutton"
        $s2 = "document.write('<script src=\"//cdn.script.to/share"
    condition:
        $s0 and $s1 and $s2
}

rule html_malware_multi_encryption_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "%25%36%39%25%37%30%25%37%34%25%33%45%27%29%29%3B%0A%2F%2F%2D%2D%3E%0A%3C%2F%53%63%72%69%70%74%3E'));"
    condition:
        $s0 and $s1
}

rule html_malware_online_sale24_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "online-sale24.com/1.js'></script>"
    condition:
        $s0 and $s1
}

rule html_malware_tagcloudgenerator_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "src=\"http://www.tag-cloud-generator.com/"
    condition:
        $s0 and $s1
}

rule html_phishing_126_com_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "\"Location:http://mail.126.com/\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_126_com_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "\"http://reg.163.com/"
        $s2 = ".php"
        $s3 = "<script id=\"jsBase\" type=\"text/javascript\" src=\"http://mimg.127.net/index/lib/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_163_com_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location:http://vip.163.com/\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_163_com_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "\"Location:http://mail.163.com/\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_163_com_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "\"http://reg.163.com/"
        $s2 = ".php"
        $s3 = "href=\"http://reg.163.com/getpasswd/RetakePassword.jsp?from="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_1and1hosting_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>1&amp;1 Kunden-Login"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in - Adobe "
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Adobe Sign In</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "*Your Email Provider Requires Authentication* *Please Login to View Document*"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_adobe_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Adobe PDF</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Adobe Document Cloud<"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "ocation: https://acrobat.adobe.com/"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule html_phishing_adobe_007 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = /<title>[\s]*[Pp]rivate[\s]*[Oo]nline[\s]*PDF[\s]*[Ff]ile</
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Ad0be Document Cloud"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Adobe Document"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Adobe Online"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "Adobe Online Services"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_adobe_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Please Hold...Checking Info</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Share Point Online</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_adobe_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%0A%3Ctitle%3EAdobe%20Online%20Viewer"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_alibaba_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<form action=\"alilogon.php\" method=\"post\">"
    condition:
        $s0 and $s1
}

rule html_phishing_alibaba_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Alibaba&nbsp;Manufacturer&nbsp;Directory&nbsp;-"
        $s3 = ">Login to Message Center<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_alibaba_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Alibaba&nbsp;Manufacturer&nbsp;Directory&nbsp;-"
        $s3 = "invalid username or password"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_alibaba_002_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Alibaba&nbsp;Manufacturer&nbsp;Directory&nbsp;-"
        $s3 = "javascript:void(0);\">Sign in to Alibaba.com</a>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_alibaba_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<title>Alibaba&nbsp;Manufacturer"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_alibaba_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Alibaba&nbsp;Manufacturer"
    condition:
        $s0 and $s1
}

rule html_phishing_alibaba_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "&#38463;&#37324;&#24052;&#24052;&#29992;&#25143;&#21327;&#35758;"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_allegro_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "moda.allegro"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_amazon_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "<title>Amazon Billing Center"
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "onsubmit=\"var test1 = apCheckRequiredFields('ap_signin_form', ['ap_email','ap_password']);"
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "<div id=\"ap_signin1a_forgot_password_row\""
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "<title>Amazon.com - Your Account</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "Do you have an Amazon.com password?</b>"
        $s2 = "href=\"https://www.amazon.com/gp/css/account/forgot-password/email.html"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_amazon_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "Please enter your Amazon Password"
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_006_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "alert(\"Invalid Card number. Please check your entry.\")"
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "Amazon.com Inc or its affiliates</span>"
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "<title>Amazon Sign ln</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_amazon_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "HTTP-EQUIV=\"Refresh"
        $s2 = "jtdeal.in"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_amazon_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>FreakzBrothers: Amazon</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_amazon_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Amazon"
        $s2 = "<title dir=\"ltr\">      Amazon"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_ameli_fr_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "onclick='bookmarksite(\"Compte Ameli\",\"https://assure.ameli.fr:443https://assure.ameli.fr/PortailAS/"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "http://happycdou.com/afters/grittier.js"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "American Express Credit Cards, Rewards"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<meta http-equiv=\"refresh\" content=\"4;URL=http://www.americanexpress.com\" />"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_005 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "href=\"myca/acctmgmt/us/myaccountsummary.do?request_type=authreg"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "document.location.href = '/americanexpress"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_americanexpress_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>American Express US: Thank you"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "accesskey=\"0\" title=\"\" href=\"https://www.americanexpress.com/?inav=NavLogo"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_008_01 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:'.$m.$i.'/z.html');"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>American Express Company"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>American Express"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_americanexpress_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">American Express - Login"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&#65;&#109;&#101;&#114;&#105;&#99;&#97;&#110;&#32;&#69;&#120;&#112;&#114;&#101;&#115;&#115;"
    condition:
        $s0 and $s1
}

rule html_phishing_americanexpress_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>American Express</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_anz_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "ANZ Internet Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_aol_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AOL"
        $s2 = "<title>AOL Mail: Simple, Free, Fun</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Aol"
        $s2 = "<title>Aol Verefication"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "A0L"
        $s2 = "<title>A0L SIGN IN</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AOL"
        $s2 = "<title>AOL Sign In"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AOL"
        $s2 = "<title>- AOL"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "<TITLE>Aol Billing Center"
    condition:
        $s0 and $s1
}

rule html_phishing_aol_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AOL"
        $s2 = "<title>Welcome to AOL.com Customer Support"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "A0L"
        $s2 = "<title>_A0L"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AOL"
        $s2 = "<title>AOL</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AOL"
        $s2 = "<title>AOL - login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_aol_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>AOL Mail, AOL Mail Login, AOL Sign in"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_001_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Apple - M"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_001_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: restore.html?appId="
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_001_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: finish.html?appId="
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_001_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$subj = \"Infos 3: $ip / $password\";"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_001_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = ">Your Apple ID gives you easy access to"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_001_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Apple - Confirmation Your Account Information"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_001_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: http://www.apple.com"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_001_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: sign_in.html?appId"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_001_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: restore.php?appId="
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_001_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Apple - Il mio ID Apple</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>iTunes Connect"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_002_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Secure internet shopping<"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x68\\x74\\x74\\x70\\x73\\x3A\\x2F\\x2F\\x61\\x70\\x70\\x6C\\x65\\x69\\x64\\x2E\\x61\\x70\\x70\\x6C\\x65\\x2E\\x63\\x6F\\x6D\\x2F\\x67\\x6C\\x6F\\x62\\x61\\x6C\\x2F\\x73\\x63\\x72\\x69\\x70\\x74\\x73\\x2F\\x6C\\x69\\x62\\x2F\\x70\\x72\\x6F\\x74\\x6F\\x74\\x79\\x70\\x65\\x2E\\x6A\\x73"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Apple - iTunes Clients"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title> Apple Store :  </title>"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Verify Apple ID"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<p>The &#65;p&#112;l&#101; Online Store uses"
        $s2 = "&#65;p&#112;l&#101; Inc. All rights reserved.</a></div>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Apple Id Email Validity"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "<h1>AppleConnect</h1>"
        $s3 = "<a href=\"#\">Register</a> - <a href=\"#\">Forgot Password</a>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_apple_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\">"
        $s2 = "Apple ID"
        $s3 = "<title><?php echo $lang['TITLE1']; ?></title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_apple_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Manage your Apple"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_016_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Sign in - Apple"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_016_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "document.getElementById(\"apple"
        $s2 = "input placeholder=\"Apple ID\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$denyIP"
        $s3 = "header(\"Location: https://www.apple.com\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_apple_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Case ID : <b>[WFnumber]"
    condition:
        $s0 and $s1
}

rule html_phishing_apple_018_01 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "function Reletter($letter,$mailto){ $file = file_get_contents($letter);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_apple_018_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "goto TWOFISH; AES: eval($is($evil("
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_apple_018_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "Learning Toolkit Using Latter GX40"
    condition:
        $s0 and $s1
}

rule html_phishing_armex_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Aramex Corporate<"
    condition:
        $s0 and $s1
}

rule html_phishing_ATT_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AT&amp;T - DIRECTV, Wireless, Cell Phones, U-verse &amp; Internet"
    condition:
        $s0 and $s1
}

rule html_phishing_ATT_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = ">myAT&amp;T Login - AT&amp;T Account Management, Pay Bill, Check Usage<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_ATT_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>AT&amp;T Security"
    condition:
        $s0 and $s1
}

rule html_phishing_baidu_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "decodeURIComponent"
        $s2 = "url(#default#homepage)';var a = obj.setHomePage('//www.baidu.com"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bancobrasil_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Inicial - Banco do Brasil</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_bancobrasil_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Smiles BB resgate seus pontos"
    condition:
        $s0 and $s1
}

rule html_phishing_bancolombia_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sucursal Virtual BANCOLOMBIA</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_bank_of_philippine_islands_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Welcome to Bank of the Philippine"
    condition:
        $s0 and $s1
}

rule html_phishing_banking_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Banca MPS"
    condition:
        $s0 and $s1
}

rule html_phishing_banking_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Conti, Carte, Mutui, Investimenti e Risparmio |"
    condition:
        $s0 and $s1
}

rule html_phishing_banking_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = ">Step 1 of 3: Account Validation"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_banking_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>KCDBank"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bankofamerica_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"BOA"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "$header=\"https://www.bankofamerica.com\";"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_006 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "kcxml/capitalone.com/secure.bankofamerica.com/myaccounts"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "; url=https://secure.bankofamerica.com/applynow"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<p>Bank of America"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_008_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<strong> Bank Of America Security Team</strong>"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<p>&Beta;ank of &Alpha;merica"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x61\\x6E\\x6B\\x20\\x6F\\x66\\x20\\x41\\x6D\\x65\\x72\\x69\\x63\\x61"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bankofamerica_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xce\x92ank of \xce\x91merica"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_011_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xce\x92\xd0\xb0nk \xd0\xbef \xce\x91m\xd0\xb5r\xd1\x96\xd1\x81\xd0\xb0"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#66;&#97;&#110;&#107;&#32;&#111;&#102;&#32;&#65;&#109;&#101;&#114;&#105;&#99;&#97;"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#86;&#101;&#114;&#105;&#102;&#121;&#32;&#89;&#111;&#117;&#114;&#32;&#73;&#100;&#101;&#110;&#116;&#105;&#116;&#121;"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofamerica_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#80;&#108;&#101;&#97;&#115;&#101;&#32;&#87;&#97;&#105;&#116;"
    condition:
        $s0 and $s1
}

rule html_phishing_bankofireland365_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Bank of Ireland 365 Online | "
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_banque_populaire_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "alert (\"Veuillez confirmer votre PassCyberplus avant de continuer\")"
    condition:
        $s0 and $s1
}

rule html_phishing_battle_net_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "Battle.net Account Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bbt_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>BB&T - ACCOUNT VERIFICATION"
    condition:
        $s0 and $s1
}

rule html_phishing_bbt_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "<title>Online Banking"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bbva_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Personas | BBVA Continental</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_bbva_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Contrataci\xc3\xb3n del servicio en l\xc3\xadnea"
    condition:
        $s0 and $s1
}

rule html_phishing_bbva_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Registro | BBVA Bancomer"
    condition:
        $s0 and $s1
}

rule html_phishing_bbva_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>BBVAnet"
    condition:
        $s0 and $s1
}

rule html_phishing_bbva_004_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.bbva.com.co/\")"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_biglobe_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>BIGLOBE"
    condition:
        $s0 and $s1
}

rule html_phishing_biglobe_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<meta http-equiv=\"refresh"
        $s2 = "mail($"
        $s3 = "auth.sso.biglobe.ne.jp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_bme_hszk_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "<title>BME HSZK"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule html_phishing_bmo_001 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = /<title>\s*(\w+\s*)?Bank\s*of\s*Montreal/
    condition:
        $s0 and $s1
}

rule html_phishing_bmo_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in - BMO<"
    condition:
        $s0 and $s1
}

rule html_phishing_box_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>(1) New File | Secure File Sharing"
    condition:
        $s0 and $s1
}

rule html_phishing_box_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Secure File Sharing, Storage and Collaboration | Box"
    condition:
        $s0 and $s1
}

rule html_phishing_bradesco_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Banco Bradesco|Pessoa"
    condition:
        $s0 and $s1
}

rule html_phishing_bradesco_001_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "ica,Exclusive,Prime e Private</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_bradesco_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Atendimento 24 horas, Banco Bradesco S.A. CNPJ 60.746.948/0001-12.</div></td>"
    condition:
        $s0 and $s1
}

rule html_phishing_bradesco_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Bradesco"
    condition:
        $s0 and $s1
}

rule html_phishing_bradesco_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Banco Bradesco SA"
    condition:
        $s0 and $s1
}

rule html_phishing_bt_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "bt.com"
        $s2 = "<title>Change payment details | Your Account | BT.com</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bt_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "bt.com"
        $s2 = "<title>Email Login Page"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bt_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "bt.com"
        $s2 = "<title>Your Profile"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_bt_002_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = ".bt.com"
        $s4 = "$email = base64_decode($query);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_caixabank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Bank"
        $s2 = "<title>CaixaBank"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_capitalone_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "; url=https://www.capitalone.com"
    condition:
        $s0 and $s1
}

rule html_phishing_capitalone_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Capital One Login, Capital One Credit Card Login,"
    condition:
        $s0 and $s1
}

rule html_phishing_capitec_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Capitec Internet Banking"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_centurylink_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<link rel=\"shortcut icon\" href=\"https://www.centurylink.com/favicon.ico\" type=\"image/vnd.microsoft.icon\" >"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: http://www.chase.com/"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chase_001_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Chase Personal Banking Investment"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_001_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Chase Online"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_001_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"ATM Pin: \"."
    condition:
        $s0 and $s1
}

rule html_phishing_chase_001_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: http://chase.com\");"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chase_001_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>CHASE Home: Personal Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_001_08 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Chase Online - Done !<"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_001_09 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "Chase Online -"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chase_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "information - chase</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "chase.com</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Chase Bank"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = ">Chase Personal"
    condition:
        $s0 and $s1
}

rule html_phishing_chase_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.chase.com"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chase_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "chase.com"
        $s2 = "JPMorgan Chase"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chase_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Thank you! - Account Verification </title>"
    condition:
        $s0 and $s1
}

rule html_phishing_checkout_001 : phishing
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "http://cwcargo.com/Checkout\"</script>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chinese_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%3c%74%69%74%6c%65%3e%26%23%33%37%30%33%38%3b%26%23%32%30%32%31%34%3b%26%23%33%35%37%37%34%3b%26%23%33%32%36%32%32%3b%20%7c%20%26%23%33%30%30%30%35%3b%26%23%32%33%33%37%36%3b%26%23%33%37%30%33%38%3b%26%23%32%30%32%31%34%3b%26%23%32%31%33%31%39%3b%26%23%33%32%34%32%33%3b%3c%2f%74"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_chinese_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#37038;&#20214;&#35774;&#32622; | &#30005;&#23376;&#37038;&#20214;&#21319;&#32423;</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_chinese_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Mail Settings | Email Upgrade</title>"
        $s2 = "<form method=\"post\" action=\"post.php\">"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chinese_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Mail Settings | Email Upgrade</title>"
        $s2 = "splashmessage[0]='Verifying your mailbox'"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_chinese_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#32593;&#26131;VIP163"
    condition:
        $s0 and $s1
}

rule html_phishing_chinese_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xe9\xaa\x8c\xe8\xaf\x81\xe6\x88\x90\xe5\x8a\x9f"
    condition:
        $s0 and $s1
}

rule html_phishing_cielo_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Compra Premiada Ourocard e Cielo</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_cielo_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Cielo"
        $s1 = "Cielo: Nada supera essa m\xc3\x83\xc2\xa1quina | Cielo.com"
    condition:
        $s0 and $s1
}

rule html_phishing_cielo_002_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Cielo"
        $s1 = "Cielo na Copa 2014 - Cadastre - se! 20 Mi"
    condition:
        $s0 and $s1
}

rule html_phishing_citibank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<div"
        $s2 = "<div class='headingTXT'>citibank Online TT(CURRENCY : US DOLLARS)</div></TD>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_citibank_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Citigroup Inc.<"
    condition:
        $s0 and $s1
}

rule html_phishing_citizens_bank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "Citizens Financial Group, Inc"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_comcast_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "<TITLE>COMCAST Webmail</TITLE>"
    condition:
        $s0 and $s1
}

rule html_phishing_comcast_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in to XFINITY"
    condition:
        $s0 and $s1
}

rule html_phishing_comcast_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "mation Credit Card XFINITY</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_comcast_002_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in to Xfinity</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_comcast_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in to Comcast</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_comcast_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Comcast Corporation<"
    condition:
        $s0 and $s1
}

rule html_phishing_correos_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "<Chronopost@correos.es>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule html_phishing_costco_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>costcosupply"
    condition:
        $s0 and $s1
}

rule html_phishing_cox_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign In to Your Cox Account"
    condition:
        $s0 and $s1
}

rule html_phishing_cPanel_001 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "<div class=\"copyright\">Copyright \xc2\xa9 2013 cPanel, Inc.</div"
    condition:
        $s0 and $s1
}

rule html_phishing_cPanel_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "cPanel"
        $s2 = "<form novalidate id=\"login_form\" action=\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_cPanel_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "cPanel"
        $s2 = "go.cpanel.net/privacy"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_credit_lyonnais_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>LCL - Le Cr&egrave;dit Lyonnais</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_credit_mutuel_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Cr\xc3\xa9dit Mutuel de Bretagne"
    condition:
        $s0 and $s1
}

rule html_phishing_credit_mutuel_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Banque et assurance"
    condition:
        $s0 and $s1
}

rule html_phishing_creditagricole_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = " - Banque en Ligne - Accueil - Particuliers</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_creditagricole_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "dit Agricole</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_creditmutuel_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "www.creditmutuel.fr/cmcee/fr/css"
    condition:
        $s0 and $s1
}

rule html_phishing_daum_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Daum"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_dba_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "dataLayer.push("
        $s4 = "mailto:support@dba.dk"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_delta_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Delta Air Lines, Inc"
    condition:
        $s0 and $s1
}

rule html_phishing_desjardins_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "| Desjardins</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_desjardins_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<meta http-equiv=\"refresh\" content=\"0;URL='https://www.desjardins.com/"
    condition:
        $s0 and $s1
}

rule html_phishing_dhl_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>DHL EXPRESS"
    condition:
        $s0 and $s1
}

rule html_phishing_dhl_003_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $w0 = "Sistemas CASA"
        $s1 = ">DHL |"
    condition:
        $s0 and $s1 and not $w0
}

rule html_phishing_dhl_003_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $w0 = "Sistemas CASA"
        $s1 = ">DHL World"
    condition:
        $s0 and $s1 and not $w0
}

rule html_phishing_dhl_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>DHI EXPRESS"
    condition:
        $s0 and $s1
}

rule html_phishing_dhl_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "bitcoin"
        $s2 = "<title>Verified</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_dhl_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "data-tracking=\"{'type':'dhlTopNavMenuGuest','title':{'en': 'My dhl home'}}\" link-text=\"MyDHL+ Home\">"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_dhl_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>|"
        $s2 = "<li>DHL"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_discover_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "\\u0044\\u0069\\u0073\\u0063\\u006F\\u0076\\u0065\\u0072\\u0020\\u0043\\u0061\\u0072\\u0064\\u003A\\u0020\\u0055\\u0070\\u0064\\u0061\\u0074\\u0065"
    condition:
        $s0 and $s1
}

rule html_phishing_discover_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Discover Card Account Center Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_discover_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Discover Card: Your Card Has Been Verified</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_discover_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "content=\"0; URL=data:text/html;base64,77u/CjwhZG9jdHlwZSBodG1sIHB1YmxpYyAgIi0vL1"
    condition:
        $s0 and $s1
}

rule html_phishing_discover_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Discover Bank"
    condition:
        $s0 and $s1
}

rule html_phishing_discover_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Discover Card Login, Discover Credit Card Login"
    condition:
        $s0 and $s1
}

rule html_phishing_discovery_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "<TITLE>Discover Card: Cardmember Verification Page</TITLE>"
    condition:
        $s0 and $s1
}

rule html_phishing_disney_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Disney.com |"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_docusign_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Docusign"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Docusign<"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Sign In - DocuSign</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>DocuSign Free Trial </title>"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_003_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">DocuSign - Enter email to start log in</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_003_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">DocuSign Login - Enter your password to sign in</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Encrypted Documents - Docusign"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_004_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "online with 1&1 Webmail.\",\"oao.login.canonical\":\"https://webmail.1and1.co.uk"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_docusign_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#68;&#111;&#99;&#117;&#115;&#105;&#103;&#110;"
    condition:
        $s0 and $s1
}

rule html_phishing_docusign_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "[[year]] DocuSign"
    condition:
        $s0 and $s1
}

rule html_phishing_dropbox_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<span>now , you can sign in to dropbox with all email providers.</span>"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule html_phishing_dropbox_002 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = /<title>\s*[Dd]rop[Bb]ox\W+([BbUuSsIiNnEeSsSs]|[SsIiLlGgNn\s]){7,8}/
    condition:
        $s0 and $s1
}

rule html_phishing_dropbox_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Email Login</title>"
        $s3 = "<strong>Dropbox</strong>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_dropbox_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Dropbox<"
    condition:
        $s0 and $s1
}

rule html_phishing_dropbox_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in -Dropbox</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_dropbox_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Dropbox - File Sharing Portal"
    condition:
        $s0 and $s1
}

rule html_phishing_dropbox_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "Dropbox Business</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_dropbox_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Login - Dropbox"
    condition:
        $s0 and $s1
}

rule html_phishing_dropbox_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Dropbox"
    condition:
        $s0 and $s1
}

rule html_phishing_earthlink_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "method=post onsubmit=\"return checkLogin()"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_ebay_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Welcome to eBay"
    condition:
        $s0 and $s1
}

rule html_phishing_ebay_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "EBAY_SIGNIN"
    condition:
        $s0 and $s1
}

rule html_phishing_ebay_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "bozur.net"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_ebay_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Einloggen oder neu anmelden | eBay"
    condition:
        $s0 and $s1
}

rule html_phishing_ebay_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "&#x65;B&#x61;y&#x20;I&#x6e;c"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_ec21_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign-in :: EC21"
    condition:
        $s0 and $s1
}

rule html_phishing_email_account_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "#\">We need your E-mail password to verify your"
    condition:
        $s0 and $s1
}

rule html_phishing_email_account_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "alert("
        $s1 = "alert(\"To complete the update, please enter your Email Password.\"); form.emailpassword."
    condition:
        $s0 and $s1
}

rule html_phishing_email_account_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "unitel.co.kr"
        $s2 = "&#47196;&#44536;&#51064;"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_email_account_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Horde :: Log in"
    condition:
        $s0 and $s1
}

rule html_phishing_email_account_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Coremail Professional Mail System"
    condition:
        $s0 and $s1
}

rule html_phishing_email_account_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Email Encryption</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_email_account_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "<title>&#x53;&#x69;&#x67;&#x6e;&#x20;&#x69;&#x6e;&#x20;&#x74;&#x6f;&#x20;&#x79;&#x6f;&#x75;&#x72;&#x20;&#x61;&#x63;&#x63;&#x6f;&#x75;&#x6e;&#x74;</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_email_account_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "urldecode(base64_decode("
        $s4 = "<title>Sign in"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_email_account_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "&#x57;&#x65;&#x62;&#x20;&#x2D;&#x20;&#x4D;&#x61;&#x69;&#x6C;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_emirates_adb_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Emirates NDB"
    condition:
        $s0 and $s1
}

rule html_phishing_emirates_adb_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>BankNet</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_endesa_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Formulario de reembolso electr\xc3\xb3nico</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_endesa_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Confirmar su tarjeta</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_endesa_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "My Endesa"
    condition:
        $s0 and $s1
}

rule html_phishing_Etisalat_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = ">Etisalat - Personal - My Email"
    condition:
        $s0 and $s1
}

rule html_phishing_etisalat_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "window.location=\"https://onlineservices.etisalat.ae/scp/open/quickpayandrecharge/quickPayAndRecharge.jsp\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_facebook_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Welcome to Facebook - Log In, Sign Up or Learn More</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<span class=\"bb bz\">Facebook &copy;"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Welcome to Facebook"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "title=\"Go to Facebook Home\">"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Log in to Facebook | Facebook</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title id=\"pageTitle\">Facebook"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_facebook_006_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "CURLOPT_RETURNTRANSFER"
        $s2 = "if(preg_match('#/login/device-based/update-nonce/|/login/save-device/|checkpointSubmitButton|MCheckpointController#',"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_facebook_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$handle = fopen(\"log.txt\", \"a\");"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Welcome to Facebook<"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Your Facebook account must be <strong>confirmed"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Facebook"
        $s2 = "@fwrite("
        $s3 = "span> Facebook \xc2\xa9"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_facebook_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Facebook Log in, FB Login,"
    condition:
        $s0 and $s1
}

rule html_phishing_facebook_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Facebook | Confirm identity"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_facebook_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = ">Facebook Inc.</span>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_fastmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Log In | FastMail</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_fido_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Fido-mobile.com</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_fido_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Fido.ca</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_fido_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Fido</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_FNB_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "First National Bank - FNB</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_FNB_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>FNB - Internet Bank"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_freerentalsite_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "FreeRentalSite.com<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_freewebhosting_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Free Web Hosting - Subdomain And/Or Domain"
    condition:
        $s0 and $s1
}

rule html_phishing_gaming_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Login | Axie Infinity"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_001 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "<!-- Created by HTTrack Website Copier/3.44-1"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Send Money, Pay Online"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "<h1>YOUR MAILBOX QUOTA HAVE BEEN SCHEDUELED FOR ADDITIONAL"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Welcome to NAB Internet Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Allied Direct Internet Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Elance: Please Sign In"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Log in to online banking"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "NatWest Personal Banking - Mortgages, "
    condition:
        $s0 and $s1
}

rule html_phishing_generic_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "\"TAM FIDELIDADE\";"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = " G00dLuck "
    condition:
        $s0 and $s1
}

rule html_phishing_generic_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Log in to Credit Card services</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Internet banking"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Internet Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = ">Coordonn&eacute;es Bancaires"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".live.com"
        $s1 = "<meta http-equiv=\"refresh\" content=\"0;url=http://www.mail.live.com\">"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<input src=\"images/e-lcl.png\" alt=\"\" type=\"image\" title=\"\" border=0 width=101 height=40 name=\"submit\" value=\"submit\" formaction=\"full2"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Online Banking - Your Details"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Internet Banking Logon Promo</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Activate Internet Banking</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_020 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Credit Cards, Banking, Personal, Home and Student Loans<"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_021 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = ">Discover Card Account Number</font>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "CIBC Online Banking"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_023 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Welcome To Online Global TradeFile"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "--phishers ::: icq:"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Bienvenido a BancaNet"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_027 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Portale Titolari"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Banca March Bank"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Standard Chartered Bank</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_030 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "<TITLE>HiNet"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_031 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0; URL=data:text/html;base64,"
        $s4 = "PGh0bWw+DQo8SEVBRD4NCjxUSVRMRT5ESEwg"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_generic_031_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0; URL=data:text/html;base64,"
        $s4 = "DQoNCiZuYnNwOzxodG1sPg0KDQo8bWV0YSBodHRwLWVxdWl2PSJyZWZyZXNoIiBjb250ZW50PSIwOyB1cmw"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_generic_031_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0; URL=data:text/html;base64,"
        $s4 = "ZXQ9dXRmLTgiIC8+DQo8dGl0bGU+U2lnbiBJbjwvdGl0bGU+DQo8L2hlY"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_generic_032 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Tangerine bank"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_033 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<title>NAB - Member Satisfaction Survey"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_034 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "dynamic virtual keyboard"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_035 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>HBL Bank"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_036 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "=====|SPYUS|====="
    condition:
        $s0 and $s1
}

rule html_phishing_generic_037 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "document.write(unescape(\"%3Cbody%3E"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_038 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">e-Carte Bleue"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_039 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".live.com"
        $s1 = "type=\"image/vnd.microsoft.icon\" href=\"http://microsoft-excel."
    condition:
        $s0 and $s1
}

rule html_phishing_generic_040 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Form Page: excel</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_041 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "document.write(unescape('%3c%74%69%74%6c%65%3e%45%6d%61%69%6c%20%53%65%74%74%69%6e%67%73%20%7c%20%56%65%72%69%66%69%63%61%74%69%6f%6e%3c%2f%74%69%74%6c%65%3e%0d%0a%0d%0a"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_042 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\">"
        $s2 = "input type=\"submit\" value=\"Update My Details\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_043 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "content=\"Log in to your DocuSign account. DocuSign is the global standard for Digital Transaction Management\"><meta content=\"JavaScript"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_044 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Welc&omicron;me"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_045 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>L&omicron;gging"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_046 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Aguarde.."
    condition:
        $s0 and $s1
}

rule html_phishing_generic_047 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Portal do cliente | Seja Bem-vindos"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_048 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $w0 = "\\x42\\x4C\\x4F\\x47\\x20\\x53\\x54\\x41\\x52\\x54\\x53\\x20\\x48\\x45\\x52\\x45"
        $s2 = "\\x68\\x61\\x73\\x68\",\"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E"
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule html_phishing_generic_049 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>REALITYWORLD INC"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_050 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "<HEAD><TITLE>Synchronizing."
    condition:
        $s0 and $s1
}

rule html_phishing_generic_051 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Other Email Provider"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_052 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Navy Federal Credit Union"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_053 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "lease enter your correct Social Security Number"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_054 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "Log in to Internet Banking</title>"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule html_phishing_generic_055 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = /<title>\s*Online\s*([Vv]erify|[Vv]erification|[Bb]anking)\s*[(\-\s*\.\:\w+)]+Online\s*([Vv]erify|[Vv]erification|[Bb]anking)\s*<\/title>/
    condition:
        $s0 and $s1
}

rule html_phishing_generic_056 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "<form name=\"loginForm\" method=\"POST\" action=\"http://bank"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_057 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Match.com:"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_058 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>AT&amp;T - Login</title>"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule html_phishing_generic_059 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = /([Bb]ank of [Aa]merica|[Cc]hase|[Ww]ells [Ff]argo|[Bb]anco|RBC|e[Bb]ay|[Pp]ay[Pp]al|[Ss]antander|[Yy]ahoo!?|[Ii][Tt]unes|[Gg]mail|[Dd]rop[Bb]ox)\s*[Aa]ccount\s*[Vv]erificatio[^<]+<.title>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule html_phishing_generic_060 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = /<title>\s*[Oo]nline\s*[Bb]anking\s*[Ss]ervices\s*<\/title>/
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_060_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<script>document.write(\"Online Banking"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_061 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "<title>Account verification</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_062 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Verifying Logon</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_063 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\">"
        $s2 = "<title>Email Verified</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_064 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "3c%74%69%74%6c%65%3e%53%69%67%6e%20%69%6e%20%74%6f%20%79%6f%75%72%20%61%63%63%6f%75%6e%74%3c%2f%74%69%74%6c%65%3e"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_065 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = ">To help keep you safe, we required an extra security challenge. You will need to verify your"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_066 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = ">Authentification</"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_067 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = ">Personal Informations</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_068 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#83;&#105;&#103;&#110;&#32;&#73;&#110;</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_069 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Confirm your account<"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_070 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Autentisering</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_071 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<!-- Mirrored from canada-revenue-agency.canada.refund.qc.powercurrency"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_072 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<meta http-equiv=\"REFRESH\" content="
        $s2 = "<title>Try Again!"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_073 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "method=\"post\" id=\"demo-form\" action=\"act.php\">"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_074 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = "; url=http://www.alpha-index.co.uk/"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_075 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\">"
        $s2 = "<title>Soci\xc3\xa9t\xc3\xa9 G\xc3\xa9n\xc3\xa9rale |"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_076 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "title%3EAccount%20Security%20Settins%3C"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_077 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = ".btn1{ background:url(http://www.eyou.com/tpl/user/tpl1/images/"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_078 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "/offers/done.php\" id=\"frm\" name=\"frm\" class="
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_079 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Nedbank Money"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_080 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "MegaMass Evil"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_082 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Connection to Secure Email Server In Progress..."
    condition:
        $s0 and $s1
}

rule html_phishing_generic_083 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Recover Account<"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_084 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">GMX-Anmelden<"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_085 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Help us protect your account<"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_086 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "digipass"
        $s2 = "2015-2016 Argenta"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_087 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "digipass"
        $s2 = "BNP Paribas Fortis"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_088 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%3c%74%72%3e%3c%74%64%20%68%65%69%67%68%74%3d%22%32%30%30%22%20%62%67%63%6f%6c"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_089 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "STRATO Kunden-Login"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_090 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&#51060;&#47700;&#51068; &#50629;&#44536;&#47112;&#51060;&#46300;"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_091 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&#44228;&#51221; &#48372;&#50504; &#49444;&#51221;"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_092 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "NTNU Webmail"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_093 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Verify Computer For"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_094 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Online Banking Login"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_095 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Secure |"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_096 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\">"
        $s2 = "Google wants to make sure"
        $s3 = "<title>YouTube"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_097 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xe1\x8f\xa4\xd0\xb5ri\xc6\x92y \xce\xa5\xd0\xbe\xcf\x85r \xc6\x96d\xd0\xb5ntity"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_098 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xe1\x8f\x9e\xd0\xbegin - \xd4\x9c\xd0\xb0ll\xd0\xb5t"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_099 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xe1\x8e\xa1\xd0\xb5\xcf\xb2\xd0\xbe\xce\xbd\xd0\xb5r \xcf\x9c\xcf\x85nds"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_100 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Secured Doc Page</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_100_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "explode('@', $email);"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_100_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "?rand="
        $s2 = "substr(strrchr($email, \"@\"), 1);"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_101 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>... Session Expired</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_102 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "| Login | The Leading</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_103 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Encrypted File</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_104 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Connexion \xc3\xa0 votre Espace Client"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_105 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Fortnite Battle Royal - Hack Generator</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_106 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CryptoTracker"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_106_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CryptoLog"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_107 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Ace Ventura slot online"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_108 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Telekom Login</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_109 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CONTROLE 2.0</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_110 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>GOOD LUCK 2020 </title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_111 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Para empresas"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_111_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Para Empresas</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_112 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content="
        $s3 = ">Please wait, you are now being redirected to BPI Online page<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_113 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Self-Employment Income Support Scheme - GOV.UK</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_114 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in  QQMail"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_115 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Service e Carte bleue</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_116 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Redsys</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_117 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "CREDIT DU NORD///"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_117_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>VERIFICATIONS</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_117_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "\"THANATOS LA FOUDRE"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_117_04 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Authentification - Cr\xc3\xa9dit du Nord"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_117_05 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "credit du nord///"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_118 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "Inloggen - Mijn ICS |"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_119 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "title>www.sparkasse"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_generic_119_02 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "$_POST"
        $s3 = "= \"From: $email\\r\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_120 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Libero:"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_120_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = " = \"From: libero <"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_121 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = ">\xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\x92\xd0\xb0\xd0\xbc \xd0\xb2\xd1\x8b\xd0\xbf\xd0\xbb\xd0\xb0\xd1\x82\xd1\x8b<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_generic_122 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>BuildaPCSales, Reddit BuildaPCSales,"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_123 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Clever Login, Clever Student Login,"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_124 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CrackStreams - NFL, MLB, UFC, MMA, NBA Free Streaming"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_125 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>MangaGo, MangaGo Yaoi"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_126 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Unemployment Login, NYS Unemployment Login,"
    condition:
        $s0 and $s1
}

rule html_phishing_generic_127 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>WhatLeaks, WhatLeaks IP & VPN Checker"
    condition:
        $s0 and $s1
}

rule html_phishing_gmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>GMAIL SIGN IN"
    condition:
        $s0 and $s1
}

rule html_phishing_gmail_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>GMAlL SIGN IN"
    condition:
        $s0 and $s1
}

rule html_phishing_gmail_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Gmail Sign"
    condition:
        $s0 and $s1
}

rule html_phishing_gmail_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#71;&#109;&#97;&#105;&#108;"
    condition:
        $s0 and $s1
}

rule html_phishing_gmail_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Gmail Login - www.Gmail.com - Gmail Sign in Account"
    condition:
        $s0 and $s1
}

rule html_phishing_godaddy_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "godaddy.com/\"><img src=\"data:image;base64,iVBORw0KGgoAAAANSUhEUgAAAOAAAABSCAMAAAB6"
        $s2 = "<title>Sign In</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_godaddy_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "GoDaddy"
        $s3 = "<title>LOG IN"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_godaddy_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "#login-panel #form-header #godaddy-template {"
    condition:
        $s0 and $s1
}

rule html_phishing_google_accounts_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Google Accounts</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_google_accounts_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Verify your - Google Accounts</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_google_accounts_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Sign in - Google Accounts</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_google_accounts_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Security Credentials Identification - Google Accounts</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_google_accounts_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Gmail Verification"
    condition:
        $s0 and $s1
}

rule html_phishing_google_accounts_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "Sign in to continue to Gmail"
        $s3 = "<title>Sign-in to Continue"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_google_accounts_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "CheckConnectionTempCookie\"+String(Math.floor(1E"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_google_accounts_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "zLy9Hb29nbGVfZG9jc19maWxlcy9zdHlsZTIuY3NzIiByZ"
    condition:
        $s0 and $s1
}

rule html_phishing_google_accounts_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>G-Mail Verification"
    condition:
        $s0 and $s1
}

rule html_phishing_google_accounts_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Google</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_googledocs_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Googledocs Secure</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_googledocs_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Google Docs - Online documents, spreadsheets, presentations, "
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_googledocs_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "action=\"other.php\" id=\"gaia_loginform\""
    condition:
        $s0 and $s1
}

rule html_phishing_googledocs_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Google Drive - Google Docs"
    condition:
        $s0 and $s1
}

rule html_phishing_googledocs_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<link rel=\"shortcut icon\" href=\"images/liamg.ico\">"
    condition:
        $s0 and $s1
}

rule html_phishing_googledocs_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%3C%74%69%74%6C%65%3E%47%6F%6F%67%6C%65%20%44%6F%63%73"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_googledocs_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Google Drive - Online documents"
    condition:
        $s0 and $s1
}

rule html_phishing_googledocs_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "window.location.href=\"http://docs.google.com/\";"
    condition:
        $s0 and $s1
}

rule html_phishing_googledrive_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Google | Drive"
    condition:
        $s0 and $s1
}

rule html_phishing_googledrive_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "==></frame>"
        $s2 = "<title>Google Drive"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_googledrive_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "Google Drive</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_gov_france_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "style=\"background-image: url(https://cfspart.impots.gouv.fr/"
    condition:
        $s0 and $s1
}

rule html_phishing_halifax_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "personal_loans_halifax"
    condition:
        $s0 and $s1
}

rule html_phishing_hong_leong_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Welcome To Hong Leong Bank"
    condition:
        $s0 and $s1
}

rule html_phishing_hotmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Hotmail Verification</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_hotmail_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "class=\"cssSignupText\">Don't have a Hotmail account?"
    condition:
        $s0 and $s1
}

rule html_phishing_hotmail_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".live.com"
        $s1 = "\" href=\"https://login.live.com/resetpw.srf?wreply=https://login.live.com/login.srf"
    condition:
        $s0 and $s1
}

rule html_phishing_hotmail_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = " Microsoft</span><a href=\"#\" id=\"ftrTerms\">Terms</a><a href=\"#\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "=\"TextSemiBold\">Sign up now</a></div></div><div id=\"SignUpTD\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "urlPost:'connectID.php'"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "form action=\"login.php\" method=\"POST\" name=\"logonForm\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "signUpUrl: signUpUrl, resetPasswordUrl: resetPasswordUrl"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "src=\"./Sign in to your Microsoft account"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "createElement"
        $s2 = "<span style=\"font-family:&#39;office365icons&#39;;color:transparent;\">A</span>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "We detected something unusual about a recent sign-in to the Microsoft account"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hotmail_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Hotmail -"
    condition:
        $s0 and $s1
}

rule html_phishing_huntington_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Huntington - Online Banking, Checking"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_huntington_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "mainBody_lblTitle\">Huntington Online Banking - "
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hydroquebec_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "<title>Access My Customer Space</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hydroquebec_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Update My Billing lnformation</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_hydroquebec_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = "Hydro Qu\xc3\xa9bec</span>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_hydroquebec_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "You are in a secure server by Hydro Qu\xc3\xa9bec"
    condition:
        $s0 and $s1
}

rule html_phishing_ICICI_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>ICICI Bank - Email Authentication</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_indoxploit_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>IndoXploit"
    condition:
        $s0 and $s1
}

rule html_phishing_instagram_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Login \xe2\x80\xa2 Instagram"
    condition:
        $s0 and $s1
}

rule html_phishing_INTERAC_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Get INTERAC e-Transfer Online Form<"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule html_phishing_keybank_001 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "ank"
        $s2 = /<title>[K-k]ey[B-b]ank/
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_lcl_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>LCL - Le Cr\xc3\xa9dit Lyonnais</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_linkedin_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign In | LinkedIn"
    condition:
        $s0 and $s1
}

rule html_phishing_linkedin_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Sign In to LinkedIn"
    condition:
        $s0 and $s1
}

rule html_phishing_linkedin_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>LinkedIn Login"
    condition:
        $s0 and $s1
}

rule html_phishing_linkedin_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Business | LinkedIn<"
    condition:
        $s0 and $s1
}

rule html_phishing_linkedin_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "licdn"
        $s2 = "LinkedIn Corporation"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_Lloyds_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = ">Lloyds TSB - Welcome to Internet Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_Lloyds_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header( \"Location: http://www.lloydstsb.com"
    condition:
        $s0 and $s1
}

rule html_phishing_Lloyds_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "-----lloyds-----"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_logmein_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "LogMeIn"
        $s2 = "method=\"post\" action=\"check.php\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_magento_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Log into Magento"
    condition:
        $s0 and $s1
}

rule html_phishing_mail_ru_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "mail.ru</span>"
    condition:
        $s0 and $s1
}

rule html_phishing_mail_ru_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "e.mail.ru/password/restore"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_mailbox_renewal_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>MailBox | Renewal Portal</title>"
        $s2 = "<input name=\"formtext2\" placeholder=\"Password\" type=\"text\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_mastercard_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Surpreenda MasterCard | Cadastro"
    condition:
        $s0 and $s1
}

rule html_phishing_matbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "https://onlinebanking.mandtbank.com/layouts/RetailStyle.css"
    condition:
        $s0 and $s1
}

rule html_phishing_matbank_001_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<TITLE>Welcome to M&T Online Banking</TITLE>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_matbank_001_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "https://onlinebanking.mandtbank.com/layouts/RetailStyle.css"
    condition:
        $s0 and $s1
}

rule html_phishing_match_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<p>&copy; Copyright 2012 Match.com, L.L.C."
    condition:
        $s0 and $s1
}

rule html_phishing_maybank2u_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "=\"http://www.maybank2u.com.my/mbb_info/m2u/public/personalDetail04.do?"
    condition:
        $s0 and $s1
}

rule html_phishing_mbna_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>MBNA Online Card Services<"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "Microsoft - Secure Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>Microsoft Excel<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\">"
        $s2 = "2016 Microsoft<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = ">Rename your personal Microsoft"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "\"Password\" type=\"password\" name=\"passwd\" value=\"\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $w0 = "helpdesk.ainfosec.com"
        $s2 = "<title>Sign In</title>"
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule html_phishing_microsoft_006_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>Sign in to your account</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "content=\"Outlook.com is a free, personal email"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<li><a href=\"javascript:void(0);\">Document</a></li>"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "window.top.location.href = \"https://login.microsoftonline.com"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Excel Online"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Office365 Verification</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>One Drive"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Sign in to your Microsoft"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Sign in to Office 365</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<img class=\"logo\" role=\"presentation\" pngsrc=\"files/microsoft_logo.png?x="
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Microsoft OneDrive</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "INDOWS SIGN IN</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Microsft-services"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "login.microsoftonline.com/logout.srf"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_020 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">\xc2\xa9 2019 Microsoft"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_021 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<link rel=\"shortcut icon\" href=\"https://secure.aadcdn.microsoftonline-p.com/"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "href=\"https://privacy.microsoft.com"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_023 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "=\"Create a Microsoft account\">"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "Office 365 Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "Microsoft Excel Online"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_026 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".live.com"
        $s1 = "<title"
        $s2 = "<form"
        $s3 = "Password"
        $s4 = "mail.live.com"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_phishing_microsoft_027 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>Microsoft \xe3\x82\xa2"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>SharePoint Storage Portal"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "Outlook</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_030 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#x53;&#x69;&#x67;&#x6E;&#x20;&#x69;&#x6E;&#x20;&#x74;&#x6F;&#x20;&#x79;&"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_031 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "microsoft-365/sharepoint"
    condition:
        $s0 and $s1
}

rule html_phishing_microsoft_032 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "Sign in with office 365"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_microsoft_033 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "ng-app=\"loginApp\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_034 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "Sign in with Office 365"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_035 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "Microsoft | Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_microsoft_036 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>Sharing Link Validation"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_mysteryshoppers_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = ">Mystery Shoppers"
        $s2 = "method=post action="
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_mysteryshoppers_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "isProvided(formElem)"
    condition:
        $s0 and $s1
}

rule html_phishing_nationalbankofcanada_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>National Bank Online</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_natwest_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "National Westminster Bank Plc</span></li>"
    condition:
        $s0 and $s1
}

rule html_phishing_naver_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Naver Sign in"
    condition:
        $s0 and $s1
}

rule html_phishing_netbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Netbank Internet Banking</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_netflix_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\" id=\"login\" autocomplete=\"off\" method=\"post"
        $s2 = ">Netflix"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_netflix_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "ng our services uniterrupted.<span class=\"Apple-converted-space\">&nbsp;<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_netflix_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "action=\"submit.php\""
        $s2 = "optiRealPersonContent\" class=\"livechat chat-button window-open text-online video-offline\"><span class=\"hidden\">Live Chat</span>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_netflix_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "echo '**** **** **** '.substr($card,-"
    condition:
        $s0 and $s1
}

rule html_phishing_netflix_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "Card: \".$_SESSION["
        $s3 = "header(\"Location: done.php\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_netflix_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Security - Netflix<"
    condition:
        $s0 and $s1
}

rule html_phishing_netflix_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<HTML"
        $s1 = "netflix"
        $s2 = ">Autentisering"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_netvigator_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "netvigator.com"
        $s1 = "=\"gray75_11\"><a href=\"https://profile.netvigator.com/netpass/servlet/NPMainServlet?action"
    condition:
        $s0 and $s1
}

rule html_phishing_nfcu_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "title>Navy Federal Credit Union"
    condition:
        $s0 and $s1
}

rule html_phishing_nickel_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Compte-Nickel - Verification"
    condition:
        $s0 and $s1
}

rule html_phishing_O2_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "My O2 account</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_onedrive_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>onedrive</title>"
        $s3 = "var x = document.forms[\"onedrive\"][\"email\"].value;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_onedrive_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "this.open(url"
        $s2 = "<title>OneDrive"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_onedrive_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "\xc2\xa9 2018 Microsoft One Drive"
    condition:
        $s0 and $s1
}

rule html_phishing_onedrive_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "OneDrive</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_onedrive_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "OneDrive - Download files"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_onlinebanking_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Online Banking - Customer ID Recovery</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_onlinebanking_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "content=\"0; URL= data:text/html;charset=utf-8;base64,DQo8IURPQ1RZUEUgaHRtb"
    condition:
        $s0 and $s1
}

rule html_phishing_onlinebanking_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>3-D Secure Anmeldung"
    condition:
        $s0 and $s1
}

rule html_phishing_onlinebanking_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "<form name=\"PHANTOM\" id=\"PHANTOM\" method=\"POST\" action=\"ph.php\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_ourtime_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>OurTime.com"
    condition:
        $s0 and $s1
}

rule html_phishing_outitgoes_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>WebMail</title>"
        $s2 = "www.outitgoes.com/images/bg_loginbox.png"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_outlook_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Outlook - Sign In"
    condition:
        $s0 and $s1
}

rule html_phishing_outlook_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "Microsoft Exchange Server"
        $s3 = "<title>Microsoft Outlook Web Access<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_outlook_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Outlook.com<"
        $s2 = "<title>Thank You</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_outlook_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Outlook Web App"
    condition:
        $s0 and $s1
}

rule html_phishing_outlook_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Sign in to Outlook"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "content=\"PayPal is the safer, easier way"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_002 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aypa"
        $s1 = "PayPal</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_003 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aypa"
        $s1 = "PayPal</TITLE>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<title> Update Accounts - PayPal"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_001_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "content=\"PayPal is the faster, safer way"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "Confirm debit or credit card - PayPal"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_007 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aypa"
        $s1 = "PayPal is the faster, safer way to send money"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "class=\"nonjsAlert\">NOTE: Many features on the PayPal "
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>Security - PayPal Europe</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_001_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>W\xc3\x90\xc2\xb5l\xc3\x91\xc2\x81\xc3\x90\xc2\xbem\xc3\x90\xc2\xb5 T\xc3\x90\xc2\xbe \xc3\x90 \xc3\x90\xc2\xb0\xc3\x91\xc6\x92\xc3\x91\xe2\x82\xac\xc3\x90\xc2\xb0l.</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_011 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aypa"
        $s1 = "content=\"name=My Account;action-uri=https://www.paypal.com"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_001_012 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aypa"
        $s1 = "PayPal. All rights reserved"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "=========== VECTIM PC"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = " PayPaI</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "content=\"Sign Up for PayPal:"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: http://www.paypal."
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_005 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "../loge.php?cmd=_login-submit&dispatch"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>PayPal - Bank Account Number</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>PayPal&trade;<"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>PayPal Service Update<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "<%74%69%74%6C%65> %4C%6F%67%69%6E | %50%61%79%50%61%6C %53%65%63%75%72%69%74%79</%74"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Login - PayPal</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_010_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login - P&alpha;yP&alpha;l"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_010_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>Update payment information</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_010_04 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>File Upload Form</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_010_05 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "ersonal information update</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Error - Login - PayPal</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>Your account is Limited</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = ">Log in to your PayPal account as soon as possible"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Paypal Valid Mail Checker"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = ">P<span><font>a</font></span>y</font><font color=\"#0098db\">Pal<"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x23\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_016_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x74\\x69\\x74\\x6C\\x65\",\"\\x50\\x61\\x79\\x50\\x61\\x6C\\x20\\x2D\\x20\\x54\\x68\\x61\\x6E\\x6B\\x73\\x2E"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_016_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x23\\x62\\x74\\x6E\\x4C\\x6F\\x67\\x69\\x6E\",\"\\x23\\x62\\x74\\x6E\\x5F\\x6D\\x79\\x61\\x63\\x63\\x6F\\x75\\x6E\\x74"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "Welcome</title>"
        $s2 = "\"Please enter your PayPal User ID\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>-PayPal-</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Secure login - PayPal</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_020 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>Log in to your PayPal account</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_021 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>L\xce\xbfg in t\xce\xbf y\xce\xbfur \xce\xa1ay\xce\xa1al acc\xce\xbfunt<"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title> PayPaI : Next Step</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_023 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Log in to your PayPaI account"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_paypal_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>PayPaI"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login - PayPal"
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_027 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "Pay Pal. All rights reserved."
    condition:
        $s0 and $s1
}

rule html_phishing_paypal_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<div style="
        $s2 = "PAYPAL"
        $s3 = ";'>PAYPAL LOGIN</font>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_paypal_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "top:"
        $s3 = "> Your paypal team</p>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_piraeus_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Piraeus Bank</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_pnc_banking_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>PNC - PERSONAL BANKING</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_pnc_banking_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>PNC Online Banking</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_POF_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "POF.com &trade; The Leading Free Online Dating Site for Singles &amp; Personals</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_qantas_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "Qantas Airways Limited ABN"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_rackspace_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Rackspace Webmail"
    condition:
        $s0 and $s1
}

rule html_phishing_rbc_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "To Top</span><img id=\"pageTop\" src=\"https://www6.rbc.com//webapp/ukv0/signin/javax"
    condition:
        $s0 and $s1
}

rule html_phishing_rbc_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Personal Verification Questions - RBC Online Banking<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_redirect_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Bancomer.com"
    condition:
        $s0 and $s1
}

rule html_phishing_redirect_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">link to Verification</a>"
        $s2 = "don't tell people to `click`"
        $s3 = "<title>Page Redirection</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_redirect_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "echo(\"Loading You to the main page , Please Wait...\")"
    condition:
        $s0 and $s1
}

rule html_phishing_redirect_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = ">Scan Complete: Safe Link</p><button"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_redirect_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "if(window.location.href.split('#')[1]>0){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_remax_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "Remax - Secure Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_RHB_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "RHB Internet Banking</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_roundcube_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "var rcmail = new rcube_webmail();"
    condition:
        $s0 and $s1
}

rule html_phishing_Santander_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = ">Santander Online Banking"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_santander_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Santander"
        $s2 = "\"register.cpf\" class=\"input_txt\" onblur=\"validateCPF(this);\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_santander_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Santander"
        $s2 = "<a href=\"#LINKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_scotiabank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "ScotiaVerify TM"
    condition:
        $s0 and $s1
}

rule html_phishing_scotiabank_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Scotia OnLine:"
    condition:
        $s0 and $s1
}

rule html_phishing_SecureSignup_net_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "SecureSignup.net Special offer and Discoun"
    condition:
        $s0 and $s1
}

rule html_phishing_sfexpress_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "&#39034;&#20016;&#36895;&#36816;"
    condition:
        $s0 and $s1
}

rule html_phishing_sfr_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SFR - Confirmation des donn"
    condition:
        $s0 and $s1
}

rule html_phishing_sfr_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SFR - Mise"
    condition:
        $s0 and $s1
}

rule html_phishing_sfr_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Espace Client SFR"
    condition:
        $s0 and $s1
}

rule html_phishing_sky_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sky - Sign in"
    condition:
        $s0 and $s1
}

rule html_phishing_smartsheet_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Log In | Smartsheet"
    condition:
        $s0 and $s1
}

rule html_phishing_social_security_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Please Enter Security Challenge</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_societegenerale_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Soci\xc3\xa9t\xc3\xa9 G\xc3\xa9n\xc3\xa9rale |"
    condition:
        $s0 and $s1
}

rule html_phishing_squirrelmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "SquirrelMail version "
    condition:
        $s0 and $s1
}

rule html_phishing_ssfcu_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>myBranch Online Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_standardbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Internet banking</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_stgeorge_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "St.George Internet Banking - Logon"
    condition:
        $s0 and $s1
}

rule html_phishing_stgeorge_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "ST GEORGE BANK : Account Verified<"
    condition:
        $s0 and $s1
}

rule html_phishing_stripe_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Stripe: Login</title>"
        $s3 = "https://a.stripecdn.com/manage/assets"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_stripe_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Stripe: Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_suddenlink_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "CTx0aXRsZT5TdWRkZW5saW5rIC0gTG9n"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_tonline_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Telekom-Login"
    condition:
        $s0 and $s1
}

rule html_phishing_telefonica_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "esetPasswordCheck?d=telefonica.net"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_telefonica_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "mail($"
        $s3 = "correo.telefonica.net/cp/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_telekom_deutschland_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "&copy; Telekom Deutschland GmbH"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_telenor_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Telenor \xc2\xa9"
    condition:
        $s0 and $s1
}

rule html_phishing_telstra_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Webmail - Telstra"
    condition:
        $s0 and $s1
}

rule html_phishing_telstra_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Pay a bill - Account services - Telstra"
    condition:
        $s0 and $s1
}

rule html_phishing_tenantturner_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "Tenant Turner, Inc."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_thepiratebay_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>The Pirate Bay"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_thepiratebay_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>ExpressVPN"
        $s2 = "2468.go2cloud.org/aff_ad?campaign_id=10&aff_id=1004"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_thepiratebay_001_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>advertisment"
        $s2 = "iframe src=\"//ads.exoclick.com/iframe.php?idzone=522605&size=728x9"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_UBS_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Welcome to UBS e-banking</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_UBS_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "header(\"location: http://www.ubs.com/de/en.html\");"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_USAA_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "| USAA</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_USAA_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Welcome to USAA</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_USAA_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>USAA - "
    condition:
        $s0 and $s1
}

rule html_phishing_usbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<span class=\"usbHomeLink\"><a href=\"http://www.usbank.com/\">U.S. Bank Home</a>"
    condition:
        $s0 and $s1
}

rule html_phishing_verizon_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>My Verizon Profile Updated"
    condition:
        $s0 and $s1
}

rule html_phishing_verizon_001_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form id=\"vgnMyBizSignInForm\" action=\"https://mblogin.verizonwireless.com/amserver/UI/Login\""
    condition:
        $s0 and $s1
}

rule html_phishing_verizon_001_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "htm?https://login.verizonwireless.com"
    condition:
        $s0 and $s1
}

rule html_phishing_verizon_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$subj = \"| Verizon | $ip |\";"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_verizon_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Welcome to Verizon Webmail</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_vodafone_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "Vodafone UK - Login/Register"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_web_banking_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>winbank web banking"
    condition:
        $s0 and $s1
}

rule html_phishing_web_banking_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Cash App"
    condition:
        $s0 and $s1
}

rule html_phishing_web_de_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Ihr WEB.DE Konto wurde erfolgreich verifiziert."
    condition:
        $s0 and $s1
}

rule html_phishing_web_de_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">WEBDE Login"
    condition:
        $s0 and $s1
}

rule html_phishing_webmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "form name=\"hwebmail_login\" method=\"post\" action=\"redirect.php\" autocomplete=\"on\" onsubmit=\"return validateForm"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_webmail_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Webmail Login<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_webmail_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Email Account | WebMail Login<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_webmail_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "Roundcube Webmail Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_webmail_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in - Webmail Login<"
    condition:
        $s0 and $s1
}

rule html_phishing_webmail_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<a href=\"http"
        $s2 = "<div"
        $s3 = "webmail.tnc.ne.jp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_phishing_webmail_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "Webmail | Account Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_wells_fargo_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "Wells Fargo Security Measures"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_001_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "Wells Fargo Sign On to View Your Busines"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_001_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "message .= \"---:||Wellsfargo"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_001_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "HTTP-EQUIV=\"Refresh\" CONTENT=\"1;URL=https://www.wellsfargo.com\""
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_001_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<TITLE>Wells Fargo\xc2\xa0Online Banking Identity Verification Process"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_wells_fargo_001_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = ">Wells Fargo - Personal & Business Banking"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "<div class=\"titlePassword\">Wells Fargo Accounts Verification</div>"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_002_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<title>Wells Fargo&nbsp;Sign On to View Your Accounts</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_wells_fargo_002_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "form autocomplete=\"off\" name=\"signon\" id=\"frmSignon\" action=\"wellsfargo.php"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_002_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Wells Fargo&nbsp;Enter Your Security Questions"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Wells Fargo Confirm Your Acount Profile Information"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "HTTP-EQUIV=\"Refresh\" CONTENT=\"1;URL="
        $s2 = "lease wait while we verify your identity...</span>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_wells_fargo_004_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "Fargo Sign On</title"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Wells Fargo</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "Wells Fargo</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_wells_fargo_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "NMLSR ID 399801"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "Wells Fargo. All rights reserved"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ellsfargo"
        $s1 = "define('SITE_ROOT', 'https://connect.secure-wellsfargo.wfonlines.com/auth/');"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#87;&#101;&#108;&#108;"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_010_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Confirm Your Identity"
    condition:
        $s0 and $s1
}

rule html_phishing_wells_fargo_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Wells Fargo. All rights reserved."
    condition:
        $s0 and $s1
}

rule html_phishing_westernunion_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Western Union"
        $s2 = "<title>Western Union Agent Gateway</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_westernunion_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Western Union"
        $s2 = "<title>Western Union Money Transfers - Send Money Online -"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_westernunion_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Western Union"
        $s2 = "href=\"http://corporate.westernunion.com/index.html\" target=\"\">About us</a></li>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_westpac_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "This email is to confirm that you recently made a Funds Transfer"
    condition:
        $s0 and $s1
}

rule html_phishing_wetransfer_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "WeTransfer Plus"
    condition:
        $s0 and $s1
}

rule html_phishing_whatsapp_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>[ WhatsApp]"
    condition:
        $s0 and $s1
}

rule html_phishing_wilhelm_tel_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>wilhelm.tel Webmail :: wilhelm.tel Webmail<"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_windows_live_id_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Windows Live ID</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_windows_live_id_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Windows Settings"
        $s2 = "form method=\"post\" action=\"post.php\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_windows_live_id_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Email Settings"
        $s2 = "wait while we update your account settings"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_windows_live_id_002_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Email Settings"
        $s2 = "de-activation has been cancelled"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_windows_live_id_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Windows Email Upgrade"
    condition:
        $s0 and $s1
}

rule html_phishing_xoom_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Log In | Xoom"
        $s2 = "<a href=\"/online-security-and-privacy-at-xoom\""
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_xtramail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Xtra Mail"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "<meta content=\"Yahoo!"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_001_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "IDBI LOGZ"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_001_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Sign in to Yahoo"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_001_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "Owned YAHOO ID"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_001_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "$yahoopassword = $_POST['yahoopassword"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_001_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "Yahoo! Mail: The best web-based email!"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_001_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "emailPASS=document."
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "<b>Yahoo Alert!</b><br><br>Dear <br><br>Since you changed"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Yahoo! Confirmation Process |"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Yahoo! - Processing...</"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = ":url(\"https://s.yimg.com/lq/i/reg/login/"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Yahoo Mail support Update"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Yahoo - login"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "- Yahoo</title>"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Yahoo! - login"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Account Update</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Account Confirmation"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Verify Password</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Yahoo - Login"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Yahoo \xe2\x80\x93&nbsp;login"
    condition:
        $s0 and $s1
}

rule html_phishing_yahoo_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>Yahoo</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "<title>\xe3\x83\xad\xe3\x82\xb0\xe3\x82\xa4\xe3\x83\xb3 - Yahoo"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_yahoo_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "yahoo Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_phishing_zimbra_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Zimbra Web Client"
    condition:
        $s0 and $s1
}

rule html_redirect_google_static_pw_001 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "URL=http://google-statik.pw"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_redirect_httpRefreshbase64_001 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "url=data:text/html;"
        $s2 = ";base64"
    condition:
        $s0 and $s1 and $s2
}

rule html_redirect_httpRefresh_gen_001_02 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "Loading.. Please Wait.<meta http-equiv=\"refresh\" content=\"0;url=http://"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_redirect_httpRefresh_gen_002 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "                                                                          <meta http-equiv=\"refresh\" content="
    condition:
        $s0 and $s1
}

rule html_redirect_httpRefresh_gen_003 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "<META HTTP-EQUIV=\"refresh\" CONTENT=\"0.1;URL=http://"
    condition:
        $s0 and $s1
}

rule html_redirect_httpRefresh_gen_004 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = "/Archive.rar\"/>"
    condition:
        $s0 and $s1 and $s2
}

rule html_redirect_httpRefresh_gen_005 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = ".rar\"/>"
    condition:
        $s0 and $s1 and $s2
}

rule html_redirect_httpRefresh_gen_006 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = "=uwl\">"
    condition:
        $s0 and $s1 and $s2
}

rule html_redirect_httpRefresh_gen_007 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<title>S.G</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_redirect_httpRefresh_gen_008 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = "<title>Redirecting To Login"
    condition:
        $s0 and $s1 and $s2
}

rule html_redirect_httpRefresh_gen_009 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content="
        $s3 = "zippyshare.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_bkeyword_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>[BKEYWORD]</title>"
    condition:
        $s0 and $s1
}

rule html_spamseo_buy_cheap_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "buy-cheap"
        $w0 = "Referer Spam Blocker"
        $s2 = "pills"
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule html_spamseo_buy_cheap_001_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "buy-cheap"
        $w0 = "Referer Spam Blocker"
        $s2 = "5 mg"
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule html_spamseo_dnnlink_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<p class=\"dnn\">By "
    condition:
        $s0 and $s1
}

rule html_spamseo_fbmarquee_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<div"
        $s2 = "<div id=\"fb-root\"><marquee"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_generic_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>m\xc3\xa1s del 50% de descuento para comprar zapatillas Nike air max baratas.Zapatillas de"
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "/FLP_top3.jpg\">        </a></div>  <div class=\"content\">"
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "p.shuju2011.com"
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "#gradcatalog\">Previous Catalog</a> | <a href=\"#\">Catalog Home</a> | <a href=\"#gradcatalog\">Graduate Students"
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Pierwsza Po\xc5\xbcyczka online dos"
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_007 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "class=\"pill cialis\""
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_008 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "href="
        $s1 = ">buy instagram followers</a>"
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<h3><a href=\"http://www.google.comrss2.html\">News</a>Last updated:"
    condition:
        $s0 and $s1
}

rule html_spamseo_generic_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "<title>Adidas Yeez Boost 350 V2 'Beluga'  Info &amp; Release Date</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_generic_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Reddit NBA"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddendiv_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "if(document.getElementById('HiddenDiv') != null){document.getElementById('HiddenDiv')"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "<!-- qweiop21 -->"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "<div style=\"left:-6"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddendiv_003_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "<div style=\"left:-4"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddendiv_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "<div id=\"medcare\" style=\"top:-"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddendiv_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "<div style=\"position:absolute;filter:alpha(opacity=0);opacity:0.001;z-"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_006 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "div id=linkbyme"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddendiv_007 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "X<div style=\"position:absolute;left:-"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_008 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "absolute; left: -11"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_009 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "relative;height:0px;width:0px;overflow:hidden"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "<div style=\"position: absolute; z-index: -300; top: -2000px;\"><a href=\"http:"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_011 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "style=\"font:0px Trebuchet MS;color:#333;\">"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddendiv_012 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "\").style.display="
        $s2 = "</div><script>document.getElementById(\""
        $s3 = "\").style.display='none';</script>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_hiddendiv_012_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "\").style.display="
        $s2 = "</div><script>document.getElementById(\""
        $s3 = "\").style.display=\"none\";</script>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_hiddendiv_013 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "<div style=\"position:absolute;top:-"
        $s3 = "cheap"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_hiddendiv_014 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "<div style=\"width:1px;height:1px;overflow: hidden;\"><a href=\"http://"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "style=\"position: absolute; left:-20860px;\">"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(\"<div style='height:1px; width:1px; overflow:hidden'>\");</script>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_017 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = ">document.write('<d' + 'iv st' + 'yle' + '=\"po' +"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_018 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "<div style=\"position:absolute;left:-991"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_019 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "display:none;"
        $s2 = "<div onclick=\"(a.style.display=='none')?a.style.display='block':a.style.display='none';\"></div>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_020 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "' style='position:fixed;left:-"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_021 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x75\\x72\\x6c\\x2e\\x65\\x78\\x70\\x6f\\x67\\x6f\\x6c\\x66\\x2e\\x63\\x6e\\x2f\\x75\\x72\\x6c\\x2e\\x61\\x73\\x70\\x3f"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_hiddendiv_022 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "; position: absolute; left:-5000px; top: -5000px;"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddendiv_023 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "<div style=\"position: absolute; top:-2000px\"><h1><a href=\"http://"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenlink_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "display:"
        $s2 = "</A> <A style=\"display:none;\" HREF=\"http://"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenparagraph_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "<p style=\"overflow: auto; position: fixed; height: 0pt; width: 0pt\">"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenstyle_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "<h1 id=\"dofollow\">"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddenstyle_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "display:"
        $s2 = "> dofollow { display: none; }</style><dofollow>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenstyle_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "position:absolute;left:-"
        $s2 = "<script type=\"text/javascript\">var style = document.createElement(\"style\");style.appendChild(document.createTextNode(\"."
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenstyle_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "position:absolute;left:-"
        $s2 = "<script type='text/javascript'>var style = document.createElement('style');style.appendChild(document.createTextNode('."
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenstyle_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "\"dispLAy : NOnE;"
    condition:
        $s0 and $s1
}

rule html_spamseo_hiddenstyle_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "display:none;"
        $s2 = "<footer><nav style=\"display:none;\""
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenstyle_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<style>.clear + p{left:-"
        $s2 = "<p class=\"clear\"></p>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hiddenstyle_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = ");}zdrViewState();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_hiddenstyle_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "display:none;"
        $s2 = "<p style=\"position:absolute; display:none;\">"
        $s3 = ">porno<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_hiddenstyle_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function get_style"
        $s3 = "} function end"
        $s4 = "{ return \"none\"; } function end"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_spamseo_hiddenstyle_009_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function get_style"
        $s3 = "} function end"
        $s4 = "<script type=\"text/javascript\"> end"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_spamseo_hiddenstyle_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "duckporno"
    condition:
        $s0 and $s1
}

rule html_spamseo_HiddenMarquee_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<marquee style=\"position: absolute; width: 0px;\">"
    condition:
        $s0 and $s1
}

rule html_spamseo_hydra_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hydra"
        $s2 = "<title>Hydra onion"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hydra_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hydra"
        $s2 = "<title>Hydra shop"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hydra_001_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hydra"
        $s2 = "<title>\xd0\x90\xd0\xbd\xd0\xbe\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xb1\xd0\xb8\xd1\x82\xd0\xba\xd0\xbe\xd0\xb8\xd0\xbd\xd0\xb0"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hydra_001_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hydra"
        $s2 = "<title>Best Bitcoin Mixers"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hydra_001_05 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hydra"
        $s2 = "\">\xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb9\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\x93\xd0\xb8\xd0\xb4\xd1\x80\xd0\xb0</a>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hydra_001_06 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hydra"
        $s2 = "<title>\xd0\x93\xd0\xb8\xd0\xb4\xd1\x80\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xb7\xd1\x8b\xd0\xb2\xd1\x8b \xd0\xbe \xd0\xbc\xd0\xb0\xd0\xb3\xd0\xb0\xd0\xb7\xd0\xb8\xd0\xbd\xd0\xb5"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_hydra_001_07 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hydra"
        $s2 = "\xd0\xb9\xd1\x82\xd0\xb0 - HYDRA</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_iframedoorway_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "var str2 = String.fromCharCode(40,102,117,110,99,116,105,111,110,40,97,114,103,"
        $s3 = "110,101,114,72,84,77,76,34,93,32,61,32,34,60,105,102,114,97,109,101,32,119,105,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_iframer_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "width=0 height=0 style=\"hidden\" frameborder=0 marginheight=0 marginwidth=0 scrolling=no></iframe>"
    condition:
        $s0 and $s1
}

rule html_spamseo_iframer_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "</iframe>\";<?php get_header();"
    condition:
        $s0 and $s1
}

rule html_spamseo_iframer_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = ">\";</script>"
        $s2 = "top.document.body.innerHTML=\"<iframe width='100%' scrolling='no' height='5500'"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_iframer_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "hidden;"
        $s2 = "<iframe style='opacity: 0;visibility: hidden;border: 0;outline: 0;width: 0;height: 0"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_injector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<a href=\"http"
        $s2 = "<span class=\"mylinkcode\" style=\"display:none\"><script src=\"http:"
        $s3 = ";</a><a href=\"http:"
        $s4 = "</script><!-------"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_spamseo_japanesespam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "xml:lang=\"ja\""
        $s2 = "wp-content/cache/"
        $s3 = "/wp-includes/SimplePie/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_japanesespam_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "xml:lang=\"ja\""
        $s2 = "wp-content/cache/"
        $s3 = "/wc-logs/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_japanesespam_001_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "xml:lang=\"ja\""
        $s2 = "/wc-logs/"
        $s3 = "/wp-includes/SimplePie/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_japanesespam_001_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "xml:lang=\"ja\""
        $s2 = "/wc-logs/"
        $s3 = "wp-content/cache/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_japanesespam_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<title>  \xc3\x83\xc2\xa6\xc3\x85\xe2\x80\x9c\xc3\x82\xc2\xaa\xc3\x83\xc2\xa6\xc3\xa2\xe2\x82\xac\xc2\xb0\xc3\x82\xc2\xbe\xc3\x83\xc2\xa5\xc3\x8b\xe2\x80\xa0\xc3\x82\xc2\xb0\xc3\x83\xc2\xa9\xc3\x82\xc2\xa1\xc3\x82\xc2\xb5\xc3\x83\xc2\xa9\xc3\x82\xc3\x82\xc2\xa2 - \xc3\x83\xc2\xa5\xc3\x82\xc3\x82\xc2\xa4\xc3\x83\xc2\xa6\xc3\x85\xe2\x80\x9c\xc3\x8b\xe2\x80\xa0"
        $s2 = "<title>404 Not Found"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_japanesespam_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<title>&#"
        $s2 = "Copyright 2015 Crockett & Jones. All rights reserved."
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_japanesespam_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<html lang=\"ja\">"
        $s2 = "<img src=\"http://www.orbis.co.jp/contents/images/foot"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_japanesespam_006_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<html lang=\"ja\">"
        $s2 = "<title>&#"
        $s3 = "\"copyright\"><a href=\"http://www.continuer.jp/policy.php\">privacy policy</a>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_japanesespam_006_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<html lang=\"ja\">"
        $s2 = "<title>&#"
        $s3 = "Yahoo Japan Corporation. All Rights Reserved."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_japanesespam_007 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "<a href=\"\" title=\"My &#12395;&#36861;&#21152;\" target="
    condition:
        $s0 and $s1
}

rule html_spamseo_japanesespam_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "content=\"#bbb"
        $s2 = "<title>#bbbtitsbbb#</title>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_japanesespam_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<title>\xe3\x83\x96\xe3\x83\xa9\xe3\x83\xb3\xe3\x83\x89\xe3\x82\xb3\xe3\x83\x94"
    condition:
        $s0 and $s1
}

rule html_spamseo_peepingtom_001_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "pyera"
        $s2 = "<p class=\"pitch\">Spyera is the most powerful and undetectable Spy phone Software!<br>"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_peepingtom_001_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "pyera"
        $s2 = "document.write(\"<a href='//www.liveinternet.ru/click;EN_SPY_spyera"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_pharmasite_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd?"
    condition:
        $s0 and $s1
}

rule html_spamseo_pharmasite_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "@OPGviagra"
    condition:
        $s0 and $s1
}

rule html_spamseo_pharmasite_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "<?php include ('./"
        $s2 = "<?php $pill = '"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_pharmasite_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Acheter des st\xc3\xa9ro\xc3\xafdes"
    condition:
        $s0 and $s1
}

rule html_spamseo_pharmasite_004_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Tout sur la pharmacologie"
    condition:
        $s0 and $s1
}

rule html_spamseo_pharmasite_004_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Les m\xc3\xa9dicaments anabolisants"
    condition:
        $s0 and $s1
}

rule html_spamseo_pharmasite_004_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "index.html\">Tout sur la pharmacologie du sport</a>"
    condition:
        $s0 and $s1
}

rule html_spamseo_pornspam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "porn"
        $s2 = "=\"promo.php?utm_term="
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_pornspam_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "X Tube Movies. Premium Sex Clip"
    condition:
        $s0 and $s1
}

rule html_spamseo_pornspam_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "porn"
        $s2 = "<li><a href=\"Chat-cam-sin-registro"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_pornspam_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>{title}</title>"
        $s2 = "document.cookie.match(/(^|;)?liwasujajaqe=([^;]*)(;|$)/)){"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "l = \"http://img.\" + a + \"-\" + b + \".info/emptya2.gif?i=\" + r + \"&r=\" + document.referrer;"
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "page"
        $s1 = "You see this page because one of your friends <br> have invited you.<br>"
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "content=\"1;url=http://safe-med"
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta name=\"description\" content=\"ok file uploaded\">"
        $s3 = "<meta http-equiv=\"refresh\" content=\"1;URL=http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_redirect_005_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta name=\"description\" content=\"ok file uploaded\">"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0;URL=http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_redirect_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xd0\xa1\xd0\xb5\xd0\xba\xd1\x83\xd0\xbd\xd0\xb4\xd0\xbe\xd1\x87\xd0\xba\xd1\x83...</title>"
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_008 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "content=\"0;http://aivix.go2cloud.org/aff_c?offer_id="
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_009 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<met"
        $s1 = "; url=http://xxx"
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>[cmb.]</title>"
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0; url=https://put-pay.ru/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_redirect_012 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0; url=http://lazyessayclub.com/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_redirect_013 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "iframe src=\"http://tmv.go2cloud.org/aff_l?offer_id"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule html_spamseo_redirect_014 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = /<script>[\s]*var [\w]+[\s]*=[\s]*\"[^\"]\";[\s]*window\.location\.href[\s]*=[\s]*\"htt[^\";]+\"[\s]*\+[\s]*[\w]+[\s]*\+[\s]*\"[^\"]+\";[\s]*<.script>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_redirect_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0;URL='https://bit.ly"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_redirect_016 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "setTimeout(\"window.location.replace('http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_redirect_017 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"5; url=http://trustdelivery.su"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_redirect_018 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"3; url=http://herbalglobalinc.eu"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_redirect_019 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"1; url=http://goodfirstreward.eu"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_redirect_021 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "index><img src='0' onerror= top.location.href="
    condition:
        $s0 and $s1
}

rule html_spamseo_redirect_022 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "</head><body></body></html>"
        $s4 = "email.split(\""
        $s5 = "= \"@\";"
        $s6 = "(window.location.search);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule html_spamseo_replicadoorway_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|iframe|"
        $s3 = "content=\"Replica"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_spamlinks_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "id=\"hide\"><a href=\"http://"
    condition:
        $s0 and $s1
}

rule html_spamseo_spamlinks_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "--><a title"
        $s2 = "--><a title=\\\"Site"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_spamlinks_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>seotramp.com"
    condition:
        $s0 and $s1
}

rule html_spamseo_spamlinks_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = ">buy"
        $s2 = "<p hidden><a href=\""
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_spamlinks_005 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "href="
        $s1 = "123.60.189.130:656/tj/js.js"
    condition:
        $s0 and $s1
}

rule html_spamseo_spamlinks_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "$data = $document->render( $this->getCfg('caching'), $params);"
        $s3 = "$data = str_replace(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_spamlinks_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "$a = JResponse::toString($mainframe->getCfg('gzip'));"
        $s3 = "echo str_replace(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_spamlinks_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "if(!navigator.userAgent.match(/Google Web Preview|bot"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_spamlinks_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<a href=\"http://www.japanfemdom.org"
    condition:
        $s0 and $s1
}

rule html_spamseo_spamlinks_013 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<p style"
        $s2 = "span class=\"mylinkcode\"><p style=\"position: absolute"
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_spamlinks_014 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "* Front to the WordPress application."
        $s2 = "<a href="
        $s3 = "</a>&nbsp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule html_spamseo_spamlinks_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<div"
        $s2 = "divHrefB"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule html_spamseo_spam_template_001 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<meta content=\"#description#\" name=\"description\"/>"
        $s2 = /<title>[\s]*#title#[\s]*<.title>/
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_spam_template_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "<lastmod>"
        $s3 = "<loc>http"
        $s4 = "<changefreq>weekly</changefreq>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule html_spamseo_wordpress_hide_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<!-- #wordpress_hide -->"
        $s2 = "{position:absolute;clip:rect("
    condition:
        $s0 and $s1 and $s2
}

rule html_spamseo_wordpress_hide_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<!-- #wordpress_hide -->"
        $s2 = "{position:absolute;top:-"
    condition:
        $s0 and $s1 and $s2
}

rule ini_safety_off_001 : safety
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "safe_mode"
        $s3 = "shell_exec = ON"
        $s4 = "open_basedir = OFF"
        $s5 = "exec = ON"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_backdoor_webshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function("
        $s3 = "server : <font color=green><!--#exec cmd=\"{uname,-nr}\" --></font><br>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_backdoor_xss_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "while(1){s=document.body.innerHTML+=s+=document.body.innerHTML;}"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_blackhole_generic_001 : blackhole
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "</script><!--/"
        $s2 = /<!--\w\w\w\w\w\w--><script/
        $s3 = ";try{"
        $s4 = "--><script"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_blackhole_generic_001_02 : blackhole
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = /<!--\w\w\w\w\w\w--><script/
        $s2 = "--><scrip"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_blackhole_generic_002 : blackhole
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "</script><!--/"
        $s2 = /<!--\w\w\w\w\w\w--><script/
        $s3 = "--><script type=\"text/javascript\" src="
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_blackhole_generic_002_02 : blackhole
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "</script><!--/"
        $s2 = /<!--\w\w\w\w\w\w--><script/
        $s3 = "--><script src="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_blackhole_generic_003 : blackhole
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "define('HDDD467FFEY322', 1);}/*"
    condition:
        $s0 and $s1
}

rule js_blackhole_generic_004 : blackhole
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "try{q="
        $s3 = "document.createElement(\"p\");"
        $s4 = ";if(window.document)for"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_blackhole_generic_004_02 : blackhole
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "try{q="
        $s3 = "document.createElement(\"p\");"
        $s4 = "e=window["
        $s5 = />[\s]*s=\"\";/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_blackhole_generic_004_03 : blackhole
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "\"c\"+\"r\":2+\"e\"+\"a\"+\"t\"+\"e\"+\"E"
    condition:
        $s0 and $s1 and $s2
}

rule js_defaced_generic_094 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "+= String.fromCharCode(Math.floor((tmp/Math.pow("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_defaced_generic_095 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "Sh4d0w Pr0x"
    condition:
        $s0 and $s1
}

rule js_defaced_generic_096 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "%25%33%35%25%32%35%25%33%33%25%33%32%25%32%35%25%33%33%25%33%35%25%32%35%25%33%33%25%33%33%25%32%35%25%33%34%25%33%35%25%32%35%25%"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_defaced_generic_097 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "\\u00"
        $s4 = "u003C\\u0068\\u0074\\u006D\\u006C\\u003E\\u000A"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_defaced_HUMAN_CRAZY99_001 : defaced
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "<script language=javascript>document.write(unescape('%3C%73%63%72%69%70%74%20%6C%61%6E%67%75%61%67%65%3D%22%6A%61"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_defaced_script_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "alert("
        $s1 = "JavaScript\">alert(\" Yayank Riri"
    condition:
        $s0 and $s1
}

rule js_defaced_script_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "document.write(unescape('%3C%74%69%74%6C%65%3E%46%75%63%6B%65%64"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_defaced_script_003 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "alert("
        $s1 = "alert(\"Indonesian people in here\");"
    condition:
        $s0 and $s1
}

rule js_defaced_script_005 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "var text=\\\"./H4CK3D"
    condition:
        $s0 and $s1 and $s2
}

rule js_defaced_script_009 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "\\u0074\\u0069\\u0074\\u006C\\u0065\\u003D\\u0020\\u0022\\u0048\\u0061\\u0063\\u006B"
    condition:
        $s0 and $s1
}

rule js_defaced_script_010 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%3b%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%64%29%3b%3c%2f%73%63%72%69%70%74%3e"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_defaced_script_012 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "messages[0] = \"You Has Been Hacked!!\""
    condition:
        $s0 and $s1 and $s2
}

rule js_defaced_script_014 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%3C%68%65%61%64%3E%"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_defaced_script_015 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "%48%61%63"
    condition:
        $s0 and $s1
}

rule js_defaced_script_016 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "%50%77%6E"
    condition:
        $s0 and $s1
}

rule js_defaced_script_017 : defaced
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "Hacked%20By%20OoS"
    condition:
        $s0 and $s1 and $s2
}

rule js_defaced_script_018 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "setTimeout("
        $s2 = "var mymessage = \"HOW HAPPY IS THE MAN WHO SAYS"
    condition:
        $s0 and $s1 and $s2
}

rule js_exploit_wordpress_001 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "Exploit By Anonymous Ghost Gaza"
    condition:
        $s0 and $s1
}

rule js_hacktool_ddos_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "DDOS"
        $s1 = "<title>Garuda DDOS "
    condition:
        $s0 and $s1
}

rule js_hacktool_mage_shoplifter_001_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(atob"
        $s2 = "cz0namc"
    condition:
        $s0 and $s1 and $s2
}

rule js_hacktool_mage_shoplifter_001_003 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(atob"
        $s2 = "ZXZhbChm"
    condition:
        $s0 and $s1 and $s2
}

rule js_hacktool_mage_shoplifter_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(atob"
        $s2 = "dmFyI"
    condition:
        $s0 and $s1 and $s2
}

rule js_iframe_scanbox_001 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "88.80.190.133"
    condition:
        $s0 and $s1
}

rule js_malware_51_la_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "js.users.51.la"
    condition:
        $s0 and $s1
}

rule js_malware_aiobot_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "aiobot.de/images/ads.js\"><"
    condition:
        $s0 and $s1
}

rule js_malware_b374kshell_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "console.log('b374k> '+str);"
    condition:
        $s0 and $s1
}

rule js_malware_base64html_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".location"
        $s1 = "window.location"
        $s2 = "window.location=\"data:text/html;base64"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cc_stealer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "new RegExp(_$_"
        $s5 = "]](window[_$_"
        $s6 = "],success:function(a)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_cc_stealer_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\"\\x66\\x72\\x6F\\x6D\\x43\\x68\\x61\\x72\\x43\\x6F\\x64\\x65\",\"\\x6D\\x61\\x70\",\"\",\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x74\\x6F\\x53\\x74\\x72\\x69\\x6E\\x67\",\"\\x72\\x6F\\x74\\x31\\x33\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cc_stealer_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "location.href.search(atob('Y2hlY2tvdXQ="
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cc_stealer_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "\\x63\\x63\\x73\\x61\\x76\\x65\",\"\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "}}setInterval("
        $s4 = "\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cc_stealer_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "aHR0cD"
        $s5 = "(i*maxlen,maxlen);enc=crypt[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_cc_stealer_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "function(){let _0x"
        $s3 = "try{const _0x"
        $s4 = "void 0x0;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cc_stealer_007_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "'1337'"
        $s5 = "'cvv_listener','exp_listener','$1\\x20/\\x20$2'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_cc_stealer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "function validateCreditCard(s"
        $s3 = "decodeURI(\"3%20.5*%1C1"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "document.createElement(\"script\")"
        $s3 = "t.type=\"text/javascript\",t.async=!0,t.src=(\"https:\"==document.location.protocol?\"https://\":\"http://\")+window.atob("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "function bom(){"
        $s3 = "setInterval(bom,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = ".test(window.location))"
        $s3 = ")).test(window.location) && !(new RegExp(\"cart\").test(window.location))){"
        $s4 = "document.getElementById('cloud')){document.getElementById('cloud').outerHTML = \""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cc_stealer_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "CVV':"
        $s5 = "GetCCInfo"
        $s6 = "TrySend':function()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_cc_stealer_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "typeof jQuery"
        $s3 = "document[_"
        $s4 = "window[_"
        $s5 = "encData= encryptData(b);jQuery["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_cc_stealer_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = ".join(\"&\"),n=getXmlHttp();"
        $s3 = ".setRequestHeader(\"Content-type"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = ";for(var"
        $s2 = "(function(){var root=this;var"
        $s3 = ".ico(decodeURIComponent(escape(window.atob("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement('script')"
        $s4 = ".parentNode.insertBefore("
        $s5 = ".src = atob("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_cc_stealer_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "encodeURIComponent(btoa(unescape(encodeURIComponent(JSON[_0x"
        $s3 = "payment.save()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_019 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "document.write(unescape('%3C%73%63%72%69%70%74%20%74%79%70%65%3D%22%74%65%78%74%2F%6A%61%76%61%73%63%72%69%70%74%22%20%6C%61%6E%67%75%61%67%65%3D%22%4A%61%76%61%73%63%72%69%70%74%22%3E%66%75%6E%63%74%69%6F%6E%20%68%74%6D%6C%5F%65%6E%63%6F%64%65%72"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_020 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "new RegExp(_0x"
        $s4 = "['HolderFirstName']!==null&&$"
        $s5 = "form-control-placeholder\\x22\\x20for=\\x22name\\x22>Card\\x20number</label></div><div\\x20class="
        $s6 = ",'cc_payment','Holder','getElementById',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_cc_stealer_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.cookie"
        $s3 = ")) {document.cookie = \"currentnumber=\" + document.getElementById(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_022 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement('script')"
        $s4 = ".parentNode.insertBefore("
        $s5 = "decodeURIComponent(window.location.search.replace("
        $s6 = "+= '&default_keyword=' + encodeURIComponent(document.title);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_cc_stealer_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "x.length;var o=[];for(var s=0;s<l;s++){o[s]=x.charAt(s)};for(var s=0;s<l;s++){var"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cc_stealer_024 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(atob"
        $s2 = "XzAgICAgICAgICAgICAgICAgPSB7fQ0KXzAudiAgI"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cc_stealer_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(atob"
        $s2 = "aWYgKCF3aW5kb3cuUlIpIFJSID0gT2JqZWN0LmNyZ"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cc_stealer_026 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "|x7A|bom|if|x42|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cc_stealer_029 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "\\x77\\x73\\x73\\x3A\\x2F\\x2F"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "shopify-cart.com"
    condition:
        $s0 and $s1
}

rule js_malware_cc_stealer_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "split(\".\")[1]"
        $s4 = "c(_scriptCallback))();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_malware_cc_stealer_033 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "+=String.fromCharCode(((parseInt("
        $s3 = "=[];for(var"
        $s4 = /parseInt\(\w\d{5}\[\d+\],\d+\);var.\w\d{5}=\[\]/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_malware_cc_stealer_033_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "+=String.fromCharCode(((parseInt("
        $s3 = "=[];for(var"
        $s4 = /var [\w]+[\s]*=[\s]*.\\"[\w]{1000,}.\";/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cc_stealer_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "parseInt(c.charAt("
        $s3 = "d2NfcGF5bWVudF9tZXRob2Q"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "url: window.atob(\"aHR"
        $s2 = "+= window.atob(\"Q1ZWIDog\") + stripe_token_params.cvc + \"\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cc_stealer_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "var|x43|x25|x2C|document"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cc_stealer_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "parseInt(c.charAt("
        $s3 = "PGlmcmFtZSBpZD0id2Mtc3F1YXJlLWNyZWRpdC1jYXJkLWFjb3Vud"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cc_stealer_038 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "new XMLHttpRequest();_0x"
        $s4 = "(encodeURIComponent"
        $s5 = "-parseInt(_"
        $s6 = "cardnumb"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_createElement_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "[\"\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\",\"\\x73\\x72\\x63\",\"\\x68\\x74\\x74\\x70"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_createElement_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 99, 114, 101, 97, 116, 101, 69, 108, 101, 109, 101, 110, 116, 40, 34, 115, 99, 114, 105, 112, 116, 34, 41, 59"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_createElement_002_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "118, 97, 114, 32, 122, 32, 61') !== false) {"
        $s3 = "str_replace(\"<head>\", \"<head>\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_createElement_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "if(!loadStats){function loadStats(){var"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_createElement_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "display:none;"
        $s2 = "var download_file = \"chrome.exe\""
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_createElement_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function("
        $s3 = "setAttribute("
        $s4 = "document.body||document.documentElement"
        $s5 = ");})(document.createElement("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_createElement_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "49,49,53,44,49,49,54,44,49,49,49,44,49,49,52,44,49,48,49,44,49,49,52,44,49,48,53,44,49,48,51,44,49,48,52,44,49,49,54,44,49,48,48,44,49,48,49,44,49,49,53,44,49,48,53,44,57,57,44,49,48,53,44,49,49,49,44,49,49,48,44,52,54,44,57,57,44,49,49,49,44,49,48,57"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "miner.start("
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_001_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "new CoinHive.Anonymous("
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_001_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(function(p,a,c,k,e,d)"
        $s2 = "|CoinHive|"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_001_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%6d%69%6e%65%72%2e%73%74%61%72%74%28"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "\\x73\\x70\\x6C\\x61\\x73\\x68\\x5F\\x69"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_002_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "x63\\\\x6F\\\\x69\\\\x6E\\\\x68\\\\x69\\\\x76\\\\x65"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "|onload"
        $s4 = "|appendChild"
        $s5 = "NPRak9QU4lFBSneFt"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_cryptominer_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "getScript(atob"
        $s1 = "$(document).ready(function() {$.getScript(atob(\"aHR0cH"
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "]);document[_"
        $s4 = "\\x3C\\x73\\x63\\x72\\x69\\x70\\x74\\x3E\\x76\\x61\\x72\\x20\\x6D\\x69\\x6E\\x65\\x72\\x20\\x3D\\x20\\x6E\\x65\\x77\\x20"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_cryptominer_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "|js|document|_0xf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "hidden;"
        $s2 = "none;"
        $s3 = "dogeminers.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "%2F%2F%63%6F%69%6E%68%69%7"
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "hidden;"
        $s2 = "coinpot.co/mine"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "\\x7C\\x63\\x6F\\x69\\x6E\\x68\\x69\\x76\\x65\\x7C"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "(window.location.hostname);t(\"https://coinhive.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "new deepMiner."
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "HDCTApGn0!$e%8)4}w{d7a17\\\\\\\\\\\\\\\\7d17\\\\\\\\\\\\\\\\)q $D|GnPP\" +"
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"\\x68\\x74\\x74\\x70\\x73\\x3A\\x2F\\x2F\\x77\\x65\\x62\\x2E\\x73\\x74\\x61\\x74\\x69\\x2E\\x62\\x69\\x64"
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "lib/minero-hidden.min.js"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule js_malware_cryptominer_016 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "/g,\"\\\\\")}eval("
        $s2 = /\]\.replace\(.[\x01\x02\x03\x04].g,...\)\.replace\(.[\x02\x03\x01\x04].g,\"..\"\)\}eval\(/
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_017 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "+$3.0$+"
        $s3 = "1$1+\\\\\\\\\\\\"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "var server=\"wss://webminerpool.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "63%6e%68%76%2e%63%6f"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_020 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "\"\\x77\\x73\\x73\\x3A\\x2F\\x2F\\x6D\\x75\\x6E\\x65\\x72\\x6F\\x2E\\x6D\\x65\\x3A\\x38\\x38\\x39\\x32\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "[\"\\x69\\x64\"]='\\x6d\\x5f\\x67\\x5f\\x61'"
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "src = 'https://xs"
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "while(x=eval(x));"
        $s2 = "<script type=\"text/javascript\">"
        $s3 = "tAedoCrahc.x(edoCrahCmorf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_024 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "jsecoin.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_025 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "//xmr.omine.org"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_cryptominer_026 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "new Client.Anonymous("
        $s2 = "hrottle:"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_027 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script src=\"https://coinhive.com/lib/miner"
    condition:
        $s0 and $s1
}

rule js_malware_cryptominer_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "iner=new CRLT.Anonymous("
        $s2 = "var _0xe6af=['min','postMessage','CRLT"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_029 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "server=\"ws://#\";startMining(\"#\","
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "_doCryptBlock':function(_0"
        $s2 = "./cipher-core':0x3,'./core':0x4,'./enc-base64"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_malware_cryptominer_031 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = ".charCodeAt("
        $s2 = "String.fromCharCode"
        $s3 = /!';[\s]*\}[\s]*else[\s]*\{[\s]*[\w]+[\s]*\+=[\s]*String\.fromCharCode[\s]*\([\s]*[\w]\.charCodeAt[\s]*\([^\}]+[\s\}]+document\.write\(/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_cryptominer_032 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = /var[\s]*[\w]+[\s]*=[\s]*['\"][^;]{1000,}['\"];[\s]*function [\w]\([\w]\)[\s]*\{var [\w][\s]*=[\s]*..;[^\{]+\{[\s]*[\w][\s]*\+=[\s]*String\.fromCharCode[^\}]+\}[\s]*return[^\}]+\}[^;]+;[\s]*eval\(.\);?/
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_cryptominer_033 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "script src"
        $s2 = "trustiseverything.de"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_Donnazmiencryptor_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "String.fromCharCode,isNaN,parseInt,String"
    condition:
        $s0 and $s1
}

rule js_malware_downloader_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "var linkMobile"
        $s2 = "var linkDesktop"
        $s3 = "var oneTimeShow"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_dropper_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "return WSH.CreateObject("
        $s2 = "noSign.O[0].text = obaAdedapo[0][0].replace(noSign.I, \"A\");"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_eval_hex_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x65\\x76\\x61\\x6c"
        $s2 = "\"]].join(\\\"\\\");\"));"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_eval_hex_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ");eval(eval("
        $s2 = "*/;(function(){var"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_eval_hex_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ");eval(eval("
        $s2 = "(function(){var "
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_eval_hex_003_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ");eval(eval("
        $s2 = "if($feature == \"widgets\")"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_eval_hex_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "=window;\"));/*"
    condition:
        $s0 and $s1
}

rule js_malware_fakedomain_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "-google.info/"
    condition:
        $s0 and $s1
}

rule js_malware_fake_jquery_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = ".js\")"
        $s2 = "require(\"./js/jquery-"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_fake_jquery_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "\\x71\\x75\\x65\\x72\\x79\\x2E\\x63\\x6F\\x6D\\x2F\\x63\\x6F\\x6D\\x70\\x61\\x62\\x69\\x6C\\x69\\x74\\x79\\x2E\\x70\\x68\\x70\\x3F"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_fake_jquery_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "encodeURI(navigator.userAgent)"
        $s4 = "encodeURI(document.referrer)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_fakeanalytics_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "qa('create',"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_fakeanalytics_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "sanidtarysdpasljoldw"
    condition:
        $s0 and $s1
}

rule js_malware_fakegcse_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "gcse.type"
        $s4 = "main1.js"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_fakegcse_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "gcse.src = (document.location.protocol"
        $s4 = "X.open(\"POST\", 'http://' + SERVER_IP + ':' + SERVER_PORT +"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_fbfakevideo_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "navigator.userAgent.toLowerCase();function"
        $s3 = "script>l1l="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_freetools_info_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x2E\\x69\\x6E\\x66\\x6F\\x2F\",\""
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_gads_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "gads.src = '\\x68\\x74\\x74\\x70"
    condition:
        $s0 and $s1
}

rule js_malware_generic_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "<script>d=Date;d=new d"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "date=new Date()"
        $s3 = "s+=ar.substr(pos,1);}e(s);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "<script>i=0;if(window"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "<script>try{q.appendChild"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "teksasli=unescape(teks);document.write(teksasli"
    condition:
        $s0 and $s1
}

rule js_malware_generic_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write("
        $s2 = "<!-- HTML encodyd by PR-CY.ru -->"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_005_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write("
        $s2 = "%3C%69%66%72%61%6D%65%20%73%72%63%3D%22"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "|style|display|none|"
    condition:
        $s0 and $s1
}

rule js_malware_generic_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "if|parseInt|detectIE|iframe|"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "return c.toString("
        $s3 = "<tag"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "/images/ads.js\"></script>"
    condition:
        $s0 and $s1
}

rule js_malware_generic_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".split('*');for(var"
    condition:
        $s0 and $s1
}

rule js_malware_generic_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "Python|cache|inurl|45|31|30|while"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_024 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "}c=unescape(b);document.write(c);"
    condition:
        $s0 and $s1
}

rule js_malware_generic_025 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "_gfsf_uu_getbyte|cookie|indexOf|push"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_025_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "|ame|write|document|s|rc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_026 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "x74\\x70\\x69\\x72\\x63\\x73\\x3C"
    condition:
        $s0 and $s1
}

rule js_malware_generic_027 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "|is|"
        $s4 = "|gd|"
        $s5 = "|write|document|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_generic_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.writeln"
        $s3 = "\\x73\\x74\\x79\\x6c\\x65\\x2e\\x64\\x69\\x73\\x70\\x6c\\x61\\x79\\x3d\\x27\\x6e\\x6f\\x27\\x20\\x2b\\x20\\x27\\x6e\\x65\\x27"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "\\/\\/url.ie\\/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<a href=\"http"
        $s2 = "consent script</a></noscript>"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_033 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "{  return (eval('pars'+'eInt')("
    condition:
        $s0 and $s1
}

rule js_malware_generic_034 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "src=\"http://ow.ly"
    condition:
        $s0 and $s1
}

rule js_malware_generic_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "display:none;"
        $s2 = "ult-blk-cbl."
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_generic_037 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "src=\"https://www.onlineclouds.info/v1/api/helper.js"
    condition:
        $s0 and $s1
}

rule js_malware_generic_038 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "src=\"https://braincdn.org/"
    condition:
        $s0 and $s1
}

rule js_malware_generic_039 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "\\x2F\\x61\\x70\\x70\\x2E\\x6A\\x73\\x22\\x3E\\x3C\\x2F\\x73\\x63"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_041 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "var popunder = {expire"
    condition:
        $s0 and $s1
}

rule js_malware_generic_042 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "navigator[\"\\x75\\x73\\x65\\x72\\x41\\x67\\x65\\x6e\\x74\"];"
        $s3 = "new window[\"\\x52\\x65\\x67\\x45\\x78\\x70\"]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_043 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "throw'\\x45\\x72'+'\\x72\\x6f'+'\\x72\\x20'+'\\x69\\x6e'+'\\x20\\x70"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_044 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "b0RErwToL3roDsxnRapojCyFBs2Ed"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_generic_045 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = ".replace(RegExp("
        $s3 = "cmd.exe"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_gpl_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "<script>/*LGPL*/ try{ window.onload"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_gpl_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "<script>/*GNU GPL*/ try{window.onload"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_hashdate_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "hashdate().toString(16) + \".eu/script.html?"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_hexvar_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "<script> var _0x"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_hiddeniframe_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document}catch(dgsgsdg){zxc"
    condition:
        $s0 and $s1
}

rule js_malware_hiddeniframe_002_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "js_kod2.src = 'http://kreotceonite.com/"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_hiddeniframe_002_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "js_kod2.src = 'http://anadoluengellilerkenti.com/img/trans/"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_hiddeniframe_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = ").style.display='none';document.body.appendChild("
    condition:
        $s0 and $s1
}

rule js_malware_hiddeniframe_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "<' + 'i' + 'f' + 'r' + 'a' + 'm' +"
    condition:
        $s0 and $s1
}

rule js_malware_hiddeniframe_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "60!105!102!114!97!109!101!32!115!114!99!61!34!104"
        $s3 = "function Decode(){var temp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_hiddeniframe_005_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "60!105!102!114!97!109!101!32!115!114!99!61!34!104"
        $s3 = "60!105!102!114!97!109!101"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_hiddeniframe_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "if(window.document)s+=String.fromCharCode(n[i]-(020+i"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_hiddeniframe_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "<i\\x66\\x72\\x61m\\x65\\x20onlo\\x61d=\\x27\\x61\\x384gVF(\\x29;\\x27 src=\\x27"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_hiddeniframe_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.cookie.indexOf("
        $s2 = "style=\"border: 0px none; width: 100%; height: 100vh;z-index:9999999; position:fixed;top:0;left:0\",e.src="
        $s3 = "document"
        $s4 = "document.cookie.indexOf("
        $s5 = "style=\"border: 0px none; width: 100%; height: 100vh;z-index:9999999; position:fixed;top:0;left:0\",e.src="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_iframe_injector_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = ";document.write('<iframe style=\"position:fixed;top:0px;left:-"
    condition:
        $s0 and $s1
}

rule js_malware_iframe_injector_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "iframe"
        $s3 = "\"; document.body.appendChild(i);})();"
        $s4 = "(function(){var i = document.createElement(\"iframe\"); i.style.display = \"none\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_iframe_injector_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "iframe"
        $s3 = "/google_counter.php');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_iframe_injector_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "return c.toString("
        $s3 = "innerHTML|iframe|width|100|scrolling|no|document|4000|frameborder|src|http|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_iframe_injector_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "JSinj=document.createElement('iframe');"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "undefined|ofdsfjnascjsnfstjejewqoewqsfkjdsjfdksfjbiv|reverse|x3b|orday|fer|join|epyt|height|script|new|Math|typeof|gro|Image|tpircsavaj|width|self|src|random|crs|write|location"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "\\x68\\x74\\x74\\x70\\x3A\\x2F\\x2F"
        $s4 = ".setAttribute(\"type\",\"text/javascript\");var"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_iframe_injector_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "=sTKpUGchN2cl9FKlBXYjNXZuVHKlRXaydnL05WZtV3YvR2O"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "window.mondrawtexture=1,window.onload=function(){"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "document.createElement('iframe')"
        $s3 = "x.style.display = \"none\";x.src ="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_iframe_injector_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "a.appendChild(c);d.body.appendChild(a);document.cookie=n.concat("
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "document.createElement('iframe')"
        $s3 = "document.body.appendChild(document.createElement('div')).appendChild("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_iframe_injector_013 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = /<!--[\w]+-->[\s]*<script[^>]+>[^{]+try[\s]*\{[\s]*\+[\s]*function\(\)[\s]*\{[\s]*if[\s]*\(document\.querySelector\)\+\+\(window/
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = ";try{if(Math.ceil("
        $s3 = ".fromCharCode(eval("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_iframe_injector_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "var __calb = function() { try { if( !document || !document.body ) { window.setTimeout(__calb, 1000); return; } if(document.getElementById"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "String.fromCharCode"
        $s4 = "try{document;}catch("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_iframe_injector_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String[\"fromCharCode"
        $s2 = "\"split\";e=eval;"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_iframe_injector_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "window.location"
        $s3 = "&frm=frame"
        $s4 = "+window.location.search.replace("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_iframe_injector_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = ".replace("
        $s4 = "=unescape("
        $s5 = "));document.write("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_inject_adrequest_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".js?"
        $s2 = "adrequest.xyz"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_inject_allyouwant_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".js?"
        $s2 = "cdn.allyouwant.online"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_inject_balantfromsun_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "balantfromsun.com"
    condition:
        $s0 and $s1
}

rule js_malware_inject_cdnwebsiteforyou_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "cdnwebsiteforyou.biz"
    condition:
        $s0 and $s1
}

rule js_malware_inject_cdnwidgetserver_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "src=\"http://cdn.widgetserver.com"
    condition:
        $s0 and $s1
}

rule js_malware_inject_deliverygoodstrategy_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "deliverygoodstrategy.com"
    condition:
        $s0 and $s1
}

rule js_malware_inject_drupalupdates_001 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "drupalupdates.tk"
    condition:
        $s0 and $s1
}

rule js_malware_inject_eedu_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".js?"
        $s2 = "cdn.eeduelements.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_inject_eedu_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "\\x65\\x65\\x64\\x75\\x65\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x73"
        $s2 = "\"];function httpGet(_0x"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_inject_lastdaysonlines_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "lastdaysonlines.com/"
    condition:
        $s0 and $s1
}

rule js_malware_inject_livestatsnet_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "livestatsnet.services"
        $s2 = "<script async=\"async\" src=\"https://livestatsnet.services"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_inject_livestatsnet_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "livestatsnet.services"
        $s2 = "if(!loadStats){function loadStats(){var head=document.getElementsByTagName(\"head\")[0],scr="
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_inject_privacylocationforloc_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "privacylocationforloc.com"
    condition:
        $s0 and $s1
}

rule js_malware_inject_setforspecialdomain_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "setforspecialdomain.com"
    condition:
        $s0 and $s1
}

rule js_malware_inject_simpleoneline_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "simpleoneline.online"
    condition:
        $s0 and $s1
}

rule js_malware_inject_somelandingpage_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "somelandingpage.com"
    condition:
        $s0 and $s1
}

rule js_malware_inject_startreceive_001 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "stats.startreceive.tk/"
    condition:
        $s0 and $s1
}

rule js_malware_inject_stringengines_001 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "json.stringengines.com/"
    condition:
        $s0 and $s1
}

rule js_malware_inject_thebiggestfavoritemake_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "src='https://thebiggestfavoritemake.com/"
    condition:
        $s0 and $s1
}

rule js_malware_inject_trasnaltemyrecords_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".js?"
        $s2 = "trasnaltemyrecords.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_inject_upgraderservices_001 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "upgraderservices.cf"
    condition:
        $s0 and $s1
}

rule js_malware_inject_uustoughtonma_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".js?"
        $s2 = "uustoughtonma.org"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "<script>if ((navigator.userAgent.match(/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = ".charCodeAt(0) ^ "
    condition:
        $s0 and $s1
}

rule js_malware_injector_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "document.write( unescape( '%3C%21%44%4F%43%54%59%50%js"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%20%20%3C%68"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "http:\\u002f\\u002f"
    condition:
        $s0 and $s1
}

rule js_malware_injector_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "document.write(String.fromCharCode(60,115,99,114,105,112,116,32,"
    condition:
        $s0 and $s1
}

rule js_malware_injector_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write("
        $s2 = " src=\\\"ht\"+\"tp:\\/\\/"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "collect.js"
        $s2 = "122.155.168.105/ads/inpage/pub/collect.js"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "collect.js"
        $s2 = "179/collect.js"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "collect.js"
        $s2 = "clickevents.com.my/"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_024 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "cloudfrond.org"
    condition:
        $s0 and $s1
}

rule js_malware_injector_025 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "/script.php\"><"
    condition:
        $s0 and $s1
}

rule js_malware_injector_026 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "/script.php\">"
    condition:
        $s0 and $s1
}

rule js_malware_injector_027 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "|iframe|document|write|src|http|bit|ly|1BC4pKP|width|height|frameborder|marginwidth|marginhe"
    condition:
        $s0 and $s1
}

rule js_malware_injector_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "try_pick_colors();}</script>"
    condition:
        $s0 and $s1
}

rule js_malware_injector_029 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "='%';eval(unescape(('var"
    condition:
        $s0 and $s1
}

rule js_malware_injector_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "/i[_"
        $s3 = "if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|iframe|"
        $s3 = "999px"
        $s4 = "|atob|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_034 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "39, 59, 77, 61, 117, 110, 101, 115, 99, 97, 112, 101, 40, 78, 41, 59, 100, 111, 99, 117, 109, 101, 110, 116, 46, 119, 114, 105, 116, 101, 40, 77, 41, 59))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "cdn.googletoolservices.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x72\\x65\\x66\\x65\\x72\\x72\\x65\\x72"
        $s2 = "\\x75\\x73\\x65\\x72\\x41\\x67\\x65\\x6E\\x74"
        $s3 = "ip(hone|od|ad)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_037 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "='%3Cscript%20"
    condition:
        $s0 and $s1
}

rule js_malware_injector_038 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.getElementsByTagName(\"body\")[0].appendChild("
        $s4 = "link_site"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_039 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "\\x77\\x72\\x69\\x74\\x65"
        $s5 = "\\x3C\\x73\\x63\\x72\\x69\\x70\\x74"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_040 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "eval|document|write|String|fromCharCode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_041 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "3c6120687265663d226d61696c"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_injector_042 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = /\/\*\w+\*\/\s*document\.write\(.<[script'\"+\s]+type=.text\/javascript.\s*src=.http/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_044 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "dancewithme.biz"
    condition:
        $s0 and $s1
}

rule js_malware_injector_045 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "//assetsbraln.com/cv5/tasking.js"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_046 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "{var p=document.createElement('script');p.type='text/javascript';p.async=true;p.src=g('"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_047 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "-ninja.min.js"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_048 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|viglink|js|com|script|insertBefore'.split"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_048_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "\\x7C\\x70\\x31\\x61\\x69\\x7C\\x64\\x6F\\x63\\x75\\x6D\\x65\\x6E\\x74\\x7C"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_049 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "\\x61\\x70\\x70\\x65\\x6E\\x64\\x43\\x68\\x69\\x6C\\x64\",\"\\x2F\\x2F"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_050 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "|onload"
        $s4 = "|appendChild"
        $s5 = "aHR0cDovL3dpbGRlc3RvcmUuYml6L2dhdGUucGhw"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_051 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "iframe.style.display = \"none\";"
        $s3 = "var iframe = document.createElement('iframe');"
        $s4 = "if (typeof window."
        $s5 = "document.body.appendChild(iframe);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_052 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "\\x3C\\x73\\x63\\x72\",\"\\x69\\x70\\x74\\x20"
        $s4 = "x20\\x73\\x72\\x63\\x3D\\x22\\x68\\x74\\x74\\x70"
        $s5 = "\\x77\\x72\\x69\\x74\\x65"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_053 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "(function(){var i=document.createElement('script');i.type='text/javascript';i.async=true;i.src=atob("
        $s4 = ");var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(i,s);})();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_054 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = ");zaz=za;e(zaz);}</script>\";"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_056 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.write ('<div style=\"display:none"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_057 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "\\x66\\x72\\x6F\\x6D\\x43\\x68\\x61\\x72\\x43\\x6F\\x64\\x65"
        $s5 = "\\x64\\x65\\x63\\x6F\\x64\\x65"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_057_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\\x45\\x6E\\x61\\x62\\x6C\\x65\\x64\",\"\\x63\\x6E\\x74\\x5F\\x75\\x74\\x6D\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_058 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "Histats.start"
        $s2 = "browser_name"
        $s3 = "top_txt"
        $s4 = "|link_to_file|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_058_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "Histats.start"
        $s2 = "browser_name"
        $s3 = "top_txt"
        $s4 = ".link_to_file"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_058_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "Histats.start"
        $s2 = "document.getElementsByTagName('body')[0]).appendChild(hs);"
        $s3 = "_Hasync.push(['Histats.start"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_058_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "Histats.start"
        $s2 = "|bIsFirst|"
        $s3 = "|setAdsCookie|"
        $s4 = "|sAdsUrl2|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_059 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "angularCdn:"
        $s4 = "return d},algularToken:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_malware_injector_060 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".js?"
        $s2 = /\/.jquery.min.js\?style=.rim/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_malware_injector_061 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "importScripts"
        $s1 = /self\.importScripts\(.http/
    condition:
        $s0 and $s1
}

rule js_malware_injector_062 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "var __encode"
        $s3 = "=[\"\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\""
        $s4 = "\"\\x66\\x72\\x6F\\x6D\\x43\\x68\\x61\\x72\\x43\\x6F\\x64\\x65\",\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x5C\\x77\\x2B\",\"\\x5C\\x62\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_063 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|yadro|"
        $s3 = "|ontv|"
        $s4 = "e=function(c){return("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_064 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104,116,116"
        $s3 = "getElementsByTagName(String.fromCharCode(104,101,97,100))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_065 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "&#x64;&#x61;&#x74;&#x61;&colon;&#x74;&#x65;&#x78;&#x74;&sol;&#x6A;&#x61;&#x76;&#x61;&#x73;"
    condition:
        $s0 and $s1
}

rule js_malware_injector_066 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\\x42\\x72\\x6F\\x77\\x73\\x65\\x72\",\"\\x74\\x6F\\x4C\\x6F\\x77\\x65\\x72\\x43\\x61\\x73\\x65\",\"\\x75\\x73\\x65\\x72\\x41\\x67\\x65\\x6E\\x74"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_067 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "document.createElement("
        $s3 = "if(typeof window.web_security"
        $s4 = "document.addEventListener('DOMContentLoaded', function(){"
        $s5 = "window.web_security"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_067_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "document.createElement("
        $s3 = "if(typeof window.web_security"
        $s4 = "window.web_security"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_malware_injector_068 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = /if[\s]*\(![\w]+\)[\s]*\{function[\s]*[\w]+\(\)[\s]*\{[\s]*var[\s]*[\w]+=document.getElementsByTagName\(.head.\)[\s]*\[[\d]+\],[\s]*[\w]+=document.createElement\(.script.\);[^,]+,[\w]+\.src=[^,]+,[\w]+\.async=.async.,[\w]+\.appendChild\([\w]+\)[\s]*\}[\s]*[\w]+\(\)[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_069 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "location.href.indexOf(i.atob("
        $s3 = "}}) (window,document,"
        $s4 = "google-analytics"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_070 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "script=document.createElement("
        $s4 = "poponclick"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_072 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(atob('PHNjcmlwdCBzcmM9Imh0dH"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_073 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');"
        $s4 = "style.visibility = 'hidden';"
        $s5 = "eval(scripts[i].innerHTML);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_074 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "xml_url_request = '/wp-includes/fonts/"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_075 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement('script')"
        $s4 = "[0].appendChild(script);};include("
        $s5 = ");script.src = url;document."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_injector_076 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104,116,116"
        $s3 = ",46,103,97,47,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_080 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document['createElement']('script');"
        $s3 = "require("
        $s4 = "]('head')[0]['appendChild'](_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_081 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "sojson"
        $s2 = "['\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65']['\\x61\\x70\\x70\\x6c\\x79']"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_082 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "document.createElement("
        $s3 = "document.head.appendChild(window."
        $s4 = "document.createElement('s'+'c'+'r'+'i'+'p'+'t');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_083 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "importScripts"
        $s1 = "importScripts('https://dihlw"
    condition:
        $s0 and $s1
}

rule js_malware_injector_084 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "=['info','apply','return"
        $s5 = "['getDate']()),_0x"
        $s6 = "));function foff(){var _0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule js_malware_injector_085 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "].push({'gtm.start"
        $w0 = "//www.googletagmanager.com"
        $s3 = /parentNode\.insertBefore\([\w]+,[\w]+\)\;[\s]*\}\)\(window,document,.script.,.dataLayer/
    condition:
        $s0 and $s1 and $s2 and $s3 and not $w0
}

rule js_malware_injector_087 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = ".open('POST',decodeURIComponent(escape"
        $s3 = "12,23,18,20,2,21,22,2,2];l"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_088 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = ") + window.location.href + window.atob(\"JnI"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_089 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "}(window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"],'\\x73\\x63\\x72\\x69\\x70\\x74"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_injector_090 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "document.createElement("
        $s3 = "n),cmd=(n,t)=>atob(\"PD9"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_091 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "x6d|window|x79"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_092 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "onerror=eval(String.fromCharCode("
        $s3 = "97,112,112,101,110,100,67,104,105,108,100,40"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_093 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "replace(new RegExp"
        $s4 = "|http"
        $s5 = "|href"
        $s6 = "getCookie|url|new"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_injector_stats_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104, 116, 116, 112,"
        $s3 = "String.fromCharCode(104, 116, 116,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_injector_stats_001_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104, 116, 116, 112,"
        $s3 = "fromCharCode(104, 116, 116"
        $s4 = /var _0x[\w]+[\s]*=[\s]*function\(_0x[\w]+,[\s]*_0x[\w]+\)[\s]*\{[\s]*var [\w]+[\s]*=[\s]*document\.createElement\(.script.\)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_stats_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104, 116, 116, 112,"
        $s3 = "var need_t = true;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_stats_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104, 116, 116, 112,"
        $s3 = "String.fromCharCode(115, 99, 114, 105, 112, 116))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_stats_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "eval(String.fromCharCode(118, 97, 114, 32,"
        $s3 = "83, 116, 114, 105, 110, 103, 46, 102, 114, 111, 109, 67, 104, 97, 114, 67, 111, 100, 101, 40, 49, 48, 52, 44, 32, 49, 49, 54, 44, 32, 49, 49, 54, 44, 32, 49, 49, 50, 44, 32, 49, 49, 53, 44, 32, 53, 56, 44, 32, 52, 55, 44,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_stats_004_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "eval(String.fromCharCode(118, 97, 114, 32,"
        $s3 = "83, 116, 114, 105, 110, 103, 91, 34, 92, 120, 54, 54, 92, 120, 55, 50, 92, 120, 54, 70, 92, 120, 54, 68, 92, 120, 52, 51, 92, 120, 54, 56, 92, 120, 54, 49, 92, 120, 55, 50, 92, 120, 52, 51, 92, 120, 54, 70, 92, 120, 54, 52, 92, 120, 54, 53"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_injector_stats_004_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "eval(String.fromCharCode(118, 97, 114, 32,"
        $s3 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 115, 66, 121, 84, 97, 103, 78, 97, 109, 101, 40, 34, 104, 101, 97, 100, 34, 41, 91, 48, 93, 46, 97, 112, 112, 101, 110, 100, 67, 104, 105, 108, 100, 40"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_injector_stats_004_04 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "eval(String.fromCharCode(118, 97, 114, 32,"
        $s3 = "fromCharCode(118"
        $s4 = /var [\w]+[\s]*=[\s]*[\d]+;[\s]*eval\(String\.fromCharCode\(118/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_injector_stats_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104, 116, 116, 112,"
        $s3 = ".parentNode.insertBefore("
        $s4 = "(function(){ var"
        $s5 = "document.getElementsByTagName(\"script\")[0];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule js_malware_injector_stats_006 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = /(var [\w]+[\s]*=[\s]*String\.fromCharCode\([^\)]+\);[\s]*){4,}var [\w]+[\s]*=[\s]*document\.createElement\([\w]+\);[\s]*[\w]\.type[^;]+;[\s]*var[\s]*[\w]+[\s]*=[\s]*document\.getElementsByTagName\([^;]+\];[\s]*[\w]+\.parentNode\.insertBefore\([\w],[\s]*[\w]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_js_jquery_min_php_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "/js/jquery.min.php\"; var n_url"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_loadPNGData_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "loadPNGData(strFile,"
        $s3 = "data.png"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_login_stealer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "\"\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\",\"\\x66\\x75\\x6e\\x63"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_login_stealer_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "btoa(location.host +"
        $s4 = ".preventDefault(); return false; } }); clearInterval("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_login_stealer_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "atob("
        $s1 = "if(i.location['href'].indexOf"
        $s2 = "(i.atob("
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_login_stealer_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "=document['querySelector']('#user_login')[_0x"
        $s5 = ")]+'&ip=127.0.0.1&url='+encodeURIComponent(window[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "payment.save();"
        $s2 = "authorizenet_cc_number"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_001_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "(){if(document["
        $s2 = "document[\"\\u0067\\u0065\\u0074\\u0045\\u006c\\u0065\\u006d\\u0065\\u006e\\u0074\\u0073\\u0042\\u0079\\u0054\\u0061\\u0067\\u004e\\u0061\\u006d\\u0065\"](\"\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\")"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "// Credit Card Validation Javascrip"
        $s3 = "|checkout')).test(window.location)) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_002_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "// Credit Card Validation Javascrip"
        $s3 = "http.open(\"POST\""
        $s4 = ".php\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_002_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "this['eval']("
        $s2 = "20snd"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_002_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "this['eval']("
        $s2 = "if\\x28\\x28n\\x65\\x77\\x20R\\x65gExp"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $w0 = "\\x42\\x4C\\x4F\\x47\\x20\\x53\\x54\\x41\\x52\\x54\\x53\\x20\\x48\\x45\\x52\\x45"
        $s2 = "\\x71\\x75\\x65\\x72\\x79\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\\x41\\x6C\\x6C"
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule js_malware_magentoccstealer_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "xmlhttp.open(\"GET\","
        $s3 = "=\"name=\"+name+\"&num=\"+num+\"&mon=\"+mon+\"&yr=\"+yr+\"&cid=\"+CVN;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_006_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "xmlhttp.open(\"GET\","
        $s3 = "_stripe_cc_number\").value;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "xmlhttp.open(\"GET\","
        $s3 = "getElementById(\"billing:customer_password\").value;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "function clk()"
        $s4 = "http.send(\"data=\"+"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_008_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "unction clk()"
        $s2 = "var cc = new RegExp(\"[0-9]"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_008_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "unction clk()"
        $s2 = "http.open(\"POST\","
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "// Credit Card Validation Javascript"
        $s4 = "frm[i].attachEvent('onsubmit', fixform);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = ".test(window.location))"
        $s3 = "{document.write('>tpircs/<>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_010_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = ".test(window.location))"
        $s3 = "{document.write('<script src=\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x6D\\x65\\x64\\x4D\\x65\\x7C\\x70\\x61\\x79\\x6D\\x65\\x6E\\x74\\x7C\\x5F\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72\\x7C"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "var jsvalidator={"
        $s4 = "'gi')).test(window.location)){ jsvalidator.validate(); }"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x64\\x6F\\x63\\x75\\x6D\\x65\\x6E\\x74"
        $w0 = "$('.MenuTrigger');"
        $s2 = "\"\\x5C\\x77\\x2B\",\"\\x5C\\x62\",\"\\x67\"];eval(function("
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule js_malware_magentoccstealer_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\\x63\\x63\\x73\\x61\\x76\\x65\\x5F\\x65\\x78\\x70\\x69\\x72\\x61\\x74\\x69\\x6F\\x6E\\x5F\\x79\\x72"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "onepage|checkout|onestep"
        $s3 = "Glink:'http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_015_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "116,101,115,116,40,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110"
        $s2 = "99,104,101,99,107,111,117,116"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_015_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "['atob']||(_0x"
        $s5 = "['atob']=function(_0x"
        $s6 = "grelos_v={'snd':null,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_magentoccstealer_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"\\x47\\x45\\x54\",\"\\x68\\x74\\x74\\x70\\x73\\x3A\\x2F\\x2F\\x73\\x63\\x72\\x69\\x70\\x74\\x62\\x2E\\x63\\x6F\\x6D\\x2F"
    condition:
        $s0 and $s1
}

rule js_malware_magentoccstealer_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "eval((function(){var"
        $s3 = "].concat(o);var"
        $s4 = "nepage|checkou"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "static-4677.kxcdn.com"
    condition:
        $s0 and $s1
}

rule js_malware_magentoccstealer_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "form:has([name^=payment])"
        $s3 = "document.getElementsByName('payment[cc_number]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_019_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "crossDomain:false,data:data,type:'POST',dataType:'json'})}}}},700);"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_019_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "crossDomain:false,data:data,type:'POST',dataType:'json'})}break}}},700);"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_020 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = /if\(\(new\s*RegExp\('(\w+creditcard|onepage)?\|checkout\|\w+/
        $s4 = /http.send\(.info=.\+keym\+'&hostname='\+\w+\+.&key=.\+/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "// Credit Card Validation Javascri"
        $s3 = "+encodeURIComponent(b)+\"&domain=\"+dmn);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "street2|city|paypal_direct_cc_number"
        $s3 = "|authorizenet_expiration_yr|authorizenet_expiration|firstname|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "onepage|checkout|onestep"
        $s3 = "var address"
        $s4 = "function send_data() {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_024 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "\\x6F\\x6E\\x65\\x70\\x61\\x67\\x65\\x7C\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "\\x73\\x65\\x6C\\x65\\x63\\x74\\x5B\\x6E\\x61\\x6D\\x65\\x3D\\x22\\x70\\x61\\x79\\x6D\\x65\\x6E\\x74\\x5B\\x63\\x63\\x5F\\x65\\x78\\x70\\x5F\\x79\\x65\\x61\\x72\\x5D\\x22\\x5D"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_027 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "this['eval']("
        $s2 = "this['atob']"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x69\\x70\\x2e\\x35\\x75\\x75\\x38\\x2e\\x63\\x6f\\x6d\\x2f\\x69\\x70\\x2f\\x69\\x70\\x5f"
    condition:
        $s0 and $s1
}

rule js_malware_magentoccstealer_029 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "window.location.href,q.match(/onepage|checkout/gi)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_030 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "$(this).find( \"input, textarea, select"
        $s2 = "$validateIds = $('#co-payment-form, #opc-address-form-billing"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "this[\"eval\"]("
        $s2 = "fromCharCode(K);H=String(A)"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "onepage|checkout|onestep"
        $s3 = "= $.noConflict(true);</scr"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_033 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "paypal_direct_cc_cid|ct|zp|fln|ad|authorizenet_cc_cid"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_033_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "uname"
        $s4 = "QWpheC5SZXNwb25kZXJzLnJlZ2lzdGVyKFZhcmllbi5HbG9iYWxIYW5kbGVycyk7"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "jQuery(\"input[name='payment[cc_cid]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "input[name='payment[cc_cid]"
        $s2 = "{localStorage.setItem(\"billing\",jQuery(\"#co-billing-form"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "(.*?(cc_number|ccnumber|cardno|card|cardNumber"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_037 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "charAt"
        $s1 = ";var r=t.length;var f=[];for(var j=0;j<r;j++){f[j]=t.charAt(j)};for(var j=0;j<r;j++){var b=o*(j+"
    condition:
        $s0 and $s1
}

rule js_malware_magentoccstealer_038 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "query_verifto += \"&cc_year=\" + encodeURIComponent"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_039 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /this\s*\[\s*[\"']eval[\"']\s*\]\s*\(\s*this\s*\[\s*[\"']unescape[\"']\s*\]\s*\(\s*[\"'](i|%69)(f|%66)(\(|%28)(\(|%28)(n|%6e|%6E)(e|%65)(w|%77)( |%20)(R|%52)(e|%65)(g|%67)(E|%45)(x|%78)(p|%70)/
    condition:
        $s0 and $s1
}

rule js_malware_magentoccstealer_040 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "'\\x64\\x61\\x74\\x61':{'\\x66\\x72\\x6f\\x6e\\x74\\x65\\x6e\\x64':encData},'\\x73\\x75\\x63\\x63\\x65\\x73\\x73"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "ebe7e10fc04a7d26ab181b0ebf675d26"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_041_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "eval(function(w,i,s,e){"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_042 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "(function(){var"
        $s3 = "').substr(0,"
        $s4 = /\(function\(\)\{var [\w]+=..,[\w]+=([\d]+|-)*;function [\w]+\([\w]+\)\{var [\w]+=[\d]+;var [\w]+=[\w]+\.length;var [\w]+=\[\];for\(var/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_043 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "+btoa(n),document.body.appendChild(a)}window.onload=function(){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_044 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "replace|_cc_number|else|lastname|firstname|_expiration_yr"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_045 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "=[\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\",\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_046 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "](\"div\");"
        $s4 = "window[\""
        $s5 = /\(function [\w]+\(\)\{[^=]+[\w]+[\s]*=[\s]*\"[^;]+;+[\s]*var [\w]+[\s]*=[\s]*\"[^;]+\";+[\s]*var [\w]+[\s]*=[\s]*document\[\"cre[^;]+div\"\);+[^\{]+=[\s]*\{\};+[\s]*([\w]+[=\[\( ][^\n]+;+[\s]*)+\}\)\(\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_047 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "\")+\"?image_id=\"+"
        $s4 = "document.createElement(\"img\");a.width=\"1px\",a.height=\"1px\",a.id=t,a.src=atob(\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_047_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "\")+\"?image_id=\"+"
        $s4 = "){return btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/g,function(e,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_048 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "eval(function("
        $s3 = ".push(String.fromCharCode(parseInt("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_049 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "img.src = window.atob("
        $s3 = "&data="
        $s4 = "&loc="
        $s5 = "+ window.btoa(location.href);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_049_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "atob(\"c2NyaXB0\"));e.src=atob(\"aHR0cH"
        $s4 = "setInterval(function(){if(!window.$sloaded&&!window.devtools.open&&\"undefined"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_049_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "ustomEvent(\"devtoolschange\""
        $s3 = "/checkout/.test"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_050 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "charAt"
        $s1 = "=i().fromCharCode(127)"
    condition:
        $s0 and $s1
}

rule js_malware_magentoccstealer_050_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "['atob']||(_0x"
        $s5 = "['atob']=function(_0x"
        $s6 = "id'],'cookie':AnalyticsId["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_magentoccstealer_051 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "GetCCInfo"
        $s2 = "var hex_chr"
        $s3 = "var JSON=JSON||{};"
        $s4 = "var JSON=JSON||{};JSON.stringify=JSON"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_051_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "GetCCInfo"
        $s2 = "var hex_chr"
        $s3 = "JSON.parse($s.Base64.decode(Cookies.get(\"$sent\")));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_051_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "GetCCInfo"
        $s2 = "var hex_chr"
        $s3 = ",'GetCCInfo',"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_051_04 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "GetCCInfo"
        $s2 = /var _0x[\w]+=\[[^\]]{2000,}\];[\s]*\(function[^\n]+\}\}/
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_051_05 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "['SendData']"
        $s2 = "['SendData']();},'LoadImage':function(_0x"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_052 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "jQuery('#onestepcheckout-form').change(function()"
        $s2 = "(jQuery('input[name=\"payment[cc_number]\"]').val().replace(/[^0-9]/g,"
        $s3 = "/gate.php?token="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_054 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "charAt"
        $s1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        $s2 = "{return t.replace(/[0-9A-Z]/g,\"\")}\"undefined\"!=typeof exports"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_055 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "importCdn.setAttribute('src',"
        $s3 = "document.createElement('script');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_056 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "window|open|orientation|function|var|null|Firebug|module|sloaded|atob"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_057 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "document.createElement("
        $s3 = "location.href.search(atob("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_058 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "onepage|checkout|onestep"
        $s3 = "if(resp) jQuery('body').html(resp);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_059 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "location.href.search(\"onepagecheckout"
        $s4 = "new RegExp(atob("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_060 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "script=document.createElement("
        $s4 = "Y2hlY2tvdXQ="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_061 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "setTimeout(function()"
        $s2 = "lmcScr"
        $s3 = "!iMCwO())"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_061_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "setTimeout(function()"
        $s2 = "lmcScr"
        $s3 = "'\\x23\\x30'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_062 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "onepage|checkout|onestep"
        $s3 = "type:\"POST\",dataType:\"json\",success:function"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_100 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = ";};var elems={};var result={};var final={};var subkeys,ids;function format(_0x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_101 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "'cc_cvv';"
        $s4 = "encode : function (input) {"
        $s5 = "var checkStatus = \"\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_102 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "rand;"
        $s5 = ";urll"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_103 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "['atob']||(_0x"
        $s5 = "['atob']=function(_0x"
        $s6 = "'__bill2',_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_magentoccstealer_104 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "c3R5bGU+LkNhcmRCcmFuZEljb24tY29udGFpbmVye2hlaWdodDoxMDAlO3Bvc2l0aW9uOm"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_105 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "btoa(JSON[_0x"
        $s4 = ":btoa(_0x"
        $s5 = ";url"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_106 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "=String.fromCharCode(127);return _.join(\"\").split(\"%\")"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_107 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "|btoa|"
        $s5 = "|_cc_number|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_108 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "return String.fromCharCode("
        $s3 = "selectedIndex].innerText:''};function detect(detector,callback,try_after){var interval"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_109 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "return String.fromCharCode("
        $s3 = "#co-billing-form"
        $s4 = "return btoa(encodeURIComponent(str).replace("
        $s5 = "$newform = $('<form action=\"'+geUrl+"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_110 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "document.onclick"
        $s3 = ".click(function(event)"
        $s4 = "window.atob("
        $s5 = ".concat(hosturl,\"\\\"},{"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_111 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "document.cookie = \"currentcvv=\" + document.getElementsByName(\"payment"
        $s3 = "if(document.getElementsByName(\"payment[cc_exp_year]\")[0]) {document.cookie = \"currentyear=\" + document.getElementsByName(\"payment[cc_exp_year]\")[0].value +\"; path=/\";}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_111_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "document.cookie = \"currentcvv=\" + document.getElementsByName(\"payment"
        $s3 = /cccid\s+=\s+'';\s+if\(document\.getElementsByName\(\\"payment\[cc_number\]/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_113 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(atob"
        $s2 = "indexOf(\"admin\")>-1?true:false;if(cookieCheck){setCookieForm(cookName,genStr"
        $s3 = "undefined;function loadScript"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_113_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(atob"
        $s2 = "indexOf(\"admin\")>-1?true:false;if(cookieCheck){setCookieForm(cookName,genStr"
        $s3 = "crypt=new Encrypt.JSEncrypt()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_114 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "window.location.href,document.cookie"
        $s4 = "){if(/payment\\.save()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_115 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "define(['jquery','mage/template',"
        $s2 = ".php\",inputs:data}});$(tmpl).appendTo($(iframeSelector)).submit();},"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_115_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "define(['jquery','mage/template',"
        $s2 = ".php\\\",inputs:data}});$(tmpl).appendTo($(iframeSelector)).submit();},"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_116 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "document.createElement("
        $s3 = "localStorage[jjlskey] = text;"
        $s4 = "fetch(jjlink).then(response => {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_116_02 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "_jj=_0x"
        $s2 = /^[\s]*_jj=_0x[\w]+=>[^\n]{9000}/
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_117 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = ".test(window.location))"
        $s3 = ")).test(window.location) && !(new RegExp(\"cart\").test(window.location))){"
        $s4 = "document.getElementById(\"cloud\").outerHTML = \"\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_118 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "{if(gid(fp[0x"
        $s4 = "}function sos(){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_119 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "|btoa|"
        $s5 = "|save|payment|onclick|click'.split"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_121 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = /=\s*'';\s*for\s*\(/
        $s3 = /var\s\w+=\[('[^']{1,50}',){400}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_121_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = /=\s*'';\s*for\s*\(/
        $s3 = "+'ey'](keyCrypt),crypt;};"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_122 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "RegExp"
        $s3 = "jQuery(\"#checkout\").find(\"select,input\").serializeArray();"
        $s4 = "jQuery.ajax({url:document.URL,type:\"post"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_123 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "setInterval(function(){if(typeof jQuery==\"undefined\")return;new self[\"Function\"||\"Object\"](protoElem).call();},0x"
        $s3 = ");setInterval(function(){if(typeof jQuery==\"undefined\")return;new self[\"Function\"||\"Object\"](protoElem).call();},0x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_123_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "setInterval(function(){if(typeof jQuery==\"undefined\")return;new self[\"Function\"||\"Object\"](protoElem).call();},0x"
        $s3 = /var [\w]+[\s]*=[\s]*\"[^;]{100,}\";/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_124 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "\"\\x3D\",\"\\x26\",\"\\x65\\x78\\x65\\x63"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_125 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "// Credit Card Validation Javascri"
        $s3 = "\",!0),c.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\")"
        $s4 = "document.getElementById(\"authorizenet_cc_number\").value.length,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_126 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "location.href.indexOf(i.atob("
        $s3 = "unction(i,s,o,g,r,a,m){i['GoogleAnalyticsObjects']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_128 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.cookie.indexOf("
        $s2 = "let _0x"
        $s3 = "await fetch("
        $s4 = "document"
        $s5 = "document.cookie.indexOf("
        $s6 = /await[\s]*fetch\([^;]+\);if\([^\)]+\)\{let[\s]*[\w]+[\s]*=[\s]*await[\s]+[\w]+\[[\w]+\[[^;]+;var[\s]*[\w]+[\s]*=[\s]*new[\s]*Function\(/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_magentoccstealer_131 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "=['zNjVBq==','CMvTB3zLsxrLBq==','zgvMAw5LuhjVCgvYDhK=','CgfYC2u=','zgvZA3rVCa==','y2HLy2TVDxq=','yMvMB3jLDw5SB2fK','zMLUza==','C3bSAxq=','Bw9IAwXL','C2vHCMnO','CMvWBgfJzq=='"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_132 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "\\x64\\x65\\x66\\x61\\x75\\x6C\\x74\\x2F\\x69\\x6D\\x61\\x67\\x65\\x73\\x2F"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_134 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "|btoa|"
        $s5 = "|atob|var'.split('|')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_136 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "atob("
        $s1 = "appendTo('head');"
        $s2 = "PHNjcmlwdCBpZD0icGF5bWVudF"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_137 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "atob("
        $s1 = "new self[\"Function\"||\"Object\"]"
        $s2 = "aWYobmV3IFJlZ0V4cCgiY2hlY2tvdXQiKS50ZXN0KH"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_138 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.head.appendChild"
        $s2 = "document.createElement("
        $s3 = "dataType: \"json\","
        $s4 = "$('#login').val()"
        $s5 = "$('#loginForm').submit(function() {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_139 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "|bom|"
        $s5 = "|x3F|function|else|setInterval|100'.split('|'),0,{}))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_140 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = ")]={'[name=ccard_ccnumber]':_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_141 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "// Credit Card Validation Javascri"
        $s3 = ".charCodeAt()-(3*10); i=i+"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_142 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "window.location"
        $s3 = "webkitAllselectElement=['','O','47O47O99"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_143 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "[\"\\x73\\x75\\x62\\x6D\\x69\\x74\",\"\\x50\\x4F\\x53\\x54\",\"\\x2F\\x3F\\x77\\x63\\x2D\\x61\\x6A\\x61\\x78\\x3D\\x70\\x72\\x6F\\x63\\x65\\x73\\x73\","
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_magentoccstealer_144 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = ")]('')&&(Default_Send(),setInterval(_0x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_145 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = ")+'\\x20)')"
        $s2 = ";}}:function(){};return _0x"
        $s3 = "=\\x22payment.','"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_145_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = ")+'\\x20)')"
        $s2 = ";}}:function(){};return _0x"
        $s3 = ";(function(_0x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_146 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "require $"
        $s3 = "= Mage::GetBaseDir();"
        $s4 = ".jpg';"
        $s5 = "payment"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_147 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "].$"
        $s3 = "));@$"
        $s4 = "];if(@$"
        $s5 = "('', @"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_magentoccstealer_148 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "={'_keyStr':_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_magentoccstealer_148_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "echo"
        $s3 = "=['/','/','"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_magentoccstealer_149 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = /=\s*'';\s*for\s*\(/
        $s3 = ");};injector["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_magentoccstealer_150 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement('script')"
        $s4 = "eventsListenerPool"
        $s5 = ".async = true;"
        $s6 = "('body')[0].appendChild("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_magentoccstealer_151 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "atob("
        $s3 = ")](encodeURIComponent, location[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_mailuseful_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "g.rmEeOu+ I>X=59Tlaqs4FUCBRWy!Y03n"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_malware_modified_jquery_001 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".$"
        $s1 = "&&define(\"jquery\",[],function(){return x}))})(window);"
        $s2 = /&&define\(\"jquery\",\[\],function\(\)\{return x\}\)\)\}\)\(window\);[\s]*(jQuery\.noConflict\(\);[\s]*)?var [\w]+[\s]*=[\s]*\[/
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "realstatistics"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "realanalytics"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "real-analytics"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "istatistics"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_05 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "siteanalytics"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_06 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "webstatistics"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_07 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "adsstat"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_08 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "php?id="
        $s3 = "realtds"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_neutrino_001_09 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "trafficanalytics"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "realstatistics"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "realanalytics"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "real-analytics"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "istatistics"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003_05 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "siteanalytics"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003_06 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "webstatistics"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003_07 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "adsstat"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_neutrino_003_08 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "id=\"scriptData"
        $s2 = "realtds"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_niu_code668_com_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "var _$=[\"document\",\"write\",'<script src"
        $s2 = "\"write\",'<script src=\"http://niu.code668.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_nuclear_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "var _0x"
        $s2 = "\"<div style='position:absolute;z-index:1000;top:-1000px;left:-9999px;'><iframe"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_obfuscated_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "charAt"
        $s1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        $s2 = "},'removeCookie':function(){return'dev';},'getCookie':function("
        $s3 = "setCookie':function("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_obfuscated_001_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "charAt"
        $s1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        $s2 = "},'removeCookie':function(){return'dev';},'getCookie':function("
        $s3 = />[\s]*var [\w]+[\s]*=[\s]*[\d]+;[\s]*<.script/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_obfuscated_001_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "charAt"
        $s1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        $s2 = "},'removeCookie':function(){return'dev';},'getCookie':function("
        $s3 = "(function(){var _0x"
        $s4 = "(function(){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_obfuscated_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "var a0a=["
        $s3 = ")+a0b('0x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_malware_obfuscated_wp_core_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(function(p,a,c,k,e,d)"
        $s2 = /^(.*\/)?(wp-admin|wp-includes)\//
        $s3 = "|userAgent"
        $s4 = "|clickund_expert|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_observer_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "=\"setTimeout("
        $s2 = "\"](parseInt("
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_onclickads_net_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "C8N8HU|gd|is"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_oxxtm_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "x72|eval|x64|x61|x6c"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_pastebin_reversed_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "/moc.nibetsap//:ptth\"=crs"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_pastebin_reversed_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x2F\\x77\\x61\\x72\\x2F\\x6D\\x6F\\x63\\x2E\\x6E\\x69\\x62\\x65\\x74\\x73\\x61\\x70\\x2F\\x2F\\x3A"
        $s3 = "\\x22\\x3D\\x63\\x72\\x73\\x20\\x74\\x70\\x69\\x72\\x63\\x73\\x3C\",\"\\x77\\x72\\x69\\x74\\x65\"];document[_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_pastebin_reversed_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\\\x3D\\\\x63\\\\x72\\\\x73\\\\x20\\\\x74\\\\x70\\\\x69\\\\x72\\\\x63\\\\x73\\\\x3C\\\",\\\"\\\\x77\\\\x72\\\\x69\\\\x74\\\\x65\\\"];document[_"
        $s3 = "\\\\x2F\\\\x77\\\\x61\\\\x72\\\\x2F\\\\x6D\\\\x6F\\\\x63\\\\x2E\\\\x6E\\\\x69\\\\x62\\\\x65\\\\x74\\\\x73\\\\x61\\\\x70\\\\x2F"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_payment_redirect_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.cookie.indexOf("
        $s2 = "if((location.href.indexOf(\"checkout/klarna\") + 1) && !(document.cookie.indexOf(\"userpayid\")"
        $s3 = "document"
        $s4 = "document.cookie.indexOf("
        $s5 = "if((location.href.indexOf(\"checkout/klarna\") + 1) && !(document.cookie.indexOf(\"userpayid\")"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_peguards_cc_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "cookie.indexOf(\"google_api=1;\""
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_popads_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x63\\x32\\x2E\\x70\\x6F\\x70\\x61\\x64\\x73\\x2E\\x6E\\x65\\x74\\x2F\\x70\\x6F\\x70"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_popads_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement('script')"
        $s4 = "popads.net"
        $s5 = "document.getElementsByTagName('script')[0];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_PopShow3_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "function PopShow3"
        $s2 = "kmr9eE1=update"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_PopShow3_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "function PopShow3"
        $s2 = "<script>function PopShow3(){var"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_PopShow3_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "function PopShow3"
        $s2 = "\"PopWin3\",\"_blank,resizable=1,toolbar=1,location=1,menubar=1,status=1,scrollbars=1\");"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_PopShow3_popup_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "function PopShow3()"
    condition:
        $s0 and $s1
}

rule js_malware_redirectoneencyclopedia_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "{window.location.href='http://www.'+http_host+'/';"
        $s4 = "oneencyclopedia.com"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var url = myArray[ri];(function(a,b)"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_002_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "}c=unescape(b);document.write(c);"
        $s3 = "qapkrv'1G\";"
        $s4 = "<script>var a="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_002_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "}c=unescape(b);document.write(c);"
        $s3 = "qapkrv'1G\";"
        $s4 = "var a=\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".location"
        $s1 = "window.location"
        $s2 = "{window.location.href='http://www.'+http_host+'/';"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "%64%6F%63%75%6D%65%6E%74%2E%6C%6F%63%61%74%69%6F%6E%20%3D%20%22%68%74%74%70%3A%2F%2F"
    condition:
        $s0 and $s1
}

rule js_malware_redirect_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "if(s.indexOf(\"google.co.jp\")>0||s.indexOf("
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "%69%66%28%21%6d%79%69%6b%29%7b%0d%0a%76%61%72%20%72"
    condition:
        $s0 and $s1
}

rule js_malware_redirect_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "h8tt8p://387.18389.580.481/la8ng"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "jQuery("
        $s3 = "if (jQuery('#card_number"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "spwms.com/js/', '_blank')"
    condition:
        $s0 and $s1
}

rule js_malware_redirect_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.cookie.indexOf("
        $s2 = "loc7ati7on"
        $s3 = "document"
        $s4 = "document.cookie.indexOf("
        $s5 = "loc7ati7on"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_redirect_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "typeof jQuery"
        $s3 = "document[_"
        $s4 = "window[_"
        $s5 = "var sss"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_redirect_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "xmlhttp.open(\"GET\","
        $s3 = "));parent.document.location.href="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "return c.toString("
        $s3 = "javascript|encodeURI|src||write|http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = ".length);document.write("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_016_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = ".length);document.write(unescape("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "typeof jQuery"
        $s3 = "document[_"
        $s4 = "window[_"
        $s5 = "String['fromCharCode']"
        $s6 = "XMLHttpRequest:XDomainRequest"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_redirect_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\\x2f\\x62\\x69\\x74\\x6c\\x79\\x2e\\x63\\x6f\\x6d"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\\x5f\\x6d\\x61\\x75\\x74\\x68\\x74\\x6f\\x6b\\x65\\x6e\\x3d\\x31\\x3b"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_020 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "function|return|while||replace|if|17|toString||new|||RegExp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "replace(new RegExp"
        $s4 = "|http"
        $s5 = "|href"
        $s6 = "document|location|href"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_malware_redirect_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "atob("
        $s4 = "PHNwYW4gaWQ9J2YxODllMjIyLTZkNDItMzZlY"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "|onTimeout|hostssl|iTimeout|POST|php|"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_024 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(${$"
        $s2 = ";if(isset(${$"
        $s3 = "]}=curl_exec(${"
        $s4 = ")){function getUrla($url){if(function_exists("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\\x49\\x20\\x61\\x6D\\x20\\x6E\\x6F\\x74\\x20\\x61\\x20\\x72\\x6F\\x62\\x6F\\x74"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_026 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "location.protocol"
        $s4 = "atOptions = {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_027 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "return c.toString("
        $s3 = "plugins|content|wp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script type=\"text/javascript\" data-cfasync"
        $s2 = "Function('return\\x20(function()\\x20'+'{}.constructor(\\x22return\\x20this\\x22)(\\x20)'+');')();}catch("
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "href=atob("
        $s4 = "script"
        $s5 = "aXRvdXJsaWZlLnRvcA"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_redirect_030 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "href=atob("
        $s4 = "script"
        $s5 = "ZXRiZXN0cHJpemUubG"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_redirect_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement('script')"
        $s4 = ".parentNode.insertBefore("
        $s5 = "\")]||'';var"
        $s6 = "dXNlckFnZW50"
        $s7 = "bG9jYWxTdG9yYWdl"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule js_malware_redirect_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "if(window.innerWidth<"
        $s3 = "location.href='http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_035 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "'htt'"
        $s3 = "'186689uDzkzj','su/',"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_redirect_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "x6B\\x69\\x65\\x45\\x6E\\x61\\x62\\x6C\\x65\\x64\",\"\\x5F\\x77\\x70\\x74\\x68\\x2D\\x31"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_redirect_037 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_gaid_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "window[\"\\x65\\x76\\x61\\x6c\"]("
        $s2 = "=\"\\x31\\x30\\x31\\x2c\\x31\\x31\\x38\\x2c\\x39\\x37\\x2c\\x31\\x30\\x38"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_redirect_orospu_ninja_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%64%6F%63%75%6D%65%6E%74%2E%6C%6F%63%61%74%69%6F%6E%20%3D%20%22%68%74%74%70%3A%2F%2F"
        $s4 = "%2E%6F%72%6F%73%70%75%2E%6E%69%6E%6A%61"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_rewrite_ws_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "\\x68\\x74\\x74\\x70\\x3A\\x2F\\x2F\\x72\\x65\\x77\\x72\\x69\\x74\\x65\\x2E\\x77\\x73"
    condition:
        $s0 and $s1
}

rule js_malware_script_reversed_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "//:ptth\"=crs tpircs<'.split(\"\").reverse().join(\"\"))"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_script_reversed_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "split(\"\").reverse().join(\"\");return i;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_script_reversed_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "this['eval']("
        $s2 = "\\165m\\145n\\164\\56\\167ri\\164\\145\\50\\47\\76\\164pircs"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_seopositionreport_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "\"seo-position-report.net/SEO-report/js/seoTrac.js"
    condition:
        $s0 and $s1
}

rule js_malware_t_cn_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "|script|appendChild|cn|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_type_cast_encryption_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "$=~[];$={__"
    condition:
        $s0 and $s1
}

rule js_malware_u_1133_cc_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "var _$=[\"document\",\"write\",'<script src"
        $s2 = "\"write\",'<script src=\"http://u.1133.cc"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unescape_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write("
        $s2 = "document.write('\\u003c\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u0020"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unescape_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "data:text/javascript;base64"
        $s4 = "ZG9jdW1lbnQud3JpdGUodW5lc2NhcGUoJ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_unwantedads_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "adsbygoogle.js');adsScript."
        $s2 = "{init(options)})})({url:'http://"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "clksite.com"
        $s2 = "tid=165434_292830"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_002_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "clksite.com"
        $s2 = "clksite.com/adServe/banners"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "(function() { var wc = document.createElement('script');wc.type"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_unwantedads_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\":/mobile|ip(hone|od|ad)|android|blackberry|iemobile|kindle"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x6F\\x6E\\x63\\x6C\\x6B\\x64\\x73\\x2E\\x63\\x6F\\x6D\\x2F"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x3c\\x53\\x43\\x52\\x49\\x50\\x54"
    condition:
        $s0 and $s1
}

rule js_malware_unwantedads_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = " src=\"https://s3-eu-west-1.amazonaws.com/assets.cookieconsent.silktide.com/current/plugin.min.js\""
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule js_malware_unwantedads_009 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = /\(function\(\)[\s]*\{[\s]*var [\w]=window;[\s]*[\w]\[\"[^}]+\\u00[\w]{2}[^}]+\\x[\w]{2}[^}]+\\u00[\w]{2}[^}]+\\x[\w]{2}/
    condition:
        $s0 and $s1
}

rule js_malware_unwantedads_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "=[\"\\x3C\\x73\\x63\\x72\\x69\\x70\\x74\\x20\\x74\\x79\\x70"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_unwantedads_011 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "mobtrks.com/notice.php?p=%d&interstitial=1"
    condition:
        $s0 and $s1
}

rule js_malware_unwantedads_012 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "mobisla.com/notice.php?p=%d&interactive=1&pushup=1"
    condition:
        $s0 and $s1
}

rule js_malware_unwantedads_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "_0x1386|_0xd10fx3"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_013_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "<script data-cfasync='false' type='text/javascript'>"
        $s3 = "|clickund_expert"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_unwantedads_013_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = "new RegExp(_0x"
        $s4 = "\\x63\\x6C\\x69\\x63\\x6B\\x75\\x6E\\x64\\x5F\\x65\\x78\\x70\\x65\\x72\\x74"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_unwantedads_013_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "getCookie(\"clickund_expert"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = "frame1\" style=\"background:transparent;border:none;width:1;height:1"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = ".js?"
        $s2 = "freecounter.ovh"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_unwantedads_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "return String.fromCharCode("
        $s3 = "s.onerror=x.onerror=E;s.onload=x.onload=g;x.send();"
        $s4 = "s.onerror=x.onerror=E;s.onload=x.onload=g;x.send();(document.body||document.documentElement).appendChild(s);function"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_unwantedads_016_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "return String.fromCharCode("
        $s3 = "s.onerror=x.onerror=E;s.onload=x.onload=g;x.send();"
        $s4 = "\\x77\\x72\\x69\\x74\\x65\\x6C\\x6E"
        $s5 = ")</script> \",\"\\x77\\x72\\x69\\x74\\x65\\x6C\\x6E\"];document[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_unwantedads_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "script=document.createElement("
        $s4 = "ocument.createElement(\"script\");script.onload=function(){},script.src=\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_malware_unwantedads_018 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "document.write(\"This page has moved, <A"
        $s4 = "Click here</A> to go there."
        $s5 = "window.top.location.replace(rurl);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_unwantedadsrun_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.querySelector"
        $s2 = "\"http://api.adsrun.net/post\""
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_visitor_tracker_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "visitorTracker"
        $s2 = "var isChrome = !isIE && !!window.chrome && window.navigator.vendor === \"Google Inc.\";"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_visitor_tracker_001_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "return parseInt(ua.substring(edge + 5, ua.indexOf(\".\", edge)), 10);"
        $s2 = "if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_visitor_tracker_001_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "visitorTracker"
        $s2 = "return /(android|bb\\d+|meego).+mobile"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_visitor_tracker_001_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "visitorTracker"
        $s2 = "/*visitorTracker*/function visitortracksdel()"
    condition:
        $s0 and $s1 and $s2
}

rule js_malware_visitor_tracker_052F_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "/052F\";if("
    condition:
        $s0 and $s1
}

rule js_malware_visitor_tracker_052F_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|052F|"
        $s3 = "|chrome|052F|iPhone|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_malware_visitor_tracker_052F_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|052F|"
        $s3 = "|Edge|"
        $s4 = "|v750|"
        $s5 = "|addEventListener|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_malware_visitor_tracker_gen_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "/*visitorTracker*/"
    condition:
        $s0 and $s1
}

rule js_phishing_AOLmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "data:text/html;base64"
        $s4 = "window.location=\"data:text/html;base64,DQoNC"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_phishing_dead_script_zeroo_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "Dead Script Zeroo"
    condition:
        $s0 and $s1
}

rule js_phishing_encoded_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%3C%68%65%61%64%3E%0A%3C%6C%69%6E%6B%20%72%65%6C%3D%22%73%68%6F%72%74%63%75%74%20%69%63%6F%6E%22%20%68%72%65%66%3D%22%66%61%76%69%2E%69%63%6F%22%20%74%79%70%65%3D%22%69%6D%61%67%65%2F%67%69%66%22%2F%3E%0A%3C%74%69%74%6C%65%3E%4D%61%69%6C"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_phishing_encoded_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "%3c%21%44%4f%43%54%59%50%45%20%68%74%6d"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_phishing_generic_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Chr"
        $s1 = "panjang%3Bi++%29%7B%20teks+%3DString.fromCharCode%28le_chaland."
    condition:
        $s0 and $s1
}

rule js_phishing_generic_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"\\x23\\x67\\x74\\x77\\x79\",\"\\x64\\x6F\\x6E\\x65\",\"\\x63\\x6F\\x6E\\x6E\\x65\\x63\\x74\\x2E\\x70\\x68\\x70\","
    condition:
        $s0 and $s1
}

rule js_phishing_generic_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "top.location = 'http://bancanet.banamex.com.mx"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_phishing_generic_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "<b>EMAIL QUOTA EXCEEDED LOGIN TO UPGRADE"
    condition:
        $s0 and $s1 and $s2
}

rule js_phishing_generic_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "type: \"POST\", url: \"hello.php\", data: { \"email\" : the_email , \"password\" : the_password }, success: function(data)"
    condition:
        $s0 and $s1
}

rule js_phishing_generic_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "dataString = 'username='+username+'&password='+password"
    condition:
        $s0 and $s1 and $s2
}

rule js_phishing_generic_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "\",x=\"\";for(i=0;i<t.length;i+=3){x+=unescape(\"%\"+t.substr(i,2));}document.write(x);"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_phishing_generic_009 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "submitHandler: function(form)"
        $s1 = /submitHandler:[\s]*function\(form\)[\s]*\{[\s]*\$\(.[\S]+\)\.show\(\);[\s]*\$.post\(.[^$]+\$\(..[\w]+.\).serialize\(\),[\s]*function\(result\)\{[^$]+\$\(location\).attr\(.href.,/
    condition:
        $s0 and $s1
}

rule js_phishing_generic_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "window.location"
        $s3 = "$.post(\"login.php\", {username:username, pass:pass}, function(data){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_phishing_generic_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "Visit spKINGS"
    condition:
        $s0 and $s1
}

rule js_phishing_generic_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "\\u0009\\u003c\\u0074\\u0069\\u0074\\u006c\\u0065\\u003e\\u004e\\u0065\\u0074\\u0073\\u0020\\u0056\\u0065\\u0072\\u0069\\u0066\\u0069\\u0065\\u0064\\u0020\\u0062\\u0079\\u0020"
    condition:
        $s0 and $s1
}

rule js_phishing_gmail_001 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "var targetdestination=\"https://drive.google.com"
    condition:
        $s0 and $s1
}

rule js_phishing_gmail_001_02 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "window.location=\"https://drive.google.com/#my-drive\";"
    condition:
        $s0 and $s1
}

rule js_phishing_hinet_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "deleteCookie(\"BusinessPasswd\", \"/\", \"webmail.hinet.net\" );"
    condition:
        $s0 and $s1 and $s2
}

rule js_phishing_mailer_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "document.cookie"
        $s2 = "PayPal Valid Email Checker"
    condition:
        $s0 and $s1 and $s2
}

rule js_phishing_microsoft_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%3C%74%69%74%6C%65%3E%53%69%67%6E%20%69%6E%20%74%6F%20%79%6F%75%72%20%4D%69%63%72%6F%73%6F%66%74"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_phishing_microsoft_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "window.location.href=\"https://login.microsoftonline.com/common/oauth2/\""
    condition:
        $s0 and $s1
}

rule js_phishing_microsoft_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".live.com"
        $s1 = "]=\"A single Microsoft account gets you into <b>Hotmail<"
    condition:
        $s0 and $s1
}

rule js_phishing_netvigator_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "netvigator.com"
        $s1 = "<form id=\"frmLogin\"action=\"'+login_frm_path+'\"method=\"post\"target=\"_top\">"
    condition:
        $s0 and $s1
}

rule js_phishing_netvigator_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "netvigator.com"
        $s1 = "window.open('https://netpass.netvigator.com/netpass/servlet/NPMainServlet?action=np_logout&loadBean=yes&successurl=http://www.netvigator.com/&failurl=http://www.netvigator.com/'"
    condition:
        $s0 and $s1
}

rule js_phishing_paypal_001 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "PAYPAL"
        $s1 = "PAYPAL.namespace(\"CreditCardInput\");"
    condition:
        $s0 and $s1
}

rule js_phishing_paypal_001_02 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "PAYPAL"
        $s1 = "PAYPAL.namespace(\"GP.CreditCardInput\");"
    condition:
        $s0 and $s1
}

rule js_phishing_paypal_002 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "PAYPAL"
        $s1 = "{ PAYPAL.core.Navigation.init();"
    condition:
        $s0 and $s1
}

rule js_phishing_paypal_003 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "<script>document.location=\"http"
        $s2 = "/Payment/\"</script>"
    condition:
        $s0 and $s1 and $s2
}

rule js_phishing_paypal_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "if(Math.floor((tmp/Math.pow("
        $s2 = "= '';"
        $s3 = "+= String.fromCharCode(Math.floor((tmp/Math.pow("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_phishing_script_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "url"
        $s2 = "fromCharCode(enkripsi"
        $s3 = "function generate_url"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_phishing_toolkit_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "#gossn"
        $s2 = "messages':{'adminpass"
    condition:
        $s0 and $s1 and $s2
}

rule js_phishing_toolkit_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "]);document[_"
        $s4 = "input[name=\\x22cvv\\x22]"
        $s5 = "cvv':'','pin"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_redirect_document_location_001 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "<SCRIPT LANGUAGE=\"JavaScript\">"
        $s3 = "document.location.href=\"http://bit.ly"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_redirect_document_location_002 : redirect
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = /var[\s]*[\w]+[\s]*=[\s]*new[\s]*Date;[\s]*if\([\s]*[\w]+\.getMonth\(\)[\s]*>[\s]*[\d]+[\s]*\)[\s]*document.location.replace\(.http[^;]+\);/
    condition:
        $s0 and $s1 and $s2
}

rule js_redirect_mass_injection_001 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "adsformarket.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_001_02 : redirect
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "d.getElementsByTagName('head')[0].appendChild(s);"
        $s2 = "document.currentScript.parentNode.insertBefore(s, document.currentScript);"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_redirect_mass_injection_001_03 : redirect
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "d.getElementsByTagName('head')[0].appendChild(s);"
        $s2 = "ocument.currentScript.parentNode.insertBefore(s, document.currentScript);"
        $s3 = /var [\w]+[\s]*=[\s]*[\d]+;[\s]*var d[\s]*=[\s]*document;[\s]*var s[\s]*=[\s]*d\.createElement/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_redirect_mass_injection_002 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "gotosecond2.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_003 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "destinyfernandi.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_004 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "greenlabelfrancisco.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_005 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "collectfasttracks.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_006 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "verybeatifulantony.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_007 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "r.aba.ooo"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_008 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "resolutiondestin.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_009 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "stivenfernando.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_010 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "trackstatisticsss.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_011 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "digestcolect.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_012 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "developfirstline.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_013 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "dontstopthismusics.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_014 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "lobbydesires.com"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_015 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "letsmakeparty3"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_016 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "developerstatss.ga"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_017 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "donatelloflowfirstly.ga"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_018 : redirect
{
    meta:
        sig_type = "STR_DOMAIN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "lowerbeforwarden.ml"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_021 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "hostingcloud.racing"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_021_02 : redirect
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "JSON.parse(atob(\"eyJ0aHJ"
    condition:
        $s0 and $s1
}

rule js_redirect_mass_injection_022 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "return 0x1;}return 0x0;}biggger()==0x0&&smalller();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_redirect_mass_injection_023 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "script src"
        $s2 = "storerightdesicion.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_redirect_mass_injection_024 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = ".parentNode.insertBefore("
        $s2 = "function() {var"
        $s3 = "46,99,108,97,115,115,105,99,112,97,114,116,110,101,114,115,104,105,112,115,46,99,111,109,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_redirect_window_location_001 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "function GetCookie(_0x"
    condition:
        $s0 and $s1
}

rule js_redirect_window_location_002 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "redir = urls[rand(0, urls.length-1)]"
    condition:
        $s0 and $s1
}

rule js_redirect_window_location_003 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "eval(temp);"
        $s3 = "var str=["
        $s4 = "temp=temp+String.fromCharCode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_redirect_window_location_004 : redirect
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "%20%20%20%20%73%63%72%69%70%74%2E%73%65%74%41%74%74%72%69%62%75%74%65%28%27%73%72%63%27%2C%20%22%68%74%74%70%3A%2F%2F%39%31%2E%32%33%39%2E%31%35%2E%36%31%2F%67%6F%6F%67%6C%65%2E%6A%73%22%29%0A%20%20%20%20%20%20%20"
    condition:
        $s0 and $s1 and $s2
}

rule js_redirect_window_location_005 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "'var s=document.referrer;if(s.2"
    condition:
        $s0 and $s1
}

rule js_redirect_window_location_006 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "wearilyc=\"\"; for(wearilyd=0;wearilyd<wearilyb.length;wearilyd++) { wearilyc+=String.fromCharCode"
    condition:
        $s0 and $s1
}

rule js_redirect_window_location_007 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "function createCookie(_0x"
    condition:
        $s0 and $s1
}

rule js_redirect_window_location_009 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "window.location=\"data:text/html;charset=utf-8;base64,PCFET"
    condition:
        $s0 and $s1
}

rule js_redirect_window_location_010 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "window.location=\"mail.htm?cmd="
    condition:
        $s0 and $s1
}

rule js_redirect_window_location_011 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|biso|"
        $s3 = ")){window.location.href=\"http:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_redirect_window_location_012 : redirect
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "iPhone|iPad|iPod"
        $s2 = "=join(pop());eval("
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_bogus_ad_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "ca-pub-4503090171770424"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_spamseo_crypper_001 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "/index/?"
        $s2 = /window\.location\.replace\(.http:..[^\?]+\/index\/\?[\d]{10}/
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_genericinjector_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "=String.fromCharCode(60,115,99,114,105,112,116"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddeniframe_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script type=\"text/javascript\">var _0xf"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddeniframe_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "|ht|15|mebor|fra|der|scr|no|ing|oll|ig|||if||write|document"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddeniframe_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "return(String[\"\\x66\\x72\\x6f\\x6d\\x43\"+"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddeniframe_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "data:,String.fromCharCode"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddeniframe_008 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "\"-99999px\";i.style.top = \"-99999"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddeniframe_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "hm = document.createElement(\"script\");"
        $s4 = "allowtransparency="
        $s5 = "_hmt = _hmt || [];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_hiddeniframe_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode';i=(i+1)%"
        $s2 = "window[\"eval\"](\"eval\");"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_hiddeniframe_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "document.write(unescape('%3C%69%66%72%61%6D%65%20%73%74%79"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_hiddeniframe_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "String.fromCharCode(eval("
        $s3 = ";try{}catch("
        $s4 = ";try{--("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_hiddeniframe_012_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "String.fromCharCode(eval("
        $s3 = ";try{}catch("
        $s4 = "[\\\"body\\\"])}catch("
        $s5 = ");try{--("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule js_spamseo_hiddeniframe_013 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "document.write('<div id="
        $s2 = ".style.position = 'absolute';"
        $s3 = "document.createElement('iframe');"
        $s4 = /\(function[\s]*\(\)[\s]*\{[^\}]+document\.createElement/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_hiddenstyle_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "\"\\x6e\\x6f\",\"\\x6e\\x65\"];document.getElementById"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddenstyle_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "if (navigator.userAgent.match(/msie/i) || navigator.userAgent.match(/opera/i)) { document.write(' <div styl"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddenstyle_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "JavaScript\">var _ga4 = [];"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddenstyle_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "<div id='HideM"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_hiddenstyle_005 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "\").style.display=\"none\"</script>"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddenstyle_007 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\"\\x64\\x69\\x73\\x70\\x6c\\x61\\x79\"]=\"\\x6e\\x6f\\x6e\\x65\""
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_hiddenstyle_008 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "if(document.getElementById(\"links\")!=null){document.getElementById(\"links\").style.visibility=\"hidden\";document.getElementById(\"links\").style.display=\"none\";}"
    condition:
        $s0 and $s1
}

rule js_spamseo_hiddenstyle_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "|var|j||length|if|getElementsByTagName|document|for|v|||ne||display|no|style|className|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_hiddenstyle_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "return c.toString("
        $s3 = "|document|fromCharCode|String|eval|write|"
        $s4 = "<div class=\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_hiddenstyle_013 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "addEvent('onload',function(){init(options)})})({url:"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_spamseo_hiddenstyle_014 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|x6d"
        $s3 = "|x6f"
        $s4 = "|window"
        $s5 = "|var"
        $s6 = /\[\d\$\[0\]\]\[\d\$\[1\]\]\(\d\$\[2\]\)\[\d\$\[3\]\]\[\d\$\[4\]\]=\d\$\[5\]/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule js_spamseo_hiddenstyle_014_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|style|"
        $s3 = "|display|"
        $s4 = "|none"
        $s5 = /6,6,.document\|getElementById\|[\w]+\|style\|display\|none.\.split/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_hiddenstyle_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement(\"style\");s.type=\"text/css\";var"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_hiddenstyle_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "(function(s,r,b,m,l){l.getElementById(b).style["
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_hiddenstyle_017 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "style.visibility=\"hidden\";document.getElementById(\"links\").style.display=\"none\";"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_hiddenstyle_018 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<a href=\"http"
        $s2 = "<div"
        $s3 = "window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x67\\x65\\x74\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x42\\x79\\x49\\x64\"]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_hiddenstyle_019 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function("
        $s3 = "<script>(function(z,c,t,m,o){o.getElementById(t).style['v'+"
        $s4 = "),'is',document)</script>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_hiddenstyle_020 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function("
        $s3 = "+'se';})('lity','lap','"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_hideMe_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.getElementById('hideMe')"
    condition:
        $s0 and $s1
}

rule js_spamseo_hideMe_001_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write(z);</script><div"
    condition:
        $s0 and $s1
}

rule js_spamseo_hideMe_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "<script type='text/javascript'>if(document.getElementById('hidehi')"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_iframedoorway_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "[\"\\x69\\x6e\\x6e\\x65\\x72\\x48\\x54\\x4d\\x4c\"]=\"\\x3c\\x69\\x66\\x72\\x61\\x6d\\x65 \\x66\\x72\\x61\\x6d\\x65"
    condition:
        $s0 and $s1
}

rule js_spamseo_iframedoorway_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "x74\\x79\\x3A\\x76\\x69\\x73\\x69\\x62\\x6C\\x65\\x3B\\x27\\x2F\\x3E\\x3C\\x2F\\x64\\x69\\x76\\x3E\"];document.writeln(_$[0]);"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_iframedoorway_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "n||k[\"\\\\b\\\\c\\\\d\\\\a\\\\f\\\\m\\\\e\"]"
    condition:
        $s0 and $s1
}

rule js_spamseo_iframedoorway_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "window|x76|x78|x2d|x2e|x6b|x23|x79|x7a"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_iframedoorway_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "frameBorder=\"0\";c.style.display=\"none\";c.setAttribute(\"frameBorder\",\"0\");document.body.appendChild(c);c.src=a;return true}}function"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "jQuery(window)[_0xd"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "%76%61%72%20%74%6d%70%20%3d%20%73%2e%73%70%6c%69%74%28%22"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "HhhPD4v=\"\\x75s\\x65\\x72i\\x64A081\\x37\\x46B25"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_013 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "<script>window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x77\\x72\\x69\\x74\\x65"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_014 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>function hashdate "
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "3C696672616D65206E616D653D"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "if (!tine_jocker()) {"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_017 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"\\x72\\x65\\x66\\x65\\x72\\x72\\x65\\x72\"];if("
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_018 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "XKjhibvlGdj5Wdm1TZ7lCZsUGLrxyYsEGLwhibvlGdj5WdmhCbhZXZ"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_019 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "swf?myid"
        $s1 = ".swf?myid=4jhg5asd"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_020 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "js_kod2.setAttribute('style','visibility:hidden');"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_021 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|tongjii|"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_022 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "alert (\"VIP 163"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_023 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "|element|document|iframe|cumba|innerHTML|var|src|http|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_024 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "function t(e,r){this.Z=\"\";var JR=z;var cB=new Date();var NV;if(NV!='inX'){NV='inX'};"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_025 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"\\x67\\x65\\x74\\x44\\x61\\x74\\x65\",\"\\x73\\x65\\x74\\x44\\x61\\x74\\x65\",\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\",\"\\x3D\",\"\\x3B\\x20\\x65\\x78\\x70\\x69\\x72\\x65\\x73\\x3D\""
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_026 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "<script language=\"javascript\" type=\"text/javascript\"> document.write(\"<div style=\\\"position: absolute; top: -"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_027 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "getScript(atob"
        $s1 = "$.getScript(atob(\"aHR0cDovL2pzLmNkbmxpYnMuY29tL2pxdWVyeS5saWJzLmpz\"));"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_028 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = ";try{d=document.createElement(\"div\");}catch("
        $s3 = "){e=eval;}ss=String;"
        $s4 = ")&&window.document)s+=ss[\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_030 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x2f\\x63\\x68\\x65\\x63\\x6b\\x2d\\x66\\x6c\\x61\\x73\\x68\\x2d\\x75\\x70\\x64\\x61\\x74\\x65\\x2f\\x22\\x20\\x73\\x74\\x79\\x6c\\x65\\x3d\\x22\\x68\\x65\\x69\\x67"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_031 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "vuitton|width|html|"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "];function co(){return 'Code';}function gafu"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_034 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "b=document.getElementsByTagName(\"script\")[0];b.parentNode.insertBefore(a,b);})();"
        $s4 = "script type=\"text/javascript\">(function(){var a=document.createElement(\"script\");a.type=\"text/javascript\";a.async"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_035 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "x73\\x63\\x72\\x69\\x70\\x74\\x3E\"];document.writeln(_$[0]);"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_036 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "ByTagName(\"bo\"+\"dy\")[0]).appendChild(a);"
        $s4 = "+ Math.floor(Math.random()*9999) + \".js?\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_037 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "self.location ="
        $s2 = "indexOf(\"google\") > 0 || s.indexOf(\"bing\""
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_038 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "getElementsByTagName('bo' + sz)[0]"
        $s4 = "scro' + 'lling=\"yes\" style=\"overflow-x:hidden\" src=\"' + thisur"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_039 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "var ClickkyFull = new ClickkyFull("
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_040 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = ".')!=-1){document.write('<script language=\"javascript\">d"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_042 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ")--><script type=\"text/javascript\">var"
        $s2 = ";if(navigator[appVersion_var].indexOf(\"MSIE"
        $s3 = "style.position=\"absolute\""
        $s4 = "<iframe name=\"'+"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_043 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "f.setAttribute('src',"
        $s3 = "function iframer(){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_044 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "window.on"
        $s2 = "eval(y.responseText.split('###"
        $s3 = "##')[1]);}}};y.send(null);}var"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_044_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "window.on"
        $s2 = "eval(y.responseText.split('###"
        $s3 = "##')[1]);}}};y.send(null);}geos"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_045 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "$BTB.jshost = (document.location"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_046 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "|fromCharCode|if|64|z0|Za|write|do|base64test|document|unescape|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_047 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\"\\x6A\\x6F\\x69\\x6E\",\"\\x72\\x65\\x76\\x65\\x72\\x73\\x65\""
        $s3 = "[\"\",\"\\x6A\\x6F\\x69\\x6E\",\"\\x72\\x65\\x76\\x65\\x72\\x73\\x65\",\"\\x73\\x70\\x6C\\x69\\x74\",\"\\x3E\\x74\\x70\\x69\\x72\\x63\\x73\\x2F\\x3C\\x3E\\x22"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_047_03 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\"\\x6A\\x6F\\x69\\x6E\",\"\\x72\\x65\\x76\\x65\\x72\\x73\\x65\""
        $s3 = "]));</script>"
        $s4 = /javascript.>[\s]*var[\s]*_0x[\w]+[\s]*=[\s]*\[\"\",\".x6A.x/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_048 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "analytic"
        $s2 = "googleplatform"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_049 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "|onload"
        $s4 = "|appendChild"
        $s5 = "|jQuery"
        $s6 = "|adsadsgg"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_spamseo_injector_050 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "function myclick()"
        $s2 = "var sUserAgent = navigator.userAgent.toLowerCase();"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_051 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "function add_js_scripts() {"
        $s3 = "add_action('admin_enqueue_scripts', 'add_js_scripts' );"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_052 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script type=\"text/javascript\"> var kwcid=\"4\"; var kwurl ="
        $s2 = "f.parentNode.insertBefore(s, f);"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_053 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "false}if(isMobile()=== true){document["
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_054 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "if(isMobile() === true) {document.write("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_055 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "document.write ('<a style=\"display: none\" href="
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_058 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "()[(!"
        $s2 = "() { return this; };"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_059 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = /=\s*'';\s*for\s*\(/
        $s3 = "73706c697421736c696365216c656e6774682166726f6d43686172436f6465217375627374722163686172436f64654174"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_060 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<a href=\"http"
        $s2 = "[0])}}if(navigator.userAgent.toLowerCase()"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_061 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "&default_keyword=<?php echo $_SERVER['REQUEST_URI"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_062 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x76\\x69\\x67\\x6C\\x69\\x6E\\x6B\\x7C\\x6A\\x73\\x7C\\x63\\x6F\\x6D\\x7C\\x73\\x63\\x72\\x69\\x70\\x74\\x7C\\x69\\x6E\\x73\\x65\\x72\\x74\\x42\\x65\\x66\\x6F\\x72\\x65"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_063 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "window.onload = function() { var xdg = document.createElement('iframe');xdg.style.border = \"none\";"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_064 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "createElement"
        $s2 = "window,document,'script','//cdn.owlcdn.com"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_065 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "--><script>document.write(unescape(\"%3Cscript%3Eif%28SC%21%3D1%29%7Bfunction%"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_067 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = ".js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(st,s)})();"
        $s4 = "(function(){var st=document.createElement('script');st.type='text/javascript';st.async=true;st.charset='utf-8';st.src="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_068 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "createElement','script','onload','src','http"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_068_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "https://cdn.letmeplayformoney.com/main.js"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_069 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "if (/google/i.test(navigator.userAgent)) {"
        $s3 = "document.body.innerHTML = document.body.innerHTML.replace("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_071 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "\";asd=function(){d.body++};a=(\""
        $s3 = ")eval(ss.fromCharCode.apply(ss,a));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_072 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "aHR0cD"
        $s5 = "aG9zdG5hbWU="
        $s6 = "unction('return\\x20(function()\\x20'+'{}.constructor(\\x22return\\x20this\\x22)(\\x20)'+');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_spamseo_injector_073 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "<a href"
        $s3 = "<div id"
        $s4 = "|x74|getElementById|style|display|var|window'.split('|'),0,{}))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_074 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = ";for(var"
        $s2 = ")!==-1"
        $s3 = "%2===1)"
        $s4 = /\(function\(\)\{var [\w]+=(navigator|document)[^\n]+var [\w]+=['\"]{2};for\(var [\w]+=[\w]+\.length-1;[^\}]+\}[\s]*return/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_074_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = ";for(var"
        $s2 = ")!==-1"
        $s3 = "%2===1)"
        $s4 = /if\([\w]+===undefined\)\{var [\w]+=true;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_074_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "screen"
        $s3 = "function(){localStorage.setItem("
        $s4 = "Math.random();}setTimeout(function(){localStorage.setItem("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_spamseo_injector_074_04 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "screen"
        $s3 = "function(){localStorage.setItem("
        $s4 = /if\([\w]+===undefined\)\{var [\w]+=true;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_074_05 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "screen"
        $s3 = ")];if(ndsw===undefined){var ndsw=true;(function(){var"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_074_06 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "screen"
        $s3 = "=true,HttpClient=function()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_074_07 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "screen"
        $s3 = "function(r){p(r,'ndsx')&&f['eval'](r);});}function p(r,v){return r['indexOf'](v)!==-0x1;}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_074_08 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "screen"
        $s3 = ";if(nds"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_075 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = ")).innerHTML);"
        $s3 = "d3JhcHBlcg=="
        $s4 = "Zm9vdGVyX2JvdHRvbV9jb250ZW50"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_076 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "\\x77\\x72\\x69\\x74\\x65"
        $s5 = "=[\"\\x25\\x33\\x43\\x25\\x37\\x33"
        $s6 = "\\x25\\x37\\x34\\x25\\x33\\x45\",\"\\x77\\x72\\x69\\x74\\x65\"];document[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_spamseo_injector_077 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "+window.location.search.replace('?', '&')+\"&\"+"
        $s3 = ";}else if(_gl!==\"!1\"&&_gl!==\"!2\"&&_gl!==null){window["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_078 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\";eval("
        $s2 = "eval(decodeURIComponent(_twemoji));"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_079 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=Number.MAX_VALUE,d1=new Date(),d2=new Date(d1.getTime()+2),z=2,aa=document.createTextNode"
    condition:
        $s0 and $s1
}

rule js_spamseo_injector_080 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.createElement('script')"
        $s4 = ".parentNode.insertBefore("
        $s5 = "document.getElementById("
        $s6 = "innerHTML=r.responseText;document.body.appendChild(e);}}};r.send("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_spamseo_injector_081 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = ",\"\"]),jQuery(document).ready(function(){wl.href.match(/wp-admin/g)||("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_injector_084 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "//:sptth\\\"="
        $s3 = "for(var e=section.replace,n=\"\",t=e.length-1;t>=0;t--)"
        $s4 = "if (data[i].url === window.location.pathname + window.location.search)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_085 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "window.location.search"
        $s2 = "document.body.innerHTML.replace(section.search"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_086 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "\"==typeof Storage?("
        $s3 = ".pop().split(\";\").shift():\"\"}function"
        $s4 = "(){try{if(document.hidden)return;clearInterval("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_injector_087 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "MESSAGES.current = MESSAGES[getLanguage()] || MESSAGES.en;"
        $s2 = "title: 'You not a robot?:"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_injector_088 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function doOpen(url)"
        $s3 = "function checkTarget(e)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_japanesespam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "iframe|document|top|innerHTML|body|www|http|xyz|wintercomo|src"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_jQuery_injector_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write("
        $s2 = "function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:"
        $w0 = "var Scriptaculous = {"
        $s3 = "document.write('<script type=\"text/javascript\" src=\"http"
    condition:
        $s0 and $s1 and $s2 and $s3 and not $w0
}

rule js_spamseo_pharma_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "req.open('POST', drug_name + '/thread.php"
    condition:
        $s0 and $s1
}

rule js_spamseo_popcash_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "popcash.net"
        $s2 = "var wid"
        $s3 = "cdn.popcash.net/pop.js"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_popcash_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "popcash.net"
        $s2 = "var wid"
        $s3 = "var uid"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_popcash_001_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "popcash.net"
        $s2 = ";document.write("
        $s3 = "cdn.popcash.net/pop.js%22%3E%3C/script%3E"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_pornspam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "flex; align-items: center; justify-content: center; overflow: auto;\">' + '<a href=\"http://goo.gl/"
    condition:
        $s0 and $s1
}

rule js_spamseo_pornspam_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "(!getCookie(cname) && CONTENT_URI)"
        $s2 = "window.open(CONTENT_URI, '_blank');"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_pseudodarkleech_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "style=\"position: absolute; top: -"
        $s2 = "+=\"\\x"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_randomredirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "redir = urls[rand(0, urls.length-1)]+rand(11,999);"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "<script>if(navigator.userAgent.match(/^1207."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x77\\x3A\\x2F\\x2F\\x74\\x2E\\x75\\x2E\\x6C\\x2E\\x76\\x2F\\x73\\x2E\\x72\\x3F\\x71\\x3D"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "window.top.location.href=\"http://doctor\" + \""
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "\"http://lily666.com"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_005 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(function(p,a,c,k,e,d)"
        $s2 = "var|www|yahoo|yandex"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_006 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "$jumpcode='<script type=\"text/javascript"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "if(s.indexOf(\"google\")>0 || s.indexOf(\"bing\")>0"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_007_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "if (s.indexOf('google') > 0 || s.indexOf('aol')"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "weightlossmaxer|location"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.location = \"http://cort.as"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_010 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "gougou|ifeng"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "\"userAgent\",\"test\",\"substr\",\"location\"];function setCookie(_0x"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_012 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(function(p,a,c,k,e,d)"
        $s2 = "|mooo|"
        $s3 = "|google|"
        $s4 = "|bing|"
        $s5 = "|sid|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_013 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "if(patrn.exec(rUrl))window.location.href=toUrl;"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_014 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|iframe|"
        $s3 = "userAgent"
        $s4 = "indexOf"
        $s5 = "iPhone"
        $s6 = "|maxTouchPoints"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_spamseo_redirect_015 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "setTimeout('getgoing()',1);"
        $s2 = "top.location=\"http:"
        $s3 = ".exe\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_016 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = /=\s*'';\s*for\s*\(/
        $s3 = "](0)^"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_018 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|var|Wsites|if|ads_wins|window|so|facebook|search|360|sogou|"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_019 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "|msn.)/i)){document[_0x"
        $s3 = "\"\\x53\\x74\\x61\\x74\\x73\\x4F\\x6E\\x65\",\"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66\",\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_020 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "w=this['unescape'](y);this['eval'](w);"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_021 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script type='text/javascript'>(new Function(String.fromCharCode("
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_022 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "vmsg.onclick = function(){load2();};}window.onload=checkCount;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_023 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "drid=' + drug_name"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_024 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "))})(String.fromCharCode,eval)</script>"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_025 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "<script>var regexp=/\\.(aol|google"
        $s2 = "biso)(\\.[a-z0-9\\-]+){1,2}\\//ig;"
        $s3 = "window.location.href=\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_026 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x67\\x6F\\x2E\\x61\\x64\\x32\\x75\\x70\\x2E\\x63\\x6F\\x6D"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_027 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "createElement"
        $s2 = "script&se_referrer=' + encodeURIComponent"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_028 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "%26%6c%6f%63%61%74%69%6f%6e%2e%72%65%70%6c%61%63%65%28%22%68%74%74%70%73%3a%2f%2f%67%6f%6f%2e%67%6c%2f"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_029 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "\\x67\\x65\\x74\\x68\\x65\\x72\\x65\\x2E\\x69\\x6E\\x66\\x6F"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_030 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%6e%63%74%69%6f%6e%7c%73%63%72%69%70%74%7c%76%61%72%7c%74%72%79%7c%31%30%7c%66%6f%72%7c%6a%61%76%61%73%63%72%69%70%74%7c%77%72%69%74%65%7c%64%6f%63%75%6d%65%6e%74%7c%75%6e%65%73%63%61%70%65%7c%74%65%78%74%7c%74%79%70%65%7c%68%69%73%74%6f%72%79%7c%67%6f%6f%7c%68%74%74%70%73%7c%67%6c%7c%63%61%74%63%68%7c%78%79%4c%36%6c%51%7c%6f%6e%70%6f%70%73%74%61%74%65%7c%70%75%73%68%53%74%61%74%65%7c%73%74%61%74%65%7c%72%65%70%6c%61%63%65%7c%6c%6f%63%61%74%69%6f%6e%22%2e%73%70%6c%69%74%28%22%7c%22%29%29%29"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=window;"
        $s2 = "=document;"
        $s3 = ".body)}catch("
        $s4 = "if(1)"
        $s5 = "+=String[\"fromCharCode\"](eval("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_032_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "[\"length\"];"
        $s2 = "].apply(String,"
        $s3 = ")+parseInt("
        $s4 = "if(document.querySelector)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_redirect_033 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "|document|com|en|terms|b1xz6cku|cookie|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_034 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%0A%09%09%72%65%64%69%72%65%63%74%5F%74%6F%28%22%68%74%74%70%3A%2F%2F"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_035 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "var page = new Array(howMany"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_036 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "data:application/javascript;base64,ZG9jdW1lbnQud3JpdGUodW5lc2NhcGUoI"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_037 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "var adlinkfly_url = 'https://cutwin.com"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_038 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = /(locationforexpert|waynickbookgroup)/
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_039 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "return whatever.list[n].split(\"\").reverse().join(\"\");"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_040 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "cihNYXRoLnJhbmRvbSgpICogNSk7IA0KaWYgKG51bWJlcj"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_041 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = ";var url=String[_0x"
        $s4 = "var i=scrpts"
        $s5 = "};var scrpts=document[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = ";var url=String[_0x"
        $s4 = "var i=scrpts"
        $s5 = "};var scrpts=document[_0x"
        $s6 = /\(\)[;\}]+<.script>/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule js_spamseo_redirect_041_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "\"\\x62\\x6F\\x64\\x79\",\"\\x62\\x65\\x66\\x6F\\x72\\x65\\x65\\x6E\\x64\",\"\\x3C\\x73\\x63\\x72\\x69\\x70\\x74"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_04 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "[\"\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\",\"\\x74\\x79\\x70\\x65\",\"\\x74\\x65\\x78\\x74\\x2F\\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x61\\x73\\x79\\x6E\\x63"
        $s4 = "var _0x"
        $s5 = /var _0x[\w]+[\s]*=[\s]*\[\".x73.x63.x72/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_041_05 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "100, 111, 99, 117, 109, 101, 110, 116, 91"
        $s3 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 115, 66, 121, 84, 97, 103, 78, 97, 109, 101, 40"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_06 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "!![];_0x"
        $s5 = "[0x0])[0x0];"
        $s6 = "]];(function(){var _0x"
        $s7 = /(\">|\(|\(\)\);|^)[\s]*var _0x[\w]+[\s]*=[\s]*\[_0x[\w]+\[[\d]+\],/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_07 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = "100, 111, 99, 117, 109, 101, 110, 116, 91"
        $s3 = /var _0x[\w]+ = 1;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_041_08 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = /var _0x[\w]+[\s]*=[\s]*\[\".x...x...x...x...x...[^;]{1000}[^;]+\];[\s]*var[\s]*_0x[\w]+[\s]*=[\s]*\[_0x[\w]+\[[\d]+\],[\s]*_0x[\w]+\[[\d]+\],/
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_041_09 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "[\"\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\",\"\\x74\\x79\\x70\\x65\",\"\\x74\\x65\\x78\\x74\\x2F\\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\",\"\\x61\\x73\\x79\\x6E\\x63"
        $s4 = "[\"\\x73\\x63\\x72\\x69\\x70\\x74\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_redirect_041_10 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        $s3 = "),'id','cdn"
        $s4 = "getElementsByTagName','insertBefore',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_redirect_042 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = "scripts[\"\\x6C\\x65\\x6E\\x67\\x74\\x68\"];i++){if(scripts[i][\"\\x69\\x64\"]=="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_043 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "if(document.referrer.match("
        $s3 = "+document.location.hostname;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_044 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "<body onLoad=\"setTimeout('delayer()', 1)\">"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_045 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "119, 105, 110, 100, 111, 119, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 104, 114, 101, 102"
        $s3 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 114, 101, 112, 108, 97, 99, 101"
        $s4 = "100, 111, 99, 117, 109, 101, 110, 116, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 104, 114, 101, 102"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_046 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "return String.fromCharCode("
        $s3 = /function [\w]+\(\)[\s]*\{[\s]*[\w]+[\s]*=[\s]*[\w]+\(\);[\s]*[\w]+[\s]*=[\s]*\[[\d\s,]{30,}\];[\s]*return [\w]+\([\w]+,[\s]*[\w]+\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_047 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<script> window.location.href='https://mgcp.bet/register?intr="
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_048 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104,116,116"
        $s3 = "document.currentScript.parentNode.insertBefore(s, document.currentScript);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_048_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104,116,116"
        $s3 = "document.getElementsByTagName(String.fromCharCode("
        $s4 = "type=String.fromCharCode("
        $s5 = "createElement(String.fromCharCode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_048_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104,116,116"
        $s3 = "document.getElementsByTagName(String.fromCharCode("
        $s4 = "false;(function()"
        $s5 = "{element.parentNode.insertBefore(this, element.nextSibling);}, false;(function()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_048_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104,116,116"
        $s3 = "document.getElementsByTagName(String.fromCharCode("
        $s4 = "false;(function()"
        $s5 = "window.tplogs"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_049 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "wpadminbar"
        $s3 = "||navigator['userAgent']["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_050 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "sojson"
        $s2 = "][\"\\x66\\x69\\x6c\\x74\\x65\\x72\"][\"\\x63\\x6f\\x6e\\x73\\x74\\x72\\x75\\x63\\x74\\x6f\\x72\"](((['sojson"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_050_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "sojson"
        $s2 = "var __encode"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_051 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "/post\",{\"version\":"
        $s3 = "function ajax(a,b,c){var d=null;try{d=new XMLHttpRequest}catch(e){try{"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_052 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "function getCookie"
        $s2 = "cookie=\"redirect=\"+time+\"; path=/; expires=\"+date.toGMTString(),document.write('<script src=\"'+src+'\"><\\/script>')}"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_053 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = ",'appendChild','createElement','documentElement','data-zone','src'];(function("
        $s4 = "('0x0')]('script'),'https://iclickcdn.com"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_redirect_054 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "resubscribeOnInstall=!0,self.lary=\"\";var q=[\"https://\",\"/pfe/current/service-worker.min.js?r="
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_055 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "navigator.userAgent.match"
        $s2 = "GomPlayer"
        $s3 = "window.location = \"http://goo.gl/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_056 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "atob(_0x"
        $s4 = "\\x68\\x72\\x65\\x66\",\"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule js_spamseo_redirect_057 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "return String.fromCharCode("
        $s3 = "atob("
        $s4 = "\".split(' ').map((e)=>{return String.fromCharCode(e)}).join('')"
        $s5 = /(var [\w]+[\s]*=[\s]*[^;]+;[\s]*)+[\w]+[\s]*\[[\w]+\]\([^\[]+if[\s]*\([\s]*typeof [\w]+[\s]*\[[\w]+\][\s]*==[^<]+fromCharCode\(.\)\}\)\.join\(..\)[^\}]+\}\},[\s]*[^\)]+\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_058 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "location.href=String.fromCharCode(104,116,116,112"
        $s4 = "window.location.href=String.fromCharCode(104,116,116,112,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_redirect_058_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "location.href=String.fromCharCode(104,116,116,112"
        $s4 = "die();"
        $s5 = "echo \"<html><head><script>window.location.href=String.fromCharCode(104"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_059 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "return String.fromCharCode("
        $s3 = "atob("
        $s4 = "atob('dWd"
        $s5 = ";window.top.location.href"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule js_spamseo_redirect_060 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "window.location.replace(sites[Math.floor(Math.random()*sites.length)]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_redirect_061 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.getElementsByTagName(\"body\")[0].appendChild("
        $s4 = "desktop=!(u.portable);r=Math.random();function chance(v){return Math.random()<v;};var chance2=function(v){var total_chance=0;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_redirect_gen_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write("
        $s2 = "%3C%21%44%4F%43%54%59%50%45%20"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_gen_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "//cdn.popcash.net/pop.js\"></script>"
    condition:
        $s0 and $s1
}

rule js_spamseo_redirect_gen_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "window.location = \"http://"
        $s2 = "if (screen.width <= 480)"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_redirect_gen_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "window.location"
        $s3 = "if (screen.width <= 480) {"
        $s4 = "voluumtrk.com"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_redirect_gen_003_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "window.location"
        $s3 = "if (screen.width <= 480) {"
        $s4 = ".pw/l.php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_SoakSoak_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "decodeURIComponent"
        $s2 = "eval(decodeURIComponent('%28%"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_SoakSoak_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "decodeURIComponent"
        $s2 = "eval(decodeURIComponent('%0D%"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_SoakSoak_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "decodeURIComponent"
        $s2 = "%77%70%2D%69%6E%63%6C%75%64%65%73%2F%6A%73%2F%73%77%66%6F%62%6A%63%74%2E%73%77%66"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_unwanted_ads_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "wp-includes"
        $s2 = "n.partnerId=U.PARTNER_ID_PROPELLER;}"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_unwanted_ads_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "* Front to the WordPress application."
        $s2 = "<iframe class="
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_unwanted_ads_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "fromCharCode"
        $s2 = ",new XMLHttpRequest(),document.createElement('script'),_"
        $s3 = "L2FwdS5waHA="
        $s4 = "$._"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule js_spamseo_xtrackPageview_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "function xtrackPageview(){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule js_spamseo_xViewState_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "function xViewState()"
        $s2 = "+=String.fromCharCode(parseInt(t)+"
    condition:
        $s0 and $s1 and $s2
}

rule js_spamseo_xyz_script_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = ",62,60,47,115,99,114,105,112,116,62);document.write("
        $s3 = ",46,120,121,122,47"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule pe_backdoor_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/sh"
        $s2 = "cgiprint(\"Sent reverse shell to $ip:$port\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_0x00shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "~ 0x00 PHP shell v"
    condition:
        $s0 and $s1
}

rule php_backdoor_1n73ct10n_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "eval(gzinflate(str_rot13(base64_decode('7L12W+PG0jD8bOa65"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_3FTzip_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "3FT Hna Pour unzipi"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_404notfoundimg_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "404-NOT-FOUND-IMG"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_4ngel_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "('',"
        $s2 = "<?php $code="
        $s3 = "uJgDGKH8hbymrkIGJSJwZLlFxtifEoSBFgSc5VolJWBordrdVSMpiFjwwB4BNna4gF9zml7g"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_adduser_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = ">Edit user XPlo"
    condition:
        $s0 and $s1
}

rule php_backdoor_adduser_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "->dbprefix.\"users (name, username, email, password) VALUES ('Super Admin', '\".$"
        $s3 = "unlink(basename($_SERVER[\"PHP_SELF\"]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_adduser_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = "echo"
        $s3 = "$shadow1 = \"/home/$usr/etc/$domain/shadow\";"
        $s4 = "@mkdir(\"/home/$usr/etc/$domain\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_adduser_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "echo $user->id"
        $s2 = "self::EXTERNAL_DIRECTORY . $this->id,"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_adduser_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "wp_create_user"
        $s3 = "new WP_User(wp_create_user("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_aio_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "<h2 class=\"banner\">PHP AIO SHELL</h2>"
    condition:
        $s0 and $s1
}

rule php_backdoor_ajaxphpcommandshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "runcommand('shellhelp','GET')"
    condition:
        $s0 and $s1
}

rule php_backdoor_anishell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "eval($"
        $s4 = "$socket = fsockopen(\"udp://$IP\", $port"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_arakbali_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<!-- form eksekusi command -->"
    condition:
        $s0 and $s1
}

rule php_backdoor_array_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "sprintf((substr(urlencode(print_r"
    condition:
        $s0 and $s1
}

rule php_backdoor_array_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = "@array_diff_ukey(@array((string)$_REQUEST['password"
    condition:
        $s0 and $s1
}

rule php_backdoor_array_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "@array_filter($sort, $array);"
        $s2 = "array($_REQUEST['sort']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_array_003_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "@array_filter($sort, $array);"
        $s2 = "if(isset($_REQUEST[\"array\"]))"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_array_callback_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array_filter"
        $s2 = "array_filter($p, $f)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_array_callback_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "error_reporting(0);@array_map"
    condition:
        $s0 and $s1
}

rule php_backdoor_array_callback_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "filter_var_array(array('test' => $_"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_array_callback_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = ";$arr=array($_POST['w0w']"
    condition:
        $s0 and $s1
}

rule php_backdoor_array_filter_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "filter"
        $s1 = "ray_filter"
        $s2 = "; echo 'OK'; Exit;}"
        $s3 = "if ($_REQUEST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_array_filter_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array_filter"
        $s2 = "; echo 'OK'; Exit;}"
        $s3 = "array($_REQUEST['param2']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_array_filter_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "echo"
        $s3 = "'],); array_filter($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_array_filter_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "array_filter ($GLOBALS,"
    condition:
        $s0 and $s1
}

rule php_backdoor_array_filter_003_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "if (in_array($symbols, $vars"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_array_filter_003_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "if (!function_exists("
        $s2 = "array_map ("
        $s3 = "explode('|',$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_article_publish_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "$action!=\"publish\""
        $s3 = "if($action==\"\"||$password==\"\"||$filename==\"\"||$body==\"\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "$__=hex2ascii($___)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "<? $x=\"a\".\"ss\".\"er\".\"t\"; $x($_POST[\""
    condition:
        $s0 and $s1
}

rule php_backdoor_assert_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "@array_map('a'.'s'.'s'.'e'.'r'.'t',array($_POST"
    condition:
        $s0 and $s1
}

rule php_backdoor_assert_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "\"\",\"axsxxsxexrxxt\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_005 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = /\(.?YXNzZX/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "@assert(base64_decode("
        $s3 = "echo \"Array sort completed\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "assert ($_COOKIE["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "@$_COOKIE[ssid]"
        $s3 = "*/ $b='sert'; $a=$a.$b;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array(97,115,115,101,114,116)"
        $s2 = "(97,115,115,101,114,116)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "assert_options("
        $s3 = "kbgr(hgyk64_jkiujk("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_013_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "assert_options("
        $s3 = "assert_options(ASSERT_WARNING, 0);"
        $s4 = "assert_options(ASSERT_QUIET_EVAL, 1);"
        $s5 = "(str_rot13('riny(onfr64_qrpbqr("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_assert_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "_POST"
        $s3 = "if(isset($_POST["
        $s4 = "$array[] = $item;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_assert_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "$a='rt'; $b='as'; $b.='se' . $a;@$b("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_assert_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "@assert (get_option"
        $s3 = "Assert transient option: */ @assert"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "function arr2html($array, &$arr"
        $s3 = "arr2html($_REQUEST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "='as'.\"s\".\"er\"."
        $s2 = "else @unlink("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_020 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = /\$\w+\s*=\s*['\"](s|.x73)(t|.x74)(r|.x72)(_|.x5f)(r|.x72)(e|.x65)(p|.x70)(l|.x6c)(a|.x61)(c|.x63)(e|.x65)['\"]\s*;\s*\$\w+\s*=\s*\$\w+\(/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "));"
        $s2 = "ZXZhbChnemluZmxhdGUoYmFzZTY0X2RlY29kZS"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_022 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "substr(\"class\",2)"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_assert_024 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = /@[\s]*assert[\s]*\([^;]+\$_(REQUEST|POST|GET)/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_025 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "]) && array_map("
        $s4 = "\",(array)$_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_assert_026 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "assert_options( ASSERT_WARNING, 0 ); assert_options( ASSERT_QUIET_EVAL, 1 ); $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_assert_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "$input = preg_replace(\"[^A-Za-z0-9\\+\\/\\=]\", \"\", $input)"
        $s4 = "return urldecode($output)"
        $s5 = "@$config['init']($config['request']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_assert_029 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "=$_POST;@$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_030 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = ";@${${"
        $s3 = "){$"
        $s4 = ";if(isset($_GET["
        $s5 = "}=base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_assert_032 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "extract($_REQUEST) && @assert(stripslashes"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_034 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "\"]}=fopen(getcwd().\""
        $s7 = ":{call_user_func_array(\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_assert_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "(stripslashes($_REQUEST"
        $s2 = "assert(stripslashes($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_assert_036 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "&& md5($_"
        $s2 = "\",(array)$_COOKIE[\""
        $s3 = "array_map(\"a"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_assert_xor_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "\xbe\xac\xac\xba\xad\xab"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = ");@$b374k(\""
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "http://code.google.com/p/b374k-shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "author: b374k"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "(md5($_POST['pass']));"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "<title>b374k 2."
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_008 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "/b374k.txt"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(\"?>\".gzinflate(base64_decode(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_b374kshell_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "$GLOBALS['title'] = \"b374k\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "YjM3NG"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_b374kshell_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "$b374k = $func("
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_b374kshell_014 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = "urldecode('%"
        $s3 = /set_time_limit\(0\);[\s]*error_reporting\(0\);\$[0O]+[\s]*=[\s]*urldecode\(.%[^;]+\);[^_]+__FILE__;[^_]+preg_replace\(/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_b374kshell_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "/shells/b374k.txt"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_b374kshell_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "b374k shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_016_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "'b374k'"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_016_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "{[|b374k|]}"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_016_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = "$GLOBALS['module']['"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_b374kshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$GLOBALS['packer']['title'] = \"b374k shell packer\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_b374kshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = "b374k (login"
    condition:
        $s0 and $s1
}

rule php_backdoor_backdoor_installer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "fwrite($hix, base64_decode($dirut));"
    condition:
        $s0 and $s1
}

rule php_backdoor_backdoor_installer_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ",base64_decode('PD9waHAgQGV2YWwoJF9QT1NUWydzZW5zZSddKTs/Pg=="
    condition:
        $s0 and $s1
}

rule php_backdoor_backdoor_installer_002_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "file_put_contents($_SERVER['DOCUMENT_ROOT'].base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_backdoor_installer_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = ".txt; php -f "
        $s2 = "system(\"cd \".$ar.\";wget -O"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_backdoor_installer_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "DIRECTORY_SEPARATOR.'it.php','<?php  echo \"test_is_test\"; ?>');"
    condition:
        $s0 and $s1
}

rule php_backdoor_backdoor_installer_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "'<?php '.base64_decode($shell).' ?>'.$backup_copy"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_backdoor_installer_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$g=array(\"Lmh0YWNjZXNz\"=>$c,\"Y2dpLXN0YXRlLmNnaQ==\"=>$f);"
    condition:
        $s0 and $s1
}

rule php_backdoor_backdoor_installer_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "private function hasUnconfirmedBackdoors()"
    condition:
        $s0 and $s1
}

rule php_backdoor_backdoor_installer_010 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "$resultsx = file_get_contents"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_backdoor_installer_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if (file_exists($file_name)"
        $s4 = "->extractTo("
        $s5 = "print(file_put_contents($_REQUEST"
        $s6 = "foreach(scandir($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_backdoor_mw_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "create_file($glob_pathMW"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_base64_001_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "c2hlbGxfZXhlYyg"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_base64_001_04 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "base64_decode(\"PD9wa"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_base64_001_05 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "PSBzdHJfcmVwbGFjZSgi"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_base64_001_06 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "JF9TRVJWRVJbJ0h"
        $s3 = "Z29vZ2xl"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_base64_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x62\\141\\x73\\145\\x36\\64\\137\\144\\x65"
    condition:
        $s0 and $s1
}

rule php_backdoor_base64_002_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_base64_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "Array(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_base64_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = ".=\"\\x65\\x36\\x34"
    condition:
        $s0 and $s1
}

rule php_backdoor_base64_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "<title>404 Not Found</title>"
        $s3 = ".\"\".\"6\".\"\".\"\".\"4\"."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_base64_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "@eval($"
        $s4 = "kY10pKTsjIyN5ZXYKJHJf"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_base64_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "@eval($"
        $s4 = "uZz1yYW5kKDEsMjU1KS4nLicucmF"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_base64_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "?>\" . base64_decode(\"Z2lm"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_base64_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "PD9waHAgLyo"
        $s2 = "Ki8gPz48P3BocCBpZihpc3NldCgkX0dFVF"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_beandoor_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "XH"
        $s3 = "$_F=__FILE__;$_X='Pz48P3BocCA"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_beandoor_001_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "$_F=__FILE__;$_X='Pz48P3BocCA0Zig0c3M1dCgkX0dFVFsi"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_beandoor_002_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "Pz48P3BocA0KDQovKioNCiAqIEAxM3RoMnIgSWtyMW0gQUxJDQogKiBAYzJweXI0Z2h0IGEw"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_beandoor_002_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "aXNzZXQoJF9HRVRbJ2xvYWRiZWFuJ10p"
    condition:
        $s0 and $s1
}

rule php_backdoor_beandoor_002_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "$_F=__FILE__;$_X='Pz48P3BocA0KJDEzdGhfcDFzcyA9IG1kaSgiYjUxbmQyMnIiKTsNCiRjMmwyciA"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_beandoor_002_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "$_F=__FILE__;$_X='Pz48P3BocCANCiQzcmwg"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_beandoor_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "$_F=__FILE__;$_X='Pz48P3BocCAkM3JsID0gJ2h0dHA6Ly85"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_beandoor_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "$_F=__FILE__;$_X='Pz48P3BocA0KDQoNCg0KDQo0ZigkMTN0"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_beandoor_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "$_F=__FILE__;$_X='Pz48P3BocCAjIFc1YiBTaDVsbCBie"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_blackhat_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "$blackhat"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_BoffMax_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "BoffMax"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_bogel_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = "@error_reporting(0); @set_time_limit(0); $bogel = $_GET['bogel']; $osc = $_GET['osc'];"
    condition:
        $s0 and $s1
}

rule php_backdoor_botshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "if ($info->work==\"false\") $bot_start = false;"
    condition:
        $s0 and $s1
}

rule php_backdoor_botshell_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "if (strcmp(strtolower($chat), $start_bot) == 0) {"
    condition:
        $s0 and $s1
}

rule php_backdoor_botshell_001_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "if ($bot_start==true) post_cbox($mess);"
    condition:
        $s0 and $s1
}

rule php_backdoor_botshell_001_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = ">SpamBOT"
    condition:
        $s0 and $s1
}

rule php_backdoor_botshell_001_05 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "$fp2 = @fopen(\"proxy.txt\", \"r\");"
    condition:
        $s0 and $s1
}

rule php_backdoor_botshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "function handle_bot_cmd_shell() {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_botshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ")));';extract(['f'=>'create_function','b'=>'base64_decode']);$"
    condition:
        $s0 and $s1
}

rule php_backdoor_botshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "\"rpc_server\";"
        $s6 = "\"TEAM_CC\";"
        $s7 = "function execute_command"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_c0derzshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "7TppUxtJsp+HCP5DusxOS7vowgiwpBaDPWKGeBgYJOzYQISi1F2SO"
    condition:
        $s0 and $s1
}

rule php_backdoor_c100shell_001_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$proxy_shit=\"H4sIALMXx0QAA+RafXhU1Zm/"
    condition:
        $s0 and $s1
}

rule php_backdoor_c99shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "c99"
        $s1 = "; c99shexit();"
    condition:
        $s0 and $s1
}

rule php_backdoor_c99shell_001_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Shell code by "
    condition:
        $s0 and $s1
}

rule php_backdoor_c99shell_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "c99"
        $s1 = "function c99shexit"
    condition:
        $s0 and $s1
}

rule php_backdoor_c99shell_001_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "7b1re9u2sjD6ee/n2f8BYdVEanWzk7SNHTt1YqfxWU6cZTuru8fx1qJISmJNkSpJ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_c99shell_001_05 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "c99"
        $s1 = "c99sh_surl"
    condition:
        $s0 and $s1
}

rule php_backdoor_c99shell_001_06 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "HJ3HkqNQEkU/ZzqCBd4t8V4YAQI2E3jvPV8/1Gw6orsVFLyXefMcFU"
    condition:
        $s0 and $s1
}

rule php_backdoor_c99shell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$b5f = create_function('$'.'v',$a5"
    condition:
        $s0 and $s1
}

rule php_backdoor_c99shell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(strrev('/0///973n3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_c99shell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7b17f9vG0TD6d/v75TusEaYmE5KiZOcmWXJkSY59alt+JLlpXtmHBQlQQkUSDABKdl"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_c99shell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7X1rcxs5kuBnd0T/B7ia3STHfMpv0ZQt62G7bUtqS7bbLSkYRVaR"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_c99shell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "cda2c99fbf5e19f20d331299c15a4491"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_c99shell_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "if (empty($access_key) || (isset($_REQUEST['key']) && $_REQUEST['key'] == $access_key)) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_c99shell_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7P1pW+NIsgCMfr7zPPMfVB6mCwbjDbMVBd3yBgZsY5vNrqqXkS1ZFl"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_c99shell_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "<input type=hidden name=a value=\"FilesMAn\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_c99shell_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "strrev("
        $s4 = "strrev(\"edoced_46esab\")"
        $s5 = "JGxvZ2luPSI5MTMiOyRtZDVfcGFzcz0iNjk3MWYxYmZjODE3NDZjMzM5MjNiOWY3ZDhiZjU3ODYiOw=="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_c99shell_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "iI7CiB9Cn0KaWYgKCRhY3QgPT0gInVwZGF0ZSIpIHskcmV0ID0gYzk5c2hfZ2V0dXBkYXRlKCEhJGNvbmZpcm11cGRhd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_cache_module_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "$_SERVER["
        $s3 = "if (strpos($file_content, 'Cache_Class') === false)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_cache_module_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "$_SERVER["
        $s3 = "Cache_Class::update_content($content, $GLOBALS['global_code'])"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_cache_module_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "$_SERVER["
        $s3 = "cache_content` (`url`, `code`, `ID`) VALUES"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_cache_module_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "PING.*//ENDPING"
    condition:
        $s0 and $s1
}

rule php_backdoor_cache_module_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents($cache_dir . $code,$x);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_charlichaplin_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$backdoor->shell = $shell"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_check_copyright_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$check_copyright = create_function"
    condition:
        $s0 and $s1
}

rule php_backdoor_chinese_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "{case  \"home\":home();break;case  \"up\":up();break;case  \"upload\":if(!isset($_FILES['upfile'])){printerror('"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_chinese_shell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "error_reporting(0)"
        $s4 = "function sqlbackup($ip,$sql,$username,$password)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_chmod_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "<?php print '! -_-\" Permissions Changed"
    condition:
        $s0 and $s1
}

rule php_backdoor_chmod_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "@chmod($filetemp,0755);"
        $s4 = "$filetemp = './wp-admin/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_chmod_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@copy($fromfile,$tofile);@chmod($tofile,0444);}if(isset($_REQUEST['test"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_class_wp_index_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "$Class_WP_Index3($Class_WP_Index"
    condition:
        $s0 and $s1
}

rule php_backdoor_cli_upload_001_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "base64_decode(strtr($_POST[\""
        $s2 = "file_put_contents"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_cmd_executer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = ".exec($_POST['executer'])"
    condition:
        $s0 and $s1
}

rule php_backdoor_code_password_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "preg_replace(\"\\043\\056\\052\\043\\145\","
    condition:
        $s0 and $s1
}

rule php_backdoor_code_password_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "<input type=\"submit\" value=\"GeT Passwords"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_codeinclude_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$tempfile=tempnam(__FILE__,'');"
        $s2 = "include($tmp);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_codeinclude_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "file_put_contents($c,'<?php '.$a); include($c)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_CodeNewbieCrewshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "gzinflate(str_rot13(base64_decode($f1b3r))));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_con7ext_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\"\\x62\\x61\\x73\\x65\\x36\\x34\\x5"
        $s2 = "($con7ext"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_cookey_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "4cookey"
    condition:
        $s0 and $s1
}

rule php_backdoor_cookie_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "COOKIE"
        $s1 = "](@$_COOKIE["
    condition:
        $s0 and $s1
}

rule php_backdoor_cookie_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "](@$_COOKIE["
        $s3 = "if(@$_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_cookie_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "if(file_exists($doc))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_cookie_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "die();"
        $s2 = ");header(\"Location:"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_cookie_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "];if(isset($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_cookie_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "curl_init($_COOKIE['user_name']"
        $s4 = "$role.='/'.$_COOKIE['user_id'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_cookie_012 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = /isset\(\$_COOKIE\['\w+'\]\)&&\(\$\w+=\$_COOKIE\['\w+'\]\)&&file_exists\(\$\w+\)&&require_once\(\$\w+\);/
    condition:
        $s0 and $s1
}

rule php_backdoor_cookie_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "rawurldecode('%62' . '%61' . '%73' . '%65%3' . '6%34%' . '5f%'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_cookie_014 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "file_exists"
        $s2 = "require_once"
        $s3 = /isset[\s]*\([\s]*\$_COOKIE\[.[\w]+.\][\s]*\)[\s]*&&[\s]*\([\s]*\$[\w]+[\s]*=[\s]*\$_COOKIE\[.[\w]+.\][\s]*\)[\s]*&&[\s]*file_exists[\s]*\([\s]*\$[\w]+[\s]*\)[\s]*&&[\s]*require_once[\s]*\([\s]*\$[\w]+[\s]*\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_cookie_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "RE9DVU1FTlRfUk9PVCdd"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_cookie_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "__construct()"
        $s3 = "public function __destruct()"
        $s4 = "sys_get_temp_dir() . \"/\" . crc32("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_COOKIE_eval_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "extract($_COOKIE"
        $s2 = "extract($_COOKIE, 1);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_COOKIE_eval_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "@$_COOKIE[\"user\"]($_COOKIE[\"id\"]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_COOKIE_eval_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "@$_COOKIE[set]($_COOKIE[test]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_COOKIE_eval_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "@register_tick_function("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_COOKIE_eval_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "Array("
        $s3 = "){return @$"
        $s4 = "]));exit();}}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_COOKIE_eval_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "(substr($_COOKIE[0],1)));$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_COOKIE_eval_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "PD9waHAKJE1oID0gJ2VzY"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_COOKIE_eval_010 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "=\"\\x5f\\x43\\x4f\\x4f\\x4b\\x49E\";$"
        $s2 = "\"\\x63\\x72\\x65a\\x74\\x65_\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_COOKIE_eval_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "Array("
        $s3 = "@$_POST[$_"
        $s4 = ");if(!empty($_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_COOKIE_eval_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "(!function_exists('curl_init')) ? file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "create_function(\"\", $php)"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "=str_repeat(\"\\xe"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_002_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "tion_exists('create_function')){$"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "JGM9J2NvdW50pw"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "create_function(\"\", base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_create_function_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "create_function('', gzuncompress(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_create_function_007 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\162\\x65\\141\\x74\\145\\x5f\\146\\x75\\156\\x63"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_007_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\145\\x61\\164\\145\\x5f\\146\\165\\156\\x63"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_009 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "eat\".\"e_fun"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_010 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = ").'eate_func"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "if (!empty($_REQUEST["
        $s2 = "@$decode($reverse($_REQUEST[$auth]))"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_012 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = /[md5'\.]{6,};[\s]*if\(\$[\w]\(\$_REQUEST\[\$[\w]\]\)==.[\w]{25,}.\)\{/
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "crkekatkek_kfkukncktkikon"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$JSubMenuHelper = create_function('', $JSubMenu);"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "} ^ $"
        $s2 = "'](null, $"
        $s3 = "++, $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$prepare"
        $s4 = "strrev("
        $s5 = "kses_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_create_function_016_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base64_decode"
        $s2 = "base64_decode($wp_kses_data);"
        $s3 = "preg_match('#<img src=\"data:image/png;base64,(.*)\">#"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_016_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "a3Nlc19zdHIgPSBzdHJfc"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_create_function_017 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "edoced_46esab"
        $s3 = "sserpmocnuzg"
        $s4 = "noitcnuf_etaerc"
        $s5 = "= strrev($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_018 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "('',"
        $s2 = "^"
        $s3 = /\$[\w]+[\s]*=[^\n\(]+\^[\s]*['\$][^\n\(]+\('',[^\n;]*['\$][^\n]+\);[\s]*\$[\w]+\(\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "isset($_POST["
        $s3 = "= create_function(\"\", $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_020 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "edoced_46esab"
        $s3 = "_PTTH[REVRES_$(edoced_46esab(lave'));@$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_021 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$(lave'));"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "@create_function('', $_POST["
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "(\"#/\\*\\*(.*)\\*\\*/#se\",implode"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_025 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "\".chr("
        $s3 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*Array\([\s]*'.'[\s]*=>[\s]*'.',[\s]*[^\)]+\);[\s]*\$[\w]+[\s]*=[\s]*[\w]+\(\$[\w]+,[\s]*\$[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*[^;]+chr\([\d]+[+-][\d]+\)[^;]+;[\s]*\$[\w]+\('',[^;]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_027 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ")));');"
        $s1 = "$GLOBALS["
        $s2 = "(\"?>\""
        $s3 = /\$GLOBALS\['[\w]+'\][\s]*=[\s]*.[\w]{20,}.;[^\)]+\(\"\?>\"\.gz[^\;]+\(.?\$x\)\)\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_028 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "}.$"
        $s3 = "//scp-"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "a0vGLOOW4GzDlnPv3QAwOGYchSq7uqvnMuSLo4k"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_031 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$set_attr('', @$get_attr($img_size($wpsize)));"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_032 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "=\"\\\\x"
        $s2 = /\$[\w]+[\s]*=[\s]*\"[^;]+\\1[\d]{2}[^;]+\";[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\('\$[\w]+,[\s]*\$[\w]+',[\s]*'\$[\w]+[\s]*=[\s]*\"[^\"]+\\\\1[\d]{2}[^;]+\";[^\n]+\$[\w]+\(\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_create_function_033 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x65\\x76\\x61\\x6c\\x28\\x22"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_034 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = "\\x4f\\x4b\\x49\\x45"
        $s3 = "x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e"
        $s4 = "=>@$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_create_function_035 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "e\\x78\\x74\\x72\\x61\\x63\\x74"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_036 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "$elementName(\"\\x6f\\x6e\\x66\\x72\\x36\\x34\\x5f\\x71\\x72\\x70\\x62\\x71\\x72\");"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_038 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "')}[chr("
        $s3 = /\$[\w]+[\s]*=[\s]*\@\$\{\$[\w]+\([^)]+\)\}\[chr\([\d]+\)\.chr\([\d]+\)\];[\s]*if\(!empty\(\$[\w]+\)\)\{/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_create_function_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "create_function(\"\","
        $s2 = "create_function(\"\", base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_create_function_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "MHOvQD/JpEQ069tMCThnEMpiPeuU0Hr"
    condition:
        $s0 and $s1
}

rule php_backdoor_create_function_042 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "= isset($"
        $s2 = "array_merge($_REQUEST, $_COOKIE, $_SERVER);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_create_function_043 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "$a',strrev(';)a$(lave'));"
        $s3 = "\"(edoced_46esab(lave'));"
        $s4 = "7QXa4VmC7ciPs1Gdo9CP"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_create_function_044 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "{$status=create_function(\"\",$_SERVER[strtoupper(\"http_\".\""
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_create_function_045 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "ord"
        $s2 = "//"
        $s3 = "create_function(null,"
        $s4 = /preg_split\(.\/\/.,[^,]+,[\s]*-1,[\s]*1\)[^\?]+create_function\(null,[\s]*\$[\w]+\);[\s]*\$[\w]+\(\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_create_function_wp_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "=@gzinflate(strrev($"
        $s2 = "if(crc32($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_crypto_function_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "']:(isset($_COOKIE['wp_"
        $s2 = "value=\"\"/><input type=\"submit\" value=\"&gt;\"/></form>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_crypto_function_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "]:(isset($_COOKIE["
        $s2 = "=@gzinflate("
        $s3 = "value=\"\"/><input type=\"submit\" value=\"&gt;\"/></form>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_crypto_redirect_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "header(\"Location:"
        $s3 = "$domain = $_COOKIE["
        $s4 = "$domain.\"/wallet/#login\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_cryptoPHP_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "$social_filename = __DIR__ .'/social.png';"
    condition:
        $s0 and $s1
}

rule php_backdoor_curl_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "This code use for global bot statistic"
        $s2 = "if (!isset($sRetry))"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "This code use for global bot statistic"
        $s2 = "if ( $stCurlHandle !== NULL )"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_001_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "This code use for global bot statistic"
        $s2 = "echo file_get_contents('http"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_001_04 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "This code use for global bot statistic"
        $s2 = "/*This code use for global bot statistic*/"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "curl_exec($ch); echo $check; if($ult) {echo $ult;} else {echo 'error"
    condition:
        $s0 and $s1
}

rule php_backdoor_curl_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "multiRequest($urls, $options,$oneoptions);"
    condition:
        $s0 and $s1
}

rule php_backdoor_curl_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "]('curl_"
    condition:
        $s0 and $s1
}

rule php_backdoor_curl_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.0.2) Gecko/2008091620 Firefox/3.0.2'"
    condition:
        $s0 and $s1
}

rule php_backdoor_curl_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "array('file'=>\"@$uploadfile"
        $s3 = "$ch = curl_init(\"http://finditinhaubstadt.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "print \"$postResult\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_008_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "$hasil"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "base64_decode($_REQUEST"
        $s4 = "echo $filename.\" write success\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_curl_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = ">$cek_shell</a> -> shellmu<br>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "if (!$result && $url && function_exists('fopen"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_curl_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(curl_exec"
        $s2 = "eval(curl_exec($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_012_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(curl_exec"
        $s2 = "(isset($_GET["
        $s3 = "eval(curl_exec("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "CURLOPT_URL, $_GET["
        $s5 = "Stage($fileStage,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_013_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "CURLOPT_URL, $_GET["
        $s5 = "($_POST['target'], $_SERVER"
        $s6 = "\"upload\"] == \"go\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "| bash -sh"
        $s2 = "$handle = popen(\"curl -s http"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "LnBhc3RlLnNlL3Jhdw=="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = ".paste.se/raw\");"
        $s3 = ",CURLOPT_URL,\"http:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_curl_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = /\{[\s]*@http_response_code\(404\);[\s]*exit;[\s]*\}/
        $s5 = "md5($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "stream_get_contents($"
        $s5 = "md5(rand(0"
        $s6 = "add_action('init"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_curl_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = /\{[\s]*@http_response_code\(404\);[\s]*exit;[\s]*\}/
        $s5 = "md5=@$_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "(isset($_GET["
        $s3 = "(~base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "if(@$_GET["
        $s5 = "@array_map('unlink',@glob"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "stream_context_create($"
        $s5 = "touch(\"./$randname.php\", time() - mt_rand("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_024 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JEFQUF9Db2Rlcz0kR0xPQkFM"
        $s4 = "KGlzc2V0KCRfRU5WW3BhY2soJEdMT0JBTFNb"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_curl_026 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "touch($"
        $s5 = "feedmtimeFolder(dirname($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "(function_exists('curl_init'))"
        $s2 = "file_put_contents($"
        $s3 = "if(isset($_REQUEST["
        $s4 = "echo $"
        $s5 = "file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_curl_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "cGFzdGUuc2UvcmF3"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "NULL;do{curl_multi_exec($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "@extension_loaded("
        $s7 = "YWx5dGljcy5hcGllcy5vcmc"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_curl_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "eval("
        $s2 = "decrypt($"
        $s3 = "chr(ord(substr($"
        $s4 = "pZufmY+pl6SNicjOrNWlk6u"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_curl_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FZZHDqTYEkWX01VigCdBf4T3kHgzaeG9"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_033 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "eval('?>'."
        $s3 = "curl_init($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_034 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JHNlcnZlciA9ICRfU0VSVkV"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_036 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = ",CURLOPT_URL,hex2bin("
        $s3 = ").$_GET['p'].'&h='.$_GET['h']);curl_exec($c);curl_close($c); exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_037 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "foreach(glob($dir.\"/*\",GLOB_ONLYDIR) as $dir){if(is_writable($dir))return $dir;}return false;}}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "eval('?>'."
        $s3 = ".txt');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "curl_exec($"
        $s5 = "(empty($code) or !stristr($code"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_041 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "stream_get_contents($"
        $s5 = "add_action('init',"
        $s6 = "[mt_rand(0, strlen($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_043 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "isset($_GET["
        $s4 = "curl_getinfo("
        $s5 = "(is_callable("
        $s6 = "base64_encode(json_encode($"
        $s7 = "@header"
        $s8 = "base64_decode(self::$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_curl_046 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "curl_exec($"
        $s5 = "CURLOPT_URL,'http"
        $s6 = ") !== false) && (strpos($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_047 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "<?php ${base64_decode('R0xPQkFMUw==')}[base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$_F=__FILE__;$_X='Pz48P3BocA0K"
        $s2 = "Pz48P3BocA0KZjNuY3Q0Mm4gRzV0SVAoKXsNCiAgICA0Zihn"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_curl_049 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "return urldecode(base64_decode(implode($goodservurl)));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_050 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "file_put_contents(\"{$theme}/functions"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_051 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "{@chmod($"
        $s5 = "){socket_write($"
        $s6 = "$_SERVER[REMOTE_ADDR];}}else{if(getenv(\"HTTP_X_FORWARDED_FOR\")){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "\"]=base64_decode(\"bnByb2M=\");$GLOBALS[\""
    condition:
        $s0 and $s1
}

rule php_backdoor_curl_053 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = ", '.directory');"
        $s3 = ", 'checklist');"
        $s4 = "$content = curl_exec($ch);"
        $s5 = "$options[CURLOPT_POST] = 1;"
        $s6 = "CURLOPT_USERAGENT => $_SERVER['HTTP_USER_AGENT'],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_053_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = ", '.directory');"
        $s3 = ", 'checklist');"
        $s4 = "$content = curl_exec($ch);"
        $s5 = "$options[CURLOPT_POST] = 1;"
        $s6 = ",json_encode($_POST, true));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "CURLOPT_POSTFIELDS => \"{}\","
        $s3 = "echo \"cURL Error #:\" . $err;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_055 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "isset($_GET["
        $s4 = "curl_getinfo("
        $s5 = "fsockopen(($"
        $s6 = "urlencode(base64_encode(json_encode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_056 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$xss = $httpx + $domain + $param;"
    condition:
        $s0 and $s1
}

rule php_backdoor_curl_057 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "urldecode("
        $s4 = ");eval($"
        $s5 = ");return gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_058 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "])){setcookie("
        $s3 = "=strtok(rtrim($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_059 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "base_convert(strrev(substr($"
        $s6 = ";}}elseif(function_exists('fsockopen')){function"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_curl_060 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval("
        $s3 = "<strlen($"
        $s4 = /function[\s]*[\w]+\(\$[\w]+,[\s]*\$[\w]+\)\{[\s]*\$[\w]+=.[\w]*.;[\s]*for\(\$[\w]+=[\d]+;\$[\w]+<strlen\(\$[\w]+\);\)[\s]*for\(\$[\w]+=[\d]+;\$[\w]+<strlen\(\$[\w]+\);[^;]+;[\s]*return[\s]*\$[\w]+;[\s]*\};[\s]*\$[\w]+=.[\w]+.;[\s]*\$[\w]+=.[\w]+.;[\s]*eval\([\w]+\(base64_decode\(/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_curl_062 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "http_build_query($"
        $s3 = ")){function getallheaders(){$headers=array();foreach($_SERVER"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_curl_063 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = ".urlencode($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_curl_064 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "curl_exec($"
        $s5 = "parse_str(file_get_contents(\"php://input"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_curl_065 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "eval(base64_decode('ZnVuY3Rpb2"
        $s4 = "aWxlX2dldF9jb250ZW50cygkd"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_cve_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = ".@$_(cve("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_CyberNetic_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "function doXploitVB($cnf,$html){"
    condition:
        $s0 and $s1
}

rule php_backdoor_darkshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "echo \"<table><form action = '\".$current. \"&mode=port_scan'"
    condition:
        $s0 and $s1
}

rule php_backdoor_darkshell_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "port_range=$_POST[$_GET{"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_db_shell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "get_option"
        $s2 = "$wp_optimize_func=create_function('',get_option('wp_optimize'));$wp_optimize_func();"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_db_shell_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "if (al_ki_shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_db_shell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include('../"
        $s2 = "include('../wp-config.php');"
        $s3 = "UPDATE $table SET post_content='$newCode', post_title='$newTitle' WHERE id=$id"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_db_shell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = ": function feedmtimeFolder($"
        $s4 = ": function do_mysql_getemall($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_dbload_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "get_option"
        $s2 = "function page_options() { $option = get_option('page_option'); $opt=unserialize($option);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_dbload_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "(ge'.'t_option("
    condition:
        $s0 and $s1
}

rule php_backdoor_dbload_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "\")))', 'add');?><?php $"
    condition:
        $s0 and $s1
}

rule php_backdoor_dbload_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "$_z=create_function(\"\",$z); @$_z(); }"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_dbload_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "@ini_set('cgi.fix_pathinfo', 1);"
        $s3 = "if ($_GET['ping']) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_dbload_006 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "@$"
        $s2 = "null"
        $s3 = "isset"
        $s4 = "get_option"
        $s5 = /\$[\w]+[\s]*=[\s]*get_option\(.[\w]+.[\s]*\);[\s]*if[\s]*\([\s]*isset[\s]*\([\s]*\$[\w]+\[.[\w]+.\][\)\s]+@\$[\w]+\[.[\w]+.\]\([\s]*null/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_dbload_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "add_action( 'init', create_function( '', @join( array_map( \"base64_decode\", json_decode( get_option( $table_prefix . \""
    condition:
        $s0 and $s1
}

rule php_backdoor_dbload_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "(array_key_exists('eval', $payload"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_dbload_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "file_get_contents($upUrl, false, $context);"
        $s5 = "site_url() . '&ur=' . admin_url('admin-ajax.php?action="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_decryptS0_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "eval($dec);"
    condition:
        $s0 and $s1
}

rule php_backdoor_delloginfile_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "function recurDir4($dir4,$chmod4='')"
        $s4 = "function delloginfile() {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_determinator_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "/*versio:"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_determinator_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "versio:"
        $s2 = "*/ $GLOBALS"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_determinator_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "versio:"
        $s2 = "/e\", "
        $s3 = ")){$GLOBALS["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_determinator_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "ZnVuY3Rpb24gdEx2MmFRQmdQN2VNalJzQWdnT2l"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_determinator_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "versio:"
        $s2 = "aWYgKCFkZWZpbmVkKCJkZXRlcm1pbmF0b3IiKS"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_dgreusdi_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "intval(__LINE__) * 337;\""
    condition:
        $s0 and $s1
}

rule php_backdoor_dgreusdi_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "Array("
        $s3 = "return @unserialize(screen_submission($data, $key)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_dgreusdi_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "PD9waHAgY3JlYXRlX2Z1bmN0aW9uKCcnLCBiYXNlNjRfZG"
    condition:
        $s0 and $s1
}

rule php_backdoor_dgreusdi_002_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base64_decode"
        $s2 = "create_function('', base64_decode('fSBpZighZGVmaW5l"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_dgreusdi_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$dgreusdi = intval(__LINE__) *"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_dgreusdi_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "base64_decode($"
        $s4 = "file_put_contents($"
        $s5 = "intval(__LINE__)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_Dhanush_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$my_shell_style"
    condition:
        $s0 and $s1
}

rule php_backdoor_diveshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Dive Shell - Emperor"
    condition:
        $s0 and $s1
}

rule php_backdoor_do_backdoor_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "function do_backdoor_wp($domain_path"
    condition:
        $s0 and $s1
}

rule php_backdoor_do_backdoor_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "htaccess_"
        $s4 = "function do_backdoor($root_path"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_dodo_zip_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "<input name=\"todir\" type=\"text\" id=\"todir\" value=\"__dodo__\" size=\"15\">"
    condition:
        $s0 and $s1
}

rule php_backdoor_dodo_zip_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "<input name=\"todir\" type=\"text\" id=\"todir\" value=\"__dodo__\" size=\"15\">"
    condition:
        $s0 and $s1
}

rule php_backdoor_domen_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if (file_exists($file_name)"
        $s4 = "AF client v2.0 already installed!<hr><hr>"
        $s5 = "file_put_contents($put, $data)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_echoll_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "EcHoLL"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_encode_explorer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "EncodeExplorer::getConfig"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_encrypted_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "g__g_"
        $s2 = "$_g_g_[6]('', $g___g_);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_encrypted_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "value=\"&amp;\""
        $s2 = "<input type=\"text\" name=\"g__g_\" value=\"\"/>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_encrypted_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "chr(ord($"
        $s4 = "])%256)];$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_encrypted_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "chr(ord($"
        $s4 = "}=@unserialize(sh_decrypt(@base64_decode(${$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_encrypted_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "function_exists"
        $s2 = "mcrypt_decrypt"
        $s3 = "strrev('edoced_46esab')"
        $s4 = "= $wpdb->get_var(\"SELECT `option_value` FROM {$wpdb->options} WHERE `option_name`="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_encrypted_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "0O"
        $s3 = "return openssl_decrypt($"
        $s4 = "akRNajlvNzduQUZrY"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_encrypted_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "eval(base64_decode("
        $s3 = "FD1FJg167z2fvvRfdNJBFTogsCltSORac35"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_encrypted_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = ").(round(0+16+16)*round(0+1+1))._"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_encrypted_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "execute($"
        $s3 = "openssl_decrypt(base64_decode($output), 'AES-256-CBC', base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_chr_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=eval(chr("
        $s2 = "if(!isset($_REQUEST[chr("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_chr_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(${$"
        $s2 = "].$"
        $s3 = "\\x"
        $s4 = "]}.=chr(ord(${${\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_chr_003 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /(\$\w+)\s*=\s*['\"].{64}/
        $s2 = /\$[\w]+[\s]*=[\s]*['\"][^;]{1000}[^;]+;[\s]*(\$[\w]+[\s]*.?=[\s]*['\"][^;]+;[\s]*){10,}(\$[\w]+[\s]*\([\s]*){3,}\$[\w]+[\s\)]+;/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_chr_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "eNqVVoty4sYS/RXWRQVUJo4khEAhyl0"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_COOKIE_001_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "COOKIE"
        $s1 = "public function __construct() {"
        $s2 = "= @$_COOKIE['"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_COOKIE_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "__construct()"
        $s3 = "header(\"HTTP/1.0 404 Not Found\");"
        $s4 = "(@$_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "extract($_COOKIE"
        $s2 = "*/extract($_COOKIE);/*"
        $s3 = "*/extract($_COOKIE);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_004_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "extract($_COOKIE"
        $s2 = "extract($_COOKIE);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_COOKIE_004_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "extract($_COOKIE"
        $s2 = "*/extract($_COOKIE);/*"
        $s3 = "&&@$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_004_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "extract($_COOKIE"
        $s2 = "* NOTICE OF LICENSE"
        $s3 = "if(!empty($_COOKIE['strlen']) && md5($_COOKIE['x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = ".@$_($_REQUEST["
        $s2 = "if(md5(@$_COOKIE["
        $s3 = "]).@$_($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "error_reporting(0);if(isset($_COOKIE["
        $s2 = "function ob_sh($buffer){$buffer = preg_replace(\"@<!--(.*?)-->@si\",\"\",$buffer)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_COOKIE_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "if(@$_COOKIE[\""
        $s3 = "{error_reporting(0);@array_map"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "$outbuf=\"\";$outstr=\"\";exec(base64_decode($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "--><?php"
        $s2 = ";if(isset(${$"
        $s3 = "]])){eval(${$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_011 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "base64_decode"
        $s2 = "array_shift($"
        $s3 = "unserialize"
        $s4 = /\$[\w]+[\s]*=[\s]*\"[\w]+\";[\s]*foreach[\s]*\([\s]*\$_COOKIE as \$[^\{]+\{[\s]*if[\s]*\([\s]*\$[\w]+ == \$[\w]+[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*base64_decode/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_011_02 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "base64_decode"
        $s2 = "end($"
        $s3 = "echo $"
        $s4 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*foreach[\s]*\([\s]*\$[\w]+[\s]*as \$[\w]+ => \$[\w]+[\s]*\)[\s]*\{[\s]*if[\s]*\([\s]*\$[\w]+ == \"/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_011_03 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "base64_decode"
        $s2 = "array_pop($"
        $s3 = "echo @$"
        $s4 = /\$[\w]+ = \"[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*foreach[\s]*\([\s]*\$[\w]+ as \$[\w]+ => \$[\w]+[\s]*\)[\s]*\{[\s]*if/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "isset($_GET["
        $s4 = "(isset($_GET[\"cookie\"]))"
        $s5 = "echo 'cookie="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_COOKIE_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "$content =  remove_tags(_dl($_COOKIE["
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_014 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "<?php @$_COOKIE"
        $s3 = /@\$_COOKIE\[[^]]+\]\(\$_COOKIE\[[^]]+\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_015 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "]($_"
        $s2 = "])){$_COOKIE"
        $s3 = /isset[^(]*\([^$]*\$_COOKIE\[[^{]+\{[^$]*\$_COOKIE\[[^]]+\]\(\$_COOKIE/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "extract($_COOKIE"
        $s2 = "extract($_COOKIE);@$"
        $s3 = "extract($_COOKIE);@$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_017 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "base64_decode"
        $s2 = "_COOKIE;"
        $s3 = "var_dump"
        $s4 = "array_pop"
        $s5 = /\$[\w]+[\s]*=[\s]*array_pop\([\s]*\$[\w]+[\s]*\);[\s]*var_dump\([\s]*\$[\w]+\([\s]*\$[\w]+[\s]*,[\s]*\$[\w]+\)[\s]*\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_COOKIE_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$path_upload_file = $dir . \"/\" . GenerateFilename();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_020 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "in_array(gettype($"
        $s3 = ").count($"
        $s4 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*[^\.;]+in_array\(gettype\(\$[\w]+\)[\s]*\.[\s]*count[^;]+\(\)\)[^;]*;[\s]*(\}[\s]*)*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_020_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "in_array(gettype($"
        $s3 = ").count($"
        $s4 = /\{[\s]*echo[^;]+;[\s]*exit[^;]*;[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_020_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "in_array(gettype($"
        $s3 = ").count($"
        $s4 = "])){die(md5("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_020_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = "\\x4f\\x4b\\x49\\x45"
        $s3 = "time())"
        $s4 = "if(in_array(gettype($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_020_05 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "in_array(gettype($"
        $s3 = ").count($"
        $s4 = "]-time())>0)&&@$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_020_06 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "in_array(gettype($"
        $s3 = ").count($"
        $s4 = ") { if (in_array(gettype($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_020_07 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "in_array(gettype($"
        $s3 = ").count($"
        $s4 = "if(isset($_COOKIE"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_021 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(''"
        $s2 = "();"
        $s3 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*'[^']+';[^\n]+\/\*[^\n]+\*\/\$[^\n]+\/\*[^\n]+\$[\w]+\(\);[^\n]*}?/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "echo $fn(base64_decode($_COOKIE[$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_COOKIE_024 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "$wp_locale = @$_COOKIE"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_COOKIE_025 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "<?php $o=<<<'EEEEEE"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_COOKIE_027 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "if(@md5($_COOKIE["
        $s3 = "@eval($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "(@isset($_COOKIE["
        $s3 = "@array_map(\"show\", @array($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_029 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "= $_COOKIE;"
        $s2 = "()) : $"
        $s3 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*\(count\(\$[\w]+\)[\s]*==[\s]*[\d]+[^;]+@\$[\w]+\(\)\)[\s]*:[\s]*\$[\w]+;[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_029_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "= $_COOKIE;"
        $s2 = "()) : $"
        $s3 = "function [\\w]+\\(\\)[\\s]*\\{[\\s]*(\\$[\\w]+[\\s]*=[^;]+;[\\s]*)?\\$[\\w]+[\\s]*=[\\s]*\\$_COOKIE;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_029_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "= $_COOKIE;"
        $s2 = "()) : $"
        $s3 = "$is_wp_mobile ="
        $s4 = "$is_wp_mobile = ($_SERVER['HTTP_USER_AGENT'] =="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "function __construct()"
        $s3 = "array('base', '64_dec', 'ode');"
        $s4 = "array('cook', 'set', 'ie');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "]); die;}"
        $s3 = "])) {@$_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "class wp_Conn{const conn='eval(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_033 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "](function($f)use($"
        $s4 = ")['uri'];include_once($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_034 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(''"
        $s2 = "();"
        $s3 = "};if(isset($"
        $s4 = /\};if\(isset\(\$[\w]+[^\{]+\{\$[\w]+=\$[\w]+\[.[\w]+.\]\.\$[\w]+\[.[^;]+;\$[\w]+[\s]*=[\s]*\$[\w]+\[.[\w]+.\][\s]*\.[\s]*\$[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\('',[\s]*[\s]*\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$_COOKIE[\"4\"];"
        $s3 = "($_COOKIE[\"1\"] == 123)"
        $s4 = "eval($a);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_COOKIE_036 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "eval($_COOKIE["
        $s3 = /@?eval\(\$_COOKIE\[.[\w]+.\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_038 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "){eval(strrev(base64_decode(strrev($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "isset($_COOKIE["
        $s2 = "exit(hex2bin"
        $s3 = "eval(hex2bin($"
        $s4 = "AES-128-"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_COOKIE_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "public function __construct($data = null)"
        $s2 = "$length !== ord($this->data[5]) || !in_array(gettype($prototype) . $length, $prototype))"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_COOKIE_041 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "eval("
        $s2 = "file_put_contents("
        $s3 = "getenv('HTTP_USER_AGENT'))) =="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_COOKIE_042 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "chr(ord($"
        $s4 = "@unserialize(sh_decrypt(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_file_get_contents_001 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = /eval\([^)]*file_get_contents[^;]+https?:[^;]+\.(php|txt|js|phtml|html|htm)[^;][\)\s]*;/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval(file_get_contents($_GET["
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_file_get_contents_003 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = /<\?php\s*\$\w+\s*=\s*file_get_contents\(__FILE__\)\s*;\s*\$\w+\s*=\s*base64_decode\(substr\(\$\w+,\s*-?\d+\)\s*\)\s*;\s*\$\w+\s*=\s*gzuncompress\(\$\w+\)\s*;\s*eval\(\$\w+\)\s*;\s*die\(\)\s*;\s*\?>\s*[a-zA-Z0-9\+\/]+/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_file_get_contents_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "= \"base64_decode\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_file_get_contents_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "\\x2F\\x2F\".${\"\\x5F\\x52\\x45\\x51\\x55\\x45\\x53\\x54\"}["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "foreach (str_split(@file_get_contents('php://input"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FZM1EqUKAgDv8qP5RYA/oDbC3Z1kC3d3Tr+zF"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_file_get_contents_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "@chop(base64_decode("
        $s4 = ",__FILE__);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_file_get_contents_009 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval('?>'.$"
        $s3 = /\$[\w]+[\s]*=[\s]*file_get_contents\(.http[^;]+\);[\s]*eval\(.\?>.\.\$[\w]+/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_file_get_contents_010 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval(file_get_contents('http"
        $s3 = /if[\s]*\(isset\(\$_GET\[.[\w]+.\]\)\)[\s]*\{[\s]*eval\(file_get_contents\(.https?:\/\/.[\s]*.[\s]*\$_GET\[.[\w]+.\]\)\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_file_get_contents_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "$text_auth->decrypt($str,"
        $s3 = "$str = @file_get_contents($text_file);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_file_get_contents_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "call_user_func(new"
        $s3 = "eval($"
        $s4 = "file_get_contents(\"php://input"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_file_get_contents_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "eval(str_rot13(base64_decode(substr(file_get_contents("
        $s3 = "Ly8tLS0tLS0tLS0tLS0tLS0tLUNuZmZqYmVxLS0t"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_file_get_contents_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "eval(base64_decode("
        $s3 = "hex2bin($"
        $s4 = "$_SERVER['HTTP_X_WORDPRESS_KEY'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_file_get_contents_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "$filedata = file_get_contents('https://gist.githubusercontent.com/"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "urldecode(base64_decode($"
        $s3 = "://'.@$_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_file_get_contents_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval(\"?>\"."
        $s3 = "128/2"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_file_get_contents_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval(\"?>\".@file_get_contents("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "<?=eval(\"?>\".file_get_contents(\"https://bit.ly/"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval/*"
        $s2 = "(\"?>\".file_get_contents"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_021 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval(\"?>\"."
        $s3 = "=eval"
        $s4 = "?>\".file_get_contents(\"http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_file_get_contents_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "http_build_query($"
        $s6 = "eval(\"?>\".$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_eval_file_get_contents_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "$payload=encode($_SESSION[$payloadName],$key);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_file_get_contents_024 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "\".\""
        $s3 = "@$"
        $s4 = "\\x67\\172\\151\\156\\146\\x6c\\x61\\x74\\145"
        $s5 = "\\x69\\x6d\\x70\\x6c\\x6f\\x64\\x65"
        $s6 = "\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_eval_gen_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\\166\\141\\154"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_001_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\\141\\163\\145\\066\\064\\137\\144\\145"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_001_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\145\\x76\\x61\\x6c"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_001_04 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "f\\165\\x6e\\143ti\\157n"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_001_05 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x76\\x61\\x6c\\x28\\x62\\x61\\x73\\x65\\x36\\x34"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_001_07 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\"e\\166al\""
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_002_01 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"\\x62as\\145"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_002_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "d\\x65\\x63\\157de\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = ";}};eval($QQQQQ("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_004_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "'ev'.'al("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_004_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "'e'.'va'.'l"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_004_04 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "'ev'.'a'.'l"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_004_05 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "'e'.'v'.'a'.'l"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_006 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval/**/("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_007 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(bzdecompress("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "\"){eval($"
        $s4 = ");exit;}"
        $s5 = "txt\");if($_GET"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_gen_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "= 'b"
        $s4 = "' . '"
        $s5 = "unset($"
        $s6 = "error_reporting(0);"
        $s7 = "isset($_GET["
        $s8 = "@eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_eval_gen_010 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode('LyogNDUzNTQ2Nj"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(pack(\"H*"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(@$_GET["
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if (file_put_contents($path, GetPayload($payload)) != FALSE)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_gen_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(gzinflate($adel("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\";eval("
        $s2 = "DQoJCUBlcnJvcl9yZXBvcnRpbmcoMCk7DQoJCUBpbmlfc2V0KCdlc"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "implode('_',$"
        $s2 = "return eval($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_017 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(\"\\x65\\x76\\x61\\x6c\\x28\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\\x28\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\\x31\\x33\\x2"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_gen_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rror_"
        $s3 = "@set_time_limit("
        $s4 = "eval(gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_gen_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "@eval(base64_decode(\"LyoqDQogKiBTaWduYXR1cmUgRm9yIFJlcG9ydA0KICovJHgxMD0n"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_020 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = /&&\$_GET\[[\w]\]\(\$_GET\[[\w]\]\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "@eval($"
        $s3 = "if(empty($_SESSION["
        $s4 = "$get.=chr("
        $s5 = "$url.=$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_gen_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "@eval(base64_decode($_SERVER['HTTP_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_gen_024 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "aWYoIWRlZmluZWQoImNoYWVKb3U3IikpewogICAgZGVmaW5lKCJjaGFlSm9"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_gen_025 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "$x(\"PD9waHAgJHsi"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_026 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "ZWNobyAnaXpvY2luPGJyPi"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_028 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "(hex2bin("
        $s3 = /function[\s]*_[\w]+\(\$_[\w]+\)\{\$_[\w]+[^\{]+\{global[\s]*\$_[\w]+;global[^\}]+\)\);\}eval\(eval\([^;]+\)\)\)\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_gen_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FZTXtaNAAEP/3QXGgA"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "eval((string) base64_decode($_COOKIE['"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "$strq = $code_auth->uncode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "DQpjbGFzcyAgVGVzdHsN"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_033 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "PD8NCiRhID0gZmlsZV9nZXRfY29"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_gen_034 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rror_"
        $s3 = "@set_time_limit("
        $s4 = ";print_r(openssl_get_cipher_methods());}echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_gen_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "T9tGFC92IiF8i2JKSVeSgBCooErVLH9Jp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_gen_036 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "function __construct(){"
        $s3 = "@eval($this->"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_gen_037 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "!= \"\") eval(base64_decode($"
        $s4 = ">getRequest()->getParam("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_038 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "]($_"
        $w0 = "@author Jakub Vrana"
        $s2 = /if[^)]+isset\(\$_(COOKIE|POST|GET)\[[^\]]+\]\)\)[^\n]+(COOKIE|POST|GET)\[[^\]]+\]\(\$_(COOKIE|POST|GET)\[[^\]]+\]\);([^\n]*\})*/
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule php_backdoor_eval_gen_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "ZXZhbCgnPz4nLi"
        $s3 = "<?php define("
        $s4 = "\"));?>"
        $s5 = ",__FILE__);$"
        $s6 = "];eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_gen_041 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]+\s*=\s*array.(.{26},){50}[^;]+;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_GET_001 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "eval($_GET["
        $s4 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_GET[^\]]+\][\s\)]+\{[\s]*eval[\s]*\([\s]*\$_GET\[[^\)]+\);[\s]*(die[^;]*;[\s]*)?\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_GET_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ")].self::$_PADCHAR);break;}return implode(\"\",$"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_GET_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "RETURNTRANSFER, 1);$result = curl_exec($ch);eval('?>'.$result);"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_GET_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "]) ?>"
        $s3 = "<?php $_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_GET_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "&& false !== stripos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && ( $file = get_file($basepath ."
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_GET_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "$file=implode(\"\\n\",file($_GET["
        $s3 = "str_replace(\"<?php\", \"\",$file);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_GET_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "$_ = range(\"A\",\"Z\");"
        $s2 = "<?=`$_`; ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_GET_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "ZXZhbChiYXNlNjRfZGVjb2RlKCRhbm9ucG"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_GET_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "=`$_GET[0]`"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_GET_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "strrev('edoced_46esab');"
        $s2 = "strrev('etalfnizg');"
        $s3 = "eval(stripslashes($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_GET_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = ")])== _"
        $s3 = "]($_GET[_"
        $s4 = "<?php if($_GET[_"
        $s5 = "))if($GLOBALS['_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_GET_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "\"\\x63\\x72\\x65\\x61\\x74\\x65\\x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_GET_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "<?$"
        $s3 = "]!=null)$"
        $s4 = "=$_GET;if($"
        $s5 = "]); eval('?>'.file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_get_option_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(get_option("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_get_option_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "<?php eval(get_option(\"\\x"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_get_option_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "function wp_custom_page_links_return"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_isset_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(${$"
        $s2 = "].$"
        $s3 = "if(isset(${$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_isset_002 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "eval("
        $s2 = "if(isset($_"
        $s3 = /if\(isset\(\$_(REQUEST|POST|GET)\[[^\]]+\]\)[\s]*&&[\s]*\(md5\(\$_(REQUEST|POST|GET)\[[^]]+\]\)[\s]*==[\s]*['\"][\w]{25,}['\"]\)[^}]+eval[^}]+}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_isset_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset($_GET"
        $s2 = "PD9waHAKCiRmaWxlcyA9IEAkX0ZJTEVTWyJ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_isset_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "function_exists"
        $s2 = "strrev('etalfnizg');"
        $s3 = "option_name`='s_encrypted_data"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_isset_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset($_GET"
        $s2 = "PD9waHAgJHsiXHg0N1x4NGNceDRmXHg0Mlx4NDFceDRjXHg"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_isset_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(${$"
        $s2 = "].$"
        $s3 = "\\x"
        $s4 = "\";${\"G"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "@create_function ( ' ', str_rot13 ( 'riny( $_CBFG"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_002_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset($_POST['eval']))"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_002_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "eval(base64_decode(str_rot13(strrev("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_002_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "eval($_POST['wp-load']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_002_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "eval(stripslashes(@$_POST"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_002_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "@$thor($hamm);"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_002_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "if(md5($_POST"
        $s3 = "eval(base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_03 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = /eval\(base64_decode\(@?\$_POST\[/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_002_08 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "base64_decode($_POST[\"php\"]"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_09 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "error_reporting(0); set_time_limit(0); if ($_GET"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_10 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[[^\]]+\][\s]*\)[\s]*\)[\s]*eval/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_11 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[[^\]]+\][\s]*\)[\s]*\)[\s]*\{[\s]*eval/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_12 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "@error_reporting(0);"
        $s5 = "@ini_set(\"log_errors\",0);"
        $s6 = "exit;"
        $s7 = "@ini_set(\"memory_limit\", \"128M\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_13 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "@ini_get(\"safe_mode\"),"
        $s5 = "pass\"]==$_passssword)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_14 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "!== false) { print $_SERVER["
        $s5 = "@flock($fp, LOCK_EX); @fputs($fp, $_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_15 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "exit;}"
        $s5 = "if ($_POST[\"php\"])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_16 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "$hash"
        $s5 = "=== $hash) @eval(base64"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_17 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "(md5(md5($_POST"
        $s5 = "die(eval(base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_002_18 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /eval\(base64_decode\(@?\$_POST\[/
        $s3 = "eval(base64_decode"
        $s4 = "if(md5($_GET["
        $s5 = "=='1'){echo '200'; exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_002_19 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "$host ="
        $s5 = "(preg_match('/^HTTP\\/1[.][01] 404/Usi', $header)) header($header);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace($_POST['v1'], $_POST['v2'], $_POST['v3']);"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "str_replace(\" \",\"\",\"\\x65\\x76"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "\"])){eval(mcrypt_decrypt(MCRYPT_RIJNDAEL_256,\""
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_008_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "@$_(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_008_002 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(function(p,a,c,k,e,d)"
        $s2 = /[^\w]eval\(\$_/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_008_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "@$_POST['php'];"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_008_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "$_'.'PO'.'ST['"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_008_03 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "die("
        $s3 = /if \(.isset\(\$_POST\[.(\w+).\]\)\)\s*\{die/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_009 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "@eval(urldecode($_POST"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_010 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = " = @$_POST[$"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_010_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "preg_replace"
        $s2 = ",@$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "GLOBAL $alreadyxxx;"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_012 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ");$"
        $s1 = "$_1=$_(\"YXJyYXlfbWFw\");"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(!empty($_POST['tp2']) and isset($_POST['tp2'])){"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_=@((base64_decode($_POST["
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$x0b=$_POST[\"inp\"];"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"BcFJkqowAA"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_017 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "newfilecontents = preg_replace('#<\\?php /\\*startdel"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "ZWNobyAnJzs="
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_019 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "eval(stripslashes($_POST["
        $s2 = "if(isset($_POST["
        $s3 = /<\?php[\s]*if[\s]*\(isset.._POST\[.[\w]+.\]\)\)[\s]*\{[\s]*@?eval\(stripslashes\(\$_POST\[.[\w]+.\]\)\);[\s]*exit\(?\)?;[\s]*\};?[\s]*\?>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "@preg_replace(\"/[checksql]/e\",$_POST['date'],\"saft\"); "
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_022 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "<?php @eval($_POST[http]);?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_023 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "cookey"
        $s3 = "preg_replace(\"\\x23\\50\\x2e\\53\\x29\\43\\x69\\145\","
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_024 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "strtoupper($"
        $s3 = /\$s[\d]+=strto(lower|upper)\(\$..\[[\d]+\]\.[^\n]+eval\(\$/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_025 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "{echo '<textarea id=areatext>';eval("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_026 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "$_POST[\"pass\"]==$_passssword"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_026_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "$auss = \""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if (isset($_POST['wp-loads'])) {"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_028 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = /<\?php[\s]*@?eval[\s]*\([\s]*\$_POST[^\)]*\);?([\s]*\?>)?/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if (!isset($_POST['url']) && !isset($_POST['timeout'])) {header('HTTP/1.1 404 Not Found');echo"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(eval(\"\\$_"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_031 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if( md5($names[0])!='"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "JGxvZyA9ICdwcnQnOyBpZiAoIWlzc2V0KCRfU0VTU0lPTi"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_033 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "echo \"good_check_thumb\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_033_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval (stripslashes($cmd)"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_034 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "if($_POST['hsh']=='"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_035 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "));exit;}if(isset($_GET[sesion])){phpinfo()"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_037 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "].$GLOBALS["
        $s2 = "echo @$GLOBALS[$GLOBALS["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_038 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST; @($p[0] != $p[1]) ? @$p[2]($p[3])"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_039 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "<?php @eval($_POST["
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_039_02 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = /<\?(php)?[\s]*@eval\(\[/
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_040 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "404 Not Found'); exit(); }else{ $s=\"p\".\"r\".\"e\".\"g"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_041 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "&& md5($_REQUEST["
        $s3 = "error_reporting(0);if(isset($_REQUEST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_042 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0);eval(\"if(isset(\\$_REQUEST"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_043 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "if(@isset($_POST["
        $s3 = "if(@copy(@urldecode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_044 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "if(@isset($_POST["
        $s3 = "@preg_replace('/(.*)/e', @str_replace"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_045 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$xsser=base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_047 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "stripslashes($_POST[\"php"
        $s3 = "{@$_POST[\"php_func\"](stripslashes"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_047_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "stripslashes($_POST[\"php"
        $s3 = "{@eval(stripslashes($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_048 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "])&($config=chr("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_049 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "@eval(\"\\$getnum = $uid;\");"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_050 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = ");}elseif(is_string($"
        $s3 = ";}if(empty($_SERVER))$_SERVER=$HTTP_SERVER_VARS;array_map(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_051 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "eval($"
        $s4 = "= base64_decode($_POST["
        $s5 = "if(isset($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_052 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "eval(stripslashes(array_"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_053 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "@eval(\"\\$getnum = $host;\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "eval($"
        $s4 = "= base64_decode($_POST["
        $s5 = "echo \"indata_error\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_055 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "eval($"
        $s4 = "= base64_decode($_POST["
        $s5 = "switch($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_056 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "'/ad/e'"
        $s2 = "'@'"
        $s3 = "'add'"
        $s4 = "@preg_replace"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_057 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "e\",base64_decode(\"ZXZhbChiYXNlNjRfZGVjb2RlKCRfUE9T"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_058 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo '"
        $s3 = "@eval($_POST["
        $s4 = "if($_GET['"
        $s5 = "] == 'c'){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_058_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo '"
        $s3 = "@eval($_POST["
        $s4 = "!empty($_GET[$"
        $s5 = ")=='c')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_059 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "@eval($_POST["
        $s3 = "extends Mage_Core_Controller_Front_Action"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_060 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "/e\",$_GET["
        $s4 = "=eval($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_061 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = "\";$GLOBALS['"
        $s3 = "'] = ${$"
        $s4 = "']); } $GLOBALS['"
        $s5 = "]); echo $"
        $s6 = "'])) { eval($GLOBALS['"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_eval_POST_062 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=call_user_func($"
        $s2 = "].$"
        $s3 = "],$"
        $s4 = "eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_063 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "preg_replace"
        $s2 = "preg_replace('/^/e"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_064 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "aWYobWQ1KCRfQ09PS0lF"
        $s4 = "YXNlNjRfZGVjb2RlKCRfUE9TVFs"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_065 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = ");}echo2($_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_067 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "])){eval(base64_decode(str_replace(chr("
        $s2 = "if(!@$_COOKIE["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_067_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "])){eval(base64_decode(str_replace(chr("
        $s2 = ";foreach(array"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_068 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "!empty($_POST["
        $s2 = "$version ="
        $s3 = "e\";"
        $s4 = "@eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_069 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "@error_reporting(0);"
        $s4 = "if (isset($_POST[\"code\"]))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_070 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = ";$_='create'.'_'.'function';$__=$_"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_071 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "])&&(md5($_POST["
        $s2 = "eval(rawurldecode(base64_decode($_POST"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_072 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "if(isset($HTTP_POST_VARS) && isset($HTTP_POST_VARS["
        $s2 = "eval(pack('H*', $HTTP_POST_VARS["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_073 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=str_rot13(base64_decode($"
        $s2 = "] = chr(ord($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_074 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "@preg_replace('/^/e','e'.'val(base64"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_075 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval/*"
        $s2 = "*/$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_075_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval/*"
        $s2 = "*/(get_option("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_076 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "=fopen($_SERVER['DOCUMENT_ROOT'].\""
        $s3 = "echo $a.$b.$c"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_078 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "));exit();"
        $s2 = "XSk7ZXhpdCgpO30=';eval(base64_decode($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_079 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "ZXZhbChiYXNlNjRfZGVjb2RlKGFycmF5X3NoaWZ0KGFycmF5X3ZhbHVlcygk"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_080 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "$prefix = $var('',$types($set_prefix));$prefix();"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_081 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "base64_decode($_POST[\"mysql_sync\"])"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_082 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "c3RyaXBzbGFzaGVzKGJhc2U2NF9kZWNvZGUoJF9QT1NU"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_083 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "eval (get_magic_quotes_gpc()==1?stripslashes($_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_084 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "eval(base64_decode(base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_085 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "^ ord($_"
        $s2 = "YmFzZTY0X2RlY29kZShhcnJheV9zaGlmdCgk"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_086 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "JyAuIGdldGN3ZCgpIC4gJzwvY3dkPic7IH0gaWYgKCBpc3NldCAoICR"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_087 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "echo 'wo cao hao niu bi';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_088 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7X1te9s2suh3/QqY1QZiItGSnHSzkinbTZxN7uZtY2fbXttHpSRKYi2RKkn5pa7/+50ZACT4JsvZ7t7nPs/dnhOLwGAAD"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_089 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "if(isset($_POST[\"blah\"]) && md5($_POST[\"blah\"])"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_090 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "\".chr("
        $s3 = ",chr("
        $s4 = ").\"\\x"
        $s5 = /<\?php[\s]*(\$[\w]+[\s]*=[\s]*\"[^;]+\.\"\\x[^\$]+;[\s]*)+\$[\w]+\(\$[\w]+,[\s]*\$[\w]+,[^;]+\)[\s]*\.[\s]*chr[^;]+\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_091 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = ");}@"
        $s2 = /<\?php function [\w]+\(\$\w,\$\w,\$\w.\$\w\)\{\$\w=\$\w[\{\[]\d+[\]\}]\.\$\w[\[\{]\d+[\]\}]\.[^;]+;\$\w=&\$\w;\$\w=&\$\w;\$\w=\$\w[\{\[][\d][^@]+;\}@[\w]+/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_092 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = ")]($_POST[\"content\"]));"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_093 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = /\]\(\$_COOKIE, \$_POST\) as \$\w+ => \$\w+\){function/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_094 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"DZZHDqwIEkTv0qv/xQIovEa9wHtXeDYtvPee009dIJX"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_095 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "=chr(99).chr(104).chr(114);"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_096 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "eval("
        $s2 = "var_dump(md5("
        $s3 = "stripslashes($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_098 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "repeat_cmd"
        $s2 = "sprintf('%u"
        $s3 = "crc32($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_099 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "|.*|e',);array_walk($arr, strval($_POST["
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_100 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "= chr(ord($"
        $s3 = "if(!function_exists"
        $s4 = /if\(!function_exists\([^\{]+\{[\s]*function[^\}]+<strlen\(\$[\w]+\[\$[\w]+\]\);\$[\w]+\+\+\) \$[\w]+\[\$[\w]+\]\[\$[\w]+\] = chr\(ord\(\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_100_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "= chr(ord($"
        $s3 = /<strlen\(\$[\w]+\[\$[\w]+\]\);\$[\w]+\+\+\) \$[\w]+\[\$[\w]+\]\[\$[\w]+\] = chr\(ord\(\$/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_102 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = /_POST\[['\"]\d{10,}['\"]\]/
        $s5 = /<\?php[^>]{0,100}if[\s]*\(isset[^{]+\{[^\x02]{0,1500}\}[\s]*\?>/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_103 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "efine('SECURE_AUTH_SALT',"
        $s2 = "/** The name of the database for WordPress */"
        $s3 = "eval($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_104 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "24T677871Y716Bd7K4203d2G041Y7R2726Q179282N77Z661I6E4667J6"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_105 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "){echo \"200\"; exit;} if(isset($_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_106 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "$_=\"b"
        $s3 = "preg_replace(\"/^/e\",$_(\"ZXZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_107 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = /\$[\w]=[asert'\.]{6,};[\s]*\$[\w]=['\.eval]{4,};[\s]*@\$[\w]\(.\$[\w]\(.\$_POST/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_108 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "Array("
        $s3 = "]:@$_POST[$"
        $s4 = "l__"
        $s5 = /l__[\d\(]\(_[\w]+\([\d]+\)\)[\s]*\.[\s]*l__[\d\(]\(_[\w]+\([\d]+\)\)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_109 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "= '_POST';$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_110 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "2T46Ub71A79K7E92K0Q3dX204172G7261792Q827616E8M69A6X471T6S62"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_111 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"; create_function('', \""
        $s2 = "$cookey"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_113 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "@eval($_POST[admins]"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_114 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "PD9waHAgQGV2YWwoJF9QT1NUWy"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_115 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "2S4H79786d6D6E7W0203d204K17O2726T179282D7F726a6eJ72722S7T3Ld3e2D7R73"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_116 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\";eval("
        $s2 = "ICAgICRwcHJ0cyA9IHBhcnNlX3VybCgkdXJsKTsKICAgICAgICAgJHBfdXJsID0gImh0dHA6Ly8iLiRzcnZubS4kX1NFUlZFUlsi"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_117 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = /if[\s]*\(isset\(\$_POST\[.[\w].\]\)\)[\s]*\{[\s]*\$[\w][\s]*=[\s]*base64_decode\([^\)]+\.[^\)]+\)[^;]+;[\s]*@?\$[\w]\(\$_POST/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_118 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "(!extension_loaded(\"openssl\")"
        $s4 = "openssl_cipher_iv_length($"
        $s5 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_119 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "ZXJyb3JfcmVwb3J0aW5nKDApOwpzZXRfdGltZV9saW1pdCgwKTsKaWYgKCRfR0VUWydxJ109PScxJyl7ZWNobyAnMjAw"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_120 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = /function [\w]+[\s]*\(\$[\w]\)[\s]*\{[\s]*preg_replace_callback[\s]*\(.\|\|.[\s]*,[\s]*\$_POST\[.[\w].\][\s]*\([\s]*''[\s]*,[\s]*\$[\w]+->getMessage/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_121 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "};'.urldecode(gzinflate(urldecode($"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_122 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "('',"
        $s1 = /(\$[\w]+[\s]*=[\s]*'[^;]+'[\s]*\.[\s]*'[^;]+;[\s]*){3}\$[\w]+[\s]*=[\s]*@?\$[\w]+\('',[\s]*\$[\w]+\(\$[\w]+\('[^'\s]{1000}[^;]+;[\s]*\$[\w]+\(\);/
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_123 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "false){continue;}die('OK="
        $s4 = "@urlencode(@base64_encode(@var_export($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_124 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "@eval($_POST["
        $s3 = /<\?php[\s]{20,}@eval\(\$_POST\[[^\]]+\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_125 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "preg_replace(\"/./\\x65\",@$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_126 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "evals(@$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_127 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "$data['action']($data['args'],$data['args2']);"
        $s4 = "@unserialize(gzdecode(base64_decode($_POST[md5($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_128 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "foreach($_POST"
        $s4 = /<\?(php)?[\s]*foreach\(\$_POST as \$[\w]+[\s]*=>[\s]*\$[\w]+\)[\s]*\{[\s]*eval[\s]*\([\s]*base64_decode[\s]*\([\s]*\$[\w]+\)\);?[\s]*\}[\s]*(exit[^\n]+)?/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_129 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "aWYgKHN0cnBvcygkX1NFUlZFUlsnUkVRVUVTVF9VU"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_130 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "\"-;-\";"
        $s2 = /\"-;-\";[\s]*\$[\w]+[\s]*=[\s]*'[^']+';[\s]*\$[\w]+[\s]*=[\s]*(\$[\w]+\{[\d]+\}[\s]*\.[\s]*){5}/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_131 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "($_POST['e']));"
        $s5 = "='.png'){$"
        $s6 = "->getPath();}}catch(Exception$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_eval_POST_132 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "while($i<"
        $s3 = "$_POST[$p1]=$_POST[$p2];"
        $s4 = "if(isset($_GET[$p1]) || isset($_POST[$p1])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_133 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "wp_sum_check($debugger_binary_x86_x64)"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_134 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "__FILE__"
        $s2 = "str_replace('!@#$%',\"'\",urldecode("
        $s3 = "%3C%3F%70%68%70%20%0D%0A%2F%2A%0D%0A%0D%0A%4F"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_135 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "{echo '200';"
        $s4 = "register_shutdown_function($c('', $f($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_136 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = /<\?php[\s]*eval[\s]*\([\s]*base64_decode[\s]*\(\$_POST\[.[\w]+.\][\s]*\)[\s]*\)[\s]*;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_137 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "(@md5($_POST[\"key\"]) == HASH_KEY)"
        $s4 = "(isset($_POST[\"code\"]) && @_isAuth())"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_138 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "(strrev(\"/+./\"),"
        $s3 = "strrev(implode(\"\", array("
        $s4 = "strrev(\"\\x6b\" . \"\\x63\" . \"\\x61\" . \"\\x62\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_139 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "strrev(implode(\"\", array("
        $s3 = "(strrev(\"/+./\"), function ($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_140 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "@eval($_POST["
        $s3 = "copy('http"
        $s4 = "if(isset($_GET"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_141 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "(base64_decode("
        $s3 = "ZXZhbCgk"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_142 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "@eval($_POST["
        $s3 = /@pack\(\"H\*\",[\s]*\$[\w]+\);[\s]*\$_POST\[\$[\w]+\]=@pack\(\"H\*\",[\s]*\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_143 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "=str_replace('','',$_POST["
        $s4 = "eval(\"\\\"$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_144 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "('',"
        $s1 = "QHNlc3Npb25fc3RhcnQoKTtpZihpc3Nld"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_145 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "   +   "
        $s2 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*\"[^\"]+\";[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[.[\s]*[\w]+[\s]{3,}.[\s]{3,}\+[\s]{3,}[\d]+[\s]{3,}\+[^\}]+\$[\w]+[\s]*=[\s]*[\d]+;[\s]*\?>/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_146 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "exit;"
        $s3 = "@eval($"
        $s4 = "if(sizeof($_GET)<"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_147 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "eval(base64_decode(substr($_POST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_148 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "@mkdir($this->options['doc_root'].'/wp-content/uploads"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_149 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "__DIR__"
        $s3 = "GNU General Public License version 2 or later"
        $s4 = "// Set the platform root path as a constant if necessary."
        $s5 = "'PATH'"
        $s6 = /\/\/ [^\s]{10}/
        $s7 = /__DIR__[\s]*\)[\s]*;[\s]*\}[\s]*\/\/[^\}]+exit[\s]*;[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_149_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "__DIR__"
        $s3 = "GNU General Public License version 2 or later"
        $s4 = "// Set the platform root path as a constant if necessary."
        $s5 = "'PATH'"
        $s6 = /\/\/ [^\s]{10}/
        $s7 = "(!empty($_REQUEST))"
        $s8 = "TEMP END"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_eval_POST_150 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "\"\";eval($"
        $s3 = "].reset(get_defined_vars()["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_151 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "if(md5($_POST"
        $s3 = ")){$js($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_152 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "($_COOKIE[$"
        $s3 = "[] = substr($"
        $s4 = "strrev(substr("
        $s5 = ") % sizeof($"
        $s6 = "] . $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_153 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "eval($"
        $s4 = "= base64_decode($_POST["
        $s5 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*base64_decode\(\$_POST\[.[\w]+.\]\);[\s]*eval\(\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_154 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "return explode('::', $"
        $s4 = "]) ^ ord($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_155 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "@eval(\"$this->"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_156 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = /@eval[\s]*\(base64_decode\(substr\(\$_POST\[/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_157 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "__FILE__"
        $s2 = "fopen(dirname(__FILE__)"
        $s3 = "%3C%3F%70%68%70%20%0D%0A%2F%2A%0D%0A%57%6F%72"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_158 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "@eval($"
        $s2 = "<title>404 Page Not Found</title>"
        $s3 = "]) > 0 and isset($_POST[$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_159 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "mainerror\"];$mb64"
        $s3 = "eval($mb64($gg));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_159_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "mainerror\"];$mb64"
        $s3 = "die(mainerror());"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_160 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "$fun = create_function('',$_POST['a']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_161 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "use Magento\\Framework\\Autoload\\AutoloaderRegistry;"
        $s3 = "eval($_POST['"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_162 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "md5(\\\"$_SERVER[SERVER_NAME]\\\".__FILE__)"
        $s4 = ";if(@file_put_contents(${$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_163 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "IEBldmFsKCRfUE9TVFs"
        $s2 = "return @$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_164 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "@$_cmd=$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_166 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "function bypass(){"
        $s3 = "\".bypass().\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_167 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "return \"l(\\$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_168 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = ",$_POST,'color');"
        $s4 = "require_once($wp['footer']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_169 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "array(\"n;}$_POST[args];/*\"=>\"test\")"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_POST_170 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "$arr = array($_POST['pass'] => '|.*|e',);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_171 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "eval"
        $s4 = "(stripslashes($cmd"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_172 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "=@base64_decode('Y3JlYXRlX2Z1bmN0aW9u');"
        $s2 = "('', @base64_decode('aWYoaXNzZXQoJF9QT1NUW3Byb2R1Y3RfaWRdKSAmJiBtZDUoJF9QT1N"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_173 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "echo exec($_POST[\"c\"],$out); echo json_encode($out);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_POST_174 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "eval("
        $s4 = "'P' . 'O' . 'S' . 'T'"
        $s5 = "'b' . 'a' . 's' . 'e' . '6' . '4'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_POST_175 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "=@base64_decode('Y3JlYXRlX2Z1bmN0aW9u');"
        $s2 = "IGV2YWwoYmFzZTY0X2RlY29kZSg"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_176 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "=@base64_decode('Y3JlYXRlX2Z1bmN0aW9u');"
        $s2 = "ZDUoJF9QT1NUW3"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_177 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /\$[\w]+=[^;]+;\$[\w]+=\$[\w]+\[[\d]*\]\.[^@]+;if\(\@\$[\w]+\(\$[\w]+\)\)\{\$[\w]+[\s]*=[\s]*@\$[\w]+\([^\}]+\)\);@\$[\w]+\(\);\}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_POST_178 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "@str_replace('@set_magic_quotes_runtime(0);','',@base64_decode(@"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_POST_179 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo '"
        $s3 = "mkdir($shareFolder);"
        $s4 = "eval($decrypted_code);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_180 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = ");exit;}"
        $s4 = "])){@preg_replace("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_181 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "array_merge($_COOKIE, $_POST);"
        $s4 = "=> @phpversion(),"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_POST_182 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "chr(ord($"
        $s4 = "array_merge($_COOKIE, $_POST);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_preg_replace_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "preg_replace(\"/(.*)/e\","
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_preg_replace_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace(\"/(.*)/e\","
        $s2 = "preg_replace(\"/(.*)/e\", stripslashes(@$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_preg_replace_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "${$"
        $s2 = "])) preg_replace("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_preg_replace_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "preg_replace"
        $s2 = "esi\",\"\\x65\\x76\\x61\\x6C\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_preg_replace_004_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = ".*/e\",\"\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_preg_replace_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x75\\x6E\\x63\\x6F\\x6D\\x70\\x72\\x65\\x73\\x73\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28\\x69\\x6D\\x70\\x6C\\x6F\\x64\\x65\\x28\\x22\\x22"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval(stripslashes(\\$_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "; exit(); } if(isset($_REQUEST"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_001_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "*/base64_decode/*"
        $s3 = "*/eval/*"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_001_04 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "str_rot13('cert_ercynpr"
        $s4 = "str_rot13('cert_ercynpr')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_001_05 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval(stripslashes($_REQUEST["
        $s3 = /<\?[^\n]+eval/
        $s4 = /<\?[^>]+@?eval.stripslashes.\$_REQUEST[^;]+;[^\n]*\?>/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_001_06 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "*/stripslashes/*"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_001_07 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval(stripslashes($_REQUEST["
        $s3 = "if(isset($_REQUEST[\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_001_08 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval(stripslashes($_REQUEST["
        $s3 = "(isset($_REQUEST['asc']))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_001_09 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "str_rot13('cert_ercynpr"
        $s4 = "['pas']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "<%eval request"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_002_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval($_REQUEST["
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_002_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(@$_REQUEST["
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "']; eval($"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_003_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ");}if ($eval){eval($eval);}"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "case \"20\": echo \"Error 403\";exit;break;}}"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "domain"
        $s1 = "$maindomain = \"desoupline.com\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = ".@$_($_REQUEST["
        $s2 = "]) ($_=@$_REQUEST[q]).@$_($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval($a($_REQUEST[sam]));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "$post_var = \"req\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "\"]($_REQUEST[\"c\"]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_013 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "if (!empty($_REQUEST["
        $s2 = "('', @$"
        $s3 = "= strrev($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "$document->addCustomTag(eval($myvar));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_015 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "/e\", \"ev\".\"al('\".$_REQUEST"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval(stripslashes(@$_REQUEST"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "@ini_set('display_errors', NULL);"
        $s3 = "unlink(__FILE__);"
        $s4 = "@ini_set('log_errors',NULL);"
        $s5 = "html_entity_decode"
        $s6 = "array_map"
        $s7 = "if(empty($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_eval_REQUEST_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('y0zTyCwuTi3RUIkPcg0MdQ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$_REQUEST"
        $s2 = "isset($_REQUEST['php_code']))"
        $s3 = "eval($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_020 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "=${'_REQUEST'}"
        $s2 = "}!=${"
        $s3 = "(@${\""
        $s4 = "\"})?@${\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_021 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "@arsort($alphabet);"
        $s2 = "@$value($array_name($_REQUEST[\"array\"]));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_022 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_NONCONTINUAL"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "if(!isset($_REQUEST['gnu'])||!isset($_REQUEST"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_023 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "@eval(@stripslashes(@$_REQUEST["
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_025 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "strrev(\"noi\".\"tcnuf"
        $s2 = "$_REQUEST['sort"
        $s3 = "$_REQUEST['sort']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_025_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "strrev(\"noi\".\"tcnuf"
        $s2 = "$string ="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_025_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "strrev(\"noi\".\"tcnuf"
        $s2 = "$_REQUEST['sort"
        $s3 = "if(isset($_REQUEST['sort']))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_025_04 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "foreach"
        $s1 = ".="
        $s2 = "();"
        $s3 = /foreach[\s]*\([\s]*(\[|array\()[\d]+,/
        $s4 = /\.[\s]*['\"]c['\"][\s]*\./
        $s5 = /\.[\s]*['\"]f['\"][\s]*\./
        $s6 = /\.[\s]*['\"]t['\"][\s]*\./
        $s7 = /\$[\w]+[\s]*=[\s]*\"[^\"]{10,}\";[^{]+foreach[\s]*\([\s]*(\[|array\()[\d]+,[\s]*[\d]+[^\{]+\{[\s]*\$[\w]+[\s]*\.=[\s]*\$[\w]+\[\$[\w]\];[\s]*\}[^}]+foreach[\s]*\([\s]*(\[|array\()[\d]+[^}]+\}[^\>]+\$[\w]+[\s]*=[\s]*\$[\w]+\(['\"][^;]+\);[\s]*\$[\w]+\(\);[\s]*(exit[^;]*;[\s]*)?(\}[\s]*)?/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_025_05 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "foreach"
        $s1 = ".="
        $s2 = "();"
        $s3 = /foreach[\s]*\([\s]*(\[|array\()[\d]+,/
        $s4 = /\.[\s]*['\"]c['\"][\s]*\./
        $s5 = /\.[\s]*['\"]f['\"][\s]*\./
        $s6 = /\.[\s]*['\"]t['\"][\s]*\./
        $s7 = /\^[\s]*\$/
        $s8 = /<[\s]*strlen\(\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_eval_REQUEST_026 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "<?php eval(base64_decode('Ly"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "${\"_REQ"
        $s2 = "'//e'"
        $s3 = "*/if/*"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_030 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "&& md5($_REQUEST["
        $s3 = "eval(base64_decode($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_030_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "$_SERVER[\"REQUEST_URI\"])){echo\"1\";exit;}"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_031 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "$_REQUEST['coco'];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_033 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "exit;"
        $s4 = "'])){/*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "set_time_limit(0);error_reporting(NULL);"
        $s3 = "else{echo '<!DOCTYPE"
        $s4 = "])!=NULL){eval(base64_decode($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_036 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "if(isset($_REQUEST["
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "exit;"
        $s4 = "'])/*"
    condition:
	all of them
}

rule php_backdoor_eval_REQUEST_037 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "]); echo 'OK';"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "])){die(pi()*"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "$_=new Echoes;exit($_->_($Data,$Key,$md5));"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_041 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "<?php extract($_REQUEST) && @$"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_042 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "} else {echo base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_043 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = /\^['\"]/
        $s2 = /\$[\w]+[\s]*=[\s]*'[^']+'[\s]*\^[\s]*'[^']+';[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\('',/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_044 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "eval(str_rot13(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_045 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "]('$_',$_REQUEST['FILE'].'($_);'); $_FILE(stripslashes($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_046 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "$_REQUEST;"
        $s2 = /\$[\w]+[\s]*=[\s]*\$_REQUEST;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*if\(\$[\w]+\)[\s]*\{[\s]*\$[\w]+\(\$[\w]+\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_047 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "@array((string)stripslashes(@$_REQUEST["
        $s2 = "@array_diff_ukey(@array((string)@$_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "<?php error_reporting(0);"
        $s3 = "GIF89a"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_049 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "copy("
        $s3 = "eval(base64_decode"
        $s4 = "));exit;}(@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_050 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = /if[\s]*\(isset[\s]*\(\$_REQUEST\[.[\w]+.\]\)[\s]*&&[\s]*md5[\s]*\([\s]*\$_REQUEST\[.[\w]+.\]\)[\s]*==[\s]*.[\w]{20,}.[\s]*&&[\s]*isset[\s]*\([\s]*\$_REQUEST\[.[\w]+.\]\)\)[\s]*eval/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_051 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "if (!class_exists('ecode_slicer_du"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_052 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+[\s]*=[\s]*\"[^\"]{300,}\";[\s]*\$[\w]+[\s]*=[\s]*'[^']{50,}';[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]+[^;]+;[\s]*){5,}\$[\w]+[\s]*=[\s]*\$[\w]+\('',[\s]*\$[\w]+\([^,]+,[\s]*\$[\w]+\(\$[\w]+[^;]+\);[\s]*\$[\w]+\(\$[\w]+,[^;]+\);/
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_053 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "exit;"
        $s4 = "substr(strrev(md5(strrev(sha1($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_054 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "call_user_func(function($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_055 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "if(strcmp(md5("
        $s5 = "elseif(@file_put_contents($"
        $s6 = "$output=$res(substr($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_eval_REQUEST_056 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "CjaVWqXOsmAQlfK8q+QiJl5iVhSipDyLh8YXyvpIolv7v"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_057 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "foreach"
        $s1 = "]=implode(\"\",array_reverse($"
        $s2 = "<?php @'$"
        $s3 = ";@eval($_REQUEST[$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_058 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ")));');"
        $s1 = "dZBfT8IwFMWf2afoA0kHMfwZMCBIhOBieBkyMJoY0nTbZa3p2qUtJkT97m7zQTT6dvM795ze0+ubghXO"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "$b($_REQUEST['c'], $a($_REQUEST['d']));"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_061 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "error_reporting(0); eval($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_062 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "\";error_reporting(0);$"
        $s7 = "]}=@mail(${$"
        $s8 = "]},\"w\");}else{};}if(isset($_POST[\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_eval_REQUEST_063 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "error_reporting(0); foreach($_REQUEST"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_064 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rror_"
        $s3 = ">'.$_SESSION['server']."
        $s4 = "''.base64_decode($a).'';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_065 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval(stripslashes($_REQUEST["
        $s3 = /if\(isset\(\$_REQUEST\[.[\w]+.\]\)\)eval\(stripslashes\(\$_REQUEST\[.[\w]+.\]\)\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_066 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "exit(eval($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_067 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "pTv7c5s6s/8KdTkFzi"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_068 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\Magento\\Framework\\Url\\DecoderInterface $urlDecoder"
        $s2 = "= \"base\". \"64_dec\".\"ode\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_069 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "elseif(@file_put_contents($header_two, @file_get_contents(__FILE__)))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_070 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "foreach($_REQUEST"
        $s3 = "eval($i);"
        $s4 = /foreach\(\$_REQUEST[\s]*as[\s]*\$i[\s]*\)[\s]*eval\([\s]*\$i[\s]*\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "if(strcmp(md5("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_REQUEST_072 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "<?php /*"
        $s4 = "\";eval/*"
        $s5 = /\/\*[^\n]+\*\/\.\"[^\n]+eval\/\*[^\n]+;\/\*[^\n]+\*\/[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_REQUEST_073 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "write_check_class.txt',$file_name.':::"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_074 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "${\"_REQUEST\"}"
        $s2 = "@!(${\"ip\"}["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_076 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "array_merge($_REQUEST, $_COOKIE, $_SERVER); if ($i = isset($i["
        $s3 = "array( 'decode' => 'base'.'64',"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_077 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "eval($str.$key.$str);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_078 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "if(!empty($_REQUEST[\"args\"])){@eval(base64_decode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_079 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "extract($_REQUEST)&&@$internal(stripslashes"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_eval_REQUEST_080 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "ord"
        $s2 = "//"
        $s3 = "implode('', array_map("
        $s4 = "(preg_split(\"//\","
        $s5 = "preg_match_all(\"([A-z0-9+\\\\/]{1,4})\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_eval_REQUEST_081 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "if(@isset($_REQUEST["
        $s3 = "])){@eval($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_REQUEST_082 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = ".@$_($_REQUEST["
        $s2 = "if(@$_COOKIE["
        $s3 = "]).@$_($_REQUEST["
        $s4 = "]) ($_=@$_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_REQUEST_gen_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "{system($_GET[\""
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_gen_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".chr("
        $s1 = "if(!isset($_REQUEST[chr("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_gen_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = "php error_reporting(0);eval(\"if(isset(\\$_REQUEST["
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_gen_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "if(isset($_POST[\"cod\\x"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_REQUEST_gen_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval((ZWNobyc8QEBAPic7c3lzdGVtKCJj"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_server_variable_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "])){@eval(base64_decode($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_shifr_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($c);function shifr($word"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_USER_AGENT_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "eval(str_replace('Mozilla"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_eval_USER_AGENT_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ")@eval($row[1]);echo \"|"
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_xor_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "substr(pack('H*', sha1("
    condition:
        $s0 and $s1
}

rule php_backdoor_eval_xor_001_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "eval"
        $s3 = "eval (s(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_xor_002 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "('',"
        $s2 = "^"
        $s3 = /<\?php[\s]*\$[\w]+='[^']+'[\s]*\^[\s]*'[^']+';[\s]*\$[\w]+=\$[\w]+\('',/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_eval_xor_003 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "|"
        $s2 = ".'"
        $s3 = /\$[\w]+[\s]*=[\s]*\$[\w]+\([\s]*[\w]+[\s]*,[\s]*\$[\w]+\);[\s]*\$[\w]+\(\);/
        $s4 = /(\$[\w]+)[\s]*=[\s]*((\"[^\"]+\")|('[^']+'))[\s]*\.[\s]*[\w]+[\s]*\.[\s]*((\"[^\"]+\")|('[^']+'))[\s]*\.[\s]*[\w]+[\s]*\.[\s]*((\"[^\"]+\")|('[^']+'))[\s]*\.[\s]*[\w]+[\s]*\./
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_eval_xor_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "preg_replace"
        $s2 = "*/preg_replace/*"
        $s3 = "*/rawurldecode/*"
        $s4 = "*/, '', __FILE__/*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_evilcmd_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "function_exists"
        $s2 = "$evil=create_function("
        $s3 = "call_user_func($evil,$_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_exec_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "exec($_"
    condition:
        $s0 and $s1
}

rule php_backdoor_exec_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "function _exec($c){$r='';if(!empty($c)){if(@function_exists('exec"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_exec_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec('wget -r -k -l 1 --tries=1 -p -E -e robots=off -nc -U opera -b -i http"
    condition:
        $s0 and $s1
}

rule php_backdoor_exec_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "404 Not Found');exit;}exec($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_exec_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = ");system("
        $s3 = "=array();exec($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_exec_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "if(!empty($res)){"
        $s6 = "if(isset($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_exec_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "shell_exec($_POST['cmd'].\" 2>&1\"));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_exec_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "md5($_GET["
        $s3 = "exec('curl"
        $s4 = "((isset($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_exec_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "echo exec($_POST['cmd'], $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_exec_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "unlink($file);"
        $s2 = "exec($"
        $s3 = ".htaccess -exec rm -f"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_exec_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "@exec(\"wget $"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_exec_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "if(!$_POST['phpexec']){echo("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_explode_chr_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "explode(chr((435-315)),substr($"
        $s2 = ",(30913-24987),(166-132)));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_extract_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$_REQUEST"
        $s2 = "@extract($_REQ"
        $s3 = "if(@md5($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_extract_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$_REQUEST"
        $s2 = "@extract($_REQ"
        $s3 = "@extract($_REQUEST);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_extract_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "extract"
        $s4 = "$d('', $f("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_extract_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if($_SERVER[HTTP_ACCEPT_CHARSET]=="
        $s2 = "extract($_SERVER);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_extract_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$zip->extractTo($"
        $s2 = "0777);"
        $s3 = "\".md5(time()).md5(time());"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_extract_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "extract"
        $s4 = "echo '<form method=\"POST\"><textarea name="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_extract_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "@extract(array(c=>$b())); function fun2(){$b=$_POST"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_extract_007 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = /@extract[\s]*\(\$_REQUEST\);[\s]*@die[\s]*\(\$[\w]+\(\$[\w]+\)\);/
    condition:
        $s0 and $s1
}

rule php_backdoor_extract_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "extract($_REQUEST);if(md5($"
        $s2 = ");include_once $"
        $s3 = "){die();}$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_extract_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "echo"
        $s3 = "extract($_REQUEST);"
        $s4 = "echo $f1($v1, $f2($v2));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_fake_IonCube_001 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "IonCube_loader"
        $s3 = /<\?php[\s]\/\/[\w\s]{1,10}[\s]*if[\s]*\(!extension_loaded\(.IonCube/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "Plugin Name: WordPress Researcher"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fake_plugin_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "research_plugin"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fake_plugin_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "function bns_add_ajax(){eval($_REQUEST[\"data\"]);}"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fake_plugin_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "eval($options['base']);"
        $s3 = "$options['base'] = wp_base($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "add_action('plugins_loaded"
        $s2 = "$wp_filesystem->delete(ABSPATH.'wp-content/plugins/'.$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fake_plugin_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "if(!file_exists($f)||filesize($f)<1000){"
        $s2 = "file_put_contents($f,file_get_contents('http:"
        $s3 = ".txt'));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "var myRootNode = document.getElementById(\"plugin\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "CURLOPT_URL, $_GET["
        $s5 = "if(myRootNode[prop].innerText==\"Akismet Protection\")"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "if($_GET["
        $s3 = "foreach ($myplugins as $key"
        $s4 = "('<?php  /*'.md5(time()).'*/ ?>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = ".md5(time()).md5(time())."
        $s5 = "return '<?php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "if(!file_exists($f)||filesize($f)<1000){"
        $s2 = "file_put_contents($"
        $s3 = "define('ABSPATH', rtrim($_SERVER['DOCUMENT_ROOT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "function_exists"
        $s2 = "wp_create_user("
        $s3 = "$user_name . rand(1,10000) . rand(1,10000)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "$all_plugins = get_plugins();"
        $s3 = "foreach ($all_plugins as $key => $value)"
        $s4 = "_mu_hide_plugin"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = ",\"p=\".urlencode(base64_encode($d)));function http($url,$post){$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fake_plugin_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "if(!file_exists($f)||filesize($f)<1000){"
        $s2 = "file_put_contents($"
        $s3 = "add_action( 'init', function()"
        $s4 = "base64_decode(\"PD9wa"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "function file_get_contents_helload($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_fake_plugin_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "if($_GET["
        $s3 = "foreach ($myplugins as $key"
        $s4 = "/*  hello ' . uniqid().' |||| '."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "if($_POST[\"spread\"] == \"true\") {"
        $s6 = "$file_url = $domain . str_replace($homedir, \"\", $newfile);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_fake_plugin_017_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "$user_search->query_where);"
        $s5 = "var x = document.getElementById(\"user_pass\").value;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "base64_decode(str_rot13(strrev("
        $s6 = "u1FMfq2oiqJYhI2YibQp0EUn"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_fake_plugin_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "\\x61d\\x6d\\x69\\x6e_\\x6d\\x65"
        $s3 = "echo plugins_url("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "data:text/javascript;base64"
        $s4 = "$wp_head_file = str_replace(\"function"
        $s5 = "function shellaccess"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = ". ' */?>' . $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_fake_plugin_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "require_once( dirname( WPBASESEO_FILE ) . '/wp-seo-main.php' );"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_023_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "'] = wpseotools_base($_COOKIE['"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_025 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "array('wp-pwd.php', 'wp-login1.php', 'wp-config-sample.php', 'wp-content/themes/master.cache.php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_026 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "CURL"
        $s5 = "// Silence is golden. '.rand("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_026_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "*/@$"
        $s3 = "'.(20608/644*2)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$rootpath=implode(DIRECTORY_SEPARATOR,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "_plugin = new fixer"
        $s5 = "$self_file = str_replace(plugin_dir_path(__FILE__), '', __FILE__);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "$isBot = strpos(strtolower($user_agent), 'bot');"
        $s5 = "$dcres = json_decode(base64_decode(fread($datafile,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_029_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "$dcres = json_decode(base64_decode(fread($datafile,"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fake_plugin_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "(!isset($_COOKIE[base64_decode("
        $s4 = "86400, base64_decode( 'Lw=="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "unset($wp_list_table->items[$key])"
        $s3 = "\"\\x6e\\x6f\") == \"\\x79\\145\\163\") { global $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_033 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "base64_decode("
        $s3 = "gzuncompress(base64_decode("
        $s4 = "foreach (glob($dir."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_034 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "]=Array(base64_decode("
        $s4 = "=$wpdb->get_results($wpdb->prepare($"
        $s5 = "SELECT * FROM $wpdb->_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "unset($wp_list_table->items[$key])"
        $s3 = "secbd_initialized"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_fake_plugin_036 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "foreach ($myplugins"
        $s4 = "unset($wp_list_table->items[$key]);"
        $s5 = "echo base64_decode(\"P"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_plugin_037 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "$maskNames = array("
        $s4 = "$fileUrlParts = explode($explodedDir, self::formatUrl($newFilePath));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fake_plugin_037_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "fwrite("
        $s5 = "$rand = new ClassRandomizer($str,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fake_wpwhitesecurity_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "if($line3[0] == 'wpupdatestream')"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fakeGIF_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "sprintf($"
        $s2 = "<?php sprintf($_POST[pass]) ?>"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_fakeGIF_002 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "eval(gz"
        $s5 = /GIF89[^<]+<\?/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_fakeGIF_002_01 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "gzinflate(base64_decode("
        $s2 = "GIF89"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fakeGIF_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "@eval(gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fakeGIF_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "eval(stripslashes($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fakeGIF_004_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "eval(stripslashes(gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fakeGIF_004_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "))); die; }else{ eval(gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fakeGIF_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "eval(stripslashes($_POST["
        $s2 = "GIF89"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fakeGIF_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "$str=array($send, $IWP); foreach ($str as $send)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fakeGIF_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "md5 Password"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fakeGIF_007_01 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "$sh_id = "
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fakeGIF_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GIF89"
        $s4 = "eval(gzinflate(str_rot13(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_fakeGIF_009 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GIF8"
        $s1 = /\AGIF[^\n]+\s*<.[Pp][Hh][Pp]/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_fakeJPG_001 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = /\x10JFIF/
        $w0 = "<?php die('Execution denied!');"
        $s2 = /<\?[pP][hH][pP]/
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule php_backdoor_fakewpbackup_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "uname"
        $s4 = "class WP_Backup"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_fallagateam_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo '<b><br>uname:'.php_uname().'<br></b>fallagateam"
    condition:
        $s0 and $s1
}

rule php_backdoor_fatalshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = ").' - FaTaL Shell v"
    condition:
        $s0 and $s1
}

rule php_backdoor_FathurFreakz_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "<?php /*/ Encode By FathurFreakz /*/ @error_reporting(0)"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "echo file_get_contents(base64_decod"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_get_contents_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "=@create_function('',@file_get_co"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "create_function(\"\", file_get_co"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\146\\x69l\\x65\\x5fg\\145\\x74\\x5f\\x63"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_004_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "_\\x67\\145t\\137\\x63"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents($"
        $w0 = "SVC_CRESTORE"
        $s2 = "@file_get_contents($_"
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule php_backdoor_file_get_contents_006 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = ", file_get_contents($_GET"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_007 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents(str_rot13("
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(@"
        $s2 = "eval(@file_get_contents(@$_GET"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_get_contents_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "fwrite($new_v_file,\"\\$xred=base64_decode('$new_url');\\n\"); }"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_009_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if ($else_dot==1) {$new_v_f=fopen(\"$f_creat_name\",\"w+\");}"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$source = file_get_contents($dn);"
        $s4 = "$url = htmlspecialchars(trim($_GET['url']));"
        $s5 = "$dn=($url).($patch);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_010_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "background: url('http://i41.tinypic.com/ibkmd5.png') repeat scroll 0 0 #"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = ".php', 'w') ) {"
        $s6 = "echo '2';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_013 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "(isset($_GET['do']))"
        $s4 = "if (strlen($file_contents) < 10 && function_exists('curl_init"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_014 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "{echo \"http://\".$_SERVER['HTTP_HOST'].\"/"
        $s4 = /file_put_contents\(\$path,(file_get_contents|get_url_con)\(\"http/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_REQUEST[\"content\"];} }if( $extention == \"php\"){ if (isset($_REQUEST[\"overwrite\"])){file_put_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "oogle')!== false||strpos($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_017 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "=file_get_contents($lru.$i);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_get_contents_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "($qo8("
        $s3 = "Q2k4cUNpQXFJRkpGVmtsVFNVOU9Pa"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('s7ezsS/IKODlSi1LzNFIy8xJj"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_020 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('DcxBCoAgEAXQveA50o3uK/IoIjLqgIySn+j49Q7wwnWG2aZW9KRuCneKlRDzEJBgma0Bc/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_021 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('lZzNriQ7EYT3SLzDaHQXsLk6VXbaXbriT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_022 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('TVfHDsRIbv2XuaxtGV"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_023 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "$auth_pass"
        $s5 = /\$auth_pass\s*=\s*.\w+.\s*;\s*\$\w+\s*=\s*file_get_contents\([^\)]+\)\s*;\s*eval\(\$\w+\)\s*;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_024 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "echo \"error"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_025 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(@"
        $s2 = "@eval(@file_get_contents("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_get_contents_026 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "php\",file_get_contents(\"http"
        $s4 = ",file_get_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_026_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "php\",file_get_contents(\"http"
        $s4 = "if (file_put_contents("
        $s5 = "unlink(__FILE__);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_027 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval(file_get_contents(\"http://pastebin"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_028 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = ".txt\";"
        $s5 = "header(\"Content-type:"
        $s6 = "@file_get_contents($"
        $s7 = /txt\";[\s]*\$[\w]+[\s]*=[\s]*@file_get_contents[^;]+;[\s]*eval/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_file_get_contents_029 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZWNobyBmaWxlX2dldF9jb250ZW50cygiaHR0c"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_030 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "file_put_contents(@$_SERVER["
    condition:
        $s0 and $s1
}

rule php_backdoor_file_get_contents_031 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "base64_decode($_REQUEST["
        $s5 = "echo '<pre>'.file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_032 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "QHByZWdfcmVwbGFjZSgiL1twYWdlZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_033 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "x_iso"
        $s4 = "file_put_contents($sname,$result);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_034 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "find_secret_dir($root)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_036 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "if(wp_admin_bar_dl(\"http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_037 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = /header\([^$]+\$[\w]+=base64_decode\([^;]+\);\$[\w]+[\s]*=[\s]*\@file_get_contents\(\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_038 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "$php); eval($php); } function curl("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_039 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "@eval(file_get_contents(\"http"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_040 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = /header\(.Content-type[^;]+;[\s]*\$[\w]+[\s]*=[\s]*isset\(\$_GET\[.[\w]+.\]\)\?\$_GET\[.[\w]+.\]:[^\}]+\}[\s]*else[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*isset\(\$_GET\[[^@]+@[\s]*\$data[\s]*=[\s]*file_get_contents\(\$[\w]+\);[^\}]+exit\(\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_041 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "if (function_exists('fsockopen')) {"
        $s7 = "base64_decode(base64_decode(\"YUhSMGNEb3ZMM"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_file_get_contents_042 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "var_dump($_REQUEST["
        $s2 = "\\x66\\x69\\x6c\\x65\\x5f\\x67\\x65\\x74\\x5f\\x63\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x73"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_get_contents_043 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "Q0Kew0KZGVmaW5lKCduZXdvODNmMzJmM3Nmc3BvamFwOTItMDMyamc0MycsIDE"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_044 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "unlink("
        $s5 = "pkill -9 -f stealth"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_045 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "/ID3/module.dat"
        $s4 = "FILE_APPEND"
        $s5 = "curl_exec"
        $s6 = "<= 77700 || filesize"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_046 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "eval(str_rot13(gzinflate(str_rot13(base64_decode(($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "file_get_contents(__DIR__"
        $s3 = "base64_decode(zlib_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_049 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "fwrite(fopen("
        $s6 = "w+),file_get_contents(http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_050 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "$suffixes[floor($base)];}function max_file_upload_in_bytes()"
        $s5 = "exec($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_051 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "header("
        $s5 = /\$[\w]+[\s]*=[\s]*(file_get_contents\()?.http[^;]+\)?;[\s]*\$[\w]+[\s]*=[^\|]explode\([^\(]+header\(.Location:[^;]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "{@chmod($"
        $s5 = "))!=hash('sha1',file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "pastebin"
        $s7 = "w') or die("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_file_get_contents_055 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "($_SERVER['REQUEST_URI'] == '/')"
        $s5 = "&& (strpos($_SERVER['HTTP_USER_AGENT"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_056 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "function _doEvil($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_057 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "iconv("
        $s5 = /file_get_contents\(\$[\w]+\([^;]+\)\);[\s]*\$[\w]+[\s]*=[\s]*iconv\(/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_058 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "@unserialize(@file_get_contents("
        $s4 = "preg_replace('/[^0-9A-Za-z]/', '', $_REQUEST['id']); if (!empty($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google|bing|yandex"
        $s6 = ".= substr(pack('H"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_060 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "is_file("
        $s2 = "f'.'i'.'l'.'e'.'_'.'p'.'u'.'t'.'_'.'c'.'o"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_get_contents_061 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "mb_convert_encoding($"
        $s4 = "file_get_contents_utf8(\"\\x68\\x74\\x74\\x70"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_062 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "];eval($"
        $s2 = "JGxpSFlrbj0iQk9Md0t0dVdZeHNqcnBnSGxKVVB"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_063 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "print("
        $s4 = /file_put_contents\(.{3,},file_get_contents\(.https?:..[\w]+\.[^;]+\)\);[\s]*print\([^(]+unlink\(/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_064 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "base64_decode($_REQUEST["
        $s5 = "@(array)unserialize($this->getImageDecodedText(file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_065 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "CURLOPT_RETURNTRANSFER"
        $s2 = "unlink(md5($"
        $s3 = "file_put_contents(md5($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_066 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "is_writable ($"
        $s5 = "var_dump(filesize($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_067 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "str_replace(\"/wp-includes\", \"\", dirname(__FILE__));"
        $s4 = "copy(dirname(__FILE__) . \"/htaccess"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_068 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "<title>Search Script</title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_069 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "str_replace(\"/wp-includes\", \"\", dirname(__FILE__));"
        $s4 = "substr(md5(microtime()), -$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_get_contents_070 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "pastebin"
        $s7 = "$doit = fopen("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_file_get_contents_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "file_put_contents(\"./wp-config.php\", $ok);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_073 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "DVZFrsQIkj1OV8kLM2nUCzMze"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_075 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "file_put_contents($"
        $s4 = "strpos($file->getFilename(),'.js') == true)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_076 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "@wp_remote_get($url, array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_077 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]"
        $s5 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_077_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]"
        $s5 = "session_start();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_077_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]"
        $s5 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_077_04 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]"
        $s5 = "set_time_limit(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_077_05 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]"
        $s5 = "@ini_set("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_077_06 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "${chr(95).chr(71).chr(69).chr(84)}[chr(65).chr(82).chr(82).chr(65).chr(89)]"
        $s5 = "header('Content-Type: text/html; charset=utf-8');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_078 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "=\"?>\".file_get_contents"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_079 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "aWYobWQ1KCRfUE9T"
        $s2 = "ZXZhbChiYXNlNjRfZGVjb2RlKCRfUE9TVF"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_get_contents_081 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "fwrite(fopen("
        $s6 = "IyBCRUdJTgo8SWZNb2R1bGUgbW9kX3Jld3JpdGUuYz4"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_082 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "if(stristr(@file_get_contents($"
        $s6 = ");define('BASE_PATH',str_ireplace($_SERVER[$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_083 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval/*"
        $s2 = "$g($b"
        $s3 = "/**/eval/**/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_get_contents_084 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "$dat = @file_get_contents($url);"
        $s3 = "$dat = super_exec(\"curl $url\");"
        $s4 = "$url = BACK_HOST . \"/\" . $rnd"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_085 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "if(isset($_GET["
        $s5 = "$_GET;$_[1]($_[2]);exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_087 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents("
        $s4 = ",file_get_contents(base64_decode(\"aHR0cDovL2"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_088 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "sleep(is_numeric($argv["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_089 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "@file_put_contents($infile,file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_090 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "if(md5($"
        $s5 = "@chmod($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_091 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "add_action("
        $s6 = "false, stream_context_create($"
        $s7 = "$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_file_get_contents_092 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "<form"
        $s5 = "(file_exists(\"./\".$_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_get_contents_093 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "0444);"
        $s5 = "@chmod("
        $s6 = "= @file_get_contents($"
        $s7 = "if (md5_file($"
        $s8 = ") == md5_file($"
        $s9 = "= filemtime($"
        $s10 = ".png';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9 and $s10
}

rule php_backdoor_file_get_contents_094 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "LUjHDuw4Dvyawby9OQfMydlh52"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_get_contents_095 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "unlink($"
        $s3 = "));require($"
        $s4 = "sys_get_temp_dir();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_get_contents_096 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "aWxlX2dldF9jb250ZW50cygkd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_put_contents_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "base64_decode($_REQUEST"
        $s4 = "file_put_contents("
        $s5 = "'.base64_decode($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "; file_put_contents($"
        $s4 = "); unlink($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "<?php print"
        $s2 = ";if(isset($_GET[1])){$_=$_GET;$_[1]($_[2]);exit;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_put_contents_002_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "<?php print"
        $s2 = ", '<?php print"
        $s3 = "if(isset($_GET[1])){$_=$_GET;$_[1]($_[2]);exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_put_contents_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$argv["
        $s4 = "echo exec('crontab"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@extract ($_REQUEST);"
        $s4 = "urldecode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_file_put_contents_006 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "file_put_contents($_GET["
        $s5 = /file_get_contents\(\$[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*base64_decode\(\$[\w]+\);[\s]*file_put_contents\(\$_GET\[.[\w]+.\],[\s]*\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = "&& md5($_REQUEST["
        $s5 = ");die();}else{@eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "system("
        $s3 = "file_put_contents("
        $s4 = "CURLOPT_URL, \"http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = "chr(112).chr(97).chr(103).chr(101).chr(110).chr(111).chr(116).chr(102).chr(111).chr(117).chr(117).chr(117).chr(110).chr(100)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = ".= fread($"
        $s3 = "foreach(array(\"a\", \"b\", \"c\") as $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_put_contents_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "fputs($f,$_REQUEST['1f2e07a681480"
    condition:
        $s0 and $s1
}

rule php_backdoor_file_put_contents_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "!is_dir("
        $s4 = "PD9waHAgZmlsZV9wdXRfY29udGVudHM"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ", 0777, true);"
        $s4 = "fopen("
        $s5 = "exec('rm"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_015 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "wp-blog-header"
        $s2 = "isset(${\"\\x5fG\\x45T\"}[\"\\x57\\x6f\\x72\\x64\\x50\\x72\\x65\\x73\\x73\"])?$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_put_contents_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "(isset($_POST["
        $s4 = "file_put_contents($_POST['wp_filename'], $_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "base64_decode($_REQUEST["
        $s5 = "sys_get_temp_dir().'/session_'.rand("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "__DIR__ ."
        $s4 = "echo json_encode(["
        $s5 = "status' => 'OK"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "unlink($file);"
        $s2 = "base64_decode(rawurldecode((urlencode(urldecode($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_file_put_contents_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "@opendir(dirname(__FILE__));"
        $s5 = "touch(dirname(__FILE__).$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_024 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ", 0777, true);"
        $s4 = "$_GET) && md5($_GET['key']) =="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_025 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "unlink("
        $s5 = "file_put_contents($pluginPath."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_026 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "unlink("
        $s5 = "php://input"
        $s6 = "return call_user_func_array(\"pack\", array_merge(array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_file_put_contents_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "file_put_contents($"
        $s4 = "JiBtZDUoJF9SRVFVRVNUWy"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "tempnam(sys_get_temp_dir(),"
        $s4 = "require_once \"php\".\":"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents("
        $s4 = "\"{$compressprotocol}://{$up_localpath}/{$unmute_payload}\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "file_put_contents($"
        $s4 = "&& @trim($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_file_put_contents_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "unlink("
        $s2 = "@include"
        $s3 = "exit();"
        $s4 = "array();"
        $s5 = "]($_COOKIE, $_POST);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_file_put_contents_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$_REQUEST"
        $s2 = "=$_REQUEST; if(isset($"
        $s3 = ");}die();}echo md5("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_file_put_contents_033 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "isset($_REQUEST["
        $s4 = "print(file_put_contents($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "$admin['pass']  =  '"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_001_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "$pass = \"./pass.txt\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_001_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = "$pass = $_GET['pass'];"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_001_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$____=base64_decode('eJ"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_001_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "case 'create_symlink':"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_001_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "gzuncompress(base64_decode(\"eJzlvX1XGzcTOPo3PaffQWz9"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_001_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$wpplugin_charset = 'Windows-1251"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_001_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = ";preg_replace(\"/.*/\".'e',chr(101).chr(118).chr(97).chr(108).chr(40).chr(103)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_001_015 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode(\"CiRhd"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_001_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "gzuncompress(base64_decode('eF5MmseutFyWpud9FaW/S8pWUd0QEDi1eoD33qOUUtjAe3"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_002_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "$default_action=\"FilesMan\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_002_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "buffer.='8VsdF9hY3Rpb24gPSAnRmlsZ"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_002_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "$default_action = base64_decode('RmlsZXNNYW4=');"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_002_07 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "cxh}i?AE&wyMFq(D5ZJLgTR.2vOd1GWprt4,Xm/z~3I_K`P!860[a"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_002_08 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".$"
        $s1 = "=\"\\147\\137\\162\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "\"<!-- g('FilesMan','c:/') --!>\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$allsites_home.\"</homepath><addiction>\".$addiction_dir.\"</addiction></data>\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "eval(xxtea_decrypt(base64_decode($string"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(\"return eval"
        $s2 = "eval(\"return eval(\\\"$ed__k\\\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "('ZXZhbCgiXHg2NVx4NzZceDYxXHg2Q1x4MjhceDY3XHg3QVx4Nj"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "gzuncompress(base64_decode($techgaun)));?>"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "echo 'walex';"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$shellname.'\\';$myurl="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "REQUEST['lel1'](\"{$_REQUEST['lel2"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "ini_set('log_errors',0); ini_set('max_execution_time',0);if(isset($_GET[gotop"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "CiRhdXRoX3Bhc3Mg"
        $s2 = "CiRhdXRoX3Bhc3Mg"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_015_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "CiRhdXRoX3Bhc3Mg"
        $s2 = "php'; $filedata = base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(\"return eval(\\\"$"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "preg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28"
        $s3 = "$bs=\"esM\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "preg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28"
        $s3 = "Error_Reporting(0); $xJdU8NfauOq=\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "\"   .  \"\\x3b\");exit;"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "<?php $"
        $s2 = "\"\\x3b\");exit;"
        $s3 = "eNpNnFev'  . '69x6Xu/9"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "extract(array(\"default_action\" => 'FilesMan'"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_025 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "function decode($"
        $s2 = "$code = base64_decode(\""
        $s3 = "$code = decode($code);"
        $s4 = "eval($code);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_026 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\"\\x62\\x61\\x73\\x65\\x36\\x34\\x5"
        $s2 = "eval($_b($newphrase));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "wOPzyxO\";"
        $s3 = "eval(base64_decode(gzuncompress(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = ".'538VZ9L/Vb3NWPbJXvyVJltBYP+XF9mUF3/9+19i3KD8ZkfCJyRBVz6r6vO6mSaJ'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "FOPO - Free Online PHP Obfuscator"
        $s2 = "Checksum: 34d3990d882fde91e559cca6a72d559814be9d2a"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_029_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "FOPO - Free Online PHP Obfuscator"
        $s2 = "Checksum: ac062a934f16e2a43f8cb2c33b59a8c5f47370ba"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_029_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "$auth_pass"
        $s4 = "eval(gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_029_04 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "$imgData = @$"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_029_05 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "edoced_46esab"
        $s1 = "'noitcnuf_etaerc';"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "thawte.com-"
        $s3 = "$track_id.$captureNote"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$fn=create_function('',(\"};\".strrev(urldecode(str_replace(\".\",\"%\",\".3B.29.22"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "=\"\\x70\\x72\".chr(101).chr(103)"
        $s2 = "if(isset($_GET['pwd'])) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_033 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "$auth_pass"
        $s3 = "eval(\"\\x65\\x76\\x61\\x6C"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_034 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "(preg_match(\"#/\\*\\*(.*)\\*\\*/#se\""
        $s2 = " file(__FILE__)),$match)?($match[1]):\"\").\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array(97,115,115,101,114,116)"
        $s2 = "canonical_parse($enc"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_036 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "array('bbbpubghostbbb','bbbhtaghostbbb','bbbsghostbbb','bbbdotghostbbb');"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_037 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "File'.'sMan'; ## def function"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_038 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(gzuncompress(\""
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_038_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(gzuncompress('"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "{header('HTTP/1.0 404 Not Found');exit;}"
        $s3 = "$default_action = 'F"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_041 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "= Array('"
        $s2 = "'=>'"
        $s3 = "= '';"
        $s4 = "for($i=0; $i < strlen($"
        $s5 = ".= isset($"
        $s6 = "return base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_filesman_042 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "=fopen(__FILE__,'r');fseek($"
        $s3 = "eval(bzdecompress($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_043 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = ")));@eval($eval);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_044 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "@error_reporting(0);"
        $s3 = "$code=@urldecode($code);$code=@strrev($code);@eval($code);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_045 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "($OUT));return;"
        $s3 = ";$OUT=alfa($OUT);eval($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_046 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "\".\""
        $s3 = "@$"
        $s4 = "(\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x24\\x76\\x29);\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_047 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "CZILC2IpKXppcJIikoOiforpwuShFMa0fbkVwociduYlKXp9tmklfuaZdJELcoy0CTShgWplGol0KXP7VI`wNfrBfoguULSf"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "= implode(\"\", $"
        $s5 = "= array('"
        $s6 = "= false;$"
        $s7 = "= true;$"
        $s8 = "= \"\";$"
        $s9 = "= \"gzuncompress\";"
        $s10 = "= \"base64_decode\";"
        $s11 = "= \"str_rot13\";"
        $s12 = "))));"
        $s13 = ";eval("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9 and $s10 and $s11 and $s12 and $s13
}

rule php_backdoor_filesman_049 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('5b39dxq3EjD8c+"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_050 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "@error_reporting(0);"
        $s4 = "@set_time_limit(0);"
        $s5 = "eval(gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_051 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "QAIAPD9waHAgABEkY29sb3IgPSAAACIjZGY1IjsgICRkZWZhdWwAgHRf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = ".\"<\".\"?\";"
        $s3 = "(\"QAAAPD"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_052_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = ".\"<\".\"?\";"
        $s3 = "BACgZGl2J8Fib2R5AIFodG0AAGw+\"));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_053 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\";eval("
        $s2 = "= range(\""
        $s3 = "<< 8) + ord("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "<?php $"
        $s2 = "\\x7a\\151\";exit;"
        $s3 = "8WIasekXis7kuVk=\";$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_055 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$part2='MVViR2xaVkdoc1RucFZNbGxxVVROYWFrRnBUM2R2YTFreU9"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_056 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "$auth_pass"
        $s3 = "GR5yYXp3YH17ejRne3h9cGdgdWBxPDB5dX9xYWQ9NG8Z"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_057 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "@unlink("
        $s4 = "echo eval(base64_decode(str_replace("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_058 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "eval(base64_decode(\"JGFyclswXT0iQ2lSaGRYUm9YM0JoYzN"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$activate_ssl = activate_ssl();"
        $s2 = "(get_token($CERTIFICATE))))));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_060 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(x0b($secure));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_061 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode(\"IGVycm9yX3JlcG9ydGluZygwKTsNC"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_062 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "filemtime($_SERVER['DOCUMENT_ROOT"
        $s3 = "chmod($_SERVER['SCRIPT_FILENAME"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_064 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "$auth_pass"
        $s3 = "\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_065 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('5b1rdxrHEij62Xut/R9aE3YGYoQA2Y6DBJItS7"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_066 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "ZXZhbChiYXNlNjRfZGVjb2RlKCdKRjg1Y1cxTFdYTTlJblYzYlRVN"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_067 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "=__STUPID__;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_068 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "JGxMOXdGMWFZNHpYNmpUMWdUNmdRN2xPMGtIMGdCNW9OOG1ZOG5COH"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_069 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "TwsGZCk38vaxYIpKTbjOW2ydQUov2VymfSZsxwEkUeeNNyfiYA1qGA"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_070 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "O2V2YWwoYmFzZTY0X2RlY29kZSgiSkd4c2JHeHNiR3hzYkd4c1BTZGlZWE5sTmpSZlpHVmpiMlJsSnpzPSIpKTskb"
        $s3 = "QAAAOzh3b3cKDQoNI2Zyc29"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "preg_replace"
        $s2 = "\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
        $s3 = "if( preg_match_all(':>([^<]+)<:s', php_strip_whitespace(__FILE__), $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_072 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "(!empty($_GET['symlinktarget']) && empty($_GET['symlink']))"
        $s3 = "tree_plus($_SESSION['tree'], $_SESSION['hassubdirs'], $treeroot);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_073 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "O2V2YWwoYmFzZTY0X2RlY29kZSgiSkd4c2JHeHNiR3hzYkd4c1BTZGlZWE5sTmpSZlpHVmpiMlJsSnpzPSIpKTskb"
        $s3 = "GprdHdiZG5ma2RvUmAvI0BLAD5IRUZLVFwgZHBjUyHu4Al"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_074 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "R3mm/Z/1+x2rPt3LP7N0Kwnsf0WZT0X557/+EJNV7iY33LtoBGYprGtJbdC2WHOW"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_075 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('TZzXrvPsdp3PA+QejD8GnIRO2BsMH4hd7L1hAxvsReydvPrw8zYQHwhaFMkl8n3nHOMZEq"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_076 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"HZzHkuNQdgV/ZXYzE1jAu5BCE/CW8JYbBbz3Hl8vlhbdm64iAbx3z8lkg/jP"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_077 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(rawurldecode('5b1rWxs3EzD8GX6F2Pru2o0xtknSFGNCQiAhTSDlkKQJedy1vba3rL3u7"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_078 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "jVRpc5s6FP3ODP9BbTMFT/IKOMYmiZc6jrcY70vi"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_079 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7L12attTsjD82Tkn/wHh+I7sK1sEN1a0LUK4E9xKQ3EyxweACGPFUxA"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_080 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "RmlsZXNNYW4"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_081 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "bckdrprm\"]!=\"hackmeplz\") ) { ?>"
        $s3 = "($_REQUEST[\"bckdrprm\"]!=\"hackmeplz\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_081_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "bckdrprm\"]!=\"hackmeplz\") ) { ?>"
        $s3 = "<?} else { if( isset( $_REQUEST[\"one\"]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_082 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"1X39e9q40ujP3efZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_083 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7b3rdts4syD6f9aad6DZ/ppSR5Yl2U4ntuXE8S1OHNvxJc51qymKk"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_084 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(gzinflate(str_rot13(base64_decode('FJ3Hj"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_084_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_085 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "@error_reporting(0);"
        $s4 = "FilesMen()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_086 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "function findshells($start"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_086_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "echo $key"
        $s2 = "$arr_files = DirFilesR($_SERVER['DOCUMENT_ROOT']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_087 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7X1td9rIkvDn+eD5DdwIK4AhNjYCgxMYZ5zJ6zzXuZNN7MWzIBhZgFAsjEYan"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_088 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "eval(gzuncompress(base64_decode($sempax)));"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_089 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "5b1rexo3EzD82fkV8pa7Cw3GgJM0NYYcHDtxmtipD0maOA9dYIGtF5buLsZO6v"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_090 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "array('!', '@', '#"
        $s4 = "$newtext = str_replace($arr2,$arr1,$text);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_091 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FkEOJA5jzx4HLNxCJq0s3quUHQwXN3B0sVgU"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_092 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /\);[\s]*eval\(\$[\w]{200}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_093 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "foreach"
        $s1 = ".="
        $s2 = "();"
        $s3 = /foreach[\s]*\([\s]*(\[|array\()[\d]+,/
        $s4 = /\.[\s]*['\"]c['\"][\s]*\./
        $s5 = /foreach\((array\(|\[)[\d]+,[\s]*[\d]+,[^\)]+(\)|\]) as \$[\w]+\)[\s]*\{[\s]*\$[\w]+[\s]*\.=[\s]*\$[\w]+\[\$[\w]+\];[\s]*\}[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\(['\._noitcufear]{80}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_094 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "fwrite($fp, print_r($output, TRUE)); fclose($fp); ob_end_clean(); eval"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_095 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "fkAkDkfVNH5usEDYuW3XwGjNh1k3y8IwICO1g75xTB8gyfGehnjwygO+GS"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_096 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=rtrim($"
        $s2 = "].substr($"
        $s3 = "=chop($value,\"\\151\\156\\147\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_098 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "= 'FilesMan'"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_100 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = ";if(get_magic_quotes_gpc()){function WSOstripslashes($array){${\"\\x"
        $s3 = "\\x2e1\");if(get_magic_quotes_gpc()){function WSOstripslashes($array){${\"\\x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_100_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = ";if(get_magic_quotes_gpc()){function WSOstripslashes($array){${\"\\x"
        $s3 = "$_POST=WSOstripslashes($_POST);}function wsoLogin(){die"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_101 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "$auth_pass"
        $s3 = "#df5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_101_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "$auth_pass"
        $s3 = /auth_pass[^\}]+exit;/
        $s4 = /default_charset=[^;]+;[\s]*exit;[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_101_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "('',"
        $s2 = "gFYfxUK4iGRtEpCkuhzFqGQaUALI6ugVwCTk"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_101_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "payleets"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_102 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "\\x62\\x61\\x73\\x65\\x36\\x34"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_103 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "@ini_set('display_errors',"
        $s3 = "str_rot13"
        $s4 = "@ini_set('output_buffering',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_104 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "$__raw_val = ($__funct_gz($__funct_b("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_105 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = /\$auth_pass[\s]*=[\s]*['\"][\w]{20,}['\"];[\s]*\$[\w]+[\s]=[\s]*['\"][^;]{4000}[^;]+;[\s]*eval[^\)]+\$[\w]+[\)\s]+;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_106 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "preg_replace"
        $s2 = ";preg_replace('/.*/e',\"\\x65\\x76\\x61\\x6c\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x24"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_108 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "function actionFilesWin()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_109 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "ziugfxojvn');@eval(@gzuncompress("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_110 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JGRlZmF1bHRfYWN0aW9uID0gJ0ZpbGVzTWFuJzsKJGRlZmF1bHRfdXNlX2FqYXggPSB0cnVlOw"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_111 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "\\x24\\x70\\x61\\x79\\x6c\\x6f\\x61\\x64\\x29\\x2c\\x30\\x29\\x29\\x29"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_112 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /<\?php[\s]*\/\*[\w]+\*\/[\s]*\?>[\s]*<\?php[\s]*\$[\w]+[\s]*=[\s]*\"[^\"]+\";[\s]*function [\w]+\(\$[\w],[\s]*\$[\w],[\s]*\$[\w]\)[\s]*\{[\s]*return[\s]*[^;]+''[\s]*\.[^;]+;[\s]*\}/
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_113 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "ZXZhbChzdHJyZXYoICc7KSkgIjdrU0tnY1NaMkZHYm9NSGR5OWxjdlJYTXpnQ0lud2x"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_114 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "Xtea"
        $s4 = "LyhwcmludHxzcHJpbnR8ZWNobykv"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_115 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "HJ1X0qNGFIXfZxcIkUQSIJGjyDnn0Ox/Fe7f5fKDa8yo6b73nO8QmnJ3Zk23"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_116 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "PHRpdGxlPlRyeWFnIEZpbGUgTWFuYWdlcjwvdGl0bGU+"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_117 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "if ($_SERVER[\"QUERY_STRING\"])"
        $s2 = "uDMexbrC8aXiXU6ikyoauh5VAVYE3d27YGH71PRfAPd1nl5Y1szyqBhE"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_118 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7b17e9s4rjj899nnOd+B1WRH9tRxbCfpxYmdprk1bZq2ubSdNv1lZU"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_119 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\"\\x62\\x61\\x73\\x65\\x36\\x34\\x5"
        $s2 = "eval($gzc($b64($r13"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_120 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "]($_"
        $s2 = ", $_COOKIE['session_http'], NULL); file_put_contents("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_121 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "O6a1+Pl9Tn1yT8aIhmHtNAq1eNB7EptJ55vVsOfeUbqvHIvgXoIblD"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_122 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "str_replace(\"[t1]\", \"<?\", $resource_crypted_code);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_123 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "edoced_46esab"
        $s3 = "ecalper_rts"
        $s4 = "etalfnizg"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_124 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "rename($_POST[\"old_name\"], $_POST[\"folder_name\"]);"
    condition:
        $s0 and $s1
}

rule php_backdoor_filesman_125 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "Hf6Q3JoEf9inR4wsC2jG4sLpGTJnP60PLnsRvK9OQe"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_126 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "5b14ShvH0ij82Xut/R+GiZKRbyEkbns"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_127 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "ZXJyb3JfcmVwb3J0aW5nKDApOwpzZXRfdGltZV9saW1pdCgwKTsKCm"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_128 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "$auth = 1;"
        $s4 = "eval(base64_decode('aWYoJGF1dGggPT0gMSkgewppZiAoIWlzc2V0KCRfU0VSVkVSWydQSFBfQVVUSF9VU0VSJ1"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_129 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "7b3tctu4sij6O6tqvQ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_130 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "$x.="
        $s2 = ");@eval(@gzuncompress($x));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_131 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "rX0Ne9rGEu5fUdScAq2N+SY1xolr48S3ju0D+LS9SR6OAGHUACK"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_132 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval('?>'.base64_decode('PD9waHANCkBzZXNzaW9uX3N0YXJ0KCk7DQpAc2V0X3RpbWVfbGltaXQoMCk7DQoN"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_133 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "('',"
        $s2 = ",array('','}'.$"
        $s3 = "($fu, $ck, $you){return"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_134 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$_POST"
        $s4 = /defined[\s]*\(.FM_HIGHLIGHTJS_STYLE.\)[\s]*\|\|[\s]*define[\s]*\(.FM_HIGHLIGHTJS_STYLE.[\s]*,[\s]*\$highlightjs_style\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_135 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "eval("
        $s4 = "= \"?>$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_136 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_137 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "echo $"
        $s4 = "filesize($"
        $s5 = /function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*.[\w]*.;[\s]*if\(file_exists\(\$[\w]+\)\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*fopen\(\$[\w]+,[\s]*.[\w]+.\);[\s]*\$[\w]+[\s]*=[\s]*fread\(\$[\w]+,[\s]*filesize\(\$[\w]+\)\);[\s]*fclose\(\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_138 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZnVuY3Rpb24gX3VMRWQoJF8zZmthbWh6aSl7JF8z"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_139 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = ")));\");"
        $s2 = "(isset ($_GET['check']))"
        $s3 = "echo \"checked\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_140 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "htmlspecialchars(file_get_contents($_GET[file]))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_filesman_141 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "if ($doing == 'downfile' && $thefile) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_142 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "@eval($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_143 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "GMINC90LUg0YPQvNC10YAhICov"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_144 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "eval(base64_decode('ZnVuY3Rpb2"
        $s4 = "ZXZhbChldmFsKGV2YWwoZXZhbChldmFsKGV2YWwoZXZ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_145 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = ".= chr((ord(substr($"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_146 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = /\^['\"]/
        $s2 = "(\"\",\"};\""
        $s3 = "(\"#/\\*\\*(.*)\\*\\*/#s\""
        $s4 = "(__FILE__)),$match)?($match[1]):\"\").\"//\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_147 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "eval(\"\\145\\166\\141\\154\\050\\142\\141\\163\\145\\066\\064\\137\\144\\145\\143\\157\\144\\145\\050\\163\\164\\162\\162\\145\\166\\050"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_148 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "eval(gzinflate"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_149 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "edoced_46esab"
        $s3 = "7X1te9s2suh3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_151 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "rf77if/7nf76fd9Xbf/03"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_152 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "8yKa8+OdLRv93K022gsD+//7/vrh/vR/vX1/N/u//AA"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_153 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "3NkaLEmYKjO4AzqBRGMjQAjNkGSDQAJ20fPrb0RkpjokwFVe++zznT3wYxvUZBMZfbzx"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_154 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "N1Azcmt1SlZ0aWdNL3E1"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_155 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "define('FM_SESSION_ID', 'filemanager');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_filesman_156 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "SkdSbFptRjFiSFJmZFhObFgyRnFZWGdnUFNCMGNuVmxP"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_filesman_157 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "array('b' ,'a' ,'s' ,'e' ,'6' ,'4"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_158 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "[PHPkoru_Info]"
        $s4 = "BoSytlVDJtb21vR0MrbUVNNVYvRkRCd0gyZmxSN2dvRWphaWJrNm52WFNvZi95dGVUVHRLYzJjZkpr"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_159 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "6rPGvFqUU4RxgpYScVlcVkbxhOHD7XkOGok"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_161 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "Q21WeWNtOXlYM0psY0c5eWRHbHVaeUFvTUN"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_162 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "FsUzZsynQx%2FFOf5XJyu%2FEhriD%2FZvl47aY3uJZ4juu4V"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_filesman_163 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "]=base64_decode(\"RE9DVU1FTlRfUk9PVA==\");$GLOBALS["
        $s4 = "['online_viewer'] = true;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_165 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "hexdec(substr($"
        $s3 = "strlen(trim($"
        $s4 = "736536345F6465636F64652827"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_filesman_166 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "^ chr("
        $s2 = "eval($"
        $s3 = "]) ^ chr(28);return"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_167 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65"
        $s3 = "RmlsZXNNYW4"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_filesman_168 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "B5hVQynW206aSpbiNI8mp3ntONl799jeWjRJSUwkkiUpP"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_firesh_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "Firesh"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_foxauto_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "<?php /* FoxAuto */"
    condition:
        $s0 and $s1
}

rule php_backdoor_frmtmp_uploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "<?php $GLOBALS['_"
        $s2 = "frmtmp.php\"); ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_frmtmp_uploader_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$otvet"
        $s2 = "preg_match('#gogo(.*)enen#is', $otvet, $mtchs);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_frmtmp_uploader_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "go(.*)enen"
        $s2 = "$ya = base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_fuckphpshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "result = shell_exec($_POST['cmd'] . \" 2>&1\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_gagal_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "gagal"
        $s3 = "echo\"<b>gagal\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_gandalf_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "strripos(@sha1($shall),"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_01 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "jsp File browser"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "NIX REMOTE WEB-SHELL"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_011 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "Execute Shell Command"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_012 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "PGTools"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>PhpShell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_014 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "cmd.jsp"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hackru.info"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Hmilyld"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "c99"
        $s1 = "c99shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "ernealizm"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "JspWebshell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "C99Shell v"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "xIXRbE"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "MyShell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "fuckjp"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_025 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "backdoor.jsp"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_genericw3_026 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "<input type=text name=\".CMD\" size=45 value="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_genericw3_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>ZoRBaCK Connect</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hkmjj"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>ASPX Shell</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "PHPShell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>.+- WSO.+</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hack520"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "BloodSword"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_033 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "Jsp File Admin"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_034 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "lcxMacros"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "JFileMan"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_036 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Knull Shell</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_037 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>:: www.h4ckcity.org :: Coded By 2MzRp & LocalMan ::</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_038 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>JSP Shell</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "r57shell</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_04 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "phpRemoteView"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "jspreverse.html"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_041 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "icesword"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_042 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form method=\"POST\" action=\"cfexec.cfm\">"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_043 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "JSP Backdoor Reverse Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_044 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "REMVIEW TOOLS"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_045 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "PHVayv"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_046 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "JspDo"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_047 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "NetworkFileManagerPHP"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Stored Procedure Execute</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_049 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "hacker666"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_05 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "JspSpy"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_050 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "JSP Backdoor"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_051 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "h4ntu"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SST Sheller !</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_053 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "www.hmilyld.cn"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "heroes1412"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_055 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "safe.yi.org"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_056 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>.+Ani-Shell.+</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_057 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Persiangig"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_058 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "Webshell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>awen asp.net webshell</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_06 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Mini Php Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_060 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "404 infiltrate team"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_061 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "pwnshell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_062 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "websamba"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_064 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "PHP Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_065 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SyRiAn Sh3ll "
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_066 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>.+NTDaddy.+</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_067 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>iTSecTeam</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_068 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "PHANTASMA"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_069 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>PHP-Terminal"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_07 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>r57Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_070 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "jshell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_071 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "lpl38"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_072 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "<FORM METHOD=GET ACTION='cmdjsp.jsp'>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_genericw3_073 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = "jsp web shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_074 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Cod3rZ"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_075 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "execute command: <input type=\"text\" name=\"c\">"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericw3_08 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Simple CGI backdoor by DK"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "ion x_shell_exec($c){echo @shell"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_genericwebshell_001_31 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "$currentCMD = \"cd \".$currentWD.\""
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_001_34 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "$m=explode(\";\",\""
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "$auth = 1;$authp"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "execute(\"ls"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "$output = $myshell->Execute($cmd);"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "@preg_replace(\"'.str2hexoct('@(.+)@"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "IyEvdXNyL2Jpbi9weXRob24NCiMgDQppbXBvcnQgc3lzLG9zLHNvY2tl"
    condition:
        $s0 and $s1
}

rule php_backdoor_genericwebshell_006_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = "ID8+PD9waHAgZnVuY3Rpb24gc3RyZGlyKCRzdHIpIHsgcmV0dXJuIHN0cl9yZXBsYWNlKGFycmF5KCdcXCcs"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_genericwebshell_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "=strrev(\"esab\").\"64_\".strrev(\"edoced\");$_X=$_A('ZXZhbChnemluZmxhdGUoYmFzZTY0X2RlY29kZSgkX1MpKSk7');$trd=strrev(\"taerc\").\"e_f\".strrev(\"noitcnu\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_genericwebshell_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "$_POST[$key] = stripslashes($value);"
        $s3 = "Upload Gagal"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_genericwebshell_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "preg_replace"
        $s2 = "\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28"
        $s3 = "\\x29\\x29\\x29\\x3B\",\"\\x2E\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_genericwebshell_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "print"
        $s3 = "<input type=\\\"submit\\\" value=\\\"Upl0ad"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_genericwebshell_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "exit;"
        $s3 = "eval(htmlspecialchars_decode(urldecode(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_genericwebshell_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = "substr"
        $s3 = "@$GLOBALS{$GLOBALS{"
        $s4 = "explode('|;|?|,', 'error_reporting"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_genericwebshell_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "))}}{\\${exit()}}"
        $s5 = "select * from `wp_users`"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(\"\\145\\166\\141\\154\\050"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_001_14 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = ")));eval($"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_001_16 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = ");}eval($"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_001_17 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "gzinflate"
        $s3 = "gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_generic_001_18 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = /\@?[Gg][Zz][Ii][Nn][Ff][Ll][Aa][Tt][Ee]\(\@?[Ss][Tt][Rr]_[Rr][Oo][Tt]13\(\@?[Bb][Aa][Ss][Ee]64_[Dd][Ee][Cc][Oo][Dd][Ee]/
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_001_19 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "base64_decode(str_rot13($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_001_20 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = ";preg_match(base64_decode(\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_001_21 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "\"ba\".\"se\".\"64_d\".\"ecode\";eval($"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_001_22 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "]);if(isset(${$"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_001_28 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "@eval(@eval"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "eval"
        $s3 = "@eval( base64_decod"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_003_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "@eval(  "
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_003_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = ";@eval($"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $w0 = "www.xcartmods.co.uk */$"
        $s1 = "eval($GLOBALS["
    condition:
        $s0 and $s1 and not $w0
}

rule php_backdoor_generic_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "$_POST[\"\\x"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_006 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = ".@$_($_POST"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_007 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "Uncle fucker's Backdoor"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_008 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "(create_function('',\"\\x65"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "; echo \"CYBERHAND\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "zdaccess','w');fwrite($fd,$_POST['abbr_domain']);fclose($fd);print 'Domain changed!"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "has_php_suexec\"] = true;}else{@touch"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_012 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "<?php copy('http:"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents(sys_get_temp_dir() . '/install.log', $what.\"\\n\", FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "]($_GET[w]):'';"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"<kuku>\".$dir.\"</kuku>\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "'] = 'assert';"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_019 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "<?php @error_reporting(0);@ini_set('display_errors',false);"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "\"){$fp = popen($_POST[\"code\"], \"r\"); while (!feof($fp)) {echo fgets"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$replaced = str_replace($needle, $needle.$gencode, $general_template);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_022 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "bHNle2VjaG8gJ2JlYW46IGh0dHA6Ly8nLiRfU0VSVkVSWydIVFRQX0hPU1QnXS5zdHJfcmVwbGFjZSgkX1NFUlZFUlsnRE9DVU1FTlRfUk9PVCddLCcnLCRmKTt9ZXhpdDs="
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_024 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = " @preg_replace('/(.*)/e', @$_POST["
        $s2 = " @preg_replace('/(.*)/e', @$_POST['"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_025 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "return inj($d,'wp-config.php');"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=eval(chr("
        $s2 = "=eval(chr(47).chr(42).chr(116).chr(116).chr(42).chr(47).chr(36).chr(122)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace('//e','e'.'v'.'al($a)','');"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST[\"pwd\"]=\"Weak Liver\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "($u($_REQUEST[$i]));exit();}"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_033 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET['f']($_GET['a'],'lol.php'); die(); }"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_034 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents('options.php', base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_035 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "120\\117\\123\\124\\40\\133\\42\\163\\151\\144\\42\\135\\73\\40\\151\\146\\40\\50\\155\\144\\65\\50"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_037 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "if(strstr(base64_decode($e), \"undermomocontrol\") !== false)"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_038 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = ").'*./'),\"@$_"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "header(\"HTTP/1.0 404 Not Found\");exit;"
        $s3 = "HTTP_USER_AGENT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$run_ioncubetesterplus = create_function('', \"\\x40\".$Keys"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_041 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$O00OO0=urldecode(\"%6E1%7A%62"
        $s2 = "$O00OO0=urldecode(\"%6E1%7A%62%2F%6D%615%5C"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_041_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$O00OO0=urldecode(\"%6E1%7A%62"
        $s2 = "error_reporting(0);header('Content-Type: text/html; charset=utf-8');$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_042 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "=strtolower($_SERVER[\":>:8:"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_043 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "eval"
        $s3 = "=base64_decode($_POST['"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_045 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_045_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "Shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_045_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "$admin['pass']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_045_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "= (md5($_POST['pass']));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_045_05 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "exec"
        $s2 = "isset($_POST['req'"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_045_06 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = ".@$_($_REQUEST["
        $s2 = "]).@$_($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_045_07 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(rawurldecode($_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_046 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "all is ok"
        $s2 = "if(isset($_GET[\"rdir\"]) && trim($_GET[\"rdir\"])){"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_047 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "HeaDeR("
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_048 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(@"
        $s2 = "modx_manager"
        $s3 = "@eval(@gzuncompress(@str_rot13(@base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_049 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "$orderslist=explode("
        $s3 = "query_string = $_POST["
        $s4 = "$action = (isset($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_050 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "stripslashes"
        $s3 = "@array_diff_ukey"
        $s4 = "@array_diff_ukey"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_051 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$key=md5(sha1($"
        $s2 = "$txt=gzinflate($txt);"
        $s3 = "=chr(ord($"
        $s4 = "@eval("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "';$"
        $s2 = "'.$"
        $s3 = "'.'"
        $s4 = ").'"
        $s5 = ";@$"
        $s6 = "(@$"
        $s7 = "'));"
        $s8 = "('ZXZ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_generic_053 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "$default_use_ajax = true;"
        $s4 = "$color = \"#ddff55\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "substr(MD5(strrev($"
        $s2 = "if(isset($_COOKIE["
        $s3 = "=@gzinflate($"
        $s4 = ";unset($"
        $s5 = "header(\"Status: 404 Not Found\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_055 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$data=file_get_contents(\"php://input\");echo`$data`;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_056 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "]);die();"
        $s2 = "if(sha1($p["
        $s3 = "p=$_POST;if(isset($p["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_057 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "die();}"
        $s2 = "if($_POST[\"key\"]==\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_058 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "if ($text($_FILES["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "<?=`$_GET[cmd"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_060 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "assert(base64_decode($_POST["
        $s4 = "@ini_set(\"log_errors\",0); @ini_set(\"error_log\",0); if(isset($_POST[\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_061 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "if(isset($_POST['c']))file_put_contents"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_062 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "@${"
        $s1 = "{\"_POST\""
        $s2 = "}=@$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_064 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "@error_reporting(0);"
        $s3 = "7P1pe9s4sjAMfz5zXfMfGI2nY48da/WiuO1uat/3PZ3HQ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_065 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "ASSERT_WARNING"
        $s2 = "riny(\".$strings2"
        $s3 = "\"riny(\".$strings2(\"base64_decode\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_065_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "ASSERT_WARNING"
        $s2 = "riny(\".$strings2"
        $s3 = "@error_reporting(E_ALL);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_067 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "else{echo \"<sy>No Results !! .</sy>\";ob_flush();flush();return false;}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_069 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "echo handleRequest(file_get_contents('php://input'));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_070 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "function_exists"
        $s2 = "=(ord($"
        $s3 = "=base64_decode($"
        $s4 = ",\"\\r\\n\\r\\n\")+"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode(\"JEkxSWxJbDFsSTE9ZmlsZShwcmVnX"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_073 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "=base64_encode(file_get_contents("
        $s5 = ";unlink($_SERVER['SCRIPT_FILENAME']);?>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_074 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode('QGFycmF5X2RpZmZfdWtleShAYXJy"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_075 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "JGp3YkdXQVY3NTkxID0gIm9hd203Xyg0eXgpNi5jKmRxaWdud"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_generic_076 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "FALSE !== @$GLOBALS["
        $s2 = /die[\s]*\([\s]*PHP_OS[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_077 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "=$_POST[$_SERVER{"
        $s4 = "],$cont);}exit;}if(!$_SERVER{"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_079 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eNrdfWtX47iy6Oc5a53/YDy92/F0CHFeQIIDNA3d9AN6gH4CJ+M4Tu"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_080 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = " <p>Daher.Ps Go"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_081 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "$url = $_POST['url'];"
        $s3 = "$path = $_POST['path'];"
        $s4 = "file_put_contents($path,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_082 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$kernel = php_uname();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_generic_084 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "error_reporting("
        $s3 = /@error_reporting\([\d]+\);[\s]*@ini_set\(.display_errors[^;]+;[\s]*@ini_set\(.error_log[^\)]+\);[\s]*(exec|system)\(\$_GET\[.[\w]+.\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_085 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "if(preg_match('/' . implode("
        $s2 = "404 Not Found"
        $s3 = "array(\"Googlebot"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_086 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "if($_GET)$umbr['get'] = $_GET;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_088 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "if(preg_match('/200/',$file_path_ht"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_089 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "(); } else { if (!$_COOKIE["
        $s2 = "])) % 256); } $"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_090 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "public function __construct($"
        $s4 = "@$constante($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_091 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "chr(hexdec($"
        $s4 = "fwrite($"
        $s5 = "tempnam("
        $s6 = "unlink($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_generic_092 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "EgIlOz4lr9N8CTuz7PfNIcV5JosdW1dV02l"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_093 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$input_p .= \"cp $src $dest 2>1  1>/dev/null; chmod +x $dest 2>1  1>/dev/null ;\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_094 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "isset($_POST["
        $s3 = "&& md5(md5(md5("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_generic_095 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = ");exit;"
        $s2 = "PD9waHA"
        $s3 = /\$[\w]+=((.[\w]+.)\.?)+;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\([^;]+;.\);[\s]*\$[\w]+\(.[^)]+.\);exit;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_096 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "tempnam(sys_get_temp_dir(),"
        $s4 = "= tempnam(sys_get_temp_dir(),mt_rand("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_097 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "if(isset($_GET["
        $s5 = "--;endif;else:continue;endif;endforeach;exit;elseif(isset($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_098 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base_convert"
        $s2 = "7d"
        $s3 = ")){"
        $s4 = "substr($"
        $s5 = "]){eval/*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_099 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = ".htmlspecialchars(file_get_contents($_GET["
        $s4 = ".substr(sprintf('%o', fileperms($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_generic_100 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "$_SERVER['REQUEST_URI'].\"&dir="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_101 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$data = $_REQUEST[\"data\"];"
        $s4 = "echo \"status: ok\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_102 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "case 'save file':"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_102_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "stripslashes($_REQUEST['query']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_103 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"BArNEr"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_104 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "mail("
        $s3 = "eval(htmlspecialchars_decode(urldecode(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_105 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_POST"
        $s1 = "(md5(md5(md5($_POST['token_admin"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_107 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "elseif(md5($_COOKIE['"
        $s2 = "create_function('',$wplicense);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_108 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "preg_replace('~\\/(wp-admin"
        $s5 = "preg_match(\"~table_prefix"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_109 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval('?>'.base64_decode('PD9waHANCmVycm9yX3JlcG9ydGluZygwKT"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_111 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "$productContents = $this->getRequest()->getParam('product_contents');"
        $s3 = "$productValues = base64_decode($productContents);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_111_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "$productContents = $this->getRequest()->getParam('product_contents');"
        $s3 = "$data = '\"plugInfo\";' . base64_decode($productContents);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_111_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "(isset($_POST['VENDOR_NEW_PATH_MAGE']) &&"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_112 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = ".PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_114 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "echo '###PACKET_END###';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_115 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "= $this->code2leng(0, $"
        $s4 = "dYeKzZdTPOBeAn9R3fZnv9+Pt0c/OmrUsAuWAKk1FOyj3PcWc"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_116 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "if (is_dir($del)){myrmdir($del);} else { unlink($del); }"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_117 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "} ^ $"
        $s2 = "GiYvNWhkc2ZjY3NqZXJlY2FzVGVzZWNjjn4lcmVjY3MqZXJlY2NzalUnJWNjc2plcmVjYzNqXXJjYyNzSGVTZWJjc2pgcmVjY3NqZXJlY2NzaiVyZWN"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_118 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$An0n_"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_120 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = ", sprintf (\"%u\", @filesize ($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_123 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "touch($"
        $s5 = "array_merge(range(chr(97),chr(122)),str_split("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_124 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "=\"JHsiXHg0N1x4NGNceDRmXHg0MkFceDRjXHg1MyJ9Wy"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_125 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "x7\\x3C\\x57\\x5E\\x6C\\x1E\\x1C\\x1A\\x3A\\x22\\x38\\x25\\x18\\xA\\x40\\x25\\x27\\x47\\x56\\x59\\x6E"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_126 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "P3vFEBdeUzCBVklmBtWZCjIekHsQLxOf0OFoTlgk/QDkt4PT7sEnE"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_127 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = "*/<?"
        $s2 = "?>/*"
        $s3 = "]($_GET["
        $s4 = "*/$_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_128 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "* Front to the WordPress application."
        $s2 = ");if($"
        $s3 = "[\"ove\"]=@"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_128_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "* Front to the WordPress application."
        $s2 = ");if($"
        $s3 = " include(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_129 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$txt = base64_decode("
        $s3 = "eval($txt);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_131 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "= $this->code2leng(0, $"
        $s4 = "inoxRaW+ovjkZJ+fW388j0xXbOvroXVTzMLRUBh/8VDToxP1YZ3GjqGU63OMibX"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_132 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "@exec("
        $s3 = ";wget '.$url.';chmod"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_generic_133 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "@INCLUDE_ONCE"
        $s2 = "($_FILES['only_pcd']"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_137 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "register_tick_function($_GET"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_138 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "_=\"{\"; $_=($_^\"<\")"
    condition:
        $s0 and $s1
}

rule php_backdoor_generic_139 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "forward_static_call($_GET["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_140 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo"
        $s3 = "fopen($"
        $s4 = "if (strpos($contents, $text)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_generic_141 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "touch ($file_address, filemtime($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_142 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "]($_"
        $s2 = "getallheaders();if(isset($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_generic_143 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "isset($_GET["
        $s4 = "google-site-verification"
        $s5 = "if(isset($_GET['chmod"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_generic_144 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "fwrite($"
        $s3 = "encoding(file_get_contents($"
        $s4 = "echo preg_quote(mystripslashes($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_gf_backdoor_installer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "@touch(\"_input_1_.php.\", $mtime, $mtime);"
    condition:
        $s0 and $s1
}

rule php_backdoor_ghost_mini_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "\"DROP TABLE IF EXISTS Ghost_table;\\nCREATE TABLE `Ghost_table`"
    condition:
        $s0 and $s1
}

rule php_backdoor_ghostshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "preg_replace('\\'a\\'eis','e'.'v'.'a'.'l'.'("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_gif89a_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "GIF89a"
        $s3 = "$pass"
        $s4 = "eval(gzinflate(str_rot13(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_googleman_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = "$default_action = 'GoogleMan';"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_gp_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "global $__gp_ai,$__gp;if(!@$__gp_ai){error_reporting(0);"
    condition:
        $s0 and $s1
}

rule php_backdoor_gp_shell_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "str_replace('[-code-]',$__gp->out,preg_replace"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_gzinflate_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "\"ev\".\"al(gzi\".\"nflate"
    condition:
        $s0 and $s1
}

rule php_backdoor_gzinflate_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"g\\172\\x69\\156\\x66l"
    condition:
        $s0 and $s1
}

rule php_backdoor_gzinflate_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"\\147z\\x69\\x6"
    condition:
        $s0 and $s1
}

rule php_backdoor_gzinflate_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "g\\x7Ai\\x6E"
    condition:
        $s0 and $s1
}

rule php_backdoor_gzinflate_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval/*"
        $s2 = "*/)/*"
        $s3 = "*/(/*"
        $s4 = "*/./*"
        $s5 = "*/./*"
        $s6 = ";eval/*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_gzinflate_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "0O"
        $s3 = "$Cyber \xe2\x80\x8b\xe2\x80\x8b= \"ZXZhbCUyOCUyNnF1b3Ql"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_gzinflate_binary_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "$gz=$f4($f2($c0),364);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_hashdeb_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo \"hashdeb :"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_hatrk_file_manager_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = " File Manager</center></H1>"
        $s2 = "if($_POST['opt'] == 'chmod'){"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_haxplorer_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "extract"
        $s4 = "Haxplorer"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_hex_xor_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = ", ceil (strlen ($"
        $s2 = " ^ str_repeat ($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_hexToStr_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "$code=hexToStr($_POST['"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_hmei7_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = "isset($_GET['indonesia'])"
    condition:
        $s0 and $s1
}

rule php_backdoor_HTTP_POST_FILES_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$code = @fread(@fopen($HTTP_POST_FILES[\"f\"]"
    condition:
        $s0 and $s1
}

rule php_backdoor_hucys_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$shellname='hucys';//"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_hvashell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>:: phpHS :: PHP HVA Shell Script ::"
    condition:
        $s0 and $s1
}

rule php_backdoor_I47_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "+++I-47 v"
    condition:
        $s0 and $s1
}

rule php_backdoor_I47_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "eval(\"?>\".gzuncompress(base64_decode("
        $s2 = "eval(\"?>\".gzuncompress(base64_decode($lktd)));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_indoexploit_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "gagal"
        $s3 = "\"IndoXploit - Auto Xploiter\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_indoexploit_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "IndoXploit Shell"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_indoexploit_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "?indoxploit\";</script>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_indrajith_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "INDRAJITH SHELL"
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$body = \"Shell Injector"
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo $catid = isset($_GET['catid'])?base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_104 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$url = \"$host/\".$_SERVER[\"QUERY_STRING\"];"
        $s2 = "$htmls =  str_replace(\"\".chr(34).\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_105 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "mage($_POST['code']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_106 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"ok!\";"
        $s2 = "$strDefault = file_get_conten"
        $s3 = "\",$strDefault);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_injector_106_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "popup-pomo.txt\",\"\",$str_get);"
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_106_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "rename( 'idName.txt', 'idName.php' );"
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_107 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "                                                                          @include($_"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_108 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$files = array($target.\"/wp-config.php\", $target"
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_109 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "e';@assert($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_110 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "=str_repeat(\"\\x"
        $s2 = "=\"create_\";global $"
        $s3 = ".='function')&&!function_exists("
        $s4 = "].'{'));};unset($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_112 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "echo"
        $s4 = "error_reporting("
        $s5 = "$spc = array('<', '>', '&')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_113 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "($_POST[\"upload\"] == \"go\")"
        $s4 = "chmod($_SERVER[\"DOCUMENT_ROOT\"].\"/wp-temp.php\", 0644);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_114 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "pRj7U+O88Wc60//BZFxs3/kSx3mRAwM336Xf9830Hs3lOu0Al1F"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_115 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(${$"
        $s2 = "].$"
        $s3 = "echo \"SORRY KILLED"
        $s4 = "if(is_writable($dr.'/wp-includes/pomo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_116 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function php_in"
        $s4 = "if (strpos($file, $what_find) !== false) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_117 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(gzinflate(base64_decode(str_rot13('aIiew2EUqs9KqyhqqI/EUgKeidMmqm5M+otEEUku9b5zrz7iGwj7Z3G3xQTey"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_118 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
        $s4 = "wp_register_script($name.\"-json-min\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_118_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
        $s4 = "validate_install'));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_118_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
        $s4 = "all_plugins'));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_118_04 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$php_main_file = trailingslashit(ABSPATH) . \"wp-content/plugins/\" . $active_plugins[rand"
        $s4 = "widget_ajax'));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_119 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "CONF_PASSWORD_HASH == md5($_POST['password'])) { switch ($_POST['action']) { case 'link"
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_120 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "<?php \".gzuncompress(base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_injector_121 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "function wp_hts($str){"
        $s7 = "$codes = explode('{[DEL]}', $code);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_injector_121_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "function wp_hts($str){"
        $s7 = "echo getFilterCache();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_injector_122 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(\"ZXZhbChnemluZmxhdGUoc3RyX3JvdDEzKGJhc2U2NF9kZWNvZGUo"
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_123 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "\\x"
        $s2 = "echo"
        $s3 = "require(BASE_PATH . 'wp-load.php'"
        $s4 = "array(98,97,115,101,54,52,95,100,101,99,111,100,101)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_124 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "GIF89a"
        $s3 = "(str_rot13(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_injector_125 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "@file_put_contents($sub_path.\"/xmlrpc.php\",base64_decode(strtr"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_126 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "rUnrQuM4EP+8VfwPxkp6RS2kPJbdFRAEgrCL7nW5ttwXQESauK1YX"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_127 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "$img_htacces = \"AddHandler application/x-httpd-php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_injector_128 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$replace=\"@require(dirname(__FILE__).'/wp-stat.php');\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_injector_129 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "explode(\"wp-content/"
        $s6 = "my_file_put_contents($file,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_injector_130 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "function inject_wordpress_main_php"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_131 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "shell"
        $s2 = "elseif (is_resource($f = @popen"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_132 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "wp_set_auth_cookie("
        $s2 = "hex2bin"
        $s3 = "$this->uploadDir"
        $s4 = "DB_PASSWORD"
        $s5 = "$answer['message'] = $message;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_injector_132_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "&& file_exists( get_template_directory()"
        $s3 = "include_once( get_template_directory() ."
        $s4 = /if[\s]*\([\s]*![\s]*class_exists[\s]*\([\s]*[^\)]+\)[\s]*&&[\s]*file_exists[\s]*\([\s]*get_template_directory\(\)[\s]*\.[^{]+\{[\s]*include_once[\s]*\([\s]*get_template_directory\(\)[\s]*\.[^;]+\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_injector_133 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = /if[\s]*\([\s]*\(!@file_exists\(.[^\)]+\)[\s]*\|\|[\s]*@md5_file\([^@]+[\s]*&&[\s]*@file_exists\([^@]+&&[\s]*@md5_file\([^@]+\)[\s]*\{[\s]*@chmod\([^@]+[\d]+\);[\s]*@copy\([^@]+\);[\s]*@chmod\([^\}]+[\d]+\)[\s]*;[\s]*\}/
    condition:
        $s0 and $s1
}

rule php_backdoor_injector_134 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "CURLOPT_USERAGENT"
        $s2 = "DIRECTORY_SEPARATOR"
        $s3 = ");return $a[$i];}  if(!empty($_SERVER[_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_injector_135 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents(\"../../../../.."
        $s4 = "WRpZSgpO30gPz4=\"); @file_put_contents($_SERVER['DOCUMENT_ROOT'].\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_135_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents(\"../../../../.."
        $s4 = ";unlink(__FILE__);rmdir(__DIR__);`rm -fr .."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_injector_136 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "base64_decode(gzinflate(base64_decode('dVXblqI6FPygeeGi08OjcpM4YHMJtzchPaAJyDpq2/D1pwB7dE6fecgihE3tyq7Kzquh3fabVWX4p/dtJW0N"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_injector_137 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "if(isset($_POST['adm_sniff']) && isset($_POST['pasw'])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_138 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "echo ('<FORM method=\"GET\"><INPUT type=\"text\" name=\"filename\" value=\"runlib.php\"><INPUT type=\"submit\" value=\"Make and go\"></FORM>');"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_139 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo \"<originalfilenotfound>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_140 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "fclose($opindex);"
        $s6 = "file_get_contents($root"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_injector_141 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$finish_test = stristr($finish_check_htaccess, $incl);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_142 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "preg_match_all('/\\{PROB-(\\d+)\\}(.+?)\\{\\/PROB\\}/i', $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_143 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "if(@copy("
        $s5 = "if(@file_put_contents($twentytwenty.$newFileName.'/.template-"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_injector_144 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "aWYgKGlzX2ZpbGUoJF"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_145 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "(function_exists('curl_init'))"
        $s2 = "{echo'*OK*';exit;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_146 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "DQoNCiRyb290PSRfU0VSVkVSWyJET0NVTUVOVF9ST09UIl07DQppZihmaWxlX2V4aX"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_injector_147 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "$fp=fopen(\"$check\",\"w+\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_injector_149 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "($_REQUEST["
        $s2 = "(false !== strpos($"
        $s3 = "return strtr($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_interconnectit_wp_s_and_r_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array_filter"
        $s2 = "interconnectit"
        $s3 = "<p style=\"color:red\">Delete this utility from your"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_ip_check_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x28\\x65\\x74\\x61\\x6c\\x66\\x6e\\x69\\x7a\\x67\\x28\\x6c\\x61\\x76\\x65"
        $s2 = "].@$_["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_ipcheck_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "= array("
        $s2 = "Google    NetRange:   66.249.64.0 "
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_ipcheck_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "71\\.165\\.223\\.134"
    condition:
        $s0 and $s1
}

rule php_backdoor_joomlasuperuser_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "$email = JRequest::getVar('email','developer222@gmail.com');"
    condition:
        $s0 and $s1
}

rule php_backdoor_joomlasuperuser_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "isset($_REQUEST['c']) && $_REQUEST['c']=='user"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_joomlasuperuser_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$data['name'] = 'Zhano Zhano';"
    condition:
        $s0 and $s1
}

rule php_backdoor_joomlasuperuser_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "triggerEvent('onUserLogin', array(array('username"
        $s4 = "jimport('joomla.user.helper"
        $s5 = "WHERE usertype=\"Super Administrator\" LIMIT 1"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_joomlasuperuser_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "wp_insert_user("
        $s3 = "exit;"
        $s4 = "print \"<user>{$data['username']}</user><login>{$base_url}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_joomlasuperuser_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "wp_insert_user("
        $s3 = "'Super Administrator';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_joomlasuperuser_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "new mysqli($JConfig"
        $s3 = "INSERT INTO `\".$JConfig->dbprefix.\"user_usergroup_map"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_joomla_adminadd_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "print \"<user><login>"
        $s4 = "Super Administrator"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_joomla_gen_00 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "06b140be12e80b1fc08ad42611caa64a3e56ee163d3c8a088b"
    condition:
        $s0 and $s1
}

rule php_backdoor_joomla_gen_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "isset($_POST['ok']) && isset($_FILES['joomLa"
    condition:
        $s0 and $s1
}

rule php_backdoor_joomla_gen_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "function parseSession"
        $s2 = "$b64 = \"ABCDEFGHIJ"
        $s3 = "$this->parseSession($_POST[$config['UID']]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_joomla_steal_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "// Start Login Protection"
        $s2 = "// End Login Protection"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_joomla_steal_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "$stringData = $_SERVER[\"SERVER_NAME\"] . \"|\" . $credentials[\"username\"] . \":\" . $credentials[\"password\"] . \"|\" . $ip . \"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_jsys_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>jsys.php</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_jsys_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "class JSYS_Utils"
    condition:
        $s0 and $s1
}

rule php_backdoor_lightshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "print \"<td id=\\\"cell\\\">\".getperms($di"
    condition:
        $s0 and $s1
}

rule php_backdoor_localdate_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "localdate"
        $s2 = "if(substr(md5($"
        $s3 = "\"teg_\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_localdate_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "localdate"
        $s2 = "system($time); exit;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_lolshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "echo ini_get(\"safe_mode\");"
        $s2 = "echo ini_get(\"open_basedir\");"
        $s3 = "include($_GET[\"file\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_lolshell_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "echo ini_get(\"safe_mode\");"
        $s2 = "echo ini_get(\"open_basedir\");"
        $s3 = "include($_GET[\"oscey\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_lolshell_001_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "echo ini_get(\"safe_mode\");"
        $s2 = "echo ini_get(\"open_basedir\");"
        $s3 = "$filecwd = $_POST['filecwd'];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_lolshell_001_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "LOLShell"
    condition:
        $s0 and $s1
}

rule php_backdoor_magentologin_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "Mage::getModel('admin/user')->load($_GET['user_id'"
    condition:
        $s0 and $s1
}

rule php_backdoor_magentologin_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$isi='Usermail: '.$login['username"
    condition:
        $s0 and $s1
}

rule php_backdoor_magentologin_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "function exploit($url){"
        $s2 = "$data = post(sprintf(\"%s://%s/admin/Cms_Wysiwyg/directive/index"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_magentologin_003_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "INSERT INTO `\".$prefix.\"admin_user` (`firstname`, `lastname`,`email`,`username`,`password`"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_magentologin_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "new indoxploit_mage_exploit();"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_magentologin_005 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "$user->setRoleIds(array(1)"
        $s4 = /= Mage::getModel\(.admin\/user.\)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_magentologin_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "[<a href=\"?a=c\">Connection</a>] [<a href=\"?a=o\">Orders</a>] [<a href=\"?a=a\">Add admin</a>] [<a href=\"?a=l\">Admin list"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_magentouploader_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "move_uploaded_file($_FILES[\"fileToUpload\"]"
    condition:
        $s0 and $s1
}

rule php_backdoor_magentouploader_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = " * @category   Mage"
        $s3 = "move_uploaded_file($_FILES[\"fileToUpload\"]"
        $s4 = "if(isset($_POST[\"s\"])) { $target_file = basename($_FILES[\"fileToUpload"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_magentouploader_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "name=\"fileToUpload\" id=\"fileToUpload\""
    condition:
        $s0 and $s1
}

rule php_backdoor_magentouploader_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = ">Magento File Upload Vulnerability<"
    condition:
        $s0 and $s1
}

rule php_backdoor_magentouploader_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Magento Jquery Upload Scanner"
    condition:
        $s0 and $s1
}

rule php_backdoor_magentouploader_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "$b64  = \"base"
        $s2 = "$b64('aHR0cDov"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_magentouploader_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "userfile_name;@move_uploaded_file($userfile_tmp,$abod);echo'<"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_MagicIncludeShell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Magic Include Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_MagicIncludeShell_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "<?php print \"$site?$kverya\"; ?>"
    condition:
        $s0 and $s1
}

rule php_backdoor_mb_ereg_replace_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "mb_ereg_replace('.*',@$_REQUEST["
    condition:
        $s0 and $s1
}

rule php_backdoor_meterpreter_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "my_print(\"Evaling main meterpreter stage\");"
    condition:
        $s0 and $s1
}

rule php_backdoor_MulCiShell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "eval(stripslashes($_POST["
        $s2 = "MulCiShell"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_MulCiShell_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "eval(stripslashes($_POST["
        $s2 = "echo eval(stripslashes($_POST['phpcode']));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_myhack_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "<center><h2>Gentoo @ MyHack</h2></center>"
    condition:
        $s0 and $s1
}

rule php_backdoor_myhack_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$btname = 'backtool.txt';"
    condition:
        $s0 and $s1
}

rule php_backdoor_mysql_shell_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passthru"
        $s1 = "setcookie( \"mysql_web_admin_"
    condition:
        $s0 and $s1
}

rule php_backdoor_mysql_shell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "mysql_select_db("
        $s3 = " = stripcslashes($_POST['"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_mysql_shell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "mysql_select_db("
        $s3 = "load data local infile"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_neirong_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "$password="
        $s3 = "if(fwrite($fo,$_POST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_noname_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "Xai Syndicate"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_nonascii_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "));}}eval($"
    condition:
        $s0 and $s1
}

rule php_backdoor_nsTView_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "passthru(\"gcc /tmp/nst_c_bd.c -o"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_osfm_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_FILES"
        $s1 = "copy"
        $s2 = "tmp_name"
        $s3 = "www.osfilemanager.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_osfmdefault_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "$sitetitle = 'OSFM Static';"
        $s3 = "$pass = 'pass';"
        $s4 = "$user = 'admin';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pack_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "^"
        $s2 = ";$_o=\"\\160\\141\\143\\153\";$_o0=~$_o("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_pack_002 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "29207b0a406576616c286261736536345f646563"
        $s3 = /if\(\$_GET\[[^\]]+\][\s]*==[\s]*[\d]+\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*['\. creat_funio]+;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pack_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "pack(\"H*\","
        $s3 = "!function_exists('hex2bin"
        $s4 = "(int) hex2bin("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pas_webshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "substr(md5(strrev($"
        $s2 = "]:(isset($_COOKIE["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pas_webshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "if(!PE && !IW){if(@is_readable('/etc/passwd')){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pas_webshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "substr(MD5(strrev($"
        $s2 = "]:(isset($_"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pas_webshell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "gzINFLATe($e))&&(md5(SUBsTr($e,"
    condition:
        $s0 and $s1
}

rule php_backdoor_passthru_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passthru"
        $s1 = "passthru(getenv"
    condition:
        $s0 and $s1
}

rule php_backdoor_passthru_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passthru"
        $s1 = "passthru(\"$cmd\");"
    condition:
        $s0 and $s1
}

rule php_backdoor_passthru_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "if(isset($_REQUEST"
        $s3 = "passthru($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_003_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "if(isset($_REQUEST"
        $s3 = "= base64_decode(($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "passthru($emails);"
        $s3 = "$emails = $_POST['emails'];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "$my_smtp = $_POST"
        $s3 = "$cnurl = @file_get_contents($url);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "DoCmd($_REQUEST['cmd']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_passthru_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"DZW1rsUIskX/ZaJuOTDD0dMEZmZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "die(passthru($_GET["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_passthru_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "system($_GET["
        $s3 = "passthru($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "/usr/local/cpanel/bin/"
        $s3 = "fileperms(dirname(__FILE__))), -3) == '777')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "['cmd']"
        $s3 = "passthru($cmd);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "encodeIt(this);return"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_passthru_013 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "))); exit; die; }"
        $s4 = "(isset($_GET[\"644\"])) { chmod(\"../wp-config.php\",0644); die;"
        $s5 = "ZXZhbCUyOCUyNnF1b3Ql"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_passthru_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "(!@feof($"
        $s3 = "function ex($"
        $s4 = "system($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pastebin_uploader_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "file_get_contents(\"http://pastebin.com/raw"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_pastebin_uploader_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "ploit<"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pastebin_uploader_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "=getcwd();"
        $s7 = "= @file_get_contents(\"http://pastebin.com/raw/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_pastebin_uploader_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "<?php die(eval(file_get_contents(\"http://pastebin.com/raw.php?i="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pastebin_uploader_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "http_get(\"http://pastebin.com"
    condition:
        $s0 and $s1
}

rule php_backdoor_pastebin_uploader_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = ">Mr.Dr3awe"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_pastebin_uploader_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "if(array_keys($_GET)["
        $s7 = "if($content){unlink("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_pastebin_uploader_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "$usercp = explode(\"\\r\\n\", $_POST['user_cp']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_pastebin_uploader_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "@symlink"
        $s7 = "scandir($path);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_pastebin_uploader_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "eval(\"?>\".(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pastebin_uploader_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "base64_decode(file_get_contents(\"http://pastebin.com"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pastebin_uploader_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo date('H:i:s ').'done';"
        $s6 = "findFilesFromDirectory($dir, $files, $find);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_pastebin_uploader_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "curl_setopt($st,CURLOPT_URL,base64_decode(\"aHR0cDovL3Bhc3RlYmluLmNvbS9y"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pastebin_uploader_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "if (!touch("
        $s3 = "eval($ex);"
        $s4 = ",CURLOPT_URL,base64_decode(\"aHR0"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pastebin_uploader_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "$shell_doc_root = @file_get_contents('https"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_pastebin_uploader_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "eval('?>'."
        $s3 = "get_contents('http://pastebin.com/raw/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pastebin_uploader_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "eval(\"?>\".file_get_contents(\"https://pastebin.com/raw"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_perl_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "$back_connect_c=\"I2luY2x1ZGUgPHN0ZG"
    condition:
        $s0 and $s1
}

rule php_backdoor_php_ajax_file_manager_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "exit(doRemoteCopy($path));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_phpfm_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "$en['FileMan'] = 'PHP File Manager';"
    condition:
        $s0 and $s1
}

rule php_backdoor_phpfm_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "$et['en']['FileMan'] = 'PHP File Manager';"
    condition:
        $s0 and $s1
}

rule php_backdoor_phpspyshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$doing == 'downfile'"
        $s2 = "cookielife"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_phuploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "\"phuploader\" style=\"margin: 0px; padding: 0px\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_preg_replace_POST_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "chr(47) . $array[2] . chr(47) . chr(101),"
    condition:
        $s0 and $s1
}

rule php_backdoor_preg_replace_POST_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace(\"/./\\x65\",stripslashes(@$_POST["
    condition:
        $s0 and $s1
}

rule php_backdoor_preg_replace_xor_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "^"
        $w0 = "new RegExp"
        $s1 = "\"^\""
        $s2 = "/e\","
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule php_backdoor_preg_replace_xor_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\"^\""
        $s1 = "preg_replace(\"\\"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_pregreplace_001 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = /'p('\.'\s)?r[preglac_]{0,13}[\s]*'[\s]*\.[\s]*['][preglac_'\.\s]{2}/
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "preg_replace(\"|w|e\","
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "*/ei\",str_replace"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x70\\x72\\x65\\x67\\x5f\\x72\\x65\\x70"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pregreplace_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "@preg_replace(\"\\x"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_006 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pregreplace_006_01 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\\160\\162\\145\\147\\137\\162"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_008 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "preg_replace(\"|1|e"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_009 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "= 'pre' . 'g_replace';"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_009_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$image = \"101 118 97 108"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pregreplace_010 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "='/e';$"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_011 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "; @error_reporting(0); $zend_framework("
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_012_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "=\"/\\x2e\\x2a/\\x65\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_012_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\\57\\56\\52\\57\\145"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_013 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "strrev('ecalp"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_014 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "preg_replace(base64_decode(base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pregreplace_015 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "@preg_replace('/(.*)/e', @$_REQUEST['"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pregreplace_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "<?php @preg_replace($_SERVER["
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_017 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "=Array('' .'preg_repla' .'ce'); "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pregreplace_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "lgjqbj&3(6+;6y!$>::&%}\"!0|6&3(6+;6x%2$p}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pregreplace_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "('//e',${\"_REQ"
    condition:
        $s0 and $s1
}

rule php_backdoor_pregreplace_020 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER[HTTP_ACCEPT_ENCODING] =="
        $s2 = "\", $_SERVER[HTTP_ACCEPT_CHARSET], $"
        $s3 = "\" ? @preg_filter(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_pregreplace_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$marker = \"cde:::\";"
        $s4 = "function check_image_c()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_pregreplace_022 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = /HTTP.1.1 404 Not Found[^;]+;[\s]*exit\(\);[\s]*\}[\s]*else[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*['\"\\]+p['\"\\]+[\s]*\.[\s]*['\"\\]+r['\"\\]+[\s]*\.[\s]*['\"\\]+e['\"\\]+[\s]*\.[\s]*['\"\\]+g['\"\\]+[\s]*\./
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_pregreplace_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_SCHEME'];"
        $s2 = "\"\\160\\162\\145\\147"
        $s3 = "\"\\57\\56\\52\\57\\145\";"
        $s4 = "\"\\163\\164\\162\\164\\162\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_priv8_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Priv8-shell-coded-"
    condition:
        $s0 and $s1
}

rule php_backdoor_priv8_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Shell Priv8</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_priv8_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "DQppZihpc3NldCgkX0dFVFsibm9vYi"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_priv8_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$unhex = chr(hexdec($hex));"
    condition:
        $s0 and $s1
}

rule php_backdoor_pro_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "]}=array(\"wp-config.php\",\"wordpress/wp-config.php\",\"configuration.php\",\"blog/wp-config.php\",\"joomla/configuration.php\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_ptemp_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents('_ptemp','<?php '."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_r57shell_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "r57"
        $s1 = "$name='r57';"
    condition:
        $s0 and $s1
}

rule php_backdoor_r57shell_001_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "/*  r57shell.php -"
    condition:
        $s0 and $s1
}

rule php_backdoor_r57shell_001_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "r57"
        $s1 = "$r57=\"7b17W9tIsjj8f54n3"
    condition:
        $s0 and $s1
}

rule php_backdoor_r57shell_001_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "r57"
        $s1 = "with md5, default is 'r57'"
    condition:
        $s0 and $s1
}

rule php_backdoor_r57shell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "@chmod($_POST"
        $s2 = "r57"
        $s3 = "if(($_POST['cmd']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_r57shell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "r57"
    condition:
        $s0 and $s1
}

rule php_backdoor_r57shell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FJzHkqPatkU"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_r57shell_005 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "echo \"r57shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_r57shell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "jsNCj8+';eval(base64_decode('JF9YPWJhc2U2NF9kZWNvZGUoJ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_r57shell_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7f1rd9tIkiiKfvda/g8wRl0gqyiKT0mUTJXesmS9rJdl2d4ckARJWCTBAkhJ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_r57shell_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "$auth"
        $s4 = "$pass"
        $s5 = "e(base64_decode('7f3pets60jCK/n7zPLkHRu23Ja0ly6IGj7E7nod4SGRbHpJ8"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_randomuploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "array(\"dwr\",\"temp\",\"htdata\",\"docs\",\"memory\",\"limits_data\","
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_rcshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\"SEARCH TABLES<br>COMMA (,) SEPARATED<br>LEAVE EMPTY FOR ALL\""
    condition:
        $s0 and $s1
}

rule php_backdoor_register_tick_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "register_tick"
        $s2 = "declare(ticks=1); @register_tick_function($ {'_POST'}/*"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_register_tick_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "register_tick"
        $s2 = "; @register_tick_function(${\"_POST\"}{"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_remote_execution_001 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "('<?php '.$"
        $s2 = /if\(\$\w+\s*\=\s*\$this->\w+\(\$_SERVER\)\)\{/
        $s3 = /\$this->\w+\s*=\s*'create';/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_rename_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "0444);"
        $s5 = "@chmod("
        $s6 = ".suspected'))"
        $s7 = "rename("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_rename_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "if (file_exists(\"../.htaccess\")) unlink (\"../.htaccess\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_rename_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = ".php.suspected\")) rename(\""
        $s4 = " = fread($file, filesize(\".."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_request_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "$_FILE(stripslashes($_"
    condition:
        $s0 and $s1
}

rule php_backdoor_request_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = "$req['ab']($req['bc'],"
    condition:
        $s0 and $s1
}

rule php_backdoor_request_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = "({$_REQUEST["
    condition:
        $s0 and $s1
}

rule php_backdoor_request_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "$_REQUEST[fun]($_REQUEST[id_polls"
    condition:
        $s0 and $s1
}

rule php_backdoor_request_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "'a'.'ss'.'ert'"
        $s2 = "(stripslashes($_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_request_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "md5(@$_COOKIE"
        $s3 = "@$_REQUEST["
        $s4 = "@$_(stripslashes"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_request_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "array($_POST["
        $s2 = "array_walk($arr,"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_request_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "${''.'_REQUEST'}; if (isset($"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_009 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = /if[\s]*\([\s]*@[\s]*\$_COOKIE[\s]*\[[\s]*.[\w]+.[\s]*\][\s]*\)[\s]*\([\s]*\$_[\s]*=[\s]*@[\s]*\$_REQUEST[\s]*\[.[\w]+.\][\s]*\).@[\s]*\$_[\s]*\([\s]*\$_REQUEST[\s]*\[.[\w]+.\][\s]*\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_010 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = /\$_REQUEST\[\\"\w+\\"\].\?.\$_REQUEST\[\\"\w+\\"\]\(\$_REQUEST\[\\"\w+\\"\]\)/
    condition:
        $s0 and $s1
}

rule php_backdoor_request_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "if ($_REQUEST['"
        $s2 = "['a']&&$_REQUEST['b']"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_request_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "<?php error_reporting(0);"
        $s3 = "register_tick_function"
        $s4 = ", base64_decode($_REQUEST['"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_request_013 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "<?php error_reporting(0);"
        $s3 = "=array(base64_decode($_POST['id']));$arr2=array(1);array_udiff($arr, $arr2,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_request_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "exec('wget ' . $url);"
    condition:
        $s0 and $s1
}

rule php_backdoor_request_015 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "(stripslashes($_REQUEST"
        $s2 = "']('$_',$_REQUEST['"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "$class = $this -> aes_decrypt($encrytion_block, $cryption_key);"
        $s4 = "eva"
        $s5 = /base64_decode\(/i
        $s6 = "$class = $this -> aes_decrypt($encrytion_block, $cryption_key);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_request_017 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "${\"_REQUEST\"}[\""
    condition:
        $s0 and $s1
}

rule php_backdoor_request_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = "$toeval=$_REQUEST["
        $s3 = "eval(str_rot13(base64_decode($toeval)));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_request_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "tools_xnl($_REQUEST[\"k\"])){$"
        $s4 = "s_xnl .= \"7\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_request_019_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "tools_xnl($_REQUEST[\"k\"])){$"
        $s4 = "ls_xnl .= \"e\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_request_019_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "tools_xnl($_REQUEST[\"k\"])){$"
        $s4 = "$DFT_tools_xnl == $DET_tools_xnl($_REQUEST[\"k\"]))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_request_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "=`{$_REQUEST['"
    condition:
        $s0 and $s1
}

rule php_backdoor_request_021 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "@require(stream_get_meta_data($"
        $s4 = "base64_decode(rawurldecode((urlencode(urldecode($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_request_022 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "$res = $filter1('', $filter2($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_request_023 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo"
        $s3 = "fopen($"
        $s4 = "fwrite(fopen($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_request_024 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = /if[\s]*\([\s]*\$[\w]+[\s]*=[\s]*@\$[\s]*\{[\s]*._REQUEST.[\s]*\}[\s]*\[[\s]*.[\w]+.[\s]*\][\s]*\)/
    condition:
        $s0 and $s1
}

rule php_backdoor_request_keys_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "array_keys($_REQUEST"
        $s2 = "current(array_keys($_REQUEST)),-2,1)) -"
        $s3 = "strrev(STR_PROGRESS_CONSTANT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_request_keys_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "array_keys($_REQUEST"
        $s2 = "current(array_keys($_REQUEST)),-2,1)) -"
        $s3 = "$SERVER_UNIQUE_LOAD_BALANCE(current"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_request_keys_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = "array_keys($_REQUEST)[0];"
    condition:
        $s0 and $s1
}

rule php_backdoor_request_keys_003_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "array_keys($_REQUEST"
        $s2 = "header('Location:"
        $s3 = "$tr = @array_keys($_REQUEST)[0];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_reverseshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "ssap_htua"
        $s2 = "naMseliF' = noitca_tluafed"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_reverseshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "array(\"pipe\",\"r\"),1=>array(\"pipe\",\"w\")"
        $s2 = "\"export TERM=xterm;PS1='\\$PWD>';export PS1;/bin/sh -i\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_reverseshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "chmod("
        $s2 = "ExecCGI"
        $s3 = "IyEvdXNyL2Jpbi9wZXJs"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_reverseshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "fsockopen($ip, $port"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_rfi_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "system($_GET[\"a3kfj39f"
    condition:
        $s0 and $s1
}

rule php_backdoor_rssinit_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "private $_cms = null, $_path = null, $_init = null, $_site = null, $_cmstime = null,"
    condition:
        $s0 and $s1
}

rule php_backdoor_Ru24PostWebShell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "passthru; // system, exec, cmd"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_safe_mode_bypass_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "Command Shell</font></b><br>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_script_injection_012 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "file_put_contents($_SERVER[\"SCRIPT_FILENAME\"]"
    condition:
        $s0 and $s1
}

rule php_backdoor_sdec_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "gzuncompress(@$vlm(@sdec"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_secwarshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "$action = '?action=FucK';"
    condition:
        $s0 and $s1
}

rule php_backdoor_shaesx_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "include(\"{$eb}.$algo\");"
        $s3 = "@ini_set"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_shaesx_001_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "include(\"{$eb}.$algo\");"
        $s3 = /error_reporting\([^;]*0[^;]*\);[\s]*(@ini_set[^;]+\);[\s]*){1,2}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shaesx_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "(\"$apikey\"),"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_shaesx_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "(!$"
        $s3 = "unlink"
        $s4 = "checkClass"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_shaesx_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "$genpass"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_shaesx_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "include(\"{$eb}.$algo\");"
        $s3 = "isset($_REQUEST[\"test_url\"])"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shaesx_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "str_replace('!$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_shaesx_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "function wp_cd($fd"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_shaesx_008 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "global"
        $s3 = /error_reporting\(0\);[\s]*global \$[\w]+;[\s]*\$[\w]+[\s]*=[\s]*._shaesx[^>]+\$len[\s]*>[^>]+unlink\(...eb...algo[^;]+\);[^\}]+\}[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shaesx_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "_shaesx_"
        $s2 = "include(\"{$eb}.$algo\");"
        $s3 = "if ($shema == 1) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shellexec_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "@system($x);exit;"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_001_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(\"JHJlZiA9ICRfU0VSVkVSWydIVFRQX1VTRVJfQUdFTlQnXTsNCiRrZ"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_001_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "{@system("
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_001_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "if(isset($_REQUEST['cmd'])){"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_001_006 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document."
        $s1 = "Shell_Exec($cmd)"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = ";system($cmd);echo \"</pre>\";die;"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo 'DarkCrewFriends';"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$cmd = \"grep -F 'Location:' $filename | rev | cut -f2"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "= shell_exec2(\"pwd\", $_POST['verify']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_shellexec_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "])) echo @shell_exec(@base64_decode($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shellexec_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$_POST"
        $s4 = "shell_exec(\"$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_shellexec_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$_POST"
        $s4 = "exec('ps ax|grep"
        $s5 = "exec('crontab"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_shellexec_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "trim(@file_get_contents('/proc/"
        $s6 = "shell_exec(\"ps a\")));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_shellexec_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "shell_exec($cmd));"
        $s6 = "exec($cmd, $stdout);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_shellexec_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = ">Shell info<"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "<?php $a = file_get_contents('http://"
        $s4 = ",$a);shell_exec('chmod 0777 /tmp/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_shellexec_013 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "`$_"
        $s3 = /=`\$_POST\[[\w]+\]`/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shellexec_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "{var_dump(shell_exec('curl -qs"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shellexec_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "$_=\"\";$_=\"'\";$_=($_^chr"
    condition:
        $s0 and $s1
}

rule php_backdoor_shellexec_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$_POST"
        $s4 = "shell_exec($"
        $s5 = "updateCwd(response.cwd)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_shellexec_017 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "var_dump($"
        $s4 = "md5(@$_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_shellexec_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "LUnHEq24Ef2aqRnvLvlFXpFmznlc5AwiX"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_shell_dropper_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "}else{echo \"SORRY KILLED\\n\";}"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_shell_dropper_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "error_reporting(0)"
        $s3 = "($_REQUEST['xo'])"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shell_dropper_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JFVlWHBsb2lUID0gIlN5MUx6TkZRS3l6Tkw3RzJWMHN2c1lZdzlZcEx"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shell_get_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "shell_get.php?"
    condition:
        $s0 and $s1
}

rule php_backdoor_shell_get_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "localdate"
        $s2 = "if(substr(md5($"
        $s3 = "){eval($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shell_get_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = "echo"
        $s3 = "// check if shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_shell_get_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "echo \"gabisa"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_shell_get_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "echo touch(dirname(__FILE__)."
        $s4 = ").chr(rand("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_shell_get_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$output = shell_exec($_GET"
        $s4 = "$output = shell_exec($_GET['cmd']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_shellfinder_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "$check = array(\"/wso.php\",\"/up.php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_shellfinder_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "$shell2 = explode(\"\\n\",$shell);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_shor7cutuploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SHOR7CUT | SIMPLE UPLOAD"
    condition:
        $s0 and $s1
}

rule php_backdoor_simple_file_manager_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "is_deleteable' => $allow_delete && ((!is_dir($i) && is_writable($directory)) ||"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_SimShell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SimShell - Simorgh Security MGZ</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_spider_antivirus_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo antivirus($dir,$exs,$matches) ? '<div></div>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_spidershell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Spider PHP Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_spidershell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "setcookie('admin_spiderpass"
    condition:
        $s0 and $s1
}

rule php_backdoor_sslChecker_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$sslChecker($getUrl,'e'."
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_str_replace_POST_001 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = /str_replace\([^\)]+,.[\w]+.\);[\s]*@\$[\w]*\(\$_POST\[[\w]+\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_str_rot13_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_rot13("
        $s1 = "str_rot13(strrev("
    condition:
        $s0 and $s1
}

rule php_backdoor_str_rot13_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "'str_r'.'o"
    condition:
        $s0 and $s1
}

rule php_backdoor_str_rot13_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_rot13("
        $s1 = "'riny"
    condition:
        $s0 and $s1
}

rule php_backdoor_str_rot13_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "('::r');"
        $s2 = "'.#"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_str_rot13_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "riny"
        $s4 = "\\k65\\k76\\k61\\k6P\\k28\\k67\\k7N\\k69\\k6R\\k66\\k6P"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_str_rot13_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "assert_options("
        $s3 = "assert_options(ASSERT_WARNING, 0);"
        $s4 = "assert_options(ASSERT_QUIET_EVAL, 1);"
        $s5 = "###=CACH"
        $s6 = "END=###"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_str_rot13_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "$str_data = \""
        $s5 = "$func = str_rot13(\"onfr64_qrpbqr\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_str_rot13_uploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "vffrg(\\$_CBFG['_hcy']"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_str_rot13_uploader_001_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "pbcl(\\$_SVYRF"
    condition:
        $s0 and $s1
}

rule php_backdoor_Stupidc0de_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "Stupidc0de"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_sv1_0_1_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = "echo @$GLOBALS[$GLOBALS["
        $s3 = "] = \"\\x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_sv1_0_1_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = ",);echo@$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_symlinksa_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "DQpBZGRUeXBlIHR4dCAucGhwDQpBZGRIYW5kbGVyIHR4dCAucGhw"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_symlinksa_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "cin\",0755);"
        $s3 = "$write = fwrite ($file ,base64_decode($config));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_symlinksa_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "@symlink('/home/' . $user . '/public_html/wp-config.php', $user"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_symlinksa_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "(\"cGFjaw==\");"
        $s3 = "(\"aGV4MmJpbg==\");"
        $s4 = "(\"Y3JlYXRlX2Z1bmN0aW9u\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_symlinksa_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "Copyright By Con7ext"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_symlinksa_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "},\"safe_mode = Off"
        $s4 = "]},\"Options +FollowSymLinks "
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_system_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "@system("
    condition:
        $s0 and $s1
}

rule php_backdoor_system_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "@system(base64_decode('a2lsbGFsbCAtOSA=').basename(base64_decode("
    condition:
        $s0 and $s1
}

rule php_backdoor_system_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "system(\"$_GET"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "$pass=urldecode($_COOKIE['pa'])"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "system($_"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo \"<pre>\"; system($payload);"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_006 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "system(base64_decode"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "));}elseif(function_exists('call_user_func')){call_user_func('system',"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "grep -oP '(?<=ESTABLISHED )([0-9]+)'|head -1`;wget"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "print"
        $s3 = "if(md5($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_009_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "$_GET"
        $s2 = "print system($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "$sonuc = shell_exec($komut) ;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = ".:Cyber Shell (v 1.0):."
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_012 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "<?php system('unzip"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_system_013 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "system("
        $s3 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_REQUEST\[[^{]+\{[\s]*system\([\s]*\$_REQUEST/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "reboot\"] == \"yes\") system(base64_decode(\"cHMgLWVmIH"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "$_GET['cmd'];"
        $s2 = "@file_put_contents($filename,base64_decode($"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_system_016 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo system"
        $s2 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[.[\w]+.\]\)\)[\s]*echo[\s]*system/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "system("
        $s3 = "system($_REQUEST[$cmd]);"
        $s4 = "?><?php $cmd = <<<EOD"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_system_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo system"
        $s2 = "echo system(base64_decode($_GET["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "c3lzdGVtKCRfR0VUWyJ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "system(\"php"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "chr(89).chr(109).'F'.chr(122).chr(90).\"T\".chr(89).chr(48).\"X\".'2'.chr(82).chr(108).chr(89).\"2\".\"9\".\"k\".chr(90).chr(81).chr(61).chr(61)"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_system_022 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo"
        $s3 = /echo[\s]*[^;]+;[\s]*\$[\w]+[\s]*=[\s]*(.[\w]+.\.?)+;[\s]*\$[\w]+\(\$_GET\[[\d]+\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "chr(0x"
        $s4 = "$hook($_POST['cmd']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_system_024 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "system(\"wget http"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_025 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "$_GET"
        $s2 = "(!empty($_GET['abc']))"
        $s3 = "system($_GET['abc']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_026 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "if (!isset($_GET['cmd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_027 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "system("
        $s3 = "])){ echo \"<pre>\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "phpinfo();"
        $s2 = "system($cmd);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "system("
        $s3 = "copy($_FILES["
        $s4 = "multipart/form-data"
        $s5 = "system($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_system_030 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "])){system($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_system_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "system($_POST["
        $s4 = "if($_POST['cmd'])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_system_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "(base64_decode($_REQUEST["
        $s3 = "'s'.'y'.'s'.'t'.'e'.'m';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_shell_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "proc_open($shell,"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_001_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "system(\"wget"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "exec('echo \"./' . basename($file) . '\" | /bin/sh"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "Lj1jaHIoJHZeJGspO2V2YWwoJHopOw=="
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "eval"
        $s2 = "Exec_Run(\"chmod \".$file"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_shell_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "DQokYXV0aF9wYXNzID0gIiI7DQokY29sb3IgPS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_system_shell_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "IIIIIIIII"
        $s2 = "fclose($IIIIIIII"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_shell_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "<title>Uploader"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "$_GET['cmd'];"
        $s2 = "str_replace('@',' ',$x);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_shell_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "!isset($_COOKIE[md5("
        $s2 = "<title></title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_system_shell_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo \"<u>\".php_uname("
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "host encrypt publickey.pub"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "killall -9 perl"
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "$cmd = array(\"wget $url -O "
    condition:
        $s0 and $s1
}

rule php_backdoor_system_shell_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "file_put_contents($"
        $s4 = "@system(\"killall"
        $s5 = "(crontab -l|grep -v crontab;echo;echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_system_shell_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "$_GET"
        $s2 = "document.getElementById("
        $s3 = "<?php echo basename($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_taxonomy_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "function register_and_cache_taxonomy() {"
    condition:
        $s0 and $s1
}

rule php_backdoor_type_juggling_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "$_[+$_]++;"
    condition:
        $s0 and $s1
}

rule php_backdoor_unknownshell_service_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "die('<pre><center>Cant run shell."
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "$_POST['path'].$_FILES['file']["
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_001_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
        $s3 = "echo '<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_001_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GIF8"
        $s1 = "copy($_FILES"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_001_05 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "<title>404 Not Found</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_001_06 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "// Silence is golden."
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_001_07 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
        $s3 = "function printLogin()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_001_08 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "if($_POST['_upl']=='up')"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_001_09 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "if(isset($_POST[\"submit\"])) { if (@copy($_FILES[\"filetoupload\"][\"tmp_name\"], $_FILES[\"filetoupload\"][\"name\"]))"
        $s3 = ") { echo \"<title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_002 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "GIF89a u<?php"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_002_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "<?php @copy($_FILES[file][tmp_nam"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_004 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "unlink($dir.'/wp-feed.php');"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_004_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "'/wp-content/themes/theme.php'"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_006 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "@move_uploaded_file($_FILES[\""
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_007 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = " fopen($_GET['"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "if ($fn==false){echo \"File open error\\n\";die;}else echo \"File open success\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "sendFile($url['host'], $url['path'] . \"?upload=1\", $name, $content);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "str_replace($request_dir,'',$our_dir);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_011 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "fwrite"
        $s2 = "stripslashes($_POST[\"html"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "elseif($_REQUEST[\"myaction\"]==\"dounzip\"):"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "loveLogin() {"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "echo \"FILE UPLOADED TO $destination\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"Hacking Attempt\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_016 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "fopen($_POST['file'],'w"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_017 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "$_FILES['message']['name']"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_020 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "$_FILES['F1l3'"
        $s3 = "$_FILES['F1l3'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_021 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "@move_uploaded_file($userfile_tmp, $abod);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "_sessions_debug_data = base64_decode(preg_replace(array"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "join(\"\\x0A\", array(\""
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_025 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "if(move_uploaded_file($tmpname,$file_path)){"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo('[ok] - [s:'.filesize($_POST['fn']).'] '.$_POST['fn']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_028 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = "$Iraqe  = $_GET['hassan'];"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$res[] = file_get_contents('php://input');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_030 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "$_REQUEST[\"wp_super_hash_nonce\"]=datetime)) {  echo \"<all_ok_doit"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($ups) == $ups_md5 && !empty($HTTP_POST_FILES['uploadfile']"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "error_reporting"
        $s2 = "$cmd = $_POST['cmd'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_035 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "if(isset($_REQUEST['zalivka'])) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_038 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "$result[$root_name] = scan($root_dir);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = ".php\", \"w+\"); fwrite($fo, $cmd1); fclose($fo); ?>"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_041 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "$_FILES['F1l3'"
        $s3 = "echo 'You are forbidden!"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_043 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$f=$_FILES[x];copy($f[tmp_name],$f[name]);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_044 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "$post_data[$upfile] = '@'. $_FILES[$upfile]['tmp_name'].';filename='.$_FILES[$upfile]['name'].';type='.$_FILES[$upfile]['type'];"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_045 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$cmd = \"wget -q \\\"$url\\\" -O $outputfile\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_045_01 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = ">FileDownloader"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_047 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "if($password==\"\"||$filename==\"\"||$body==\"\")"
        $s3 = "echo \"publish success & uploaded\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo \"Error: \" . $_FILES[\"file\"][\"error\"]"
        $s2 = "print \"<a href=\\\"$file_name\\\" target=\\\"_blank\\\">$file_name<"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_049 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "fwrite($fp,\"\\xEF\\xBB\\xBF\".$body);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_050 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "== $hashcode"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_050_01 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "== $hashcode &&"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_051 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@touch($destination, $changeTime);"
        $s2 = "echo \"<b>Done ==> </b><a href='$fullURL' target='_blank'>$user_file_name</a> - \" . $changeTime;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "GET[timeout]&cms=$_GET[cms]&sh=$_GET[sh]&upattern=$_GET[upattern]&upattern2=$_GET[upattern2]\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_053 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "echo '__success__'.$NowSubFolders.'__success__';"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "if (md5"
        $s2 = "isset($_REQUEST[cmd]"
        $s3 = "file_put_contents(\"$name\",$a);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_055 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@extract ($_REQUEST); file_put_contents"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_056 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "__FILE__"
        $s2 = "if (!file_exists(__FILE__)){echo \"self deleted\\n\";}else{echo \"self NOT deleted2\\n\";}"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_056_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "__FILE__"
        $s2 = "written%3Dfwrite%28%24fp%2C%24fdata"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_057 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "= base64_decode(\"d2dldCBodHRw"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_058 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$dim.$im['name']);echo\"Done: \".$dim.$im    "
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if ($_POST[\"pt\"]==\"\"){$uploadfile = $_FILES[\"file\"][\"name\"];}"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_060 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "$ufile )) { echo \"<b>Uploaded !!!</b>\" ; } else { echo"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_061 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "Echo \"<script>alert('upload Done');"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_062 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "if(isset($_GET['bataboom'])){if(isset"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_063 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo '<input type=\"file\" name=\"file\" size=\"50\"><input name"
        $s3 = "if(@copy($_FILES['file']['tmp_name'], $_FILES['file']['name'])) { echo '<b>Upload"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_063_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo '<input type=\"file\" name=\"file\" size=\"50\"><input name"
        $s3 = "echo exec($cmd);"
        $s4 = "$cmd=$_GET['cmd'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_064 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"<a href=\\\"$file\\\">$file</a>\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_065 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "if (password==pass1){alert(' yessss"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_067 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$pass=@md5($_POST"
        $s2 = "if ($error == UPLOAD_ERR_OK) {"
        $s3 = "if($pass==$me)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_068 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo \"<b>Uploaded Successfully"
        $s2 = "live = md5(md5(md5($_GET"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_069 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "<script>alert('Sukses Upload BOSS"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_070 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "curl_get_from_webpage($"
        $s4 = "curl_get_from_webpage_one_time($url,$proxy"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$out=fopen($save_to, \"wb\");while ($chunk"
        $s2 = "php');unlink($_SERVER['SCRIPT_FILENAME']);?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_072 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "<option value=../../../../../../../../../..>10</option></select><br/><br/>"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_073 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "\",\"a+\"); @fputs($"
        $s3 = "@strpos($"
        $s4 = ":ptth\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_074 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo \"<h1><a href='$fullpath'>OK-Click"
        $s3 = "if (@copy($files['tmp_name'], $fullpath)) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_075 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo\"<center><b>Done ==> $userfile_name"
        $s2 = "if($_GET['up']){"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_075_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo\"<center><b>Done ==> $userfile_name"
        $s2 = "echo '<center><font color=\"Red\" size"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_076 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo\" <a href=$userfile_name><center><b>Sucess Upload :D ==> $userfile_name</b></center></a>\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_077 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if ($mode=='upload') {"
        $s4 = "echo $_FILES[\"filename\"][\"name\"];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_078 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "shell = @file_get_contents(\"$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_079 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "curl_init (\"$target/wp-admin"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_080 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = ">Uploader by Rabbit"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_081 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents($_GET['fpath'], base64_decode($_REQUEST['data'])"
        $s4 = "die('!~'.'!'.$_GET['fpath'].'!'.'~!');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_082 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "Z-Pong:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_083 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "// Mr.CrazyweB"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_084 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "setcookie(md5($_SERVER['HTTP_HOST']), $"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_085 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$res=url_get_mini($url_to,"
        $s2 = "$wrdir.\"/\".$wrpre.\"_\".md5($secretkey"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_087 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"<h1>Not Found</h1>"
        $s4 = "echo \"<a href=\\\"http://\".$_SERVER[\"HTTP_HOST\"].str_ireplace($ss, $_FILES[\"filename\"][\"name\"], $_SERVER"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_088 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$errno,$errstr,$errfile,$errline){array_map(create_function('',$errstr),array(''));}"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_089 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "mkdir("
        $s4 = ".\"\\n\";"
        $s5 = "){unlink($"
        $s6 = ", 0777);"
        $s7 = "php')) die();"
        $s8 = "php', w); fwrite($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_uploader_090 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('hZFha8IwEIa/C/6HEgQ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_091 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"hVVtk5pIEP5sqvIfJpZ1A3uIaHT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_092 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "file_put_contents($fuckfile,base64_decode"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_093 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo \"<h1><a href='$fullpath'>OK-Click"
        $s3 = "echo '<html><head><title>Upload files"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_094 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "if ( @copy('https://paste"
        $s2 = "echo \"Copy success!\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_095 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".chr("
        $s4 = "]);file_put_contents("
        $s5 = ",'<?php '.$m);include("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_097 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "$content = file_get_contents($file);"
        $s2 = "if(isset($_GET['check'])){"
        $s3 = "file_put_contents($_GET['name'], $content);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_098 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$keylog = $_POST['inp'];"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_099 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "modules/simpleslideshow/uploadimage.php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_100 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "hack"
        $s5 = "index.php?option=com_"
        $s6 = "ot infected"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_101 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "(\"<br>Done!<br>\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_102 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if($nend > $end){ $nend = $end; }"
        $s4 = "$sitemap .= '<url><loc>'.$link.'</loc><mobile:mobile/></url>';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_103 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "unlink(str_replace("
        $s4 = "else { $result = \"SUCCESS IN\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_104 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "?(@copy($_FILES[x][tmp_name],$_FILES[x][name])):0):0;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_105 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Unzip a zip file to the webserver</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_106 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "move_uploaded_file($nemo"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_107 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "$current . \"&mode=upload' method = 'POST' ENCTYPE='multipart/form-data'>\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_108 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "</form>';if(isset($_POST['g'])"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_109 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo '<a href='.$file."
        $s4 = "echo(\"FILE"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_110 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "echo \"<!-- 'filename.php','chmod')\\\"><font color=green"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_111 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "@chmod($"
        $s2 = ">file $values is empty!</div><br/>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_112 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(gzuncompress(str_rot13(base64_decode('a5x6Q9FXwzAUfbZfZLkM"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_113 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "file_put_contents(@$_SERVER[HTTP_FILENAME],base64_decode(@$_SERVER["
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_114 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "print \"OK\";"
        $s2 = "touch($self.DIRECTORY_SEPARATOR.$_FILES[\"uploadFile\"][\"name\"], $time);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_115 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "move_uploaded_file($_FILES[file][tmp_name], $script_directory"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_116 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$uploadContents = preg_replace(\"($md5 != \\\"(.*?)\\\")\",\"$md5 != \\\"\".$newMD5.\"\\\"\",file_get_contents(\"upload.php\"));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_117 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo 'status_ok:'.dirname(__FILE__).'/'.$_FILES[\"pictures\"][\"name\"];"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_118 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "unlink(MyFileName());"
        $s2 = "components"
        $s3 = "wp-content"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_119 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "return \"/wp-"
        $s2 = "$user_agent = $_SERVER['HTTP_USER_AGENT'];"
        $s3 = "$result = file_put_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_120 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "if(@copy($_FILES[\"emad\"][\"tmp_name\"],$_FILES[\"emad\"][\"name\"])){echo"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_121 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "unlink(MyFileName());"
        $s2 = "strpos($pDirs[$ind], $ignoreshit)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_122 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "if(!empty($_FILES[file][tmp_name])){copy($_FILES[file][tmp_name],$_FILES[file][name]);}"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_123 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "ORM ENCTYPE=\"multipart/form-data\" METHOD=\"POST\""
        $s3 = "$contents=@fread($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_124 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "}echo '<html><head><title>Upload files"
        $s4 = "if (move_uploaded_file($files['tmp_name'], $fullpath)) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_125 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "if (strpos($userAgent,'Windows"
        $s5 = "f($params['ss'] == 'tt')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_126 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "){?><form enctype="
        $s4 = "<?php if($_GET[\""
        $s5 = "){if (!move_uploaded_file($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_127 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "'........"
        $s2 = "])];} eval($"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_128 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = /echo\s*['\"]\s*<form\s*method=['\"]POST['\"]\s*enctype=['\"]multipart\/form-data['\"]/
        $s4 = "echo '<font color=\"green\">'.$_FILES['file']['name']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_129 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "], 0775) or die"
        $s3 = "= fopen($_POST['folder'].\"/\".$url.\".txt\",\"w\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_130 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "='http"
        $s2 = "$url"
        $s3 = "value='G_Bl0k Security Team"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_131 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".\"/wp-admin/includes/\".\""
        $s4 = "=dirname(dirname(dirname(dirname(__FILE__))));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_132 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "\"){if ($_SERVER['REQUEST_METHOD'] == 'POST') { echo"
        $s3 = "echo \"url:\".$_FILES[\"upfile\"][\"name\"];if(!file_exists($_FILES[\"upfile"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_133 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$II"
        $s4 = "]('ZGlzcGxheV9lcnJvcnM='),$GLOBALS"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_134 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = ">Hacked By"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_135 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "eval(base64_decode(gzuncompress(base64_decode($"
        $s2 = "$J930031B7214E1A8BE6AAA37CC6C1C619"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_137 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "copy($_FILES[\"file\"][\"tmp_name\"]"
        $s3 = "eval(getBot("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_138 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "$nowaddress <input type=file name=elif ><input type=submit value=Upload"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_139 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "$stream=@fopen($_REQUEST['ef'],\"w\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_140 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "move_uploaded_file($userfile, \"entrika.php\");"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_141 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = ">Path To Upload<"
        $s4 = "!empty($_POST['path'])) ? $_POST['path'] : getcwd();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_142 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode(\"ZWNobyAnPGI+Jy5waHBfdW5hbWUoKS4n"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_143 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = ">Eval(PHP):&nbsp;<input type=\"text\" name=\"eval\"><input type=\"submit\" value=\"Execute\"></form><form method=\"get\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_144 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "JE8wTzAwMD0id01USnNkY0ZpVXFvWk5PUGJHcFloQmVqbEh1dHJ5QXZtRHpDZ1JhRVZmU1hRV2tLSXhuTHhGT2Np"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_145 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "move_uploaded_file($devtun,$devshell);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_146 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$data = file_get_contents('php://input');"
        $s2 = "die(substr(md5(microtime()), rand("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_147 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "$Remote_server.\"/Parasite?host=\".$host_name);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_148 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "move_uploaded_file($_FILES['userfile']['tmp_name"
        $s4 = "$uploaddir = \"\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_149 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = ") { echo ' - <span class=\"label label-success\">"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_150 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "target_path)){echo basename($_FILES[\"uploadedfile\"][\"name\"])"
        $s2 = "target_path"
        $s3 = "target_path)){echo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_150_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "target_path)){echo basename($_FILES[\"uploadedfile\"][\"name\"])"
        $s2 = "substr($randStr"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_150_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "target_path)){echo basename($_FILES[\"uploadedfile\"][\"name\"])"
        $s2 = "target_path"
        $s3 = "if($_GET[\"login\"]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_151 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "value=\"xunknown hacktn"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_152 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "?> - Web Explorer</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_153 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "JO Hack3r"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_154 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$file = fread($fh, filesize(\"govno.jpg\"));"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_155 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "/mailer.zip\", fetch_url("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_156 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "function ev(){return __FUNCTION__.\"al\""
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_157 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "$myUpload = new maxUpload();"
        $s3 = "echo '<p class=\"msg\">'.$msg.'</p>';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_159 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "]['tmp_name'],$_FILES["
        $s3 = "]['name']);?>"
        $s4 = "<?php @move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_160 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "]['tmp_name'],$_FILES["
        $s3 = "]);};if($_POST['l']){file_put_contents('editor.php"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_161 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "header(\"Refresh: 0; url=http://\".$mainip.\"/go.php"
        $s3 = "$xml_link = 'http://'.$domain.'/'.$filename.'?sitemap=v&id='.$id;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_162 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = /<\?php[\s]*for\(\$i=0[^{]+\{[\s]*if\(!@move_uploaded_file\(\$_FILES[^{]+\{[\s]*echo \"Can.t upload file: \{\$_FILES/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_163 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "$uf=@basename($_FILES['uf']['name']);if(@move_uploaded_file($_FILES['uf']['tmp_name'],$uf)) echo $uf;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_164 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "sleep(1);"
        $s3 = "type=\"text/javascript\">window.top.window.stopUpload(<?php echo $result;"
        $s4 = "if(@move_uploaded_file($_FILES['myfile']['tmp_name'], $target_path)) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_165 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "else die('<h1>Not Found</h1>"
        $s3 = "$target_path = $this->uploadLocation.basename($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_166 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo '<input type=\"file\" name=\"file\" size=\"50\"><input name"
        $s3 = "echo '<b><br><br>'.php_uname().'<br></b>';"
        $s4 = "Upload GAGAL"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_167 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "if( $_POST['_upl'] == \"Upload\" )"
        $s3 = "$_FILES['file']['name'])) { echo '<b>Ups !!!"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_168 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "if( $_POST['_act'] == \"Upload!\" ) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "(empty($_POST['security_code'])) ?"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_169_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "*/if(!empty($_SERVER['HTTP_USER_AGENT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_04 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "*/$uAs=array("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_05 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "])){header('HTTP/1.0 404 Not Found');exit;}}/*"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_06 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "$a='as';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_07 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "*/if(!empty($_FILES['message']['name']) AND (md5($_POST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_08 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "\".\";$sec=rtrim($sec,\"/\");/*"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_09 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "*/$t=$_FILES['message']['tmp_name'];$name=$_FILES"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_10 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "*/@move_uploaded_file($t, $sec"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_169_11 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "security_code'];if(!$sec)$sec=\".\";$sec=rtrim"
        $s3 = "print '<html><head><title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_172 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "chmod('encrypter_saint_777.php',0755);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_173 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"feature_images/\".$t.$name;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_174 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "move_uploaded_file($_FILES[\"file\"][\"tmp_name\"][$index],\"uploads/\" . $filename);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_175 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], \"Images/\" . $_FILES[\"file\"][\"name\"]);"
        $s4 = "$newfile = uniqid(\"image_\").\".\".$extension;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_176 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "if($dir=='ok'){$ndir=dirname(__FILE__).'/';}else{$ndir=$_SERVER['DOCUMENT_ROOT'].$dir;}"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_177 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "var_dump(move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],'../' . $_FILES[\"file\"]['name']));"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_178 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo '#Fail';"
        $s4 = "if(move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], \"../assets/carousel/\".$_POST[\"filename\"]))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_179 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "Upload Files:"
        $s4 = "echo \"<script>alert('uploaded :D')</script>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_180 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"Rand(100-100): \" . \"\" . $_FILES[\"file\"][\"name\"];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_181 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "GIF89"
        $s2 = "move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],$dosyaYolu);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_182 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"Upload: \" . $_FILES[\"file\"][\"name\"]"
        $s4 = "echo $_FILES[\"file\"][\"name\"] . \" already exists. \";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_183 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"Upload: \" . $_FILES[\"file\"][\"name\"]"
        $s4 = "Devs Hidden Uploader"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_184 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"<body bgcolor="
        $s4 = "echo \"Upload: \""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_185 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"<body bgcolor="
        $s4 = "echo \" Tools\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_186 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"Upload: \" . $_FILES[\"file\"][\"name\"]"
        $s4 = "if(!empty($_POST)&&$_GET"
        $s5 = "echo \"Stored in: \" . $_FILES[\"file\"][\"name\"];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_187 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "$result=unlink(\"upf.php\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_188 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "GIF89"
        $s2 = "echo \"Anjing, upload gagal !\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_189 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if(!Check25Port())"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_190 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "get_magic_quotes_gpc"
        $s4 = "md5($_POST['pwd'])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_191 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "[\"pass\"]) && ($_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_192 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if ($_POST['pass'] == $pass) {$_SESSION['pass'] = $pass;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_193 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if(isset($_POST['pw'])&&$_POST['pw']=="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_194 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "){echo \"special\"; move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_195 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('bVNhb9owEP1cfsXJQyJIJemqaVKBZO1ESqnKSgOlHVkUObEh3pw4ShwGqvjvcxJW0VJLUe"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_196 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('HVlFDsTIFb1KdpmRF2ZSYGRmu82wiczsNtPp08ne0q/69VD+69///Ot"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_197 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7T39X9pI8z8//Xz6P2xTvhc4kfCmrSKctmq1tdWK1uuLD5eQAGkDiUkAqef//p3Z3SSbEFDsy7X3FO5qkp2dmZ2dnZ2Z3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_198 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FZlHEoPYFUW34pm7iwEiQzl0kXPOTFxkkXNcvdULECX+f+/ec6S//vvvv/5Rnmn"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_199 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FZlFEoRYFkW3UrOuDgZoItFSgbs7kw4cEndZfWflBoD/37v3nMi//vvvv/4oz7T"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_200 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"7X37V9tI0ujP7DnzP3Q0/kb2xBjbkEwC2ITwSEgIMBjIi1xWlmVbQbY8kswjWf73W1X9lC"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_201 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FZjXDoPYGYRfJXe7ERf0piS7ovdmOjcRYHrv5enjYCFZMkKcwz8z3/jvv/799z+"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_202 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "ZZJZq5tAGIbvz68IZSAthwNR45IehqLGNZpEk7jdhKqJx13HJeqv70BvCr0bZnm/h+cdoEf2kD2b3ohXcL"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_203 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('pVNdi9swEHw/uP+wEQbFkCZpy0G5x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_204 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = ";eval(gzinflate(base64_decode(rawurldecode(${$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_205 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('hVhrc+JGFv3srdr/4FRNBZx1JXqgYanEW8uCxpZx"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_206 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('7L0HYBxJliUmL23Ke39K9UrX4HShCI"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_207 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('3X1rcyPJceBnKkL/oQcLbQO7IF4kZ4bEkDMcksPhLIfk"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_208 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "\"hello\""
        $s4 = "echo \"testtrue\";"
        $s5 = "$_GET[\"test\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_209 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "{echo 'ok';}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_210 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$II"
        $s4 = "eval(base64_decode('JElJSUlJSUlJSWxsbD0nY3VybF9jbG9zZ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_211 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "SECURITYHELL.INFO // Upload SCRIPT"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_212 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo \"The file \".  basename( $_FILES['uploaded_file']['name'])."
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_213 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "@copy($formfile,$tofile);chmod($tofile,"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_214 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /\$\w+\s*=\s*.ZXZhbChvcGVuc3NsX2RlY3J5cHQo[^;]+;\s*eval\(base64_decode\(\$\w+\)\)\s*;/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_215 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo\"<br><form method=post enctype=multipart/"
        $s3 = "id=k value=upload><br>\";"
        $s4 = "id=k value=upload><br"
        $s5 = "echo \"<br/><br/>Command:<br/>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_215_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo\"<br><form method=post enctype=multipart/"
        $s3 = "id=k value=upload><br>\";"
        $s4 = "$disable_functions = @ini_get(\"disable_functions\");"
        $s5 = "Gagal"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_215_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo\"<br><form method=post enctype=multipart/"
        $s3 = "id=k value=upload><br>\";"
        $s4 = "echo \"Uname :\";"
        $s5 = "echo print Shell_Exec('uname -a');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_215_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo\"<br><form method=post enctype=multipart/"
        $s3 = "id=k value=upload><br>\";"
        $s4 = ">404"
        $s5 = "$disable_functions = @ini_get(\"disable_functions\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_215_05 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo\"<br><form method=post enctype=multipart/"
        $s3 = "id=k value=upload><br>\";"
        $s4 = "php_uname()"
        $s5 = "echo\"<font color=#ffffff>\".php_uname().\"\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_216 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "die(\"ERROR: 7 UNKNOWN"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_217 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "JGNvbnRlbnQ9c3ByaW50ZignPElmTW9kdWxlJXNtb2RfJy4ncmV3cml0ZS5jPiVzUmV3cmknLid0ZUVuZ2lu"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_218 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = ";$path=str_replace(\"up.php\",$_FILES[\"file\"][\"name\"],$url);echo\"Go here : \".$path.\"<br>\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_219 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "md5($_POST['joomla_pass']"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_221 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = "echo"
        $s3 = "error_reporting(0);"
        $s4 = "@unlink(__FILE__);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_222 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if(move_uploaded_file($_FILES['uf']['tmp_name'],$uf)) echo $uf;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_223 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"<h2>Successfully Uploaded Images"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_224 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "CmlmKCFkZWZpbmVkKCJQSFBfRU9MIikpCnsKICAgIGRlZmluZSgiUEhQX0VPT"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_225 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "aWYoaXNzZXQoJF9HRVRb"
        $s2 = "Il09PXVwKXtpZihAY29weSgkX0ZJTEVTWyJmIl1bInRtcF9uYW1lIl0sJF9GSUxFU1siZiJdWyJuYW1lIl0pKXtlY2hvIjxiPn"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_226 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "] Anon Aplha File Uploader ["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_227 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if($system == 'pro'){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_228 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "<?php file_put_contents($_POST['error'],$_POST['details']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_229 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "{header('Location: .."
        $s3 = "$fp=fopen($_POST['path'],"
        $s4 = "{echo 'ok';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_230 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec('if curl 127.0.0.1 -o /dev/null 2>/dev/null; then curl -o - http"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_231 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "<?php if(isset($_FILES[\"userfile\"][\"name\"])){ $uploaddir = getcwd()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_232 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0); $wp_db_update = strrev("
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_233 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "echo \"Upload Successful"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_234 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "<form action=\"<?php echo $_SERVER['PHP_SELF'].'?Nfiles='.$Nfiles; ?>\" method=\"post"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_235 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "echo \"AnonymousFox"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_236 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = ");system("
        $s3 = ");shell_exec("
        $s4 = ");passthru("
        $s5 = ");pcntl_exec("
        $s6 = ");exit;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_237 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo \"Error: \" . $_FILES[\"file\"][\"error\"]"
        $s2 = "Bantai !\\\"> </form>\"; if ($_FILES[\"file\"][\"error\"] > 0) { echo"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_238 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "if(isset($_REQUEST['edit']) && $_REQUEST['edit']=='file"
        $s3 = "if((@preg_match(\"/system\\((.*?)\\)/\", $op))&&(@preg_match(\"/<pre>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_239 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "echo @serialize(Array("
        $s2 = "=> @phpversion(),"
        $s3 = ". '/*', GLOB_ONLYDIR);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_240 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "$wsonames = array('lndex"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_241 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "file_get_contents($cgi);"
        $s6 = "file_get_contents($htaccess);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_242 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "mkdir($dir_path, 0777);"
        $s5 = "Client has been activated!"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_243 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "@filemtime"
        $s4 = "@file_get_contents(str_rot13("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_244 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
        $s3 = /error_reporting\(0\);(\s*echo\(['\"]\S+['\"]\)\s*;)?[\s]*if\(isset\(\$_(REQUEST|POST|GET)\[[^]]+\]\)\)[\s]*\{[\s]*echo[\s]*.<form[^}]+copy\(\$_FILES..file.\]\[.tmp_name/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_245 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "@popen($"
        $s4 = "implode(\"\\n\",file($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_246 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "->dispatch('GIF89alxWam9FZlRWYvxGc19VZ29Wb');"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_247 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents($_POST['error'],$_POST['details"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_248 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "ini_set('upload_max_filesize"
        $s3 = "echo $status;"
        $s4 = "$status = \"Archivo subido: \".$archivo.\"\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_249 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
        $s3 = "){if(@copy($_FILES['file']['tmp_name'],$_FILES['file']['name'])){echo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_249_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
        $s3 = "reporting(0);chmod(basename($_SERVER[\"PHP_SELF"
        $s4 = "error_reporting(0);chmod(basename($_SERVER[\"PHP_SELF\"]), 0444);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_249_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
        $s3 = "mail("
        $s4 = "$body=(\"Shell: http:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_250 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "<head><title>Uploader v"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_251 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "strrev(str_replace('^','=',substr($"
        $s4 = "= implode(array_map('chr',array(98,97,115,101,54,52,95,100,101,99,111,100,101)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_252 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "copy($_FILES[\"file\"][\"tmp_name\"]"
        $s3 = ">\"; } echo \"Uploader By"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_254 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "echo \"<br><br><a href=\\\"{$_FILES[\"userfile\"][\"name\"]}\\\" TARGET=_BLANK>{$_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_255 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "$_SERVER[SCRIPT_FILENAME]; touch/*;*/($filename, $time);} ?>\\'); /*');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_256 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "move_uploaded_file($_FILES['userfile']['tmp_name"
        $s4 = "echo \"<form method='post' action='' enctype='multipart/form-data'><select name="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_257 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "=dirname(__FILE__);"
        $s2 = "$codelock_enc="
        $s3 = "JHVybDliID0gJG"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_258 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function tcget($"
        $s4 = "&& isset($recover_file) && isset($recover_file_url)){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_259 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "gagal"
        $s3 = "Auto Xploiter"
        $s4 = "Auto Xploiter\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_259_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "gagal"
        $s3 = "Auto Xploiter"
        $s4 = "(isset($_GET[\"oak\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_260 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if($Mo == 'Mo'){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_261 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "explode('{||}', get_web_page("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_262 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "($_REQUEST[chr("
        $s3 = "@unlink($"
        $s4 = "@array_diff_ukey(@array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_263 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "eval(htmlspecialchars_decode(gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_264 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "if(is_writable($root))"
        $s3 = "if(@copy($_FILES["
        $s4 = "<b><u>$web"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_266 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "foreach ($GLOBALS[\"writable_dirs\"] as $wdir)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_267 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "if(@$_GET[\"mygodra\"]){echo '<!--MYGODRA-->"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_268 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "$indexcode);@touch($"
        $s5 = "echo 'indexcode not ok"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_269 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "file_put_contents("
        $s3 = /if\(@?\$_GET\[..x...\]\)[\s]*\{[\s]*@move_uploaded_file\(\$_FILES\[..x...\]/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_270 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "$uploadOk"
        $s4 = "$target_dir"
        $s5 = "<form action="
        $s6 = "if(move_uploaded_file("
        $s7 = "pathinfo($target_file,PATHINFO_EXTENSION);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_272 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "<title>\xd0\x97\xd0\xb0\xd0\xb3\xd1\x80\xd1\x83\xd0\xb7\xd0\xba\xd0\xb0 \xd1\x84\xd0\xb0\xd0\xb9\xd0\xbb\xd0\xbe\xd0\xb2 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x80\xd0\xb2\xd0\xb5\xd1\x80</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_273 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "Uploader</title>"
        $s3 = "<b>GAGAL"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_274 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "isset($_POST["
        $s3 = "(isset($_POST['username']) && md5($_POST['username'])"
        $s4 = "$_POST['where'].$_POST['name'], 'w');"
        $s5 = "$url = $_POST['from'];"
        $s6 = ".'init';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_275 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "echo \"Go COPY from \".$url.\" to \".$_GET['n'].\".zip\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_276 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo dirname(__FILE__);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_277 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "\\x7"
        $s3 = "function http_get($url)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_278 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "ini_get(\"allow_url_fopen\")"
        $s6 = "\"../../wp-load.php\");"
        $s7 = "\"?pc=\".$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_278_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "function dirToArray($dir)"
        $s5 = "echo get_option(\"siteurl\");"
        $s6 = "if($_POST['action']=='unlink')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_278_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "function dirToArray($dir)"
        $s5 = "echo get_option(\"siteurl\");"
        $s6 = "if($_REQUEST['action']=='unlink')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_279 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function class_x_i("
        $s4 = "function class_x_i"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_279_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function class_x_i("
        $s4 = "function BASE64_DEC0DE($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_279_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function class_x_i("
        $s4 = "function https_check($custom_scheme"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_279_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "function upfile()"
        $s4 = "function BASE64_DEC0DE"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_280 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "CURLOPT_URL, $_GET["
        $s5 = "chmod($_SERVER[\"DOCUMENT_ROOT\"].'/'.$_GET['path'].'.php',0644);"
        $s6 = "file_put_contents($path, '<?php /*'."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_281 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo $_GET['checkword'];"
        $s6 = "$record = file_get_contents_curl( $sourceurl );"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_282 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "echo '<font color=\"red\">Chmod Gagal.."
        $s4 = "function perms($file)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_283 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "explode('-'"
        $s3 = "if(md5($_POST['password']) !="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_284 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "</form><?php $uploaddir = getcwd ().\"/\";$uploadfile = $uploaddir"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_285 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if(!isset($_POST['cmd']))"
        $s4 = "include($f);"
        $s5 = "unlink($f);"
        $s6 = "file_put_contents($f,'<?php '.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_286 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if(isset($_GET['s'])){echo"
        $s4 = "if(isset($_POST['c'])){file_put_contents($_POST['n'],base64_decode($_POST['c']));}die();}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_287 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "function rwx($"
        $s5 = "function getRequestUri()"
        $s6 = "@chmod($dir"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_288 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "eraseFileForGood("
        $s6 = "filemtime(\"$currentDir/$dir/\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_289 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = ".chr("
        $s4 = "CURLOPT_COOKIEJAR,$GLOBALS[base64_decode(chr("
        $s5 = "if(isset($_REQUEST[base64_decode(chr("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_290 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$_SERVER['DOCUMENT_ROOT']"
        $s2 = "function createFolder($path)"
        $s3 = "function gethttpcnt($url,$username"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_291 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function scan_dir($dir)"
        $s4 = "file_put_contents($output[0]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_292 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "You don't have permission to access \".$_SERVER"
        $s3 = "<a href='$pile' target='_blank'>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_294 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents ($pst_vars['n'],$pst_vars['cmt']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_295 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "function system_start()"
        $s2 = "\"openvd\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_296 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "if($_GET['s4t4n']==\"true\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_298 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "$file=explode(':',base64_decode($_POST['return']));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_299 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = /[\w]+\(\);[\s]*function[\s]*[\w]+\(\)[\s]*\{[\s]*if\(isset\(\$_REQUEST\[.[\w]*.\]\)\)[^\(]+file_put_contents\(\$[\w]*,stripslashes[\s]*\(\$[\w]*\)\);[^\}]+echo[\s]*\$[\w]*;[\s]*exit;[\s]*\}[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_300 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = /\$[\w]*[\s]*=[\s]*file_get_contents\(.[\w]*.\);\$[\w]*[\s]*=[\s]*base64_decode\(\$[\w]*\);[\s]*file_put_contents\(.[\w]*.,\$[\w]*\);include\(.[\w]*.\);unlink\(.[\w]*.\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_301 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "MAKLO UPLOADER"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_302 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "echo \"Return Code: \" . $_FILES[\"file\"][\"error\"] . \"<br>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_303 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "==(string)$val)"
        $s4 = "gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_304 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "echo ($subdir)? url().\"/\".$subdir.\"/editor/save.php\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_305 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "if($_POST[\"v\"]==uploadwoi){if(@copy($_FILES"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_306 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "&checkdomain&host="
        $s5 = "needtoloadsomefiles"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_307 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "XOeZobPmMZk9qPkvKxHwPA+uz5LbSMHlsoRPvOIL/ZsLl/hxInbGQTfnB0uB7A8="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_309 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "jVRtb9s4DP4eIP+BEYqzAzR2OuzDYU3Sa4ukHbZlRZIe7lAMhiIzthDZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_310 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "@system($window);"
        $s3 = "elseif (function_exists('passthru'))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_311 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "fopen(\"$htaccess\", \"w\");"
        $s7 = ".'/wp-login.php';"
        $s8 = "= \"/footer.php\";}"
        $s9 = "preg_replace('/<!--'.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9
}

rule php_backdoor_uploader_312 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "setcookie('current_id',phpversion());"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_313 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = ">SUCCESS UPLOAD : </font><a href='$web$file' target"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_314 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "fopen($NONCE_PATH, \"w\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_315 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "ZXZhbCUyOCUyNnF1b3QlM0IlM0YlMjZndCUzQiUyNnF1b3QlM0IuZ3p1bmN"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_316 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "get_cron_array("
        $s4 = "$info = array_merge($_REQUEST,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_317 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "sLafY7ZtkhIFAWZIdw9IpOlHu7/Yf2RrPdDLf8dh2XBkP8"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_318 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "echo @file_put_contents($_POST["
        $s4 = "]); die(md5(1));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_319 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "LF3HsqXAjvyaiWxY/IEl3nvPcwLvvefrB2G/6IiO7ng4QyWlMiWVS"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_320 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "shell_exec('wget https://phpshell"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_321 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "===base64_decode('cGluZw=='))exit(base64_decode('b2s='));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_322 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$fgood = fopen(__FILE__, 'w');"
        $s2 = "$fgood = fopen($path.$filename, 'w');"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_323 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if (file_put_contents(sprintf('%s/wp-loader.php', $file->getPath()), $loader)) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_324 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "error_reporting"
        $s3 = "x65\\x76\\x61\\x6c\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_325 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "$getCache = base64_decode(\"aHR0c"
        $s7 = "$getindex = file_get_contents($getCache);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_326 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "Ly8gU2ltcGxlIFBIUCBVcGxvYWQgU2NyaXB0O"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_327 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "if (!empty($_FILES) && is_uploaded_file"
        $s6 = "($_FILES[$fname][$tname], $_FILES[$fname][$name]);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_328 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "X-Forwarded-For"
        $s6 = "file_get_contents('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_329 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_put_contents($Name, $"
        $s6 = "$url = \"http://\" . $_SERVER['HTTP_HOST']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_330 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "vVVdb9owFH1epPyHizcpoDUJMKqtkKTTtJZVWrVJdE8IVY5jEo8"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_331 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = /if[\s]*\(move_uploaded_file[\s]*\(\$_FILES\[\"userfile\"\]\[\"tmp_name\"\][\s]*,[\s]*\$uploadfile\)[\s]*\)[\s]*\{[\s]*echo/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_332 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "<?=$_SERVER['SERVER_NAME']?>(<?=@gethostbyname($_SERVER['SERVER_NAME'])?>)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_333 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "Q3JlYXRlX0Z1bmN0aW9u\");$style=$css('',preg_replace(\"/#html/\",\"\",$html));$style();"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_334 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "if(httpcopy($_GET['url'], $_GET['filename'])){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_335 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "fwrite("
        $s5 = /chmod\(\$_SERVER\[.DOCUMENT_ROOT[^\{]+function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[^\}]+\}[\s]*\$[\w]+[\s]*=[\s]*\$_SERVER[^\(]+\(.http/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_336 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "['website']"
        $s4 = "(move_uploaded_file($files['tmp_name'], $fullpath))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_337 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "@ini_set('output_buffering', 0);"
        $s3 = "if($_POST['_login'] == \"LOGIN\" and md5($_POST[\"user\"])"
        $s4 = "echo '<input type=\"text\" name=\"user\" size=\"50\"><input type=\"submit\" name=\"_login\" id=\"_login\" value=\"LOGIN\"></form>';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_338 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "<title></title>"
        $s4 = "if (!is_uploaded_file($_FILES[\"upfile\"][tmp_name])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_339 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "multipart/form-data"
        $s4 = "Not Found"
        $s5 = "<address>Apache Server"
        $s6 = "move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_340 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = ">\";move_uploaded_file(${${"
        $s4 = "\"]});if(${${\""
        $s5 = ">\\n\";@ob_start();error_reporting(E_ERROR|E_WARNING|E_PARSE|E_NOTICE);@ini_set("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_341 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "](__FILE__)){die($GLOBALS["
        $s4 = "[\"SERVER_PORT\"]){return true;}if($GLOBALS["
        $s5 = "(){@eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_342 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "XZFRa8IwFIWfFfwPEQq3BWndujFYdTC3WvcyZtwGW5HQlDSOam2jjabif1"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_343 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "method=\"post\" enctype=\"multipart/form-data\" name=\"u"
        $s3 = "if($_SESSION["
        $s4 = "md5(sha1($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_344 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "if (isset($_GET["
        $s5 = "trim($_REQUEST["
        $s6 = "curl_init('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_345 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$_REQUEST"
        $s2 = "($_REQUEST[chr("
        $s3 = "= chr(60).chr(63).chr(112).chr(104).chr(112).chr(32);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_346 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "PD9waHAgCi8vV2lsbCBjb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_347 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "<a href=$userfile_name><center><b>Sucess"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_348 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "copy($_FILES[\"file\"][\"tmp_name\"]"
        $s3 = "){if(@copy($_FILES["
        $s4 = "if($_GET[\"login\"]=="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_350 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "YzInXSA9IGJhc2U2NF9lbmNvZGUoYmFzZTY0X2VuY29kZSgoc2VyaWFsaXplKCRfU0VSVkVSKSkp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_351 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "preg_match_all("
        $s3 = "if(stristr(__DIR__,\"plugins\")){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_352 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "CiRVZVhwbG9p"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_352_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "Z2V0X3RlbXBfZGlyKCkuYmFzZTY0X2RlY29kZS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_352_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "Ii9zdHMuemlwIik7Cn0KCj8+Cjw/cGhwCgokdXNlciA9IGdldF9jdXJyZW50X3VzZXIoKTsKJHNp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_352_04 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "$dizge ="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_353 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$_GET[\"rdir\"];"
        $s6 = "@chmod($value,0744);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_354 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "\"])) die;"
        $s3 = "curl_setopt($ch,CURLOPT_POSTFIELDS,http_build_query($_POST));"
        $s4 = "$url = 'http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_355 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = /<\?php[\s]*move_uploaded_file\(\$_FILES\[.[\w]+.\][\s]*\[.[\w]+.],[\s]*(.[\w]+\.[\w]+.|\$_POST\[.[\w]+.\])\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_356 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "fopen($url.$_GET["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_357 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "\");if(isset($_REQUEST[\""
        $s4 = "\".php_uname().\""
        $s5 = "\"])){@ini_set(\""
        $s6 = "\"])){move_uploaded_file($_FILES[\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_358 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "$target_url = \"http://$target_host"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_359 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "('','',$"
        $s2 = "ZXN1bHQgPSBjdXJsX2V4ZWMoJG"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_360 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "error_reporting(E_ALL^E_NOTICE);define('O0', 'O');"
        $s4 = "]];}else{echo$GLOBALS{O0}[0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_361 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*file_get_contents\([^;]+\);[\s]*fwrite\(fopen\([^\)]+\),[^\;]+\.[\s]*\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_362 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "IME8p53lyNK0aJ7QwChRwN7VGE9NxLcOZWmPH6o7tvm"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_363 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "if(isset($_FILES['uf']['name'])){$uf=@basename($_FILES['uf']['name']);"
        $s3 = "@basename($_FILES['uf']['name']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_363_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "if(isset($_FILES['uf']['name'])){$uf=@basename($_FILES['uf']['name']);"
        $s3 = "if(@move_uploaded_file($_FILES['uf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_364 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$setting = plugins($_GET[\"query\"],$dimi);"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_365 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "echo"
        $s3 = "$uploaddir.basename($_FILES['uploadfile']['name']);"
        $s4 = "(copy($_FILES["
        $s5 = /enctype=.?multipart\/form-data/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_366 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "multipart/form-data"
        $s4 = ".php_uname()."
        $s5 = "]==up){if(@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_367 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "@copy($_FILES["
        $s4 = "multipart/form-data"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_368 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "echo '<a href=\"?up&path=';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_369 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "echo $name;"
        $s3 = "echo \"file not found\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_370 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "ploader</title></head><body><center><form action="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_371 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "test'){echo 'ok';exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_372 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "]}[0])?true:false):header('Content-Type: image/jpeg');break;case(preg_match(\"/\\.pdf/i\",${${\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_373 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "exit"
        $s2 = "exit;}else{echo \"write_failed\";}}unlink("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_374 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "hex2bin"
        $s4 = "{@file_get_contents(hex2bin($pvar).$_GET['p'].'&h='.$_GET['h']);exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_374_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "hex2bin"
        $s4 = "@file_put_contents($tmp,file_get_contents(hex2bin"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_375 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "$data = @openssl_encrypt($data, \"AES-256-CBC\", base64_decode($key), 0, substr(base64_decode($key),"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_376 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "-c config.json >/dev/null 2>&1 &\");echo $result;if ($result){echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_377 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$_SERVER['DOCUMENT_ROOT']"
        $s2 = "function createFolder($path)"
        $s3 = "$body=$_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_378 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "{')||strstr($"
        $s3 = "preg_match_all('/[<][?]php[\\s\\S]*?[?]>/i',"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_379 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "\"wb\");"
        $s7 = /\$fp[\s]*=[\s]*fopen\([^\)]+php.,[\s]*.wb.\);[\s]*fwrite\(.fp,[\s]*file_get_contents\(.http/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_379_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "<?php file_put_contents("
        $s4 = /file_put_contents\([^,]+,[\s]*file_get_contents/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_380 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "if(isset($_POST["
        $s5 = "</body></html>\";if(isset($_POST['uploaded']))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_381 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "$isInj=file_put_contents($file->getPathname(),$str,LOCK_EX);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_382 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "stream_get_contents($"
        $s5 = "curl_exec($"
        $s6 = "$dump = '<?php"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_383 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "LUnHDrZVDnya0fx7IwftiRw+ZYb"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_384 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "multipart/form-data"
        $s4 = "move_uploaded_file($_FILES['file']['tmp_name'], $uploaddir);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_385 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval (gzinflate(base64_decode(str_rot13(\"ML/EF8ZjRZns"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_386 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "<input type=\"file\" name=\"image\" />"
        $s6 = "<form action=\"\" method=\"POST\" enctype=\"multipart/form-data\">"
        $s7 = /strtolower\(end\(explode\(.\..,\$_FILES\[.[\w]+.\]\[.[\w]+.\]\)\)\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_387 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = ".md5(time()).md5(time())."
        $s5 = "\".json_encode($result).\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_388 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec(\"wget {$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_389 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_get_contents($shell);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_390 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "eval("
        $s2 = "decrypt($"
        $s3 = "chr(ord(substr($"
        $s4 = "oZyincWnlatbWZWeo9adkrLFx9ar"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_391 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZXVlIGFzICRjdXJyZW50X2RpcikNCiAgICB7DQogICAgICAgIGlm"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_392 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$name = trim($_POST['newname']).'.php';"
        $s6 = "touch(__FILE__, filemtime(\"index.php\"));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_393 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(@copy($_FILES["
        $s5 = "md5($_GET["
        $s6 = "multipart/form-data"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_394 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "multipart/form-data"
        $s3 = "dirname(__FILE__).DIRECTORY_SEPARATOR.$_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_395 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@copy($_FILES["
        $s3 = /<\?php[\s]*@copy\(\$_FILES\[[^\]]+\]\[[^\]]+\],[\s]*\$_POST\[[^\]]+\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_396 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "<?php if(md5(@$_REQUEST["
        $s2 = "{$filter1=$_REQUEST['_f1'];$filter2=$_REQUEST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_397 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo\"<br><form method=post enctype=multipart/"
        $s3 = "id=k value=upload><br>\";"
        $s4 = "echo \"<br>DisablePHP=\"."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_398 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "define('MY_BASE_URL', $ShellUri);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_399 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "<b>go suce.!</b><"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_400 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "<b>success</b>-->"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_401 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(@copy($_FILES["
        $s5 = "if(isset($_POST['upload'])) { if(@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_402 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "$zip = new ZipArchive;"
        $s3 = "str_ireplace('.txt','.php'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_403 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$handle = fopen($file"
        $s2 = "ini_set('display_errors',"
        $s3 = "echo \"ok\";"
        $s4 = "@$filename = $_POST['filename'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_403_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$handle = fopen($file"
        $s2 = "ini_set('display_errors',"
        $s3 = "echo \"ok\";"
        $s4 = "if($id == 0)"
        $s5 = "@$id = $_GET[\"id\"];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_404 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "function decode($"
        $s2 = "code = $str_auth->decode($code,"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_405 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "CURLOPT_URL, $_GET["
        $s5 = "}file_put_contents($dir, $data);if(file_exists($dir)){echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_406 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "=gzinflate(ob_get_contents());ob_end_clean();eval($"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_407 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "if(isset($_POST["
        $s5 = "display:none"
        $s6 = "<form method=\"get\">"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_408 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "touch($"
        $s5 = "touch(dirname(__FILE__).'/'.basename(__FILE__),$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_409 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "=base64_decode(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_410 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if (isset($_FILES["
        $s6 = "$_FILES['azzatssins']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_411 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "$_SERVER['REQUEST_SCHEME'] != '' ? $_SERVER['REQUEST_SCHEME'] : 'http') . '://' . $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_412 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = ").GetIP().'-'.base64_encode('http:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_413 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "exec($code,$array);"
        $s6 = "php_sapi_name())"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_415 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "((strpos($get_content, 'confirm:start of editor file') !== false) && (strpos($get_content"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_416 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "function scandirsgml($dir,$arr)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_417 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "if(!empty($_POST['file_upload']))"
        $s2 = "move_uploaded_file($_FILES['f']['tmp_name'], $_FILES['f']['name']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_419 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = ");unlink($"
        $s5 = "&& md5($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_419_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = ");unlink($"
        $s5 = /\$[\w][\s]*=[\s]*...;[\s]*\$[\w][\s]*=[\s]*\$_REQUEST\[...\];[\s]*\$[\w]+[\s]*=[\s]*base64_decode\(\$.\);[\s]*file_put_contents[^\)]+\);[\s]*include\(\$.\);[\s]*unlink\(\$[\w]+\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_419_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = ");unlink($"
        $s5 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_419_04 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = ");unlink($"
        $s5 = /ini_set\('display_errors',[\s]*0\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_419_05 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = ");unlink($"
        $s5 = "&& md5($_POST["
        $s6 = ");die();}}else{"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_419_06 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ",'<?php '.$"
        $s4 = ");unlink($"
        $s5 = "&& md5($_POST["
        $s6 = /if\(file_exists\(\$\w+\)\)\{include\(\$\w+\);unlink\(\$\w+\);\}\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_420 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "chmod(\"jeentel\" , 0755);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_421 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "LUrHDvS4DX6aYDc394Kc3D3uvV0C2"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_422 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "move_uploaded_file($"
        $s3 = "echo file_put_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_423 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "fwrite($resource,date(\"F d, Y / h:i:sa\").\" - \".$_REQUEST[\"delete\"].\" deleted by \".$_SERVER[\"REMOTE_ADDR\"].\"\\n\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_423_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = ">Silentum Uploader"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_424 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Uploader By rizky07</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_425 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "fwrite(fopen($"
        $s5 = "if(isset($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_426 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "echo '[*]Good permission.' . $payload"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_427 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo '"
        $s3 = "str_replace($auth_pass, md5(trim($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_428 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "echo \"testtrue\";"
        $s4 = "@file_put_contents($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_429 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$url = base64_decode('aHR0c"
        $s4 = "content' => http_build_query($_POST),"
        $s5 = "NvZGUucGhw')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_429_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$url = base64_decode('aHR0c"
        $s4 = "content' => http_build_query($_POST),"
        $s5 = "vci5waHA="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_430 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "]=Array(base64_decode("
        $s4 = ");return base64_decode($a[$i]);}"
        $s5 = ");return base64_decode($a[$i]);}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_430_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "]=Array(base64_decode("
        $s4 = ");return base64_decode($a[$i]);}"
        $s5 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_430_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "]=Array(base64_decode("
        $s4 = ");return base64_decode($a[$i]);}"
        $s5 = "set_time_limit(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_430_04 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "]=Array(base64_decode("
        $s4 = ");return base64_decode($a[$i]);}"
        $s5 = "ini_set('display_errors', 0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_430_05 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "]=Array(base64_decode("
        $s4 = ");return base64_decode($a[$i]);}"
        $s5 = "= TRUE;  $GLOBALS"
        $s6 = "if (!isset($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_431 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "if(function_exists(\"unlink\")){"
        $s5 = "$save=fopen($_GET['name'],\"w\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_432 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "str_rot13('svyr_trg_pbagragf');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_433 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "if(function_exists(\"file_get_contents\")){"
        $s7 = "file name : \".$_FILES['file']['name'];"
        $s8 = "if(!empty ($_FILES['file']) and md5(md5(md5($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_uploader_434 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "if(function_exists(\"file_get_contents\")){"
        $s7 = "$username.\"|:|:|\".$password.\"|:|:|\".$_SERVER['REMOTE_ADDR']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_435 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "$_HEADERS = getallheaders();"
        $s2 = "(isset($_HEADERS["
        $s3 = "'.time();"
        $s4 = "file_put_contents($f, $c);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_435_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "$_HEADERS = getallheaders();"
        $s2 = "(isset($_HEADERS["
        $s3 = "= $_HEADERS["
        $s4 = "]('', $_HEADERS["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_435_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "md5(md5(md5($_POST['token_admin'])))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_436 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$targetPath = $_SERVER['DOCUMENT_ROOT'] . $_REQUEST['folder'] . '/';"
        $s3 = "$targetFile =  str_replace('//','/',$targetPath"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_437 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "$zip = new ZipArchive;"
        $s3 = "explode (\"?\",$_SERVER['REQUEST_URI']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_439 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "$file = ($name) ? $name.'.'.$silver : $link_info['basename'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_440 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "header(\"HTTP/1.0 404 Not Found\");"
        $s6 = "$uploadfile = $uploaddir . basename($_FILES['userfile']['name']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_441 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "$php = $srv[\"PHP_SELF\"]; $req=str_replace(array($php,'?'),'',$req);$x=explode('|',$req);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_442 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "</form><?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $tmp_name = $_FILES[\"image\"]; echo $tmp_name; print_r($tmp_name); move_uploaded_file($_FILES['image"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_443 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "ZWNhbHBlcl9ydHM='));eval($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_445 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "strrev('stnetnoc_tup_elif');$c($_SERVER['DOCUMENT_ROOT']."
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_446 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "if(isset($_POST["
        $s5 = "} elseif(function_exists('exec')) { @exec($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_447 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "bajatax"
        $s4 = "$file"
        $s5 = "@unlink(__"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_448 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "multipart/form-data"
        $s3 = "Echo '<center>"
        $s4 = "$cwd = getcwd();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_449 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "@file_put_contents($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_450 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "echo(\"OK\");"
        $s3 = "echo(dirname(__FILE__));"
        $s4 = ",@fgetc($"
        $s5 = "))@fwrite($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_451 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "error_reporting(0);$f=$_FILES["
        $s2 = "];copy($f[tmp_name],$f[name]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_452 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "file_put_contents($log_file_name, base64_encode(serialize($_SERVER)) . PHP_EOL . base64_encode(serialize($_COOKIE)) . PHP_EOL"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_454 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "strpos($_SERVER["
        $s3 = ") { while(!feof($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_455 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "file_put_contents($"
        $s5 = "explode(\"\\n\", $_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_456 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(gzinflate($"
        $s2 = "(128 / 2)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_457 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "404 Not Found"
        $s5 = "if (@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_458 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "LUrXEqs4Ev2aqbn7Uw41QuRxoll82"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_459 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "system($_GET['cmd']); echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_460 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "eval(\"?>\".gzinflate(\"\\x95\\x92"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_461 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(fwrite(fopen(stripslashes($_POST["
        $s5 = ";};}}}else{if(@$_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_462 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "$path.basename($_FILES["
        $s7 = "],$path)){echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_463 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "$_POST[$key] = stripslashes($value);"
        $s3 = /if\(copy\(\$_FILES\[.[\w]+.\]\[.[\w]+.\],\$[\w]+\....\.\$_FILES\[.[\w]+.\]\[.[\w]+.\]\)\)\{/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_464 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "echo '<try_up>';"
        $s6 = "$out.='<changelog>'.strip_tags($plug->sections->changelog).'</changelog>'.\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_465 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "['name'])) echo \"<status_success>\";}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_466 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "http_response_code($"
        $s4 = "copy($_FILES["
        $s5 = "|| is_null($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_467 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@base64_encode(serialize($_REQUEST).\"--\".serialize($_COOKIE).\"--\".$_SERVER['REQUEST_URI']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_467_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@base64_encode(serialize($_GET).\"--\".serialize($_COOKIE)."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_467_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "__DIR__ ."
        $s4 = "serialize(file_get_contents('php://input')).\"--\".serialize($_COOKIE))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_468 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "multipart/form-data"
        $s4 = "echo\"<b>Uploaded</b>-->"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_469 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "'>OK-Click here!</a></h1>\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_470 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if (isset($_FILES[$"
        $s7 = "explode(\";\", strrev("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_471 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "for ($i = 0; $i < $count; $i++) { if(move_uploaded_file"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_472 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "$allowtype = array('txt', 'php',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_473 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "$title = __("
        $s6 = "Uploader'); ?></h2>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_474 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "ep1/qhV+Q1StGLCYh7iL1Ig/9Y4DV8sp18"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_476 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "=\\\".\\\".md5(\\\"$_SERVER[SERVER_NAME]\\\".__FILE__);$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_477 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if (move_uploaded_file($files['tmp_name'], $fullpath)) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_478 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "<title>L3gacy Uploader"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_479 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "multipart/form-data"
        $s3 = "Avinash Kumar Thapa</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_480 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "copy($file, $file_name) or die(\"<b>"
        $s3 = "echo (\"<pre>\" . shell_exec($cmd) . \"</pre>\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_481 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo \"pong\";"
        $s6 = "@storeResource($resource, $_GET[\"dest\"]);"
        $s7 = "$ret = @file_put_contents(sanitizeResourceId($dest), $res);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_482 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "exit;"
        $s4 = "eval(htmlspecialchars_decode(gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_483 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = ".$file."
        $s3 = "\"checked"
        $s4 = "<title>File</title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_484 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$About_4.=@strrev("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_485 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "${base64_decode('R0xPQkFMUw==')}[base64_decode("
        $s3 = ")]}(base64_decode('UEQ5d2FIQUtaV05vYnl"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_486 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "fix $x_path :p\\nUname : \".php_uname().\"\\n"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_487 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "stream_get_contents($"
        $s5 = "curl_exec($"
        $s6 = "explode('##^^@@^^##',base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_488 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "multipart/form-data"
        $s4 = "Not Found"
        $s5 = "[\"name\"])?\"upload sukses\":\"gagal\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_489 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "@assert(str_rot13(\"riny(onfr64_qrpbqr('MKMuoPuvLKAyAw"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_490 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "@file_put_contents(__DIR__.$fileName,$fileContent);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_491 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "<title><?php echo $_SERVER[_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_492 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "jZrHCvRAaYX3Br+DGXMxUwuplcUwC"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_493 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "fwrite($"
        $s5 = /while\(!feof\(\$[\w]+\)\)[\s]*\{[\s]*\$[\w]+[\s]*\.=[\s]*fread\(\$[\w]+,[\s]*\$[\w]+\);[\s]*\$[\w]+[\s]*\+=[\s]*\$[\w]+;[\s]*\}[\s]*\}[\s]*else[\s]*\{[\s]*fwrite\(\$[\w]+,[\s]*\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_494 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "move_uploaded_file($_FILES[\"filename\"][\"tmp_name\"],$_FILES[\"filename\"][\"name\"]);"
        $s4 = "echo \"testtrue\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_495 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "multipart/form-data"
        $s4 = "document.location.href="
        $s5 = "]($_FILES)!=round(0)){if(isset($_FILES)&& $_FILES[_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_496 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".png'"
        $s4 = "($wp2wp("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_497 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "{echo basename($_FILES[\"fname\"][\"name\"]).\"file had be up\";}else{echo \"the page normal\";}"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_498 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "UPLOADER BY GR3Y"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_499 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "if (strpos($result,'.ph') == true)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_500 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = ")){echo basename($_FILES[\"fname\"][\"name\"])."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_501 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo '<input type=\"file\" name=\"file\" size=\"50\"><input name"
        $s3 = "echo '<b>next-hkr!!!"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_502 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if (isset($_FILES["
        $s6 = "echo \"Uploaded:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_503 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "file_put_contents($"
        $s5 = "$_SERVER['DOCUMENT_ROOT'].$_REQUEST['path'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_504 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "copy(\"copy.php\", \"../copy.php\");"
        $s7 = "<br><br><br><a href='$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_505 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "strrev("
        $s4 = "Xhoc41wP3XA+etZlE8"
        $s5 = "eva"
        $s6 = "base64_decode"
        $s7 = "gzinflate(base64_decode("
        $s8 = "strrev("
        $s9 = "Xhoc41wP3XA+etZlE8"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9
}

rule php_backdoor_uploader_506 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7X19X9u4svDf9FOoXnadb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_507 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_path = $_GET['1']; if($_GET['0']==\"UP\"){@file_put_contents(\"$_path/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_507_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Xsam_Xadoo"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_508 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "json_decode(curlGet(\"{$baseapi}install?files={$bank}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_509 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "fwrite("
        $s5 = "$process = fopen( $this->"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_510 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "@md5(file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_511 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(copy($_FILES["
        $s5 = "echo '<b>Upload"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_512 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(@copy($_FILES["
        $s5 = "PHP Uploader - Yacine_Mohamed\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_513 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if(isset($_GET["
        $s7 = "echo '<form"
        $s8 = "if(!empty ($_FILES['uploads'])){move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_backdoor_uploader_514 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$a = $_POST['code'];"
        $s2 = "$file = @fopen($_POST['file'],'w');"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_515 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "move_uploaded_file($_FILES[\"new_action\"][\"tmp_name\"], $do_set ."
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_516 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "[\"\\x64\\x65\\x6c\"]==\"my_code\"){$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_517 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "JGIgPSAiV1VIdENGTnZJU2NXWjBFMXJTSU9ESFYzRng4"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_518 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "if((time()-(int)$xml[q('scd')])>300) $need_remote=true;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_519 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "@assert(str_rot13(\"riny(tmvasyngr(onfr64_qrpbqr(fgeeri('==jC8//3sss"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_520 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = /echo\s*['\"]\s*<form\s*method=['\"]POST['\"]\s*enctype=['\"]multipart\/form-data['\"]/
        $s4 = ";echo \"<form method='POST"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_521 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "WpDJrqNTAAA/dF7EAXVpUjnYrDa7zX4Z0ex"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_523 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "fwrite($"
        $s4 = "if (mail("
        $s5 = ", \"w\") or die("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_524 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "] ==1) {if($_FILES["
        $s5 = "]){move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_525 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "file_put_contents($_SERVER['DOCUMENT_ROOT'].DIRECTORY_SEPARATOR."
        $s4 = "echo \"http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_525_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "fputs($f,$_REQUEST["
        $s2 = "'.'.php',\"w\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_526 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "@unlink(__FILE__);"
        $s5 = "move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_527 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "include_once(base64_decode("
        $s4 = "base64_decode('UnVuVGltZQ==')"
        $s5 = "$_SERVER[base64_decode(\"UkVRVUVTVF9VUkk=\")]) == false"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_528 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "@touch($"
        $s2 = "$wordpress = $filedir.$wordpress_admin;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_529 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "= chr(ord($"
        $s3 = "bVPbjpswEP0AvmLkRmuQtklURX3YAOlD04vUq"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_530 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "@array_map($"
        $s3 = "IGlmKCRfR0VUWy"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_531 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "else if (!$_0 && $_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_532 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "${\""
        $s4 = "file_get_contents(${${\""
        $s5 = "];exec(${${"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_533 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = ")){echo basename($_FILES[\"fnm\"][\"name\"])."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_534 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "&& $_POST['p']=="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_535 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "($name, \"w+\");"
        $s5 = "file_get_contents($_REQUEST["
        $s6 = "file_put_contents($name,$f);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_536 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if (md5($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_537 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "file_put_contents($"
        $s5 = "if ($do_set == base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_538 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "if(!isset($url)){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_539 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "zqxEpqjBbIhOmCgyeojO38g9uXVfM7Z3BiEpPhfvfo2va68NWVZsoSJNEKUtoFd0DZbcz/VolI"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_540 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "require('UploadHandler.php');"
        $s3 = "$strip = array('php', 'phtml', 'php3', 'php4', 'php5', 'php6', 'php7', 'php8', 'php9', 'php10', 'phps', 'shtml', 'asa', 'cer');"
        $s4 = "if( (!isset($_REQUEST['max_file_size'])) || (!isset($_REQUEST['accept_file_types'])) ) {"
        $s5 = "'accept_file_types' => '/\\.(' . $accept_file_types . ')$/i',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_541 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(@copy($_FILES["
        $s5 = "if($_POST['meki']==\"Crot\"){if(@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_542 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "ZWNobyAnPGI+QW1Sb2NreS1E"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_543 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(@copy($_FILES["
        $s5 = "a\" name=\"memek\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_544 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "hex2bin"
        $s4 = "base64_encode($_COOKIE[hex2bin("
        $s5 = "stream_context_create(array(\"ssl\"=>array(\"verify_peer"
        $s6 = "if(strpos(hex2bin($_COOKIE[hex2bin("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_545 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "Permission : <input name=\"perm\" type=\"text\" size=\"4\" value=\"'.substr(sprintf('%o',fileperms($_POST['path'])),"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_546 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if (isset($_FILES["
        $s6 = "header(\"Location: $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_547 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if (!empty( $_FILES["
        $s4 = "echo 'ok!';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_548 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "ini_set('upload_max_filesize"
        $s3 = "if(isset($_POST["
        $s4 = "if(!file_exists($dir))mkdir($dir, 0777"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_549 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "@eval(@base64_decode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_550 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "replace(new RegExp"
        $s4 = "]($_FILES[\"f\"][\"tmp_name\"][$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_551 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "$path_parts = pathinfo(\"$fdownload\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_552 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "\"}.=\"\\x"
        $s3 = "\"}('',''.${\"\\x"
        $s4 = "\"}=\"\\x7d\\x3b${\"\\x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_553 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "$system = $_GET['@']; if($system == '@'){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_554 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "== 0) move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_555 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "echo"
        $s3 = "PGZvcm0gYWN0aW9uP"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_556 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "=tempnam(ini_get('upload_tmp_dir'), \"0\"));$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_557 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "\"]).\"uploaded\";} ?>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_558 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "[chr("
        $s5 = "]) && (empty($pass)||md5($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_559 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "strrev('stnetnoc_');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_560 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "${${\""
        $s2 = ";}if(file_exists(\"\".$_FILES["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_561 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "fwrite("
        $s5 = ".$filePath.'===>success"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_562 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "multipart/form-data"
        $s4 = ",$_FILES[\"0\"][\"name\"])){echo\"Y\";}else{echo\"N\";}}else{echo\"<form method=post"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_563 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "fopen(zip_entry_name($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_564 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_get_contents('php://input');"
        $s4 = "(array)json_decode(gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_565 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "\";if($_POST[\""
        $s3 = "\";}else{echo\"\\x"
        $s4 = "\";}}echo \"\\n\\n\";"
        $s5 = "\"){if(@copy($_FILES[\"\\x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_567 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = /echo\s*['\"]\s*<form\s*method=['\"]POST['\"]\s*enctype=['\"]multipart\/form-data['\"]/
        $s4 = "move_uploaded_file($filetmp,$filename);}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_568 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_POST['cmd']"
        $s4 = "echo_json($data"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_569 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "ini_set('session.save_path',$_GET["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_570 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "$_FILES['Files"
        $s3 = "tmp_name'], $_SERVER[\"DOCUMENT_ROOT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_571 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "fwrite($"
        $s5 = ";echo perms(\"$path/$file\");if(is_writable(\"$path/$file\")||!is_readable(\"$path/$file\"))echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_572 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "(isset($_POST["
        $s4 = "']) && md5($_POST['"
        $s5 = "'){@file_put_contents($_POST['"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_573 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if(isset($_FILES['upload']))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_574 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "fopen('php://input"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_575 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "function create(){return str_ireplace("
        $s4 = "$base64($code));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_576 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "if(empty($_REQUEST['token']))"
        $s3 = ";$body='domain: '.$_SERVER['name'].'<br> data:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_577 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = ")){echo basename($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_578 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "if (move_uploaded_file($file_tmp, $target_dir . $file_name)) {"
        $s4 = "echo \"<h1>File Upload not successfull</h1>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_579 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = ")){echo basename($_FILES["
        $s2 = "[\"name\"]).\"file done\";} echo \"<form enctype"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_580 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if(isset($_POST["
        $s7 = "<input type"
        $s8 = "if(!empty($"
        $s9 = "value=\"upload"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9
}

rule php_backdoor_uploader_581 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset(${"
        $s2 = "])){echo"
        $s3 = "(${\"\\x5f\\x46\\x49\\x4c\\x45\\x53\"}["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_582 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "='domain: '.$_SERVER['name'].'<br>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_583 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "error_reporting(0); $cache=preg_split('/;/', file_get_contents(basename($_SERVER['PHP_SELF'])));$cache=end($cache);for($i"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_584 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$info = pathinfo($filename);"
        $s3 = "if(!is_dir($this->upload_target_dir))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_585 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents("
        $s4 = "include("
        $s5 = "system('rm"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_586 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "dMHeHpIHcAKzE13bhuFha+a392yW6MuqSSJgxydWtsPEgnarFnsDNu3x5+FvEGZU"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_587 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "aWYoaXNzZXQoJF9HRVRb"
        $s2 = "data:image/"
        $s3 = "];eval(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_588 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = ";}else{header(\"HTTP"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_589 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "basename( $_FILES['uploadedfile']['name']);"
        $s7 = "has been uploaded"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_590 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if (!file_exists($"
        $s4 = "@unlink ($file);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_591 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "DZbVlcNQDET/3UWM8ZopZmY7z8zcfxWbAnSkK83MEejl"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_592 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset($_GET"
        $s2 = "echo hex2bin"
        $s3 = "$_POST["
        $s4 = "\"co\".\"py\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_593 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "<form"
        $s5 = "chmod($rename,$chmod);"
        $s6 = "$('dr').click(function(dir)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_594 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "unlink("
        $s5 = "php://input"
        $s6 = "function functi0n"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_595 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = ":foreach(glob($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_596 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "multipart/form-data"
        $s3 = "($_SERVER['REQUEST_METHOD'] == 'POST') { echo \"url"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_597 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if(isset($_POST["
        $s7 = "<input type"
        $s8 = "&& md5($_GET["
        $s9 = "basename($_FILES['fileToUpload"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9
}

rule php_backdoor_uploader_598 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "fputs("
        $s4 = "$_FILES[\"uploadfile"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_599 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "if(isset($_POST["
        $s7 = "<input type"
        $s8 = "if(!empty($"
        $s9 = "move_uploaded_file($_FILES[\"shell\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9
}

rule php_backdoor_uploader_fakegif_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "GIF89a"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_fpc_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$r=$_REQUEST;@file_put_contents($r["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_gen_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$ls = wscandir($cwd);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_gen_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "Send beleberda:"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_gen_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "fwrite(fopen(dirname(__FILE__).'/'.$r['f'],'w+'),$r['b'])"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_gen_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "chmod ($_REQUEST['p1'], $_REQUEST['p2']);"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_gen_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "<a href=\"?x=x\">upload</a>&nbsp;&nbsp;&nbsp;<a href=\"?x=d\">delete</a>&nbsp;"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_gen_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "'],base64_decode($_POST['"
        $s3 = "']){file_put_contents($_POST['"
        $s4 = "if($_POST['"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_gen_007 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "<script>alert('"
        $s2 = "move_uploaded_file($_FILES['uploads']['tmp_name"
        $s3 = "<b>Uploaded !!!</b>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_gen_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo \"Scanning Dork : \".$dork.\"\\n\";"
        $s3 = "fwrite($fp, base64_decode($shell)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_gen_009 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "echo '<form action=\"\" method=\"post\"><input type=\"text\" name"
        $s2 = "echo \"<header class=\\\"page-header\\\"><h1 class=\\\"page-title\\\">Sorry! Page not found!</h1></header>\";"
        $s3 = "><input type=\"submit\" value=\"&\"/></form>';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_gen_010 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "aWYgKHByZWdfbWF0Y2goJy9nb29nbGV8eWFob298bXNufHJvYm90fGJpbmd"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_gen_011 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = /@copy\(@?\$_FILES\[.\w+.\]\s*\[[('\")]?tmp_name[('\")]?\]\s*,\s*@?\$_FILES\[.\w+.\]\s*\[[('\")]?\w+[('\")]?\]\s*\)\s*;\s*(exit;)?/
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_gen_012 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "= file_get_contents('http"
        $s2 = "file_put_contents($_SERVER['DOCUMENT_ROOT'].'/"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_gen_013 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_FILES"
        $s1 = "GAGAL"
        $s2 = "SUKSES"
        $s3 = "@move_uploaded_file"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_gen_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "<meta charset=\"utf-8\"><form action=\"?act=save\" method=\"post\">content"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_gen_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "copy($_FILES[\"file\"][\"tmp_name\"]"
        $s3 = "($file != \".\" && $file != \"..\"&& $file != \".htaccess\"&&!strpos($file,\".\")&&!strpos($file,\"log\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_gen_016 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = /echo ['\"](sukses|SUKSES|gagal|GAGAL)[^;]+;[\s\}]+\?>[\s]*\Z/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_gen_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "(gzinflate(str_rot13(base64_decode("
        $s6 = "aJBfeIMwFMWfLfQ7hFihFjZ979T2bnoZDDZjYqVV1EtQjQkmGZXR7754aH8c"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_gen_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@copy($_FILES["
        $s3 = "echo \"gagal"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_gen_019 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "PD9waHAKCiRmaWxlcyA9IEAkX0ZJTEVTWyJmaWxlcyJd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_gen_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@copy($_FILES["
        $s3 = "<form "
        $s4 = "if($_GET["
        $s5 = "multipart/form-data\"><input type"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_gen_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "system('wget"
        $s5 = "echo '<script>top.location"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_gen_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@copy($_FILES["
        $s3 = "<form "
        $s4 = "if($_POST){ if(@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_gen_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@copy($_FILES["
        $s3 = "<form "
        $s4 = "==\"Upload\"){if(@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_gen_024 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@copy($_FILES["
        $s3 = "<form "
        $s4 = "if( $_POST['_upl"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_group_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$_SERVER['DOCUMENT_ROOT']"
        $s2 = "$text"
        $s3 = "http_"
        $s4 = "fopen($check"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_reporting"
        $s1 = "echo fwrite ($fh, stripslashes($_POST[\"raw_data\"]));"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_POST_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "print(md5(123456));echo file_put_contents($_POST["
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_POST_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "erver"
        $s1 = "<br><h3> Server Script Lister"
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_POST_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "]));echo md5($_POST[\""
    condition:
        $s0 and $s1
}

rule php_backdoor_uploader_POST_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$handle = fopen($file"
        $s2 = "$hajar = $_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "if (fwrite($fp,\"$content\\n\") == FALSE) {exit;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if (@md5($_REQUEST["
        $s2 = "php echo __FILE__;"
        $s3 = "if (file_put_contents($_POST["
        $s4 = "echo $_POST["
        $s5 = "file_get_contents($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "base64_decode(str_replace(\" \",\"\","
        $s4 = "add_action(\"wp_head\", \"wpdsw_add\");"
        $s5 = "file_put_contents($directory.\"/\".$name.\".php\", base64_decode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "value=\"<?echo(@getcwd());?>\">"
        $s3 = "echo \"File was succesfully uploaded!\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "\";}else{print \"info:"
        $s4 = "){echo '<input name=\"userfile[]\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "UEQ5d2FIQUtaV05vYnlBblBHaDBiV3crUEdobFlXUStQSFJwZEd4bFBrWnBiR1VnVlhCc2IyRmtaWElnWW5rZ1JH"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "Simple Backdoor</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if (@md5($_REQUEST["
        $s2 = "$_POST["
        $s3 = "@$cp($_FILES['a']['tmp_name"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if (@md5($_REQUEST["
        $s2 = "$_POST["
        $s3 = "@$get_theme_mod($_FILES['WP_Error']['tmp_name"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_POST_015 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /(\$\w+)\s*=\s*['\"].{64}/
        $s2 = /(142.141.163.145.66.64.137.144.145.143.157.144.145|147.172.151.156.146.154.141.164.145|143.162.145.141.164.145.137.146.165.156.143.164.151.157.156)/
        $s3 = /\\[\d]+['\"];\$[\w]+[\s]*=[\s]*\$[\w]+\(..,[\s]*\$[\w]+\(\$[\w]+\(\$[\w]+\)\)\);[\s]*\$[\w]+\(\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_016 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "echo\"<center><b>Done ==> $userfile_name"
        $s2 = "</b></center>\";}}else{echo'<form method=\"POST\" action=\"\" enctype=\"multipart/form-data\"><input type=\"file\" name="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_017 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "copy("
        $s3 = "$_FILES['file']['name'])) { echo '<b>Upload Complate !!!</b><br>'; } echo '<form action="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_018 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "if($_GET["
        $s3 = "];echo('<textarea style=\"width:100%;height:100%;\" wrap=\"off\">'.$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "preg_match("
        $s5 = "$target_path=basename($_FILES[\"uploadedfile\"][\"name\"]);if(move_uploaded_file($_FILES"
        $s6 = ">file uploaded</font>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_POST_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".chr("
        $s4 = "if(file_exists($index)){@chmod($index,0755);}@file_put_contents($index"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "substr(sprintf('%o', fileperms($_POST['path'])), -4)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_POST_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "else { echo '#0~'; }"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_025 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "='<?php '.$"
        $s3 = "@file_put_contents($tofile,"
        $s4 = "@unlink($tofile);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_026 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "echo \"<a href=$usrfile> $usrfile </a>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "wordpress page is ok"
        $s2 = "<form enctype=\"multipart/form-data\" method=\"POST\"><input"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_029 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "if($_POST['upload'])"
        $s3 = ".php_uname()."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "CURL"
        $s5 = "; if(file_exists($dir)){echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "(md5($_SERVER[\"HTTP_USER_AGENT\"]) == base64_decode("
        $s5 = "if (is_uploaded_file($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_032 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "fwrite(fopen($fname,'w'),$fcode); } }if(isset($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_033 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@scandir"
        $s4 = "<input type='text"
        $s5 = "($_POST['base_dir'])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_POST_035 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_GET\[.[\w]+.\][\s]*\)[\s]*\)[\s]*\{[\s]*echo[^\{]+\{[\s]*if[\s]*\([\s]*copy[\s]*\(\$_FILES\[.[\w]+.\]\[.[\w]+.\][\s]*,[\s]*\$_POST\[.[\w]+.\][\s]*\)[\s]*\)[\s]*\{[\s]*echo\(/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_036 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "$target.basename( $_FILES['uploaded']['name'])"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_037 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$_SERVER['DOCUMENT_ROOT']"
        $s2 = "$text"
        $s3 = "http_"
        $s4 = "disable_functions=none"
        $s5 = "$ini('php.ini', 'w');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_POST_038 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "$_POST[\"pass\"];"
        $s5 = "strtolower(end(explode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "<a href='$url'>Open Shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_040 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "<input type=\"submit\" class=\"d7net_table"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_041 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "if (md5(base64_decode($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_042 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "$path . basename( $_FILES['uploaded_file']['name']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_POST_044 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "$_POST['upl'])&&"
        $s5 = "if(@move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_045 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "KCRmaWxlc1siXHg2ZVx4NjFceDZkXHg2NSJdICE9ICcnKSB7ICRmdWxscGF0aCA9ICRfUkVRVUVTVFsiXDE2MFwxNDFceDc0XDE1MCJdIC4gJGZpbGVzW"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_046 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "if(isset($_POST["
        $s5 = "])){ if(move_uploaded_file($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_047 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "($_FILES[base64_decode(chr("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_uploader_POST_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "move_uploaded_file($"
        $s3 = "multipart/form-data"
        $s4 = "(sha1(md5($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_049 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "move_uploaded_file($"
        $s3 = "multipart/form-data"
        $s4 = "!isset($_COOKIE[md5($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_050 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "UploadFile($_FILES["
        $s3 = "is_uploaded_file($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_051 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "multipart/form-data"
        $s4 = ".php_uname()."
        $s5 = ";if($_POST[\"v\"]==up){if(@copy($_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "input=file_get_contents("
        $s5 = ";@flock($fp,LOCK_UN);@fclose($fp);}}elseif(preg_match"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_053 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@ini_get(\"disable_functions\")"
        $s3 = "Gagal"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "md5($_REQUEST["
        $s6 = "<form"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_POST_055 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "up){if(@copy($"
        $s3 = "php_uname()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_056 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if(is_uploaded_file($_FILES["
        $s6 = "move_uploaded_file($"
        $s7 = "<form method=post"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_POST_057 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "$filename = $_SERVER[SCRIPT_FILENAME];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_058 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if (isset($_FILES["
        $s6 = "$maxfile"
        $s7 = "@move_uploaded_file($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_POST_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if(@$_GET["
        $s6 = ");if($move) {echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_POST_060 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "md5($_GET["
        $s3 = "substr(dirname(__FILE__), 0 , strrpos(dirname(__FILE__),"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_061 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = ";@move_uploaded_file($azx, $name); echo $name;}else{ echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_062 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if(@copy($_FILES["
        $s5 = ");die();}}}else{if(isset($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_063 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JHRvID0gInRlc3RjaGNla0BnbWFpbC5jb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_064 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "])&&md5($_POST[$"
        $s6 = ");}}else{@file_put_contents("
        $s7 = "])&&md5($_POST[$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_POST_065 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "(@copy($_FILES['file']['tmp_name'], $_FILES['file']['name']))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_066 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if(is_uploaded_file($_FILES["
        $s6 = "move_uploaded_file($"
        $s7 = "if($_FILES[\"filename\"][\"size\"] > 1024*6*1024)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_POST_067 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "if (!empty($_FILES["
        $s6 = /move_uploaded_file\(\$_FILES\[.[\w]+.\]\[.[\w]+.\],\$_FILES\[/
        $s7 = /if\(isset\(\$_GET\[.[\w]+.\]\)\)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_uploader_POST_068 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "preg_match("
        $s5 = "form enctype=\\\"multipart/form-data\\\" method=\\\"POST\\\" action=\\\"?path="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_uploader_POST_070 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "__FILE__"
        $s2 = "&& isset($_POST["
        $s3 = "echo ($fname.' deleted successfully! <br"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "multipart/form-data"
        $s3 = ";echo $_FILES["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_uploader_POST_072 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "multipart/form-data"
        $s3 = "echo \"<form"
        $s4 = "]==\"Upload\"){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_uploader_POST_073 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@scandir"
        $s4 = "getcwd ().\"/\".$file.\"/\".$_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_uploader_POST_074 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "echo file_get_contents($_POST["
        $s5 = "file_get_contents(urldecode($_POST["
        $s6 = /if[\s]*\(in_array[\s]*\(\"wp-config\.php\"[\s]*,[\s]*scandir[\s]*\([\s]*\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_uploader_POST_075 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "multipart/form-data"
        $s3 = "echo \"<form"
        $s4 = "{if(@copy($_FILES"
        $s5 = "{$_FILES[\"file\"][\"name\"]}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_vbspiders_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "vbspiders.com"
    condition:
        $s0 and $s1
}

rule php_backdoor_viaWormuploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "function __via_get_dir_file_paths"
    condition:
        $s0 and $s1
}

rule php_backdoor_vpsp_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('vpsp_pwd',"
        $s2 = "define('vpsp_version"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_vpsp_001_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('vpsp_enc_key',"
    condition:
        $s0 and $s1
}

rule php_backdoor_vpsp_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('vpsp_pwd',"
        $s2 = "$GLOBALS['vpsp_pe'] = array"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_vpsp_001_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('vpsp_pwd',"
        $s2 = "(isset($_COOKIE['proxy']))"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_web51_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@file_get_contents(\"http://web.51.la"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Unknown Indonesian H4xx0r"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$shell_fake_name = \""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "[$i] = chr(ord($"
        $s2 = "gzinflate($code($"
        $s3 = "'e64_d'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_003_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "[$i] = chr(ord($"
        $s2 = "gzinflate($code($"
        $s3 = "\"e64_d\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "chr(39).chr(115).chr(121).chr(115).chr(116).chr(101).chr(109).chr(39).chr(41).chr(41).chr(123"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if((isset($_COOKIE[\"secureid\"]) && $_COOKIE[\"secureid\"] == md5($login_vng)) and (isset($_COOKIE[\"pass"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "ftpall($_POST['ftpip'], $_POST['ftpuser'], $_POST['ftppass'], $_POST['goto']"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$win = TRUE;else $win = FALSE;if(isset($_GET['y'])){if(@is_dir"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$shell_code"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=__FILE__;"
        $s2 = ";eval(($$"
        $s3 = "kr9NHenNHenNHe1lFMamb3klFoxiC2APk19gOLlHOa9gkZXJkZwVkr9NTznNHr8XHt4JkZwS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$aliases = array('la' => 'ls -la',"
        $s2 = "command_hist[current_line] = document.shell.command.value;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "Priv8"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "<b>Host Target:</b>"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "eval(base64_decode($lang));"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_015 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "/* SYSTEM */ eval(base64_decode(\"IGV"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "$_SESSION['nst']=\"$pass\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "ok>ini_ok"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$ok = @file_put_contents(\"$testwrite/$md5.txt\", $time) !== false;"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_069 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "<a href=\"?id=pwn_chmod&pwnd='.$file_color."
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_070 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "@error_reporting(0);"
        $s4 = "eval(base64_decode("
        $s5 = "echo base64_decode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "<address>Apache Server at"
        $s3 = "$os = 'nix';"
        $s4 = "$disable_functions = @ini_get('disable_functions');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_072 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "]),$outbuf);foreach($outbuf as $val) $outstr.=$val.chr"
        $s3 = ";exec(base64_decode($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_073 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "<title>404 Not Found</title>"
        $s2 = "if(!isset($_SESSION['login']) or $_SESSION['login'] != $xPassword){"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_074 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "(base64_decode('ZXJyb3JfcmVwb3J0aW5nKDcpOw0KQHNldF9tYWdpY19xdW90ZXNfcnVudGltZSgwKTsNCm9iX3N0YXJ0KCk7DQokbXRpbWUgIC"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_075 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ", 0777, true);"
        $s4 = "echo $confx_success.\"|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_076 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "eWPIweXvcMlldoOzcbW+Nt9Md3ksNI0hNt9LDbC+Nt9jcB50cbw+eWP8R2kvcuL+eWPYtjXvDuOsde4YtJF7KX==alVnRPIq"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_077 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"rZrHCvTceqXnDb6H5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_077_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"rbpHj4Rss6a5Lyn"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_077_03 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"7X37c9pI1ujPd6v2f2C8qc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_078 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('7L35dyTHdSb6c"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_079 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FZfFDsVIDkX3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_080 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode('Ly92ZXJzaW9uIDIKJ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_081 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "['pword']"
        $s3 = "eval(base64_decode('JHRhY2ZnZFsndGl0bGUnXSA9ICdYZ3IwdXBW"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_082 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "eval(gzinflate(str_rot13(base64_decode('zUlbQttVFH5e"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_082_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "eval(gzinflate(str_rot13(base64_decode('rUl6QttVEP5eqf9u"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_083 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "\"password\">Shell Password:"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_084 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "title>WebShell"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_085 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "$isReturnFiles = isset($_GET['isreturn'])?true:false;"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_086 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "if ($_COOKIE['user'] != $user || $_COOKIE['pass'] != $pass)"
        $s3 = ".\"<title>$sitetitle :: $title</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_087 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "JGF1dGhfcGFzcyA9ICR"
        $s3 = "\\x36\\x34"
        $s4 = "\\x6F\\x64\\x65"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_088 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "if($cmd != \"\") print Shell_Exec($cmd);"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_089 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "fopen($_POST['_edit"
        $s3 = "$output = shell_exec($_POST['_cmd']); echo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_090 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode(\"Ly83MTg3OWQyMTJkYzhjYmY0ZDRmZ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_091 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "0444);"
        $s5 = "@chmod("
        $s6 = "array('f'=>base64_encode('<file>/x/x/x."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_092 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "str_rot13('VPNiXv%cMvtuVTy_K29v*zIw@~9coy90LKuio"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_093 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "eval(\"\\$a = $funcName(\\\"$input\\\");\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_094 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>lama's'hell"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_095 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>:: AventGrup ::.. - Sincap"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_096 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ".php\">"
        $s2 = "<title>-Neutrino"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_097 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$taskdir = @mkdir('task_'.$_POST['task']);"
        $s4 = "$content = preg_replace('/href=\"([^\\s\"]+)\"/', 'href=\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_098 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "function reload(){header(\"Location: \".basename(__FILE__))"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_099 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "(isset($_GET['do']))"
        $s4 = "elseif($toolsname === \"idxconfig"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_100 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$sData   = gzinflate(ParseCode($sData));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_101 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "=\"QAAAOzh3b3cKDWJ1dWh1WHVidwAAaHVzbmlgLzAuPAoNR3RicwAAWGpmYG5kWHZyaHNidFh"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_102 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "eval(stripslashes($_POST["
        $s2 = "if(isset($_POST["
        $s3 = "$backdoor_c="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_103 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "foreach (explode(\",\" , get_php_ini(unxor_this("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_104 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "3T1rd9s4rp/Tc/ofWG1mZN/63UynE8fuZPJoe7dNcvPo7E6S41UsOdbElrySnEfb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_105 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "1VVtT9swEP5cfoWpKpJI3XjrXkSBdYJOmsQ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_106 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "ibl13Z Private Shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_107 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7X15f9rIsuj/+f3yHRSu7wATjBGLbezYE+/Ge/DuJI8rkADFAjES2CY5eZ/9VVV3S60F2d"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_108 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('7f1pe+M2sjAMf5/rmv/AVjxpO5a1Wd5jJ1pt2dYueevu10OJlERroUxS65z+728VFhJctL"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_109 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('7f1pe+JIsjCAfp55nvkPKsbTtscusxhv5ba7xQ5mxxhDdV0fgYSQEQhL7HPq/vYbkZmSUg"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_110 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7P37ehq58igM/73zPLkHhWENMLE5+RAfgicYsI3j"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_111 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FJ3HbuNQm23n/SL9AxwwJ6BxG8xBzJmcNJhzznz66wJqZFgu6pzz7b0WJVv/+//+53+XZv"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_112 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "SyvNSy7JzM9TCHaJKEkK1VApyk/KL9GshtC26VWZeWk5iSWpGkmJxalmJvEpqcn5KakaRY"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_113 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FJ3HcqTaEkU/53UEA3wBQ7z3nskLPIX"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_114 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "ZXJyb3JfcmVwb3J"
        $s2 = "ZXJyb3JfcmVwb3J0aW5nKDcpOwpAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApOwpvYl9zdGFydCgpOwokbXRpbWUgICAgI"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_115 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>.: Shell Killers :."
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_116 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "SSI Web Shell "
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_117 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Coded By Mustafa Moshkela ~ Lions Of Iraq Team"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_118 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>r0b0t ShEll"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_119 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>DX ajax text shell (ATS)"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_120 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>***TuiTui*** SHELL"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_121 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>.:+: ShellAngkangan"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_122 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "-Ani Shell-"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_123 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Peterson - Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_124 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Back Connect Shell -- PHP"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_125 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Cy#b3r00T Shell Uploader"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_126 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Proxyshell hide ip"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_127 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>PBT - PHPshell BY TINKLE<"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_128 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "coded By JIKO for all Hackers"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_129 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "~ Shell I</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_130 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Pwned By Monkey"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_131 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "ZWNobyAnPGh0bWw+PGhlYWQ+PHRpdGxlPicuZ2V0ZW52KCJIVFRQX0hPU1QiKS4nI"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_132 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "= getcwd()"
        $s2 = "echo 'Zip Created, bhaens"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_133 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "<textarea id='evalcode'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_134 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "private function createDir($path, $chmod = 0777,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_135 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "echo \"Upload File:"
        $s7 = "echo \"MySQL: $mysql | Perl: $perl | Python: $python"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_webshell_136 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$_F=__FILE__;$_X='Pz48P3BocA0K"
        $s2 = "NoMXJzNXQ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_137 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "function editfile($file)"
        $s2 = "private $ctrl_dir = array();"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_139 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "$shelltext=(\"uname -a\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_140 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64"
        $s3 = /<\?php[\s]*\/\*[\s]*[Cc][Oo][Dd][Ee3][Dd]/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_141 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "echo 'Done!';"
        $s2 = "<body onload=\"SetFocus('cmd')\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_142 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7X39d9o6EujP2XP2f1C97DXcEgKk7W1DSJrvkKZJ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_143 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "{if(empty($input))return;$keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";$chr1 = $chr2 = $chr3 = \"\";"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_144 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "ZXZhbCgnPz4nLi"
        $s3 = "};eval($"
        $s4 = /\$[0O]{4,}[\s]*=[\s]*base64_decode\(.[\w]{30,}.\);[\s]*\$[0O]{4,}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_145 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "\".chr("
        $s3 = "\\x"
        $s4 = /function [\w]+\((\$[\w]+,[\s]*){2,}\$[\w]+\)[\s]*\{[\s]*return[\s]*(\$[\w]+\.[\s]*){2,}\$[\w]+;[\s]*\}[\s]*\$[\w]+[\s]*=/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_146 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "echo \"<font color=red>Directory Not Deleted!</font><br>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_147 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "if(is_writable($root))"
        $s3 = "if(@copy($_FILES["
        $s4 = "$exec=exec('wget http://pastebin"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_149 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "header(\"HTTP/1.0 404 Not Found\")"
        $s3 = "@system($code); $output = ob_get_contents(); ob_end_clean();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_150 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "WebShellOrb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_151 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "\"hidden_shell_version\" => \"#"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_152 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$nav = get_nav(get_cwd());"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_153 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "cmR3cmFwKCRzdHIpIHsNCiAgICAkc3RyID0gQH"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_154 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "fopen('php.ini','w');"
        $s2 = "\"safe_mode = OFF"
        $s3 = "foreach($configuration"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_155 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "saveOneShell($shell_base_dir,$type)"
        $s5 = "function processHtaccess($base_dir)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_156 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "$auth"
        $s4 = "$pass"
        $s5 = "define('SELF_PATH_TO_UNLINK', __FILE__);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_157 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /@eval\(\"[^\"]+\"[\s]*\.[\s]*base64_decode\(\"[^;]{5000}/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_158 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "eyJjIjoiY3JlYXRlX2Z1bmN0aW9uIiwicCI6IiR4IiwiYSI6IkBldmFsKFwi"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_159 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "(gzinflate(base64_decode(str_rot13(\"7Y17qlWUm"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_160 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "),\"\".chr("
        $s2 = "$test($none, '}'.$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_161 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "P29wdGlvbiZwYXRoPSRwYXRoJm9wdD1jaG1vZCZ0eXBlPWRpciZuYW"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_162 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "SPECIMENT MINI SHELL"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_163 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo('<pre>'.htmlspecialchars(file_get_contents($_GET['filesrc'])).'</pre>');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_164 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "function r_action_removeshell() { if (file_exists"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_166 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "x6ck\\x64G\\x67\\x36I\\x47F\\x31d\\x47\\x38\\x37\\x49\\x6a"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_167 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "function Evil($x,$y=false)"
        $s4 = "function Execute($x)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_168 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64"
        $s3 = "+eWP8R2kvcuL+eWPYtjXvDuOsde4YtJF7KX=="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_169 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "aWYoaXNzZXQoJF9HRVRb"
        $s2 = "UGVybWlzc2lvbiA6IDxpbnB1dCBuYW1lPSJwZXJtIiB0eXBlPSJ0ZXh0IiBzaXplPSI0IiB2YWx1ZT0iJy5zdWJzdHIoc3ByaW"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_170 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "QRUO3FGSBtkSFRWTUBjSCRlROJmSzIEajNTTuh1UB"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_171 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7X1bcxw3luaz9SvSZbaLHPEuyXbzZpdI2patm0XKbltiM7I"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_172 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "function writAble($dir, $perm)"
        $s2 = "function makeRequest($url, $post = null, $head = null)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_173 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "base64_decode($jembot)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_174 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "DQplcnJvcl9yZXBvcnRpbmcoNyk7DQpAc2V0X21hZ2ljX3F1b3Rlc19ydW5"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_175 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "Pz48P3BocA0KJDNybCA9ICghNW1wdHkoJF9TRVJ"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_176 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = ": 'phpinfo();';?>\" style="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_177 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "7Ux6Zts2Ev58nvF/S7O6Q5pNouz6TZ8iqo09"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_178 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "Unknowndevice64"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_179 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7Vvrc9pIEv9OqvI/TCbeCLIGAcaPNQifg3Hiil9lO7eVMi5K"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_180 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "define('root_dir"
        $s4 = "define('shellname"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_181 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "PD9waHANCmlmKGVtcHR5KCRfQ09PS0lFWydteXBhc3MnXSkpICRfQ09PS0lFWydt"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_182 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "fputs($brute_save, date(\"d.m.y H:i:s\").\"|HOST:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_183 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "1X37W9tG0+jveZ78DxvXX2Q3xmAubWojAwXScJo"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_184 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = "echo"
        $s3 = "header(\"Content-Type:"
        $s4 = "header(\"Location:"
        $s5 = "->extractTo(uhex($_GET"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_185 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "function upload($upfile,$ndir,$unzip,$delzip) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_186 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "$command = (exe('whoami')) ? \"ON\" : \"OFF\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_187 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "disable_functions"
        $s7 = "$body=(\"Shell: http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_webshell_188 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "U2hlbGwgQmFja2Rvb3I"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_189 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval('?>'.base64_decode($thanks));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_190 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = ")));eval(returnmal(getmal($_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_191 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "<a href=\"admin.php?op=massaddcommands\">"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_192 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "CR2vRGkXO2wiIny7FcfO0WOhVkNt62J6Ehxq54dgMgBBr0F0iA"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_194 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$url=base64_decode(\"aHR0cHM6Ly9wYXN0ZWJpbi5j"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_195 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = /\"[\w]{32}\";[^\n]+[\s]*function [\w]+[^\{]+\{[\s]*\$[\w]+[\s]*=[\s]*gzinflate\(base64_decode/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_196 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "ini_set('display_errors','Off');"
        $s4 = "header(\"content-Type: text/html; charset=utf-8\");"
        $s5 = "$password ="
        $s6 = "str_rot13($str)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_197 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "('',"
        $s2 = ",array('','}'.$"
        $s3 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*\"[^\"]+\";[^(]*function [\w]+\(\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+\)[\s]*\{[\s]*return[^;]+''[^;]+;[\s]*\}[\s]*\$[\w]+[\s]*=[\s]*[\w]+\(\$[\w]+[^\n]+array\(..,.\}.\.\$[\w]+\..\/\/.\)\);[\s]*(\?>)?/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_198 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZDNkM0xqUnVaMlZzTG01bGRB"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_199 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "function Evil($x,$y=false)"
        $s4 = "if(any(\"x\",$_REQUEST)&&$_REQUEST['x']==\"scan-port\")"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_200 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "VoMp3IZN9wp6/kB0JAdHKnYaL9bcggs0ec0SWzTQrf/drykECkZjGHnDuqTlNuW/j4eIiRzKFUESjU9/8B"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_201 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "U2lkIEdpZmFya"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_202 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "<a title=\"Delete\" href=\"?p=<?php echo urlencode("
        $s6 = "<a title=\"Open direct link\" href=\"<?php echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_203 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "<title><?php echo $_SERVER["
        $s4 = "function l__"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_205 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "dJvHjsNKlqYfoJ6iFg3MLRANeoeaWtB77zkYDOhFb0Q"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_206 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "sprintf(\"<span class='%s' >%s</span>\", count($firewall) < 1 ? \"ok\" : \"error\", count"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_207 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "stream_get_contents($"
        $s5 = "&zero_act=upload"
        $s6 = "(zeroCommand('wget"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_208 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "spufingDomain\" => isset($_POST[\"spufingDomain"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_209 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "str_rot13(gzinflate(str_rot13(base64_decode(($"
        $s6 = "7b1sWyLJszD6t/08/R1Fxt+UnklJZHroTgVqFEdcuvtrq6qrChF4A"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_210 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "AnarchoXploit"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_211 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\";eval("
        $s2 = "\"\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\";"
        $s3 = "\"\\x72\\x61\\x77\\x75\\x72\\x6c\\x64\\x65\\x63\\x6f\\x64\\x65\";"
        $s4 = "\"\\x62\\x61\\x73\\x65\\66\\x34\\x5f\\144\\145\\x63\\157\\144\\x65\";"
        $s5 = /\$[\w]+[\s]*=[\s]*\".x...x...x...x...x[^;]+;[\s]*\$[\w]+[\s]*=[\s]*\".x...x...x...x[^\(]+eval\([^\)]+[\)\s]+;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_212 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "parse_str"
        $s2 = "*/./*"
        $s3 = "*/$"
        $s4 = "'#"
        $s5 = /<\?[^\x02]{0,300}parse_str[\s]*(#|\/\/|\/\*)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_213 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "// WHO SHELL"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_214 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "(\\$[\\w]+[\\s]*=[\\s]*base64_decode\\([^\\)]+\\);[\\s]*){3,}eval\\([^;]+\\);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_215 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "array();goto"
        $s6 = ":echo json_encode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_216 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "function isCopy(cp){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_217 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "0O"
        $s3 = "7Vrrc9s2Ev+czOR/QFldIF308iOpI4tq"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_218 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "aWYoZ2V0X21hZ2ljX3F1b3Rlc19ncGMoKSl7DQpmb3JlYWN"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_219 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZnVuY3Rpb24gX0hmQlAoJF9JWGt0ZUZF"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_220 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZnVuY3Rpb24gX1pYaDkoJF9NRnBGYyl7JF9NRnBGYz1zd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_221 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "XH"
        $s3 = "$_F=__FILE__;$_X='Pz48P3BocA0KNXJyMn"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_222 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZnVuY3Rpb24gX0kwQ0ooJF8yZHF0OFMpeyR"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_223 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "(chmod(zeroPath()"
        $s5 = "zero_act=upload"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_224 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "if(preg_match('#([ ]{200,}if\\(file_exists\\(\\'.+?\\'\\)\\) require_once\\(\\'.+?\\'\\);)#si',$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_225 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "* Description: Simple WordPress Shell -"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_227 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "if(!@ftp_put($ftpconn, $remoteFile, $file, FTP_BINARY)){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_228 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "function strpos( $haystack, $needle, $offset = 0"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_229 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "CURLOPT_COOKIEJAR,$GLOBALS[base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_230 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "stream_get_contents($"
        $s5 = "@posix_getuid() : null; return json_encode(array("
        $s6 = "return (($this->_=md5($header).substr(md5(strrev($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_231 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "$GLOBALS[\"\\160\\141\\163\\163\"]"
        $s2 = "\"\\145\\166\\141\\154\".'(\"?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_232 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "U2hlbGw6PGJyPjxhIGhyZWY9Imh0dHA"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_233 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "(gzinflate(str_rot13(base64_decode("
        $s6 = "KpthyZpg2YU+gpHqXah2GL3kEBLvpZiLtTbDly"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_234 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "404 Error Web Shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_235 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "fwrite("
        $s5 = "if(copyfiles($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_236 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = ",'');die();"
        $s3 = "=\"\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\".("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_238 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "if(isset($_REQUEST"
        $s3 = "{initiate(); die();}"
        $s4 = "{print shell_exec($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_240 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7b1pWxu50jD8ebgu/oPSwz1tT4zxwk5MwmKICVtslkDI8bTdjd3Bdvu4bZbM5L+"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_241 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "extract"
        $s6 = "extract(x($i));"
        $s7 = "tempnam(\"/tmp\", \"0\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_webshell_243 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "('',@$_POST["
        $s4 = "str_replace('helloword"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_244 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "CiBnb3RvIEVGWjFXOyBiUVVVejogZG"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_245 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "data:text/javascript;base64"
        $s4 = ">users}\".base64_decode('"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_246 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "aGVsbHgub3JnL2hpZGU"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_247 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "xTZVhhZndNMDdMeExaYnN2SlgxbW5nTU0zR3NWR3pKVmZ1ZzF5ek1NNndVSXp3VXYwcV"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_248 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "mRmQsMCwkWFBMTk1Xb1NoVGpSS0lWcUJw"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_249 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "pTsLc5tIk3+FKGyAXYQAvW1hJ7VxNlvf5nGOc99VOf5UI0CCMgIOkB+J/N+vu2d4St5HXW1FHmZ6unt6+jkzG64l9YXnr8PY91Ql8zYf8zBWNO2HxDvrPkm3tFM"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_250 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "7f3ZkttKtigIPktfwdTROQydkBQAh4igtKVMzjMjOIEkUllRIACSIDEFAY559nO9lVW3tVmXWV2zW2b"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_252 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "base64_decode($"
        $s4 = "file_put_contents($"
        $s5 = "echo \"<h2>Shell"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_253 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "function rantit(text, runs_left, delay, charvar, max){"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_254 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<input type=\"text\" name=\"cmd\" id=\"cmd\" value=\"<?= htmlspecialchars($_POST['cmd'], ENT_QUOTES, 'UTF-8') ?>\""
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_255 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "file_get_contents"
        $s2 = "$shell = str_replace( array(\"http://\", \"www.\", \"https://\"), \"\", $shell);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_256 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "if(isset($_POST["
        $s5 = "<title>exp_door"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_257 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "MTAwME0nKTsNCmluaV9zZXQoJ2"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_258 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "@header('NikolaT3sla: Shell')"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_259 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "@fwrite($handle, $backdoor);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_259_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "__halt_compiler();"
        $s2 = "ZnVuY3Rpb24gcmVzcG9uc2UoJG"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_260 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7X17kxw3kt%2FfM58CHM2qZ1bzJqn"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_261 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "(\"JE8wME9PMDAwPSJDQnpqaHVjUXdIaXZtVldSbkVYeFRQS05JT2xkSkF"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_262 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "$auth"
        $s4 = "define('SELF_PATH"
        $s5 = "7X1rV9tKsuhnzlrnP3Q0nC17xxjbQCYxGMI"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_263 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7Vltb9s4Ev4eIP+BZX2VjbUtOZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_264 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "GGxEZe67IRWPjDTgj6HWKgYSPQ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_265 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "aWYoaXNzZXQoJF9HRVRb"
        $s2 = "c2V0X3RpbWVfbGltaXQoMCk7DQplcnJvcl9yZXBvcnRpbmcoMCk7DQoN"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_266 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "tP0HWJNLtzAMX3Q4cNF70RACSSBA6AiE3qUXaUMJECAIAUKoooYOCgiICIpKE7GjYG8"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_267 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "echo $"
        $s4 = ".base64_encode($md5)."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_269 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "chr(bindec(str_replace(array(chr("
        $s5 = ".base64_decode(str_rot13(gzdecode($out))));include"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_270 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "SkdOdmJtWnBaeUE5SUdGeWNtRjVLQW9nSW5abGNuTnBiMj"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_271 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "header("
        $s5 = "add_action( 'wp_loaded', array($this,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_272 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "curl_init("
        $s3 = "))); break; case 'chmod': if (empty($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_273 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "IyMjIyMjIyMjIyMjIyMjIyMjIyMj"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_274 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "CURLOPT_USERAGENT"
        $s2 = "continue;if(${"
        $s3 = "write.c>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_275 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "QGluaV9yZXN0b3JlKCJzYWZlX21vZGUiKTtAaW5pX3Jlc3RvcmUoIm9"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_276 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "\"]();?>"
        $s3 = "\"])){echo \\'wp-blog-header\\';}');$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_277 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "extract"
        $s6 = "function phpValInfo()"
        $s7 = "function shellExec($cmd)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_webshell_278 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "extract"
        $s6 = "$_POST[\"explorer-delete-file-submit\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_279 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<script>window.location="
        $s2 = ".htmlspecialchars(file_get_contents($_GET["
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_280 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "eval ( base64_decode ( $_POST["
        $s3 = "system ( base64_decode ( $_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_281 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "chr(hexdec($"
        $s3 = "getent passwd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_282 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "exit;"
        $s3 = "if(is_callable('phpinfo')){echo \"\\n\\nPHP INFO:\\n\";ob_start();phpinfo();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_283 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "Yqvn3uJAjura768A01C8najR86gTe"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_284 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "strrev("
        $s4 = "=Nj/8C+2NKkj8LqsNgv4/7xu9yaq/ZsP2D4pK0sIM/69rvv"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_285 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "set_token(\"NO_LOGIN\"):(k(),a(window).unload(function(){k()})),p&&s.echo(p),r&&s.echo(r)})}(jQuery);</script>"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_286 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "(gzinflate(str_rot13(base64_decode("
        $s6 = "MzQyNjE1M7ewNMjLLygsKi4pLSuvqKxXWVdBVlpYz8jMys7JjQcA"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_287 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "a5xYLVjM0UO3t0bXWK8qzVjOzy0oVy0u1lWv"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_288 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "fwrite($"
        $s4 = "PD9waHAKCi8qCiAgICAwIGIgeSB0IDMgbSAxIG4gMSAtIDIuMgo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_289 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "aWYobWQ1KCRfQ09PS0lFWydhc2RmJ10pPT0nZjNmODI1NGUyNjgzZGRlM"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_290 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "assthru"
        $s2 = "if(isset($_REQUEST"
        $s3 = "system($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_291 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "lVsLc5vIsv4rRGEDJBg9rHgTS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_292 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rror_"
        $s3 = "\"]=\"zip\";${\"\\x"
        $s4 = "\"]}){$_SESSION[md5($_SERVER[\"\\x"
        $s5 = "\"]=substr(__FILE__,0,strpos(str_replace(\"\\\\\",\"/\",__FILE__),${${\"\\x47"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_293 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "register_shutdown_function"
        $s1 = "eval($"
        $s2 = "if(isset($_GET['remove'])) {unlink($"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_294 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "=true;break;endif;;endfor;;if($_"
        $s5 = ")>(int)round(1+1)):return substr($_"
        $s6 = "=imagecreatetruecolor($_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_295 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\"\\x62\\x61\\x73\\x65\\x36\\x34\\x5"
        $s2 = "\\x4B\\x43\\x52\\x77\\x5A\\x58\\x4A\\x74\\x63\\x79\\x41\\x6D\\x49\\x44\\x42\\x34\\x4D\\x44\\x49\\x77\\x4D\\x43\\x6B\\x67"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_296 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "= shell_exec('mysql -V');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_297 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "${base64_decode('R0xPQkFMUw==')}[base64_decode("
        $s3 = "}=@fopen(${${base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_298 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "@preg_match_all('/.*?zone \"(.*?)\" {/', $dominios, $out);"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_299 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7f1rexq50iiAfs/z5D90WF4DTGwM+BJfgicYsI3jK"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_300 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "(gzinflate(str_rot13(base64_decode(\"\\"
        $s3 = "$auth_pass = \""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_301 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64"
        $s3 = "lMhtrLF3kjhbShC29VfolVfBA7tm0hk"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_302 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "= chr(ord($"
        $s3 = "SBSg9ghszOqs08zzNd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_303 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "exec($code,$array);"
        $s6 = "base64_decode('Pi9kZXYvbnVsbCAyPiYxICY="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_305 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "Skc1aGRpQTlJR2Q2YVc1bWJHRjBaU2hpWV"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_306 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "JGkzNmE1YjQwZDFjMDQ1YjMwNmJhZTk5NmUzNTU3"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_307 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "strrev("
        $s4 = "eval(strrev(htmlspecialchars_decode(gzinflate(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_308 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "Z2FnYWwgVXBsb2Fk"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_309 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZnVuY3Rpb24gc2hlbGwoK"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_310 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "7Vlbb9tGFn4PkB8RVhvKW0uUFG3ilSU1jq"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_311 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7f3ZkuNIsigIPkd8BU+cOIceJxYHuLg7IzLiFPcd7"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_312 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "getcwd().DIRECTORY_SEPARATOR.basename($_SERVER["
        $s4 = "if(!function_exists('openssl_decrypt')){die("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_313 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "while(!feof($"
        $s2 = "if(is_callable('fsockopen')and!in_array('fsockopen',$"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_314 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x65\\x76\\x61\\x6c"
        $s2 = "function login_shell() {"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_315 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "SystemHelper::response('Failed to create dir', 500);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_316 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "github.com/eviltwin"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_317 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "(!@feof($"
        $s3 = "function exe($in)"
        $s4 = "@passthru($in);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_318 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "$send = move_uploaded_file($_FILES['randsx']['tmp_name'], $PathFile);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_319 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "ini_set('display_errors',0);session_start();define('VERSION"
        $s3 = "$data,$title_matches);if($res){$title=preg_replace"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_320 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "fwrite($"
        $s4 = "AK-74 Security"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_321 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "multipart/form-data"
        $s4 = "<form"
        $s5 = "move_uploaded_file($"
        $s6 = "\".@readf($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_322 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "<title>Shell Bypass"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_323 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "Bind Shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_324 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "base64_decode($"
        $s4 = "file_put_contents($"
        $s5 = "preg_match(\"@'DB_NAME"
        $s6 = "preg_match(\"/--bindir=("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_325 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "googlebot\") !== FALSE) || (strpos(strtolower($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_326 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /\$\w+\s*=\s*\\"\w+\\"\;\s*\$\w+=\$\w+\[\d+\]\s*\.[\s]*\$\w+\[\d+\]\s*\.[^\)]*\);\s*\$\w+\s*=\$\w+\s*\([^;]*\\"\)\)\);\s*\$\w+\(\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_327 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "file_put_contents($"
        $s5 = "return @rawurldecode(@hex2bin($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_328 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "fwrite($"
        $s4 = "\\x63\\x72\\x65\\x61\\x74\\x65\\x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_329 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "7Tp2YtrK2p9bqf9ujkJBDSLBcw8kQw"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_330 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "{@chmod($"
        $s5 = "};if(isset($_REQUEST[$"
        $s6 = "dirname(__FILE__);foreach(scandir($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_330_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "{@chmod($"
        $s5 = "};if(isset($_REQUEST[$"
        $s6 = "urldecode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_332 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "..'))) array_pop($ret); else $ret[] = $part; $ret = $root.implode('/', $ret); if (!strlen"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_334 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "[PHPkoru_Info]"
        $s4 = "MKMuoPtxMzqyK2IvMmRmXPEiozMlAwEspKWjLaSlXPqwoJk1MIAan1ygEacn"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_335 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "OWRlYYAoatUoI8vNXqKDsO19MjP2p4NJ/174VEF72NetkLOdU/iutHu7Pqgp+PBGA15+pn5u9RTpaf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_336 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "unlink("
        $s5 = "case \"kill\" : unlink(__FILE__);"
        $s6 = "$writeConnection = $resource->getConnection("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_337 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "JE9PTzBPTzBPME89ZmlsZShwcmVnX3JlcGxhY2UoIkBc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_338 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "JE1pbmlTaGVsbCA9ICJTSm5IQ3NPS0ZWSDNnZnhRQ0V5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_339 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "class mbd_"
        $s2 = "function __construct($core)"
        $s3 = "$this->core->data->"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_339_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "class mbd_"
        $s2 = "$this->phpv = substr(phpversion(), 0, 3);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_340 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "echo@null;goto"
        $s3 = "))));@null;exit;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_341 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "Jy5tZDUoJF9TRVJWRVJbJ0hUVFBfSE9TVCddKS4nLnBocCddO"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_342 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "ZXJyb3JfcmVwb3J"
        $s2 = "IH0gZXZhbCh"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_343 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "touch($"
        $s5 = "urlencode(base64_encode(gzencode(json_encode("
        $s6 = "file_put_contents(created_file()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_344 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "0O"
        $s3 = "base64_decode(base64_decode(\"UUdsdWFWOXpaWFFvSj"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_345 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = ".htmlspecialchars(file_get_contents($_GET["
        $s4 = "(file_exists(\"/usr/bin/wget"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_346 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$_POST"
        $s4 = "shell_exec($"
        $s5 = "$this->loggedOn=@ftp_login"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_webshell_347 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "chr(hexdec($"
        $s3 = "exec('cmd.exe"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_348 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "extract"
        $s6 = "substr(decoct(fileperms($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_webshell_349 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "md5(trim($_POST["
        $s4 = "404 Not Found"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_350 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "aWYoaXNzZXQoJF9HRVRb"
        $s2 = "M1N1 SH3LL"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_351 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "STDERR: $!\\n\";exec(\"' . $v . '\") or die\"$f Run shell"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_gen_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Web Shell By SultanHaikal"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "FaTaLisTiCz_Fx"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Web Shell by boff"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Web Shell by oRb"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "- Sh3ll - By "
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Loader'z WEB Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "private shell by x0r"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "shell created by evilc0ders"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "/need shell coder"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Do not Distibute This shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "PHP Shell by Stoner"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "$_COOKIE[$cookiename] != $passw"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_023 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SimAttacker"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_024 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "erver"
        $s1 = "\"/tmp/tmp-server\""
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_025 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>--==[[ Don,Symlink Based Cpanel Cracker By Team IndiShell]]==--</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_027 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = ">ZaraByte File Uploader"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_030 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "print \"<tr><td><b>wtf:</b></td><td>$UserID</td></tr>\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_038 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "NoGe S!mPLe SHeLL"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_039 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "@move_uploaded_file($tmp_name, $security"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_040 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "move_uploaded_file(\\$_FILES"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_040_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "file_put_contents(\"../wp-config.php\",$"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_041 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "@error_reporting(0); if (!isset($eva"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_042 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "get_option"
        $s2 = ";$z=get_option(\"_site"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_043 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "get_option"
        $s2 = "$z=get_option(\"_site"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_044 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(@"
        $s2 = "eval(@gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_045 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hmod"
        $s1 = "@chmod($_POST"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_046 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "$zend_framework=\"\\x63\\162"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_048 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$a = array('v','e',')','b','s','c','l',\"z\",\"r\",'o',\"a\",'$',';','i','t',\"n\",'_',\"f\",'6',\"g\",\"4\",\"d\",'(');"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_gen_049 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "eval(\"?>\".gzuncompress(base64_decode("
        $s2 = /eval.....\.gzuncompress.base64_decode[^;]+;/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_049_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "eval(\"?>\".gzuncompress(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_050 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('rVdtc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_gen_051 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "function fteil_macros"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_052 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "aWYoaXNzZXQoJF9HRVRbJ2tsaXZlcnonXSkpew0KDQplY2hvICc8Y2VudGVyPjxiPis"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_053 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "= \"\\x65\\x76al(\\x67\\x7a\\x69nf\\x6ca\\x74e(b\\x61se6\\x34\\x5f\\x64\\x65cod\\x65(\\x27\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_054 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "@chmod($_POST"
        $s2 = "$v2045f746 = array(\"Google\""
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_055 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "}eval(SED(\"7b37exvHkSj6O/VXjBFG"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_058 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "echo \"check PHP version... \" . phpversion() . \" -------- OK!<br>\\n\" ;"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_059 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "(Web Shell By Black-ID"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_060 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$currentCMD = str_replace(\"\\\\\",\"\\\",$_POST['_cmd']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_gen_062 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "function lovesetcookie("
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_063 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "function actionInfect() {"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_064 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "// Skullv1 Shell"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_066 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo htmlspecialchars(implode('', file($_POST['file'])));"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_067 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CGI"
        $s1 = "echo \"<br>[CGI] => CHMOD To 755 Complate !\";"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_068 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$shellPath = pathinfo($_SERVER['REQUEST_URI'], PATHINFO_DIRNAME);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_069 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo '<a style=\"'.(is_file($file)?$style1:$style2)."
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_071 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "=> '1nj3c7 Sh311' ,"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_071_02 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "WSOsetcookie(md5($_SERVER['HTTP_"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_072 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "PHP Shell 2.0"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_073 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents('cacheplugin.php', file_get_contents('http://"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_gen_074 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "setcookie('password', SHELL_PASSWORD, time()"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_075 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "define('PHPSHELL_VERSION', '1.7');"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_076 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "define('PHPSHELL_VERSION', '"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_077 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "system(\"$cmd 1> /tmp/cmdline 2>&1; cat /tmp/cmdline; rm /tmp/cmdline\");"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_078 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "chk7 = document.getElementById('pchk-7');"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_079 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "(strrev('/0///973"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_webshell_gen_080 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "@$data=str_replace(\"base64_decode"
        $s2 = "$html = @file_get_contents($webshell,"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_081 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$command = trim(str_replace($config_command_prefix"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_082 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>_DOG Of War_</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_083 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>-farM-mOn3Y-</title>"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_084 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents('../index'. '.' . $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_gen_085 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "eval(base64_decode(\"JGFyclswXT0iQ2lSaGRYUm9JRDBnSW"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_gen_31 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_FILES"
        $s1 = "copy"
        $s2 = "tmp_name"
        $s3 = "PHP Mini MySQL Admin"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_webshell_gen_34 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "fputs($f,$shell);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_webshell_gen_36 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec('cd /tmp;"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_37 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "http://shorthere.com/"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_38 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ");eval(\"?>\".$x);"
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_39 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Purple666"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_webshell_gen_41 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = /function[\s]*[\w]+\(\$[\w]+\)\{[^\}]+\}[\s]*[^;]+\$[\w][\s]*=[\s]*get_contents\(.http[^;]+\);[\s]*eval\(.\?>.\.\$[\w]*\);/
    condition:
        $s0 and $s1
}

rule php_backdoor_webshell_gen_42 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "@posix_getpwuid(@fileowner($folder));"
        $s7 = "gcc -o bcc bcc.c"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_webshell_group_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "if ($size >= 1073741824) {$size = round($size/1073741824*100)/100 .\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_whcms_killer_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "header('WWW-Authenticate: Basic realm=\"Powered By RAB3OUN\"');"
    condition:
        $s0 and $s1
}

rule php_backdoor_wordpresscore_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "wordpresscore.com"
        $s2 = "$url = \"http://wordpresscore.com/plugins/"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wordpresscore_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "require_once('includes/CCTM_Communicator.php')"
        $s3 = "$_objCCTMCom = new CCTM_Communicator();"
        $s4 = "$_objCCTMCom->addInfo(array($user_login"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wordpresscore_002_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "require_once('includes/CCTM_Communicator.php')"
        $s3 = "$_objCCTMCom = new CCTM_Communicator();"
        $s4 = "$_objCCTMCom = new CCTM_Communicator();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wordpresscore_002_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "require_once('includes/CCTM_Communicator.php')"
        $s3 = "require_once('includes/CCTM_Communicator.php');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wordpresscore_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "if (!class_exists('CCTM_Communicator')) {"
    condition:
        $s0 and $s1
}

rule php_backdoor_wordpresscore_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "wordpresscore.com"
        $s2 = "//****Start****/"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wordpresscore_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "wordpresscore.com"
        $s2 = "'u'=>esc_attr(wp_unslash($_POST['log'])),"
        $s3 = "if($redirect_to == 'wp-admin/'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wordpresscore_005_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "wordpresscore.com"
        $s2 = "'u'=>esc_attr(wp_unslash($_POST['log'])),"
        $s3 = "if(isset($_POST['log']) && !empty($_POST['log']))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wordpresscore_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function get_file_name($path)"
        $s4 = "$jm_code"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wordpresscore_007 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@unlink($working_dir . \"/wordpress/wp-admin/includes/class-wp-upgrader"
        $s4 = "if ($destination_name == \"wordfence\" && ($data = file_get_contents($file = $destination"
        $s5 = "if (method_exists(\"wordfenceHash\", \"wfHash\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wordpresscore_007_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@unlink($working_dir . \"/wordpress/wp-admin/includes/class-wp-upgrader"
        $s4 = "if ($destination_name == \"wordfence\" && ($data = file_get_contents($file = $destination"
        $s5 = "@unlink($working_dir . \"/wordpress"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wpadmin_bypass_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "role' => 'administrator"
        $s2 = "wp_set_current_user($user_id, $user_login);"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpadmin_bypass_003 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Automatic login"
        $s1 = "wp_set_current_user ( $user->ID );"
    condition:
        $s0 and $s1
}

rule php_backdoor_wpadmin_bypass_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "/wp-load.php';"
        $s4 = "$id = $_GET['id']"
        $s5 = "wp_set_auth_cookie($id)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wpadmin_bypass_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "if (preg_match($keywordsRegex"
        $s2 = "wp_set_current_user($"
        $s3 = "administrator"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wpadmin_bypass_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "die();"
        $s2 = "$users = get_users(array('role' => 'administrator'));"
        $s3 = "require('./wp-blog-header.php');"
        $s4 = "echo 'WordPress Login Successful"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpadmin_bypass_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "@unlink(__FILE__);"
        $s2 = "if($_REQUEST['pass']"
        $s3 = "$redirect_to = user_admin_url();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wpadmin_bypass_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "include 'wp-config.php';"
        $s4 = "$redirect_to=user_admin_url();"
        $s5 = "$user = get_user_by( 'id', $_GET['id'] );"
        $s6 = "$user_id = $_GET['id'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_wpadmin_bypass_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "function send_rms_curl_request("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_wpadmin_bypass_013 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "wp_set_auth_cookie("
        $s2 = /include..wp-load.php.\);\s*\$\w+\s*=\s*get_users\(array\(.role.=>.administrator.\)\);\s*wp_set_auth_cookie.\$\w+\[\d\]->ID\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpadmin_bypass_014 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\";eval("
        $s2 = "eJwVmsWOxNiWRT"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpadmin_bypass_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "if ( !is_wp_error( $user ) )"
        $s2 = "$username = $_REQUEST['username'];"
        $s3 = "$user = get_user_by('login', $username);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wpadmin_bypass_017 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "else {wp_redirect(get_bloginfo($"
        $s4 = ");error_reporting(0);set_time_limit(0);require(@$_SERVER[$O["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpposts_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "define('SHELL_PASSWORD', $hashed_password);"
    condition:
        $s0 and $s1
}

rule php_backdoor_wpposts_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "DB_PASSWORD"
        $s3 = "post_status='publish"
        $s4 = "stripslashes(urldecode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpposts_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "include(\"wp-config.php\");"
        $s4 = "= wp_insert_post( $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpposts_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "$wpdb->get_results("
        $s4 = "Set post_content"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpposts_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "implode("
        $s2 = "($_"
        $s3 = "json_decode(stripslashes($_POST["
        $s4 = "(wp_update_post(wp_slash($updPost)))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wptemp_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "chmod($_SERVER[\"DOCUMENT_ROOT\"].\"/wp-temp.php\", 0644);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpuploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "fwrite($fp,file_get_contents(base64_decode(rawurldecode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_wpuploader_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "@$wordpress($wp["
        $s2 = "$wp=\"abcdefghijklmnopqrstuvwxyz(*_;/.)\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpuploader_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "if (isset($_POST['upload_plugin']) || isset($_POST['upload_theme'])"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpuploader_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "{echo 'ok:'.'1';unlink(__FILE__); exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_addaction_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = ");echo \"$data\";}}add_action('wp_"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_addaction_001_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "wp_create_user('wordpress"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_addaction_001_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "if(!username_exists('wordpress"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_addaction_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "(){if(is_category()||is_front_page()||is_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_wp_adminadd_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = "VALUES ('wpbackup', MD5('pass123'), 'firstname lastname"
    condition:
        $s0 and $s1
}

rule php_backdoor_wp_adminadd_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "$unme=\"support_users_v-\".rand(100,999);"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_003 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$user->set_role( 'administrator' );"
        $s3 = "username_exists"
        $s4 = /add_action\([\s]*.init.[\s]*,[^;]+\);[\s]*function ([\w]+)\(\)[\s]*\{[\s]*\$[\w]+[\s]*[^;]+;[\s]*\$[\w]+[\s]*=[^;]+;[\s]*\$[\w]+[\s]*=[^;]+;[\s]*[^{]+\{[\s]*\$[\w]+[\s]*=[\s]*wp_create_user[^\}]+->set_role\([\s]*.administrator.[\s]*\);[\s\}]+/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_004 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "backdoor"
        $s3 = "$user_id=wp_create_user"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_adminadd_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "get_random_name()"
        $s2 = "$wp_cfgs = $joomla_cfgs = array();"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "global $wpdb"
        $s4 = "$wpdb->query( \"INSERT INTO `\" . $db_prefix . \"users` (`ID`, `user_login`, `user_pass`"
        $s5 = "capabilities', 'a:1:{s:13:\\\"administrator\\\";s:1:\\\"1\\\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_008 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "select * from \".$prefix.\"options where option_name='siteurl'"
        $s4 = /update[\s]*.\.\$prefix\..users[\s]*set[\s]*user_login[\s]*=[\s]*.[\w]+.[\s]*,user_pass[\s]*=[\s]*.[\w]+..\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "$_GET['backdoor']"
        $s4 = "backdoor'] == 'go"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "$_GET['backdoor']"
        $s4 = "add_action('wp_head', 'wploop_backdoor"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_012 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "new WP_User($"
        $s5 = "$link_shellcode"
        $s6 = "$link_shellcode = $_POST[\"secretLink\"];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_wp_adminadd_012_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "new WP_User($"
        $s5 = "$link_shellcode"
        $s6 = "$_POST['target'], $_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_wp_adminadd_013 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "function my_back()"
        $s2 = "$_GET['back"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "echo"
        $s2 = "echo $siteurl->option_value.'|'.$user_loginv"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_015 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "$user_id = wp_create_user( $newusername, $newpassword, $newemail);"
        $s4 = "shell_exec('rm -f "
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_019 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "$user_id = wp_create_user( $"
        $s2 = /!email_exists\(\$[\w]+\)[\s]*\)[\s]*\{[\s]*[^\(]*\$user_id[\s]*=[\s]*wp_create_user[\s]*\([\s]*\$[\w]+[^\)]+\);[\s]*if[\s]*\([\s]*is_int\([\s]*\$user_id\)[\s]*\)[\s]*\{[\s]*\$wp_user_object[\s]*=[\s]*new WP_User\(\$user_id\);[\s]*\$wp_user_object->set_role\([\s]*.administrator.[\s]*\);[\s]*echo[^;]+;([\s}]+else[\s]*\{[\s]*echo[^;]+;){3}/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_021 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$admin_list[] = $r['user_login'].' / '.$r['user_pass'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_022 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "WordPress_secret"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_023 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "administrator"
        $s2 = "add_action"
        $s3 = /add_action\([^\)]+\);[\s]*function [\w]+\(\)[\s]*\{[\s]*\$username[^;]+;[\s]*\$password[^;]+;[\s]*\$email_address[^;]+;[\s]*if[\s]*\([\s]*isset[\s]*\([\s]*\$username[^\{]+\{[\s]*if[\s]*\([\s]*![\s]*username_exists[^\{]+\{[\s]*\$user_id[\s]*=[\s]*wp_create_user[^\}]+\$wp_user_object->set_role\([\s]*.administrator/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_adminadd_023_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "]){function hide_plugins($"
        $s3 = "]);function wpdaxue(){$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_adminadd_023_03 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "function wpdaxue()"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_025 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "administrator"
        $s2 = /\$[\w]+[\s]*=[\s]*wp_create_user\(.[\w]+.,[\s]*.[\w]+.,[\s]*.[^;]+\);[\s]*\$[\w]+[\s]*=[\s]*new[\s]*WP_User\(\$[\w]+\);[\s]*\$[\w]+[\s]*->[\s]*set_role\(.administrator.\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_026 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "backdoor"
        $s3 = "(!username_exists("
        $s4 = "$user = new WP_User($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_027 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "!username_exists($username)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_adminadd_029 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "$user_id = wp_create_user( $"
        $s2 = "$user_id = wp_create_user( $_GET['name'], $_GET['secret'] );"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_030 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "$user_id = wp_create_user( $"
        $s2 = "hide_plugins($plugins){unset("
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_031 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "%administrator%"
        $s2 = "$sql = \"INSERT INTO \". $tbl_pre . \"users(ID, user_login, user_pass, user_nicename"
        $s3 = "function generatePassword"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_adminadd_032 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "administrator"
        $s2 = "require_once(realpath($_SERVER[\"DOCUMENT_ROOT\"]) . \"/wp-load.php\");"
        $s3 = "function add_admin_account() {"
        $s4 = "$user_id = wp_create_user($user, $pass, $email);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_033 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "if(filter_input(INPUT_GET,"
        $s2 = "require($_SERVER"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_033_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "if(filter_input(INPUT_GET,"
        $s2 = "add_action"
        $s3 = "FILTER_SANITIZE_NUMBER_INT"
        $s4 = /function [\w]+\(\)[\s]*\{[\s]*if[\s]*\([\s]*filter_input[\s]*\([\s]*INPUT_GET,[^=]+FILTER_SANITIZE_NUMBER_INT\)[\s]*!=[\s]*false\)[\s]*\{[^\}]+[\s\}]+/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_033_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "if(filter_input(INPUT_GET,"
        $s2 = "add_action"
        $s3 = "enqueue_locals"
        $s4 = "function enqueue_locals"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_033_04 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "if(filter_input(INPUT_GET,"
        $s2 = "add_action"
        $s3 = "enqueue_locals"
        $s4 = /add_action\([^\)]+enqueue_locals[^\)]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_033_05 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "if(filter_input(INPUT_GET,"
        $s2 = "echo \"Success\";"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_033_06 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "if(filter_input(INPUT_GET,"
        $s2 = "add_action"
        $s3 = "FILTER_SANITIZE_NUMBER_INT"
        $s4 = /add_action\([\s]*.wp_loaded.,[^;]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_034 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "function wpdaxue"
        $s4 = "'wpdaxue'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_034_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "function wpdaxue"
        $s4 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_034_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "function wpdaxue"
        $s4 = "unset( $plugins["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_035 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "$user_id = wp_create_user( $"
        $s2 = "add_action( 'init', function () {"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_036 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "administrator"
        $s2 = "add_action"
        $s3 = /add_action\([^;]+\);[\s]*function[\s]*[\w]+\(\)[\s]*\{[\s]*if[\s]*\([\s]*md5[\s]*\([\s]*\$_GET\[.[\w]+.\][\s]*\)[\s]*==/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_adminadd_038 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = ")=>base64_decode('bW9yZG9y'),base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_039 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$user->set_role( 'administrator' );"
        $s3 = "username_exists"
        $s4 = /wp_mail\([^;]+\);[\s]*\$[\w]+[\s]*=[\s]*wp_create_user/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_adminadd_040 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "if(filter_input(INPUT_GET,"
        $s2 = "wp_set_current_user($unit->ID);"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_wp_adminadd_041 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "\\x69\\146\\50\\x21\\143\\x6c\\141\\163\\163\\137\\145\\170\\151\\x73"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_adminadd_042 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = "users set user_login='$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wp_adminadd_043 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "function wpb_admin_account() {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_adminadd_044 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "array('role' => str_replace("
        $s4 = "if(filter_input(INPUT_GET, str_replace("
        $s5 = "$a->roles)){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wp_adminadd_045 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "wp_create_user("
        $s5 = "wp_generate_password("
        $s6 = "(php_sapi_name() === 'cli')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_wp_adminadd_046 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "create_wp_admin_user($username"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_jm_links_to_db_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "json_decode(base64_decode("
        $s3 = "file_get_contents('http://'.$_POST['url'].'/link.php?key='.$_POST['key'].$parameters)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_login_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if (isset($_POST[\"log\"]) && isset($_POST[\"pwd\"]))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_login_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "wp_set_current_user"
        $s4 = "get_user_by"
        $s5 = "])){$user = get_user_by( 'id', $_REQUEST"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wp_login_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "(preg_match('/admin|wp-login.php|wp-admin|administrator/i',$_SERVER['REQUEST_URI'])"
        $s3 = "if ( stristr($cookie, 'wordpress_logged_in_')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_login_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "substr(pack('H*', sha1($"
        $s2 = "(wp_check_password($password, $hash)){"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_login_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "include('wp-config.php');"
        $s2 = "$user = get_userdata("
        $s3 = "wp_set_auth_cookie  ( $user->ID );"
        $s4 = "echo $message = \"Logged in successfully\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wp_login_008 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "do_action('wp_login', $user_logins);"
        $s5 = "if(isset($_GET['cg'])){ $b = $_GET['cg']; }"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wp_login_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "wp_set_current_user"
        $s4 = "get_user_by"
        $s5 = "clean_user_cache($"
        $s6 = "->data->user_login;"
        $s7 = "user_admin_url();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_backdoor_wp_login_010 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "users.php?role=administrator"
        $s3 = "function hidden_user_query($user_search)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wp_worm_001 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "get_option(\"_is_widget_active_\")"
    condition:
        $s0 and $s1
}

rule php_backdoor_wp_worm_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "@eval(get_option('blogoption"
        $s2 = "add_filter('the_content"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_worm_002_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_option('blogoption', $value, '', 'yes');"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_worm_002_03 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "@eval(get_option('blogoption"
        $s2 = " _theme_setup()"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wp_worm_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "preg_replace"
        $s2 = "function createBrutePass($wordsList, $domain, $login, $startPass, $endPass)"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpsystemlogin_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "\\'SYSTEM_LOGIN\\', \\'support@wordpress.org\\'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wpuser_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "../wp-blog-header.php\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpuser_002 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "$user_id = wp_create_user( $newusername, $newpassword, $newemail);"
        $s4 = "echo 'Successfully created new admin user. Now delete this file!'"
        $s5 = "if($_GET[adduser]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wpuser_002_02 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "$user_id = wp_create_user( $newusername, $newpassword, $newemail);"
        $s4 = "echo 'Successfully created new admin user. Now delete this file!'"
        $s5 = "echo 'before running the script. Set these variables and try again.';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wpuser_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "new WP_User("
        $s1 = "->set_role('administrator');"
        $s2 = "$user_id = wp_create_user("
        $s3 = "$user_id = wp_create_user( $newusername, $newpassword, $newemail);"
        $s4 = "echo 'Successfully created new admin user. Now delete this file!'"
        $s5 = "echo 'This user or email already exists. Nothing was done."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wpuser_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "wp_insert_user("
        $s3 = "'user_email' => 'welcome@domain.com',"
        $s4 = "'user_login' => 'wp_dev"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpuser_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "table_schema=database() AND TABLE_NAME LIKE '%options';\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpuser_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "'error: creating user '"
        $s2 = "INSERT INTO `wp_users` (`user_login`,`user_pass`,`user_email`,`display_name`"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_wpuser_008_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "getElementById('user"
        $s3 = "'Error: Creating to the account."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wpuser_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "wp_insert_user("
        $s3 = "wp-config.php"
        $s4 = "if(($user->id)>1){echo"
        $s5 = "wp_set_password($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_backdoor_wpuser_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "if (isset($_POST[\"MY_AUTH\"]) && $_POST[\"MY_AUTH\"] === \""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_wpuser_011 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "base64_decode("
        $s3 = ");return '';}add_action(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wpuser_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "$content = file_get_contents($file);"
        $s2 = ".md5("
        $s3 = "SET user_pass="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_wscriptshell_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passthru"
        $s1 = "passthru($_"
    condition:
        $s0 and $s1
}

rule php_backdoor_WSO_generic : backdoor
{
        meta:
                sig_type = "STR_CLEARFILE"
                sig_origin = "rodrigo-compact-Signatures"
                sig_description = ""
        strings:
                $s0 = "eva"
                $s1 = "base64_decode"

                $s2 = "WSO 2.1.5 Edition r3coded by Kerupuk"
                $s3 = "WSO SHELL"
		$s4 = "str_split(md5($pass).md5($pass));"
		$s5 = "eval(trim(base64_decode(base64_decode($"
                $s6 = "Y2xOR1FqVmpibXMxV201YU1tVnFZM1pPUjNoM1kyMUZNRkJUWTNCTFUyczMnK"
                $s7 = "owO0lGelpwOp01JhdyWUN1TQ9FJg4CIn42bpR3YhdCKj5Wd"
                $s8 = "SKeJRoo7pZFlVRVltgMoNprFoZX6WBbEyOXsWD"

                $gz = "gzinflate(base64_decode("

                $gz1 = "eval(gzinflate(base64_decode(\"JJ3HkqNaFkX"
                $gz2 = "7X39d9q6sujPuWvd/0H14W7DLiFA0r3bEJLmO7RpkoZ89CN9OcYYcDGYbZuQtCf/+5sZfVg2htB2n3PXW+vts06DpdFoNJ"
                $gz3 = "7f3ZkuNIkiiIPkd8BSs6uunRERkOcHF3RmREFzdwJ50bSKKyxgcEQBIkNifA"
                $gz4 = "7b1pk+JKtiD4OfNXUPnyPSI7l5"
                $gz5 = "7f3ZkuNKkigIPkd8BTMqquhR"
                $gz6 = "$x0r = \""
                $gz7 = "eval(gzinflate(base64_decode($x0r)));"
        condition:
                (($s0 and $s1) and ($s2) or ($s3) or ($s4 and $s5) or ($s6) or ($s7) or ($s8)) or
                (($s0 and $s1 and $gz) and ($gz1) or ($gz2) or ($gz3) or ($gz4) or ($gz5) or ($gz6 and $gz7))
}

rule php_backdoor_WSO_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "('eJzlvWt3GsfSKPzZe639H0YTkoE"
    condition:
        $s0 and $s1
}

rule php_backdoor_WSO_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "@preg_replace(\"/([a-z0-9-%]+).([a-z-@]+).([a-z]+)/\\x65\", \"$2($3(urldecode('$1')))"
    condition:
        $s0 and $s1
}

rule php_backdoor_WSO_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "'%'.substr($"
        $s3 = "preg_replace(\"/(.*)/\\x65"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_WSO_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "WSO"
        $s2 = "FilesMan"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_WSO_008_02 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "JGkzNmE1YjQwZDFjMDQ1YjMwNmJhZTk5NmUzNTU3NTUyND0iZ1x4N2FceDc1XH"
    condition:
        $s0 and $s1
}

rule php_backdoor_WSO_009 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = ")));\",\".\");"
        $s2 = "preg_replace(\"/./\\x65\",\"\\x65\\x76\\x61\\x6c(gzinflate(urldecode("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_backdoor_WSO_013 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".\"\\x"
        $s2 = /\$[\w]+\(\$[\w]+\(\"[^\"]{4000}[^;]+;[\s]*echo[\s]*\"\{\$\{[\s]*eval[\s]*\(\$[\w]+\)[\s]*\}\}\";/
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_WSO_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "if (preg_match($"
        $s3 = "QGluaV9zZXQoJ2Vycm9yX2xvZycsTlVMTCk7DQpAaW5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_WSO_016 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = "VP8dVTyzXPRtnKAso2WdMJA0K2yhK3EurT9ho215XPOaMKEspT9mqS90"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_WSO_018 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "@$_=create_function(\"\",@gzuncompress($__));$_();"
    condition:
        $s0 and $s1
}

rule php_backdoor_WSO_019 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$debuger .= pack (\"C\",hexdec (substr ($string,$one,2)));"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_WSO_020 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "WVkdlRlV5U1RCa01sa3dUMGhaZGs5RVJUTk1lWE0xV1ZScmRrd3piM1pMTUZKNVRsaEJia3RUYTNCUGR6MDknKSkpOw=="
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_WSO_022 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "=strlen($y);$"
        $s2 = "='';foreach("
        $s3 = ");$x='';for($"
        $s4 = "];}return $x;}$"
        $s5 = "){$x.=$y[$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_backdoor_WSO_025 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "preg_replace(\"/["
        $s3 = /<\?php[\s]*function [\w]+\(\$[\w]+\)[\s]*\{[^\}]+\}[\s]*\^[\s]*\$[\w]+\{\$[\w]+\};[^\}]+[\}\s]+return \$[\w]+;[\s]*\}[\s]*\$[\w]+[\s]*=[\s]*preg_replace\(\"\/\[/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_WSO_028 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "function Suicide($m"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_X0MB13shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "X0MB13"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_xhell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "$_POST[$key] = stripslashes($value);"
        $s3 = "} elseif (($perms & 0x8000) == 0x8000) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_zacoshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "<title>Small Web Shell by ZaCo"
    condition:
        $s0 and $s1 and $s2
}

rule php_backdoor_zip_uploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$parts = explode('|', $var_b($_POST['data']));"
    condition:
        $s0 and $s1
}

rule php_backdoor_zip_uploader_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "<title>Upload Zip file"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_backdoor_zip_uploader_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "function unzip"
        $s3 = "function lsdir()"
        $s4 = "echo \"Ok! $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_zip_uploader_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "mail($"
        $s5 = "unzip -o"
        $s6 = "new ZipArchive();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_backdoor_zip_uploader_005 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "is_file("
        $s2 = "unlink($file);"
        $s3 = "if (is_file($fi"
        $s4 = "f ($zip->open($file) === TRUE)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_backdoor_zip_uploader_006 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "unlink("
        $s2 = "$zip->open($_COOKIE["
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_bozkurttim_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "BOZKURT TIM"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_encrypted_001 : defaced
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "<? echo(stripslashes(base64_decode('"
        $s3 = "exit; ?>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_defaced_encrypted_002 : defaced
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = ")){define(\"\\x43\\x59\\x42\\x45\\x52\\x31\\x37\\x33"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_defaced_encrypted_003 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "base64_decode(chr("
        $s3 = ").getcwd"
        $s4 = "($_POST[base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_defaced_gen_005 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "king By : RxR HaCkEr"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_001 : defaced
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "OR(isset($_GET[\"z\"])))"
        $s2 = "OR(isset($_GET[\"z\"])))"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_generic_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Pwn3d  by"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_004 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Lamer-ID"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_005 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "reet"
        $s1 = "PAKISTAN CYBER ATTACKER"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_011 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "ST4RHUN7ER"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_012 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "1IGp1c3QgZ290IGhhY2t"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_013 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>By MiLwrOM"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_014 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "rSpyUp!!</title>"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_015 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Uploader By ATTARI"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_016 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "content='AnonClay Cyber Team"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_defaced_generic_017 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Porn sites list</title>"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_018 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Owned</title>"
    condition:
        $s0 and $s1
}

rule php_defaced_generic_019 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x48\\141\\x63\\x6b\\x65\\144\\40\\x42\\x79\\x20"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_defaced_generic_020 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "PHRpdGxlPjw8IEhhY2tlZCBC"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_hacked_by_you_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "OR(isset($_GET[\"z\"])))"
        $s2 = "$i=strrev(\"uoy yb dekcah\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_joomlahack_001 : defaced
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "message"
        $s1 = "public $offline_message = 'Hacked"
    condition:
        $s0 and $s1
}

rule php_defaced_joomlahack_001_02 : defaced
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "message"
        $s1 = "public $sitename = 'Hacked"
    condition:
        $s0 and $s1
}

rule php_defaced_script_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "Mass Deface"
    condition:
        $s0 and $s1
}

rule php_defaced_script_003 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = ";echo Hacked by"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_script_004 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "AUTOMATIC JOOMLA DEFACER"
    condition:
        $s0 and $s1
}

rule php_defaced_script_005 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "$text=file_get_contents($base_url.'/sym/root/var/named/');"
    condition:
        $s0 and $s1
}

rule php_defaced_script_006 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "fwrite($x,\"Hacked By J4r\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_script_008 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "massdefacedir"
    condition:
        $s0 and $s1
}

rule php_defaced_script_008_002 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "name='execmassdeface"
    condition:
        $s0 and $s1
}

rule php_defaced_script_009 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "defaceIT v"
    condition:
        $s0 and $s1
}

rule php_defaced_script_010 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "Wordpress MassDeface-->"
    condition:
        $s0 and $s1
}

rule php_defaced_script_010_02 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = ">Tum Symlink Listesi"
    condition:
        $s0 and $s1
}

rule php_defaced_script_011 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = "$data_to_post['poc'] = 'SQL Injection"
    condition:
        $s0 and $s1
}

rule php_defaced_script_012 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "Hacked By bajatax"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_script_013 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "hack"
        $s2 = "curl_init (\"http://www.zone-h.org/"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_script_014 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "htm',\"w+\"),@base64_decode($oIndex));"
    condition:
        $s0 and $s1 and $s2
}

rule php_defaced_T1KUS90T_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>T1KUS90T"
    condition:
        $s0 and $s1
}

rule php_defaced_zetas_oujdi_001 : defaced
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "y Zetas Oujdi"
    condition:
        $s0 and $s1
}

rule php_dropper_backdoor_001 : dropper
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "60,63,112,104,112,13,10,105,110,105,95,115,101,116,40,39,117,112,108,111,97,100,95,109,97,120,95"
    condition:
        $s0 and $s1
}

rule php_dropper_generic_001_01 : dropper
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_put_contents($id, file_get_contents(\"http://"
    condition:
        $s0 and $s1
}

rule php_dropper_generic_002 : dropper
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "$bad_template = '<h1 style=\"color:black\">Please read the pdf document.</h1>';"
    condition:
        $s0 and $s1
}

rule php_dropper_generic_004 : dropper
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode(ZWNobyBjb"
    condition:
        $s0 and $s1 and $s2
}

rule php_dropper_hosts_001 : dropper
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "(java)|(windows 95)|(windows 98)"
    condition:
        $s0 and $s1
}

rule php_dropper_hosts_001_02 : dropper
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "http://88.198.28.38/api.php"
    condition:
        $s0 and $s1
}

rule php_dropper_linuxrootkit_001 : dropper
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "$so32 = \"\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x00\\x00\\x00\\x00"
    condition:
        $s0 and $s1
}

rule php_dropper_mayhem_001 : dropper
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "if (getenv(\"MAYHEM_DEBUG\"))"
    condition:
        $s0 and $s1
}

rule php_dropper_pclzip_001 : dropper
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "if (!defined('PCLZIP_READ_BLOCK_SIZE'))"
        $s4 = "file_put_contents($id,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_dropper_reverse_shell_001 : dropper
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");"
    condition:
        $s0 and $s1
}

rule php_exploit_cpanelbruteforce_001_001 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>cPanel brute forcer"
    condition:
        $s0 and $s1
}

rule php_exploit_cpanelbruteforce_001_002 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "@$passwd=fopen('/etc/passwd',"
    condition:
        $s0 and $s1 and $s2
}

rule php_exploit_duplicator_001 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "installer"
        $s3 = "$GLOBALS['FW_DUPLICATOR_VERSION"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_exploit_joomla_reg_001 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Checking joomla 1.6 - 1.7 Registration Exploit</title>"
    condition:
        $s0 and $s1
}

rule php_exploit_leak_001_002 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "posix_getpwuid("
        $s2 = "posix_getpwuid(@fileowner(\"/etc/valiases/\""
    condition:
        $s0 and $s1 and $s2
}

rule php_exploit_leak_001_003 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "posix_getpwuid("
        $s2 = "scandir(\"/var/named"
    condition:
        $s0 and $s1 and $s2
}

rule php_exploit_suphp_001 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "system(\"pwd;ls -lia;uname -a;cat /etc/passwd\")"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_exploit_sysinfo_001 : exploit
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passw"
        $w0 = "@author `system"
        $w1 = "http://fimd.dcid.me"
        $w2 = ">Generated"
        $s1 = /\/etc\/passwd['\"]/
    condition:
        $s0 and $s1 and not $w0 and not $w1 and not $w2
}

rule php_exploit_sysinfo_002 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "}}echo 'rahui#',$maxlen,'#rahui';"
    condition:
        $s0 and $s1
}

rule php_exploit_sysinfo_003 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message2=shell_exec(\"sh inst\");"
    condition:
        $s0 and $s1
}

rule php_exploit_sysinfo_005 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "@fwrite($fp, \"installatron\") !== 12 || @fwrite($fp, \"installatron"
    condition:
        $s0 and $s1
}

rule php_exploit_sysinfo_006 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "* @subpackage  Template.system"
        $s2 = "$p = getcwd();"
    condition:
        $s0 and $s1 and $s2
}

rule php_exploit_sysinfo_007 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "$_POST['cmd'])); } else echo \"echo file_get_contents('/etc/passwd"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_exploit_sysinfo_008 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "posix_getpwuid("
        $s2 = "/etc/passwd Bypasser"
    condition:
        $s0 and $s1 and $s2
}

rule php_exploit_sysinfo_010 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$etc_passwd = @is_readable(\"/etc/passwd\") ? \"<b><span style=\\\"color:white\\\">ON"
    condition:
        $s0 and $s1
}

rule php_hacktool_admin_page_finder_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "xploit_404string"
        $s3 = "logbox"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_admin_page_finder_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Admin Finder"
    condition:
        $s0 and $s1
}

rule php_hacktool_admin_page_finder_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "exec($"
        $s5 = ">Admin Page Finder<"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_adminer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "error_reporting(6135);"
        $s2 = "query(\"SELECT\"."
        $s3 = "adminer()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_adminer_002 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_replace("
        $s1 = ").\"'\".nonce().\"></script>\\n\";}function"
    condition:
        $s0 and $s1
}

rule php_hacktool_amazon_email_validator_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>AMAZON Email CheCker"
    condition:
        $s0 and $s1
}

rule php_hacktool_Arhack_generic_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "[Arhack-team]"
    condition:
        $s0 and $s1
}

rule php_hacktool_auth_pass_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$auth_pass = \""
        $s3 = "\";//"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_autodestroy_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "; unlink(__FILE__); /*"
        $s2 = "*/ ?>"
        $s3 = "<?php echo \""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_autodestroy_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "rmdir($dir.$file) or DIE(\"couldn't delete $dir$file<br />\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_backend_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "}elseif($_GET['page'] == 'keystrokes'){"
        $s3 = "}elseif($_GET['page'] == 'get-webcam'){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_backend_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "$clear_text = openssl_decrypt($encrypt_text, \"DES-EDE3\", $key, OPENSSL_RAW_DATA, \"\");"
    condition:
        $s0 and $s1
}

rule php_hacktool_batckup_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "batckup.tar.gz"
    condition:
        $s0 and $s1
}

rule php_hacktool_bing_dork_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "preg_match_all('#<h2 class=\"sb_h3 cttl\"><a href=\"(https?"
    condition:
        $s0 and $s1
}

rule php_hacktool_bing_scanner_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "$sites = array_map(\"site\", bing(\"ip:"
    condition:
        $s0 and $s1
}

rule php_hacktool_black_sniper_exec_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Black Sniper"
        $s2 = "$exec=exec(\""
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_black_sniper_md5_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Black Sniper"
        $s2 = "$crypt_now=$_GET["
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_black_sniper_zone_h_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Black Sniper"
        $s2 = "curl_init(\"http://zone-h.org/notify/single"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_botnet_CC_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "isset($_POST["
        $s3 = "aHR0cDovL3d3dy5yZWZ1ZC5tZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_botnet_CC_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "addslashes(cleanstring(sXOR(hextostr($_POST"
        $s3 = "mysql_fetch_row($botcheck);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_bruteforce_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "elseif(preg_match('/3[0-9]{2}/',$http_response_header[0])) { $s='success'; }"
    condition:
        $s0 and $s1
}

rule php_hacktool_bruteforce_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Brute"
        $s1 = "echo \"\\nBrute Force"
    condition:
        $s0 and $s1
}

rule php_hacktool_bruteforce_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "if (substr(trim($res), 0, 3) != \"+OK\") {"
        $s2 = "return \"cracked\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_bruteforce_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "function check_acc($login,$pass,$serv,$port)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_bruteforce_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "array('status'=>'GOOD',"
        $s5 = "$info['http_code']"
        $s6 = "curl_multi_add_handle($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_bruteforce_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$argv["
        $s4 = "return array('status'=>'GOOD','success'=>$brutePass['password']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_bruteforce_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(''"
        $s2 = ",array('','}'.$"
        $s3 = ".'//'));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cc_bin_id_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"Put The First 6 Code Of The Card\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_check_requirements_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$result[] = 'The script requires one of the following operating systems"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_check_requirements_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo $ok ? \"SHELL_OK\" : \"SHELL_BAD\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_check_requirements_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "(function_exists('curl_init'))"
        $s2 = "$webz=$_POST["
        $s3 = "$uri_in=$_POST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_checkandall_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "function GetListFiles($folder,&$all_files){"
    condition:
        $s0 and $s1
}

rule php_hacktool_checker_codsec_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "<title>Checker By CodSec<"
    condition:
        $s0 and $s1
}

rule php_hacktool_chmod_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = ">Bypass Chmod"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cms_credentials_stealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo \"<mysqlpass>\".$pass[1][0].\"</mysqlpass><br>\""
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cms_credentials_stealer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "echo $line[\"user_login\"].\"<|>\".$line[\"user_pass\"].\"|new|\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_cms_credentials_stealer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "public $codeReplaceTemplate = 'function the_replacing($"
    condition:
        $s0 and $s1
}

rule php_hacktool_cms_credentials_stealer_004 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$ips = isset($_SERVER['HTTP_CF_CONNECTING_IP"
        $s2 = "$bodys = array('u' => $username,'p' => $password"
        $s3 = "$requests->request( $urls, array( 'method' => 'POST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cms_credentials_stealer_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$pass=explode(\"';\",$pass[1]);"
        $s2 = "or (\"../../config/settings.inc.php\") or (\"../../../config/settings.inc.php"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cms_credentials_stealer_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "preg_match('/<password><!\\[CDATA\\[(.*?)\\]\\]><\\/password>/i',"
        $s4 = "@$_REQUEST['icn'].'|'.@$_REQUEST['icm'].'|'.@$_REQUEST['icy']."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cms_credentials_stealer_007 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('bY7fCoIwHIXvB"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cms_credentials_stealer_008 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$smail=$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'].\"|\".$this->request->post['username"
        $s3 = "$smail=$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'].\"|\"."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cms_credentials_stealer_008_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$smail=$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'].\"|\".$this->request->post['username"
        $s3 = "html_entity_decode($this->request->post['password"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cms_credentials_stealer_009 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "assword=\".($data"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cms_credentials_stealer_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "preg_replace('/(htdocs|httpdocs|www)(.*)/','$1',dirname($_SERVER[\"SCRIPT_FILENAME\"]"
        $s5 = "$addOk = true"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_cms_credentials_stealer_011 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "$subject='Wordpress Pass"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cms_credentials_stealer_012 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "fwrite($hellowp,$username_password,$time);"
    condition:
        $s0 and $s1
}

rule php_hacktool_com_myblog_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "/index.php?option=com_myblog&task=ajaxupload\");"
        $s2 = ".php.jpg"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_configuration_stealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>--==[[Configuration File Killer By Team IndiShell]]==--</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CiH Symlink</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_002_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "CiH_H@CkErZ"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_002_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "$link = getcwd() . \"/\" . $flib;"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo detect_cms().'|';"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "> Server Jumping Finder Version 1.0"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "<title>Config Bot"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "=[File Finder Coy"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "(str_rot13(base64_decode(($mrsimple)"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_configuration_stealer_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('FZnHjoRYEkX3/SPTLRaQeDS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_configuration_stealer_010 : hacktool
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "\\n\";"
        $s2 = "echo \""
        $s3 = /echo ['\"][\w]+.n['\"];[\s]*echo php_uname\(\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_configuration_stealer_011 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "IyEvdXNyL2Jpbi9wZXJsIC1JL3Vzci9sb2NhbC9iYW5kbWluDQpwcmludCAiQ29udGVudC10eXBl"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_configuration_stealer_012 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "$f = $_SERVER['DOCUMENT_ROOT'] . '/configuration.php';"
        $s4 = "$aus = file($f);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_configuration_stealer_013 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Configs Grabber By Thex@b1"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_014 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = ">Extract Emails From [ OpenCart - WordPress - Joomla - WHMCS"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_configuration_stealer_015 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "case 'g': $this->get_properties();"
        $s6 = "case 'i': phpinfo();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_configuration_stealer_016 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "echo(\"<center>Domain Reseller"
        $s5 = "['password'], $cc_encryption_hash);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_configuration_stealer_017 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "preg_match_all('/(.*?):x:/', $passwd, $user_jumping);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_configuration_stealer_018 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "$disFuns=get_cfg_var(\"disable_functions\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_configuration_stealer_019 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "echo \"site = $url[0]\\n\";"
        $s3 = "preg_match('/(.+?);(.+?);(.+?);(.+?);(.*)/', $buffer, $config);"
        $s4 = "a:1:{s:13:\\\"administrator\\\";s:1:\\\"1\\\";}\")"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_hacktool_configuration_stealer_020 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = /symlink\(.\/home\/.\.\$[\w]+\..\/public_html[^\)]+\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_configuration_stealer_021 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "fopen('/home/'.$user.'/.cpanel/contactinfo', 'w');"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_configuration_stealer_022 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "$wpdb->prefix.'users set user_login = \"wpgateway_sec_admin"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_configuration_stealer_023 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "preg_match_all("
        $s3 = "curl_exec($"
        $s4 = "WHMCS/.htaccess"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_configuration_stealer_024 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "$dirz = '/home/'.$username.'/public_html/';"
    condition:
        $s0 and $s1
}

rule php_hacktool_configuration_stealer_025 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$file_get = $_SERVER[\"DOCUMENT_ROOT\"]"
        $s3 = "fwrite($fw, \"GET \" . var_export($_GET, true));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_configuration_stealer_026 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<td><?=$xml->global->resources->default_setup->connection->dbname?></td>"
        $s2 = "<div class=\"heading\"><h1>Magento Current Configuration</h1></div>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_configuration_stealer_027 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "<?php error_reporting(0);"
        $s3 = "error_reporting(0); echo php_uname().\"<br>\".getcwd().\"<br>\";  ?>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cpaneladmin_creator_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "(!file_exists($whm_interface_path))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cpaneladmin_creator_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "accesshash"
        $s3 = "/home"
        $s4 = "if(file_exists($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cpanel_bruteforce_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "cpanel_check"
        $s2 = "$cracktype=$_REQUEST['cracktype'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cpanel_bruteforce_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = ">Cpanel Cracker"
    condition:
        $s0 and $s1
}

rule php_hacktool_cpanel_bruteforce_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = ">Pr1v4t3 Cpan3l Us3r Ch3cker"
    condition:
        $s0 and $s1
}

rule php_hacktool_cpanel_bruteforce_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "Script: Cpanel + FTP Cracker"
    condition:
        $s0 and $s1
}

rule php_hacktool_cpanel_bruteforce_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>1337w0rm"
    condition:
        $s0 and $s1
}

rule php_hacktool_cpanel_bruteforce_006_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "/* RetnOHacK 2013 */ "
    condition:
        $s0 and $s1
}

rule php_hacktool_cpanel_bruteforce_006_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "cPanel Cracker</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_cpanel_bruteforce_006_03 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "<option value=\"shell_exec\">shell_exec</option>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cpanel_bruteforce_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = ">Automatic cPanel Finder/Cracker"
    condition:
        $s0 and $s1
}

rule php_hacktool_cpanel_bruteforce_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "#   Script: Cpanel + FTP Cracker              |"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cpanel_bruteforce_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "cPanel"
        $s2 = ">Automatic cPanel Finder"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cpanel_bruteforce_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = ".\"/.accesshash\";$"
        $s2 = ";ob_start();echo\"http://$"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cpanel_bruteforce_011 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "PD9waHANCg0KQGluaV9zZXQoJ2Rpc3BsYXlfZXJyb3JzJywwKTsNCm"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_cpanel_bruteforce_012 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "file_get_contents(\"http://pastebin.com/raw"
        $s6 = "fopen('/etc/passwd"
        $s7 = ">Automatic cPanel Cracker<"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_hacktool_cpanel_bruteforce_013 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "7X12e6PGsvB052zyHzjEN7KvPBZPu3o50Yb2fdfMPD6AS7SxgwTn5P72292ABJI8W2Vm3g+vJ7"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cpanel_bruteforce_014 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "echo $"
        $s4 = "name=cpanelcracking"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cpanel_reset_password_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "/.cpanel/contactinfo', 'w')"
        $s4 = "/resetpass?start=1'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cpanel_reset_password_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojI1NjcmlwdCBSZXNldHBhc3MgQ3B"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cpanel_reset_password_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "LmNwYW5lbC9jb250YWN0aW5m"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cpanel_reset_password_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "/cpanel3-skel"
        $s4 = "if((preg_match(\"/resetpass/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cpanel_reset_password_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "preg_match_all("
        $s3 = "curl_exec($"
        $s4 = "if(!(preg_match(\"/resetpass"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cpanel_reset_password_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = ":2082/resetpass?user="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_cpanel_reset_password_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "base64_decode(strrev(str_rot13(explode(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_cpanel_reset_password_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "http_build_query($"
        $s3 = "/resetpass"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_cpanel_user_shadow_editor_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "fopen('/home/'.$user.'/etc/'.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_cpanel_user_shadow_editor_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$file=\"$path/$b/shadow\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_cpanel_user_shadow_editor_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "/shadow"
        $s6 = "$ports = array(25, 587, 465, 110, 995, 143, 993);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_cpanel_user_shadow_editor_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "posix_getpwuid("
        $s2 = "dovecot-acl-list\";fwrite(fopen($"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_curl_proxy_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "$val) { curl_setopt($ch, $opt, $val); }"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_databasemanager_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "SQLyog"
    condition:
        $s0 and $s1
}

rule php_hacktool_databasemanager_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "if (preg_match(\"/'DB_HOST"
        $s3 = "} while (strpos($headers, \"\\r\\n\\r\\n\") === false);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_databasemanager_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "search replace db</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_databasemanager_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "<font size=\"4\"><? echo 'Vty - "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_dbshell_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$search, $replace,"
        $s4 = "class icit_srdb"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_dbshell_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "echo \"<table><form method='get' action='wpq.php'><tr><td><label>Stylesheet:"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_dbshell_gen_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = ">PHP MySQL Bridge by <a href=\"http://emagicone.com"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "DDOS"
        $s1 = "PHP DDoS"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "DDOS"
        $s1 = "$_GET['method'])) exit(\"target,"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_003_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "DDOS"
        $s1 = "AnonGhost PHP DDOS"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_003_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "DDOS"
        $s1 = "<input type=\"submit\" value=\"    Launch DDOS Attack    \">"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_003_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "DDOS"
        $s1 = "print \"Flooded: $ip on port $rand <br><br>\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$out.= \"XXDD0S\".$dosstr"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$sock = @fsockopen(\"udp://{$_GET['ip']}\""
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$sock = @fsockopen(\"tcp://{$_GET['ip']}\""
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = "pTjpdqLY1v/zFMT4dTQmCiIOnaI6ioAjIohTp"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_ddos_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "DDOS"
        $s1 = "DDoS-PHP"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "PHP DDoS Bot"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "TCP Flood</b><br>Completed"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_011 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "$packets = $_POST["
        $s3 = "print \"<font color=green><b>"
        $s4 = "fsockopen(\"udp://$ip\", $rand, $errno, $errstr"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_ddos_011_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "input type=\"text\" name=\"packetsize\""
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ddos_012 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo \"Packet complete at \".time('h:i:s').\" with $packets"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ddos_013 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "round($packets/$exec_time,"
    condition:
        $s0 and $s1
}

rule php_hacktool_ddos_013_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>DDoS UDP Flood"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ddos_014 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "fwrite($"
        $s2 = "parse_url($"
        $s3 = "usleep($delay_between_requests"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_ddos_015 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "while(!feof($"
        $s2 = "$linux_proc[array_rand($linux_proc"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_deface_auto_notifier_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_URL, \"http://aljyyosh.org/single.php\""
    condition:
        $s0 and $s1
}

rule php_hacktool_deface_checker_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "hack"
        $s5 = ">Deface Page Checker"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_deface_checker_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "By - MrJoker</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_directory_scanner_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "eval(base64_decode($scanconfig));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_directory_scanner_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "function getHost($url) {"
        $s4 = "if(is_dir($tdir.$sd) and substr($sd"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_doc_redirector_installer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "$red_code = \"<?php\\nheader('Location: http:"
        $s4 = ".docm');\\n?>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_doorwaygen_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = ";return base64_decode($a[$i"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_doorwaygen_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "_gate_path); curl_setopt($curl, CURLOPT_CONNECTTIMEOUT"
        $s5 = "file_get_contents(\"php://input\")); curl_setopt($curl, CURLOPT_REFERER, $_SERVER['REMOTE_ADDR']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_dork_scanner_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = "googleResult[$victim"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_doserscript_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "DOSER SCRIPT"
    condition:
        $s0 and $s1
}

rule php_hacktool_downloader_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "fwrite($f,get_download($_GET["
    condition:
        $s0 and $s1
}

rule php_hacktool_downloader_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$data = get_download($update_url.'?id=1&bad&host='"
    condition:
        $s0 and $s1
}

rule php_hacktool_downloader_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "$ph = bin2hex( mhash( MHASH_SHA256, $_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_downloader_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "style=\"border-collapse: collapse; display:none;\""
        $s4 = "onclick=\"if(confirm(\\'download?\\')){window.open("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_downloader_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "Coded By : MrJoker"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_downloader_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "$urls[$request_count] = \"ftp://\" . $login . \":\" . $password . \"@\" . $domain;"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_hacktool_downloader_007 : hacktool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "CURLOPT_COOKIEFILE,$GLOBALS['coki']);"
        $s3 = /eval[\s]*\(.\?>.\.\$/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_downloader_007_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "CURLOPT_COOKIEFILE,$GLOBALS['coki']);"
        $s3 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_downloader_007_03 : hacktool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "CURLOPT_COOKIEFILE,$GLOBALS['coki']);"
        $s3 = /function [\w]+\([^\)]+url[^\)]*\)[\s]*\{[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_downloader_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "$u\\x73er-\\x3e\\x61\\x6c\\x6c\\x63ap\\x73[\\x27\\x61d\\x6d\\x69n\\x69\\x73tra\\x74o\\x72\\x27"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_downloader_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "eval($"
        $s4 = "(in_array(strtolower(ini_get('safe_mode'))"
        $s5 = "(\"chmod 0777 {$file}\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_downloader_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "getFile(\"http"
        $s2 = "while(!feof($file)) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_drupal_exploit_group_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "where uid %3D '1';#]=FcUk&name[]=Crap&pass=test&form_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_drupal_pwn_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$get = @file_get_contents(\"$tar/?q=user/login\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_dumper_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>nobody - exploit"
    condition:
        $s0 and $s1
}

rule php_hacktool_dumper_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "header(\"HTTP/1.0 404 Not Found\")"
        $s3 = "require 'wp-config.php'"
        $s4 = "mysqldump"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_dumper_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "gagal"
        $s3 = "if (strstr($email[$columns["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_emotet_botnet_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "class Rst"
        $s4 = "const PLATFORM_UNKNOWN"
        $s5 = "self::PLATFORM_LINUX"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_FATT_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "<p>FATT has cleaned up and removed itself.</p>"
    condition:
        $s0 and $s1
}

rule php_hacktool_fb_hack_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = ">Selamat Datang di AutoLikes"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_fb_hack_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "User-Agent"
        $s1 = "$ser = str_replace(\"_\", \"\", $likeid);"
    condition:
        $s0 and $s1
}

rule php_hacktool_fb_steal_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Facebook Login Checker"
    condition:
        $s0 and $s1
}

rule php_hacktool_feed_url_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "&& fetch_feed($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_file_scanner_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "x2', '$OO', 'cache=00', 'file_get_contents("
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ftp_cracker_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "panel & FTP Cracker"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_ftp_cracker_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "panel & FTP Checker"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_fulldeldir_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = ".$file)&&($file!=\".\")&&($file!=\"..\")){full_del_dir"
    condition:
        $s0 and $s1
}

rule php_hacktool_fulldeldir_002 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "rmdir($dir"
        $s2 = "if (is_dir($dir"
        $s3 = "function rrmdir($dir)"
        $s4 = "$directory = $_REQUEST['action'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_fulldeldir_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "rmdir($dir"
        $s2 = "if (is_dir($dir"
        $s3 = "if($_GET[\"error\"] == \"Yes\"){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_fulldeldir_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "unlink($file);"
        $s2 = "$files = glob('../../public_html/*"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_fulldeldir_004 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "rmdir($dir"
        $s2 = "if (is_dir($dir"
        $s3 = "function rrmdir($dir)"
        $s4 = "unlink(getcwd()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_GDDY_tool_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "//GoDaddy Unified PHP Test Script \"GEOFF\""
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "system($cmd . ' 1>/dev/null 2>/dev/null', $code);"
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_002 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "facebook.com/annamLRW"
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "Ip Lookup Reverse Domain by"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_004 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "R14nDarkList"
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "GetFileInfo($_POST['file'],$_POST['isroot']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "file_get_contents(dirname(__FILE__) .\"/\". $savefile);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_generic_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "Cyb3r_Sw0rd"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<link rel=\"SHORTCUT ICON\" href=\"http://xxx-hacker.net"
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "%74%68%36%73%62%65%68%71%6c%61%34%63%6f%5f%73%61%64%66%70%6e%72"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "\"==Multipart_Boundary_x{$semi_rand}x\";"
        $s3 = "Idea Conceived By coolsurfer@gmail.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_012 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "mail("
        $s2 = "MySQL Database Backup / Restore Tool"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_013 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "php-findsock-shell - A Findsock Shell"
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_014 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo '<br>[+] Uname:'.php_uname()."
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_015 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST['username'],$_POST['password'],$_POST['port']"
        $s3 = "file_POST_contents($_SERVER['DOCUMENT_ROOT'].\"/\".$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_016 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "echo `pkill -U $database`; echo \"Complete\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_017 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "error_reporting(0)"
        $s4 = "<title>404"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_generic_018 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Welcome to Blackhole!"
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_019 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "JI82mxLbQ8TRuaK2maHX4ro1MzKt/EikVjyKIi4IymGkrKn"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_020 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "window.onload = function(){display(document.getElementById('regex')); setReplace(document.getElementById('replace'))};"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_generic_021 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "shutdown57"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_021_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Your site has been locked, all files are locked."
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_022 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "domain"
        $s1 = "UPLOAD_FILE_PATH"
        $s2 = "getcwd"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_023 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$_POST"
        $s4 = "netstat -an | grep -i listen"
        $s5 = "IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_generic_024 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "]])){if(strstr($"
        $s3 = "]], \"@\")){echo $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_025 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "etc/trueuserowners"
        $s2 = "array_unique($"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_026 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($secret), base64_decode($string), MCRYPT_MODE_CBC, md5(md5($secret))));"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_027 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "@file_get_contents("
        $s3 = "if(PHP_SHLIB_SUFFIX == 'dll'){"
        $s4 = "$this->mySQL->locate_fatt_sql();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_generic_028 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "scandir("
        $s3 = "deleteDir($dir.'/'.$indv_file1);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_029 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "7b15f+M4jgD69+zvt99B5cl0kkk"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_030 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "CURLOPT_RETURNTRANSFER"
        $s2 = "get_user_by('login', $_POST["
        $s3 = "if(in_array('administrator',"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_031 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "<title>Search in</title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_generic_032 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$_POST"
        $s4 = "<title># Parallels Windows Bypasser"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_generic_033 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents($"
        $s2 = "phpMiniAdmin"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_034 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "openssl_private_decrypt($"
        $s6 = "header('Location: ' . $"
        $s7 = "LS0tLS1CRUdJTiBSU0EgUFJJVkF"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_hacktool_generic_035 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "\\x2f\\x68\\x6f\\x6d\\x65\\x32\\x2f\\x67\\x69\\x75\\x6c"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_036 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "header("
        $s4 = "HTTP_ACCEPT_LANGUAGE"
        $s5 = "Googlebot"
        $s6 = "= @unserialize(gzinflate(file_get_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_generic_038 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "rrmdir($"
        $s5 = "while(false !== ( $file = readdir($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_generic_039 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "=substr(hash(base64_decode('"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_039_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "Key to Code ifany  <input type=\"text\" name=\"key\"><br>"
    condition:
        $s0 and $s1
}

rule php_hacktool_generic_041 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "user_hash_password($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_042 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "nl2br(file_get_contents($path . \"/logs.txt\"))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_generic_043 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "write_log($log_filename);"
        $s4 = "\"User: \".$ip.' - '.date(\"d.m.Y, g:i a\").PHP_EOL;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_generic_044 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "scandir("
        $s3 = "$file_chmod=getChmod($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_generic_045 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "$______"
        $s2 = "/etc/valiases/$______\"));$"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_047 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "zone-h.com/notify/single"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_generic_048 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "trim(fgets($"
        $s5 = "->load_useragent_list("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_generic_049 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "pack('H*','4065727"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_generic_050 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Escanor0xtn"
    condition:
        $s0 and $s1
}

rule php_hacktool_gmailverify_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "fopen('not_gmail.txt', 'a+');"
    condition:
        $s0 and $s1
}

rule php_hacktool_googler_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$hasil = googling($q,$m);"
    condition:
        $s0 and $s1
}

rule php_hacktool_googler_002 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "if(empty($_COOKIE) && $_SERVER[\"REQUEST_URI\"]=='/google"
    condition:
        $s0 and $s1
}

rule php_hacktool_googler_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "* plugin_googlemap2_proxy.php,v "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_highlight_file_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "if(empty($_POST["
        $s3 = ">highlight_file</font></h1>\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_hostdebxorg_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "http://host.deb-x.org"
    condition:
        $s0 and $s1
}

rule php_hacktool_hungerEK_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Hunter Exploit Kit</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_inboxmailer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mailer"
        $s1 = "<span class=\"style1\">Welcome to Inbox Mailer?<br>"
    condition:
        $s0 and $s1
}

rule php_hacktool_ini_settings_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo php_uname()"
        $s2 = "=@ini_get('disable_functions'))){echo \"<font color=green>NONE</font></b>\";}else{echo"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ini_settings_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "ZXZhbChnenVuY29tcHJlc3MoYmFzZTY0X2RlY29kZSgiZU5xVlZndHoya1lRL2l2RXd4UTBKcTRraEVDbGF1"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_inurlbr_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "PHPShell"
        $s2 = "{$_SESSION[\"c1\"]}--exploit-get{$_SESSION[\"c0\"]}"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ircbot_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "//login to the bot"
    condition:
        $s0 and $s1
}

rule php_hacktool_ircbot_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = ".die //kill the bot"
    condition:
        $s0 and $s1
}

rule php_hacktool_ircbot_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "eeLCoMz AI PHPBot"
    condition:
        $s0 and $s1
}

rule php_hacktool_ircbot_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "class pBot"
    condition:
        $s0 and $s1
}

rule php_hacktool_ircbot_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = ",\".raw <cmd> [raw IRC command]\");"
    condition:
        $s0 and $s1
}

rule php_hacktool_ircbot_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "base64_decode('7b10e+M6siD87My38zznP7A1vSt7HBQsOWe"
    condition:
        $s0 and $s1
}

rule php_hacktool_jce_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "\"POST \".$p.\"/index.php?option=com_jce&task=plugin&plugin=imgmanager&file=imgmanager&method=form"
    condition:
        $s0 and $s1
}

rule php_hacktool_jce_exploit_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "9d09f693c63c1988a9f8a564e0da7743; jce_imgmanager_dir=%2F;',CURLOPT_URL => rtrim"
    condition:
        $s0 and $s1
}

rule php_hacktool_joomla_bruteforce_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Brute"
        $s1 = "Joomla Brute Forcer"
    condition:
        $s0 and $s1
}

rule php_hacktool_joomlacloner_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passthru"
        $s1 = "$dbtablesArray = unserialize(stripslashes("
        $s2 = "if (empty($optArray['ss_docroot'])) { $optArray['ss_docroot'] = dirname"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_leproxy_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "require"
        $s2 = "$ php leproxy.php [<listenAddress>] [--allow-unprotected]"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_litespeed_bypass_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo '"
        $s3 = "echo '<star>';eval(base64_decode(str_replace(\" \", \"+\", join(array_slice($a,count($a)-3)))));echo '</star>'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_litespeed_bypass_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "izocin priv9</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_local_root_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_FILES["
        $s2 = "= file_get_contents( '/etc/passwd' );"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_lombokcyber_encoder_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "protected by MessPHP v"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentocredentialstealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "mail("
        $s3 = "Mage_Admin"
        $s4 = "$message = $username.'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_magentocredentialstealer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "/app/etc/local.xml"
        $s2 = "title>MAGENTO - stealing information"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentocredentialstealer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "$emailboss = $username;"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentocredentialstealer_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "umask(0);"
        $s2 = "require_once MAGENTO . '/../app/Mage.php';"
        $s3 = "$user = Mage::getModel('admin/user')->loadByUsername("
        $s4 = "header('Location: ' . $redirectUrl);"
        $s5 = "$redirectUrl = Mage::getSingleton('adminhtml/url')->getUrl(Mage::getModel('admin/user')->getStartupPageUrl(), array('_current' => false));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_magentocredentialstealer_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "getenv(\"REMOTE_ADDR\");$isi=\"Ip : $ip\\nUsermail: $username\\nPassword"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentodatastealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "/app/etc/local.xml"
        $s2 = "echo \"<b>CC ORDER PAYMENT"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentodatastealer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "/app/etc/local.xml"
        $s2 = "Magento Customer Email Dumper"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentodatastealer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "/app/etc/local.xml"
        $s2 = "Read DB---------[M A G"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentodatastealer_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "_COOKIE"
        $s3 = "uto exploiter"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_magentodatastealer_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = " * @category   Mage"
        $s3 = "getcwd("
        $s4 = "/app/code/core/Mage"
        $s5 = "\"base\".\"64\".\"_\".\"de\".\"code\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_magentodatastealer_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "/app/etc/local.xml"
        $s2 = "array('result'=>@unlink(__FILE__));"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentodatastealer_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "fopen(\"door.txt"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_magentomailer_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "mail("
        $s2 = "X-Mailer:"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magentomailer_001_002 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "mail("
        $s2 = "Reply-To:"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magento_admin_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "class Mage_Api2_Model_Auth"
        $s2 = "const DEFAULT_USER_TYPE = 'admin';"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magento_admin_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "app/Mage.php"
        $s2 = "setRoleIds(array($role->getId()))"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_magento_admin_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "if (isset($_GET['ph'])) enablePh();"
        $s3 = "zipCommand(getcwd(), $_SERVER['HTTP_HOST']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_magentoccstealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "-BEGIN PUBLIC KEY"
        $s2 = "'JPEG-1.1'"
        $s3 = "echo 'Pong';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_magentoccstealer_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "-BEGIN PUBLIC KEY"
        $s2 = "'JPEG-1.1'"
        $s3 = "function encrypt("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_magentoccstealer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "substr(md5(md5(microtime()) . rand()),"
        $s4 = "\" . openssl_encrypt(serialize($"
        $s5 = "if (!strpos($_SERVER[\""
        $s6 = "\"] = @$_SERVER["
        $s7 = "die(implode('', file($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_hacktool_mail_ru_parser_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$id_url=\"https://my.mail.ru/\".$id_temp2[0].\"/\".$id_temp[0].\"/\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mail_tester_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$headers.='From: ' . $random_name . '@' . $shell_domain"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mail_tester_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "private function check_virginmedia"
        $s2 = "connect_imap('imap.us.army.mil"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mail_tester_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "error_reporting(0)"
        $s3 = "<title> Email sending tester</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mail_tester_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<form method=\"post\">"
        $s2 = "mail($_POST['email'],\"Test done by"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mail_tester_005 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$subject = $_SERVER['SCRIPT_URI']"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mail_tester_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "if(mail($recipient, $subject, $message, $headers))"
        $s3 = "else{return \"BAD!\";}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mail_tester_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "\"/home/\", \"/home1/\", \"/home2/\", \"/home3/\", \"/home4/\","
    condition:
        $s0 and $s1
}

rule php_hacktool_mail_tester_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "<title>Mail Test</title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mail_tester_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "txt'>MAILLIST by SELLER82</a>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mail_tester_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "<title>Smart Tools Shop - Email sending tester</title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mail_tester_011 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = "'Reply-To: Nikolaevi4koss@mail.ru' . \"\\r\\n\" ."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailerccstealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "------------\\n\";"
        $s2 = ": \".$_POST['credit"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailerJezzy_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"----------------- Spammed By JezzyWire --------------\\n\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailerJezzy_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"---------JEZZY TRADING---------\\n\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailerJezzy_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message  = \"---------------+ Alibobo ReZulT +--------------\\n\""
    condition:
        $s0 and $s1
}

rule php_hacktool_mailerM9AWED_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Sending M-9AWED"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailerS3nd3r_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "..::S3nd3r MAIL::.."
    condition:
        $s0 and $s1
}

rule php_hacktool_mailerSp4m3rFb3_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mailer"
        $s1 = " Mailer By Sp4m3r Fb"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailertool4spam_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "made by http://tool4spam.com "
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$email = $_POST['otkogo'];"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_002 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = /\$emaillist[\s]*=[\s]*\$_POST\[.emaillist.\];/
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "for($x=0; $x<$numemails; $x++){"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "if(mail($email[$i], $subject, $me"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mailer"
        $s1 = ">PHP Mailer By"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>SenderMail"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "</TEXTAREA></p><p>Engenharia:<br><TEXTAREA rows=5 cols=100>"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$x = unserialize(base64_decode($_POST['task']));"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>:: MAILER ::</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_011 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$strr3 = stripslashes($_POST[\"info\"]);"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_012 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo('Sent '.$message_in_min.' messages. Pause 60 sec"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_013 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = ";class DeleteOnExit {function __destruct(){unlink(__FILE__);}}$g_delete_on_exit = new DeleteOnExit();echo 'good';"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_014 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = ".= \"Client IP : \""
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_015 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$urltopost = \"https://id.orange.fr/auth_user2/bin/auth_user.cgi/"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_016 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "ocation"
        $s2 = "getenv("
        $s3 = "$message .= \"Pass"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_016_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .=\"Pass"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_017 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"password:"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_018 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "Mail_LoadFromFile('./from_domains.txt', $g_aFromDomains);"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_019 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"---------------Created By YMCMB"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_020 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$GUT = mail($empfaenger, $betreff, $nachricht, $header);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_021 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = ">Bulk Mailer By"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_022 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$data = json_decode(base64_decode(str_replace("
        $s2 = "$smtp_errors = \"421,422,431,432,"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_023 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "if(!empty($_GET['ora']) && $_GET['ora']=='test')"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_024 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"--------------+ Aol ReZulT"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_025 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"-----------------------Deta!ls"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_026 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$mail->addAddress('tsegadora@yahoo"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_027 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$headers = base64_decode($_POST[\"headers\"]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_028 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "{echo 'done';} else {echo 'not : '.$"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_029 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$stats = 'done:';"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_030 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$sent = \"xxx\".\"sent!\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_031 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mailer"
        $s1 = "if ($_POST[\"enviar\"]){"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_032 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = $_POST[\"subject\"];"
        $s2 = "$post = array("
        $s3 = "curl_setopt($ch, CURLOPT_POSTFIELDS, $post);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_033 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "<textarea name=\"letter\" placeholder=\"Here The Letter\" rows"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_034 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= 'Exp M: ';"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_035 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$reply .= \"< 354 OK.\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_036 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "----> wait \".$_GET['time'].\" Segs. Sending to \"."
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_037 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"************* Fuck"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_038 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "echo \"<script>window.alert(\\\"$numemails_a emails sent!\\\"); history.back(-1);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_039 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mailer"
        $s1 = "base64_decode"
        $s2 = "$fromadr = base64_decode($_POST['fromadr']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_040 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "foreach($mails as $mail)"
        $s2 = "echo \"<b>\".$count.\" Mail(s) sent</b><br><br>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_041 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo \"Mail:\".mails().',Etc:'.base64_encode(etcpasswd());"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_042 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "function smtpmail($host, $port, $smtp_login"
        $s3 = "<$email_polucha>\" . $end_zag;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_043 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>LaymenoS"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_044 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Smart Mailer"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_045 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>.: Wahib Mkadmi Priv8"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_046 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "echo (\": inb0x : $domain !\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_047 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$mailSMTP = new SendMailSmtpClass($LOGIN, $PASSWORD, $SERVER, $NAME, $PORT);"
        $s2 = "$TEXT = $_POST["
        $s3 = "echo \"[good:\".$resA[$a].\"]\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_048 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "$sad=md5($ema[$i]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_049 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "\"Important Information - \".$xx,\"WORKING !\");"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_050 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "if(mail($TO, \"\".$subject.\"\".$dataHora.$x1.$email[$i], $message, $headers"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_051 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"---------------|BY NoBODY|"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_052 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "extract"
        $s4 = "BlackSHOP</title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_053 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "alexusMailer"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_054 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode('aWdub3JlX3VzZXJfYW"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_055 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "mail($Destination, $Subject8, \"\", $header);"
        $s4 = "if ($ac==\"go\"){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_056 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "<title>hecker\\'s spamer v"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_057 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "<title>@Mailer"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_058 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "public function exec($url, $code, $data, $password, $login)"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_059 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo \"uploadezeez <br>\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_060 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "Spyus ANH Mailer"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_061 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "die(PHP_OS.$"
        $s2 = "@$GLOBALS["
        $s3 = "STREAM_CRYPTO_METHOD_TLS_CLIENT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_062 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Sender Anony"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_063 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "else{echo \"$email : NON :(\";}"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_064 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = " = file_get_contents('http:"
        $s2 = "$from_email = \"$name<$SendEmail>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_065 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "<p>PHP MAILER INBOX"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_066 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "<? if($_POST['Send']) { ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_067 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "[SilentAngel]"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_068 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "='----------'.strtoupper(dechex(rand("
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_069 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "('I3hnd3d5DQpAZXJyb3JfcmVwb3J0aW5nKDApOyNnd"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_071 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Outbox priv8 version"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_072 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "Result Report Test - \".$xx,\"WORKING !\");"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_074 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = "if(isset($_POST[\"to_address\"]))"
        $s3 = "404 error"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_075 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title> .:| PHPMailer |::."
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_076 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Fakemailer PRO"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_077 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "PSBtYWlsKHN0cmlwc2xhc2hlcygk"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_078 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "JGl4aHBxID0gc3RyaXBzbGFzaGVzKGJhc2U2NF9kZWNvZGUoJF9QT1"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_079 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "YWRlciA9ICJGcm9tOiAkZnJvbV9zaGVsbGNvZGV"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_080 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$IP = pack(\"H*\", substr(strpos($COOKIE_VARS,"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_081 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = "base64_decode("
        $s3 = "{echo 'not found';}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_082 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>.: Dr Spam"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_083 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>paranoyou test mail"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_084 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "@eval($"
        $s4 = "IVNNYWlsKHRyaW0oJGV4WyRjXSks"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_085 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "'X-Mailer: PHP/' . \\x70\\x68\\x70\\x76\\x65\\x72\\x73\\x69\\x6F\\x6E(); \\$"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_086 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "@eval($"
        $s4 = "dXJsZGVjb2RlKCRfUE9TV"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_087 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "$USE_HOTMAIL_INBOX_METHOD = false; # true/false"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_088 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CaZaNoVa"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_089 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$multipart .= chunk_split(base64_encode($html));"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_090 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = ".$name.' <'.$emailTo.'>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_091 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "exit;"
        $s3 = "echo eval(base64_decode(''));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_092 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Spammer's Mail"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_093 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<input type=\"text\" name=\"email\" value="
        $s2 = "if (!empty($_GET['email'])){"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_093_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<input type=\"text\" name=\"email\" value="
        $s2 = "if (!empty($_POST['email'])){"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_094 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = "<\\?php[\\s]*$tranta = mail(stripslashes($_POST['cliento']), stripslashes($_POST['ticketvar"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_095 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$entry_line = \"$ip | UA: $agent | \\r\\n\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_096 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($name,$email_subject,$email_message,$headers);sleep (1);print"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_097 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "<a href=\"http://www.dangerousmailer.com"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_098 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $w0 = "<title>FormMail v"
        $s2 = /<title>\S+[Mm][Aa][Ii][Ll]([Ee][Rr])?\s*v\d+(\.\d+)?\s*<\/title>/
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule php_hacktool_mailer_099 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "= mail($"
        $s3 = ";} else {echo '"
        $s4 = ": ' . $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_100 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$rand=rand(999,99999);"
        $s2 = "if(isset($_GET['del']))"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_101 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "$_ = \" -u : http://\" . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'] . \" \"; $_ .= \" -p : \" . __file__; $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_102 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "by xIgOr"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_102_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "/_/\\_\\_|   \\__,_|_| |_| |_|"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_103 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "= mail($"
        $s3 = "$msgrand = str_replace(\"%rand%\", $num1, $mensagem[$msg]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_104 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "imap_mail($"
        $s4 = /\$[\w]+[\s]*=[\s]*base64_decode\(\$_POST\[.[\w]+.\]\);[\s]*\$[\w]+[\s]*=[\s]*imap_mail\(\$[\w]+,[\s]*\$[\w]+[^;]+\);[^>]+if[\s]*\(\$[\w]+\)[\s]*\{[\s]*echo[\s]*.[\w]+.;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_105 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "echo \"<br>$n - Sending... => $taz => <b> <font color=green> Success</font></b>\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_106 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "function crossEcho($string)"
        $s4 = "static function write_config_file"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_107 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "message' => 'Sukses'"
        $s4 = "mail($_POST['to'], $_POST['subject'], base64_decode($_POST['letter"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_108 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "Anonymous Email Mail Sender"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_109 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$_F=__FILE__;$_X='Pz48P3BocA0K"
        $s2 = "Pz48P3BocA0KLy9Ca3NtNGw1ICoqKFIyMlRUTikqKg0KczV0X3"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_110 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "extract"
        $s4 = "BY RFX"
        $s5 = "@mail(\"XXXX\",\"MAILIST\",$emaillist,\"From: X <XXX>\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_111 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "rand("
        $s2 = "getenv(\"REMOTE_ADDR\");"
        $s3 = "$_SERVER['HTTP_HOST'];"
        $s4 = "From:"
        $s5 = "mail($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_113 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "@eval($"
        $s4 = "vL2Z0YWRqenJidg0KLy8vaHRtbg0KJHJlc"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_114 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "base64_decode("
        $s2 = /echo[\s]*'[\w]+'[\s]*;[\s]*\}[\s]*else[\s]*\{[\s]*echo[\s]*'[\w]+[\s]*:/
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_115 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(${$"
        $s2 = "$xName"
        $s3 = "$xPass"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_116 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "->getMessage"
        $s2 = /\$[\w]+[\s]*=[\s]*\$_SERVER\[.HTTP_HOST.\];[\s]*\$[\w]+[\s]*=[\s]*.[\w]+.;[\s]*try[\s]*\{[\s]*mail\(\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+\);[\s]*\}[\s]*catch[\s]*\([^\)]+Exception[\s]*\$[\w]*\)[\s]*\{[\s]*echo[\s]*\$[\w]*->getMessage\(\);[\s]*return;[\s]*\}[\s]*echo[\s]*.[\w]+..;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_117 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$_SERVER['SERVER_NAME']"
        $s2 = /\$[\w]+[\s]*.=[\s]*\$[\w]*[\s]*=[\s]*\$_SERVER\[.SERVER_NAME.\].\$_SERVER\[.PHP_SELF.\]...n.;[\s]*\$[\w]+[\s]*=[\s]*mail\(\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+\);[\s]*if\(\$[\w]+\)[\s]*echo[\s]*.[^;]+;[\s]*else[\s]*echo[\s]*[^;]+>.;/
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_118 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "<title>DeaRMaileR"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_119 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JHZpc2l0YyA9ICRfQ09PS0lFWyJ2aXNpdHMiXTs"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_120 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "Dr.Inj3ction"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_122 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "Civilian Shell"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_123 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "base64_decode("
        $s2 = "_mb_mime_encode($subject"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_124 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "lZjHDsXKcaYfQE+hhQFfgTCYEzRaHOZMHmZyYBjMOWcO9Oxz7LX"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_125 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "};}if(mail($_POST[\"\\x74o\"],$_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_126 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo '1';"
        $s2 = "if(function_exists(\"mail\"))"
        $s3 = "Mail Working!');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_127 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo(\"<font color=red>Not Support For Mailer</font>\"); } ?>"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_128 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "<font color=green>OK</font><br>"
        $s3 = "if(mail($email[$i], '', $message, $headers"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_130 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<input type=\"text\" name=\"email\" value="
        $s2 = "if(@checkdnsrr(array_pop(explode(\"@\",$email)),\"MX\")){return true;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_131 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$web=\"$_SERVER[HTTP_HOST]\";"
        $s3 = "$email = \"Check@$web\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_132 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "N3TWAR SPAMMER"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_133 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "oFucks($_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_134 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "N3TW4R INBOX"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_135 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "(isset($_SERVER["
        $s3 = "$link = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_136 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
        $s2 = "substr(strrchr($username, \"@\"), 1);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_137 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "PRIV8 MA!L3R"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_138 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$_SERVER['SERVER_NAME']"
        $s2 = "phpversion();"
        $s3 = "php_uname();"
        $s4 = "mail($_POST["
        $s5 = "gethostbyname($_SERVER['SERVER_NAME']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_139 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "a5hbHLqTibXK32jEDRbi1Lu2qneNoNJmbxXXQZOOwCze+wDl2Y60"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_140 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "echo \"$mail\\n\";"
        $s3 = "if (mail($mail, $subject, $letter, $headers))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_141 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$headers .= \"From"
        $s3 = "var data = \"ajax=1&from="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_142 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(${$"
        $s2 = "SMTP CRACKER"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_143 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "stripslashes"
        $s3 = "foreach(array(\"Server Name\" => @php_uname(), \"System"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_144 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$body=$back;"
        $s2 = "$back=$_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_145 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "$back=$_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_146 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "if(@isset($_POST["
        $s3 = "mail($"
        $s4 = "Content-type:text/html"
        $s5 = "echo \"<br>Sending Email To : \".$email.\" => Done\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_147 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "(isset($_SERVER["
        $s3 = "json_decode(file_get_contents("
        $s4 = "if (isset($_POST['email"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_148 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "top.location"
        $s4 = "$url = $url . \"&text=\" . urlencode($messaggio);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_149 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "document.location.href=\"https://outlook.office"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_150 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "Content-Type"
        $s4 = "function kirim_mail($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_151 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FZvHkoPKskU/554TDPAuXtwBAuG9h8kNPAjvzdc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_152 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "$results[] = array( 'code' => 'OK', 'msg' => \"Directory $dir is writable\" );"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_153 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>.::: STRONG MAILER"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_154 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "\"|-----------"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_155 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "exit"
        $s2 = "if(mail($_GET['email'],\"Working Id# \".$_GET['id'],\"Working \".$_GET['id'])) print"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_156 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "HZu3csNYtkU/Z7oLAUh41IvgvfdIpuC99"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_157 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "</font>Number of emails"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_158 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "<H2>PR1V8 M4IL3R BY"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_159 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "CnNlc3Npb25fc3RhcnQoKTsKZXJyb3JfcmVwb3J0aW5nKDApOwpzZXRfdGltZV9saW1pdCgwKTsKaW5pX3NldCgibWVtb3J5X2xpbWl0IiwtMSk7CgokbGVhZlsndmVyc2"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_160 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$_SERVER['SERVER_NAME']"
        $s2 = ".$_SERVER['SERVER_NAME'].\"\".$_SERVER['REQUEST_URI'].\"\\nInfo"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_161 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "),NULL,iconv_mime_encode(_"
        $s4 = "):chunk_split(base64_encode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_162 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "mail($to"
        $s5 = /\$subject[\s]*=[\s]*\$_POST\[.subject/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_163 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$_SERVER['SERVER_NAME']"
        $s2 = "$url, 'From:"
        $s3 = "$url = (!empty($_SERVER['HTTPS'])) ? \"https://\".$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'] : \"http://\".$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_164 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = ";} else {echo"
        $s4 = "foreach($_POST as $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_hacktool_mailer_165 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = /\$_POST\[.password.\]/i
        $s3 = "for($i = 0; $i < $"
        $s4 = "isset($_POST[\"password\"]) &&"
        $s5 = "echo json_encode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_166 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "extract"
        $s6 = "<title>Owl PHPMailer <?php echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_mailer_167 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "->Parse('{from_user}@' . $"
        $s5 = "++; } echo serialize(array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_168 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JHR1anVhbm1haWwgPSAnS2VsdWFyZ2FIbWVpN0B5YW5kZXguY29tJzsKJHhfcGF0aCA9ICJodHRwOi8vIiAuICRfU0VSVkVSWydTRVJWR"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_169 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "<center>LOGIN DETILS</center>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_170 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "base64_decode($"
        $s3 = "$from_user = $to_data"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_171 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>XasTrO Mailer</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_172 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "mail($"
        $s5 = "substr(str_shuffle(str_repeat("
        $s6 = "if ($_COOKIE['cookies'] == md5($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_mailer_173 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "mail($"
        $s5 = "if(function_exists(\"mail\")) {"
        $s6 = "$cpanelid"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_mailer_174 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "base64_decode($"
        $s3 = "md5(rand());"
        $s4 = "function sendMail($to, $subject"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_175 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$_SERVER['REMOTE_ADDR'];"
        $s2 = "$password = $_POST['password'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_176 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Priv8 Mailer"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_177 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "lXjHDsXKceUH6Cu0MOAnEAZzgqwFc46Xl8kwDOac"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_178 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "chunk_split(base64_encode($msg));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_179 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = ",);}}@ini_set(_"
        $s5 = ");exit();endif;if(isset($_REQUEST[_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_180 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = ": eval(eval(eval(eval(eval(eval(eval(eval("
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_181 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "mail($to"
        $s5 = "Die for LOA in A or O"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_182 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZWNobyAnIyNTVEFSVF9EQVRBIyMnOw0KJGkgPSAwOw"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_183 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"New Login : ip\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_184 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "<TITLE>Verifying...</TITLE>"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_185 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "CnNlc3Npb25fc3RhcnQoKTsKZXJyb3Jfc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailer_186 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google"
        $s6 = "||POSTDEMON.FROM.OPIO||"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_mailer_187 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "LH3FtqXK0u7TnGRCE5cm7u5n7sB64s7T"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_mailer_188 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "$message .= \"Password : {$password} <br>\\n\";"
        $s7 = "str_replace(array(\"name\", \"\\n\", \"\\t\", \" \", \"-\", \"_\"), NULL, strtolower(trim($purpose)));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_hacktool_mailer_189 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "@json_decode(file_get_contents("
        $s4 = "$message = \"<div style='background: #1A1A1A; text-align: center;"
        $s5 = "foreach ($os_a as $regex => $value)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_190 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "while(!feof($"
        $s2 = "){if(strtoupper(substr(PHP_OS,"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_191 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "ocation"
        $s2 = "getenv("
        $s3 = "http_build_query($"
        $s4 = "message .="
        $s5 = "api.telegram.org/bot"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_mailer_gen_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$result = mail(stripslashes($to), stripslashes($subject), stripslashes($message), stripslashes($header));"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailer_gen_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "\\x68\\x74\\x74\\x70\\x3A\\x2F\\x2F"
        $s4 = "\\x67\\x65\\x74\\x73\\x70\\x61\\x6D\\x74\\x6F\\x6F\\x6C\\x2E\\x63\\x6F\\x6D"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_mailer_gen_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$txt .= \"USER:"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailer_gen_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "ZxHj4NKFoV/zrwnFmQwmhU5R5M3I3LOmV8/7oWlt"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mailmailer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "sendstatus.document.write('<title>MailMailer Status</title></head>"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailstealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "echo \"<span class='red'>$f</span> Emails Founded. Check <span class='red'>\".htmlspecialchars($_GET['name"
    condition:
        $s0 and $s1
}

rule php_hacktool_mailstealer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "function cek_email($file"
        $s2 = "buka_dir($cwd);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mailstealer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$sql = \"SELECT user_email FROM \".$mysqli->real_escape_string($table_prefix).\"users\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_massdelete_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>@del</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_massdelete_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "= getcwd()"
        $s2 = "rrmdir($dir)"
        $s3 = "All Files/Folders"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_massdelete_003 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "rmdir($dir"
        $s2 = "if (is_dir($dir"
        $s3 = "function rrmdir($dir)"
        $s4 = "$dir = getcwd();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_massdelete_004 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "X21hdGNoKCRyZWcsJGZpbGUpKQ0KCQl1bmxpbmsoJGZpbGUpOw0"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_massdelete_004_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "LnBocCcsIDA3NzcpOw0KICAgIGZpbGVfcHV0X2NvbnRlbnRz"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_massdelete_004_03 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "MDc3Nyk7DQogICAgdW5saW5rKCd3YXRlcm1hcmsvcHVibGljX2h0bWwnKTsNCn0NCg=="
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_massdelete_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "is_file("
        $s2 = "unlink($file);"
        $s3 = "if(is_file($file)){"
        $s4 = "$files = glob($path.'/*');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_massinboxmailer20_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "<title>Mass Inbox Mailer v2.0</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_massdeface_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "WP MASS</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_massdeface_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Deface"
        $s1 = ">~~./Mass Deface 2~~<"
    condition:
        $s0 and $s1
}

rule php_hacktool_massdeface_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "Hacked by l0c4lh34rtz"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_massdeface_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$defaceurl = $_POST['massdefaceurl'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_morphine_kit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "_il_exec')){return _il_exec();}echo('Morphine kit require PHP"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mysql_drop_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "die"
        $s1 = "passw"
        $s2 = "$table = $table[0];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mysql_drop_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "die("
        $s2 = "echo \"Database \".DB_NAME.\" was successfully dropped"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_mysql_drop_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "$wpdb->query($"
        $s2 = "= \"SHOW TABLES LIKE '%'\""
        $s3 = "= \"DROP TABLE IF EXISTS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_mysql_shell_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "setcookie( \"mysql_web_admin_password\""
        $s2 = "ini_get"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_navicat_HTTP_tunnel_tester_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Navicat HTTP Tunnel Tester</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_packer_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "echo \"File \".$_GET['file_name'].' unzip successfully.';"
    condition:
        $s0 and $s1
}

rule php_hacktool_packer_002 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "<h1>Archive Unzipper"
    condition:
        $s0 and $s1
}

rule php_hacktool_packer_003 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "// PhpConcept Library - Zip Module"
        $s2 = "$archive->errorInfo(true));"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_packer_003_02 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "// PhpConcept Library - Zip Module"
        $s2 = "chmod($basedir"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_packer_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = ">DONE!</span>"
    condition:
        $s0 and $s1
}

rule php_hacktool_packer_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "INDONESIA GALAUERS"
    condition:
        $s0 and $s1
}

rule php_hacktool_packer_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "@touch($filePath, $needFileTime, $needFileTime);"
        $s2 = "$remoteZip=@$_POST['remotezip'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_packer_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "$archive = new PclZip(\""
        $s4 = "if ($archive->extract() == 0) {"
        $s5 = "die(\"Error : \".$archive->errorInfo(true));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_packer_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "=urldecode("
        $s2 = "Jy4kTzAwTzBPKCRPME9PMDA"
        $s3 = "};eval(${${\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_page_rank_checker_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "='http"
        $s2 = "$url"
        $s3 = "return \"<div><b>PageRank"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_paypal_checker_anonisma_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>CHECKER PAYPAL BY ANONISMA </title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_paypal_email_validator_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "<title>PayPal Valid Email Detect Country"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_paypal_email_validator_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>PayPal Email Validity Checker"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_paypal_email_validator_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CHECKER PAYPAL BY"
    condition:
        $s0 and $s1
}

rule php_hacktool_paypal_email_validator_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "$this->fetch_value($run,'s.eVar36=\""
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_paypal_email_validator_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "JOkEr7"
    condition:
        $s0 and $s1
}

rule php_hacktool_paypal_email_validator_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "PAYPalid Mail CHECKER"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_paypal_validator_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "PayPal_Validator"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_paypal_validator_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<div"
        $s2 = "path/to/your/api.php\" onkeyup=\"getApilistLength()\""
        $s3 = "valid account\">VALID"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_permfolders_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "perm-folders.log"
        $s2 = "function GetListFiles"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_permfolders_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "recurDir('.',0777);"
    condition:
        $s0 and $s1
}

rule php_hacktool_phish_scanner_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "getcwd("
        $s3 = "$directoryParts = explode('/', ltrim($_POST['directory'], '/'))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_phish_scanner_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "MCurl"
        $s2 = "if(!$this->_result) $this->scan();"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phish_scanner_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "MCurl"
        $s2 = "$url = \"http://$domen/\".\"$path\".\"/$i.php\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phishbackend_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "priv8"
        $s1 = "CONTADOR v2.0 - DESENVOLDI POR"
    condition:
        $s0 and $s1
}

rule php_hacktool_phishbackend_001_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "priv8"
        $s1 = "MullaKill Priv8"
    condition:
        $s0 and $s1
}

rule php_hacktool_phishbackend_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "function recurse_copy("
        $s2 = "@mkdir($"
        $s3 = "rand("
        $s4 = "md5("
        $w0 = "ThinkPHP.CN"
        $s5 = "header("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and not $w0
}

rule php_hacktool_phishbackend_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "var output = Aes.Ctr.decrypt(Turr, Hassan, $nBits);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_phishbackend_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "skype:sowakidi"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_hacktool_phishbackend_004 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = /l33bo_phishers/
    condition:
        $s0 and $s1
}

rule php_hacktool_phishbackend_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "personal.natwest.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phishbackend_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "document.write(output)</script></head></html>\";"
        $s4 = "$ciphertext = AesCtr::encrypt($buffer, $key, $nBits);"
        $s5 = "function encrypt($buffer){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_phishbackend_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$('.gone_bt').click(function(){window.location.href=\"http"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phishbackend_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "if(filter_var($IPaddress,FILTER_VALIDATE_IP,FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)!==false){return $IPaddress;}}}}}function clientData"
    condition:
        $s0 and $s1
}

rule php_hacktool_phishbackend_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "CURLOPT_RETURNTRANSFER"
        $s2 = "function fetch_value($str, $find_start, $find_end)"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phishbackend_011 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$domain = substr(strrchr($login"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phishbackend_012 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$ip_protection_api"
    condition:
        $s0 and $s1
}

rule php_hacktool_phishbackend_013 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "DNThirTeen"
    condition:
        $s0 and $s1
}

rule php_hacktool_phishbackend_014 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "mail($"
        $s3 = "$ip = $_SERVER['REMOTE_ADDR'];"
        $s4 = "$user = $_POST["
        $s5 = "$pass = $_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_phishbackend_015 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "deleteAll('botadmin.php');"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phishbackend_016 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "403 Forbidden"
        $s2 = "\\x00\",\"charAt\",\"decodeUTF8\",\"indexOf\",\"replace"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phishbackend_017 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "getenv(\"REMOTE_ADDR\");"
        $s3 = "urlencode(urlencode(gethostbyaddr($ip)));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_phishbackend_018 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "if($_GET["
        $s2 = "isset($_POST['password"
        $s3 = "antibot.pw"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_phishtank_check_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_REFERER']"
        $s2 = "if( parse_url($_SERVER['HTTP_REFERER'])['host'] == 'phishtank.com'){"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_phonehome_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "$bad_zones = array(\".ru\", \".su\", \".ua\", \".kz\", \".by\","
    condition:
        $s0 and $s1
}

rule php_hacktool_phonehome_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo \"-=IDB=-$id-=IDE=-\\n\""
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_php_cgi_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html"
        $s2 = "$packet  = \"POST \".$p.\"/?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_php_file_manager_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "* PHP File Manager ("
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_php_proxy_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "\"<?php echo $GLOBALS['_config']['basic_auth_var_name'] ?>\" value=\"<?php echo base64_encode($data['realm']) ?>\""
    condition:
        $s0 and $s1
}

rule php_hacktool_php_proxy_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"[php][RES]\" . base64_encode($respond) . \"[/RES]\\n\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_php_proxy_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "if($fp = @fsockopen($ip, $port, $errno, $errstr, 20))"
    condition:
        $s0 and $s1
}

rule php_hacktool_php_proxy_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "return $proxify ? \"{$GLOBALS['_script_url']}?"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_php_proxy_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "new RegExp"
        $s2 = "# Author: Brad Cable"
        $s3 = "# Surrogafier v"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_phpbb_memberlist_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html"
        $s2 = "$packet=\"POST \".$p.\"memberlist.php?joined_select=lt&active_select=lt&count_select=eq"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_pma_rce_scanner_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "print \"[-] example: intitle:phpMyAdmin\\n\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_portscan_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "if(@socket_connect"
        $s3 = "mxs.mail.ru"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_portscan_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "tBm48cvBlT8zsqxM3msMC7zSD0lVZCuQ5COOSG/iUVdQQFZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_post_request_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "function do_post_request($url, $data, $optional_headers"
        $s2 = "$p = getRandChar($pcount);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_postmanfull_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "PostMan Full "
    condition:
        $s0 and $s1
}

rule php_hacktool_ppcheck_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "<title>#ScannerID - PayPal Checker"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ppcheck_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "TrojanzBoy<br>Paypal Checker</font></p>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ppcheck_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "$_CheckAction = curl('https://www.paypal.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ppcheck_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "$ketqua = $mailx->check($email"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ppcheck_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<title>The Joker Private Checker</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_prestashop_cc_stealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "explode(\"'_DB_PASSWD_',"
        $s2 = "($config as $wpcon)"
        $s3 = "\"../../../../../../config/settings.inc.php\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_priv8shell_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "priv8"
        $s1 = "priv8 WebShell"
    condition:
        $s0 and $s1
}

rule php_hacktool_priv8shell_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "www.priv8shop.biz"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_proxy_gen_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "die(\"<html><head><title>miniProxy"
    condition:
        $s0 and $s1
}

rule php_hacktool_random_ua_creator_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "rand"
        $s2 = "chooseRandomBrowserAndOS"
        $s3 = "function chooseRandomBrowserAndOS("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_random_ua_creator_002 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "rand"
        $s2 = "$linux_proc[array_rand($linux_proc, 1)]"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ransomware_001 : hacktool
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "base64_decode( file_get_contents($"
        $s4 = "hash('sha256', $key, true)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_ransomware_001_02 : hacktool
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>File Infected"
    condition:
        $s0 and $s1
}

rule php_hacktool_ransomware_002 : hacktool
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$victim = unserialize(file_get_contents(FOLDER.'ph_v_data_'.$id.\".pdb"
    condition:
        $s0 and $s1
}

rule php_hacktool_ransomware_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".chr("
        $s4 = ",chr(60).chr(63).chr(112).chr(104).chr(112).chr(32)"
        $s5 = "=@sha1_file($"
        $s6 = ";mail($to,$subject,$message,$headers);}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_ransomware_004 : hacktool
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "This is a notice of <a href=\"https://en.wikipedia.org/wiki/Ransomware\">ransomware</a>"
    condition:
        $s0 and $s1
}

rule php_hacktool_ransomware_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "$ch = curl_init($this->getEncryptedKey() . \"?d=\" . $domain);"
    condition:
        $s0 and $s1
}

rule php_hacktool_ransomware_005_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "add_filter('content_save_pre', 'wpe_encrypt_before_save"
    condition:
        $s0 and $s1
}

rule php_hacktool_ransomware_006 : hacktool
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "base64_decode( file_get_contents($"
        $s4 = "mcrypt_get_iv_size"
        $s5 = "deRanSomeware"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_ransomware_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".chr("
        $s4 = ",chr(60).chr(63).chr(112).chr(104).chr(112).chr(32)"
        $s5 = "=@sha1_file($"
        $s6 = ";mail($to,$subject,$message);}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_ransomware_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "ter@spl0it"
    condition:
        $s0 and $s1
}

rule php_hacktool_ransomware_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function("
        $s3 = "$wpdb->posts SET post_status='null"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_ransomware_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "PHRpdGxlPkNvblRpbWU8L3RpdGxlPg0KPGxpbmsgcmVs"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ransomware_ctb_locker_001 : hacktool
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "dectest"
        $s2 = "elseif (isset($_POST[\"dectest\"]) && secret_ok())"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_ransomware_ctb_locker_002 : hacktool
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "dectest"
        $s2 = "$allenc = file_exists('allenc.txt')"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_revsliderexpoit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array_filter"
        $s2 = "\"{$__['target']}/wp-admin/admin-ajax.php?action=revslider_ajax_action"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_safemodedisabler_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Safe Mode Fucker</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_safemodedisabler_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "ZGlzYWJsZV9mdW5jdGlvbnM9ZGw"
    condition:
        $s0 and $s1
}

rule php_hacktool_safemodedisabler_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Safe Mode Bypass | LeetSec</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_SAPE_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "class SAPE_base"
        $s2 = "var $_server_list = array('dispens"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_SAPE_001_03 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "/'._SAPE_USER.'/"
    condition:
        $s0 and $s1
}

rule php_hacktool_SAPE_001_04 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "class SAPE_base"
        $s2 = "array('dispenser-01.sape.ru"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_SAPE_001_05 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "_SAPE_USER"
        $s2 = "/'._SAPE_USER.'/"
        $s3 = "echo $sape_articles->process_request();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_SAPE_001_06 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include(TEMPLATEPATH.'/login.php');"
        $s2 = "$ip_real=ip2int(getenv('REMOTE_ADDR'));"
        $s3 = "$ip[\"ip_name\"][]=\"northernlight\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_SAPE_001_07 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "_SAPE_USER"
        $s2 = "/'._SAPE_USER.'/"
        $s3 = "echo $client_lnk->build_links();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_SAPE_001_08 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "_SAPE_USER"
        $s2 = "/'._SAPE_USER.'/"
        $s3 = "/'._SAPE_USER.'/ML.php"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_SAPE_001_09 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "_SAPE_USER"
        $s2 = "class LinkfeedClient {"
        $s3 = "class SAPE_base {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_SAPE_001_10 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "SAPE Code"
        $s2 = "FILE_TO_SAPE_EDIT_FIRST"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_SAPE_001_11 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "_SAPE_USER"
        $s2 = " = new SxGeo("
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_SAPE_001_12 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "_SAPE_USER"
        $s2 = "/'._SAPE_USER.'/"
        $s3 = "$text = @$args['block'] ?"
        $s4 = "_SAPE_USER', $this->settings->user );"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_SAPE_002 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "SAPE"
        $s1 = "_SAPE_USER"
        $s2 = "$sape = new SAPE_client"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_SAPE_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "wp_foots();"
        $s2 = "josfooter();"
        $s3 = "wp_foots()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_SAPE_002_03 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "wp_foots();"
        $s2 = "josfooter();"
        $s3 = "josfooter()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_SAPE_003 : hacktool
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "wp_foots();"
        $s2 = "josfooter();"
        $s3 = /include\([^\)]+gif.\)/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_scaninb0xhotmail_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "scan inb0x hotmail"
    condition:
        $s0 and $s1
}

rule php_hacktool_se3curity_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "||~ http://www.se3curity.com ~||"
    condition:
        $s0 and $s1
}

rule php_hacktool_search_replace_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "static $count = 1; echo  $count.\". \".$path_to_file2;echo \"<br>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_Sh4hien_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "<!-- Sh4hien - Egyptian Shell Team"
    condition:
        $s0 and $s1
}

rule php_hacktool_shelluploader_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "$shellz = $_POST['shells'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_shelluploader_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "array('qqfile'=>\"@$uploadfile\"));"
    condition:
        $s0 and $s1
}

rule php_hacktool_shelluploader_003 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "$HASHWORD in OneFileCMS"
    condition:
        $s0 and $s1
}

rule php_hacktool_shelluploader_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "://pastebin.com/raw"
        $s4 = "fwrite($"
        $s5 = "function inf"
        $s6 = "function shell"
        $s7 = "pastebin.com/raw.php?"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_hacktool_shelluploader_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "echo \"your shell location"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_shelluploader_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "preg_"
        $s3 = "* DM-5HELL 2014 *"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_shopsearcher_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "class ShopSearcher extends ScannerOfDomination"
    condition:
        $s0 and $s1
}

rule php_hacktool_simpleimageupload_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "$target.\"/index.php?option=com_simpleimageupload&task=upload.upload&tmpl=component\")"
    condition:
        $s0 and $s1
}

rule php_hacktool_simpleimageupload_exploit_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "if($_GET['h']<>''){"
        $s6 = "echo \"<img src='temp.gif' / ><hr>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_site_scanner_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "= Array('"
        $s2 = "file_get_contents("
        $s3 = "\"max_execution_time"
        $s4 = "$TARGET_HOST/scanner?scan_id=$scan_id&token=$token"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_site_scanner_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$uurl=@file_get_contents($base_url.\"wp-includes/admin-bar.php\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_site_scanner_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "CURLOPT_USERAGENT"
        $s2 = "function arr_trim($arr)"
        $s3 = "arr_trim(read_file("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_site_scanner_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "('.');if(count($rs)<850){header('HTTP/1.1 200');exit;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_slackercode_email_extractor_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = ">Slackercode eMail Extractor</"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_slowloris_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "elseif($_GET['method'] == \"slowloris\")"
    condition:
        $s0 and $s1
}

rule php_hacktool_smtp_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "link(\"shadow\",\"shadow.bak3x\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_spamtool_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "$Password,base64_decode(urldecode($InRequest)),MCRYPT_DECRYPT,'amsstatinivector');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_spamtool_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$replyTo=leafTrim($_POST['replyTo']);"
    condition:
        $s0 and $s1
}

rule php_hacktool_spamtool_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "new PHPMailer;"
        $s4 = "if ($_POST['action'] == \"send\")"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_spamtool_002_03 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mailer"
        $s1 = "leafmailer"
    condition:
        $s0 and $s1
}

rule php_hacktool_spamtool_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "print '*send:bad*"
        $s2 = "print '*rbl:ok*"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_spamtool_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = "base64_decode(base64_decode(base64_decode($strings["
        $s3 = "mail(stripslashes($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_spamtool_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "R_HOST"
        $s3 = "RAZOR_BASE_PATH"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_spamtool_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "500 Internal Server Error', true, 500); } ob_end_flush(); session_write_close(); exit();"
        $s7 = "error_reporting(E_ALL); } else { error_reporting(0); ini_set('expose_php', 0); } ob_start(); class"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_hacktool_spamtool_009 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "define('X_RESULT_NAME',"
        $s2 = "\"://{$_SERVER['SERVER_NAME']}\".str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']));"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_hacktool_spamtool_010 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = /array\([\s]*['deco_sba,\s]+\);[\s]*array_splice\([\s]*\$[\w]+,[\s\d,\*]+\);[\s]*\$[\w]+[\s]*=[\s]*implode\([\s]*''[\s]*,[\s]*array_reverse\([\s]*\$[\w]+[\s]*\)[\s]*\);/
    condition:
        $s0 and $s1
}

rule php_hacktool_spamtool_011 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "new PHPMailer;"
        $s4 = "var sdata = \"{\\\"SmtpServer"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_spamtool_012 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "spamtools.be"
    condition:
        $s0 and $s1
}

rule php_hacktool_spamtool_013 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FZzHjqtqFkYfp+8VA3JSjzA5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_sql_TeamHack_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "TeamHack SQL DUMPER"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_sqlinjection_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "check_sql_inj($h3h3,$argv[2]);"
    condition:
        $s0 and $s1
}

rule php_hacktool_sqliscanner_001_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>SQLi Scanner</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_sqliscanner_001_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "$google = \"http://www.google.com/cse?cx=013269018370076798483%3Awdba3dlnxqm&q=REPLACE_DORK&num=100&hl=en&as_qdr=all&start=REPLACE_START&sa=N\";"
    condition:
        $s0 and $s1
}

rule php_hacktool_ssv3_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "if (is_dir($_POST['directory']) && !is_dir_empty($_POST['directory']))"
    condition:
        $s0 and $s1
}

rule php_hacktool_ssv3_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "$client = curlSend($clientidPacket, $this->settings['panel_username'], base64_decode($this->settings['panel_password"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_symlink_bypass_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "($as=0;$as<$fakedep;$as++)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_symlink_bypass_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = ">Symlink Bypass"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_symlink_bypass_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "@symlink('/home/"
        $s7 = "eval(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_hacktool_symlink_bypass_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = ">|BYPASS SYM"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_symlink_bypass_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "LZfHDqRaEkQ/53WLBd5pVhSewnvYjPDee75+6kmzQIA"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_symlink_bypass_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "c2FmZV9tb2RlID0gT0ZG"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_symlink_bypass_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "symlink('/'.$home.'/'.$user."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_symlink_bypass_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "FILE_APPEND); chdir('../'); } $thisdir=dirname($_SERVER['PHP_SELF']); $domain"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_sypex_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "Sypex Dumper Lite"
    condition:
        $s0 and $s1
}

rule php_hacktool_sypex_001_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "http://sypex.net/gs.php?r"
    condition:
        $s0 and $s1
}

rule php_hacktool_TrYaG_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "Turbo Force By TrYaG.CC"
    condition:
        $s0 and $s1
}

rule php_hacktool_TrYaG_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($OOO0000O0('JE8wMDBPME8wMD0kT09PMDAwTzAwKCRPT08wTzBPMDAsJ3JiJyk7JE8wTzAwT08wMCgkTzAwME8wTzAwLDB4NGI1KTskT08"
    condition:
        $s0 and $s1
}

rule php_hacktool_TrYaG_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "XHg3N1x4NzdceDc3Llx4NzRceDcyXHg3OWFceDY3XHgyZWNceDYz"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_twitterbruteforce_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Brute"
        $s1 = "////Twitter Brute Force By Mauritania Attacker//////"
    condition:
        $s0 and $s1
}

rule php_hacktool_UDPflood_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "<b>UDP Flood"
    condition:
        $s0 and $s1
}

rule php_hacktool_UDPflood_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$fp = fsockopen(\"udp://$host\", $port, $errno, $errstr, 5);"
    condition:
        $s0 and $s1
}

rule php_hacktool_UDPflood_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "echo 'Phate\\'s UDP Flooder V' . $version"
    condition:
        $s0 and $s1
}

rule php_hacktool_UDPflood_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "fsockopen(decrypt($this->"
        $s2 = "or strtolower(@ini_get(\"safe_mode"
        $s3 = "fsockopen(\"udp:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_UDPflood_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "MB) packets averaging \". round($packets/$exec_time"
    condition:
        $s0 and $s1
}

rule php_hacktool_UDPflood_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "udp://"
        $s2 = "ignore_user_abort(TRUE);"
        $s3 = "isset($_GET['time'])){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_UDPflood_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$fp = fsockopen('udp://'.$dest, $port, $errno, $errstr, 5);"
    condition:
        $s0 and $s1
}

rule php_hacktool_unlink_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "$files = array("
        $s4 = "unlink($file);"
        $s5 = "echo \"File $file not found <br>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_unpacker_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "file_get_contents('../../"
        $s5 = "unpack('N*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_unzip_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "if(!$_POST[\"todir\"]) $_POST[\"todir\"] = \".\";"
        $s2 = "if(!$_REQUEST[\"myaction\"]==\"dounzip\"){"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_unzip_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "<title>unzip file by"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_unzip_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "echo \"<p><b>List of auto detected .zip archives!</b></p>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_unzip_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "echo \"Deleting Zip...<br />\\n\";"
        $s2 = "$removeorig = $_GET['removeorig'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_unzip_005 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "echo '<br>Warning: Existing files will be overwritten.<br><br><INPUT type=\"submit\" value=\"Unzip!\">';"
    condition:
        $s0 and $s1
}

rule php_hacktool_unzip_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo '"
        $s3 = "$archive = new PclZip(__DIR__.'/'.$archive_id.'/'.$resp['name']);"
        $s4 = "curl_query(json_encode(['mode' => 'archive_unpacking', 'operation_id' => $archive_id,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_unzip_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "gzopen($archive, \"rb\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_upload_settings_image_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "array('Filedata'=>\"@$uploadfile\"));"
        $s2 = "upload_settings_image.php\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_varnish_bypass_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "wp_remote_request( \"http://\".$_SERVER['HTTP_HOST'].\"/gd-config.php\", array("
    condition:
        $s0 and $s1
}

rule php_hacktool_virus_mailer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "\"==Multipart_Boundary_x{$semi_rand}x\";"
        $s3 = "$rec\x09= $_GET['to'];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_VP_restore_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$info['db_password"
        $s4 = "new VP_Restore_Helper();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_vty_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "die"
        $s1 = "passw"
        $s2 = "VTY - Database Manager For Mysql"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_webroot_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>WebRoot Hack Tools</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_whmhack_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$newpass = file_get_contents"
        $s2 = "class Whm{"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_whmhack_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "ZZNta9swEMc/gMHf4SYCcmhqZ4wySC23o2z0zdjYCnuRBSPb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_whmhack_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "<title>WHMSeller</title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_whmcsexp_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "\"/viewticket.php?tid[sqltype]=TABLEJOIN&tid[value]=-1%20union"
    condition:
        $s0 and $s1
}

rule php_hacktool_whmcsexp_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "tblregistrars"
        $s2 = "Cilent CC"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_whmcsexp_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "tblregistrars"
        $s2 = "href=\"?Clientsr00ts\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wordpress_bruteforce_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "&testcookie=1"
        $s2 = "Wordpress Brute Force Tool"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wordpress_bruteforce_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "&testcookie=1"
        $s2 = "$data[$i] = array('url' => $link[0], 'post' => 'log='.$link[1].'&pwd='.$link[2].'&testcookie=1&wp-submit=1&redirect_to='.$redirect_to);"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wordpress_bruteforce_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "&testcookie=1"
        $s2 = "la_brute($url, $username, $wordlist, $thread, $log)"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wordpress_bruteforce_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "<value><array><data><value><string>'.macroses($site, $login)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_wordpress_bruteforce_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "Priv8 Wordpress Mass brute Force"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_wordpress_bruteforce_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "if($pass_count == count($passwords) - 1){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_wordpress_bruteforce_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "fwrite($fp, implode(';', $dbLine).\";$row[0]\\n\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_wpepr_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "<h2>WordPress Emergency PassWord Reset</h2>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_admin_hider_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "wp_set_auth_cookie($user_ids)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_hacktool_wp_admin_hider_002 : hacktool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "->query_where = str_replace("
        $s5 = "{$wpdb->users}.user_login !="
        $s6 = /add_action\(.pre_user_query.,[^\?]+WHERE 1=1 AND \{\$wpdb->users\}\.user_login !=[\s]*[^;]+\);[\s]*[\s\}]+(\)\;[\s]*)*(function hide_user_count\(\)[^\}]+\}[^\?]+<\?php[\s]*\}[\s]*add_action\([^;]+hide_user_count.\);[\s]*|add_filter\(.views_users.,[^;]+\);[\s]*function [\w]+list_table_views[^\*]+\$all_num[^;]+;[\s]*return \$views;[\s]*\})*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_wp_admin_hider_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "->query_where = str_replace("
        $s5 = "new WP_User(wp_create_user("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_wp_admin_hider_003 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "wp_insert_user("
        $s3 = "function hide_ghosts($user_search)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_admin_hider_004 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "function hide_user_count(){"
        $s2 = ".wp-admin.users-php span.count {display: none;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wp_admin_hider_005 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "die($insert_user_result->get_error_message());"
        $s5 = "echo \"Successfully created user with id: {$insert_user_result}\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_wp_admin_hider_006 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "->query_where = str_replace("
        $s5 = "<a href=\"users.php?role="
        $s6 = "$value->response[ plugin_basename(__FILE__)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_wp_admin_hider_006_02 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "->query_where = str_replace("
        $s5 = "<a href=\"users.php?role="
        $s6 = "strpos($user_view[$keys]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_wp_attacker_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "print \"\\nWANT TO BRUTEFORCE VIA XMLRPC ? [Y/n]: \""
    condition:
        $s0 and $s1
}

rule php_hacktool_wp_attacker_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "CURLOPT_POSTFIELDS,\"log=\".$username.\"&pwd=\".$password.\"&wp-submit="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_attacker_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "posix_getpwuid("
        $s2 = "echo \" | is wordpress (path: $wordpress_path)\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wp_attacker_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "global $wpdb"
        $s4 = "$wpincludesdir = 'wp-includes/';"
        $s5 = "if (is_dir($file)) recursiveRemove($file);"
        $s6 = "$wpdb->query(\"DROP TABLE IF EXISTS admin\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_hacktool_wp_attacker_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "str_replace(\"define('DISALLOW_FILE_MODS', true);\",\"\""
    condition:
        $s0 and $s1
}

rule php_hacktool_wp_attacker_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "base64_decode(\"PD9waHAKZGVmaW5lKCdXUF9VU0VfVEhFTUVTJywgdHJ1ZSk7CgovKiogTG9hZHMgdGhlIFdvcmRQcmVzcyBFbnZpcm9ubWVudCBhbmQgVGVtcGxhdGUgKi8KcmVxdWlyZSggZGlybmFtZSggX19GSUxFX18gKSAuICcvd3AtYmxvZy1oZWFkZXIucGhwJyApOw==\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_attacker_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "}}($query_str);foreach($user_ids as $uid){$user_id=$uid->ID;if($GLOBALS{"
    condition:
        $s0 and $s1
}

rule php_hacktool_wp_attacker_008 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "is_file("
        $s2 = "')) {rename($_SERVER['DOCUMENT_ROOT'].'/wp-content/plugins"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_hacktool_wp_attacker_009 : hacktool
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "@package WordPress"
        $s3 = "The base configurations of the WordPress."
        $s4 = "define('DB_HOST',"
        $s5 = /define\(.DB_HOST.,[\s]*[^\)]+:(80|443).\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_wp_attacker_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "]);$query_str=\"SELECT ID FROM $wpdb->users\";$user_ids=$wpdb->{$GLOBALS["
        $s3 = "],$user_login);echo \"You are logged in as $user_login\";if($GLOBALS["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_mass_passw_changer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "<title>WordPress Mass Password Changer |"
    condition:
        $s0 and $s1
}

rule php_hacktool_wp_mass_passw_changer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "<title>Wordpress Mass Change Password</title>"
    condition:
        $s0 and $s1
}

rule php_hacktool_wp_pbn_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "if ($pw !== $PASSWORD) {"
        $s2 = ".DB_NAME.\"`.`wp_pbn` "
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wp_plugin_hider_001 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "unset($wp_list_table->items[$key])"
        $s3 = "add_action('pre_current_active_plugins', '"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_siteurl_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "if(isset($_POST) && isset($_POST["
        $s3 = "update `{$thisPreFix}options` set `option_value`='{$siteUrl}' where `option_name` in('siteurl','home')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_users_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_get_contents('wp-config.php');"
        $s4 = "detect_define('DB_PASSWORD'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_wp_users_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "if ($request['task'] == 'changepassword'){"
        $s3 = "echo ($arr_result)?json_encode($arr_result):"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_users_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "isset($_POST['add-user-mysql-method']"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_hacktool_wp_users_004 : hacktool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = "$user->set_role( 'administrator' );"
        $s4 = "$pass = '"
        $s5 = /function[\s]*[\w]*_?admin_account\(\)[\s]*\{[\s]*\$user[^;]+;[\s]*\$pass[^@]+[\s]*\$email[^;]+;[\s]*if/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_wp_users_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "if( isset($_GET['ok']) ) { echo '<!-- Silence is golden. -->';}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_wp_users_007 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "$query_str = \"SELECT ID FROM $wpdb->users\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_users_008 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$user->set_role( 'administrator' );"
        $s3 = "wp_mail( $email_address, 'Welcome!', 'Your Password:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_wp_users_009 : hacktool
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "$creds['remember']"
        $s4 = /mysql[\w\->]+\(.UPDATE[\s]*\{\$table_prefix\}users[\s]*SET[\s]*user_pass[\s]*=[\s]*.\{\$[\w]+\}.[\s]*WHERE[\s]*ID[\s]*=[\s]*.\{\$[\w]+\}..\);?/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_wp_users_010 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "error_reporting(0)"
        $s4 = "$param = str_replace(\"%DOMAIN%\", $main_dom[0], $param);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_hacktool_wp_users_011 : hacktool
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "$redirect_to = user_admin_url();"
        $s2 = "(!empty($_COOKIE['wordpress_test_cookies'])"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wp_users_012 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['SERVER_NAME']"
        $s2 = "echo \"<p>domain: \".$_SERVER['SERVER_NAME'].\" \".$v['user_login'].\" \".$v['user_pass']"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wp_users_013 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "do_action"
        $s3 = "<h1><span><nobr><a href=\"<?php echo admin_url(); ?>\">Go to admin dashboard</a> - <a href=\"<?php echo $_SERVER['PHP_SELF']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_hacktool_wp_users_014 : hacktool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = /wp_create_user\([\s]*\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+[\s]*\);[\s]*\$[\w]+[\s]*=[\s]*get_user_by\([^\}]+add_role\([\s]*.administrator.[\s]*\);[\s]*\}[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_users_015 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "extract"
        $s4 = "wp_redirect(get_bloginfo"
        $s5 = "if (!empty($password) && $password == $password2) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_hacktool_wp_users_016 : hacktool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = "$user->set_role( 'administrator' );"
        $s4 = "new WP_User"
        $s5 = /function[\s]*[\w]+\(\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*.[\w]+.;[^\{]+!username_exists\([\s]*\$[\w]+[\s]*\)[\s]*\&\&[\s]*!email_exists\([\s]*\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_wp_users_018 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "limit 1\");exit(\"ok\");}if(isset($g['npass'])){wp_set_password("
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_wp_users_020 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mysql"
        $s1 = "die("
        $s2 = "MD5("
        $s3 = "INSERT INTO `\".$dbname"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_users_021 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "INSERT INTO"
        $s4 = "wp-config"
        $s5 = "users` (`ID`, `user_login"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_wp_users_022 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "$user = get_user_by('email"
        $s3 = "automatically_log_me_in($newuser_id);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktool_wp_users_023 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "$_SESSION['loggedIn'] = true;"
        $s4 = "(md5($_POST['password'].\""
        $s5 = ">Enter Administrator Password"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_hacktool_WPBackdoor_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>WP Backdoor User"
    condition:
        $s0 and $s1
}

rule php_hacktool_WPBackdoor_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Wordpress MassDeface"
    condition:
        $s0 and $s1
}

rule php_hacktool_wpuserdisclose_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init', 'barry');"
    condition:
        $s0 and $s1 and $s2
}

rule php_hacktool_xsender_mailer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "if(isset($_SESSION['xsenderid']))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_hacktoot_ftp_client_001 : hacktoot
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$this->SendMSG(\"Transfer type: \".($this->_type==FTP_BINARY"
    condition:
        $s0 and $s1
}

rule php_iframe_mx_start_001 : iframe
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "/*mx_start*/"
        $s2 = "5.39.222.143/b92t"
    condition:
        $s0 and $s1 and $s2
}

rule php_iframe_mx_start_001_02 : iframe
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<iframe"
        $s1 = "/*mx_end*/ ?>"
    condition:
        $s0 and $s1
}

rule php_iframe_mx_start_001_03 : iframe
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<iframe"
        $s1 = "?>/*mx_end*/"
    condition:
        $s0 and $s1
}

rule php_iframe_mx_start_002 : iframe
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "/*mx_start*/"
        $s2 = "/*mx_start*/<?php"
    condition:
        $s0 and $s1 and $s2
}

rule php_iframe_photo_scr_001 : iframe
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = "Photo.scr"
    condition:
        $s0 and $s1 and $s2
}

rule php_injected_fake_wp_jquery_001 : injected
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "add_action('wp_footer', 'wp_func_jquery')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_injected_fake_wp_jquery_002 : injected
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "(function_exists('curl_init'))"
        $s2 = "/jquery-"
        $s3 = "}add_action("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_injected_fake_wp_jquery_003 : injected
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "(function_exists('curl_init'))"
        $s2 = "/jquery-"
        $s3 = "echo \"$data\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_injected_fake_wp_jquery_004 : injected
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "(function_exists('curl_init'))"
        $s2 = "$url=\"$a:$b/$c/$test\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_injected_scounter_001 : injected
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('get_footer', 'add_ssc"
    condition:
        $s0 and $s1 and $s2
}

rule php_injected_tampered_wp_core_fake_bruteforce_protection_001 : injected
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "$_COOKIE['WP_FLV_EMAIL_CONFIRMED'"
    condition:
        $s0 and $s1
}

rule php_injected_wp_footer_script_001 : injected
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "(){echo'<script type=\"text/javascript\">var "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_injected_wp_footer_script_002 : injected
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "pack(\"H*\",\"3c73637269707420747970653d22746578742f6a617661736372697074223e76617220"
    condition:
        $s0 and $s1 and $s2
}

rule php_injected_WPCore2_001 : injected
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "Plugin Name: WPCore2"
    condition:
        $s0 and $s1 and $s2
}

rule php_injected_WPCore2_002 : injected
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "post_content NOT LIKE '%torrent%"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_BANKZ_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "=BANKZ="
    condition:
        $s0 and $s1
}

rule php_mailer_BOAClient_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "~!BOA Client!~"
    condition:
        $s0 and $s1
}

rule php_mailer_COOKIE_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "function win_COOKIEmxrr("
    condition:
        $s0 and $s1
}

rule php_mailer_COOKIE_002 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "if(empty($mailto)){die();}"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_echo_good_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = "echo \"good\";"
        $s4 = "$headers .= 'Content-Type: text/plain; charset=iso-8859-1' . \"\\r\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_mailer_encoded_001 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "eval"
        $s3 = "=\"base64_decode\";return $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_encoded_002 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "Z2V0RWxlbWVudEJ5SWQ"
        $s2 = "c2Vzc2lvbl9zdGFydCgpO"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_FCrDNS_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "'msg' => 'Theres no writable dir for MX chache. This will decrease"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "HunTerZ Family"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_001_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "SpamZ ReZulT - MoreArt"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_002 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "$headers[] = 'From: '.$from_name.' <'.$from_mail.'>';"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_003 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "$return = mail($email_polucha,$tema_pisma,$telo_pisma,$headers);"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_004 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "$header .= \"X-Mailer: PHP/\".phpversion().\"\\r\\n\";"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_005 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "function xmail () { $a=func_get_args();"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_006 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "mail = isset ( $_POST [ 'mail' ] ) ? trim ( $_POST [ 'mail' ] ) : NULL;"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_007 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "|ArHack.NeT;)|"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_008 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$_rmessage = str_replace(\"XXRANDOMXX\", $rnx, $_message);"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_009 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"Yahoo NNA! | \".$ip.\"\\n\";"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_010 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject=\"amx| $ip\";"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_011 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subj = \"hotmail! webmail \";"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_012 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "$_POST['random_mail'];"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_013 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "$headers .= \"X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1441"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_014 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($rezmail1"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_015 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$subject = \"Gmail - \".$country;"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_015_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "Ghost! Wire"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_016 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$msg .= \"Password : \".$_POST["
    condition:
        $s0 and $s1
}

rule php_mailer_generic_017 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$PHPprotectV20 = array(\"X-Mailer: The Bat!"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_018 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$message .= \"PassWord: \".$_POST["
    condition:
        $s0 and $s1
}

rule php_mailer_generic_018_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "IP/Host Name DeTaiLZ"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_019 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "gmail-smtp-in.l.google.com,google"
        $s2 = "$data = json_decode(base64_decode(str_replace(' ', '+', $_REQUEST['data'])), true);"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_021 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "if (isset($_POST['mail_per'])) {$max_send_per_interval = $_POST['mail_per'];} else {$max_send_per_interval = 1;}"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_023 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo \"xxx\".\"sent!\";"
        $s2 = "$msg .= \"--\". $boundary . \"\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_024 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = ".= \"Message-ID: <\".md5(uniqid(time())).\"@mailer"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_025 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "goplanet($vlad,$putin,$header,$to);"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_026 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "mail("
        $s2 = "if ($_REQUEST['access'] != 'let_me_in') {"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_032 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "- PHPmailer By"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_033 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "fopen("
        $s5 = "header(\"Location:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_mailer_generic_033_02 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "fopen("
        $s5 = "Header (\"Location:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_mailer_generic_034 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo 'Terminou...<br>';"
    condition:
        $s0 and $s1
}

rule php_mailer_generic_035 : mailer
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "if (mail($_POST['to'], $_POST['subject'], $_POST['message'], $_POST['headers'])) {echo 'ok';}"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_036 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "stripslashes(ucfirst($addr_details["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_mailer_generic_037 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "xbzXjvRaciZ6rXmMjblogQPROwkCDl3SJb3nmYFAJr337uknt640vbu"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_038 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "mail($_POST["
        $s3 = ";} else {echo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_generic_039 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "= \"--\".md5(uniqid(time()));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_generic_040 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "; file_put_contents($"
        $s4 = "base64_decode($_POST['shellScript']); if (@file_put_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_mailer_generic_041 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "goto"
        $s1 = "; goto"
        $s2 = ": return strrev(gzinflate($"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_generic_042 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "mail($_POST["
        $s5 = "rand();"
        $s6 = "mail($_POST['email'],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_mailer_generic_043 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "rand("
        $s2 = "$mailSMTP->send("
        $s3 = "$servers = explode(',' , 'hotmail.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_generic_044 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "hexdec(substr($"
        $s3 = "eJwAOIDHfwplcnJvcl9yZXBvcnRp"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_generic_045 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(strstr(strtolower($_SERVER['HTTP_USER_AGENT']), \"googlebot\"))"
        $s3 = "else { ${\"\\x"
        $s4 = "header(\"Location: 404\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_mailer_goto_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = ": return; goto "
        $s3 = "RCPT TO: "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_GrOfI_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "NgA GrOfI hACk"
    condition:
        $s0 and $s1
}

rule php_mailer_holygrain_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$headers = \"From: Holygrail Inc."
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_madnet_mail_worker_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "style1\"><u>madnet private mail-worker</u>"
    condition:
        $s0 and $s1
}

rule php_mailer_madnet_mail_worker_002 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>(c) private mail-worker (c)<"
    condition:
        $s0 and $s1
}

rule php_mailer_Meg4mail_001_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$testa = $_POST['veio'];"
    condition:
        $s0 and $s1
}

rule php_mailer_phpinfo_001 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "$dados.=\"<b>Safe Mode:</b>{$phpinfo"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "message)?(Randomizer::randomizeWithCells($message"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_002_002 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_replace("
        $s1 = "str_replace('[ToEmail]', $fields"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_002_003 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "if(dttbDnDp($ptype,$pmime,$xclient,$from,$send_to,$title,$mess) !== FALSE) {"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_002_004 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$txtspamed = \"spammed\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_003 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "function init_spam_gadget"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_003_02 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "$m = \"\\x6d\\x645\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "$message = $_POST[\"body\"];"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_02 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "$message = stripslashes($_POST[\"body"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_03 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "mail($arr['to'],$arr['subj'],$arr['msg'],$arr['head']"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_04 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message = stripslashes ( $_POST ['mes'] )"
        $s2 = "$message = stripslashes ( $_POST ['mes'] );"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_004_05 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"p@sswd: \".$_"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_06 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo \"OK enviado~\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_07 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .=\"CVV"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_08 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"+-------- ? [ SUB X"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_09 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($xmail,\"FreeMobile | \".$_SESSION['name"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_004_10 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "$GUT = mail($empfaenger, $betreff, $nachricht, $headers);"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_005 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "base64_decode($_POST[\"msgsubject\"]"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_005_02 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$MessageSubject = base64_decode($_POST[\"msgsubject\"]);"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_006 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "->set_message($_POST['data']);"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_007 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "\"ADFLY             : \".$_POST['email'].\"\\n\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_008 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$_POST['eMailAdd'].\"\\n\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_009 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"-------tHANKs tO Dhapi"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_010 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = "echo base64_encode('error : '.$result);"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_011 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "if(!strpos($JOKER7"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_012 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$email_polucha,"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_013_02 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "if (strlen($res) > 0) { echo 'drtty'; } else { echo '**Nope**';}"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_014 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "if($pass!=\"\" && md5(\"IMAIL\".$_POST['pass'])!=$pass) {"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_015 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "@ini_set(\"sendmail_from\", $"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_016 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message  = \"------------------+ Yahoo Login ReZulT"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_017 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"# SFR ReZulT"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_018 : mailer
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "ini_set('mail.add_x_header','off');"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_019 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject=\"New RezuLt | $ip\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_020 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "=============== AtmaCa"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_021 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "if(isset($_POST[id]) && isset($_POST[ipAddr]) && isset($_POST[serv_name]) && isset($_POST[body]))"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_022 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \" - by x0r -\\n\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_023 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"username: \".$_POST['email'].\"\\n\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_024 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"-------------------| DR-YASSINE"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_025 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$msg = \"DHL Info"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_026 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"---------------Created By"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_027 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "sprintf(eval(\"\\$_"
        $s2 = "'done';} else {\\x"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_028 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "$msg .= \"---------------------- By Hack"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_029 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"|----------| MR"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_030 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"-------------------| By redouane"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_031 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($xmail,\"FreeMobile | \".$_POST['comname"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_032 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "header(\"Location:http://www.t-online.de/\");"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_033 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo \"<H2>Sent! vseravno</H2>\";"
    condition:
        $s0 and $s1
}

rule php_mailer_POST_034 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$subject = \"Notice !\";"
        $s3 = "$body = loadini(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_POST_035 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Loading..."
        $s3 = "if(count($_COOKIE)){foreach(array_keys($_COOKIE) as $value){unset($_REQUEST[$value]);}}"
        $s4 = "function build_message($request_input){if(!isset($message_output)){$message_output =\"\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_mailer_POST_036 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "print $ok ? 'OK' : 'FAIL';"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_037 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "<title> SPYUS Mailer"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_POST_038 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "print \"-=ok=-\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_POST_039 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "fopen(\"letter.txt\",\"w+\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_mailer_POST_040 : mailer
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "echo 'good';"
        $s3 = /\$_POST\[.body.\];/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_POST_041 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$usr=\"info\".$rand;"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_POST_042 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "copy("
        $s3 = "<title>SPYUS MAILER"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_POST_043 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "WC1NYWlsZXI6IFRoZSBCYXQ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_POST_044 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "VFRfU3ViamVjdCA9IHN0cmlwc2xhc2hlcyhiYXNlNjRfZGVjb2Rl"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_POST_045 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "$mail->addAttachment($uploadfile,$_FILES"
        $s5 = "escapeshellcmd($this->Sendmail), escapeshellarg($this->Sender));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_mailer_POST_046 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "if(mail($email[$i],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_mailer_POST_047 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "dnschecker.org/ip-blacklist-checker"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_mailer_post_manda_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "$_POST['Manda']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_mailer_redirect_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message = stripslashes ( $_POST ['mes'] )"
        $s2 = "header ( \"Location: http://{$link}\" );"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_REQUEST_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "preg_replace_callback('/\\[  (.*?)  \\]/xs', \"random_words\""
    condition:
        $s0 and $s1
}

rule php_mailer_REQUEST_002 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "if(smtpmail(\"test@yandex.ru\", \"dsfgd\", \"sgasg\", $headers='')"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_Sandy_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "/* Sandy 2013 - Best Email Marketing Tool"
    condition:
        $s0 and $s1
}

rule php_mailer_Sandy_002 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$SANDY_HASH = md5(\"$Destination+$SandyKey\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_shields_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>shields.su PHPMailer"
    condition:
        $s0 and $s1 and $s2
}

rule php_mailer_w4l3XzY3_mailer_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "<title>w4l3XzY3 Mailer</"
    condition:
        $s0 and $s1
}

rule php_mailer_XBOOMBER_XHAT_001 : mailer
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "echo \"[XBOOMBER & XHAT]"
    condition:
        $s0 and $s1
}

rule php_malware_adinjection_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "/sym/root\".$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_adinjection_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "echo $con3.$con2;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_adinjection_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "@file_get_contents(ABSPATH.'wp-"
        $s4 = "if(!isset($_COOKIE['wordpress_cf_adm_use_adm']) && !is_user_logged_in"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_adinjection_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(urldecode(\"https%3A%2F%2Fraw.githubusercontent.com"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_adinjection_004_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "file_get_contents(\"https://raw.githubusercontent.com"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_anonymousfox_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "on"
        $s1 = "nonymousfox"
    condition:
        $s0 and $s1
}

rule php_malware_anonymousfox_001_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "on"
        $s1 = "nonymousFox"
    condition:
        $s0 and $s1
}

rule php_malware_antibotcheck_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "\"^66.102.*.*\", \"^66.249.*.*\", \"^72.14.192.*\", \"^74.125.*.*\", \"^208.91.*.*\","
    condition:
        $s0 and $s1
}

rule php_malware_antibotcheck_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "3639549953,3639558142"
    condition:
        $s0 and $s1
}

rule php_malware_antibotcheck_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "134217728,150994943,1062518496"
    condition:
        $s0 and $s1
}

rule php_malware_antibotcheck_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "if(preg_match('/' . $ip . '/',$_SERVER['REMOTE_ADDR'])){"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_antibotcheck_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>ANTIBOT</title>"
    condition:
        $s0 and $s1
}

rule php_malware_antibotcheck_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>404 Not Found</title>"
        $s2 = "curl_setopt($ch, CURLOPT_USERAGENT, \"Antibot Blocker\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_antibotcheck_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From: BOTeye"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_antibotcheck_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "array(\"abot\",\"dbot\",\"ebot\",\"hbot\",\"kbot\",\"lbot\",\"mbot\",\"nbot\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_antibotcheck_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "if(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST) == 'phishtank.com') {"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_antibotcheck_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_REFERER']"
        $s2 = "foreach (array_map('trim', explode(',', $_SERVER[$key])) as $ip)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_antibotcheck_011 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = ".replace("
        $s4 = "=unescape("
        $s5 = "<title>AnTiBoTs7 HTML Encrypter"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_antibotcheck_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "json_decode($"
        $s4 = "Google\") !== false"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_anuna_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "function_exists"
        $s2 = "explode(chr"
        $s3 = ")),substr($"
        $s4 = ")]); $"
        $s5 = ")]); if (!function_exists('"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_anuna_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "function_exists"
        $s2 = "explode(chr"
        $s3 = ")),substr($"
        $s4 = ")]); $"
        $s5 = ")]); if (!function_exists('"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_anuna_001_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "\\x"
        $s2 = "$GLOBALS[\"\\x61\\156\\x75\\156\\x61\"]"
        $s3 = "if(!isset($GLOBALS[\"\\x61\\156\\x75\\156\\x61\"]))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_anuna_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "\\x"
        $s2 = "\\x65\\166\\x61\\154\\x28\\163\\x74\\162\\x5f"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_anuna_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "\\x"
        $s2 = "$GLOBALS[\"\\x61\\156\\x75\\156\\x61\"]"
        $s3 = "foreach(explode(\"\\x7c\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_array_pop_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "[0]=array_pop($"
    condition:
        $s0 and $s1
}

rule php_malware_assert_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "assert"
        $s1 = "@assert(implode"
    condition:
        $s0 and $s1
}

rule php_malware_assert_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "assert"
        $s1 = "assert(stripslashes"
    condition:
        $s0 and $s1
}

rule php_malware_assert_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "/*-/*-*/($/*-/*-*/"
    condition:
        $s0 and $s1
}

rule php_malware_assert_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "assert"
        $s1 = "assert($_"
    condition:
        $s0 and $s1
}

rule php_malware_assert_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "$k=\"ass\".\"ert\";"
    condition:
        $s0 and $s1
}

rule php_malware_assert_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_replace("
        $s1 = "str_replace(j, \"\""
        $s2 = "str_replace(j, \"\""
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_assert_006_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = /\$.\(\$_POST\[/
        $s4 = /\$.[\s]*=[\s]*[^;]+;[\s]*(\/\*[^\n]+\*\/[\s]*)?\$.\(\$_POST\[[^\]]+\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_assert_006_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = /\$.\(\$_POST\[/
        $s4 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_assert_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "ass\\x65rt"
    condition:
        $s0 and $s1
}

rule php_malware_assert_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $w0 = "\\x42\\x4C\\x4F\\x47\\x20\\x53\\x54\\x41\\x52\\x54\\x53\\x20\\x48\\x45\\x52\\x45"
        $s1 = "\\x61\\x73\\x73\\x65\\x72\\x74"
    condition:
        $s0 and $s1 and not $w0
}

rule php_malware_assert_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "assert"
        $s1 = "@assert(base64_decode("
    condition:
        $s0 and $s1
}

rule php_malware_assert_010 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "assert"
        $s1 = "assert_options(ASSERT_QUIET_EVAL,"
        $s2 = "(ASSERT_WARNING"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_assert_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "as\".\"se\".\"rt"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_assert_011_05 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "=\"pr\".\"eg\".\"_r\".\"ep\".\"la\".\"ce\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_assert_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "ZXJyb3JfcmVwb3J"
        $s2 = "JF9QT1NUW3"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_assert_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$key"
        $s3 = "Xtea"
        $s4 = "Xtea->block_encrypt"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_assert_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "chr(ord("
        $s2 = ";forward_static_call_array($"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_assert_015 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "@$_="
        $s2 = /@\$_=.[\w]*.[^\$]+\@\$_=[^\$]+\$_.[^]]+\]\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_auto_prepend_file_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "php_value auto_prepend_file "
        $s2 = "/.htaccess BKP"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_bajatax_gen_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "bajatax"
    condition:
        $s0 and $s1
}

rule php_malware_base64_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\\050b\\141\\163\\145\\066\\064\\137"
    condition:
        $s0 and $s1
}

rule php_malware_base64_001_020 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "strrev(\"edoced_4\".\"6esab\");"
    condition:
        $s0 and $s1
}

rule php_malware_base64_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x62\\141\\x73\\145\\x36\\64\\x5f\\144"
    condition:
        $s0 and $s1
}

rule php_malware_base64_002_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "e6\\x34\\x5f"
    condition:
        $s0 and $s1
}

rule php_malware_base64_002_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x62\\x61\\x73e\\x36\\x34_\\x64\\x65"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_002_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_002_04 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x62\\x61\\x73\\x65\\x364\\x5fd\\x65"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_002_05 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x61\\x73\\x65\\x36\\x34_\\x64"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_002_06 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\163\\x65\\66\\64\\137\\144"
    condition:
        $s0 and $s1
}

rule php_malware_base64_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "gzinflate"
        $s3 = ".gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_base64_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "r64_qr"
    condition:
        $s0 and $s1
}

rule php_malware_base64_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "'b' . 'a' . 's' . 'e' . '6' . '4' ."
    condition:
        $s0 and $s1
}

rule php_malware_base64_005_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = ".\"\".\"6\".\"\".\"\".\"4\"."
    condition:
        $s0 and $s1
}

rule php_malware_base64_005_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "6\".\"4\".\"_\".\"de"
    condition:
        $s0 and $s1
}

rule php_malware_base64_005_04 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = ".\"\".\"6\".\"\".\"4\"."
    condition:
        $s0 and $s1
}

rule php_malware_base64_005_05 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "ase' . '64' . '_"
    condition:
        $s0 and $s1
}

rule php_malware_base64_005_06 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "64'.chr(95).'d"
    condition:
        $s0 and $s1
}

rule php_malware_base64_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "strrev(\"\\x65\\x64\\x6f\\x63\\x65\\x64\\x5"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "=gzuncompress(base64_decode($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "\"b\" . \"a\" . \"s\" . \"e\" . \"6\" . \"4\""
    condition:
        $s0 and $s1
}

rule php_malware_base64_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "eval(gzuncompress(base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_010_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "base64_decode('aHR0cDovL"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_011 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "ZXZhbChnemluZmxhdGUoYmFzZTY0X2Rl"
    condition:
        $s0 and $s1
}

rule php_malware_base64_012 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"\\142as\\145\\x36"
    condition:
        $s0 and $s1
}

rule php_malware_base64_013 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"bas\\x65\\66"
    condition:
        $s0 and $s1
}

rule php_malware_base64_015 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "eval((base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_016 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "ZXZhbChiYXNlNjRfZGVjb2RlKCJaWFpo"
    condition:
        $s0 and $s1
}

rule php_malware_base64_017 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "edoced_46esab"
    condition:
        $s0 and $s1
}

rule php_malware_base64_018 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "'ba'.'se6'.'4_de"
    condition:
        $s0 and $s1
}

rule php_malware_base64_019 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "file_get_contents(base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_020 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "ase6\".\"4_de"
    condition:
        $s0 and $s1
}

rule php_malware_base64_021 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = "se'.'64'.'_de"
    condition:
        $s0 and $s1
}

rule php_malware_base64_022 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "6261736536345f6465636f6465"
    condition:
        $s0 and $s1
}

rule php_malware_base64_023 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "=\"base64_decode\";return $"
    condition:
        $s0 and $s1
}

rule php_malware_base64_026 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "echo  base64_decode(\"PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_027 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "echo(stripslashes(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x65\";print($"
        $s2 = "PHNjcmlwdCB0"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_base64_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = ")){die;}return base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_base64_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "echo base64_decode($this->data)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_base64_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "> <?php if ((is_front_page())) { echo base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_base64_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "aWYoIWRlZmluZWQoIlBIUF9FT0wiKSkK"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_base64_033 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = /\*\/\s*\?>\s*<\?php\seval\(gzinflate\(base64_decode\([^\)]+\)\)\)\s*;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_base64_034 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "@eval($"
        $s4 = /\$\w+\s*=\s*['\"\.base64_decode]{16,36}\s*;\s*\@eval\(\$\w+\([QGVycm9yX3JlcG9ydGluZy\.'\"]{23,38}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_base64_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "public static function"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_base64_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "<?php eval(gzinflate(gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_base64_037 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "<?php echo"
        $s3 = "]));if($_POST[base64_decode("
        $s4 = /\)\)\{@\$[\w]+\(\$_FILES\[base64_decode\(/
        $s5 = "){@$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_base64_037_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "<?php echo"
        $s3 = "]));if($_POST[base64_decode("
        $s4 = /\)\)\{@\$[\w]+\(\$_FILES\[base64_decode\(/
        $s5 = "file_put_contents("
        $s6 = /file_put_contents\(.[\w]+\.php.,[\s]*.<\?php/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_base64_038 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "aWYgKCRpZCA9PSAiIik"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_base64_040 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "PD9waHAKZWNobygnWHNhbS1YY"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_base64_041 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "base64_decode("
        $s3 = "echo base64_decode('PHAgY2xhc3M9I"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_base64_042 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "));echo \" \";}echo base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_botcheck_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "$fp = fopen("
        $s3 = "$GLOBALS['ipRanges"
        $s4 = "if (!isBot($uAg,$ip)) echo \"<a href="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_browsercheck_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "if (preg_match($regex, $USER_AGENT)"
        $s2 = "return $BROWSER_ERROR"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $s3 = "CURLOPT_URL, base64_decode"
        $s4 = "http_build_query(array('s'=>base64_encode(json_encode(array_merge"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_001_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $s3 = "CURLOPT_URL, base64_decode"
        $s4 = /\$[\w]+\)[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);/
        $s5 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$[\w]+\)[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);[\s]*curl_setopt/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_001_03 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $s3 = /file_get_contents[\s\(]+base64_decode\(.aH/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "$cre_f=$abc('',$pack(\"H*"
    condition:
        $s0 and $s1
}

rule php_malware_cc_stealer_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "IiwgInskdXNlcmluZm9bImNhcmRfbnVtYmVyIl19f"
    condition:
        $s0 and $s1
}

rule php_malware_cc_stealer_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "mail($"
        $s2 = "'x_card_code' => urlencode($x_card_code),"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\\x63\\x63\\x5F\\x6E\\x75\\x6D\\x62\\x65\\x72\",\"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "document.createElement(\"script\")"
        $s3 = "sagepaydirectpro_cc_number"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "CURLOPT_POSTFIELDS, \"payment=\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "PAYPAL"
        $s3 = "ACCOUNT PAYPAL FULLZ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_008_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "PAYPAL"
        $s3 = "SCAM PAYPAL"
        $s4 = "HEADER(\"Location:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "eval(\\$\\x5F\\x50\\x4F\\x53\\x54["
        $s2 = "@\\x66\\x6F\\x70\\x65\\x6E(\\$"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = ".$this->common_vars[\"billing_address\"][\"value\"]."
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = ".urlencode($"
        $s4 = "if(isset($_POST['Card_Number']) &&"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "@json_decode(file_get_contents(\"http://ip-api.com"
        $s4 = "$RANDOMSTRING .= $CHARACTERS[rand(0, strlen($CHARACTERS) - 1)];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "@mail($para, $assunto, $msg, $headers);"
        $s4 = "\\n CVV: $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "foreach($_POST"
        $s2 = "if(isset($_POST['cardtype'])||isset($_POST['cardzip"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_015 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "file_get_contents('php://input"
        $s5 = "@fputs($f, $tmp . @gzdeflate(time"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_cc_stealer_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "die("
        $s3 = " if ((strpos($_SERVER['REQUEST_URI'], 'checkout/onepage')) or (strpos($_SERVER['REQUEST_URI'], 'simplecheckout')) or (strpos($_SERVER['REQUEST_URI'], 'onepagecheckout'))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "urlencode(\"$creditCardNumber|$expDate|$cvv2|$firstName $lastName"
        $s2 = "curl_setopt($secpay, CURLOPT_HEADER, 0); curl_setopt($secpay, CURLOPT_POSTFIELDS, \"dm"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_017_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "urlencode(\"$creditCardNumber|$expDate|$cvv2|$firstName $lastName"
        $s2 = "urlencode(\"$creditCardNumber|$expDate|$cvv"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_017_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "urlencode(\"$creditCardNumber|$expDate|$cvv2|$firstName $lastName"
        $s2 = "curl_exec($secpay);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "document.createElement('script')"
        $s3 = /atob\(.aHR0cHM6Ly9/i
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = ":sptth"
        $s4 = ",json_encode($_POST, true));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_021 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "K1GY5P3JJdv77W+t6O5zAdb0ELE9VnZ5Oee0/FIjX5MaO3/AQ="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_022 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "txt\", $str.\"\\n\", FILE_APPEND);"
        $s4 = "['card_cvv'] . \",\" ."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "curl_init(base64_decode('"
        $s3 = "urlencode($HTTP_POST_VARS['authorizenet_cc_number']).'&"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_024 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $s3 = "CURLOPT_URL, base64_decode"
        $s4 = "base64_encode(json_encode($_POST)),'user_ip'=>$_SERVER['REMOTE_ADDR']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_025 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "getQuote()"
        $s4 = "json_decode(file_get_contents("
        $s5 = "mail("
        $s6 = "if (strlen($"
        $s7 = "$send = array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_026 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $s3 = "CURLOPT_URL, base64_decode"
        $s4 = "http_build_query(array("
        $s5 = "base64_decode('aH"
        $s6 = /array_merge\([\s]*\$_POST/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_cc_stealer_027 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "getQuote()"
        $s4 = "stream_context_create(array("
        $s5 = "=>@$_REQUEST["
        $s6 = "Magento\\Checkout\\Model\\Cart"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
        $s2 = "public function"
        $s3 = "$email = trim(Tools::getValue('email'));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_028_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "$passwd"
        $s2 = "baja"
        $s3 = "|+--"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "@json_decode(file_get_contents("
        $s4 = "$_SESSION['_cc_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "bajatax"
        $s4 = ".\"|:|:|\".$_SERVER['REMOTE_ADDR'].\"|:|:|\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]."
        $s5 = "(strpos(json_encode($this->getPostFields"
        $s6 = "=>$this->getPostFields()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_cc_stealer_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "curl_init("
        $s4 = ".json_encode($_POST)."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_033 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "http_build_query($_REQUEST);"
        $s3 = /\$[\w]+[\s]*=[\s]*http_build_query\(\$_REQUEST\);[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);[\s]*curl_setopt\(\$[\w]+[\s]*,[\s]*CURLOPT_URL,[\s]*.http/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "Payment"
        $s3 = "function validateData()"
        $s4 = "print_r($_REQUEST, 1)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_034_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "Payment"
        $s3 = "function validateData()"
        $s4 = "$this->validateData();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "base64_decode("
        $s3 = "wc-authorize-net-cim"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "$this->sqlite->exec(\"INSERT INTO cards (card_number, cc_expires, card_cvv,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_038 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "=['src',"
        $s4 = "))[0x0]),_0x"
        $s5 = "))[0x0]),document['getElementsByTagName'](String[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_cc_stealer_039 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "return ((isset($_SERVER["
        $s2 = "]] : \"\")));"
        $s3 = "]) === \"\") ? \"\" : $"
        $s4 = "])) > 2 && $"
        $s5 = "] . PHP_EOL . $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_cc_stealer_040 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$get.'?Card='.$_REQUEST['Card'].'&Exp="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "http_build_query($"
        $s3 = "@$_REQUEST['ccc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cc_stealer_042 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = ".http_build_query(array("
        $s4 = "isset($_POST['payment_method'])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_cc_stealer_043 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = "].$"
        $s3 = "return ((isset($_SERVER[$"
        $s4 = ". PHP_EOL . $"
        $s5 = "]) === \"\") ? \"\" : $"
        $s6 = /function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*global[\s]*\$[\w]+;[\s]*if[\s]*\(!\$[\w]+\[[\d]+\]\(\$[\w]+\)\)[\s]*return;[\s]*if[\s]*\(\$[\w]+\[[\d]+\]\(\$[\w]+\[[\d]+\]\)\)[\s]*\{[\s]*\$[\w]+/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_cc_stealer_044 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".=base64_decode("
        $s2 = "PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cH"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cc_stealer_045 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "dmFsKGJhc2U2NF9kZWNvZGUo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_046 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "goto"
        $s1 = "; goto"
        $s2 = ": $_REQUEST = array_merge($_REQUEST, $"
        $s3 = "exec("
        $s4 = "('', array(\"\\"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_046_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "goto"
        $s1 = "; goto"
        $s2 = ": $_REQUEST = array_merge($_REQUEST, $"
        $s3 = "http_build_query(array("
        $s4 = ")), false, stream_context_create(array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_cc_stealer_047 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = ")])== _"
        $s3 = "]($_GET[_"
        $s4 = "billing_address"
        $s5 = "$wpdb->get_results($wpdb->prepare($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_chord64_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "[$i])-1);"
        $s4 = "for($i=0;$i<strlen("
        $s5 = "[$i] = chr(ord("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_chord64_001_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "[$i])-1);"
        $s4 = "for($i=0;$i<strlen("
        $s5 = "$auth_pass"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_chord64_001_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "[$i])-1);"
        $s4 = "for($i=0;$i<strlen("
        $s5 = "eval("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_chr_base64_001 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".chr("
        $s1 = /(\$\w+)\s*=\s*(chr\((98|97|115|101|54|52|95|100|101|99|111)\)\.?){13};/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_chr_base64_002 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "chr(98)"
        $s3 = /<\?php[\s]*\$[\w][\s]*=[\s]*chr\([^;]+chr\([\d]+\)[\s]*\.[\s]*chr\(/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_chr_base64_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "eNqVWAt3osgS/itMjmeVExMB8cG6zJ1MYjJmoo7PqNk5HoQG"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cn_downloader_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "Accept-Language: zh-cn"
    condition:
        $s0 and $s1
}

rule php_malware_component_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "<?php setcookie(\""
        $s2 = "\", 2, time()+999999999, \"/\");?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "function loadini($path) {"
        $s2 = "if ($just_value)  $currentkey = trim(substr($currentkey, strlen($key), $endpos-strlen($key)));"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "if (!isset($_REQUEST["
        $s4 = "$_SERVER['HTTP_USER_AGENT'] = '';"
        $s5 = "unset($_SERVER['HTTP_X_FORWARDED_FOR']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_component_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$sfolders[count($sexpl)][] = $droot.\"||\".str_replace($droot,\"\",$_wfolders_);"
    condition:
        $s0 and $s1
}

rule php_malware_component_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: ' . $index);"
        $s3 = "$index=\"file.php?id=$file\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_component_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "public function set_user($hydrator){"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "wfHash(ABSPATH . $file)) > 1 && strlen($shac = strtoupper($hash"
        $s2 = "method_exists(\"wordfenceHash\", \"wfHash\") && count($hash = @wordfenceHash:"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"Directory undi\";"
        $s2 = "echo \"Directory ledu\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "rename ($inn.\".php.suspected\", $inn.\".php\");"
    condition:
        $s0 and $s1
}

rule php_malware_component_011 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "echo base64_decode(\"bGFkeWdhZ2F5\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_component_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "md5($_COOKIE"
        $s4 = "header(\"HTTP/1.1 404 Not Found\");"
        $s5 = "header(\"Status: 404 Not Found\");"
        $s6 = "test ok"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_component_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "!file_exists($now"
        $s4 = "'./.htaccess';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_component_013_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "!file_exists($now"
        $s4 = "@unlink($sitemap);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_component_013_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@chmod($nowHtacFile,0555);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_component_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "$text=json_encode($alltext);"
        $s2 = "true){ echo 'site ok';"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_015 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "$file = 'ips.txt';"
        $s3 = "fwrite($fp, $ipaddress);"
        $s4 = "(!empty($_SERVER['HTTP_CLIENT_IP']))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_component_016 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "$dz2d = \"sql.php\";"
        $s2 = "unlink($filename); "
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_017 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "unpack('u*',$"
        $s2 = ".=$_ while(<DATA>);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_018 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "_cfg_popuplink"
        $s2 = "'url' => 'http://tiny.cc"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_020 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "<?php /*"
        $s2 = "if ($_SERVER[\"QUERY_STRING\"]) { exit($_SERVER[\"QUERY_STRING\"]); }"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_021 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "unlink(\"/home/\".$cur_dir[2].\"/.cpanel/contactinfo\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_022 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "unlink($_SERVER['DOCUMENT_ROOT'].$_SERVER['PHP_SELF']);"
        $s2 = "pack( \"H*\", substr("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "$mn=str_replace('\\\\', '/', strtolower($main_file));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_component_024 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"<br>\";"
        $s2 = "echo php_uname();"
        $s3 = "echo getcwd() . \"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_component_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "]) && (md5($_REQUEST["
        $s4 = "time() + 86400 * 30 * 12 , '/' , '.' . $cookie_host);"
        $s5 = "echo \"Bad Request\"; exit;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_component_026 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "if(strpos($file->getPathname(),\"/wp-includes\") == true) continue;"
        $s5 = "$search = Array('CURLOPT','flok','move_uploaded_file');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_component_027 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$original = rotate($compressed,"
    condition:
        $s0 and $s1
}

rule php_malware_component_028 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "USPS Scam Page"
    condition:
        $s0 and $s1
}

rule php_malware_component_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "mail($em,\"HADESHOP - Cpanel #"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "<?php if(!defined(\"\\x"
        $s2 = "\")){@define(\"\\x"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_component_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PCFET0NUWVBFIEhUTUwgU"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_component_032 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "eporting("
        $s2 = "@set_time_limit(0); @error_reporting(0);"
        $s3 = "if (isset($_REQUEST['d_time'])){ die($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_ConBot_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "$user_agent = \"ConBot\";"
    condition:
        $s0 and $s1
}

rule php_malware_COOKIE_check_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "]($_"
        $s2 = "] ) && crc32($_COOKIE ["
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_COOKIE_check_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "unlink("
        $s2 = "{unlink(__FILE__); die(md5("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_COOKIE_check_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset($_COOKIE[\""
        $s2 = "if($tmp == md5($check)){"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_copy_001 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $w0 = "copy('https://getcomposer.org"
        $s1 = /[\s]copy\(.http/
    condition:
        $s0 and $s1 and not $w0
}

rule php_malware_copy_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "copy('http://tinyurl"
    condition:
        $s0 and $s1
}

rule php_malware_copy_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "if(sha1_file($formfile)!=sha1_file($tofile)){@unlink($tofile);@copy($formfile,$tofile);}"
    condition:
        $s0 and $s1
}

rule php_malware_copy_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "\") && @file_exists(\""
        $s2 = "\") && @md5_file(\""
        $s3 = "\") || @md5_file(\""
        $s4 = "\"){@chmod(\""
        $s5 = "\", 0444);}"
        $s6 = "\", 0755);@copy("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_copy_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "echo"
        $s4 = "copy($_FILES["
        $s5 = "HTTP_DZMVWHBPQ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_copy_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "copy("
        $s3 = "print \"--> \" . $file"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_copy_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "if(copy("
        $s5 = "posix_getpwuid(posix_getuid());"
        $s6 = "$home = $arr[\"dir\"];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_copy_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = "if(copy("
        $s5 = "posix_getpwuid(posix_getuid());"
        $s6 = "@dir($"
        $s7 = "getFileList(\"$dir$entry/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_corelibrarieshandler_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "foreach(str_split($session_keys, 8"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_corrupted_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "echo @$GLOBALS$GLOBALS"
    condition:
        $s0 and $s1
}

rule php_malware_counterGAGA_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aWYgKC"
        $s1 = "eval\\(\\$"
        $s2 = "=\"\";foreach($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x63\\x72\\x65\\x61\\x74\\x65\\x5f\\x66\\x"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_001_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "=\"\\x63\\x72\\x65\\x61\\x74\\x65\\x5f"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_001_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x63\\x6e\\x69\\x66\\x64\\x72\\x36\\x6f"
    condition:
        $s0 and $s1
}

rule php_malware_create_function_001_04 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x63\\x72e\\x61\\x74\\x65_\\x66\\x75\\x6e"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_001_05 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x63r\\x65\\x61\\x74e\\x5f\\x66\\x75\\x6e\\x63\\x74"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_001_06 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x65\\x61\\x74\\x65_\\x66\\x75"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "get_option"
        $s2 = "_func=create_function('',get_option('wp_"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = ");}call_user_func(create_function("
        $s2 = "function applyfilter("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base64_decode"
        $s2 = "$_COOKIE [str_replace('.', '_', $_SERVER['HTTP_HOST"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = "@assert(get_option("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_create_function_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "strrev"
        $s2 = "gzinflate"
        $s3 = "if (isset($_POST["
        $s4 = "create_function('', $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_008 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /(\$\w+)\s*=\s*['\"].{64}/
        $s2 = /=\s*['\".\sbase64_dco]{13,30}\s*;\s*\$\w+\s*=\s*['\".\screat_funio]{15,30}\s*;\s*\$\w+\s*=\s*['\".\sgzuncompres]{12,30}/
        $s3 = /=\s*['\".\sbase64_dco]{13,30}\s*;\s*\$\w+\s*=\s*['\".\screat_funio]{15,30}\s*;\s*\$\w+\s*=\s*['\".\sgzuncompres]{12,30}\s*;[\s]\$[\w]+\(..,[\s]\$[\w]+\(\$[\w]+\(.[^;]{200}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_008_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /(\$\w+)\s*=\s*['\"].{64}/
        $s2 = /=\s*['\".\sbase64_dco]{13,30}\s*;\s*\$\w+\s*=\s*['\".\screat_funio]{15,30}\s*;\s*\$\w+\s*=\s*['\".\sgzuncompres]{12,30}/
        $s3 = "@ini_set('display_errors', 0);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_create_function_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "b374k"
        $s1 = ";$b374k=$func('$x','ev"
    condition:
        $s0 and $s1
}

rule php_malware_create_function_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base64_decode"
        $s2 = "create_function(chr("
        $s3 = "'.''));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_create_function_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "$errstr); array_map($"
    condition:
        $s0 and $s1
}

rule php_malware_create_function_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base64_decode"
        $s2 = "= create_function(null,gzuncompress(base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_013_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "if (!isset($_REQUEST["
        $s2 = "create_function(null,gzinflate(convert_uudecode("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "=create_function('',base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_create_function_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base64_decode"
        $s2 = "base64_decode($_REQUEST["
        $s3 = "(!empty($_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_016 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "call_user_func(create_function('',"
        $s2 = /function [O0l1]{3,}\(\)[\s]*\{global \$[\w]+;[\s]*return[\s]*call_user_func\(\$[\w]+/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_017 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "array_reverse(array("
        $s2 = /ob_start\(\);[\s]*[\w]+\(\);[\s]*\$[\w]+[\s]*=[\s]*ob_get_clean\(\);[\s]*\$[\w]+[\s]*=[\s]*gzinflate\(\$[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*implode\(..,[\s]*array_reverse\(array\([^;]+\)\)\);[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\(..,[\s]*\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "&& md5($_GET["
        $s4 = "isset($_COOKIE[$_0])?$_COOKIE[$_0]:@$_POST[$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_019 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "_COOKIE"
        $s3 = /\$_POST\[.[\w]*.\][\s]*=[\s]*.[\w]+.;[\s]*\$[\w]+[\s]*=[\s]*Array\(\);[^_]+\]\(\$_COOKIE/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_create_function_020 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "foreach(${$"
        $s3 = "if(!empty(${$"
        $s4 = "():'';}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_create_function_021 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "__DIR__ ."
        $s4 = ",base64_decode(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_create_function_022 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "extract(array("
        $s2 = "return @($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "substr(MD5(strrev($"
        $s2 = "]}=@gzinflate(${${"
        $s3 = "]}).substr(MD5(strrev(${${\"\\x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_create_function_024 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "gzuncompress(strrev($"
        $s2 = "stream_get_contents($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "array(chr(125),chr(47).chr(42));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_create_function_026 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "\".\""
        $s3 = "\".\"\\1"
        $s4 = "\".\"\\x"
        $s5 = "('',\"\\"
        $s6 = /(\$[\w]+[^;]+\.[\s]*\\".[^;]+;[\s]*)+\$[\w]+\(\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_create_function_027 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = ",@$_POST['O'.(1-1)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_028 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65"
        $s2 = "create_function('', '}'.$"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_create_function_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "fseek($"
        $s3 = "create_function("
        $s4 = "gzuncompress(strrev(substr($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_create_function_030 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = ").str_rot13(')').chr(0x"
        $s3 = "create_function(str_rot13('$').base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cryptominer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "dNe7tqY5J/DyTOM+sxyf9+RDmal58"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_cryptominer_002_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ")));');"
        $s1 = /\$\w+\s*=\s*['\"\.create_function\\x63\\x72e\\x61\\x74e\\x5F\\x66\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E]+\s*;\s*\$(\w+)\s*=\s*\@\$\w+\(['\"]\$\w+['\"]\s*,\s*['\"\.\(\?\>eval gzinflate base64_decode\\x67\\x7A\\x6E\\x66\\x6C\\x61\\x74e\\x62\\x61\\x73e\\x5F\\x64e\\x63\\x6F\\x64]+\(\$/
    condition:
        $s0 and $s1
}

rule php_malware_cryptominer_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "cryptonight -o monerohash.com:"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cryptominer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec(\"sed -n '/SORRYIMPOOR/,/IHAVENOJOB/p"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_cryptominer_005_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = /\*\*[\s]*SORRYIMPOOR/
    condition:
        $s0 and $s1
}

rule php_malware_cryptominer_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "assets/js/jquory.js"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cryptominer_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "system(base64_decode(\"Li9jbnJpZyAtYSBjcnlwdG9uaW"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cryptominer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "style"
        $s2 = "div class=\"minero-hidden\""
        $s3 = "echo '<div class=\"minero-hidden\" style=\"display"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cryptominer_008_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "style"
        $s2 = "div class=\"minero-hidden\""
        $s3 = "<script src=\"https://minero.cc/lib/minero-hidden"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cryptominer_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "$_SERVER[\"REQUEST_URI\"] = str_replace(\"?reboot=yes\", \"\", $_SERVER["
    condition:
        $s0 and $s1
}

rule php_malware_cryptominer_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "CURL"
        $s5 = "return url_get_contents(\"$URL_GET?filename=$filename&host=$host\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_cryptominer_011 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "base64_decode(chr("
        $s3 = "(str_shuffle(MD5($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_cryptominer_012 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = /<\?php[\s]*system\(.[^\)]+([\w]+.x[\d]+[\s]*)+[^;]+\);/
    condition:
        $s0 and $s1
}

rule php_malware_cryptominer_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "cpuminer-sse2"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_cryptominer_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZWNobyAnc2lsaXQgaXMgbWJ1a2knOwpAaW5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_cryptominer_015 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "/host.tar.gz && tar zxf host.tar.gz && chmod +x cpuminer-"
    condition:
        $s0 and $s1
}

rule php_malware_cs_auth_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = "cs_auth"
        $s3 = "$data = @unserialize(cs_decrypt(base64_decode($data), $data_key));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$compressed=base64_decode($cookieData);"
    condition:
        $s0 and $s1
}

rule php_malware_curl_026 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "echo \"Sukses\""
        $s3 = "array(\"username\" => $username, \"password\" => $password)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_027 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "preg_match_all(\"/(<title[^>]*>)(.*?)(<\\/title>)"
        $s4 = "shell_test"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_028 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "])){setcookie("
        $s3 = "ucwords(strtolower(str_replace("
        $s4 = "(@strpos(@strtolower($this->cookie)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_030 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "=str_ireplace("
        $s2 = "));}set_error_handler("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_curl_031 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "add_action("
        $s3 = "echo $"
        $s4 = "CURLOPT_URL, \"http"
        $s5 = "str_replace("
        $s6 = "function bot($res)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_curl_033 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "DVa1EuwIDPuce29ShGmu2jAzbnMTZuZ8/W3nzrY"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_034 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "(base64_decode(base64_decode(base64_decode("
        $s4 = "remote_traffic_uri\" => $remote_traffic_uri,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "curl_init(base64_decode("
        $s3 = "if(isset($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_036 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "return curl_exec($"
        $s3 = "$headers = array(\"Accept: \".$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_037 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "rand(0,255)."
        $s3 = "array(\"X-FORWARDED-FOR"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_039 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "http_get("
        $s3 = "=http_get(\"http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_040 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "curl_init(base64_decode("
        $s3 = ");eval('?>'.$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "fopen($"
        $s3 = "if(adminer("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_042 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "chr(hexdec($"
        $s3 = "$!start!$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_043 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "(hex2bin(hash(base64_decode("
        $s3 = "+=array_flip(str_split(strtoupper($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_044 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "return urldecode(base64_decode(implode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_045 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "botbotbot"
        $s4 = "mb_strtolower($_SERVER["
        $s5 = ").mb_strtolower($_SERVER[HTTP_USER_AGENT]);$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_curl_045_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "botbotbot"
        $s4 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_045_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "botbotbot"
        $s4 = "$botbot"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_045_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "botbotbot"
        $s4 = "mb_strtolower($_SERVER["
        $s5 = "mb_strtolower($_SERVER[HTTP_USER_AGENT]); goto"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_curl_045_05 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "botbotbot"
        $s4 = "mb_strtolower($_SERVER["
        $s5 = "(strpos($botbotbot,\"google\")"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_curl_045_06 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "{ $result = curl_exec($ch); curl_close($ch); echo $result; } goto"
        $s2 = "_SERVER["
        $s3 = "CURLOPT_URL"
        $s4 = "curl_init("
        $s5 = "botbotbot"
        $s6 = "$userAgent = isset($_SERVER['HTTP_USER_AGENT']) ? \"...\" . strtolower($_SERVER['HTTP_USER_AGENT']) : '';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_curl_045_08 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "botbotbot"
        $s4 = "if ($code_rand == 1)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_045_09 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = ".base64_decode(\"JmRvbWFpbj0=\").$_SERVER[base64_decode(\"SFRUUF9IT1NU\")];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_046 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "])){setcookie("
        $s3 = "]);}}header(\"location:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_047 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FVZFrsUIkjxOV8kLM2nUC7P9zAybkZmZffr5c4HIV"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_048 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "CURLOPT_COOKIE,preg_replace('/PHPSESSID="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_curl_049 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "function_exists"
        $s2 = "(false !== strpos($"
        $s3 = "];continue;}if (false"
        $s4 = ")}()) exit;}}};}$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_050 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "mb_stripos"
        $s3 = "<?php goto"
        $s4 = "$result = curl_exec($ch); curl_close($ch); echo $result; } goto"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_curl_051 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "curl_setopt"
        $s3 = "curl_exec($exe);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_datafn_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "\"Can't Create DataFN\""
    condition:
        $s0 and $s1
}

rule php_malware_db_drop_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "unlink(ABSPATH.\""
        $s2 = "$wpdb->query(\"DROP TABLE \".$wpdb->prefix.\"users\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_db_drop_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "require( dirname(__FILE__) . '/wp-load.php' );"
        $s2 = "$wpdb->query('TRUNCATE TABLE"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_db_drop_gen_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "unlink(ABSPATH"
        $s2 = "$wpdb->query(\"DROP TABLE \".$wpdb->prefix.\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_db_injector_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "base64_decode(str_replace(\" \",\"\","
        $s5 = "$_SERVER[\"DOCUMENT_ROOT\"].\"/wp-config.php\";"
        $s6 = "chmod(\"/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_db_injector_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "base64_decode(str_replace(\" \",\"\","
        $s5 = "$_SERVER[\"DOCUMENT_ROOT\"].\"/wp-config.php\";"
        $s6 = "$_POST[\"backname\"].\".php&&&\".$directory.\"/\".$_POST[\"backname"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_db_injector_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "html = \"<!--$unicid-->\".trim($slova[array_rand($slova, 1)]).\"<!--/$unicid-->\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_db_injector_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "WHERE 1=1 AND {$wpdb->users}.user_login !="
        $s4 = "->query_where = str_replace("
        $s5 = "(call_user_func($wp_"
        $s6 = "resu_etaerc_pw'), array($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_db_injector_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "hidden;"
        $s2 = "none;"
        $s3 = "preg_replace(\"/(\\<body.*\\>)/\", \"$1\".$after_body, $output)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_db_injector_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"TABLE_NAME\"].\" set post_content = CONCAT(post_content,\\\"<script src="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_db_injector_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "error_reporting(0)"
        $s4 = "SET `post_content`="
        $s5 = "$_SERVER['HTTP_USER_AGENT'];if($ua=='WP_API"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_db_injector_006_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "error_reporting(0)"
        $s4 = "SET `post_content`="
        $s5 = "else{die(json_encode(array('status' => 'incomplete_data"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_db_injector_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "str_replace("
        $s3 = "error_reporting(0)"
        $s4 = "(strpos(strtolower($_SERVER['HTTP_USER_AGENT'])"
        $s5 = "(isset($_POST['h'], $_POST['u'], $_POST['p'], $_POST['n'])) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_db_injector_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "unlink(__DIR__"
        $s4 = "case 'get_post_content':"
        $s5 = "$permalink = get_permalink($_POST['id"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_db_injector_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "post_stats('cr','OK',$tg,$injected,$nfo);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_db_injector_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "PHNjcmlwdD"
        $s2 = "->query('update core_config_data set value = \"'.$s.'\" where config_id ="
        $s3 = "J2UnKydwJysnYScrJ3I"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_DLE_injection_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "[group=4,5]<script "
    condition:
        $s0 and $s1
}

rule php_malware_doc_redirector_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = ".docm');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "if(isset($_POST[\"hash\"]) and @md5($_POST[\"hash\"]) == \""
        $s3 = "\"+/=\""
        $s4 = "= base64_decode(strtr($_POST[\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "(!empty($_POST[\"login\"])) {"
        $s2 = "$vars = \"url=\".$_SERVER[\"HTTP_REFERER\"].\"&login=\".$_POST[\"login\"][\"username\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = ", 'a+'); fwrite($f, $_POST["
    condition:
        $s0 and $s1
}

rule php_malware_dropper_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "@file_exists($n.\".bin\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "KTtAc2V0X3RpbWVfbGltaXQoMTUwKTtAaWdub3JlX3VzZXJfYWJvcnQodHJ1ZSk7QGluaV9zZXQoJ21heF9leGVjdXRpb25fdGltZScsMTUwKTtpZigkX1NFUlZFUlsnUkVRVUVTVF9NRVRIT0QnXT09"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_004_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".zip\",$data);"
        $s4 = "class PclZip"
        $s5 = "if ($archive->extract() == 0) {"
        $s6 = "$data = base64_decode(\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_dropper_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if (isset($_GET['s'])) { die"
        $s2 = ": attachment; filename=\"'"
        $s3 = "die(base64_decode($this->content"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "shell-path:"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fnd(getcwd());if("
        $s5 = ";}include("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\"];window"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "&name=r0ot.pl"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "shell_exec(\"chmod 777 -R ."
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_010_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "recaptcha-in.pw"
    condition:
        $s0 and $s1
}

rule php_malware_dropper_010_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "google-statik.pw"
    condition:
        $s0 and $s1
}

rule php_malware_dropper_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_setopt ( $wp_"
        $s4 = "file_put_contents ( ABSPATH . WPINC"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_011_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_setopt ( $wp_"
        $s4 = "if ( is_dir ( ABSPATH . WPINC )"
        $s5 = "file_put_contents ( ABSPATH . WPINC ."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "explode(PHP_EOL,file_get_contents(__DIR__.'/s')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode(\"JHBheWxvYWRfZmlsZSA9"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "echo file_put_contents(\"../../index.php\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_015 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "&& file_put_contents($file, $data)) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_017 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "\\x6f\\x63\\x3b\\x72\\x6d\\x20-rf /\\x74m\\x70/\\x64\\x6fc"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "file_put_contents($path,file_get_contents("
        $s5 = "unlink ($path)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$nama"
        $s6 = ",\"w+\");"
        $s7 = "$tulis"
        $s8 = "file_get_contents('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_malware_dropper_020 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "\"./wp-admin/css/colors/"
        $s4 = "\"./wp-links-opml.php\","
        $s5 = "function get_array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_021 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "\\x77get\\x20-O /t\\x6d\\x70/doc\\x20ht\\x74p"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_022 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents('../../../wp-admin/wp-store-class.php',$request['body']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "w\\x67et\\x20-\\x4f\\x20/tmp/\\x64\\x6fc htt\\x70:"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_024 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "shell_exec(\"wget -O /tmp/shell"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_025 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "shell_exec(\"wget -c"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_026 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "@eval(gzinflate(base64_decode('FJ23ctzYFkV/ZYKpmgABvAteAO9do2Eze"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_027 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo `curl -k $(echo {$GLOBALS['URL']}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "PD9waHANCmVjaG8gIlRoaXMgc2hpdCB3b3JrcyE"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "popen(\"wget -q -O - http"
        $s2 = "| bash -sh\",\"r\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_030 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "function ing($string, $key)"
        $s4 = "chr(hexdec($func_string"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_031 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "AddHandler cgi-script .izo"
        $s3 = "unlink(\"pyth/she.izo\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_032 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "preg_replace"
        $s2 = "gzinflate(urldecode($content))"
        $s3 = "preg_match_all(':>([^<]+)<:iUs', php_strip_whitespace(__FILE__), $matches) and isset($matches[1][1]))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_033 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "tempnam(sys_get_temp_dir(),"
        $s4 = "$tmpfile = tempnam(sys_get_temp_dir(),'');"
        $s5 = "function strings($text, $key){for($i=0;$i<strlen($text);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_034 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "fwrite($htout, \"RewriteEngine On"
        $s5 = ".php.suspected\")) rename ("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_035 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "> 64) || die("
        $s4 = "@system(\"killall -9 \".$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_036 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "echo \":::NO REPLY CHK:::$file_path:::\\r\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "echo"
        $s3 = "$output = shell_exec('perl"
        $s4 = ";rm -rf ."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_038 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = "if (base64_encode($paths[0])"
        $s3 = "$zipFiles = glob($currentPath . DIRECTORY_SEPARATOR . $path . DIRECTORY_SEPARATOR . '*.zip');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_039 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "php',base64_decode('PD"
        $s4 = "<?php file_put_contents($_SERVER['DOCUMENT_ROOT']."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_040 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".zip\",$data);"
        $s4 = "mkdir(\"$path/$drname\", 0777);"
        $s5 = "substr(str_shuffle($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo system('gcc"
        $s6 = "proc_open($"
        $s7 = "file_get_contents('/etc/passwd"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_dropper_042 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "php',base64_decode('PD"
        $s4 = "ignore_user_abort(1);while(1){file_put_contents($_SERVER['DOCUMENT_ROOT']."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_043 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval (\"?>\"."
        $s4 = "base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_044 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "Content-Disposition: attachment; filename"
        $s3 = "echo gzuncompress(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_045 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "$stat = json_decode(fread($fp, $fileSize), true);"
        $s4 = "return gzinflate(base64_decode($contentData));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_046 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "die('No wp-conf');"
        $s4 = "PD9waHAKLyoqCiAqIEBwYWNrYWd"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_047 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "fwrite($"
        $s3 = "gzinflate(base64_decode($"
        $s4 = "if (stripos($userAgent, $this->"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_dropper_048 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "file_put_contents($file, $code);"
        $s5 = "if (file_exists($file1) && md5(file_get_contents($file1)) == md5($code_self)) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_dropper_049 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@unlink(\"{$p}media/.htaccess\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_dropper_050 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$write = fwrite($file, base64_decode($zip1)); fclose($file); } function zip"
    condition:
        $s0 and $s1
}

rule php_malware_dropper_051 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "fopen(\"http://$config"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_dropper_052 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents('../../' . $cpl_name, base64_decode($cpl));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_drupal_injection_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);$element=array(\"#tag"
        $s3 = "</script>\",);drupal_add_html_head($element"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_drupalgeddon3_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = " = stripDangerousValues($_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_empty_concatenation_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = ".\"\".\"\".\"\".\""
    condition:
        $s0 and $s1
}

rule php_malware_enced_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "$enced=base64_decode($enced);"
    condition:
        $s0 and $s1
}

rule php_malware_encoded_css_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "function xTextEncode($"
        $s2 = "return $crypted_css;"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_encodediframe_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "PGlmcmFtZSBzcmM9Ig=="
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_eval_gen_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\".\""
        $s1 = "\"e\".\"v\".\"a\".\"l("
    condition:
        $s0 and $s1
}

rule php_malware_eval_gen_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x65\\166\\x61\\154"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_eval_gen_007 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval($_POST["
        $s2 = /if\(isset\(\$_POST\[[^\]]+\]\)\)[\s]*eval\(\$_POST\[/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_eval_gen_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5($_POST["
        $s2 = "(sha1(md5($_POST["
        $s3 = "eval($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_eval_hex_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x65\\x76\\x61\\x6c"
        $s3 = "\\x65\\x76\\x61\\x6c"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_eval_hex_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "ini_set(\"\\x"
    condition:
        $s0 and $s1
}

rule php_malware_exif_read_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "preg_replace($exif['Make']"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_exif_read_001_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = " exif_read_data('/"
    condition:
        $s0 and $s1
}

rule php_malware_exif_read_001_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "@preg_replace($exif"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_extract_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "die"
        $s1 = "@extract($_"
    condition:
        $s0 and $s1
}

rule php_malware_extract_001_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "@extract ($_"
    condition:
        $s0 and $s1
}

rule php_malware_extract_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "extract($_REQUEST) && @"
    condition:
        $s0 and $s1
}

rule php_malware_extract_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "])) { @extract($_REQUEST); $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_fakeseomoz_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode('aWY"
        $s3 = "echo copy('http://seo-moz.com/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_fakeseomoz_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "get_remote_file(\"\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x61\\x70\\x69\\x2e\\x73\\x65\\x6f\\x2d\\x6d\\x6f\\x7a\\x2e"
    condition:
        $s0 and $s1
}

rule php_malware_fake_google_encoder_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "https://encoder.google.com"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_fake_jquery_001 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "j..q..e..u..r..y...o..r..g"
        $s4 = "u..p..d..a..t..e"
        $s5 = /if \(!function_exists\(.[\w]+.\)\)[\s]*\{[\s]*function glues_it/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_fake_jquery_001_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "j..q..e..u..r..y...o..r..g"
        $s4 = "h..t..t..p..:../../..j..q..e..u..r..y...o..r..g.."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_fake_socialshare_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "wp-content/mu-plugins/mu-plugin.png"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_fake_wp_about_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "if (!file_put_contents(ABSPATH.'wp-about-4.2.php'"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_fakePNG_001 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "PNG"
        $s2 = "IHDR"
        $s3 = "<?php"
        $s4 = /PNG\x0a\x1a\x0a/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_fakeupdate_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%41%64%6f%62%65%20%46%6c%61%73%68%20%50%6c%61%79%65%72"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_favicon_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if (is_writable($pth.\"wp-content/plugins\")) { $wpdir ="
        $s4 = "copy(\"favicon.ico\",$wpdir.\"/favicon.ico\");"
        $s5 = "mkdir($wpdir,0777,true);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_file_exists_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = ")){echo(file_get_contents"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_file_exists_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "exit();"
        $s2 = "usleep("
        $s3 = "unlink(__FILE__);"
        $s4 = "= @fopen($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_file_exists_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "array_push($good, $site.':'.macroses($site, $login).':'.macroses($site, $passwords[$rst]));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_file_exists_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "echo $basepath;"
        $s5 = "if ( ! $path || ! @is_file($path) )"
        $s6 = "return @file_get_contents($path);"
        $s7 = "function get_file($path)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_filesman_030 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "create_function(\"\",@gzuncompress($__));$_();"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_filesman_031 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "zb1rj+rKkjb4V161+sPbWtJs20CtQj3"
    condition:
        $s0 and $s1
}

rule php_malware_filesman_033 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "goto"
        $s1 = "\\x27\\x37\\130\\x31\\x72\\145\\71\\x72\\x47\\x45\\x76\\104\\x6e\\x6e\\x4f"
    condition:
        $s0 and $s1
}

rule php_malware_filesman_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "=$_SERVER[base64_decode('U0VSVkVSX05BTUU=')];if($_SERVER"
        $s5 = "dirname(__FILE__)),array('')));if(count("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_filesman_035 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "goto"
        $s1 = "\\x6b\\137\\51\\64\\63\\x70\\166\\x69\\163\\x6f\\161\\x68\\x6d\\x77\\x79"
    condition:
        $s0 and $s1
}

rule php_malware_filesman_036 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "if (!isset($_COOKIE["
        $s5 = "json_encode(array_combine($_POST[$lng_tpl"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_filesman_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "ZXZhbCUyOCUyNnF1b3QlM0I"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_filesman_038 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "BcHbkoIgAADQd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_filesman_039 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "eval(str_rot13(base64_decode(substr(file_get_contents("
        $s3 = "Ly8NCiTilpsgPSAiMTg4MTYycjkwbzg4MjcxMDMw"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_filesman_040 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "9P64d0CtFu83e23YMyMkMnNSlTEcduG9Ef2xmmLyL"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_filesman_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "GyhzisXB0C0KuGK3Uul9RvjyIFtv0Vq"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_filesman_042 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "_('$_',$__"
        $s3 = "_();echo $_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_filesman_042_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "_('$_',$__"
        $s3 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_filesman_043 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "eval%28eval%28eval%28eval%28eval%28eval%28eval"
        $s3 = "return%20strrev%28gzinflate%28"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_flashpack_001_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "loxotrap.php"
    condition:
        $s0 and $s1
}

rule php_malware_flashpack_001_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "ldcigar.php"
    condition:
        $s0 and $s1
}

rule php_malware_flashpack_001_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "/renegater.php"
    condition:
        $s0 and $s1
}

rule php_malware_flashpack_001_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "load0515p6jse9.php"
    condition:
        $s0 and $s1
}

rule php_malware_flashpack_001_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = "/newgater.php"
    condition:
        $s0 and $s1
}

rule php_malware_folio_redirect_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "folio="
        $s1 = "&rfolio="
    condition:
        $s0 and $s1
}

rule php_malware_FOPO_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "FOPO - Free Online PHP Obfuscator"
        $s2 = "=\"\\x62\\141\\x73\\145\\x36\\64\\x5f\\144\\x65\\143\\x6f\\144\\x65\";@eval($"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_fopo_obfuscator_001 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "\";@eval($"
        $s3 = /\"[\s]*Ly9/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_g00_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "=base64_decode('PHNjcmlwdCBzcmM9Imh0dHA6Ly9nMDAuY28vUD"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_gagal_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "gagal"
        $s2 = "echo 'gagal"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_gagal_001_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "echo 'GAGAL"
    condition:
        $s0 and $s1
}

rule php_malware_gagal_001_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "gagal"
        $s2 = "echo \"gagal"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_gagal_001_04 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "echo \"GAGAL"
    condition:
        $s0 and $s1
}

rule php_malware_gdlib_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "gd-lib.php"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_gdlib_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "gd-system-plugin.php"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_genericgzinflatepreg_match_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = ">h9b8himkm8moojn>kbi?!*(3,;.?z)"
    condition:
        $s0 and $s1
}

rule php_malware_genericStr_Rot13_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(Str_Rot13(base64_decod"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "echo(stripslashes(base64_decode('P"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "eval(\"?>\".base64_decode(\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(base64_decode('tV"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(base64_decode('rVdbU"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(base64_decode('DZ"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_006_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode(\"ZnVu"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode(\"JGNvZGU"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode(\"JHgw"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode('JHgw"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode(\"aWY"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode(\"CmVy"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval (base64_decode(\"IC8q"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode('LypCQ"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_016 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode(\"Y2xhc3Mgbm"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_generic_019 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /eval[\s]*\([\s]*gzuncompress[\s]*\([\s]*base64_decode[\s]*\([^)]{30}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_generic_019_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*eval/
        $s3 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*eval[^;]{30,};/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_020 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(base64_decode('HZz"
        $s3 = "HZz"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_020_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(base64_decode('HZz"
        $s3 = "HZzHkuNQdgV/ZXYzE1jAu5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(base64_decode(\"BcFJ"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "echo(gzinflate(base64_decode(\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_024 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "eval(\"\".base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_025 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "eval(''.base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_026 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "@eval( base64_decode("
    condition:
        $s0 and $s1
}

rule php_malware_generic_027_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "gzinflate"
        $s3 = "eval (gzinflate(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_027_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "strrev(\"e\\x"
    condition:
        $s0 and $s1
}

rule php_malware_generic_027_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "etalfnizg"
    condition:
        $s0 and $s1
}

rule php_malware_generic_027_010 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x40\\145\\x76\\141\\x6c"
    condition:
        $s0 and $s1
}

rule php_malware_generic_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(\"\\x65\\x76\\x61\\x6C"
        $s2 = "eval(\"\\x65\\x76\\x61\\x6C"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_028_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(\"\\x65\\x76\\x61\\x6C"
        $s2 = "=\"eval\";eval(\"\\x65"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_030 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = " = strrev('etalfnizg');eval($"
    condition:
        $s0 and $s1
}

rule php_malware_generic_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "if (!function_exists(\"b_call\")) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "_']=Array(base64_decode('Z"
        $s2 = "']=Array(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_034_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "_']=Array(base64_decode('Z"
        $s2 = "Array('aHR0"
        $s3 = "echo $_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_036_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "echo '<div style=\"position:absolute; left:-"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_037 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "preg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28"
        $s3 = "preg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_037_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "php Error_Reporting(0);"
        $s1 = "php Error_Reporting(0); $"
    condition:
        $s0 and $s1
}

rule php_malware_generic_038 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "preg_replace(\"/B8Ra=QZ6J1FyUNgda6cIu7kF/e\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_039 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "class TokenInitEx"
    condition:
        $s0 and $s1
}

rule php_malware_generic_040 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "2).'_de'.'code'"
    condition:
        $s0 and $s1
}

rule php_malware_generic_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$ingredients=file(dirname(__FILE__).'/ingredients.txt');"
    condition:
        $s0 and $s1
}

rule php_malware_generic_042 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_get_contents(\"http://\".$_SERVER['HTTP_HOST'].\"/includes/js/k4yrR.txt\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_043 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "rm -rf ./wp-admin ./wp-includes"
    condition:
        $s0 and $s1
}

rule php_malware_generic_044 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "]=='1'){echo '200'; exit;}"
    condition:
        $s0 and $s1
}

rule php_malware_generic_045 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "if(preg_match('/Google Web Preview|bot|spider|wget/i',$_SERVER['HTTP_USER_AGENT'])){"
        $s2 = "if(preg_match('/Google Web Preview|bot|spider|wget/i',$_SERVER['HTTP_USER_AGENT'])){"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_046 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "$sOutContent = file_get_contents("
    condition:
        $s0 and $s1
}

rule php_malware_generic_048 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "json_decode(base64_decode("
        $s3 = "json_decode(base64_decode(substr($_POST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_049 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "swf?myid"
        $s1 = "5.61.36.66/jobhO.swf"
    condition:
        $s0 and $s1
}

rule php_malware_generic_050 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "ini_set('display_errors','Off'); @eval"
    condition:
        $s0 and $s1
}

rule php_malware_generic_051 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "fread_url(\"http"
    condition:
        $s0 and $s1
}

rule php_malware_generic_052 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = ".cbu');"
    condition:
        $s0 and $s1
}

rule php_malware_generic_053 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "$fp = fopen(\"wo.php\", \"w+\");"
    condition:
        $s0 and $s1
}

rule php_malware_generic_054 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "riny"
        $s4 = "@assert(str_rot13('riny(onfr64_qrpbqr"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_054_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "riny"
        $s4 = "@$strings(str_rot13('riny(onfr64_qrpbqr("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_055 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "//###="
        $s3 = "error_reporting(0); ini_set(\"display_errors\", \"0\"); if (!isset("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_056 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "COOKIE"
        $s1 = "@$F&&@$F($A,$B);"
    condition:
        $s0 and $s1
}

rule php_malware_generic_058 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<input type=\"file\" name=\"files[]\" /><button>ndsxf~/</boutton>"
    condition:
        $s0 and $s1
}

rule php_malware_generic_059 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "$str = <<<EOD"
        $s4 = "unlink( MyFileName() );"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_060 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "*/ if(is_object($_SESSION[\"__default\"][\"user\"]) && !($_SESSION[\"__default\"][\"user\"]->id"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_061 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "unlink(__FILE__)"
        $s2 = "touch("
        $s3 = "(time()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_062 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "die"
        $s1 = "####=TEMP END=####"
        $s2 = "####=TEMP START=####"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_063 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$_SERVER[\"HTTP_X_FORWARDED_FOR\"]); $_SERVER[\"HTTP_USER_AGENT\"] = str_replace(array("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_064 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "echo me_file_get_contents($filename)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_065 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "{header('HTTP/1.0 404 Not Found');exit;}"
        $s3 = "if (!isset($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_066 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "uname"
        $s4 = "function massive_folder($put, $glubina, $max_massive)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_067 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "echo 'createa failed!';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_069 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "gzinflate(substr('"
        $s3 = "$root.$GLOBALS{$_GET{"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_070 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = ">Uploaded By Back-DOOR<"
    condition:
        $s0 and $s1
}

rule php_malware_generic_071 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "Z2xvYmFsICRhdXRoX3Bhc3MsJGNvbG9yLCRkZWZhdWx0X2FjdGlvbiwkZGVmYXVs"
    condition:
        $s0 and $s1
}

rule php_malware_generic_073 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "nama:\"Cvar1984.phtml\""
    condition:
        $s0 and $s1
}

rule php_malware_generic_074 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "?main_page"
        $s2 = ");exit();}${\"\\x"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_075 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "if($_GET["
        $s3 = "[\"rnd\"]);}elseif($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_generic_076 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = /\$[\w]+[\s]*=[\s]*\"[^\"]{30,}\";[\s]*\$[\w]+[\s]*=[\s]*[^\$]+chr\([\d]+\)\.[\s]*['\"]\\x[a-f0-9]+['\"][\s]*\.[^\$]+;[\s]*(\$[\w]+[\s]*=[^\$]+chr\([^\$]+;[\s]*)+\$[\w]+[\s]*=[\s]*\$[\w]+[\s]*\.['\"]+[^'\"]{2000}/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_077 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"-=PATH=- $wroot"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_generic_078 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = /(\$[\w]+\['[\w]+'\][\s]*=[\s]*[^\n]+;[\s]*){2,}\$[\w]+[\s]*=[\s]*[^;]+chr\([\d]+\)[\s]*\.['\"]+[^;]+\.chr[^;]+;[\s]*\$[\w]+[\s]*=[\s]*[^;]+\\x[\w]{2}[^$]+\$[\w]+[\s]*=[\s]*\$[\w]+[\s]*\.[^;]{1000,};[\s]*\$[\w]+\[[^\]]+\]\(\$[\w]+\[[^\]]+\]\[[\d]+\][\s]*\.[^;]+\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_generic_079 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rror_"
        $s3 = /php[\s]*[Ee]rror_[Rr]eporting\([\s]*0[\s]*\);[\s]*eval[\s]*\([\s]*[\w]+[\s]*\([\s]*base64_decode[\s]*\([\s]*.[^)]{30}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_080 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "{ $x .= pack('H*', substr($"
    condition:
        $s0 and $s1
}

rule php_malware_generic_081 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "eporting("
        $s2 = "<?php Error_Reporting(0); ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_082 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "echo"
        $s4 = "])?$_GET["
        $s5 = ")){echo"
        $s6 = "]:'';if(!empty($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_generic_083 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "eporting("
        $s2 = "md5($_GET[\"\\x"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_generic_085 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = /\$[\w]+[\s]*\^[\s]*[\w]+\(/
        $s3 = /;[\s]*[\w]+\(\$[\w]+,[\s]*\$[\w]+\[[\d]+\]\(\$[\w]+\[[\d]+\],[\s]*\$[\w]+[\s]*\^[\s]*[\w]+\(\$[\w]+,[\s]*\$[\w]+,[\s]*\$[\w]+\[[\d]+\]\(\$[\w]+\)\)\)\)/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_087 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "CBBDHBFEREMLGFgMXFVKS01WAkgfVh1dV0pPVgtLIXIIHw"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_generic_088 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = /echo .<script[^>]*[^\.]*png.{1,5}<\/script>\";/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_089 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "This website is not equipped with readability feature for Visually"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_090 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "$virus = openssl_decrypt(base64_decode($output),"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_generic_091 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "O0"
        $s2 = /\$[0O_]{3,}[\s]*=[\s]*.[\w]\/[\w]\/[\w]\/[\w].;/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_092 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "strpos($_SERVER['REQUEST_URI'], '/blog/viagra"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_093 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = "7q2Ubx1ep0TXWGwBWaQG1E"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_094 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "pentestmonkey.net"
    condition:
        $s0 and $s1
}

rule php_malware_generic_095 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "unlink($_SERVER[\"SCRIPT_FILENAME"
        $s4 = "@rmdir($path.$val"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_096 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "=Array(base64_decode("
        $s3 = "));die();break;}endif;"
        $s4 = ");return base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_097 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "gzinflate(substr('"
        $s3 = "}{0x001};"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_098 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "header("
        $s5 = "@unserialize(gzinflate(file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_generic_099 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "filename=\\\"all.iz\\\"\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_generic_100 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = "if (!is_single() && is_admin()) {"
        $s4 = "AND {$wpdb->posts}.post_author NOT IN ($idsCommaSeparated)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_101 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "JykpKTtyZXR1cm47'));return;?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_102 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "if( !@stream_copy_to_stream( @fopen( base64_decode( $_GET['"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_generic_103 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "=false;break;}}if($a){@"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_104 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "<form"
        $s4 = "file_put_contents($"
        $s5 = "if(isset($_GET['del']) &&  $_GET['del'] == '1'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_generic_106 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "='<'.'?php /**/ $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_generic_107 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "]($_REQUEST["
        $s4 = "CURLOPT_RETURNTRANSFER,1);$"
        $s5 = "){@header($"
        $s6 = "\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_generic_110 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "\\x75\\x74\\x66\\x2d\\x38\"); die($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_generic_111 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "<!--SYSADMIN-->"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_generic_112 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "if ( in_array( 'administrator', (array) $wp_user->roles ) ) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_113 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "str_replace(\"define('DISALLOW_FILE_MODS"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_generic_114 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "preg_match(\"/\".$email.\"/\", file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_generic_115 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "strpos($views['administrator']"
        $s4 = "$users['avail_roles']['administrator'] - 1;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_generic_116 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "user_ip'=>$_SERVER['REMOTE_ADDR'],'user_ua"
        $s3 = "CURLOPT_URL, base64_decode"
        $s4 = /\$[\w]+\)[\s]*\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*curl_init\(\);/
        $s5 = "!isset($_GET['user_ip'])"
        $s6 = "aHR0cDovL2"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_generic_117 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "edoced_46esab"
        $s2 = "edocne_nosj"
        $s3 = "esab_kcaptej_pw "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_generic_119 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(eval(eval(eval(eval(eval(eval(eval(eval(eval(eval(eval(\"?>\".$"
    condition:
        $s0 and $s1
}

rule php_malware_generic_120 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "php\\n\";"
        $s2 = "foreach ($_SERVER as"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_GLOBALS_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "sprintf($"
        $s2 = "]]);}exit();} ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_GLOBALS_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "<? $GLOBALS['_"
        $s2 = "$host/$id\");break;default:$doheader"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_GLOBALS_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "\\x"
        $s2 = "]=Array();global"
        $s3 = "],);echo@$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_GLOBALS_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = "echo @$GLOBALS[$GLOBALS["
        $s3 = "]] = $_COOKIE;"
        $s4 = "$GLOBALS[$GLOBALS['"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_GLOBALS_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = ");}}}$GLOBALS["
        $s2 = ")))<round(0+0.5+0.5)){$GLOBALS["
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_GLOBALS_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = ")){echo ${"
        $s2 = "\"]('index.htm')){echo ${\"\\x"
        $s3 = "if(${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_GLOBALS_007 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "\\x"
        $s2 = /\$GLOBALS;\${.(.x47|G)(.x4c|L)(.x4f|O)(.x47|B)/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_GLOBALS_008 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "${\""
        $s4 = "file_get_contents(${${\""
        $s5 = "urlencode($_"
        $s6 = /\$\{\"(G|.x47)(L|.x4c)(O|.x4f)(B|.x42)(A|.x41)(L|.x4c)(S|.x53)\"\}\[\"[^\"]+\"\][\s]*=[\s]*\"[^\"]+\";[\s]*\$\{\"(G|.x47)(L|.x4c)(O|.x4f)(B|.x42)(A|.x41)(L|.x4c)(S|.x53)\"\}\[\"[^\"]+\"\][\s]*=[\s]*\"[^\"]+\";[\s]*[^\n]+\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_GLOBALS_008_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "error_reporting"
        $s2 = ";error_reporting(0);if(!defined("
        $s3 = ";(PHP_OS=="
        $s4 = ")@include("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_GLOBALS_009 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = /<\?php[\s]*\$\{\"(G|.x47)(L|.x4c)(O|.x4f)(B|.x42)(A|.x41)(L|.x4c)(S|.x53)\"\}\[\"[^\"]+\"\]=\"[^;]+;[\s]*\$\{[^\n]+[\s]*\?>[\s]*<\?/
    condition:
        $s0 and $s1
}

rule php_malware_GLOBALS_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = "));$GLOBALS['_"
        $s3 = "));else{$GLOBALS"
        $s4 = ",round(0+"
        $s5 = ")^round("
        $s6 = "(__FILE__);while(round("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_google_api_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "array(0,97,98,99,100,101,108,115,118,105,110,111,117,109,112,114)"
    condition:
        $s0 and $s1
}

rule php_malware_gzinflate_hex_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x67\\x7A\\x69\\x6E\\x66"
    condition:
        $s0 and $s1
}

rule php_malware_gzuncompress_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval ( gzuncompress"
    condition:
        $s0 and $s1
}

rule php_malware_gzuncompress_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\\147\\172\\165\\156\\143\\157\\155\\160\\162\\145"
    condition:
        $s0 and $s1
}

rule php_malware_gzuncompress_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "base64_decode"
        $s2 = "( gzuncompress ("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_gzuncompress_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "include stream_get_meta_data("
        $s3 = "gzuncompress("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_harakiri_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "while (1==1)"
        $s4 = "@unlink($_SERVER['SCRIPT_FILENAME']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_hello_dolly_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "@$Hello_Dolly=\""
    condition:
        $s0 and $s1
}

rule php_malware_hex_oct_obfuscation_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x65r\\x72\\x6fr_r\\x65\\x70"
    condition:
        $s0 and $s1
}

rule php_malware_hex_oct_obfuscation_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\x70\\162\\x65\\x67\\x5f\\x72"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_hiddeniframe_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "if(preg_match(base64_decode('Lyh5YW5kZXh"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_hiddeniframe_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "=document.cookie.replace(/\\s/g,\"\").split(\";\");for(var"
    condition:
        $s0 and $s1
}

rule php_malware_hiddeniframe_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "=\"hxxp://"
        $s2 = "co.be/forum.php?tp"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_hobodun_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$file->SaveToBin(\"wp-admin.zip\");"
    condition:
        $s0 and $s1
}

rule php_malware_hostlog_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "saiforaviado_ip"
    condition:
        $s0 and $s1
}

rule php_malware_htaccess_writer_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "fopen(\".htaccess\""
        $s4 = "<h1>htrescue</h1>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_htaccess_writer_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "$name = base64_decode(\"Lmh0YWNjZXNz\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_httpenc_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x68\\x74\\x74\\x70\\072\\057"
    condition:
        $s0 and $s1
}

rule php_malware_include_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "include(\"$_"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "include_once(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "include(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_005 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include_onc"
        $s2 = /@include_once[\s('\"]+\/home\//
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include_onc"
        $s2 = "include_once($__"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include('sucuri-"
    condition:
        $s0 and $s1
}

rule php_malware_include_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "include( dirname( __FILE__ ) . '/wp-blog-footer.php' );"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "if(!class_exists('FbiClient')) { if(@file_exists"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_010 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "php include 'fonts/font.ttf'; get_header();"
    condition:
        $s0 and $s1
}

rule php_malware_include_011 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "include('./wp-includes/"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_012 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "*/include"
        $s2 = "*/include "
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_012_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "*/include "
        $s2 = "*/\"\\x2"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_014 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "#gogo(.*)enen#is', $x"
    condition:
        $s0 and $s1
}

rule php_malware_include_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(strpos(strtolower($_SERVER['REQUEST_URI']),"
        $s3 = "include(getcwd().'/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_017 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = ".dba';"
    condition:
        $s0 and $s1
}

rule php_malware_include_018 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "if(!isset($db)) @include"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0);ini_set(\"display_errors\", 0);include_once(sys_get_temp_dir().\""
    condition:
        $s0 and $s1
}

rule php_malware_include_020 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "$localpath));include_once("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_021 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "include(ABSPATH.\"/wp-includes/"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "@include('wp-admin/css/css.php');"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"\\x63\\x68\\x72\";"
        $s2 = "\"\\x69\\x6e\\x74\\x76\\x61\\x6c\";"
        $s3 = "include_once($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_023_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\"\\x63\\x68\\x72\";"
        $s2 = "\"\\x69\\x6e\\x74\\x76\\x61\\x6c\";"
        $s3 = "die($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_024 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include_onc"
        $s2 = "return $included === $count;"
        $s3 = "if (file_exists('Config' . $arg . '.php')) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_025 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "include($root['uri"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_026 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = ".png\"); die;"
        $s2 = "include(dirname(__FILE__).\"/wp-"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_027 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "if(isset($_GET["
        $s4 = /\]\)\)\{ include\(['\"]\/(home|var|root)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "$optimizer='/"
        $s4 = "is_file($optimizer) ? require_once($optimizer) : null;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "header(\"HTTP/1.0 404 Not Found\");"
        $s2 = "@include($_FILES"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_030 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$this->testStorage('<?php '.$channelID);"
    condition:
        $s0 and $s1
}

rule php_malware_include_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "include(\"/tmp/\".$_GET[my]);"
    condition:
        $s0 and $s1
}

rule php_malware_include_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "header(\"Location:"
        $s3 = "));exit();}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_include_033 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = /@include_once\s*\(.(\\[\w]+){1,}(\\x[\w]+){2,}([\w]+){1,}/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "Network host configuration. Not recommended edit this code!"
    condition:
        $s0 and $s1
}

rule php_malware_include_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "* Core Post API"
        $s4 = "if (file_exists(dirname(__FILE__) . '/wp-"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('y8xLzilNSY3Pz0tOVVDXz8"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_037 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "//@null \"\\x"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_include_038 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = /if\s*\(is_file\(['\"]((\/\w+){1,8}\/wp-content\/plugins\/[\w+(\/\-\w+)?]+\.(php|html|htm|js|.pl|.sh)['\"]\))\)\s*\{include_once\(['\"][^;]+]\s*;\s*\}/
    condition:
        $s0 and $s1
}

rule php_malware_include_039 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "/wp-includes/SimplePie/HTTP/tmp/jquery.php'"
    condition:
        $s0 and $s1
}

rule php_malware_include_040 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "if (file_exists(ABSPATH.'wp-content"
        $s4 = "* WPC Cache"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_041 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = ".php'); ?>"
        $s3 = "<?php error_reporting(-1); include_once("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_042 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "@include"
        $s2 = "* Front to the WordPress application. This file doesn"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_042_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "@include"
        $s2 = "@include \""
        $s3 = "* the WordPress procedural and class library."
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_include_043 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = /@include[^;\n]+\\[\d]{3}[^;\n]+\\[\d]{3}[^;\n]+\\[\d]{3}[^;\n]+\\[\d]{3}[^;\n]+;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_044 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = /<\?php[\s]{40,}@include_once/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_045 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "isset($_SERVER[\"HTTP_REFERER\"]) ? $_SERVER[\"HTTP_REFERER\"] : $HTTP_REFERER); $str=base64_encode($"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_046 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "efine('SECURE_AUTH_SALT',"
        $s2 = "/** The name of the database for WordPress */"
        $s3 = "include"
        $s4 = /include(_once)?\([^;]+wp-(includes|admin)[^;]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_include_047 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "\\x"
        $s2 = /include[\s]*\"(\\x[\w]{2}|\w+)[^;]+\\x[\w]{2}[\w]+\\x[\w]{2}/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_048 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "// Edit and deleting this code is not recommended!"
        $s3 = "@include( ABSPATH . WPINC . '/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_049 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "index.php"
        $s3 = "* Front to the WordPress"
        $s4 = "@include './wp-"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_include_050 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = /\]\)\){\@?include\(/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_051 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(gzinflate(base64_decode('y8xLzil"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_052 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = /[\s]{300,}require(_once)?\(/
    condition:
        $s0 and $s1
}

rule php_malware_include_053 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "* Front to the WordPress application."
        $s2 = "echo '<script src="
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_054 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "if (is_file("
        $s2 = /if \(is_file\(['\"][^\)]+['\"]\)\)[ ]*\{?[ ]*include(_once)?\(['\"][^\)]+['\"]\);[\s]*\}?/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_055 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "<?php @include_once("
        $s3 = /<\?php @include_once\([^;]+\/[^;]+\/[^;]+\/[^;]+\/[^;]+\/[^;]+\);[\s]*\?>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_056 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "/wp-load.php"
        $s3 = "@inc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_include_056_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "/wp-load.php"
        $s3 = "@inc"
        $s4 = /if[\s]*\(is_file\([^\)]+\)\)[\s]*@inc/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_057 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if(@file_exists("
        $s3 = "catch(Throwable"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_058 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ");  @include_once $"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_include_059 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "include dirname("
        $s2 = /<\?php[\s]*@?include[\s]*dirname\(__FILE__\)[\s]*.[\s]*.\/[\w]*\.txt/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_060 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include_onc"
        $s2 = "include_once $_SERVER['DOCUMENT_ROOT']"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_061 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "<?php @include_once \""
        $s3 = /<\?php @include_once \"[^;]+\\x[^;]+\\x[^;]+\\x[^;]+\\x[^;]+\\x[^;]+\";[\s]*\?>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_include_062 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "<?php @include_once \""
        $s3 = /<\?php[\s]*@include_once[\s]*.[^;]+;[\s]*if[\s]*\(!defined\([^\}]+true\);[\s]*\}[\s]*\?>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_include_063 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "\\x"
        $s3 = /@include_once[\s]*..x[\d]+[\w]+[^;]+;[\s]*if\(!defined\(.[^\)]+\)\)[\s]*\{[\s]*@define\(..x[\d]+[\w]+[^\)]+true\)[\s]*;[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_include_064 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = /@include\s+\"[^\"]*.[\d]{3}[^\s]*.[\d]{3}[^;]*\;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_065 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "\\x"
        $s3 = /@include_once\(..{1,8}\\x\d+\w+/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_065_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "{ wp_redirect(get_admin_url()); } else { wp_redirect(get_bloginfo(\"\\x"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_include_066 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "&& md5($_GET["
        $s4 = "if(isset($_REQUEST[chr("
        $s5 = /@include\(\$[\w]+\);[\s]*@unlink\(\$[\w]+\);[\s]*die\(\);[\s]*\}[\s]*else[\s]*\{[\s]*echo[\s]*base64_decode/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_include_067 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "<?php if (file_exists(dirname(__FILE__) . '/wp-"
        $s4 = "include_once(dirname(__FILE__) . '/wp-"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_068 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "echo file_get_contents('index.html."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_069 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "(strpos(strtolower($_SERVER[\"HTTP_USER_AGENT\"]),\"googlebot\") !=="
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_070 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "ini_restore("
        $s4 = "ini_get("
        $s5 = "echo ini_get(\xe2\x80\x9csafe_mode\xe2\x80\x9d);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_include_071 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "(file_exists(ABSPATH . 'wp-core.php'))"
        $s4 = "require_once(ABSPATH . 'wp-core.php');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_include_072 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include 'phar://"
        $s2 = /include\s'phar:\/\/(\w+.){1,5}\.txt.;/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_073 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "rand("
        $s2 = "file_exists(\"wp-admin\")) AND"
        $s3 = "file_put_contents('index.php', $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_074 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "if(isset($_GET['user'])&&$_GET['user']=="
        $s3 = "include(base64_decode('cGhh"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_075 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "cGhhcjovL2"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_076 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include(\"phar://"
    condition:
        $s0 and $s1
}

rule php_malware_include_077 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "efine('SECURE_AUTH_SALT',"
        $s2 = "/** The name of the database for WordPress */"
        $s3 = "include __DIR__"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_078 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "include $_GET['func'];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_079 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "wp-config.php"
        $s2 = "foreach (glob(ABSPATH .'"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_080 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = /<\?php[\s]*include(_once)?[\s]*['\"][^;\n]+\\x[\w]{2}\\[^;\n]+;[\s]*\?>/
    condition:
        $s0 and $s1
}

rule php_malware_include_081 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "[\"uri\"];}"
        $s2 = ",\"<?php \".$_POST["
        $s3 = "=tmpfile();fwrite($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_include_082 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "(isset($_SERVER[strtoupper("
        $s2 = "create_function('&$postdata,"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_083 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "if(md5(getenv('HTTP_USER_AGENT'))"
        $s4 = "file_put_contents(WWWROOT_DIRECTORY.WORDPRESS_FOLDER_PATH"
        $s5 = "if(!defined('WAF')) include(WWWROOT_DIRECTORY.WORDPRESS_FOLDER_PATH."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_include_084 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"phar"
    condition:
        $s0 and $s1
}

rule php_malware_include_085 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"\\160har"
    condition:
        $s0 and $s1
}

rule php_malware_include_086 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"p\\150ar"
    condition:
        $s0 and $s1
}

rule php_malware_include_087 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"ph\\141r"
    condition:
        $s0 and $s1
}

rule php_malware_include_088 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"pha\\162"
    condition:
        $s0 and $s1
}

rule php_malware_include_089 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"\\160\\150ar"
    condition:
        $s0 and $s1
}

rule php_malware_include_090 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"p\\150\\141r"
    condition:
        $s0 and $s1
}

rule php_malware_include_091 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"ph\\141\\162"
    condition:
        $s0 and $s1
}

rule php_malware_include_092 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"\\160\\150\\141r"
    condition:
        $s0 and $s1
}

rule php_malware_include_093 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"\\160\\150\\141\\162"
    condition:
        $s0 and $s1
}

rule php_malware_include_094 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = "{print \"sys_active\""
        $s4 = "if(!isset($_POST[\"log_flg\"])){$log_flg=\"&log\";}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_095 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "fwrite($fopen, get($data[0]));"
        $s4 = "md5($_SERVER['HTTP_HOST']).'.php'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_include_096 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "@include \"\\x2f\\x68\\x6f\\x6d\\x65\\x2f"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_include_cryptoPHP_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "include('images/social.png');"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_include_tmp_001 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = /include\(.\/tmp\/\w+.\)\s*;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_include_tmp_002 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset($_GET"
        $s2 = /if[\s]*\([\s]*isset\(\$_GET\[.[\w]+.\]\)[\s]*&&[\s]*\$_GET\[.[\w]+.\]==.[\w]+.\)[\s]*\{[\s]*include\([^;]+\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_infector_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "));@touch(\"index.php\",strtotime(\"-"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_infector_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "echo \"e1:\".$f"
        $s4 = "@search_file($_SERVER['DOCUMENT_ROOT'].\"/../../../../..\",$file_to_search);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(104,116,116"
        $s3 = "(){if(document.cookie.indexOf(\"wp-settings\")>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_infector_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "search_file_js($_SERVER['DOCUMENT_ROOT'].\"/../../../.."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_infector_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".chr("
        $s4 = ",chr(60).chr(63).chr(112).chr(104).chr(112).chr(32)"
        $s5 = "@file_put_contents("
        $s6 = "@include("
        $s7 = "@unlink("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_infector_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "gzinflate(substr("
        $s2 = "error_reporting(E_ALL^E_NOTICE);define("
        $s3 = "explode('|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_infector_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "!is_dir("
        $s4 = "'wp-admin';"
        $s5 = "'widgets';"
        $s6 = "<FilesMatch \"\\.(php|php.|phtm|phtm.|shtm|shtm.)$\">"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_infector_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "touch('/"
        $s4 = "0640);"
        $s5 = "$str);"
        $s6 = "str_replace($old,"
        $s7 = "if(!preg_match('/parse_str/i',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_infector_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "= '<?php' . PHP_EOL . '$str = file_get_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_infector_011 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "false){ $display_content .=  $index_path . PHP_EOL;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_infector_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "@file_get_contents(\"http://\".$this->_tdsdomain.\":\".$this->_port.$selector, false, $context);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "@file_put_contents($dir.'/.htaccess',$htxt.'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_014 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "@touch($do"
        $s2 = "@fwrite($f,$index_new_con);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_infector_014_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "@touch($do"
        $s2 = "str_rot13(base64_encode($jpg_index_con));"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_infector_015 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "if (file_put_contents ($indexyol, $hecindex));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_infector_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "@file_put_contents($index,file_get_contents($bkindex));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_infector_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "$res.= $out;}@pclose($f);if(strstr($res,\"\\x70\\x68\\x70\\x20\\x69\\x6e\\x64\\x65\\x78\\x2e\\x70\\x68\\x70\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_infector_017_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "@touch($root.$auto, strtotime(\"-100 days\", time()));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$index_hide = base64_decode(str_rot13"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_infector_018_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "D1R5nz5IGxSDqxIQF21BnycFBKAUZGyQD0gWoT9HE"
    condition:
        $s0 and $s1
}

rule php_malware_infector_019 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "@touch($"
        $s2 = "0755, true);"
        $s3 = "base64_decode('bWtkaXI=');"
        $s4 = "strtotime(\"-111 days\", time()));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_020 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "add_action("
        $s6 = "@touch($"
        $s7 = "function makeInit()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_infector_021 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "copy($temp[$i].'/functions.php',$temp[$i]."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_infector_022 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "wp"
        $s3 = "(dirname(dirname(dirname(dirname(__FILE__))))))));"
        $s4 = "@shell_exec('chmod 666 '.$path);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_022_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "@include('/tmp'.'/wp-template.txt');"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_infector_022_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "wp"
        $s3 = "file_put_contents($d,'ip:');"
        $s4 = ")){$ip=@file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_022_04 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$name = base64_decode(\"Lmh0YWNjZXNz\");"
        $s4 = "$out = base64_decode(\"UmV3cml0ZUVuZ2luZSBPbiAKUmV3cml0ZVJ1bGUgXihbQS"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_infector_022_05 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "),implode(\" \",array_keys($_COOKIE)))){}"
    condition:
        $s0 and $s1
}

rule php_malware_infector_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google"
        $s6 = "my_mkdir($dir);"
        $s7 = "$filestr2 = preg_replace('#<\\?php#i', '<?php'. PHP_EOL"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_infector_024 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google"
        $s6 = "my_mkdir($dir);"
        $s7 = "curl_get_from_webpage($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_injector_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "new RegexIterator($x16, '/index\\.(php|html)/i', RecursiveRegexIterator::GET_MATCH)"
    condition:
        $s0 and $s1
}

rule php_malware_injector_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "$fp = @fsockopen(\"www.kishuran"
    condition:
        $s0 and $s1
}

rule php_malware_injector_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "\"wp-\".substr(str_shuffle(str_repeat(\"abcdefghijklmnopqrstuvwxyz\""
        $s2 = "\"wp-\".substr(str_shuffle(str_repeat(\"abcdefghijklmnopqrstuvwxyz\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_003_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = ".txt\";$t=\"\";if(preg_match_all("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "HTTP/1.0\\n\\n\""
    condition:
        $s0 and $s1
}

rule php_malware_injector_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "COOKIE"
        $s1 = "$_COOKIE[\"___"
    condition:
        $s0 and $s1
}

rule php_malware_injector_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "=0;echo('<!--'.$"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "exit(\"document.write"
    condition:
        $s0 and $s1
}

rule php_malware_injector_010 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "echo stripslashes($_POST['wproPreviewHTML']);"
    condition:
        $s0 and $s1
}

rule php_malware_injector_012 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "file_put_contents($name,base64_decode($_POST["
    condition:
        $s0 and $s1
}

rule php_malware_injector_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "$code_inject = '<?php eval"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "die(\"[!] Seems like ive bee there before"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_015 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "print '<script type=\"text/javascript\">window.location = \""
    condition:
        $s0 and $s1
}

rule php_malware_injector_016 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents($"
        $s2 = "$str = file_get_contents($url);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_018 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents($"
        $s2 = "$content2 = @file_get_contents($foc);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_019 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "*/\"SELECT option_value FROM $wpdb->options WHERE option_name='rss_"
    condition:
        $s0 and $s1
}

rule php_malware_injector_020 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$dir = getDir(getcwd().\"/db/\");"
    condition:
        $s0 and $s1
}

rule php_malware_injector_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "/*EngineWork*/if(!defined("
    condition:
        $s0 and $s1
}

rule php_malware_injector_021_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_reporting"
        $s1 = ";@ini_set(\"display_errors\",0);@error_reporting(0);echo base64_decode(\""
    condition:
        $s0 and $s1
}

rule php_malware_injector_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "ob_start_flush"
    condition:
        $s0 and $s1
}

rule php_malware_injector_024 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "break;}}}}if($c_==1){unset($_GET[$c1]);$c4=false;$c5='';$c6='';include '"
    condition:
        $s0 and $s1
}

rule php_malware_injector_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "=false;mkdir('cms');touch('cms',mktime"
    condition:
        $s0 and $s1
}

rule php_malware_injector_026 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if(count($_GET)>0){$c_=0;$c0=explode('&',$_SERVER['QUERY_STRING']);if(preg_match"
    condition:
        $s0 and $s1
}

rule php_malware_injector_027 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = ",9,1))],'-_,','+/=')));$"
    condition:
        $s0 and $s1
}

rule php_malware_injector_028 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "top:"
        $s3 = "<?php readfile("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_029 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$refer=getenv('HTTP_USER_AGENT');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_030 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents($"
        $s2 = "echo file_get_contents($remote_path"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "strpos($_SERVER[base64_decode"
        $s2 = "d3AtYWRtaW4="
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$hhg = file_get_contents(\"http://"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_033 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "icaiji_"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "<?php @include(\"\\x"
        $s2 = "\\x2e\\x6a\\x70\\x67\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_035 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "echo '<iframe src=\"' . $"
        $s2 = "if ((strcheck($useragent, 'Trident')"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "echo $file;"
        $s2 = "if(isset($_GET[\"lian\"]))"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "preg_match(\"/Location"
        $s3 = "' . $x0b . '?' . $pars . 'ua=' . '&ip=' . $bip . '&srv=' . base64_encode($_SERVER['SERVER_NAME']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_038 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo $content"
        $s3 = "$contents = file_get_contents($url);"
        $s4 = "$url = \"http:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_039 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once(plugin_dir_path(__FILE__) . \"readme.txt\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_040 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if((get_gate_data())||(get_gate_data())||"
        $s3 = "<div style=\"visibility: hidden !important;\">"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_040_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if((get_gate_data())||(get_gate_data())||"
        $s3 = "echo \"<div style="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_040_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "m=\\\"\\\"; for (i=0; i<s.length; i++) m+=String.fromCharCode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "get_writable_dirs(\".\");"
        $s4 = "FileWrite($randPath.\"/\".$fileName, base64_decode($fileData), $fileMode, $filePrefix)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_042 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "is_admin()) ) {echo"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_043 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "vhosts"
        $s4 = "$pos1"
        $s5 = "function getDirContents($dir)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_044 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "<param name=\"allowscriptaccess\" value=\"always\"></param><param name=\"menu\" value=\"false\"></param>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_injector_045 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "if(file_exists($filename) && is_writable($filename)) {"
        $s6 = /\$file\s*=\s*str_replace\(\$\w+\[\d\],\s*\$pattern_php,\s*\$file\)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_injector_046 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$xi = xp(xg(xu()));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_047 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "aW5pX3NldCgnZXJyb3JfbG9nJywgJy9kZXYvbnVsbCcpO3BhcnNlX3"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_048 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "if ((is_dir(\"wp-content/themes/$dir\")) AND ($dir !== \".\") AND ($dir !== \"..\"))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_049 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "chmod($file_index, 0777);"
        $s4 = "$start.\"Sinst Included"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_050 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@file_put_contents($path.\"/../wp-includes/load.php\", $load, FILE_APPEND)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_051 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "function get_data"
        $s4 = "get_data('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_052 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "return c.toString("
        $s3 = "|userAgent|"
        $s4 = "echo \"<noindex><script id="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_053 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "metaphone($l = $l.$license["
    condition:
        $s0 and $s1
}

rule php_malware_injector_054 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "){echo'WP_Error_Page_Not_Found '.\" </br>"
        $s4 = "file_get_contents('https://gist.githubusercontent"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_055 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "md5(microtime()"
        $s4 = "echo '<script>window.location.replace(\"'.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_056 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "file_put_contents($"
        $s4 = "| xargs grep -rl \"<head\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_057 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "<script>if (!!window.chrome && !!window.chrome.webstore){function"
        $s4 = "(){document.getElementById('popup-container').style.display='block';document.getElementById('"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_058 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "0777 & fileperms($"
        $s4 = "= '# \\* @category \\s*Mage#';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_059 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "; unlink(__FILE__); /*"
        $s2 = "),base64_decode(\\'PD9waHAgQGZp"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_060 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "@search_file($_SERVER['DOCUMENT_ROOT'].$dop,$file_to_search);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_061 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = ",\"<CODE>\",0);if($"
        $s5 = "if(!empty($_GET[\"del\"])) @unlink($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_062 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo\"im okey\";exit;elseif(isset($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_063 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "$handle = popen('/bin/ping'.$sendmail, 'r');"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_064 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "register_shutdown_function"
        $s1 = "}!==false&&preg_match(\""
        $s2 = "]});}}}@ob_start();@register_shutdown_function("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_065 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "@json_decode(@file_get_contents(content_file), true);"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_injector_066 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = /\$[\w]+[\s]*=[\s]*strpos\(\$[\w]+[\s]*,[\s]*\$[\w]+\);[\s]*if[\s]*\(\$[\w]+[\s]*===[\s]*false\)[\s]*\{[\s]*unlink\(.[\S]+.\);[\s]*\$[\w]+[\s]*=[\s]*file_get_contents/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_injector_067 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "function __construct()"
        $s3 = /class [\w]+[\s]*\{[\s]*function __construct\(\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*\$this->[\w]+\(\$this->[\w]+\);[\s]*\$[\w]+[\s]*=[\s]*\$this[\s]*->[\w]+\(\$this->[\w]+\(\$[\w]+\)\);[\s]*\$[\w]+[\s]*=[\s]*\$this->[\w]+\(\$[\w]+\);[^\}]+\$[\w]+\[[\d]+\]\);[\s]*\}[^\x02]+var \$[\w]+[\s]*=[\s]*['\"][^;]{200,}['\"];[\s]*\}[\s]*new [\w]+\(\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_068 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "@set_time_limit(0);error_reporting(0);"
        $s5 = "PElmTW9kdWxlIG1vZF9yZXdyaXRlLmM+DQpSZXdyaXRlRW5naW5"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_injector_069 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "Mage_Shell"
        $s3 = /if[\s]*\([\s]*isset[\s]*\([\s]*\$_POST\[.[\w]+.\][\s]*\)[\s]*\)[\s]*echo[\s]*\$_POST\[.[\w]+.\][\s]*\([\s]*\$_POST\[.[\w]+.\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_071 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "if (!isset($_REQUEST["
        $s4 = "new RecursiveIteratorIterator(new RecursiveDirectoryIterator($"
        $s5 = "file_put_contents($file->getPathname()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_072 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "ignore_user_abort(true);"
        $s6 = "|| !file_exists($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_injector_073 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "Z2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZG"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_injector_074 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]."
        $s5 = /file_put_contents\(\$_SERVER\[.DOCUMENT_ROOT.\]\...wp-[\w]+[^,]+,[\s]*base64_decode\(.[^\)]{1000,}\)+;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_074_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]."
        $s5 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"].base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_075 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "wp_remote_retrieve_body(wp_remote_get("
        $s4 = "PHP_INT_MAX"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_076 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "if (preg_match(\"/google/i\", $hostIp) || preg_match(\"/google/i\", $hostRealIp)){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_077 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = ")])AND!$GLOBALS["
        $s3 = ")])AND empty($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_078 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "PHNjcmlwdCBzcmM9Imh0dHBzOi8v"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_079 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "file_put_contents($_SERVER[\"\\x44\\x4f\\x43\\x55\\x4d\\x45\\116\\124\\137\\x52\\x4f\\117\\124\"]"
        $s4 = "preg_replace(\"\\57\\x3c\\41\\x2d\\55"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_080 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "tidioelements.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_081 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "if(isset($_GET["
        $s5 = "pack(\"H*\", '"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_082 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "usleep("
        $s3 = ",document.body||document.documentElement)</script><script src='https:"
        $s4 = "setAttribute('data-zone',"
        $s5 = ");})(document.createElement('script'),'http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_injector_083 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "('',"
        $s1 = /\$\w+.=.\\"\/\w+\([^=]*=.\w+\(\$\w+\[\d+\],.\$\w+\[\d+\],.''\);[^\}]*\}'.\..\$\w+.\..'\/\/'\)\);/
    condition:
        $s0 and $s1
}

rule php_malware_injector_084 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "echo @file_get_contents('index.html.bak"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_injector_085 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "PD9waHAKaWYoaXNzZXQoJF9HRVRbInNleHgiXSkmJiRfR0VUWyJzZXh4Il09PSJzZWMiKXsgZWNobydBcGFjaGUgSGVjJzsgfQ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_086 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "wp_mail($email, $subject, base64_decode(\"aHR0c"
        $s3 = "@mail($email, $subject, base64_decode(\"aHR0c"
        $s4 = "$message = self::prettifyMail($subject, $message, base64_decode(\"aHR0c"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_087 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]."
        $s5 = "pastebin"
        $s6 = "base64_decode(file_get_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_injector_088 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "!file_exists($"
        $s5 = "$_COOKIE') == false) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_089 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = "add_filter( 'pre_option_blogname', '"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_090 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "return $output;"
        $s4 = "touch(dirname($htaccess_path)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_092 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "%3Cscript%3E%3B%28function"
        $s4 = "xmlrpc.php|wp-includes"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_093 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "str_replace('</head>', '<script type"
        $s6 = "strrpos($path,'public_html"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_malware_injector_095 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "GLOB_ONLYDIR);"
        $s6 = "RewriteRule ^$"
        $s7 = /if[\s]*\(strstr\(\$[\w]+,[\s]*.RewriteRule/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_injector_096 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "file_get_contents(base64_decode($_GET["
        $s6 = "preg_replace(\"|(<body"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_injector_097 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "require('wp-content/coment');"
    condition:
        $s0 and $s1
}

rule php_malware_injector_098 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "chmod($path."
        $s4 = "$checkhtaccess = file_get_contents($path.\"/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_099 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "file_put_contents($"
        $s4 = "str_replace(\"://\",\"@\",$"
        $s5 = "if($dirname == \"public_html\" || $dirname == \"www\" || $dirname == \"htdocs\") {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_100 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "imagecreate(1,1); imagesetpixel($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_101 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "base64_decode($"
        $s4 = "wp_initialize_the_theme_message(); exit();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_102 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$conte"
        $s5 = "echo \"<b>Script Detected --- 1</b>\\n\";"
        $s6 = "$file_contents = str_replace($searchfor,\"\",$content);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_injector_103 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$root"
        $s3 = "$x_domains[array_rand($x_domains)] ."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_103_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$root"
        $s3 = "<?php unlink(__FILE__); $root =  $_SERVER[\"DOCUMENT_ROOT\"];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_105 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "data:text/javascript;base64"
        $s2 = "CiAgICAoZnVuY3Rpb24oKSB7CiAgICB2YXIgbmFtZSA9ICdf"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_106 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "function("
        $s3 = "createElement('script');"
        $s4 = "head.appendChild(s);})(document);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_107 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = ":\"aWYoIWNsYXNzX2V4aXN0"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_108 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "echo chr(60).chr(115).chr(99).chr(114).chr(105).chr(112).chr(116)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_109 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "LUrHEoRTDv0al703GGXtiZxm5rJSzjnz9Qu2p6aAprullvT0"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_110 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "JE8wME9PMDAwPSJxT2FSamJ2SHdZbG1ucGRV"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_111 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "if (gettype($data) == 'array') return array_map(\"trimming\", $data);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_112 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$content = explode($end, $temp[1], 2);"
        $s4 = "file_put_contents('.htaccess"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_injector_113 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "chr(93).chr(41).chr(59).chr(100).chr(111).chr(99).chr(117).chr(109).chr(101).chr(110).chr(116).chr(46).chr(103).chr(101).chr(116).chr(69).chr(108).chr(101).chr(109).chr(101).chr(110).chr(116).chr(115).chr(66).chr(121).chr(84).chr(97).chr(103).chr(78).chr(97).chr(109).chr(101).chr(40).chr(83).chr(116).chr(114).chr(105).chr(110).chr(103).chr(46).chr(102).chr(114).chr(111).chr(109).chr(67).chr(104).chr(97).chr(114).chr(67).chr(111).chr(100).chr(101).chr(40)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_114 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "PHP_EOL . $str, FILE_APPEND);}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_injector_115 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rror_"
        $s3 = "@file_put_contents($do.\"index.php\","
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_116 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "file_get_contents(str_rot13(\"uggcf"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_117 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "echo"
        $s2 = "@system("
        $s3 = "file_put_contents($"
        $s4 = "ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoU3RyaW5nLmZyb21DaGFyQ29kZSg"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_118 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "script.src"
        $s4 = "Nagishly.init"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_injector_gen_022 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "include("
        $s2 = "@include('php5.php');"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_gen_023 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "if (strpos($USER_AGENT, \"slurp\")) $robot = 1;"
    condition:
        $s0 and $s1
}

rule php_malware_injector_gen_024 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "strpos($_SERVER['HTTP_REFERER'], 'ie=utf-8')"
    condition:
        $s0 and $s1
}

rule php_malware_injector_gen_025 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "$file_contents = curl_exec($ch);"
        $s2 = "@package WordPress"
        $s3 = "$file_contents = curl_exec($ch);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_injector_gen_027 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "print_r('<script "
    condition:
        $s0 and $s1
}

rule php_malware_injector_gen_028 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "'http://pastebin.com/raw.php?i="
    condition:
        $s0 and $s1
}

rule php_malware_injector_gen_029 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "&& !($_SESSION[\"__default\"][\"user\"]->id)) {echo \""
        $s2 = "<script language=JavaScript src=/"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_injector_gen_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "function GetFileContent($url)"
        $s3 = "if($_SERVER['QUERY_STRING']!=\"\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_jquery_min_php_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "echo base64_decode(\"PHNjcmlwdD4=\")."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_keybase_panel_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>KeyBase Web Panel"
    condition:
        $s0 and $s1
}

rule php_malware_keylogger_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "function chmnr_klgr_enqueue_script()"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_letcaro_x24hr_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "$document->_scripts[gzuncompress(base64_decode('e"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_letcaro_x24hr_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "gzuncompress(base64_decode('eJzT1"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_lodat_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "/wp-includes/lo.dat"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_loginstealer_001 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "mail("
        $s3 = "Mage_Admin"
        $s4 = "$_SERVER['SERVER_NAME'];"
        $s5 = /\$user->getId\(\)\) \{[\s]*\$[\w]+[\s]*=[^(]+\$_SERVER\[.SERVER_NAME.\];/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_loginstealer_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "public function processLogin()"
        $s2 = "@mail($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_loginstealer_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('VY9Ra8IwEMff"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_loginstealer_003_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('VY/dasJAEIXv"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_loginstealer_003_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(\"VZBvS8MwEMbf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_loginstealer_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "Rez by [ bajatax"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_loginstealer_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "domain"
        $s1 = "data: 'ip=localhost&login=' + encodeURIComponent(login.val()) + '&password=' + encodeURIComponent(password.val()) + '&url="
    condition:
        $s0 and $s1
}

rule php_malware_loginstealer_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "aHR0"
        $s2 = "['password']).\"&url=\".base64_encode"
        $s3 = "curl_setopt ($ch, CURLOPT_TIMEOUT, $time_out);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_loginstealer_007_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "aHR0"
        $s2 = "['password']).\"&url=\".base64_encode"
        $s3 = ".=\"&p=\".base64_encode($credentials['password']).\"&url=\".base64_encode($_SERVER['HTTP_HOST']).\"&ip=\".base64_encode($_SERVER[\"REMOTE_ADDR\"]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_loginstealer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "array(\"VerifyMethod\" => \"safe_verify\" , \"VerifyToken\" => "
        $s5 = "== \"encrypt\" ?"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_loginstealer_008_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "array(\"VerifyMethod\" => \"safe_verify\" , \"VerifyToken\" => "
        $s5 = /public\s+function\s+\w+\((\$\w+,\s+){3}\$\w+\)\s+\{\s+(\$\w+\s+=\s+base64_encode\(\$\w+\);\s+){4}\$\w+\s+=\s+base64_decode\(\\"\w+={1,2}\"\);\s+\$\w+\s+=\s+(\$\w+\s+\.\s+){4,6}\$\w+;[^\}]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_loginstealer_008_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "array(\"VerifyMethod\" => \"safe_verify\" , \"VerifyToken\" => "
        $s5 = "@gzuncompress(base64_decode(str_rot13($hash.$salt."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_loginstealer_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "fwrite($fp, $logdetails);"
        $s7 = "date(\"F j, Y, g:i a\") . ': ' . '<a href=http://www.ip-score.com/checkip/'.$ip.' target=_blank>'.$_SERVER['REMOTE_ADDR'].'</a> - '.$hostname.' - '.$user_agent.'<br>';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_loginstealer_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "echo \"$target/wp-login.php#$user&$pass#\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_loginstealer_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "g\";$erp(0);$gznss=\"g"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_loginstealer_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "strpos($row3[0], '@') !== false) { echo base64_encode($row3[0])  . \"\\r\\n\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_loginstealer_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$counts = array_count_values(file(\"./wp-includes/"
        $s4 = "file_put_contents(\"./wp-includes/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_loginstealer_013_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$counts = array_count_values(file(\"./wp-includes/"
        $s4 = "(isset($counts[$_SERVER['REMOTE_ADDR']]) && $counts[$_SERVER['REMOTE_ADDR']] >"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_loginstealer_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "$fp = fopen($file, \"a\");"
        $s3 = "$data .= $_POST['password'] . \"\\n\";"
        $s4 = "$data .= gethostbyaddr($_SERVER['REMOTE_ADDR']) . \"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_loginstealer_015 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "likes.php?new='.$access.'&id='.$userid.'&next='.$encode.'\" />';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_loginstealer_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "curl_init(base64_decode("
        $s3 = "=bin2hex($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_lokibot_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if(!defined('IN_LOKI')) die(\"File not found.\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "curl_setopt($ch, CURLOPT_POSTFIELDS, $post77);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "new Mage_Checkout_Block_Onepage_Billing;"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_002_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "$this->sendCcNumber();"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_002_03 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "$this->ccNumberProccess();"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_002_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "or die(\"Error\");"
        $s3 = "fopen(getcwd()"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_002_05 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "or die(\"Error\");"
        $s3 = "$data3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_002_06 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "$data5 = $this->"
        $s3 = "'a+');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_002_07 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "Mage_Checkout_Block_Onepage_Billing;"
        $s3 = "new Mage_Checkout_Block_Onepage_Billing"
        $s4 = /public function [\w]+\(\)[\s]*\{[\s]*(\$[\w]+[\s]*=[^;]+;[\s]*)*\$[\w]+[\s]*=[\s]*new Mage/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_002_08 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "$this->sucuri_encrypted();"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_002_09 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "md5($_SERVER['HTTP_HOST']);"
        $s3 = ".= $subkey(\"Q0MgOiA=\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "$url = 'http://magentoupdateservices.com"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(@"
        $s2 = "@eval(@str_rot13(@gzinflate(@str_rot13(@base64_decode(\"nZV4i9pAFIY/SvA"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "$_SERVER['HTTP_USER_AGENT'];"
        $s3 = "($customer->authenticate($username, $password))"
        $s4 = "else { $country_code = $country_codes;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "class Mage_Checkout_Model_Type"
        $s2 = "base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "class Mage_Checkout_Model_Type"
        $s2 = "strtr"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_009 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "class Mage_Checkout_Model_Type"
        $s2 = "strrev"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_010 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "class Mage_Checkout_Model_Type"
        $s2 = "gzinflate"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_011 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "class Mage_Checkout_Model_Type"
        $s2 = "$data['cc_number']"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_018 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "Visbot"
        $s3 = "base64_decode('PD9QSFAgLyoqKiBNYWdlbnRvKiogTk9USUNFIE9GIExJ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_019 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "Visbot"
        $s2 = "../app/Mage.php"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_020 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "class Mage_Checkout_Model_Type"
        $s2 = "eval"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if(preg_match("
        $s2 = "@base64_encode(serialize($_REQUEST).\"--\".serialize($_COOKIE"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "|$data7|"
        $s3 = "|$data8|"
        $s4 = "|$data3|"
        $s5 = "@file_get_contents"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_022_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "|$data7|"
        $s3 = "|$data8|"
        $s4 = "|$data3|"
        $s5 = "$object = new Mage_Checkout_Block_Onepage_Billing;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "$data=validateDataFromStr($encrypt,$data);"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_024 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "$ARINFO = $_POST;"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_026 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "$data=json_encode(array('request'=>$_REQUEST"
        $s3 = "$data=base64_encode($data);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_029 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "* @package     Mage_Checkout"
        $s3 = "eval(gzinflate(base64_decode(str_rot13(strrev("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_030 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "/js/conf.js\""
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_031 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "setcookie(\"SESSIID\", $rand,time()+3600);"
        $s3 = "http_build_query(array('utmp'=>$id,'utma'=>$key,'data'=>$data"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_032 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "if (preg_match('/report_search_grid/', base64_decode($_REQUEST['___directive'])))"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_033 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "CWlmIChpc3NldCgkZGF0YVtiYXNlNjRfZGVjb2RlKCdZMk5mYm5WdFltVnkn"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_034 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "file_put_contents($ajax,base64_encode"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_035 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "eval(base64_decode(strrev($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "-BEGIN CERTIFICATE-"
        $s3 = "JPEG-1.1"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "_encode(var_export($_POST['billing'], true)).PHP_EOL, FILE_APPEND);} if (array_key_exists('payment', $_POST)) {file_put"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_039 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "post['cc_cvv2'].\"|\".$this->request->post['cc_number'];mail(\""
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_040 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "curl_setopt($ch,CURLOPT_URL, $url);"
        $s3 = "public function saleCreated(Varien_Event_Observer $observer)"
        $s4 = "$url = 'http:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_042 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "echo '~mail|'.$row['email'].\"|\".$row['value'].\"<br/>\\n\";"
        $s2 = "echo \"<b>Number of cc quote payment:</b> \".strval($count[0]).\"<br/>\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_043 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "@serialize($_POST).\"--\".@serialize($_COOKIE) ).\"\\n\", FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_044 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "curl_post_async(base64_decode(\"http"
        $s3 = "array(\"q\"=>base64_encode(json_encode($data1))));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_044_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "function curl_post_async($url, $params)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_045 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "<th >CC_OWNER"
        $s3 = "print_data(base64_decode($maildump))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_048 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "var|x44|x4A"
        $s4 = "5fd2x6"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_051 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "file_put_contents("
        $s3 = "if(isset($_POST['payment']['cc_number']) && $_POST['payment"
        $s4 = "$_POST['billing']['email'].\"\\r\\n\", FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_051_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$id=base64_encode("
        $s4 = "file_get_contents($url, false, $context);"
        $s5 = "$data=base64_encode(serialize(array('request'=>$_REQUEST,'ip'=>$_SERVER['REMOTE_ADDR'],'ua"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_052 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "$info->getCcOwner();"
        $s3 = "private function _storeInfos($file ="
        $s4 = "private function _storeInfos($file ="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_052_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "$info->getCcOwner();"
        $s3 = "private function _storeInfos($file ="
        $s4 = "$this->_storeInfos();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_053 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "file_put_contents($container, \"\\n\".$this->encryptSession(json_encode($data)), FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_054 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "getCcNumber();"
        $s4 = "Mage::getSingleton("
        $s5 = "$tres = file_get_contents(\"$rcpt?data=$res&domain=$dmn\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_055 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "base64_encode(json_encode($"
        $s3 = "FILE_APPEND);"
        $s4 = "file_put_contents($_SERVER[\"DOCUMENT_ROOT\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_055_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "'info' => base64_encode($dvs),"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_055_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "base64_encode(json_encode($"
        $s3 = "FILE_APPEND);"
        $s4 = "substr_replace($date['cc_number'],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_056 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_Checkout_Model_Type_Onepage"
        $s2 = "','PaymentReport',$datasend);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_057 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents('/tmp/out1', var_export($_REQUEST"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_058 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "getQuote()"
        $s4 = "stream_context_create(array("
        $s5 = "stream_context_create(array('http'=>array('timeout"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_058_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "$logger = @$_REQUEST"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_060 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode(str_rot13(strrev('==jQAiL8PdIhRn6ElHerQmZgP"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_061 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = " * @category   Mage"
        $s3 = "base64_encode(serialize"
        $s4 = "$_SERVER['REQUEST_URI'],\"onestepcheckout\")!==FALSE && $_POST[\"billing\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_062 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = ".php', false, $context);"
        $s3 = "die('ok"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_063 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "$situs = $evil_destination"
        $s2 = "if(preg_match(\"#\".$ip_korban.\"#\", $preg_view"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_063_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "$situs = $evil_destination"
        $s2 = "$paypal_fake = curl_exec($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_064 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "$checkout = Mage::getSingleton('checkout/session')->getQuote();"
        $s2 = "private function _sendData("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_065 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $w0 = "post_content' => str_replace($string_to_test, '', $post->post_content)"
        $s3 = ".split(\"\").reverse().join(\"\"))</script>"
    condition:
        $s0 and $s1 and $s2 and $s3 and not $w0
}

rule php_malware_magentoccstealer_066 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "if(isset($_POST['payment']) && isset($_POST['payment']['cc_exp_year'])"
        $s3 = "billing = Mage::getSingleton"
        $s4 = "write($f, $payment['cc_number'].\"|\".$payment"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_066_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "if(isset($_POST['payment']) && isset($_POST['payment']['cc_exp_year'])"
        $s3 = "billing = Mage::getSingleton"
        $s4 = /if\(isset\(\$_POST\[.payment.\]\)\s*\&\&\s*isset.\$_POST..payment.\]..cc_exp_year[^;]*;\s*\$\w+\s*[^:]*::getSingleton\(.checkout\/session.\)\-\>getQuote\(\)\-\>getBillingAddress\(\)\-\>getData\(\);\s*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_067 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "private function _saveInfos()"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_068 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = " * @category   Mage"
        $s3 = "mail("
        $s4 = "$pay.base64_decode($_COOKIE['__bill']));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_068_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$pay.base64_decode(\\$_COOKIE['__bill']));"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_069 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "version"
        $s2 = "encode"
        $s3 = "serialize($_COOKIE) ).\"&host=\".$_SERVER[\"HTTP_HOST\""
        $s4 = "exec(\"curl --data"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_069_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "version"
        $s2 = "encode"
        $s3 = "serialize($_COOKIE) ).\"&host=\".$_SERVER[\"HTTP_HOST\""
        $s4 = /preg_match\([^\)]*base64_decode[^,]+,[^\)]+\$_/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_069_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "implode("
        $s2 = "($_"
        $s3 = "implode(\"_\","
        $s4 = "ini_set('display_errors', 0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_069_05 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "implode("
        $s2 = "($_"
        $s3 = "implode(\"_\","
        $s4 = /\$[\w]+[\s]*=[\s]*implode\(\"_\",[\s]*array\([\"str\.]{4,}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_069_06 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "implode("
        $s2 = "($_"
        $s3 = "if(!is_wp_error($user)){"
        $s4 = "implode(base64_decode('Xw=="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_069_07 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "version"
        $s2 = "encode"
        $s3 = "serialize($_COOKIE) ).\"&host=\".$_SERVER[\"HTTP_HOST\""
        $s4 = /@exec\(\"curl/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_070 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "payment_form\" method=\"POST\" action=\"http"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_072 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "$_COOKIE[\"\\x66\\162\\157\\156\\x74\\x65\\x6e\\x64\"]; goto"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_074 : malware
{
    meta:
        sig_type = "STR_STOP"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "Mage"
        $s3 = ")));__halt_compiler();aWY"
        $s4 = "=file(__FILE__);eval(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_075 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "die("
        $s3 = ",);}}$GLOBALS["
        $s4 = ")]=hex2bin("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_076 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "mail("
        $s3 = "@mail($_post,$billing->getCountry().\" Credit Card"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_077 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "trim(base64_decode("
        $s4 = "array('app/Mage.php','lib/Varien/Autoload.php"
        $s5 = "@file_put_contents('/tmp"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_078 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "$send"
        $s3 = "\"datapost=\".($datasend);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_079 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "OnepageController.php\",base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_080 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST["
        $s1 = "fopen('ecctest.txt', 'a+');"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_081 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ".on(\"click\", \"#p_method_ccpayment"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_082 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "$post = \"firstname=\".$info->firstname.\"&lastname=\".$info->lastname.\"&street1="
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_083 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "/app/etc/local.xml"
        $s2 = "mysql_query(\"SELECT * FROM `mg_sales_flat_quote_address` WHERE `quote_id` = \".$"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_083_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "<?php echo htmlspecialchars(@$_REQUEST["
        $s2 = "<title>Sage Pay -"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_083_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "'.$quoteObj->getBaseGrandTotal().'&url='.urlencode("
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_083_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "$quoteObj =  Mage::getSingleton('checkout/session')->getQuote();"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_083_05 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = /\$\w+\s*=\s*Mage::GetBaseDir\(\)\s*;\s*require\s*\$\w+\.'[\/\w_-]+\.(php|js|asp)'\s*;/
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_084 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "return;}}}document["
        $s2 = "=decodeURI("
        $s3 = "\\x64\\x61\\x74\\x61':{'\\x66\\x72\\x6f\\x6e\\x74\\x65\\x6e\\x64':encData},"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_086 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = ".$this->request->post['cc_number'].\"|\".$_SERVER['HTTP_HOST'];$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_087 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "file_get_contents("
        $s2 = "getenv('REMOTE_ADDR')"
        $s3 = "\".$data['cc_type'].\" \".$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_088 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "mail("
        $s2 = "$data .= \"$key -- $item\\r\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_089 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = ".\"&ccname=&ip=\".$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_090 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"YES!!!\";"
        $s5 = "unlink("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_091 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "Update DB (Savecc)' => base64_decode('VVBEQVRFIGBjb3JlX2NvbmZpZ19kY"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_092 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_Checkout_Model_Type_Onepage"
        $s2 = "eval"
        $s3 = /\$[\w]+[\s]*=[\s]*.[^;]{200}[^;]+;[\s]*eval/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_093 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "* @package     Mage_Checkout"
        $s3 = "'content' => @http_build_query($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_096 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "&site='.$_SERVER['HTTP_HOST"
        $s4 = "CURLOPT_URL,base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_097 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "time().'|'.$data['cc_number']"
        $s3 = "$data['cc_number']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_097_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "time().'|'.$data['cc_number']"
        $s3 = "$this->testReview($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_098 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "JG9iamVjdCA9IG5ldyBNYWdlX0NoZWNrb3V0X0Jsb2NrX09uZXBhZ2VfQmlsbGluZzs"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_099 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = "],_0x"
        $s4 = "\"\\x2F\\x69\\x6E\\x64\\x65\\x78\\x2E\\x70\\x68\\x70\\x3F\\x72\\x6F\\x75\\x74\\x65\\x3D\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74\\x2F\\x63\\x68\\x65\\x63\\x6B\\x6F\\x75\\x74\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_100 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "(url, dataobject, ok, err, timeout="
        $s2 = "const new_cook = !document.referrer || document.referrer.includes(location.host)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_102 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "base64_encode(preg_replace('@\\.@','_',$_SERVER['HTTP_HOST"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_104 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "('',$_POST,0);"
        $s3 = "hostname'=>$_SERVER['HTTP_HOST'],'sub'=>"
        $s4 = "time().'-'.crc32(uniqid()),time()+"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_105 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "curl_init();curl_setopt($ch,CURLOPT_URL, base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_106 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "@base64_encode(serialize($_REQUEST).\"--\".serialize($_COOKIE)).\"\\n\", FILE_APPEND);"
        $s3 = "if(@preg_match(\"/checkout"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_106_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "@base64_encode(serialize($_REQUEST).\"--\".serialize($_COOKIE)).\"\\n\", FILE_APPEND);"
        $s3 = "@base64_encode(serialize($_REQUEST).\"--\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_107 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_Checkout_Model_Type_Onepage"
        $s2 = "eval"
        $s3 = "eval(gzinflate(base64_decode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_109 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "if(md5($password)"
        $s3 = "date('h:i:s a m/d/Y', time());"
        $s4 = "Mage::getSingleton('adminhtml/url')->getUrl('adminhtml');"
        $s5 = "shell_exec($username); echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_109_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "if(md5($password)"
        $s3 = "date('h:i:s a m/d/Y', time());"
        $s4 = "Mage::getSingleton('adminhtml/url')->getUrl('adminhtml');"
        $s5 = "$_SERVER['REMOTE_ADDR'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_111 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "$_cur = getcwd();"
        $s3 = "fwrite($fp, $username.\" : \".$password.\"\\n\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_112 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "($this->_dispatch.$this->_action.$this->_content)(\"http"
        $s3 = "@$s_func("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_112_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "($this->_dispatch.$this->_action.$this->_content)(\"http"
        $s3 = "$results = ($this->_dispatch"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_113 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "base64_encode(utf8_encode(implode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_114 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = ",$strDebug.\"\\n\",FILE_APPEND);}"
        $s4 = "]))&&(isset($_POST))&&(count($_POST)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_116 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "@eval(base64_decode('aWYoQHByZWdfbWF0Y2goIi9jaGVja291dHxvbmVwYWdlf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_117 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "'1337"
        $s3 = "naem"
        $s4 = "base64_encode(json_encode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_117_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "'1337'"
        $s3 = "|| $_POST['payment']['method'] === $"
        $s4 = "$_COOKIE['control_hash']);"
        $s5 = "curl_setopt($ch,CURLOPT_POSTFIELDS, http_build_query($ok));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_117_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "naem"
        $s2 = "'1337'"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_119 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "|onestepcheckout|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_123 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_Checkout_Model_Type_Onepage"
        $s2 = "eval"
        $s3 = "Y2Nf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_124 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "$_COOKIE['currentcvv"
        $s2 = "(openssl_public_encrypt($data, $encrypted, $this->pubkey)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_125 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "fwrite($handler, $ip.\"|payment[cc_owner]|\".$_POST['payment']['cc_owner'].\"|\".time().\"\\n\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_126 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "if(!isset($_COOKIE["
        $s5 = /if\(!isset\(\$_COOKIE\[.adminhtml.\]\)\)[\s]*(\{)?[\s]*echo[\s]*file_get_contents\(/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_127 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "mail("
        $s2 = "if(empty($request->getPostValue('Custom"
        $s3 = "$authParam = $request;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_127_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "mail("
        $s2 = "if(empty($request->getPostValue('Custom"
        $s3 = "$this->getAuthenticate($authParam);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_127_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "mail("
        $s2 = "if(empty($request->getPostValue('Custom"
        $s3 = "$auth_url = base64_encode($this->getCustomer()->getEmail());"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_127_04 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "mail("
        $s2 = "if(empty($request->getPostValue('Custom"
        $s3 = "$auth_url = base64_encode ("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_128 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "/app/etc/local.xml"
        $s2 = "<td>password</td>"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_129 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "MAINLOG_PATH"
        $s2 = "@touch(strrev("
        $s3 = ")->jsonEncode(array('cookies'=> Mage::getSingleton("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_130 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "(strpos($_SERVER[\"REQUEST_URI\"], \"checkout\")"
        $s5 = "echo file_get_contents(base64_decode(\"aH"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_131 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "@die (shell_exec($username));"
        $s3 = "base64_encode(\"{\\\"referer"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_131_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "@die (shell_exec($username));"
        $s3 = "if(md5($password)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_132 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "adminhtml/url"
        $s3 = "->getResource()->recordLogin($"
        $s4 = "curl_init(base64_decode("
        $s5 = "_init(base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_132_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "adminhtml/url"
        $s3 = "->getResource()->recordLogin($"
        $s4 = "curl_init(base64_decode("
        $s5 = "if(md5($password"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_132_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "adminhtml/url"
        $s3 = "->getResource()->recordLogin($"
        $s4 = "curl_init(base64_decode("
        $s5 = "token_hash',base64_encode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_133 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "json_encode($_POST);"
        $s4 = "header('HTTP/1.1 307 Temporary Redirect');"
        $s5 = "file_put_contents(\"error\", $error_info, FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_134 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "Mage::"
        $s4 = "@file_get_contents('http"
        $s5 = /@file_get_contents\('https?:..[\d]+/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_134_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "Mage::"
        $s4 = "(@$_POST['payment']['cc_number']"
        $s5 = "array('cc'=>$_POST['payment']['cc_number'],'mo'=>$_POST['payment']['cc_exp_month']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_136 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "$update($encode, $timestamp, $mySQL);"
        $s3 = "$mySQL .= $_SERVER['HTTP_REFERER'].\"\\n\".$_SERVER['SCRIPT_FILENAME'].\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_136_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "$update($encode, $timestamp, $mySQL);"
        $s3 = "ini_set('display_errors',0);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_138 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".=\"\\x"
        $s2 = ".=\"\\1"
        $s3 = ");@$"
        $s4 = "();}else{$"
        $s5 = ");};if(function_exists($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_141 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "])) && ($_SERVER[$"
        $s3 = "@curl_exec($"
        $s4 = ", CURLOPT_HTTPHEADER, array(\"$"
        $s5 = "+= ord(substr($"
        $s6 = "* ord(substr($"
        $s7 = "]) ? $_SERVER[$"
        $s8 = "echo (@$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_malware_magentoccstealer_142 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "base64_decode($"
        $s3 = "$data .= \"exp: \".$payment->getCcExpMonth().\"/\".$payment->getCcExpYear().\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_144 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "IP Info"
        $s3 = "$username "
        $s4 = "curl_setopt($curl, CURLOPT_URL, $getip);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_146 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "@file_get_contents('php://input');if(!empty($"
        $s4 = "@file_get_contents('php://input');if(!empty("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_146_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "@file_get_contents('php://input');if(!empty($"
        $s4 = "ini_set('display_errors', 0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_147 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "* @category    Mage"
        $s3 = "*/.')'/*"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_149 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = /=\s*'';\s*for\s*\(/
        $s3 = "Year':null,'CVV':null,'Gate"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_150 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$state->setAreaCode('frontend');"
        $s2 = "= array('cc'=>@$_REQUEST['ccn'],'mo'=>@$_REQUEST['ccm'],'ye'=>@$_REQUEST"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_151 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "file_get_contents('php://input"
        $s5 = "fwrite($handle, date(\"Y-m-d H:i:s\").$split.$firstname.$split.$lastname.$split.$street.$split.$city."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_151_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "if($_GET['hola'] !== 'hello') { die(); }"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_152 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ", 0777, true);"
        $s4 = "if ((strpos($_SERVER['REQUEST_URI'], 'checkout/onepage')) or (strpos($_SERVER"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_153 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "function saveNumber()"
        $s3 = "$this->saveNumber();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_153_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "function saveNumber()"
        $s3 = "(isset($_POST[\"payment"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_153_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "function saveNumber()"
        $s3 = "if (openssl_public_encrypt($data, $encrypted"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_154 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "String.fromCharCode("
        $s4 = "function|setInterval|x49'.split('|'),"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_155 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = "adminhtml/url"
        $s3 = "$username = $username;"
        $s4 = "$file = @fopen($_SERVER['DOCUMENT_ROOT'].'/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_156 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_get_contents('php://input');"
        $s4 = "cc_cid = strvaL(rand(100,999));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_157 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "public function validate_request($request)"
        $s5 = "@$validate('$input', $key_data);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_157_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "public function validate_request($request)"
        $s5 = "$this->validate_request($_REQUEST);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_158 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "pallete($mage_"
        $s2 = "chr(hexdec($col"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_159 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = ")), false, stream_context_create(array('http' => array('method"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_160 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "Mage::"
        $s4 = "strpos($_SERVER[\"REQUEST_URI\"], \"checkout\") && !isset($_COOKIE[\"adminhtml\"])"
        $s5 = "stream_context_create(array(\"ssl\"=>array(\"verify_peer\"=>false,\"verify_peer_name\"=>false"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_161 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "echo implode(array_map(\"chr\", array(60,115,99,114,105,112,116,62,108,101,116,32,95,115"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_162 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$yolo=$CARD .\"|\".$OCARD .\"|\".$CARDNO"
    condition:
        $s0 and $s1
}

rule php_malware_magentoccstealer_163 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "hex2bin"
        $s4 = "json_encode($validate_data);"
        $s5 = "license_token=\".base64_encode(bin2hex($data"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_163_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "hex2bin"
        $s4 = "json_encode($validate_data);"
        $s5 = "($validate_data,\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_164 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "if(isset($_POST[\"statistics_hash\"])){@file_get_contents(base64_decode('aHR0"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_165 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "bin2hex(json_encode("
        $s3 = "\"\";if(isset($_POST['billing'])){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_165_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "bin2hex(json_encode("
        $s3 = "){$string .= chr(hexdec($col[$i]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_166 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "curl_init("
        $s4 = "$url = base64_decode('aHR0"
        $s5 = "if(isset($_POST['ccard_ccnumber']) || isset($_POST['customer_session"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_167 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "curl_init("
        $s4 = "$url = base64_decode('aHR0"
        $s5 = "$base = $base('PHNjc"
        $s6 = "'1' => base64_encode(json_encode($_POST))"
        $s7 = "function destroy()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_magentoccstealer_167_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST)"
        $s3 = "curl_init("
        $s4 = "$url = base64_decode('aHR0"
        $s5 = "$base = $base('PHNjc"
        $s6 = "'1' => base64_encode(json_encode($_POST))"
        $s7 = "register_shutdown_function(array($this, 'destroy'));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_magentoccstealer_168 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['SERVER_NAME']"
        $s2 = "$server_output = curl_exec"
        $s3 = "\".$srv.\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_169 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "=String.fromCharCode(127);var _0x"
        $s3 = ")})(\""
        $s4 = ").join(_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_169_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "=String.fromCharCode(127);var _0x"
        $s3 = ")})(\""
        $s4 = ";if(isNaN(_0x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_170 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "getCcNumber();"
        $s4 = "Mage::getSingleton("
        $s5 = "\"\\r\\n\", FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_171 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = /=\s*'';\s*for\s*\(/
        $s3 = ");break;default:console[_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_172 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$billing = Mage::getSingleton('checkout/session')->getQuote()->getBillingAddress()->getData();"
        $s2 = "write($f, $payment['ccard_ccnumber'].\"|\".$payment['ccard_expdate'].\"|\".$payment['ccard_cvvcode']"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_173 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "= Mage::getSingleton('checkout/session')->getQuote()->getShippingAddress();"
        $s5 = "print_r($e, 1), FILE_APPEND|LOCK_EX);"
        $s6 = "1' => base64_encode(json_encode($res)),"
        $s7 = "$url = base64_decode('aHR0"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_magentoccstealer_174 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "$_SERVER[\"HTTP_HOST\"]"
        $s3 = "base64_encode(bin2hex(str_replace("
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_174_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "Mage_"
        $s2 = "$_SERVER[\"HTTP_HOST\"]"
        $s3 = /\$[\w]+->[\w]+\(\$[\w]+,[^;]+\);[\s]*\$[\w]+->[\w]+\(\);[\s]*return[\s]*\$[\w]+;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentoccstealer_175 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "curl_setopt($ch, CURLOPT_POSTFIELDS, $data);"
        $s5 = "$data=@$_COOKIE[\"___billing\"].\"|\".@$_POST['payment']['cc_number'].\"|\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_176 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "exit(`"
        $s4 = "])) exit(`{$_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_magentoccstealer_176_02 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "isset($_REQUEST["
        $s3 = "exit(`"
        $s4 = "= $_REQUEST["
        $s5 = /if[\s]*\(isset\(\$_REQUEST\[[^\)]+\)\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*\$_REQUEST\[.[\w]+.\];[\s]*exit\(`\$[\w]+`\);[\s]*\}[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_177 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "(strpos($_SERVER['REQUEST_URI'], 'checkout"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentoccstealer_178 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "strpos($txtBod, \"cc_number\") !== false && strpos($txtBod, \"cc_cid"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentoccstealer_179 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "PHNjcmlwdD"
        $s2 = "(strpos($_SERVER['REQUEST_URI'], 'checkout"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentoccstealer_180 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "base64_decode(file_get_contents($"
        $s5 = "HTTP_X_FORWARDED_FOR"
        $s6 = "if (!in_array($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_magentologinstealer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = " * @category   Mage"
        $s3 = "mail("
        $s4 = "$message.= \"Client IP : \".$_SERVER['REMOTE_ADDR'].\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "/cc_"
        $s3 = "txt\",\"a\");"
        $s4 = "$clientip\\nUser Agent : $useragent\\n======"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "mail("
        $s3 = "Mage_Admin"
        $s4 = "$_SERVER['HTTP_HOST'].\"=\".base64_encode(json_encode(array($username,$password,$user->getEmail(),Mage::helper"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "json_decode(file_get_contents("
        $s3 = "getenv(\"REMOTE_ADDR"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_005_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "file_get_contents("
        $s2 = "getenv('REMOTE_ADDR')"
        $s3 = "substr($send"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "?email=$username&pass=$password"
        $s4 = "$username.\"|\".$password"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "mail("
        $s3 = ".$passwor"
        $s4 = "$geo = unserialize(file_get_contents"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_007_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "mail("
        $s3 = ".$passwor"
        $s4 = ",\"Admin Login Boss\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_007_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "* Magento"
        $s1 = "mail("
        $s2 = ".$password"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentologinstealer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = "class Mage_"
        $s2 = "$db($key,\""
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentologinstealer_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "\"admin_user\"))) { die"
        $s3 = "); } } foreach ($_POST as"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "(isset($_POST['login"
        $s4 = "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]"
        $s5 = "http_build_query($data)"
        $s6 = "curl_close($myCurl);"
        $s7 = "$_POST['login']['password'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_magentologinstealer_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['SERVER_NAME']"
        $s2 = "$postLogin['password'].\"\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentologinstealer_013 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "* @package     Mage_Checkout"
        $s3 = "Mage::getModel(\"admin/roles\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "curl_init(\"http"
        $s3 = "\"&password=\""
        $s4 = "/gate/check?\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "time().'-'.rand(1111111,9999999999);"
        $s6 = "\"data\" => urlencode(base64_encode(http_build_query($_POST))),"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_magentologinstealer_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "public function getAuthenticates($request)"
        $s3 = "$auth_url = base64_encode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_017_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "public function getAuthenticates($request)"
        $s3 = "$this->getAuthenticates($authParam);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_017_03 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "public function getAuthenticates($request)"
        $s3 = "$authParam = $request;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_018 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = ".urlencode($"
        $s4 = "urlencode($password),false,stream_context_create(array('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_019 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "Mage::"
        $s2 = ".urlencode(${${\""
        $s3 = "\"].\"/\".$_SERVER[\""
        $s4 = "},CURLOPT_RETURNTRANSFER,true);curl_exec(${$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_020 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "if(!isset($_COOKIE["
        $s5 = "))!==false){if(!isset($_COOKIE[base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_magentologinstealer_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "\"Customer Login From :"
        $s3 = "$subject, $message, $headers);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_magentologinstealer_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "Tools::file_get_contents(\"https://\"."
        $s4 = "if(isset($passwd)){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_022_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "Tools::file_get_contents(\"https://\"."
        $s4 = "if ($plaintextPassword!=null){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_magentologinstealer_023 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$patterns = preg_replace_callback(\"/^(.*?)$/\",\"reset\""
        $s2 = "\"reset\",$data_key);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_magentologinstealer_023_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$patterns = preg_replace_callback(\"/^(.*?)$/\",\"reset\""
        $s2 = "$this->getAuthenticates($authParam);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_msie_check_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "preg_match('/msie|trident/i', $_SERVER['HTTP_USER_AGENT']) && isset($_SERVER['HTTP_REFERER'])"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_mx_start_injector_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "/*mx_start*/<?php"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_nicook_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "setcookie(\"nicook\", $myserver"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\"\\110\\124\\124\\120"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_001_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\\137\\162\\145\\160\\154\\141\\143\\145"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_001_03 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x43\\x4f\\x4f\\x4b\\x49"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "${${\""
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_002_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "${${\""
        $s2 = "}=base64_decode(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"\\x2f\\x2e*/e\""
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_003_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $w0 = "vertDivider"
        $s1 = "\\x72\\x65\\x70\\x6c"
    condition:
        $s0 and $s1 and not $w0
}

rule php_malware_obfuscated_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "'.'"
        $s1 = ".''.''.''."
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "$_[@!+_]"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"    .    \"\\x"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_007_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"  .  \"\\x"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/^/*"
        $s1 = "'}= ( ${'"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "=__FILE__;"
        $s2 = "t13';"
        $s3 = "('',eval($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "if (empty(${"
        $s2 = "\")}(${"
        $s3 = ").chr("
        $s4 = ")]), chr(ord(\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_011 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "@$_COOKIE"
        $s2 = "=@$_COOKIE;"
        $s3 = ";if($"
        $s4 = "=0;"
        $s5 = "^$"
        $s6 = "##"
        $s7 = ">>"
        $s8 = "<<"
        $s9 = "'^'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9
}

rule php_malware_obfuscated_012 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "( array($"
        $s2 = "} . $"
        $s3 = "};"
        $s4 = "( \"\", $"
        $s5 = ") );"
        $s6 = "();"
        $s7 = "?>"
        $s8 = "}, \"\\n\"), \"\", \""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_malware_obfuscated_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include(\"temp"
        $s2 = "=str_replace(\"[t1]\", \"<?"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "\"\\137\\162\\145\\160\\154\\141\\143\\145\";"
        $s2 = "'/.*';"
        $s3 = "'/e';"
        $s4 = "),'');"
        $s5 = "';/*"
        $s6 = "($_SERVER[$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_obfuscated_015 : malware
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "]($_"
        $s2 = "){if(!self::$_j):self::_ulerv();endif;return hex2bin(self::$_j[$_"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_016 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval/*"
        $s2 = "'1'=>'"
        $s3 = "[$i]]) ? $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_016_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "rawurl%22%20.%20%22decode%22%3Bretur"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_017 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "#/\\*\\*SSL_START(.*)SSL_END\\*\\*/#s"
        $s2 = "(__FILE__),$match);$key=$match[1];"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_018 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /';eval\(\$[^a-zA-Z0-9]+\(\$[^a-zA-Z0-9]+\)\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_020 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /<\?php[\s]*\$[0O]{3,}[\s]*=[\s]*base64_decode\(.[\w]{30,}.\);[\s]*\$[0O]+[\s]*=[\s]*\$[0O]+\{[\d]+\}[\s]*\.[\s]*\$[0O]+\{[\d][^\(]+eval\([\s]*\$[0O]/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_022 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $w0 = ".lang("
        $w1 = "weekdays:"
        $w2 = "\\x2fportal"
        $w3 = "\\x26media"
        $w4 = "\\x26appInstanceName"
        $w5 = "\\x2Ftemplates"
        $s1 = /\\x[567][0-9a-fA-F][\w]{5,}\\x[a-zA-Z0-9]{2}[\w]{5,}\\x[a-zA-Z0-9]{2}[\w]{5,}/
    condition:
        $s0 and $s1 and not $w0 and not $w1 and not $w2 and not $w3 and not $w4 and not $w5
}

rule php_malware_obfuscated_022_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "=create_function(null,gzinflate(convert_uudecode(\""
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "<strlen($"
        $s2 = "\");__halt_compiler();"
        $s3 = "=range(\"\\0\",\"\\xff\");"
        $s4 = "(__FILE__,false,null,__COMPILER_HALT_OFFSET__"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_024 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /'';[\s]*\$[\w]+\(\$[\w]+,[\s]*\$[\w]+[\s]*\.[\s]*\"[\w]{1000}[^\"]+\"[\s]*\.[\s]*\$[\w]+[\s]*\.[\s]*\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_025 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "('',"
        $s2 = "chr(ord($"
        $s3 = /if\(!function_exists\(\"[\w]+\"\)\)[\s]*\{[\s]*function [\w]+\(\$[\w]+\)\{\$[\w]+[\s]*=[\s]*array[^\}]+\}[\s]*return[\s]*\$[\w]+\[[\d]+\];\}[\s]*\$[\w]+[\s]*=[\s]*\"[^}]{5000}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_026 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "@ini_set('display_errors',"
        $s3 = "return(eval($"
        $s4 = "#!/usr/bin/php -q"
        $s5 = "@error_reporting(0);@ini_set('display_errors',false);defined("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_027 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = /\^['\"]/
        $s2 = "'^'"
        $s3 = "<<"
        $s4 = /;[\s]*[\w]+;/
        $s5 = /'\^'[^;]+';[\s]*\$[\w]+[\s]*=[\s]*'[^\x02]+;[\w]+;[^\x02]+\/\*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_028 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "goto"
        $s1 = "; goto"
        $s2 = /<\?(php)?[\s]*(\/\*[^\$]+\*\/[\s]*)?goto [\w]+;[\s]*[\w]+:[^\n]+([\s]*\?>)?/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "GvRubpXzq9vrRKGAUY8pxfP3ZYV/HJrOxLCjzy5hLPpoGxrla"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_029_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ijrzxTfYDqdC1SuqhfYZjJtYS1Pz1R1AVySuFrAU+mZE3KVqt"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_030 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = /(\$[\w]+[\s]*=[^;]+;[\s]*){5,}\$[\w]+\(\$[\w]+,[\s]*\$[\w]+\((\$[\w]+[\s]*\.[\s]*){3,}\$[\w]+\)\);[\s]*require[\s]*\$[\w]+;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_031 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "^"
        $s2 = /\$[\w]+=[^\n]+'\.([\s]+'[^\n]+'\.\n)+[\s]+'[^\n]+';[\s]*\Z/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_032 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode(getmal("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_033 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "foreach"
        $s1 = "]=implode(\"\",array_reverse($"
        $s2 = ",PREG_SPLIT_NO_EMPTY);foreach($c as $d=>$e){$c[$d]=${"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_034 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /\$[\w]+[\s]*=[\"][^\"]+\";[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]+\][\s]*(\.[\s]*\$[\w]+\[[\d]+\][\s]*){10,}[^\n]+\)\)\);[\s]*\$[\w]+\(\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_035 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = "substr"
        $s3 = "},$GLOBALS{"
        $s4 = "],$GLOBALS{"
        $s5 = "error_reporting(E_ALL^E_NOTICE);define("
        $s6 = "gzinflate(substr("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_obfuscated_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "cook"
        $s1 = "onsubmit=\\\"document.cookie='key='+encodeURIComponent(this[0].value)"
        $s2 = "}[\"key\"])){$"
        $s3 = "};unset\\x28\\x24"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "strrev"
        $s2 = "gzinflate"
        $s3 = ").sha1(strrev($"
        $s4 = "]:(isset($_COOKIE["
        $s5 = "(str_replace(\"\\n\", '', '"
        $s6 = ")).substr(md5($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_obfuscated_038 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = ");$php=@base64_decode($b64);if($php){eval($php);}else{unlink(__FILE__);}}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_039 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "exit"
        $s2 = ": echo \""
        $s3 = ": error_reporting(0); goto"
        $s4 = ": set_time_limit(0); goto"
        $s5 = ": if (!(md5($_GET[\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_obfuscated_040 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "<?php eval(gzinflate(convert_uudecode("
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_041 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = /<\?php eval\(str_rot13\(gzinflate\(base64_decode\(\"[^;]+\\x[^;]+\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_042 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = /@eval\(\$[O0]+\[.[\w]+.\]\(\$[O0]+\[.[\w]+.\]\([^;]{1000,}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_043 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*['\"][^;]{1000,};[\s]*\$[\w]+[\s]*=[\s]['\"][preglac_'\"\s\.]{15,};/
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_044 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "strrev"
        $s2 = ":(isset($_COOKIE["
        $s3 = "3';error_reporting(0);$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_046 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "<?php eval(pack('H*','2"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_047 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "0O"
        $s3 = /\$[0O]+[\s]*=[\s]*base64_decode\([^;]+\);[\s]*\$[0O]+[\s]*\.?=[\s]*\$[0O]+(\{|\[[\d]+\]|\})[^\(]+eval\(\$[0O]+\(.{500,}\)\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_048 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*GLOBAL[\s]*\$[\w]+,[\s]*\$[\w]+;[\s]*\$[\w]+[\s]*=[\s]*get_option\(.[\w]+.\);[\s]*if\(isset\(\$[\w]+\[.[\w]+.\]\)\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*explode\(.#.,[\s]*hex2bin\(\$/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_049 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "foreach (array(@$"
        $s2 = "(get_defined_vars()));"
        $s3 = ")) { continue; } $"
        $s4 = ".= '_' . $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_050 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(gzinflate(base64_decode('FZvHkoPKskU/554TDPAuXtwBAuG9h8kNPA"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_051 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /\$[\w]+[\s]*=[\s]*\"[^\"]{30,}\";[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]+\][^;]*;[\s]*){3,}@\$[\w]+\(\$[\w]+\([^;]+\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_052 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "<?php $Pass"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_053 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "\\x68\\x65\\x78\\x64\\x65\\x63"
        $s3 = "\\x73\\x74\\x72\\x6c\\x65\\x6e\"($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_054 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "gzinflate(substr("
        $s2 = "$password=$_GET{"
        $s3 = "}{0x00295},$_GET{"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_056 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = "while($GLOBALS[pack($GLOBALS["
        $s3 = "))get_contents($file,true);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_057 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = "0x3f;$"
        $s3 = /\)\);return[\s]*\$[\w]+;\}\}else\{function[\s]*[\w]+\(\$[\w]+\)\{global[\s]*\$[\w]+;return[\s]*\$[\w]+\(\$[\w]+\);\}\}\$/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_058 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "eval(\"?>\".base64_decode(stream_get_contents(${${"
        $s6 = "});return get_defined_vars();}${"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_obfuscated_059 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "oxMHfzRc7wvRuelc1SKDM1LjnZTLGYBdtUSojN9opJzEG44lre7VRPXxCCe2bbTVU"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_060 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "\\x28\\x61\\x72\\x72\\x61\\x79\\x28\\x27\\x23\\x73\\x21\\x73\\x23\\x27\\x2C\\x27\\x23\\x65\\x21\\x65\\x23\\x27\\x2C\\x27\\x23\\x30\\x21\\x30\\x23\\x27\\x2C\\x27\\x23\\x30\\x72\\x30\\x23\\x27\\x2C\\x27\\x23\\x30\\x6E\\x30\\x23\\x27\\x29\\x2C\\x61\\x72\\x72\\x61\\x79\\x28\\x27\\x3C\\x27\\x2C\\x27\\x3E\\x27\\x2C\\x22\\x5C\\x30\\x22\\x2C\\x22\\x5C\\x72\\x22\\x2C\\x22\\x5C\\x6E\\x22\\x29\\x2C\\x6F\\x62\\x5F\\x67\\x65\\x74\\x5F\\x63\\x6C\\x65\\x61\\x6E\\x28\\x29\\x29\\x3B\\x66\\x6F"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_061 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = ".='t13';"
        $s2 = "='str'.'_'.'ro';"
        $s3 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*'str'\.'_'\.'ro';/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_062 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "}.$"
        $s3 = ")));unset($"
        $s4 = "=NULL;@eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_063 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(''"
        $s2 = "();"
        $s3 = "((''),"
        $s4 = "));@$"
        $s5 = /\$[\w]+[\s]*=[\s]*'[^']{40,}';[^\n]+@\$[\w]+\(\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_065 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = /<\?php[\s]*eval[\s]*\([\s]*gz[\w]+[^\n;]{500,};[\s]*\?>[\s]*<\?php[\s]*([^\n]{0,100}\n)+/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_066 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /<\?(php)?[\s]*\$[\w]+[\s]*=[\s]*array\(('.',[\s]*){20,}'.'\);[\s]*(\$[\w]+[\s]*=[^;]+;[\s]*){3,}@[Ee][Vv][Aa][Ll][^;]+;/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_067 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "aWYoIWZ1bmN0aW9uX2V4aXN0cygiSSIpKXtmdW5jdGlvbiBJKCRhLCRiLCRjKXskZD1"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_obfuscated_068 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "eval(base64_decode("
        $s3 = "Z2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwLiwhJCUmKCktXys9QCM/JykpKTtyZXR1cm47'));return;?>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_069 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "OO00"
        $s3 = /<\?php[\s]*\$[0O]+[\s]*=[\s]*urldecode\(.%[^;]+\);[\s]*\$[0O]+[\s]*=[\s]*\$[0O]+\{[\d]+\}[\s]*\.[\s]*\$[0O]+\{[\d]+[^\(]+eval[\s]*\(/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_070 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\\x31\\x33"
        $s2 = "\\x67\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_071 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "$Seq = pack(\"H*\",sha1($Gamma.$Seq.$Salt));"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_072 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = ", ''),strfuncinj($"
    condition:
        $s0 and $s1
}

rule php_malware_obfuscated_073 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "rename(__FILE__,dirname(__FILE__)"
        $s6 = ";}}exit();}echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_074 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "<?php /*"
        $s2 = "\"}();/*"
        $s3 = "*/${\"\\x"
        $s4 = /<\?php[\s]*\/\*[^\n]+\*\/\$\{\".x...x...x[^\"]+\"\}\(\);[\s]*\/\*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_075 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rror_"
        $s3 = "gzinflate(substr(base64_decode("
        $s4 = ":error_reporting(0);goto"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_076 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "cabbaaWYoIWZ1bmN0aW9uX2V4aXN0cygiTzAwMCIpKXtmdW5jdGlvbiBPMDAwKCRhLCRiLCRjKXskZD1pbXBsb2RlKCRjKTskZD1w"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_obfuscated_077 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "caWYoIWZ1bmN0aW9uX2V4aXN0cygiSTFsbCIpKXtmdW5jdGlvbiBJMWxsKCRhLCRiLCRjKXskZD1pbXBsb2RlKCRj"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_obfuscated_078 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "jUjbZaJAEP0Vy7LKsFhjc7iX5VASi"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_obfuscated_079 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = "exit;"
        $s4 = ",\"r\"))) {"
        $s5 = "if($_SERVER['REQUEST_METHOD'] === 'POST')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_obfuscated_080 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "echo"
        $s4 = "])?$_GET["
        $s5 = "explode('|\x03|\x01|\x01', gzinflate(substr('\x1f"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_obfuscated_081 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "^"
        $s2 = "*/^/*"
        $s3 = "\\x"
        $s4 = "*/\""
        $s5 = "\"/*"
        $s6 = "= @$"
        $s7 = "<?php /*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_obfuscated_081_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "^"
        $s2 = "*/^/*"
        $s3 = "\\x"
        $s4 = "*/\""
        $s5 = "\"/*"
        $s6 = "= @$"
        $s7 = "@${\"\\x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_obfuscated_082 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "file(__FILE__);eval(base64_decode("
        $s4 = "));__halt_compiler();"
        $s5 = "fvSnMGef3Prqd4KxxbvUmrhdkxZmNqR5GSy2xl"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_083 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = "\"\\1"
        $s3 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*\"\\1[\d]+[^;]+\.[\s]*\([\s]*[\d]+[\s]*.[\s]*[\d]+[\s]*\)[\s]*;[\s]*[^\n]+\"[\s]*\)[\s]*;[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_084 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = /\$[\w]+\[[\d]+\]+[\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][\s]*\./
        $s2 = /<\?(php)?[\s]*\$[\w]+[\s]*=[^;]+;[\s]*\$[\w]+[\s]*=[\s]*(\$[\w]+\[[\d]+\]\.)+[^\*]+\$[\w]+\(.H\*.,[^;]+\)\)\);[\s]*[Ee][Vv][Aa][Ll][^;]+;/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_obfuscated_085 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "xP1ps+xIth2IfRfN+B+yaaXOLEORQGCGitUSZiAwzwj08AxDYJ5ngORvF25W1ntZ9SiRraaZrpkjIgD3Dffte6+91jlxcH"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_086 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "is_file("
        $s2 = "(); unset($diag_req); class"
        $s3 = "0; $dlist = glob(\"{$dn}/*\", constant(\"GLOB_NOSORT\")); if ($dlist) { for ($i"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_087 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "$key = '0000000000000000';"
        $s3 = "hex2bin($Lonh);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_088 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\\x31\\x33"
        $s2 = "&&md5(md5(gettype($"
        $s3 = "&&md5(md5(gettype"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_088_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "\\x73\\x74\\x72\\x5f\\x72\\x6f\\x74\\x31\\x33"
        $s2 = "&&md5(md5(gettype($"
        $s3 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_089 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "gzinflate(substr(base64_decode('H4sIAAAAAAAAA/"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_090 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "*/ error_reporting(0); function"
        $s2 = "strlen(trim($"
        $s3 = ".= pack(\"C\", hexdec(substr($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_091 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "eval(str_rot13(gzinflate(str_rot13(base64_decode("
        $s6 = "ITImZTJsJMZcYn36k9mg47O7qd8FE5"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_obfuscated_092 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "function resize(&$data,"
        $s3 = "if(preg_match('/Apple(.*) \\(/is',$"
        $s4 = "$this->decipherLong($enc_data_long[$i], $enc_data_long[$i + 1],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_093 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "))) || !isset($"
        $s2 = "= get_defined_vars();"
        $s3 = ", GLOB_ONLYDIR"
        $s4 = "? E_ALL : 0);"
        $s5 = "echo \"\\n\";"
        $s6 = "(__FILE__) != $"
        $s7 = ", 0666);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_obfuscated_093_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "(get_defined_vars()));"
        $s2 = "visitorIP()"
        $s3 = "function obfuscateAddr"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_094 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "asser"
        $s2 = "@assert($"
        $s3 = "echo '<iframe"
        $s4 = "\"\\145val("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_095 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "gzinflate(substr("
        $s2 = "explode(base64_decode("
        $s3 = "];exit;}}}function get_client_ip($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_obfuscated_096 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = ").\"\".chr("
        $s3 = /\$[\w]+[\s]*=[\s]*['\"][^'\"]+\";[\s]*\$[\w]+[\s]*=[^;]+chr\([\d]+\)[\s]*\.[\s]*\"\"[\s]*\.[\s]*chr[^\n]{500,}\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_obfuscated_097 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "___=$__"
        $s3 = "_='printf';"
        $s4 = "On2MYrDPIqpAXGEQCAQCITf4ngfP3BRMlaE2nej+cyVaMQmOcqknW8j2mPNFLEc9q1kaQ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_098 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "(gzinflate(str_rot13(base64_decode("
        $s6 = "P07JClAYBEIIAS8LRctVo6n7rv6blYYWqwcZYR4p7"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_obfuscated_099 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = ".= rand();"
        $s4 = "str_ireplace(\"decode\",\"create\",$"
        $s5 = ".= (strlen($value) <= 0) ? $key{1} : $key{1}.$value{1};"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_obfuscated_100 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "error_reporting(0); function"
        $s2 = "] . '(' . $"
        $s3 = "] . '_' . $"
        $s4 = "; } eval("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_obfuscated_101 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "<?php defined("
        $s3 = ",__FILE__);global $"
        $s4 = "=''){ if(empty($"
        $s5 = "=='-1') @"
        $s6 = "]); return(eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_onclickads_net_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = "');return base64_decode($a[$i]);} ?><?php echo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_OOO000000_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "File"
        $s1 = "$OOO000000=urldecode('%66%67%36%73%62%6"
        $s2 = "ukr9NHenNHenNHe1zfukgFMaXdoyjcUImb19oUAxyb18mRtwmwJ4LT09NHr8XTzEXRJwmwJXLT09NHeEXHr8XhtONT08XHe"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_opencartccstealer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$smail=$order_info['order_id'].\"|\".$order_info['payment_"
    condition:
        $s0 and $s1
}

rule php_malware_openx_injection_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "$rate_code=base64_decode('PGlmcmFtZSBzcmM9Ig==')"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_oxxtm_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "src='http://www.oxxtm.com/images/wp-"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_oxxtm_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "jcyLjE4Ny8xLmpzJz48L3NjcmlwdD4=\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_pack_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "\"\\160\\141\\143\\153\""
    condition:
        $s0 and $s1
}

rule php_malware_pack_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\1"
        $s1 = "~\"\\217\\236\\234\\224\""
    condition:
        $s0 and $s1
}

rule php_malware_pack_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "@include(pack('H*"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_pack_004 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "gzinflate(base64_decode("
        $s2 = "<strlen($"
        $s3 = "chr(ord($"
        $s4 = /gzinflate\(base64_decode\(\$[\w]+\)\);[\s]*for[\s]*\(\$[\w]+[\s]*=[\s]*0;[\s]*\$[\w]+[\s]*<strlen[^\{]+\{[\s]*\$[\w]+\[\$[\w]+\][\s]*=[\s]*chr\(ord\(\$[^;]+;[\s]*\}[\s]*return[^;]+;[\s]*\}[\s]*eval\(/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_pack_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "<?php /*** PHP Encode v1.0 by zeura.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_pack_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "87465642e7068700a0a66756e6374696f6e"
    condition:
        $s0 and $s1
}

rule php_malware_pack_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "tempnam(sys_get_temp_dir(),mt_rand(0,9999));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_pack_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "202471646678616d7868766b613d2771646"
    condition:
        $s0 and $s1
}

rule php_malware_pack_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "register_shutdown_function("
        $s2 = "\\x63\\x72\\x65\\x61\\x74\\x65\\x5f\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_pack_010 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "hexdec(substr($"
        $s3 = "FoxAuto"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_pack_011 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "pack(\"H*\",str_rot13($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_pagerank_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "if(isset($_POST['xxxprch']))"
    condition:
        $s0 and $s1
}

rule php_malware_pastebin_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "://pastebin.com/raw/"
    condition:
        $s0 and $s1
}

rule php_malware_pastebin_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "://pastebin.com/raw/"
    condition:
        $s0 and $s1
}

rule php_malware_pastebin_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "ghostbin.co"
    condition:
        $s0 and $s1
}

rule php_malware_phpjm_encode_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "Website: http://www.phpjm.net/"
    condition:
        $s0 and $s1
}

rule php_malware_placeholder_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "fwrite($file, '<?php if(md5($_POST[\"password\"])==\"'.$_POST[\"md5\"]."
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_POST_check_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_POST"
        $s1 = /\(\@?\$_POST\[/
        $s2 = "<\\?php[^\\{\\n]+if[\\s]*\\([\\s]*md5[\\s]*\\([\\s]*\\$_POST"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_preg_replace_hexcode_001 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "e\", \""
        $s1 = /e['\"][\s]*,[\s]*['\"].x[\w]+.x[\w]+.x[\w]+.x[\w]+.x[\w]+/
    condition:
        $s0 and $s1
}

rule php_malware_redirect_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "http://www.se3curity.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = "\\x6d\\x61\\x67\\x69\\x63\\x2e\\x6a\\x70\\x67"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script>"
        $s2 = "var _0x"
        $s3 = ",show:function (){var"
        $s4 = "inject:function"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = "if(strpos($url,'google')>0||"
        $s3 = "echo \"<script>document.location='/';</script>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0; url=<?php"
        $s4 = "echo $rand_url;?> \">"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_007 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "header(\"Location:"
        $s4 = "$rand=$chars{rand(0, strlen($chars)-1)}.$chars{rand(0"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = "aIeew2ESSs9Kyf649N3AcXch1K3Z2QhsvO"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_009 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = "gethostbyaddr($_SERVER[\"REMOTE_ADDR\"]), \"google\"))"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_REFERER']"
        $s2 = "strtolower($r);foreach ($words as $word)"
        $s3 = "google','msn','baidu"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_011 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "header('Location:"
        $s3 = "<?php header('Location: '.$_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "aGVhZGVyKCJMb2NhdGlvbjo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "$email = @base64_decode($email);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "$protocol = $resolve.\"?RefundStatus=APPROVED&id=\".$id;"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "if ( get_current_user_id() !="
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "strpos($useragent,\"aol\")||strpos($useragent"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_018 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$URL = $urls[rand(0, count($urls) - 1)];"
    condition:
        $s0 and $s1
}

rule php_malware_redirect_019 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$fp = @fsockopen($site, $passwordxx);"
    condition:
        $s0 and $s1
}

rule php_malware_redirect_020 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "document.cookie = \"stuff=data\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_021 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "echo 'document.location.href=unescape(\"'.rawurlencode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_022 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "header(base64_decode('TG9jYXRpb246IGh0dHB"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_023 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "hm = document.createElement(\"script\");"
        $s4 = "|google|"
        $s5 = "var where = document.referrer;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = ".urlencode(strtolower($_SERVER["
        $s4 = "@socket_create(AF_INET"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_026 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /\^[\s]*\$[\w]+\{\$[\w]+\};[\s]*return[\s]*\$[\w]+;[\s]*\};[\s]*eval\([\w]+\(base64_decode\(.[^\)]+\),/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_027 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "$linka = $link.\"&\".$_SERVER['QUERY_STRING'].\"&xfsr=true\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_028 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "base64_decode($"
        $s4 = "location"
        $s5 = /function[\s]*[\w]+\(\)[\s]*\{[\s]*var[\s]*[\w]+[\s]*=[\s]*.location.;[\s]*var[\s]*[\w]+[\s]*=[\s]*.?document.?;[\s]*[\w]+\[[\w]+\][\s]*=[\s]*.<\?=[\s]*\$[\w]+[\s]*\?>.;[\s]*return[\s]*.[\w]+.;[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_029 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header('Location:"
        $s3 = "header('Location: http"
        $s4 = ")){ echo file_get_contents('http"
        $s5 = "http_build_query($_GET)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_030 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header('Location:"
        $s3 = "header('Location: http"
        $s4 = "fwrite($"
        $s5 = "fopen("
        $s6 = /header\(.Location:[\s]+http[^;]+\);[\s]*\$[\w]+[\s]*=[\s]*fopen\([^;]+\);[\s]*fwrite\(\$[\w]+,[\s]*\$_SERVER\[.REMOTE_ADDR.\][^;]+\);[\s]*fclose\(\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_redirect_031 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "header('Location:"
        $s3 = "$ua = $_SERVER['HTTP_USER_AGENT'];"
        $s4 = "if (preg_match('/facebook/s"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_032 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "preg_match(\"/^(?P<local>(?P<lang>[a-z]{1,8})([a-z0-9\\\\-_]+)?)/\", strtolower($_SERVER[\"HTTP_ACCEPT_LANGUAGE\"]),"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_034 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "if(strpos($key,'baidu')!==false||strpos($key,'sogou')!==false"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_035 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "explode(\"/\",$_GET["
        $s4 = "&& !strstr(strtolower(\\$_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_036 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "google|bing|yandex|baidu|yahoo|duckduckgo|ask"
        $s4 = "header(\"Location: \"."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "simplexml_load_file(\"http"
        $s2 = ",\"a\");fwrite($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_038 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = ".\":\" . $_SERVER['REQUEST_URI'] . \"->NoCity->NoState"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_039 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "href=atob("
        $s4 = "script"
        $s5 = "aHR0cH"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_040 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "unlink(__DIR__"
        $s4 = "hash('sha512',$link);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_041 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "<body onload=\"document.form.submit()"
        $s3 = "<title>Redirecting.."
        $s4 = "@$_SERVER['HTTP_CLIENT_IP'];"
        $s5 = "elseif(filter_var($forward, FILTER_VALIDATE_IP))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_042 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "pack('H*','20246a"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_043 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "replace(new RegExp"
        $s4 = "DOMContentLoaded|function|if|typeof|undefined|var|createElement|security|src|web|success|cloud|event|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_043_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "|document|"
        $s3 = "replace(new RegExp"
        $s4 = "||var|xmlhttp||if|cookie|catch|vM|try|vDate|e|sCookieName|length|iT"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_044 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "header("
        $s5 = ")) == \"http://\" || (mb_substr($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_045 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "hex2bin"
        $s4 = "case (strpos($"
        $s5 = "$json = json_decode(hex2bin($file));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_047 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "header("
        $s4 = "HTTP_ACCEPT_LANGUAGE"
        $s5 = "Googlebot"
        $s6 = "header(\"location: \" . $url);"
        $s7 = "echo $file;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_redirect_048 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "$size = count($addresses);"
        $s3 = "$randomUrl = $addresses[$randomIndex];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_049 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "eval(base64_decode("
        $s3 = "DQokaG9vayA9ICc8SWZNb2R1bGUgbW9kX3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_050 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "pack('H*','202477"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_051 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "curl_exec"
        $s2 = "#BOT-BUI#"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_052 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header (\"Location: http"
        $s2 = /<.php\s*(\$\w+=\$_GET\[.\w+.\];\s*){1,2}header\s*.\"HTTP.\d.\d\s*\w+\s*\w+\"\);\s*header\s*..Location:\s*http[s|S]:..\w+[^;]*;\s*\?>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_053 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "header("
        $s7 = "@fwrite($"
        $s8 = "$banhosts = array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

// MANUAL FIX NECESSARY
rule php_malware_redirect_054 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "count($"
        $s3 = /\$[\w]+[\s]*=[\s]*array\([\s]*.http[^;]+\);[\s]*\$[\w]+[\s]*=[\s]*count\(\$[\w]+\)[\s]*-[\s]*[\d]+;[\s]*\$[\w]+[\s]*=[\s]*rand/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_055 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "pack('H*','657661"
        $s3 = "pack("
        $s4 = "eval("
        $s5 = "pack('H*','657661"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_056 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "@$_GET[\""
        $s3 = "<meta http-equiv='refresh' content='0;url=\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_057 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "href=atob("
        $s4 = "script"
        $s5 = "Z2V0YmVzdHByaXplL"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_059 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "href=atob("
        $s4 = "script"
        $s5 = "YmVzdHByaXplLmxpZ"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_060 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = ".style.display = \"none\";"
        $s4 = ".innerHTML = seconds;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_061 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "(chr(76).chr(111).chr(99).chr(97).chr(116).chr(105).chr(111).chr(110)"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_063 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "echo '<script type=\"text/javascript\" src=\"'.chr(104).chr(116).chr(116).chr(112).chr(115)."
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_064 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "if(!$url){"
        $s3 = "echo \"Please Enter Valid Url!\";"
        $s4 = "header(\"location:$url\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_065 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = ")){header(base64_decode('SFRUUC"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_066 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "echo(\"<script>window.location"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_067 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "0O0"
        $s2 = ",CURLOPT_TIMEOUT,100);"
        $s3 = "if(isset($_REQUEST[\"\\x68\\x74\\x61\\x63\\x63\\x65\\x73\\x73\"])){$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_068 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$html = file_get_contents($api_reqest->white_link.'?'.$_SERVER['QUERY_STRING']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_068_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "header(\"Location: {$domainRedirect}{$flowUri}\");"
        $s5 = "file_put_contents($cacheFileName, $domainRedirect, LOCK_EX);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_redirect_069 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "rand("
        $s3 = ";if($_SERVER['SERVER_NAME']!=$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_071 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "illbot"
        $s2 = "https://killbot.org"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_071_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "illbot"
        $s2 = "Killbot"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_072 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "rand("
        $s3 = ") && !replace_abc()){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_073 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "@scandir"
        $s4 = "(strpos($file->getFilename(),'.ph') == true)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_074 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "Googlebot')>0)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_075 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "getenv("
        $s2 = "header(\"location:"
        $s3 = "$file = fopen("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_076 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "eval("
        $s2 = "pack('H*','202470"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_redirect_077 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.getElementsByTagName(\"body\")[0].appendChild("
        $s4 = ";}};x.onreadystatechange = function(r)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_078 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = "curl_exec($"
        $s3 = "base64_decode(self::$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_080 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "xRnbbttG9jk"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_redirect_081 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "{window.location.href"
        $s4 = ",$useragent)||preg_match("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_redirect_082 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "document.getElementsByTagName"
        $s3 = "document.getElementsByTagName(\"body\")[0].appendChild("
        $s4 = "http-equiv=\"refresh"
        $s5 = ".open(\"GET\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_reinfect_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if(@file_exists("
        $s3 = "@chmod($tofile,0444);}if(isset($_REQUEST['test'])){exit('ok');}sleep(1)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_require_image_001 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = /require(_once)?\([^\s;]+\.(jpg|png|gif|bmp|ico|avi|mov|mpg|mpeg|jpeg|incs|svg).\)/
    condition:
        $s0 and $s1
}

rule php_malware_require_image_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "if(file_exists($"
        $s4 = "require_once('favicon"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_require_onceinjection_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "require_once('/tmp/"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_require_onceinjection_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "require_once('/var/tmp"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_require_onceinjection_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "/wp_db.php');"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_require_onceinjection_004 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = /if\(is_file\(['\"][\/\w+]+\/(img|images)\/\w+\.php['\"]\)\)\s*require_once\(['\"][\/\w+]+\/img\/\w+\.php[\"']\)/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_require_onceinjection_005 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "efine('SECURE_AUTH_SALT',"
        $s2 = "/** The name of the database for WordPress */"
        $s3 = "require"
        $s4 = /require(_once)?\([^;]+wp-(includes|admin)[^;]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_require_onceinjection_006 : malware
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = /\@require\(\s*.\s*wp-admin\/\d+\s*.\s*\)\s*;/
    condition:
        $s0 and $s1
}

rule php_malware_require_onceinjection_006_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "wp-config.php"
        $s2 = "@require("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_require_onceinjection_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "require_once dirname(__FILE__) . '/wp-"
        $s2 = "new KClickClient('http"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_require_onceinjection_008 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "@require_once ($"
        $s4 = /\$[\w]+[\s]*=[\s]*.\/home[^;]+;[\s]*if[\s]*\(file_exists\(\$[\w]+\)\)\{[\s]*\@require_once[\s]*\(\$[\w]+\);[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_require_onceinjection_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = ")){@require_once("
        $s4 = "*/$wp_content_handler);}/*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_require_onceinjection_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "isset"
        $s3 = "} catch (Exception $"
        $s4 = "&& is_file($f)) { require_once($f); die; }"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_require_onceinjection_011 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "DUyNzg3J10pKXsNCiAgJGV"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_require_onceinjection_012 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Mage"
        $s1 = " * @package  "
        $s2 = "* @category    Mage"
        $s3 = ")) require_once $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_require_onceinjection_013 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "){return implode('',array_map(function($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_require_onceinjection_014 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "= 'b'.'a'.'s'.'e'.'6'.'4'.'_'.'d'.'e'.'c'.'o'.'d'.'e';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_require_onceinjection_015 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "if(stripos($_SERVER["
        $s4 = "if(stripos($_SERVER['REQUEST_URI'], '/sock/') !== false){ require_once(dirname(__FILE__).'/temp.php'); exit; }"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_require_onceinjection_016 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "(is_file($f)) require_once "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_require_onceinjection_017 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "echo"
        $s3 = "ReflectionFunction($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_require_onceinjection_018 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "require_once $"
        $s4 = "$resourceFilename = MAGENTO_ROOT"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_require_plugin_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "@package WordPress"
        $s3 = "require_once(ABSPATH.'wp-content/plugins"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_roguead_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "if(isset($_SERVER['HTTP_REFERER']) && (!isset($_COOKIE["
        $s2 = "<ins class=\"adsbygoogle\""
        $s3 = "<div style=\"width:0px;height:0px;position:absolute;z-index:99999;opacity:0;top:0px;left:0px;\" id="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_roguead_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "$client = new KClickClient"
    condition:
        $s0 and $s1
}

rule php_malware_sequentialencoding_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "base64_decode(base64_decode(base64_decode"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_stats_injector_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = "error_reporting(0);"
        $s3 = "file_get_contents(chr(104).chr(116).chr(116).chr(112)."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_stats_injector_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = "(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ?"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_str_rot13_url_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "uggc://"
    condition:
        $s0 and $s1
}

rule php_malware_string_rearrangement_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "=',\"\\110\\52\",\"!"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_malware_string_rearrangement_003 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "str_replace("
        $s5 = /file_get_contents\(\$file\);([\s]*\$[\w]+[\s]*=[\s]*str_replace\([^;]+\$[\w]+\);[\s]*)+file_put_contents\(\$[\w]+,[\s]*\$[\w]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_strrev_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "substr(md5(strrev($"
    condition:
        $s0 and $s1
}

rule php_malware_strrev_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = "eval(strrev("
    condition:
        $s0 and $s1
}

rule php_malware_strrev_002_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "base64_decode(strrev"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_strrev_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "chr(ord(substr(strrev"
    condition:
        $s0 and $s1
}

rule php_malware_strrev_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "gzinflate(strrev("
    condition:
        $s0 and $s1
}

rule php_malware_strrev_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "// ?><?php"
        $s2 = "><?php //"
        $s3 = "=strrev(str_ireplace(\""
        $s4 = "\";eval($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_strrev_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "= str_rot13('n'.'f'.'f'.'r'.'e'.'g'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_strrev_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = ");$wp_re_update=strrev(\"/wordpress"
    condition:
        $s0 and $s1
}

rule php_malware_strrev_008 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "die("
        $s3 = "x___"
        $s4 = "et2ECY+1qlT99xhzbpvMcclsXa/lpd9yLGAqK7iLs"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_strrev_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "str_rot13('=RDe1Za8XXAI1A9vlESqYAcHlB5FXFIqmeVI1"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_su_redirect_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = ".su/?tr="
        $s4 = "exit;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_susp_chmod_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "chmod(dirname(__FILE__), 0351);"
    condition:
        $s0 and $s1
}

rule php_malware_swfinjection_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo(base64_decode(\"PG9iamVjdCB0"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_tdsurl_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "/TDS.post.php"
        $s2 = "/TDS.post.php?st="
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_tdsurl_001_03 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "/TDS.post.php"
        $s2 = "$esdid="
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_tdsurl_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "/tds/?ip="
    condition:
        $s0 and $s1
}

rule php_malware_test0_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "$SERVER_IP=str_replace(\".\",\"_\",$SERVER_IP);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_touchtimestamp_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "@touch(dirname($file),$t,$t);"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "if(preg_match(\"!google|bing|search|yahoo|crawler|robot!i\", $_SERVER['HTTP_USER_AGENT']))"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "preg_match(\"/google|bot|msn|spider"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_002_02 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "!preg_match('/google|slurp|bot|crawl|spider"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_003 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "if(stristr(@$_SERVER['HTTP_USER_AGENT'],'windows'"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_UA_check_004 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "#webcrawler#i', '#robozill#i"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_005 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = " stristr($CSN, \"Googlebot\" ))"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_006 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "google|adsbot|adbot|mediapartners"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_007 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "if(strlen(strstr($s_agent, 'google'))"
    condition:
        $s0 and $s1
}

rule php_malware_UA_check_008 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "$userAgents = array(\"Google\","
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_UA_check_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "abuse|amazonaws|anonym"
        $s3 = "strtolower($_SERVER['REMOTE_ADDR']))){ exit();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_malware_UA_check_010 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /(\$\w+)\s*=\s*['\"].{64}/
        $s2 = /\$[\w]+[\s]*=[\s]*['\"][^;]{30,}['\"];[\s]*(\$[\w]+[\s]*=[\s]*(\$[\w]+\[[\d]+\][\s]*\.[\s]*)+\$[\w]+\[[\d]+\];[\s]*)+\$[\w]+[\s]*=[\s]*\$[\w]+\(['\"]{2},[\s]*\$[\w]+[^\)]{500,}[\)\s]+;[\s]*\$[\w]+\(\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_unreadable_dir_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "chmod(dirname(__FILE__), 0351);"
        $s2 = "$time = filemtime($_SERVER['DOCUMENT_ROOT'].\"/\".$files[$i]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_unwantedads_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "update.php\") AND stripos($new_version, $plugin_key)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_unwantedads_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.body.appendChild"
        $s2 = "document.createElement('script')"
        $s3 = "document.getElementById("
        $s4 = "]));}}}};function"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_upsme_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "*/@upsme("
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_usort_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "usort($_GET,"
    condition:
        $s0 and $s1
}

rule php_malware_varlog_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "; $output = ob_get_clean(); $fp = fopen('./error_log', 'a'); fwrite($fp,"
    condition:
        $s0 and $s1
}

rule php_malware_visitor_tracker_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(\"CmlmKCFkZWZpbmVkKCJDVVJfUEFUSCIpKXsKCWRlZmluZSgiQ1VSX1BB"
    condition:
        $s0 and $s1
}

rule php_malware_visitor_tracker_002_01 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(\"CmZ1bmN0aW9uIHVzZXJfYWJvcnRfZW5kX2V4aXRfb3BlcmF0aW9uaW"
    condition:
        $s0 and $s1
}

rule php_malware_visitor_tracker_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "--><?php"
        $s2 = "\"));?><!--"
        $s3 = "e\";eval($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_visitor_tracker_052F_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlw"
        $s4 = "echo base64_decode(\"PHNjcmlwdCB0eXBlPSJ0ZXh0L2p"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_win32_trojan_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "attachment; filename=\".$_SERVER[\"HTTP_HOST\"].\".exe\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_win32_trojan_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "eval"
        $s2 = "base64_decode"
        $s3 = "if(!$_COOKIE[\"sid\"]){die();}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_wp_admin_cookie_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "* @subpackage Administration"
        $s3 = "isset($_COOKIE[\"wpt\"]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_wp_admin_cookie_002 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "wp_set_auth_cookie($"
        $s4 = "wp_redirect(user_admin_url())"
        $s5 = "= get_user_by('id',1);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_wp_admin_cookie_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "wp_set_auth_cookie($"
        $s4 = "wp_redirect(user_admin_url())"
        $s5 = "usermeta where meta_key = 'wp_capabilities' and meta_value like '%administrator%' limit 1)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_malware_wp_admin_cookie_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "new WP_User_Query("
        $s3 = "array('role' => strtr("
        $s4 = "[rand(0,sizeof($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_wp_admin_cookie_006_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "new WP_User_Query("
        $s3 = "array('role' => strtr("
        $s4 = ").mb_strlen("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_wp_fbprotered_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "function fbprotered"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_wp_login_stealer_001 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = ".$_POST['log'].\"-------password=\".$_POST['pwd']."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_wp_login_stealer_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "die("
        $s3 = "mysql_query (\"UPDATE \".$table_prefix.\"users SET user_pass = '\".$_POST['hash'].\"' WHERE id =\".$_POST['id'])"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_wp_login_stealer_003 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "curl_exec($ch);curl_close($ch);return true;}get_pass_Html("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_wp_login_stealer_004 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "add_action("
        $s3 = "strrev("
        $s4 = ",$_POST);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_wp_login_stealer_005 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = ".base64_encode($_POST["
        $s4 = ");if(empty($"
        $s5 = "curl_exec($"
        $s6 = "base64_decode(\"aHR0cD"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_malware_wp_login_stealer_005_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = ".base64_encode($_POST["
        $s4 = ");if(empty($"
        $s5 = "curl_exec($"
        $s6 = "time()+"
        $s7 = "setcookie("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_malware_wp_login_stealer_006 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "wp_authenticate($"
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_wp_login_stealer_007 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "file_get_contents(\"https://api.telegram.or"
        $s3 = "wordwrap($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_wp_login_stealer_008 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "@fwrite(fopen(\"./wp-content/logo.jpg\""
    condition:
        $s0 and $s1
}

rule php_malware_wp_login_stealer_009 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "wp_authenticate_username_password($"
        $s3 = "if ( $usercheck instanceof WP_User"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_malware_wp_login_stealer_010 : malware
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "@unserialize(base64_decode(get_option("
        $s4 = "senddata($cdnUrl, $host, base64_encode(serialize($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_wp_login_stealer_010_02 : malware
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "@unserialize(base64_decode(get_option("
        $s4 = "($user, $username, $password);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_wpnull_001_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "hex2bin"
        $s4 = "hex2bin( '687474703a2f2f636f6e6e6563742e61706965732e6f72672f'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_malware_xcalendar_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "function PlgSystemXcalendar(&"
        $s4 = "class PlgSystemXcalendarJoomlaBase extends PlgSystemXcalendarBase {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_malware_xor_data_002 : malware
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = /\^['\"]/
        $s2 = /[\w][\s]*\^[\s]*\$[\w]+;[\s]*'/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_malware_xor_data_003 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = " ^ "
        $s2 = /\^[\s]*\".x[^;]+;[\s]*\$[\w]+\(\$[\w]+,[\s]*\".x/
    condition:
        $s0 and $s1 and $s2
}

rule php_malware_xyz_browser_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "@preg_replace(\\$_SERVER['HTTP_X_{{PASSWORD}}'], \\$_SERVER['HTTP_X_CURRENT']"
        $s5 = "XYZ_Browser"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_126_com_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "\"Location:http://webmail.mail.126.com/\""
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_16shop_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<h3>16SHOP"
    condition:
        $s0 and $s1
}

rule php_phishing_16shop_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>16SHOP"
    condition:
        $s0 and $s1
}

rule php_phishing_1and1_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#49;&#38;&#49;&#32;&#73;&#79;&#78;&#79;&#83;"
    condition:
        $s0 and $s1
}

rule php_phishing_absa_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "header("
        $s5 = "\"ABSA |"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_adobe_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Adobe PDF Online</h1>"
    condition:
        $s0 and $s1
}

rule php_phishing_adobe_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "<title>Access to PDF Files On Adobe Server"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_amazon_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "?action=billing_login=true&_session;\".md5(time()).md5(time()); ?>"
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: Billing.php?action=billing_verification=true&_session;\".md5(time()).md5(time()));"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_amazon_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "$cardnumber|$newCreditCardMonth|$newCreditCardYear|$cvv"
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Amazon"
        $s1 = "verification&securessl=true&sessionid=<?php  echo generateRandomString("
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Verify your details</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Amazon Sign In</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Account Verification"
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "\xc2\xa9 1996-2018, Amazon.com, Inc. or its affiliates"
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&Alpha;m&#97;zon.com, Inc."
    condition:
        $s0 and $s1
}

rule php_phishing_amazon_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<title>Amazon |"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_amazon_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "] Mengupload Foto CC"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_amazon_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header(\"location:"
        $s3 = "if (stripos(strtolower(get_user_agent()), 'bot') !== false)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_anonisma_free_tools_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "ANONISMA"
        $s2 = "ANONISMA FREE TOOLS"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_anonisma_free_tools_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "ANONISMA"
        $s2 = "md5(gmdate"
        $s3 = "<div class=\\\"a-n-o-n-i-s-m-a\\\" id=\\\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_anonisma_free_tools_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "ANONISMA"
        $s2 = "md5(gmdate"
        $s3 = "<form action=\\\"./account/successfully.php?id=\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_anonisma_free_tools_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "Coded By Anonisma"
    condition:
        $s0 and $s1
}

rule php_phishing_anonisma_free_tools_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$_SESSION['ANONISMA-"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_aol_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>AOL -&nbsp;login</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_aol_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "'From: AOL CYX"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_aol_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location:https://aol.com/uploads\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_aol_002_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "pass"
        $s2 = "aW5mby55YWhvby5jb21cXFwvcHJpdmFjeVxcXC91c1xcXC95YWhvb1xcXC9yZWxldmFudGFkcy5odG1s"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_aol_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "login.aol.com/account/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_apple_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&Alpha;ppleSecure"
    condition:
        $s0 and $s1
}

rule php_phishing_apple_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&Alpha;pple Inc"
    condition:
        $s0 and $s1
}

rule php_phishing_apple_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&Alpha;pple ID"
    condition:
        $s0 and $s1
}

rule php_phishing_apple_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AppIe ID</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_apple_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "AppleSecure</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_apple_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:"
        $s2 = "header('location: https://appleid.apple.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_apple_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"Host: appleid.apple.com\");"
    condition:
        $s0 and $s1
}

rule php_phishing_apple_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "echo \"<script type='text/javascript'>window.top.location='https://appleid.apple.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_AXA_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.axabanque"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_AXA_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "msg = \"--------------------- Bismillah --"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_backofbrazil_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"Pes\\x73\\x6fa"
    condition:
        $s0 and $s1
}

rule php_phishing_bancolombia_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "usuario BANCOLOMBIA (\".$ip"
    condition:
        $s0 and $s1
}

rule php_phishing_bankia_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Bankia S.A"
    condition:
        $s0 and $s1
}

rule php_phishing_bankofamerica_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Bmnx vf Matircm"
    condition:
        $s0 and $s1
}

rule php_phishing_bankofamerica_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Bank"
        $s2 = "Bank of America, N.A. Member FDIC"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_bankofireland_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>:::  BOI  :::"
    condition:
        $s0 and $s1
}

rule php_phishing_barclays_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://service.barclays.de"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_blackfriday_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Aqui a Black Friday"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_block_bots_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "$blocked_words = array("
        $s3 = "cyveillance"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_block_bots_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "$blocked_words = array("
        $s3 = "'above','google','softlayer"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_block_bots_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "array(\"above\", \"google\", \"softlayer\", \"amazonaws\", \"cyveillance\", \"phishtank\""
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_block_bots_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "function CheckCVV($"
        $s3 = "if ( stripos($_SERVER['HTTP_USER_AGENT'], $spider) !== false ) return true"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_block_bots_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "echo(\"<h1>404 Not Found</h1>The page that you have requested could not be found.\");}}if(!empty($_SERVER['HTTP_USER_AGENT'])){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_block_bots_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "if (preg_match('/' . $ip . '/',$_SERVER['REMOTE_ADDR']))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_block_bots_006 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header('Location:"
        $s3 = "header('Location: http"
        $s4 = "exit(header('Location: http"
        $s5 = /\)[\s]*{[\s]*if[\s]*\(preg_match\('\/'[\s]*.[\s]*\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_block_bots_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header('Location:"
        $s3 = "header('Location: http"
        $s4 = ".*\",\"^"
        $s5 = "<h1>404 Not Found</h1>The page"
        $s6 = "){if(preg_match('/'.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_block_bots_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = ".md5(base64_encode(rand(0,10000).gmdate("
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_block_bots_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "gethostbyaddr($_SERVER['REMOTE_ADDR"
        $s3 = "403 Forbidden"
        $s4 = "$blocked_words = array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_block_bots_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "fwrite($"
        $s3 = "fopen(\".htaccess"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_block_bots_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "gethostbyaddr($_SERVER['REMOTE_ADDR"
        $s3 = "window.location.replace("
        $s4 = "$blocked_words ="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_block_bots_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "logger(\"[BOT] {$_SERVER['REQUEST_URI']} - 500\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_block_bots_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "curl_init("
        $s3 = "base64_encode(time().sha1($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_block_bots_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$click = fopen(\"snsv_blocklist.txt\",\"a\");"
    condition:
        $s0 and $s1
}

rule php_phishing_block_bots_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "rmdir($dir"
        $s2 = "if (is_dir($dir"
        $s3 = "function rrmdir($dir)"
        $s4 = ") { shell_exec($"
        $s5 = "if(preg_match(\"/^<[^\\/](?!php).*>$/\", \"$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_block_bots_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header(\"location:"
        $s3 = "antibot"
        $s4 = "if($Antibot->check()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_BPI_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>BPI Online"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_brphisher_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "<?php echo(\"<b>Conta:&nbsp;</b>\".$_POST['conta'].\"\");?><?php echo(\"-\".$_POST['digito'].\"\");?></td>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_brphisher_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$conteudo =\"<b>INFO:</b> $agencia $conta-$digito <b>SH4:</b> $infor <b>SH6:</b> $resultado_ss6 <b>CPF:</b> $cpf<br>\";"
    condition:
        $s0 and $s1
}

rule php_phishing_brphisher_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$conteudo.=\"<b>CARD:</b> $ver01-$ver02-$ver03-$ver04 <b>VAL:</b> $mes/$ano <b>V/T:</b> $via-$tip <b>CVV:</b> $cvv<br>\";"
    condition:
        $s0 and $s1
}

rule php_phishing_cc_mailer_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$msg=$name.\"<br/>\".$num.\"<br/>\".$mon.\"<br/>\".$yr.\"<br/>\".$cid.\"<br/> ok\";"
    condition:
        $s0 and $s1
}

rule php_phishing_cc_mailer_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "$email_message .= \"CCExpiresYear: \".clean_string($CCExpiresYear).\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_cc_mailer_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "$cardInfo = bankDetails($card_number);"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_centurylink_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "title>Centurylink | Login</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_chasebank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<title>&#"
        $s2 = "<title>&#67;&#104;&#97;&#115;&#101;&#32;&#66;&#97;&#110;&#107"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_chasebank_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:"
        $s2 = "if(!preg_match('/(android|"
        $s3 = "header('location:https://www.chase.com/digital/resources/privacy-security"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_chasebank_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Update Your Account - chase"
    condition:
        $s0 and $s1
}

rule php_phishing_chasebank_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "chase-com</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_chasebank_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&#x2D;&#x20;&#x43;&#x68;&#x61;&#x73;&#x65;&#x20;&#x55;&#x53;"
    condition:
        $s0 and $s1
}

rule php_phishing_chasebank_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&#x63;&#x68;&#x61;&#x73;&#x65;&#x2E;&#x63;&#x6F;&#x6D;"
    condition:
        $s0 and $s1
}

rule php_phishing_chasebank_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "@file_get_contents("
        $s3 = "refresh\" content=\"0; URL=https://chase.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_chasebank_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "chase.com/web/auth"
    condition:
        $s0 and $s1
}

rule php_phishing_chasebank_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "[ -CHASE-SPOX-"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_chasebank_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "&#99;&#104;&#97;&#115;&#101;"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_checker_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "function getStr("
        $s2 = "$start"
        $s3 = "explode($end"
        $s4 = "aypal"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_checker_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "function getStr("
        $s2 = "$start"
        $s3 = "explode($end"
        $s4 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_checker_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "fputs($fp, \"IP: $v_ip - DATE: $v_date - BROWSER: $v_agent\\r\\n\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_china_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#37038;&#31665;&#26356;&#26032;&#35774;&#32622;"
    condition:
        $s0 and $s1
}

rule php_phishing_china_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&#21319;&#32423;&#20320;&#30340;&#37038;&#31665;"
    condition:
        $s0 and $s1
}

rule php_phishing_cibc_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "3C%74%69%74%6C%65%3E%43%49%42%43%20"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_cibc_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>CIBC Verification</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_cibc_001_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "3C%74%69%74%6C%65%3E%50%65%72%73%6F%6E%61%6C%20%42%61%6E%6B%69%6E%67"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_cielo_mailer_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "= \"From: Cielo <"
    condition:
        $s0 and $s1
}

rule php_phishing_citibank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "var domainName='online.citi.com';"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_confirmpassword_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "@$Confirmpassword = addslashes($_POST['Confirmpassword']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_creditagricole_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "://credit-agricole-\".string_random("
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_data_text_html_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "url=data:text/html;"
        $s2 = "preg_match('@(iPad|iPod|iPhone|Android"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_DHL_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>MyDHL"
    condition:
        $s0 and $s1
}

rule php_phishing_DHL_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "header(\"Location: http://parcel.dhl.co.uk\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_DHL_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "DHL International GmbH. All rights reserved.</a></div>"
    condition:
        $s0 and $s1
}

rule php_phishing_DHL_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "DHL Express Tracking</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_DHL_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = ">DHL - Account"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_dir_redirector_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "header(\"location:$DIR\");"
        $s3 = "$DIR=md5(rand("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_dir_redirector_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "@mkdir($"
        $s3 = "\".$dst.\"/index.php?userid=\".$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_discover_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "section=cardmembersvcs/loginlogout"
    condition:
        $s0 and $s1
}

rule php_phishing_docusign_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "https://www.docusign.net/Member"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_dolly_landings_tool_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "dolly_"
        $s4 = "OtherFunctions::returnIfIsset(@"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_dreambig_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "SCAM PAGE PPL V5"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_ebay_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "eBay Inc. All Rights Reserved"
    condition:
        $s0 and $s1
}

rule php_phishing_EE_Limited_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "My EE login"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_ems_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#20013;&#22269;&#37038;&#25919;&#36895;&#36882;&#29289;&#27969;</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_etisalat_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>my email - Etisalat Internet Mail"
    condition:
        $s0 and $s1
}

rule php_phishing_excel_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Excel Online"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_excel_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Excel Document Cloud</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_facebook_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"Location: https://facebook.com"
        $s2 = "$email:$pass:IP -> $ip:UA"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_facebook_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "Use Facebook Account to Login"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_fedex_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<TITLE>FEDEX | Tracking"
    condition:
        $s0 and $s1
}

rule php_phishing_fedex_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "FEDEX Express Tracking<"
    condition:
        $s0 and $s1
}

rule php_phishing_fmd_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "###### ####### ##      ##      #######  #######       #### #### ####### ##     ##   ######   ########"
        $s2 = "##     ##   ## ##      ##      ##   ## ##             ## ### ## ##   ## ##     ##   ##    ##    ##"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_freemobs_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "require(\"send.php\"); file_put_contents($_SESSION['success'], $rx, FILE_APPEND); print"
    condition:
        $s0 and $s1
}

rule php_phishing_freemobs_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include(\"fmob2.html\");"
    condition:
        $s0 and $s1
}

rule php_phishing_freemobs_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">&#70;&#114;&#101;&#101;&#32;&#77;&#111;&#98;&#105;&#108;&#101;&#32;&#45;&#32;&#66;"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "$n1  = $_POST['nutzername'];"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_001_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:"
        $s2 = "header('location:'.$m.$i.'/security/');"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Cryptogramme visuel Information</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"Atm pin"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "gethostbyaddr(getenv(\"REMOTE_ADDR\")),'google') !== false"
        $s3 = "md5(microtime("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>NAB Internet Banking"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"PPL Login : | $ip\";"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_008 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "<META HTTP-EQUIV=\"Refresh\" CONTENT=\"5;URL=<?php echo"
        $s2 = "title>Processing.."
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "Created by l33bo_phishers"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message  = \"+=========================+ Credit Card Info"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mailer($adminemail,$adminemail,\"New info\",$fcontent);"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message = \"Good day Fire Lord"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$SubjectLine = \"Hotmail $ip\";"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "name=chalbhai id=chalbhai method=post"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$vName = base64_encode($_GET[\"sec\"]);$nName = base64_encode($_GET[\"token\"]);header(\"Location: '.$urlz"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "var page = \"./Login?For=Start=LOG <?php include"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "PRIVATE  PpL SCAMA  2015"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "<?php include 'random.php'; echo $randomise; ?>\""
    condition:
        $s0 and $s1
}

rule php_phishing_generic_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "DR_Yassine"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_020 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$file = fopen(\"drspam.txt"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_021 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Created by l33bo_phishers"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$VictimInfo .= \""
    condition:
        $s0 and $s1
}

rule php_phishing_generic_023 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "if($clicid == \"13698\"){"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "if (strpos($str, \"Bienvenue dans votre Espace Client"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "La Banque Postale</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_025_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "nclude \"send.php\";"
        $s3 = "if($_POST[Exmoth] < gmdate(\"m\") and $_POST[Exyear] == gmdate(\"Y\")){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_026 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Impots.gouv.fr - Accueil"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_027 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Free Mobile - Bienvenue dans votre Espace Abo"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "www.t-online.de/service/kundencenter/index_login_hilfe.html\" target=\"toi\" title=\"Hilfe aufrufen\">"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "TradeKey Member Login<"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_030 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "$_SESSION['geoipcodeup'] = $getipcode = base64_decode(\""
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_032 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "($BASE.\"/.wtf/\".$ACN.\".txt\");"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_033 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(strlen($PIN) < 4 || strlen($ACN) < 4){"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_034 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = ">Pisher Black Plugin"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_034_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Brute"
        $s1 = "Pisher Plugin Upload Shell"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_034_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "<?php echo(base64_decode(\""
        $s2 = "\"));echo \"\\x"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_035 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "$host = bin2hex ($_SERVER['HTTP_HOST']);"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_036 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "input type=\"hidden\" name=\"cc\" required"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_037 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "JF9QT1NUWydiaWxsaW5nX2ZpcnN0X25hbWUnX"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_038 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Re-Validate Your Mailbox<"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_039 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$hash = md5($"
        $s3 = "header(\"Location: login.php?&sessionid=$hash&securessl=true"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_040 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "page"
        $s1 = "top.location = page;"
        $s2 = "$randomString = substr(str_shuffle(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"), 0, $length);"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_041 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$Card = $_POST['ccnumber'];"
        $s2 = "$hostname = gethostbyaddr($ip);"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_042 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">Confirm Your Identity | OurTime.com"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_043 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "gethostbyaddr(getenv(\"REMOTE_ADDR\")),'google') !== false"
        $s3 = "function is_bitch($user_agent)"
        $s4 = "$user_agent, $bitch"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_generic_044 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title><?php echo $pass != \"\" ? $pass : \"\" ?> - &#37038;&#31665;&#39564;&#35777;"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_045 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "$yuh = ucfirst($yuh);"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_046 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>FuckMailer</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_047 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "header(\"Location:"
        $s3 = "header(\"Location: $secfile?email=$email\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_048 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "/A-mail.php\" method=\"POST\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_049 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "/us1.php\" method=\"POST\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_050 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "/incc.php\" method=\"POST\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_051 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "/send-email2.php\" method=\"POST\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_052 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "=\"Social Security number\";"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_053 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "$cd= fetch_value($hhhhh,'class=\"blanc\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_054 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "(in_array(\"$shortip\", $deny))"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_055 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "style"
        $s2 = "<form name=\"validation\" method=\"POST\" action=\""
        $s3 = ">Sign in your Email<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_056 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "include('blocker.php')"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_057 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "$data = \"HOT $device->$user,$pass,$ip<$hostname"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_058 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "$md5 = md5(uniqid(time()));"
        $s2 = "function isMobile()"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_058_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "$md5 = md5(uniqid(time()));"
        $s2 = "self.location.replace(loc);"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_059 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "require \"phishtank_check.php\""
    condition:
        $s0 and $s1
}

rule php_phishing_generic_060 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "<title>Account Confirmation"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_generic_061 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
        $s2 = "require_once('block_detectors.php');"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_062 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "action=\"details.php?&sessionid=<?php echo $hash; ?>&securessl=true\" method=\"POST\""
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_063 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "require \"../protect.php\""
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_064 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error'"
        $s2 = "<title>Confirmation - Update"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_065 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "isset($_POST["
        $s3 = "<title>PHP Secure Professional Captcha"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_066 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<h1>Confirm your details to claim your money</h1>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_067 : phishing
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = ", $_SERVER['REMOTE_ADDR'].' '.date('c').\"\\n\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_068 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>impots.gouv.fr"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_069 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">DOMAIN SEARCH ENGINE REGISTRATION"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_069_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Domain Name Search Engine"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_070 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Pay</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_071 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "XBOOMBER_check.php"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_072 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:"
        $s2 = "header('location:https://www.login.alibaba.com');"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_073 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "://www.bdo.com.ph/"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_074 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "fwrite($save,$code);fclose($save);exit(header(\"Location:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_075 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Secure Login"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_076 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "if ($_SESSION['_cctype_"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_077 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "xcazanova"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_078 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $w0 = "Opps! The username does not exist. Please, try again or sign up."
        $s1 = "<title>Sign In |"
    condition:
        $s0 and $s1 and not $w0
}

rule php_phishing_generic_079 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "$ssn = $_SESSION['ssn'];"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_080 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "curl_exec"
        $s2 = "if(mkdir($random, 0755)){"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_082 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "document.getElementById(\"<?echo $"
        $s4 = "window.onload = function()"
        $s5 = "(event.keyCode<48"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_generic_083 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "submitHandler: function(form)"
        $s1 = "$details->bank->name;"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_084 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "CHASE_SPOX"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_085 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Validating"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_085_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#83;&#105;&#103;&#110;&#32;"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_086 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "y Spox"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_088 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "elseif($x != \"\" AND $_GET['page']=='mobiNet"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_089 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "Created by TOPFUD.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_090 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "header(\"Location:"
        $s3 = "@header(\"Location: /\");exit;}@setcookie(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_091 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "SMS Verificacion"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_092 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "\\x"
        $s2 = "str_replace('./index/"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_093 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "if($_GET["
        $s2 = ");exit;}"
        $s3 = "window.location.href"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_094 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Login - Account </title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_095 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "'.$name.$type,base64_decode(explode(',',"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_095_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "($_POST["
        $s3 = "top.location"
        $s4 = "subject = \"PAYPAL LOGIN: \".$_POST"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_generic_096 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<title>FBI Terminal"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_097 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('SITE_ROOT', 'https://webmail.gmx.com.prof-upt.cf/');"
    condition:
        $s0 and $s1
}

rule php_phishing_generic_098 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "_COOKIE"
        $s3 = "Admin ICQ: https://icq.im/hexorstore"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_099 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "fwrite($"
        $s3 = "foreach($_POST as $variable"
        $s4 = ".$pass."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_generic_100 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "fopen($"
        $s3 = "$_SERVER['REMOTE_ADDR'];"
        $s4 = "$password = $_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_generic_101 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "<title"
        $s2 = "if(isset($_SESSION["
        $s3 = "function loggedin"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_generic_redirect_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: InitialTangerine.php\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_redirect_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.tangerine.ca"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_redirect_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "$_SESSION['justowner'] = 'green';"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_generic_redirect_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "@hotmail.') !== false || stripos($domain_check, '@outlook"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_phishing_globalsources_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = /\$_POST\[.password.\]/i
        $s3 = "Publishers Representatives Limited"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_gmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "Location: https://gmail.com"
    condition:
        $s0 and $s1
}

rule php_phishing_gmail_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Google Secure Docs"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_gmail_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "header(\"location: http://www.google.com/mobile/gmail/#utm_source=en-cpp-g4mc-gmhp"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_gmail_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>Gmail: Email from Google</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_gmail_004_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Gmail</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_gmail_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<script type=\"text/javascript\">/* Anti-spam. Want to say hello? Contact (base64)"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_gmail_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "<title>E-mail account validation<"
        $s3 = ">Powered By Google Docs 201"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_gmail_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "header(\"Location: https://docs.google.com/templates?type=spreadsheets&"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_gmail_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "rand=13InboxLight"
        $s3 = "1774256418&fid"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_gmail_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "header( \"Location: index.php?Email=$username&.rand=13InboxLight.aspx?n"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_godaddy_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "GoDaddy"
        $s3 = "fwrite($file,\"Password"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_godaddy_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "GoDaddy"
        $s3 = "<title>Verify Email</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_godaddy_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Sign In</title>"
        $s2 = "<a href=\"https://www.secureserver.net/legal-agreement?id=privacy"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_godaddy_003_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "--+ Godaddy True Login Verified  +--"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_godaddy_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Sign In</title>"
        $s2 = "https://sso.godaddy.com/login?app"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_godaddy_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "GoDaddy"
        $s3 = "uxel.urls.myPinUrl = 'https://mya.godaddy.com/pin"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_godaddy_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Godaddy Verification"
    condition:
        $s0 and $s1
}

rule php_phishing_google_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "header(\"location: https://drive.google.com/#my-drive\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_google_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = ">One Account. All of Google"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_google_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<p class=\"subline\">Google Drive"
    condition:
        $s0 and $s1
}

rule php_phishing_google_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#71;&#111;&#111;&#103;l&#101;"
    condition:
        $s0 and $s1
}

rule php_phishing_gov_uk_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<h1>Tax Refund</h1>"
        $s2 = ">This refund will be credited to your credit/debit card ending <?php echo $_SESSION"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_gov_uk_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = "; URL=https://www.gov.uk/government/organisations/hm-revenue-customs\">"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_gov_uk_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<meta http-equiv=\"refresh\" content="
        $s2 = "html><head><meta http-equiv=\"refresh\" content=\"0;URL=https://href.li/?https://www.gov.uk/"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_gov_uk_004_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "str_replace('##amount_refund##'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_halifax_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "window.location=\"http://www.halifax.co.uk/"
    condition:
        $s0 and $s1
}

rule php_phishing_halifax_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header( \"Location: https://www.halifax-online.co.uk"
    condition:
        $s0 and $s1
}

rule php_phishing_halifax_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.halifax-online.co.uk/personal/logon/login.jsp\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_hitman_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "Created BY Mr.HiTman"
    condition:
        $s0 and $s1
}

rule php_phishing_hotmail_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$subject = \"Hotmail Results | $ip | \".$_POST['Email'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_hotmail_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('Location: https://login.live.com/login.srf?wa=wsignin1.0&"
    condition:
        $s0 and $s1
}

rule php_phishing_hotmail_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".live.com"
        $s1 = "https://sc.imp.live.com/content/dam/imp/surfaces/mail_signin/header/logo_mail.png"
    condition:
        $s0 and $s1
}

rule php_phishing_hotmail_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = " content=\"0;url=http://windows.microsoft.com/en-us/outlook/"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_hotmail_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "header(\"Location:  http://www.live.com\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_huntington_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://onlinebanking.huntington.com/rol/Misc"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_ics_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "Inloggen Mijn ICS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_include_001 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = /include\(['\"][^;]+\/BOT[S_][^;]+\.php/
    condition:
        $s0 and $s1
}

rule php_phishing_include_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "include(\"system.php\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_instagram_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$handle = fopen(\"./logs.txt\", \"a\");"
    condition:
        $s0 and $s1
}

rule php_phishing_irs_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Internal Revenue Service</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_irs_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "IRS Privacy Policy"
    condition:
        $s0 and $s1
}

rule php_phishing_itunesconnect_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:"
        $s2 = "'https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa'"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_itunesconnect_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = ">i&Tau;unes"
    condition:
        $s0 and $s1
}

rule php_phishing_L33bo_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "L33bo phisher"
    condition:
        $s0 and $s1
}

rule php_phishing_landbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Landbank iAccess"
    condition:
        $s0 and $s1
}

rule php_phishing_landbank_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "wcall=wicketAjaxPost("
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_landbank_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>LANDBANK"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_lcl_fr_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "document.location.replace('https://particuliers.secure.lcl.fr/"
    condition:
        $s0 and $s1
}

rule php_phishing_libero_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "start.php?Libero="
        $s3 = "header(\"Location: $redir\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_libero_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"3; url=https://login.libero.it/logout.php?"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_libero_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Libero Mail"
    condition:
        $s0 and $s1
}

rule php_phishing_luno_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%68%74%74%70%73%3a%2f%2f%77%77%77%2e%6c%75%6e%6f%2e%63%6f%6d"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_luno_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Sign in | Luno"
    condition:
        $s0 and $s1
}

rule php_phishing_luno_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "%3C%73%63%72%69%70%74%20%6C%61%6E%67%75%61%67%65%3D%6A%61"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mail_provider_validator_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: mail.php?main_domain='.$"
        $s3 = "= 'http://mail.'.$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$msg = \"Username: $userID\\nPassword : $password\\nCard Number : $cardNumber\\n"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$mmn = $_POST['mmn'];"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$pfw_subject = \"DOPE"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_004 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "mail("
        $s2 = "Kartenummer"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_005 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "mail("
        $s2 = "cgi-bin/webscr?cmd=_login-run\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_006 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail"
        $s1 = "mail("
        $s2 = ".$_POST['cvv2_number']"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = ".$_POST['password'].\"\\r\\n Domain: \".$domainmail."
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = ".= \"Password : \".$_POST['Passwd'].\"\\n"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "$subj = \"Abiodun - $ip\";"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "$message .= \"~~~~~~"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = "$message .='Card number:'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "$msg .= \"Card No:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "Number card: $cc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$subject = \"# Nobody # $user | $ip\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$msg=$eemail.\"<br/>\".$pass.\"<br/><br/> ok\"; $pay=$eemail;"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"location: $indexx\");"
        $s3 = ".= \"Pwd"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "Cvv: \".$_POST['cvv'].\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "interface ANTISCAMMER_GENERAL"
        $s2 = "fwrite($"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>Upload a copy of your credit card"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_021 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "header(\"Location: success.php?email=$email\");"
        $s4 = "mail($email,$emailsubjectuser,$emailuseremail,$useremailheaders);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "$data = \"----------Apple ID/Password Result"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_023 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "$message=$message.\"########CREATED"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "<tr><td>Password: $passwd</td></tr>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$arr=array($bilsnd, $IP);"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_026 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "header(\"Location:http://mail.aol.com"
        $s4 = "mail($bilsnd,$bilsub,$bilsmg,$bilhead);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_027 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($check_email.$this->check,\"=?UTF-8?B?\".base64"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "?rand=13InboxLightaspxn."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = ".= \"Password : \".$_POST['pass"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_029_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "RaiffeisenbankHU"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_029_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.getElement"
        $s2 = "window.location"
        $s3 = "Raiffeisen DirektNet - Internet Banking"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_030 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "?rand=13InboxLightaspxn.177"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_031 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$message .= \"IP:"
        $s3 = "$country = visitor_country();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_032 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message  = \"+=========================+ login Spam Rezult"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_033 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "$message .= \"cvv: \".$_POST"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_034 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "message"
        $s1 = "$message .= \"Card Number"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_035 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "mail($messege,$subject,$rnessage,$headers);"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_037 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "function aol($mail,$pass, $_sock){"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_038 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"Bank Info  | $ip\";"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_039 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"Bill Info  | $ip\";"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_040 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"Chase ReZulT | $ip\";"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_041 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "By Benladen Crazy C0d3"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_042 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "<div class=\"element-separator\"><hr><h3 class=\"section-break-title\">Payment Details</h3></div>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_043 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$redir_url = \"http://"
        $s3 = "\"Reply-To: {$_POST['reply_to']}\\r\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_044 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "header(\"Location: http://mail.daum.net"
        $s4 = "Email: $user\\n Pass: $pass\\nip: $ip"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_045 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "$mailsubj = \"| Login: | $email | $password"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_046 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "<title>404 Not Found</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_047 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$codec = $_POST['feedbacknow'];"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_048 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "passw"
        $s3 = "REMOTE_ADDR"
        $s4 = "$msg"
        $s5 = "(empty($_POST["
        $s6 = "$query = @unserialize(file_get_contents('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_mailer_049 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "$subj = \"PIN: $number3 | $ip\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_049_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "$subj = \"LOGIN-BOI:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_049_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "$subject = \"GOOD | $number1 | $ip\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_049_04 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "header (\"Location: success.html\")"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_049_05 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "header (\"Location: success.php?email=$"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_049_06 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "header (\"Location: invalid.php?email=$"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_049_07 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "?bl=1&email=$ux\");"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_049_08 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location: $secfile?"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_050 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "-----"
        $s2 = "echo \"<script>location.replace("
        $s3 = "$msg .= \"user: \".$_POST['user'].\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_051 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "<?php $send ="
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_052 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "Password: {$userdata['password']}"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_053 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$headers.= \"From: Bradesco"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_054 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: $dst?login=$login&.verify?service=mail&data:text/html;charset=utf-8;base64,"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_055 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "$message .= \"-------------Bron-------------\\n\";"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_056 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "trim (strip_tags (stripslashes ($_POST['passcode'])));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_057 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "$password = $_POST['password'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_058 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject=\"Client Details"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_059 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if (!$mail->Send()) die ('Mailer Error: '.$mail->ErrorInfo);"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_060 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = "echo 'God';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_061 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "= \"$subj \\n\\nLOGIN DETAILS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_062 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "$message = $_POST['ccnum'].\"|\".$_POST['exp"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_063 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "$subject = \"[\".$ip_address.\"] New Login (\".$date.\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_064 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "+ Victim Information"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_065 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = ";if (top.location != location) {top.location.href = document.location.href;}</script>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_066 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "$.post('sendmail.php',{'postemail':stremail,'postpaswrd':strPassword,postdomain:strdomain}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_067 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "$headers = \"From:"
        $s4 = "$_SESSION['password'] = $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_068 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "mail ($"
        $s3 = ": $password"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_069 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "$msgbank = '<html><head><style>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_070 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = /\$_POST\[.password.\]/i
        $s3 = "}<?php $subj ="
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_071 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = /\$_POST\[.password.\]/i
        $s3 = "file_put_contents($file, $msg"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_075 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "===USER CREATED=="
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_076 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "require_once('geoplugin.class.php');"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_077 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "\"====================+"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_078 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "$passwd = $_POST['passwd'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_079 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "getenv(\"REMOTE_ADDR\");"
        $s2 = "mail($send"
        $s3 = "Host:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_080 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "$subject = \"Westpac Result Received"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_081 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = /\$subj[\s]*=[\s]*.[\W]*[\w]*[^@]+mail\(.[\w]+[\W]*[\w]*@[\w]*\.[\w]*.,[^\;]+\);[\s]*echo[\s]*[^\;]+html;/
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_082 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.emiratesnbd.com"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_083 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "$str=$code ->card->type;break;case \"level\":$str=$code ->card->category;break;case \"bank\":$str=isset($code ->issuer ->name)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_084 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "$_SESSION['screen']=$_POST['screen'];$_SESSION['EML']=$_POST['EML'];$msg="
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_085 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "fwrite($save,$msg);fclose($save);$subject="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_086 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "getenv("
        $s3 = "substr(md5(uniqid(rand()))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_087 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$ip = getenv(\"REMOTE_ADDR\");"
        $s2 = "header(\"Location: https://drive.google.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_088 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$subject = \"Your Apple ID was used"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_089 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "session_start();"
        $s2 = "$message .="
        $s3 = "Location:"
        $s4 = "gethostbyaddr"
        $s5 = "$message .= \"-------"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_090 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "XBALTI"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_091 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "mail($userinfo,$subject,$data);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_092 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "elseif(filter_var("
        $s4 = "@json_decode(file_get_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_093 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "mail("
        $s3 = "$VictimInfo1 = \"| Submitted"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_094 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "$crd = $_POST['crd'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_095 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "mail($to,$subj,$msg,$from);"
        $s4 = "gethostbyaddr($_SERVER['REMOTE_ADDR']);"
        $s5 = "$msg = \"Email Address :"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_096 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "passw"
        $s3 = "REMOTE_ADDR"
        $s4 = "if (isset($_SERVER['HTTP_X_FORWARDED_FOR"
        $s5 = "$_POST['username']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_097 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "Email: \".$_POST['Email'].\"\\r\\n Pass: \".$_POST['Passwd"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_098 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "B.r.a.d.e.s.c.o"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_099 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$mesaj = \"IP: $ip | First Name: $fname"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_100 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "META HTTP-EQUIV="
        $s2 = "$click = fopen("
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_101 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = /\$[\w]+[\s]*=[\s]*\$_POST\[.[\w]*.\];[^@]+\$[\w]+[\s]*=[\s]*.[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}.;[\s]*\$[\w]+[^;]+;[\s]*mail\(\$[\w]+[\s]*,\$[\w]+,[\s]*\$[\w]+\);[^:]+header\(..ocation:[\s]*[\w]+.[\w]+.\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_102 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "base64_decode($_REQUEST["
        $s5 = "function post_self("
        $s6 = "$params = \"from=$from&mailto=$mailto&subject=$subject&msg=$msg&self"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_mailer_103 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "Content-Type"
        $s4 = "isnotbottoruser() && $sendtoemail"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_104 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "$passwd = $_POST['password'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_105 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "$mail = base64_decode($_GET['domain']);"
        $s4 = "list ($user, $domain) = explode (\"@\", $mail);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_106 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "curl_setopt($ch, CURLOPT_URL, \"http://mx-api.com"
        $s2 = "echo $finish_url;"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_107 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "pass"
        $s2 = "if($_POST[$value]=="
        $s3 = "window.location"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_108 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "header(\"Location: https://www.linkedin.com/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_109 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "getenv(\"REMOTE_ADDR\");"
        $s2 = ".$_POST["
        $s3 = /\$[\w]+[\s]*\.=[\s]*.[\w]+[^;]+\$_POST\[.[\w]+.\]\...n.;[^\}]+mail\(.([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}).[\s]*,/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_110 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "getenv(\"REMOTE_ADDR\");"
        $s2 = ".$_POST["
        $s3 = /\$[\w]+[\s]*=[\s]*getenv\(.REMOTE_ADDR.\);[^;]+gethostbyaddr\(\$[\w]+\)[^>]+mail\(\$[\w]+,[^:]+From:[\s]*[\w]+<[^<]+<META[\s]*http-equiv=.refresh.[^>]+>.\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_111 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "geoplugin_countryName"
        $s3 = "HTTP_USER_AGENT"
        $s4 = "$password"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_112 : phishing
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "JGlwID0gZ2V0ZW52KCJSRU1PVEVfQUREUiIpOwokbWVzc2FnZSAuPSAiLS0tLS0tL"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_113 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "$country = $details->country;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_114 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "header(\"Location:"
        $s3 = "json_decode(file_get_contents("
        $s4 = "gethostbyaddr($ip);"
        $s5 = "->country;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_115 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = /send\(\$_SESSION,[\s]*\$to,[\s]*\$subject\)[\s]*;/
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_116 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$message .= \"IP:"
        $s3 = "getenv("
        $s4 = "mail($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_117 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "------------\\n\";"
        $s2 = "$message .= \"-----"
        $s3 = "$_POST['password'].\"\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_118 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "bWVtb3J5X2xpbWl0IiwtMSk7CgoKJGxlYWZbJ3ZlcnNpb24nXT"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_119 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "@unserialize(file_get_contents("
        $s2 = "mail($"
        $s3 = "geoplugin"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_120 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "iPhone"
        $s3 = "@mail($to,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_121 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = /\$_POST\[.password.\]/i
        $s3 = "fputs ($"
        $s4 = "mail($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_122 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$data = \"\\r\\nAddress: $address Account: $username Password:"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_123 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "<meta http-equiv=\"refresh"
        $s3 = "$message.= 'Password:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_124 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "Coded By x-Phisher"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_125 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "<meta http-equiv=\"refresh"
        $s3 = "\"Credit Card Number: \".$_POST['cc']."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_126 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "gethostbyaddr($_SERVER["
        $s3 = "(strpos(strtolower($ExactBrowserNameUA)"
        $s4 = "header(\"Location:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_127 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "urlencode($messaggio);"
        $s4 = "@mail($pfw_email_to"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_128 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "centurylink.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_129 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "meta http-equiv=\"refresh"
        $s3 = "htmlspecialchars($_POST['password"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_130 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header(\"location:"
        $s3 = "$_POST['bankname"
        $s4 = "$mail->AddAddress("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_131 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "fwrite($"
        $s3 = "$message .="
        $s4 = "header('HTTP/1.0 403 Forbidden"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_132 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "fwrite($"
        $s3 = "if (!empty($vbvError)) {echo $vbvError; }"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_133 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "$headers = \"From:"
        $s3 = "$dir->read())"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_134 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = /\$message[\s]*\.?=[\s]*['\"][\s]*[-+=*!@#~_.\|\[\]><]{3,}[\s]*[-+=*!@#~_.><\w]{2,}/
        $s2 = /\$message[\s]*\.?=[\s]*[^;]+\$_(POST|GET|SERVER)\[[^;]+;[^\x02]+[\s@]mail\([^;]+\$message[^;]*\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_135 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "mail($"
        $s2 = "json_decode(curl_exec($"
        $s3 = "if(isset($_POST["
        $s4 = "getenv(\"REMOTE_ADDR\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_136 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = /file_get_contents\(.http/
        $s6 = "#0a5d00;'>LOGIN INFORMATION</font> ]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_mailer_137 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "getenv(\"REMOTE_ADDR\");"
        $s2 = ".$_POST["
        $s3 = "+=+=+=+=+=## Dachoka - Tantan ##+=+=+=+=+=\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_138 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "@fclose(@fwrite(@fopen"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_139 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = "geoip"
        $s4 = "$password = $_POST['password'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_phishing_mailer_140 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "isset"
        $s3 = /\}[\s]*\?>/
        $s4 = "= \"Fido INFO"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_141 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "<H1>Fuck Off Punk!</H1>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_142 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = "'Notification of working Function'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_143 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = ".= '<TITLE>404 Not Found</TITLE>' . PHP_EOL;"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_mailer_143_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "isset("
        $s3 = ".= \"From: OUTLOOK\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_144 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "geoplugin_countryName"
        $s3 = "From: OWA"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_146 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "$_POST"
        $s3 = "if(@$_GET['accedi']=='login'){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_147 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$ip = getenv(\"REMOTE_ADDR\");"
        $s2 = "mail ("
        $s3 = "fputs ($file, \"Password"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_148 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "eval(file_get_contents(\"../"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_149 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "passw"
        $s3 = "REMOTE_ADDR"
        $s4 = "$msg"
        $s5 = "mail($send, $subject, $message);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_150 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "passw"
        $s3 = "REMOTE_ADDR"
        $s4 = "$password = urldecode($_POST['pass']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_151 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "getenv(\"REMOTE_ADDR"
        $s4 = "gethostbyaddr($"
        $s5 = "$mes .= \""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_152 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "telegram_send"
        $s4 = "file_put_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_153 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "echo '<meta http-equiv=\"refresh\" content=\"0; url="
        $s3 = "mail($_SESSION[\"send\"],$subject,$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_154 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "\"==Multipart_Boundary_x{$semi_rand}x\";"
        $s3 = "htmlspecialchars($_POST['ssn'],"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_155 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "3D Full Card"
    condition:
        $s0 and $s1
}

rule php_phishing_mailer_156 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "$message .= \"=============IP*DATE*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_mailer_157 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "mail($to"
        $s5 = "V!CT!M INFO</font>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_158 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "passw"
        $s3 = "REMOTE_ADDR"
        $s4 = "$msg"
        $s5 = "mail($to, $subject, $message, $headers);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_159 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "mail($"
        $s3 = "$ip = $_SERVER['REMOTE_ADDR'];"
        $s4 = "mail($to,$subject,$msg,$from);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_160 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subj ="
        $s2 = "$msg ="
        $s3 = "$ip = getenv("
        $s4 = "Password: $passe\\n"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_161 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "mail("
        $s4 = ".@$REMOTE_ADDR"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_162 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "gethostbyaddr($_SERVER["
        $s3 = "window.location"
        $s4 = "mail($to,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_163 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail($"
        $s2 = "From:"
        $s3 = "$_POST["
        $s4 = "mail($to"
        $s5 = "Pwxd:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_164 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "echo"
        $s4 = "$message"
        $s5 = ".= 'Card CVV"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_mailer_165 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "mail("
        $s4 = "$message .= \"Pass"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_mailer_166 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "<title>Mailer</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_mailer_167 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "mail($to, $subject, $"
        $s3 = "$ip = $_SERVER['REMOTE_ADDR'];"
        $s4 = "require_once 'config/config.php';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_microsoft_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<span>Use your Microsoft"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_microsoft_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>Secure Email Portal</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_microsoft_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "<title>Sign in to your account </title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_microsoft_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$testgo = \"$site$testencoded\";"
        $s4 = "explode(\"@\",$_REQUEST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_microsoft_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>Microsoft Office | Share, Upload, Extract</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_microsoft_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Sign in</title>"
        $s2 = "\xc2\xa92018 Microsoft"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_microsoft_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "\xc2\xa92018 Microsoft"
    condition:
        $s0 and $s1
}

rule php_phishing_microsoft_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&#77;&#105;&#99;&#114;&#111;&#115;&#111;&#102;&#116;"
    condition:
        $s0 and $s1
}

rule php_phishing_microsoft_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Microsoft account loading"
    condition:
        $s0 and $s1
}

rule php_phishing_microsoft_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>0FFICE 365"
    condition:
        $s0 and $s1
}

rule php_phishing_microsoft_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Microsoft"
        $s2 = "<title>Microsoft Office Center"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_MrTrovaz_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "\\x"
        $s2 = "Mr Trovaz"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_natwest_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "ocation: http://www.natwest.com/personal/logout/logout.ashx"
    condition:
        $s0 and $s1
}

rule php_phishing_netease_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>\xe7\xbd\x91\xe6\x98\x93\xe4\xbc\x81\xe4\xb8\x9a\xe9\x82\xae\xe7\xae\xb1"
    condition:
        $s0 and $s1
}

rule php_phishing_netflix_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"Location: https://www.netflix.com"
    condition:
        $s0 and $s1
}

rule php_phishing_netflix_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Netflix"
    condition:
        $s0 and $s1
}

rule php_phishing_netflix_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<script>window.location="
        $s2 = "if(isset($_GET['email']))"
        $s3 = "<title>404 NOT FROUND</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_netflix_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "(isset($_POST['email']) && isset($_POST['password'])) ? 'https://www.netflix.com/Login?"
    condition:
        $s0 and $s1
}

rule php_phishing_netflix_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"LOGIN NETFLIX ["
    condition:
        $s0 and $s1
}

rule php_phishing_netflix_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$ip = getenv(\"REMOTE_ADDR\");"
        $s2 = "header(\"Location: http://www.netflix."
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_netflix_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "mail($"
        $s2 = "windows nt 10"
        $s3 = "getenv(\"REMOTE_ADDR"
        $s4 = "curl_setopt($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_netflix_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "mail($"
        $s3 = "From:Netflix"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_netflix_008_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "mail($"
        $s3 = "From: Netflix"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_netflix_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "base64_decode('LmNvb2tpZQ=="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_nordea_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: http://www.nordea.dk"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_office365_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "----+ Office365"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_office365_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$cl = explode( '/', $_GET['cl'] );"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_office365_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "Facebook: facebook.com/Ex.Robotos"
    condition:
        $s0 and $s1
}

rule php_phishing_office365_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "Encrypted by"
        $s2 = ";return EvAl($"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_onedrive_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "base64_encode("
        $s3 = "header(\"location: $src\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_opensrs_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "$_POST['email'].\" \".$_POST['password']"
        $s4 = "$response = mail($to,$subject,$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_optimum_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Sign In to Manage Your Services | Optimum"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_ourtime_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "\"ourtime.php?$host\""
    condition:
        $s0 and $s1
}

rule php_phishing_ourtime_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>ourtime.com"
    condition:
        $s0 and $s1
}

rule php_phishing_ourtime_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "OurTimecom"
    condition:
        $s0 and $s1
}

rule php_phishing_painel_admin_tela_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "$caminho = \"contador.txt\";//nome do arquivo que vai guardar"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "=> Scam Option for labels of Update Page <="
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "' action=\"./loge.php?cmd=_login-submit&dispatch=58"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_001_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<div id=\"headline\"><h2 class=\"accessAid\"><?php echo $processing; ?></h2>"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_001_04 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "php echo $passwordRecovery1_a_0; ?>\" class=\"input-button passwordRecovery"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_001_05 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "$subject = \"LOG-Pp  | $ip\";"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_001_06 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "subject(){return \"CC | \".$_POST['RCP_COUNTRY'].\" | \".$_POST['CN'].\" | \".getenv"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_001_07 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<p class=\"copyright\"><span class=\"securePage\">Secure page</span>PayPal"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "belongs to an existing PayPal/i\", $last_http_page"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_003 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "header('location:https://www.paypal.com')"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "$scam = \"Updateto\";"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Scam PayPal V"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "\xc2\xa6--- PRIVATE  PP SCAM"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_007_01 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "\xc2\xa6--- PRIVATE PAYPAL SCAM"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "L&omicron;gin - &Rho;&#97;&#121;&Rho;&#97;&#108;"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_009 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "aypa"
        $s1 = "('Location:http://paypal.com"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "$(location).attr(\"href\", \"myaccount?cmd=_update&dispatch=<?php echo $dis ?>&locale=en_<?php echo $countrycode ?>\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "=dirname(__FILE__);"
        $s2 = "X-T@MPER V8. */"
        $s3 = "$codelock_enc=\"Antibots.php\"; $codelock_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_paypal_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "/* xPayPal"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_013_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>404 Not Found</title>"
        $s2 = "?=$_SERVER[base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_013_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "(isset($_GET[base64_decode(chr("
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_013_04 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "PayPal"
        $s3 = "$_POST[base64_decode(chr("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_paypal_013_05 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "move_uploaded_file($_FILES[base64_decode("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_paypal_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "&Rho;ay&Rho;al"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = ".html?cmd=_home&locale.x=en_US\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "include('../antibots.php')"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "your bank account</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "<title>"
        $s2 = "<p>Please complete verification steps to restore your credit cards</p>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: signin.php?locale.x=\".substr($"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_019_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = ".md5(rand(1,999)).\"&verification_dispatch=\".base64_encode(md5(rand("
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_020 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "CURLOPT_URL, 'https://history.paypal.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_021 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "CURL"
        $s2 = "email\\\":\\\"service@paypalid.com\\\"}]"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "<title><?php echo $lg_sign['title']?></title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_023 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "if (!xENCRYPTION) {$"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "zpaypal_'.$_SERVER['SERVER_NAME'].'_'.@date"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "@ini_set("
        $s2 = "@session_name('zPayPal_"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_026 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "window.location.replace("
        $s4 = "javascript"
        $s5 = "%3C%21%44%4F%43%54%59%50%45"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_paypal_027 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "\xce\xa1\xd0\xb0y\xce\xa1\xd0\xb0I"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<h1 class=\"headerText\">Open the PayPal app</h1>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "anti"
        $s2 = "track(\"Login page\", $_SESSION"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_029_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "Q29uc3VtZXIgYWR2aXNvcnkgLSBQYXlQYWwgU"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_paypal_029_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Paypal"
        $s2 = "<title>Paypal : Summary"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_029_04 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "[CryptoRhythm]"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_paypal_029_05 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "\">Setup your scam page<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_paypal_030 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "\\x20PayPaI"
    condition:
        $s0 and $s1
}

rule php_phishing_paypal_031 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "PayPal Help Center"
    condition:
        $s0 and $s1
}

rule php_phishing_pheonix_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "// Pheonix | Cannabis"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_postbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Postbank Online-Banking"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_postbank_001_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Postbank Online Banking"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_postbank_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://banking.postbank.de"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_rackspace_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "Login"
        $s2 = "document.cookie = \"rsea_cust=1; expires=\"+next_month+\"; path=/; domain=.rackspace.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_rackspace_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>&#82;&#97;&#99;&#107;&#115;&#112;&#97;&#99;&#101;&#32;&#87;&#101;&#98;&#109;&#97;&#105;&#108;&#58;&#32;&#72;&#111;&#115;&#116;&#101;&#100;&#32;&#69;&#109;"
    condition:
        $s0 and $s1
}

rule php_phishing_rbc_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: http://www.rbc.com/"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_RBCwallet_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = ">The RBC Wallet is now available on all Android phones<"
    condition:
        $s0 and $s1
}

rule php_phishing_RBCwallet_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<meta http-equiv=\"REFRESH"
        $s2 = ">RBC Royal Bank"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_rbfcu_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>RBFCU - Sign In</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_redirect_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "window.location = \"./rand.php\";"
        $s2 = "device.match(/J2ME/i)|| device.match(/BlackBerry/i)|| device.match(/iPhone|iPad|iPod/i)"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = " = substr(md5($random), 0,"
        $s2 = "rand("
        $s3 = "header("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "rand(99"
        $s4 = ".$"
        $s5 = "?<?php echo $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_redirect_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header(\"location:"
        $s3 = "fwrite($id, $conteudo, strlen($conteudo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header('Location:"
        $s3 = "fwrite($novoarquivo,$d .\" - \".$ip.\" - \".$browser.\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "rand(99"
        $s4 = ".$"
        $s5 = "./<?php echo "
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_redirect_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "function Anon_http($srv, $usr, $url, "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$_SESSION['ANONISMA-"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "header('location:'.$scam.$i);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$x=md5(microtime());$xx=sha1(microtime());"
    condition:
        $s0 and $s1
}

rule php_phishing_redirect_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "foreach ($Botname as $word"
    condition:
        $s0 and $s1
}

rule php_phishing_redirect_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = " <aziz>\" . \"\\r\\n\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($file,$ip.\" || \".gmdate (\"Y-n-d\").\" ----> \".gmdate (\"H:i:s\").\"\\n\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "|Data Of berithday = <b><font color='green'>$DOB"
    condition:
        $s0 and $s1
}

rule php_phishing_redirect_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header(\"location:"
        $s3 = "function recurse_copy($JOkEr7"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "header(\"location: login.php?cmd=login_submit&id="
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "echo(\"loading To PayPal"
    condition:
        $s0 and $s1
}

rule php_phishing_redirect_019 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "action=\"<?php echo \"$webscr/?cmd=_login-submit"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_020 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header(\"location:"
        $s3 = "HTTP/1.0 404 Not Found"
        $s4 = "$bannedIP = array(\"^"
        $s5 = "if (substr_count($hostname, $word) > 0) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_redirect_021 : phishing
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "/bmo-canada-billing/"
    condition:
        $s0 and $s1
}

rule php_phishing_redirect_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = ".php?e=<?php echo htmlspecialchars($_GET["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "header(\"Location: loginprodx.php?$md5"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "./index_0.html?login=\""
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_026 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$ipArray = file(\"Bad.txt\");"
        $s3 = "$domain[rand("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_027 : phishing
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "?email=<?php echo $_GET['email']; ?>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "return (isset($_SERVER['HTTP_USER_AGENT'])&& preg_match('/bot|crawl|crawler|proxy|slurp|spider/i', $_SERVER['HTTP_USER_AGENT']"
        $s4 = "if(!IS_BOT_CRAWLER() && !IS_BOT($ip) && $response[\"country_code\"] =="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_redirect_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "base64_encode($_SERVER['REQUEST_URI']."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_031 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "/s.php?mesaj=$mes"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_033 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "if(in_array($geoplugin->countryCode,$whitelisted)) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_034 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "header(\"location: loading.php?email=$email&id=$"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_035 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "echo md5(uniqid(time()));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_036 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "paypal"
        $s1 = "=rand("
        $s2 = "://www.paypal.de-"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_037 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "foreach ($os_array as $regex => $value)"
        $s4 = "if (substr_count($hostname, $word) > 0) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_redirect_038 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "getenv(\"REMOTE_ADDR"
        $s4 = "->geoplugin_countryCode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_redirect_039 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error'"
        $s2 = "fwrite($file,$_SERVER['SERVER_NAME']"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_040 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "window.location.assign"
        $s6 = "if(preg_match('/bot|yahoo|google"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_redirect_041 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "md5(time());"
        $s3 = "){if (!copy($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_043 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "HTTP-EQUIV='refresh"
        $s2 = "}else if(preg_match('/hotmail"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_044 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "HTTP-EQUIV='refresh"
        $s2 = "if (!isset($_GET['view']) && !isset($_GET["
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_045 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "explode(PHP_EOL"
        $s3 = "preg_match_all("
        $s4 = "d{1,3}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_redirect_046 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "getenv(\"REMOTE_ADDR"
        $s4 = "gethostbyaddr($"
        $s5 = "mail($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_redirect_047 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "gethostbyaddr(getenv(\"REMOTE_ADDR\")),'google') !== false"
        $s3 = "if(strpos(gethostbyaddr(getenv("
        $s4 = "window.location.hash;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_phishing_redirect_048 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "<body on"
        $s4 = "if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {"
        $s5 = "var userAgent = navigator.userAgent || navigator.vendor || window.opera;"
        $s6 = /if\s+\(\w+\(\)\s+==\s+\"(Android|iOS|Windows\s+Phone|unknown)\"\)\s+\{\s+window.location.href\s+=\s+\"http[^}]*}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_redirect_049 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "curl_exec"
        $s2 = "fopen(\"iplog"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_redirect_050 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "<body on"
        $s4 = "function delayedRedirect"
        $s5 = "setTimeout('delayedRedirect()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_redirect_051 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$use = $urls[array_rand($urls)];"
        $s3 = "header(\"Location: $use\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_053 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.facebook.com/\");"
        $s3 = "document.write(unescape('%3C%68%74%6D%6C%3E%0A%20%20%20%3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_053_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ". \":https://tools.tracemyip.org/lookup/\".$ip.\":\" . $useragent . PHP_EOL, FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_redirect_054 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$items = Array('https:"
        $s3 = "header(\"Location: $URL\");"
        $s4 = "$URL = $items[array_rand($items)];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_redirect_055 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "fwrite($"
        $s3 = "getenv(\"REMOTE_ADDR"
        $s4 = "->geoplugin_countryName"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_redirect_056 : phishing
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "])?true:false):header(\""
        $s6 = "];exit;}}@touch(__FILE__,"
        $s7 = ")){function getUrla($url){${\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_phishing_redirect_057 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "(filter_var(base64_decode($_GET["
        $s3 = "FILTER_VALIDATE_EMAIL"
        $s4 = "$email"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_rrb_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "<title>*RRS* BY BCTEAM 2015"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_santander_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "$url=\"https://retail.santander.co.uk/EBAN_Accounts_ENS/BtoChannelDriver.ssobto?dse_operationName"
    condition:
        $s0 and $s1
}

rule php_phishing_santander_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "<title>Santander e-Banking"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_phishing_santander_003 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "\\x"
        $s2 = "echo"
        $s3 = /<\?php[\s]*echo[\s]*\"[^;]+\\x[\w]{2}[^}]+include[\s]*\"[^;]+\\x[\w]{2}[^;]+;[\s]*echo[^;]+;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_saudi_post_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "mci.gov.sa"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_scotiabank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = ">As an additional security check, please confirm the following details to verify your identity.<"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "foreach ($os_array as $regex => $value)"
        $s4 = "($details && $details->geoplugin_countryName != null)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_phishing_script_002 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "anti"
        $s2 = /include[^\w][^;\n]{0,20}['\"\/]anti[^;\n]*\.php/
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$message"
        $s1 = "session_start();"
        $s2 = "$message .="
        $s3 = "if(getenv(HTTP_CLIENT_IP))"
        $s4 = "$ip=getenv(HTTP_CLIENT_IP);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "page"
        $s1 = "function randomCha($len)"
        $s2 = "$allowed_countries=array("
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "Exp: \".$_POST["
        $s2 = "function validate_cc_number($cc_number)"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_006 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$ip = getenv(\"REMOTE_ADDR\");"
        $s2 = "header(\"Location: finished.html?dispatch="
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_007 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "if(isset($emails)&&$count>=1)"
        $s3 = "<input type=\"submit\" value=\"$_$Click Here$_$\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_008 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "substr"
        $s2 = "function is_mobile()"
        $s3 = "$user_agent=strtolower(getenv('HTTP_USER_AGENT'));"
        $s4 = "if (in_array(substr($user_agent"
        $s5 = "(strpos($accept,'application/vnd.wap.xhtml+xml')!==false))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_script_009 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include('blocker.php');"
        $s2 = "<title"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_010 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<meta http-equiv=\"REFRESH\" content="
        $s2 = "<title>Loading.."
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_011 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include('blocker.php');"
        $s2 = "function getc($string)"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_012 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "echo \"<!--$random_id-->\";"
        $s3 = "($v_agent == \"Mozilla/"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_013 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "return symlink(readlink($source), $HtaccessSouRce);"
    condition:
        $s0 and $s1
}

rule php_phishing_script_014 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "include \"../bts/anti"
    condition:
        $s0 and $s1
}

rule php_phishing_script_015 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "(strpos($value['target'], 'google')  !== false || strpos($value['target'], 'GOOGLE')) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_016 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "\";if(!empty(${$"
        $s2 = "\"]},FILTER_VALIDATE_EMAIL)){$"
        $s3 = "\"]}=md5(uniqid(rand(),true));if(filter_input(INPUT_POST,\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_017 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "function recurse_copy($"
        $s3 = "header("
        $s4 = "substr(str_shuffle(md5(time()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_018 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "header(\"location:index.html\");"
        $s3 = "header(\"location:home2.html\");"
        $s4 = "if(isset($_SESSION[\"email\"]) && isset($_SESSION["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_020 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "function os_info("
        $s6 = "function bankDetails($cardNumber)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_script_022 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "api.txt"
        $s3 = "ident.txt"
        $s4 = "$_GET['api"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_phishing_script_023 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "$characters[rand("
        $s2 = "function generateRandomString($length"
        $s3 = /header\(.[lL]ocation:[\s]*[\w]+\.php\?[^;]+\.[\s]*generateRandomString\([\d]+\)\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_024 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "$tanitatikaram = parse_ini_file("
    condition:
        $s0 and $s1
}

rule php_phishing_script_025 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "if (strpos($mxhosts[0], \"google.com"
        $s6 = "file_get_contents($file_path);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_script_027 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "<?php echo $email; ?>"
        $s2 = "document.write(unescape('%3C%68%74%6D%6C%3E%3C%68%65%61%64%3E%0A%0A%3C%6D%"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_028 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "api?token='.$token.'&scam"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_029 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title><?php echo $domain ?> Client"
    condition:
        $s0 and $s1
}

rule php_phishing_script_029_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "domain"
        $s1 = "!== false || stripos($domain_check,"
        $s2 = "$domain_check = '@'.strtolower($domain"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_030 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include('../"
        $s2 = "<?=$language["
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_031 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "<? echo($language["
    condition:
        $s0 and $s1
}

rule php_phishing_script_033 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "if($_GET['cmd'] == \"scamlist\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_034 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "><title>(<?php echo $_SESSION["
    condition:
        $s0 and $s1
}

rule php_phishing_script_035 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "preg_match('/bot|crawl|slurp|"
        $s3 = "<title>404 Not Found</title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_036 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "BY XBALTI"
    condition:
        $s0 and $s1
}

rule php_phishing_script_037 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$inputCon=date(\"Y-m-d h:i:sa\").\"---{$iipp}---\".$ref.\"---Refpage=\".$_GET['HOST']"
    condition:
        $s0 and $s1
}

rule php_phishing_script_038 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "rand("
        $s2 = "else if(getenv('HTTP_X_FORWARDED_FOR'))"
        $s3 = "foreach ($browser_array as $regex => $value)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_039 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "fopen(\"LOG-VICTIM.txt\",\"a\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_040 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "@json_decode(file_get_contents("
        $s4 = "$ib_data2 = @json_decode(file_get_contents(\"http://www.geoplugin.net/json.gp?ip=\".$ib));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_041 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "md5(time());"
        $s3 = "@fclose(@fwrite(@fopen(\"ip.txt\", \"a\"),\"\\n\".$ip));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_042 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "fwrite($fp,\"[DETECTED ROBOT]\\n\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_script_043 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = ">Get a notification to your email when your scam page go down"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_044 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "By \xf0\x9f\x84\xb0\xf0\x9f\x84\xbd\xf0\x9f\x85\x83\xf0\x9f\x84\xb8"
    condition:
        $s0 and $s1
}

rule php_phishing_script_045 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "O|P|T|U|S|N|E|T"
    condition:
        $s0 and $s1
}

rule php_phishing_script_046 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "$blocked_words = array(\""
        $s3 = "$hostname = gethostbyaddr($_SERVER['REMOTE_ADDR']);"
        $s4 = "if (substr_count($hostname, $word) > 0) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_047 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "facebook.com/OReo0o"
    condition:
        $s0 and $s1
}

rule php_phishing_script_048 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "file_get_contents(\"https://api.telegram.org/bot\" . $token . \"/sendMessage?\" . http_build_query($datatrue));"
    condition:
        $s0 and $s1
}

rule php_phishing_script_049 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "function recurse_copy($"
        $s3 = "$_SESSION['referer'] = isset($_SERVER['REQUEST_URI'])"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_050 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "function getOs()"
        $s3 = "curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));"
        $s4 = "$apitoken = $_GET['apitoken'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_051 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "echo '<meta http-equiv=\"refresh\" content=\"0; url='.$randomString.'\" />';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_052 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "$total_billing = count_c(\"../result/total_"
    condition:
        $s0 and $s1
}

rule php_phishing_script_053 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "echo \"<script type='text/javascript'>window.top.location="
        $s4 = "\"../result/total_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_054 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Total.: ( <?php echo \"$num_linhas\"; ?> )</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_script_055 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "FREAKZBROTHERS"
    condition:
        $s0 and $s1
}

rule php_phishing_script_056 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$php_js"
        $s3 = "$php_js=(object) array_merge((array) $php_js, (array) json_decode(file_get_contents(__dir__.'/config.json')));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_056_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "$php_js"
        $s3 = "$php_js->fake_base"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_058 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "rand("
        $s2 = "fwrite($filexox2,$ipxox2.\"\\n\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_059 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$content = preg_replace('#<script[^>]*>.*</script>#Usi', '', $content);"
        $s2 = "define('SERVER_AJAX_URL', get_site_protocol().'://'.SERVER_DOMAIN.'/engine/ajax/form.php');"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_script_059_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "bottom_proc("
        $s4 = "<title>[TEXT_"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_script_060 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "\"$username:$password:$ip:$useragent\" . PHP_EOL, FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_script_061 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "echo \"OK\";"
        $s5 = "$allbad = file_get_contents(\"blocklist.txt\");"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_phishing_script_062 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "fSOCIETY"
    condition:
        $s0 and $s1
}

rule php_phishing_script_063 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "require_once('config/config.php');"
        $s4 = "require_once 'config/blocker.php';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_phishing_senha_redirect_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "$senha = geraSenha(67, true,"
    condition:
        $s0 and $s1
}

rule php_phishing_sfr_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Bienvenue sur le site sfr.fr"
    condition:
        $s0 and $s1
}

rule php_phishing_sfr_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "-+ SFR Card  +-"
    condition:
        $s0 and $s1
}

rule php_phishing_sfr_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "$url='https://www.sfr.fr/cas/login';"
    condition:
        $s0 and $s1
}

rule php_phishing_ShadowZ118_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "SHADOW Z118"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_ShadowZ118_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "SHADOW Z118"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_shaw_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "mail("
        $s2 = "Shaw Communications"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_sparkasse_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>netbanking.sparkasse.at"
    condition:
        $s0 and $s1
}

rule php_phishing_sparkasse_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>Online-Banking - Bequem in jeder Lebenslage -"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_standardbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "$msg"
        $s2 = "$msg .= \"PIN: \".$_POST['csp"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_standardbank_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "$msg"
        $s2 = "$msg = \"OTP: \".$_POST['dap"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_standardbank_001_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "$msg"
        $s2 = "$msg .= 'Password : '.$_POST['emailpass"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_stripe_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stripe"
        $s2 = "input type=\"text\""
        $s3 = "<label for=\"reason\">Reason</label>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_stripe_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "Stripe"
        $s4 = "extract($_POST)"
        $s5 = "', print_r($_POST,true), FILE_APPEND | LOCK_EX);"
        $s6 = "', print_r($_POST,true), FILE_APPEND | LOCK_EX);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_stripe_001_03 : phishing
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "Stripe"
        $s4 = "extract($_POST)"
        $s5 = "', print_r($_POST,true), FILE_APPEND | LOCK_EX);"
        $s6 = "extract($_POST);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_stripe_mailer_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "$subject"
        $s2 = "$subject = \"STRIPE LOGIN | \".$ip"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_suntrust_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Bank"
        $s1 = "Online"
        $s2 = "<title>SunTrust - Online Banking"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_TDCanada_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "\"ALERT!Your TD Canada Trust Card has been blocked"
    condition:
        $s0 and $s1
}

rule php_phishing_TDCanada_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<title>TD Canada Trust Accounts"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_TDCanada_002_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0; url=<?php print 'v1.php?personal=' . rand"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_TDCanada_002_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>EasyWeb - Login to our secure financial services"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_TDCanada_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>-TD Canada Trust:Support"
    condition:
        $s0 and $s1
}

rule php_phishing_telegram_mailer_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "api.telegram.org/bot$token/sendMessage?parse_mode=HTML&chat_id="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_phishing_uk_gov_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "We're just checking your information</span>"
        $s3 = "<h1>Tax Refund</h1>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_uk_gov_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "<title>Vehicle Tax Refund</title>"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_UPS_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Home | UPS"
    condition:
        $s0 and $s1
}

rule php_phishing_usbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "/data.us/data.verifyonline"
    condition:
        $s0 and $s1
}

rule php_phishing_usbank_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location: https://www.usbank.com/online-banking/"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_usps_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<form"
        $s2 = "<input"
        $s3 = "About.USPS.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_visa_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Login"
        $s2 = "<title>Visa Inc"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_visa_001_02 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$subj"
        $s1 = "Visa Resultz"
    condition:
        $s0 and $s1
}

rule php_phishing_visa_001_03 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "content=\"Verified by Visa"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_vodafone_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>Vodafone</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_volksbank_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Bank"
        $s2 = "Volksbanken Raiffeisenbanken"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_volksbank_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Bank"
        $s2 = "<title>eBanking Private"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_walmart_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Account"
        $s2 = "Walmart Stores, Inc"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_webmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "<title>"
        $s2 = "?> Webmail Security Systems"
        $s3 = " ?>/favicon.ico\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_westernunion_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "header"
        $s3 = "header(\"Location: signInAction.do.error.html?error=$login\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_phishing_WeTransfer_001 : phishing
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = /<title>WeTra?nsfer(\.com|)/
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_wetransfer_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "WeTransfer Plus"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_whatsapp_001 : phishing
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "window.location = \"http://"
        $s2 = "/js/varien/whatsap"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_whatsapp_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>WhatsApp  \xe2\x80\x94  $Title"
    condition:
        $s0 and $s1
}

rule php_phishing_whatsapp_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "WhatsApp Phisher"
    condition:
        $s0 and $s1
}

rule php_phishing_winmail_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Mail | \xe7\xad\xbe\xe5\x88\xb0"
    condition:
        $s0 and $s1
}

rule php_phishing_Xclusiv_3D_mailer_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "Xclusiv-3D"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_xoom_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "passw"
        $s2 = "\"Xoom Password: \".$_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_yahoo_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "$_POST['yahoopassword"
    condition:
        $s0 and $s1
}

rule php_phishing_yahoo_002 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "header(\"Location:  http://mail.yahoo.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_yahoo_003 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<html"
        $s1 = "<title>Yahoo -&nbsp;login</title>"
    condition:
        $s0 and $s1
}

rule php_phishing_yahoo_004 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = "if(preg_match('/yahoo.co.jp/',"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_yahoo_005 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Yahoo"
        $s2 = "isset($_SESSION["
        $s3 = "login.yahoo.com/account"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_phishing_ZayanBounch_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "||~~ BY ~~ Zayan_bouch"
    condition:
        $s0 and $s1 and $s2
}

rule php_phishing_zerocool_001 : phishing
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "SCAM MADE BY Zer0ocool"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_001 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x6C\\x28\\x67\\x7A"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_002 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "/* copyright */ $x0f=\""
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_003 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\\x61\\x"
        $s2 = "\\150\\x65\\x61\\x64e\\162"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_004 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "exit( header(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_005 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "die(header(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_006 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents($"
        $s2 = "?unserialize(file_get_contents($"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_007 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "\"\\x68\\x65a\\144\\x65\\x72\";"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_008 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "header('Location: '.rand_array"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_010 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "<!-- \xd0\x9a\xd0\x9e\xd0\x94 \xd0\xa1\xd0\x90\xd0\x99\xd0\xa2\xd0\x90 \xd0\x94\xd0\x9b\xd0\xaf \xd0\x91\xd0\x9e\xd0\xa2\xd0\x90 -->"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_011 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "<?php header(\"Location: http://com-"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_012 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$code=\"\";foreach ($data as $var){ $code.=chr($var);} eval($code);"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_013 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "&c=wl_iw&s="
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_014 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "{ echo ' <meta http-equiv=\"refresh\" content=\"0;URL=http://www.google.com\" />';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_redirect_header_location_015 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = " $e = '.php'; $q = \"\"; $test = 'suka-test'; if"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_015_02 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "JHRlc3QgPSAnc3VrYS10ZXN0Jzs"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_016 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "eto spisok ip"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_023 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "echo '<script>window.location=\"http:"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_024 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "fwrite($fp, '<?php header(\"Location: '.$urlz.'\"); ?>');"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_025 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$p=str_replace('href=\"','href=\"./wp-index.php?Q=',$p);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_redirect_header_location_026 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "\"])) header(\"\\x4c\\157\\x63\\141\\x74\\151\\x6f\\156\\x3a\\40\\x68\\164\\x74"
    condition:
        $s0 and $s1
}

rule php_redirect_header_location_027 : redirect
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "if (isset($_SERVER['HTTP_REFERER']) and !isset($_COOKIE["
        $s3 = "array('google.', 'yandex.', 'yahoo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_redirect_header_location_028 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "explode"
        $s2 = "$links = explode('|||', trim(base64_decode('aHR0cDovL"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_029 : redirect
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "strpos($_SERVER['REQUEST_URI'], str_rot13(\"trarevp\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_redirect_header_location_030 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "])){setcookie("
        $s3 = ".php');die();}"
        $s4 = ");header('Location: http:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_redirect_header_location_031 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "header('Location:"
        $s2 = "$spiders = array("
        $s3 = "(!is_bot())"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_redirect_header_location_032 : redirect
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "* Front to the WordPress application."
        $s2 = "$_GET['type']=='login')"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_header_location_033 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "])){setcookie("
        $s3 = "{if(stripos($_SERVER['HTTP_USER_AGENT'],$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_redirect_header_location_034 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "header('Location:"
        $s2 = "$spiders = array("
        $s3 = "stripos($_SERVER['HTTP_USER_AGENT"
        $s4 = "is_bot()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_redirect_header_location_035 : redirect
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "if($_GET[\"bajatax\"]==\"check\") die(\"bajatax\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_js_window_location_001 : redirect
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "code"
        $s1 = "base64_decode"
        $s2 = "=base64_decode(\"P\\x46N"
    condition:
        $s0 and $s1 and $s2
}

rule php_redirect_mass_injection_001 : redirect
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "echo \"<script src="
        $s3 = "chr(115).chr(112).chr(101).chr(99).chr(105).chr(97).chr(108).chr(97)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_analiytics_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "google-analiytics.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_aQ0O010O_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "User-Agent"
        $s1 = "aQ0O010O"
        $s2 = "'header'=>\"User-Agent: aQ0O010O\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_Autodor_Wmsn_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "require_once 'conf.php';"
        $s2 = "$outch = curl_exec($ch);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_Autodor_Wmsn_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "require_once 'conf.php';"
        $s2 = "file_put_contents('conf.php', \""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_Autodor_Wmsn_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "require_once 'conf.php';"
        $s2 = "bb\">BBCode</a>"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_Autodor_Wmsn_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "require_once 'conf.php';"
        $s2 = "header('Location: '.$dir);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_Autodor_Wmsn_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "$rcakey = 'rca.1.1."
        $s2 = "$maxfoto"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_Autodor_Wmsn_006 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once 'conf.php"
        $s2 = "yandex.ru"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_b_call_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "= preg_replace(\"~<body[^>]*>~"
    condition:
        $s0 and $s1
}

rule php_spamseo_b_call_001_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "ob_start(\"b_call\")"
    condition:
        $s0 and $s1
}

rule php_spamseo_backlinks_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "http://www.backlinks.com/engine.php"
    condition:
        $s0 and $s1
}

rule php_spamseo_backlinks_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "LXNpemU6MjRweDtmb250LXdlaWdodDpib2xkIj5QbGVhc2Ugc2VsZWN0IFlvdXIgU0hPUCE8L3A+PC9jYXB0"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_backlinks_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "function curlRequest($url)"
        $s4 = "require_once('url_slug.php');"
        $s5 = "<?php include('siteconfig.php');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_bannedIP_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "HTTP/1.0 404 Not Found"
        $s2 = "$bannedIP = array(\"^66.102.*.*\","
        $s3 = "header('HTTP/1.0 404 Not Found"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_beaninjector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "$wp_uri = pack(\"H*\","
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_bkeyword_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "$redirect = str_replace(\"XXXXXXXXXXXXX"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_black_hat_client_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$_SERVER['HTTP_USER_AGENT']=\"THISISTESTOPEN\";"
    condition:
        $s0 and $s1
}

rule php_spamseo_block_injector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "echo$"
        $s2 = "echo$block;file_put_contents($page_file"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_block_injector_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "echo$"
        $s2 = "echo$content;die();}}}"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_block_injector_gen_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "if(stristr($buffer,\"##\".$page.\"|\")){$entry"
    condition:
        $s0 and $s1
}

rule php_spamseo_brands_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>wholesale nike shoes,cheap nike shoes sale,wholesale nike free 3.0,cheap nike air max 90</title>"
    condition:
        $s0 and $s1
}

rule php_spamseo_brands_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "<meta name=\"keywords\" content=\"nike air max"
    condition:
        $s0 and $s1
}

rule php_spamseo_brands_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "str_replace(array($"
        $s6 = "array($dir, 'http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_burst_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('__DOMAIN_NAME__', 'megatechnologies.com');"
    condition:
        $s0 and $s1
}

rule php_spamseo_cache_managed_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "DirectoryIndex cache.managed.php"
        $s2 = "chmod($dir.\"/cache.managed.php\", 0777);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_chinese_spam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "if (preg_match(\"/zh-c/i\", $lang)==false||preg_match"
        $s3 = "echo \"<script type='text/javascript' src='http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_chunkarr_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "$GLOBALS"
        $s2 = "eval($GLOBALS[\"chunkarr\"]["
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_classwptext_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "$tpl_path = '/wp-admin/includes/template.html';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_cmFuZA_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if(preg_match("
        $s2 = "if(preg_match(chr(47).chr(103).chr(111).chr(111).chr(103).chr(108).chr(101).chr(124)."
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_crypper_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = /\"\/index\/\?[\d]{8}/
        $s2 = "if(!$_COOKIE["
        $s3 = "= \"http://\".$domain.$path;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_crypper_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = /\"\/index\/\?[\d]{8}/
        $s2 = "$string = '<script type=\"text/javascript\">';"
        $s3 = "$referer = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] :"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_crypper_003 : spamseo
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = /\"\/index\/\?[\d]{10}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_spamseo_crypper_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = /\"\/index\/\?[\d]{8}/
        $s2 = "if(!$_COOKIE["
        $s3 = "}if(!$_COOKIE[base64_decode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_crypper_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "fopen("
        $s2 = "base64_decode('dys=')"
        $s3 = "[base64_decode('ZG9tYWlu')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_datalinks_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "fwrite($csached, $datalinks);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_dbload_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_functio"
        $s1 = "add_action('init', create_function('', implode"
    condition:
        $s0 and $s1
}

rule php_spamseo_dbload_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init', create_function('', implode"
        $s3 = "implode(\"\\n\", array_map(\"base64_decode\", unserialize"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_dbload_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init', create_function('', implode"
        $s3 = "create_function('', implode(\"\\n\", unserialize(get_option("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_dbload_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "get_option"
        $s2 = "create_function('', get_optionsjoom('joomplaupdateopt'));"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_do_backdoor_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "/cron.php');"
        $s2 = ".'/wp-admin/includes/get.php');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_do_backdoor_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "/cron.php');"
        $s2 = ";$root_path = substr($absolutepath,"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "trim(file_get_contents(dirname(__FILE__).'/../bin/.zdaccess"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array_unshift($data,119,105,110,100,111,119,46,116,111,112,46"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "check(dirname($_SERVER['DOCUMENT_ROOT'] . '/RND') , $dirs);"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "function Spider_RAND($length)"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "\").$user_agent_en.line_output(\""
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "if(strpos(\"qqq \".$thisdoorfilename, \"?com=botdetected\")){"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "getContent($myHost, $pathOnMyHost.$path, $template, $pathToDor);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "\"bot\")===false || $cloakornotcloak==\"no\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "REMOTE_ADDR|HTTP_REFERER|HTTP_USER_AGENT|\\"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$c2.\"admintask.txt\",\"kodirovka\""
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_012 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$relink_mas[$relink_n]."
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_014 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "thisdoorwayurl=\\\"&clurl=\\\".trim(\\$thisdoorwayurl);"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_015 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "$querystring; ob_clean(); $filedata =theUrlContent($furl); echo $filedata; exit;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_017 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "=base64_decode('YmluZ2JvdA==');$"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_019 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = ": BLACK_ANG3L :"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_020 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "function Reads($url){"
        $s4 = "if(empty($html)){\"<p align='center'><font color='red'>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_021 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$Content_mb=file_get_contents($Remote_server.\"/index.php?host=\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_022 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = ". DIRECTORY_SEPARATOR . $"
        $s2 = ")>5000) { break; }"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_023 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "die('>UP_OK<');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_024 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "PRENAME"
        $s2 = "define(\"DOMTXT\",\"http://"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_024_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "$str_hm = curl_get_from_webpage_one_time(\"\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_025 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = "CURLOPT_REFERER, \"http://www.googlebot.com/bot.html\""
        $s3 = "if(stristr($reqstr,\"jquery\")==false && stristr($reqstr,\"ckeditor\")==false"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_026 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "{manytext_bing}"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_028 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "Parasite.php?\",$nhhtml);}"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_029 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "str_replace($url,$_SERVER['HTTP_HOST'].$path_to_dor,$html);"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_030 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "if(fwrite($f,stripcslashes($_POST[\"c\"]))){"
        $s2 = "$info='<a href='.'\"'.$_POST[\"title\"].'.html'.'\">'.$_POST[\"title\"].'</a></br>';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_031 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "$neirongx = file_get_contents($wangzhang.'site_map.php?&pages='.$aa."
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_032 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "file_put_contents($this->docRoot.'/' . $this->subFolder.'/' . $hash . '.txt', $template);"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_033 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "echo '<!DOCTYPE html><head><meta http-equiv=\"refresh\" content=\"0;url='.$jumpcode.'\"></head><body></body></html>';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_033_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "array('id'=>\"http://\".$domain.$path.\"?wp-content"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_034 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "=str_rot13(chr(114).chr(105).chr(110).chr(121));eval(strrev('};)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_035 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "include($d_path.$files[2]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_036 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "=file_get_contents($dor_dir);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_037 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "if(CheckAgt($spi)== '1'){"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_038 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents($seurlfile, base64_encode($savedata));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_039 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "preg_match_all(\"/<content>(.*?)<\\/content>/s\", $sOutContent, $lssArrayMatches);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_040 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "if ($_COOKIE['wp_defined'] != $passwordhash) {"
        $s3 = "str_replace(\"[BKEYWORD]\", stripslashes($_POST['Title']),"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_041 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$_image_folder_ = $folder_name.$firstName.$lastName.$folder_escape;"
        $s2 = "$featureInfo = $row['featureInfo'].\" \".base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_042 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "function outScript"
        $s6 = "sync_htaccess($htaccess_rule"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_043 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "$a',strrev(';)a$(lave'));"
        $s3 = "\"(edoced_46esab(lave'));"
        $s4 = "chr("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_043_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "$a',strrev(';)a$(lave'));"
        $s3 = "\"(edoced_46esab(lave'));"
        $s4 = "create_function('$a',s"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_044 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "mkdir(\"$dirname\", 0777);"
        $s2 = "fwrite ($out, \"RewriteEngine On"
        $s3 = "unlink($scriptname);"
        $s4 = "echo \"<b><b><b>http://\".$_SERVER['SERVER_NAME'].\"/$dirname</b></b></b>\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_045 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "$web = str_replace('www.','',$_SERVER['HTTP_HOST']);"
        $s2 = "$zip->addFile('index.txt');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_046 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "explode"
        $s2 = "yumingid"
        $s3 = "lineid"
        $s4 = "x5"
        $s5 = "@'$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_046_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "explode"
        $s2 = "yumingid"
        $s3 = "lineid"
        $s4 = "$urlrules"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_046_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "$returnVal=str_replace_once(\"$\",chr(rand("
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_046_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
        $s2 = "str_ireplac"
        $s3 = "{function str_ireplace($from,$to,$string){return trim"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_046_05 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "explode"
        $s2 = "yumingid"
        $s3 = "lineid"
        $s4 = "/junchi.php?yid=%d&lid=%d&jumpurl=%d"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_046_06 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "explode"
        $s2 = "!=''?preg_replace(sprintf(\"/^%s\\/\\??/si\","
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_046_07 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
        $s2 = "_INJECTED"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_046_09 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
        $s2 = "if(is_numeric($_GET[\\'sitemap_num\\']))"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_046_10 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
        $s2 = "str_ireplac"
        $s3 = "//header('Content-Type:text"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_046_12 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
        $s2 = "if(isset(${\"\\x5f\\x53\\x45\\x52\\x56\\x45\\x52\"}[\"\\x52\\x45\\x51\\x55\\x45\\x53\\x54\\x5f\\x53\\x43\\x48\\x45\\x4d\\x45"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_046_14 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "trim(base64_decode("
        $s4 = "function decrypt_str($str)"
        $s5 = "function find_uri_ltp_val_file($req_uri)"
        $s6 = "function find_secret_dir($root"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_046_15 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "0O0"
        $s2 = ",CURLOPT_TIMEOUT,100);"
        $s3 = "foreach(${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_046_16 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "O0_"
        $s2 = /(\$[0O_]+[\s]*=[\s]*('[^']+'|[\d]+);[\s]*){3,}\$[0O_]+[\s]*=[\s]*array\([^\)]+\);+[\s]*(\$[0O_]+[\s]*=[^;]+;[\s]*)+\?>/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_046_17 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "0O0"
        $s2 = "] as $header){header($header);}echo $"
        $s3 = "\\x73\\x65\\x72\\x76\\x65\\x72\\x5f\\x64\\x6f\\x6d\\x61\\x69\\x6e"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_046_18 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "sprintf($"
        $s2 = "isset(${\"\\x5f\\x53\\x45\\x52\\x56\\x45\\x52\"}"
        $s3 = "=array('domain'=>$"
        $s4 = "\"]:''):'/';$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_046_19 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "sprintf($"
        $s2 = "isset(${\"\\x5f\\x53\\x45\\x52\\x56\\x45\\x52\"}"
        $s3 = "=array('domain'=>$"
        $s4 = "=urldecode(\"%"
        $s5 = "=NULL,$O"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_046_20 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "OO00"
        $s3 = "='';"
        $s4 = "=0;"
        $s5 = "='.';"
        $s6 = "} . $"
        $s7 = /\$[\w]+[\s]*=[\s]*'[\w]+';[\s]*(\$[\w]+[\s]*=[\s]*[^\n;]+;[\s]*){2,}eval\([\s]*\$[0O]+[\s]*\([^;]+\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_doorwaygen_047 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = ", \"php\")) AND (!strpos("
        $s3 = "(str_word_count($a)>3) echo $a.\"<br>\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_048 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$file_extend=\".html\";"
        $s3 = "$body= file_get_contents($url_full);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_049 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "';eval($"
        $s4 = "(\"cHJlZ19yZXBsYWNlKCIv"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_050 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require(\"setupconfig/install.php\");"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_052 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "User-Agent"
        $s1 = "$insertafter = $html->find($CONFIG['insertafter']);"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_053 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$f[1]=\""
        $s2 = ";$z[1]=\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_054 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "doorgen2/note"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_055 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "echo \":::NICE:::{$links[$i2]['login']};{$"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_056 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "if($_GET['id']=="
        $s5 = "=(htmlspecialchars(file_get_contents("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_057 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "if(isset($_POST['action']) && (isset($_POST['key']) && $_POST['key']==$this->key) && isset($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_058 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$wp_nonce);if(isset($wpautop"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_059 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "echo '<bad_update>\\'cant open index file for writing"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_061 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "9ICRyb290LiIvX2Rvb3J3YX"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_062 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "$ratel->init($ruri, $host, $is_bot);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_063 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = ",'w') or die (\"Error opening file"
        $s4 = "=\"<meta name='google-site-verification' content='$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_064 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$needvalue=mysqli_query($dbcon,$sql);$needvalue=mysqli_fetch_array($needvalue);"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_064_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "$sitecode=str_ireplace($permalink,\"#\",$sitecode);echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_065 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "{door-home}','{donor-home}"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_066 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "$_POST[\"upd\"])) $client->update_client();"
        $s2 = "echo $client->getContent();"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_067 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "fopen(\"$dirname/.htaccess\", \"w\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_068 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "$codevyp=true;"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_068_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "/i',$_SERVER['HTTP_USER_AGENT'])){"
        $s2 = "echo file_get_contents(\"http"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_069 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "echocrond($LoadLogs . 'c');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_070 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "Referer: http://{$url['host']}"
        $s2 = "if ($type == 'html' && strpos($result, \"<!-- a:\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_071 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "$get_url = $api.\"?bot=id&shkey=\".$shkey.\"&act=1\".\"&id=\".$id.\"&suffix=\". $suffix .\"&md5=\".$url_md5"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_072 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo $content"
        $s3 = "php_display($remote)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_073 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "CreateFile(\"content.php\",$FileCon);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_074 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "echo"
        $s3 = "if(preg_match(\"/googlebot|slurp|msnbot|bingbot/i\", getenv(\"HTTP_USER_AGENT\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_075 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "str_ireplace(\"window|href|location)\",\"\",$codes)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_076 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('U8n3z7dNr8rMS8t"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_077 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "create_function(\"\","
        $s2 = /\$[\w]+[\s]*=[\s]*\$[\w]+\(\$[\w]+\(\$[\w]+\)\);[\s]*\$[\w]+[\s]*=[\s]*create_function\(\"\",[\s]*\$[\w]+\);[\s]*\$[\w]+\(\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_078 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "(fwrite($fp,"
        $s6 = "->init("
        $s7 = "function_exists('is_user_logged_in'))"
        $s8 = "$page .= isset($parts["
        $s9 = "{$parts['host']}\\r\\n"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8 and $s9
}

rule php_spamseo_doorwaygen_079 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "if (window!=top) {top.location.href = url;} else { document.location= url;} } window.setTimeout("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_080 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x63\\x61\\x6c\\x6c\\x5f\\x75\\x73\\x65\\x72\\x5f\\x66\\x75\\x6e\\x63"
        $s2 = "\\x7a\\x69\\x6e\\x66\\x6c\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5f\\x64\\x65\\x63\\x6f\\x64\\x65\\x28\\x27$"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_081 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$tab = $tablets[rand(0, count($tablets))]; echo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_083 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "KClickClient"
        $s3 = "$checkauthrule();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_083_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "isset($landing_url_parts['query'])"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_083_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "KClickClient"
        $s3 = "readfile($name);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_084 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "if($_404 == true) echo die404();"
        $s2 = "rows=20>'.file_get_contents(DATA.'log.txt"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_085 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "@mysqli_fetch_array(mysqli_query($conn,'select count(*) as num from '.$table_prefix.'posts where post_status =\"publish\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_087 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = /<\?php\s*\$\w+\s*=\s*['\"][^;]+;\s*(\$\w+\s*=\s*\$\w+\[\d+\]\s*\.\s*\$\w+\[\d+\]\s*\.[^;]+;){2,}\$\w+\(\d+\)\s*;\s*\$\w+\s*=\s*\$\w+\(['\"]{2}\s*,\s*\$\w+\(\$\w+\(['\"][^\)]+[\)\s]+\s*;\s*\$\w+\(\)\s*;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_087_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = /<\?php\s*(\$[\w]+\s*=\s*'[^']+'\s*\^\s*'[^']+';){2,}\$\w+\s*=\s*\$\w+\('',\s*\$\w+\(\$\w+\('[^']+'\s*\^\s*'[^']+'[\s)]+;\s*\$\w+\(\)\s*;/
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_089 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "str_replace(\"</span>\", \"\", $"
        $s5 = "echo \"<p>\".implode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_090 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "echo \"<html><head><meta http-equiv='refresh' content='0; url=$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_091 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "require_once(\"files/config.inc\")"
        $s2 = "$url_array = file(\"files/url.txt\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_091_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "= substr(md5($_SERVER['QUERY_STRING'])"
        $s3 = "document.write('<'+"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_091_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "require_once(\"files/config.inc\")"
        $s2 = "= str_ireplace('</head>','<script type=\"text/javascript\">var '.str_replace(array("
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_091_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "create_file"
        $s6 = "create_file(\"config.inc\",$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_091_05 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "create_file"
        $s6 = "echo('<a href=\"'.$_SERVER['REQUEST_URI'].'?file='.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_092 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "aWYoJHRtcFsnaG9zdCddKX"
        $s2 = "$outputData = create_function(false, $rawData);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_093 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "$indextitle"
        $s4 = "$productid=str_replace('.html','',$productid);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_094 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "preg_match('/wp-login.php|wp-admin|administrator/i"
        $s4 = "function havelinks()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_096 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "sE8Ot7r9UPvQct5BIMT/uS0Wc2dF8WHKFsnIACTyDKI6dKbN1e3uH2q+bBmzfwFvn9sHHwtmDHk0FqBuIJ8mu44x69O/kv"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_097 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "$_SERVER["
        $s3 = "(trim($qcall)!="
        $s4 = "(in_array($ip, $bot_list))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_098 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "$JsHttpRequest = new Subsys_JsHttpRequest_Php"
        $s4 = "$out_data = fread($fid_pe,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_099 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "eval(base64_decode(\"LyoqDQogKiBTaWduYXR1cmUgRm9yIFJlcG9ydA"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_101 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$homepage=str_replace_once(\"<title>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_102 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "function getRealref()"
        $s3 = "$_SERVER['GEOIP_ADDR"
        $s4 = "function getRealua()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_102_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "function getRealref()"
        $s3 = "$_SERVER['GEOIP_ADDR"
        $s4 = "@session_start();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_102_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "function getRealref()"
        $s3 = "$_SERVER['GEOIP_ADDR"
        $s4 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_102_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "CURLOPT_POST, true);"
        $s2 = "function getRealref()"
        $s3 = "\"\\x"
        $s4 = "); goto"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_103 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "$______"
        $s2 = "$__='printf';$_='Loading"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_104 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "function check_br()"
        $s2 = "<title>[TITLE]</title>"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_106 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = /\$[\w]+[\s]*=[\s]*([\W][\w]*[\W]\.?)*;[\s]*\$[\w]+[\s]*=[\s]*array\(.{1000,}eval\(\$[\w]+\(\$[\w]+\(\$[\w]+\(..,\$[\w]+\)\)\)\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_108 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if(md5(file_get_contents(__FILE__))!=$_POST['md5_new_set']){"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_109_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$workerHash = md5_file($_SERVER[\"DOCUMENT_ROOT\"].'/'.$task['key"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_109_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "crontab.txt', '* * * * * usr/bin/php '.getcwd().'/'.$launcher.'.php"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_109_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "exec('php '.getcwd().'/'.$fold.'/'.$worker.'.php"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_110 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "wBcfJjvnrV5K7g7PEkt313Dvveae6MwDJZDKZTCYzySR"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_111 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "create_function('', gzuncompress(base64_decode(\"eAHNW1lzG"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_112 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "fakebot.enabled"
        $s2 = "door page rendered"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_113 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "file_get_contents('php://input"
        $s5 = "str_replace(basename($_SERVER['SCRIPT_URI']),\"\", $result['PostURL']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_114 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base64_decode"
        $s2 = "array_map(\"base64_decode\", unserialize($"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_115 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "AND (str_word_count($keywords)<"
        $s6 = "curl_setopt($ch, CURLOPT_URL, \"http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_116 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "$page = new Page($template, $text, $keyword, Blog::gen_links(Blog::$min_page_links"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_117 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "register_shutdown_function"
        $s1 = "preg_replace('#<script(.*)"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorwaygen_117_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "register_shutdown_function"
        $s1 = "require_once(ABSPATH . 'wp-settings.php');"
        $s2 = "preg_replace('#<script(.*)"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_118 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "array('google', 'yandex', 'bing', 'GeccoBot');"
        $s6 = "strpos_array($_SERVER['HTTP_USER_AGENT'],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_119 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "\"POST {$url['path']}?bot_ip=\" . urlencode($_SERVER['REMOTE_ADDR']) . \" HTTP/1.1\\r\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_120 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "base64_decode($"
        $s4 = "file_put_contents($"
        $s5 = "ZnpoYW5xdW4uY29t"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_121 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "kQeuaDlnvHKY5sLuWvkXuByfFbONOI2ghIPkdTAjmUIJOhvJNJcFKxd3OzpBx"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_122 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "asmoutdo("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_123 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "_([a-zA-Z0-9]+)\\.html/i\", $_SERVER[\"REQUEST_URI\"],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_125 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "}.$O"
        $s3 = "global $xmlDir,$mapMin,$mapMax,$mapNum,$mapPrefix,$plusNum;"
        $s4 = "$xmlDir = 'sitemap';"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorwaygen_126 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "function mysqlTableSeekWP($"
        $s5 = "$GLOBALS['show_xpost_lnk']"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_127 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "$content=str_replace('class"
        $s6 = "function replace_index"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_128 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "__FILE__"
        $s2 = "JEhvZXJ6az0iRE1tQVlKcHJORVpxalJRbkd3SWdLVnVCY09pYlRQZUNkemxTeW"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_129 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "unserialize($doorkeys);if (!is_array($doorkeys) || count($doorkeys) == 0) {echo"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_130 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "$GLOBALS['_ta_campaign_key']"
        $s2 = "return \"http://{$domain}/get_core_files\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_130_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "$GLOBALS['_ta_campaign_key']"
        $s2 = "print load_fullscreen_iframe($response['url']);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_132 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "preg_"
        $s3 = "['a'] == 'doorway2') {if ($_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_133 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "='b"
        $s2 = "'.'"
        $s3 = "eyJhZGJsb2NrIjp7fSwiZXhjbHVkZXMiOiIifQ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_134 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "_url_tek=xinclude(\"$x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_135 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "$this->pagesData[$link]. '</a>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_136 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "lVsLc9u2sv4rjMKGZEtTDzuuH6KTTOw0npOHr63cdsZxNRQJibymSF6C8qO2z28/uwuABCk57ZlOZRJcLBa"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_137 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "getContents($gourl);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_138 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "data:text/javascript;base64"
        $s4 = "function findMatches($request,"
        $s5 = "<?php echo $title ?></title>"
        $s6 = "$requestsTitles = array"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_138_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "data:text/javascript;base64"
        $s4 = "function findMatches($request,"
        $s5 = "<?php echo $title ?></title>"
        $s6 = "$keysArr = explode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorwaygen_139 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "function sitefun($"
        $s7 = "&page=' . $rUrl . '&bot="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_doorwaygen_141 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "$rootPath"
        $s7 = "$domain = str_replace(\"*\", \"www\", $domain);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_doorwaygen_142 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "str_replace(\".html\""
        $s2 = "Googlebot"
        $s3 = "strpos($url, '&sitemap=xml"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaygen_143 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "$inter_domain"
        $s7 = "echo $data_new.'===>Submitting Google Sitemap: OK'.PHP_EOL;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_doorwaygen_144 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "@socket_create(AF_INET, SOCK_STREAM, SOL_TCP);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwaygen_145 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "Z25vcmVfdXNlcl9hYm9ydCgxKTs"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwaygen_146 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "base64_decode($_REQUEST["
        $s5 = "strlen($html) < 200 && strpos($html, 'window.location"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_147 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "function wp_file_see($file)"
        $s5 = "$open_pages[\"$open_meta\"];}elseif(isset($open_pages[\"$open_links\"]"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_doorwaygen_148 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "H4sIAAA"
        $s1 = "AAA=H4sIAAA"
        $s2 = "0000001cH4sIAAAAA"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorwayineed_001 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "ineedthispage=yes"
        $s2 = /<\?php[\s]*if[\s]*\(+empty\(\$_GET\[.ineedthispage/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorwayineed_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "ineedthispage=yes"
        $s2 = "$newclient = $new_request->request(\"http"
        $s3 = "HttpRequest($useCurl"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwayineed_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "ineedthispage=yes"
        $s2 = "gzcompress(base64_encode"
        $s3 = "gzuncompress(urldecode"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwayineed_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "ineedthispage=yes"
        $s2 = "function placeLinks"
        $s3 = "$curr"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorwaypharma_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>404 Not Found</title>"
        $s2 = "$pills=explode('|',$pills);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_b9i9n9g_001_01 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "= \"<b>Client type-</b> \" . $"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "Accept-Language: zh-cn"
        $s6 = "eval (http_get"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_doorway_downloader_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "if ($str === false && ini_get(\"allow_url_fopen\") == \"1\") {"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorway_downloader_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "$Remote_directory = $Remote_server.\"/d.php\".\"?type=index.php&host=\".$host_name.\"&directory=\".$Branch;"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorway_downloader_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "if (eregi('-dbst',$_SERVER['REQUEST_URI'])) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "$xia = '<a href=\"' . $pathurl . $preFix . $midFix . $nextUrl . $sufFix"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorway_downloader_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "if (!file_exists($UpFN)) die(\"No API\");"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorway_downloader_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$Remote_directory = $Remote_server.\"/pstmu.asp\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "_my_images = curl_get($"
        $s2 = "_query = urlencode(trim($_GET[\"type\"]));"
        $s3 = "_useragent, 'yahoo')!==false || strpos($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorway_downloader_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "$pro_param = isset($_GET[\"pro_param\"])?$_GET[\"pro_param\"]:\"\";"
        $s2 = "$out = str_replace('[##jumpcode##]', $jumpcode, $out);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_013 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$actual_redir_url=trim(@file_get_contents(base64_decode($e2)));"
        $s3 = "Header (\"Location: \".$out_url);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorway_downloader_014 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "} } else { if(file_exists($home_dir.'cache/'.$uric.'_cache.txt')) { $code = @file_get"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorway_downloader_015 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$str_hm = curl_get_from_webpage_one_time(\"http:"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "function the_end(){"
        $s2 = "public $door_url = \"\\"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_017 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "if (!is_file('html.zip')) die('fail');"
        $s2 = "if ($mess == 'load' and $file) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_017_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "User-Agent"
        $s1 = "$pathOnMyHost,$_SERVER['HTTP_HOST'].$pathToDor,$html);"
    condition:
        $s0 and $s1
}

rule php_spamseo_doorway_downloader_017_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "$linksToInsert = implode(array_slice($contentArray, 0, $_POST["
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_019 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "isset($_SERVER['HTTPS']) ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\""
        $s2 = "fopen($file,\"w\") or die(\"Unable to open file!\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_020 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "echo 'Manager V1';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_doorway_downloader_021 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "urldecode("
        $s2 = "aWYgKHByZWdfbWF0Y2goJy9nb29nbGV8eWFob298bXNufGJvdHxiaW5nfGFvbHxzcGlkZXJ8c2V"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_022 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "curl_init("
        $s4 = "spiderhandler.php?checkdomain&time="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorway_downloader_023 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "/handlers/spiderhandler.php?checkdomain&time="
    condition:
        $s0 and $s1
}

rule php_spamseo_doorway_downloader_024 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "_decrypt']['?"
        $s2 = "??']=base64_decode"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_025 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ".$"
        $s2 = "\".\""
        $s3 = "@$"
        $s4 = "str_replace(\"{keyword}\", $keyword, $html)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorway_downloader_026 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
        $s2 = "=implode(\"\",array_reverse($"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_downloader_027 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "0777);"
        $s4 = "str_replace(\"{keyword}\", $keyword, $html);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorway_downloader_028 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "filemtime($target)) {$string = file_get_contents($source);$result = file_put_contents($target, $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorway_downloader_029 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$_SERVER['PHP_SELF'];"
        $s3 = "charset=gb"
        $s4 = ")!== false||strpos($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_doorway_fetcher_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "if(!empty($_COOKIE)){$co='';foreach($_COOKIE as $cn => $cv){if($co)"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_fetcher_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "curl_init(base64_decode("
        $s7 = ".$_SERVER[HTTP_USER_AGENT], 'google"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_spamseo_doorway_VI_001 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "/*edition:"
        $s2 = /\/\*edition[\s]*:[\s]*[\d]+\.[\d]+[\s]*\*\/[\s]*\$[\w]{8,}[\s]*=[\s]*['\"][^\n]{100}/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_VI_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "/*edition:"
        $s2 = "ob_start(); // Start buffering"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_doorway_VI_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "ob_start();"
        $s2 = "/*edition:"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_dropper_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = "copy($_FILES[\"file\"][\"tmp_name\"]"
        $s3 = " = <<<"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_drupal_doorway_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "preg_replace"
        $s2 = "drupal_get_urlsc_callback_url"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_e_accelerator_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ");shuffle($tags);foreach($tags as $tg){if(preg_match('!'.$tg.'!', $output)) {$output=preg_replace("
    condition:
        $s0 and $s1
}

rule php_spamseo_eclkmpbn_com_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "eclkmpbn.com"
    condition:
        $s0 and $s1
}

rule php_spamseo_fakeblogroll_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "widget_options = array(), $control_options = array(), $unique_id = \"\\x62"
    condition:
        $s0 and $s1
}

rule php_spamseo_fakespeedupcache_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "YToxOntzOjQ6ImRhdGEiO3M6Mzg6Imh0dHA6Ly93d3cuZGVjb21hbmRhdC"
    condition:
        $s0 and $s1
}

rule php_spamseo_fakewpcache_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "update_option(\"rss_\".md5($blogurl.\"_sh\""
    condition:
        $s0 and $s1
}

rule php_spamseo_fakewpflash_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents(\"stat_uniq.dat\", \"*\", FILE_APPEND"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_fake_docs_plugin_001 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "base_convert"
        $s2 = "7d"
        $s3 = ")){"
        $s4 = "substr($"
        $s5 = "!function_exists"
        $s6 = /base_convert[\s]*\([\s]*substr[\s]*\([\s]*\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_fake_modx_xpdo_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "function mod_xpdo_error"
        $s2 = "function mod_xpdo_compile"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_modx_xpdo_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "function mod_xpdo_error"
        $s2 = "(\"a5zlfXtf"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_plugin_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "$Ldkrw = create_function(null, $Ldkrw);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "fn_dolly_get_filename_from_headers($headers)"
        $s3 = "return 'wp-' . md5(get_home_url() . 'w_cookie');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "$ruser=$_POST['ruser'];"
        $s2 = "$rusers=explode(\",\",$ruser);"
        $s3 = "echo('[ok]comment_id='.$comment_id);}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "@$vercode='';"
        $s2 = "echo(\"[err]invalid vercode[/err]\");"
        $s3 = "$_POST['user_ID']=$etuser->ID;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_003_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "@$vercode='';"
        $s2 = "echo(\"[err]invalid vercode[/err]\");"
        $s3 = "if ( !$datas = $wpdb->get_row(\"SELECT * FROM $wpdb->posts"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_003_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "@header('HTTP/1.1 200 OK');"
        $s4 = ";$ltime = gmdate('Y-m-d\\TH:i:s+00:00', strtotime($ltime)); echo $ltime;"
        $s5 = "$myposts = get_posts( \"numberposts=\" . $posts_to_show );"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_fake_plugin_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "getImageEncodedText"
        $s2 = "unserialize($this->getImageDecodedText"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_plugin_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "const SCRIPT_SRC"
        $s3 = "compact( 'sl', 'redirect_option', 'data1', 'data2', 'plugin_version'"
        $s4 = "echo $redirect_to"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_fake_plugin_005_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "This plugin redirects your mobile traffic to' ); echo ' ' . $redirect_url;"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_plugin_005_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "_bb_press_plugin.class.php"
        $s2 = "add_filter('plugin_action_links"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_plugin_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "sendPost($userName,$_POST['pass1'],'http"
    condition:
        $s0 and $s1
}

rule php_spamseo_fake_plugin_006_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "mainwall.org"
    condition:
        $s0 and $s1
}

rule php_spamseo_fake_plugin_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "class ZYH_HASHER"
        $s3 = "add_action( 'wp_loaded', array( $this, 'check' )"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_007_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "array( $this, 'check"
        $s3 = "self::scan(pack('H*', self::checkcode));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_POST = array_map("
        $s2 = "register_activation_hook(__FILE__, array(&$words_links, 'activate'));"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_plugin_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "/(.*)/epreg_replac"
        $s3 = "$ua=strtolower($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_009_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "/(.*)/epreg_replac"
        $s3 = "= explode(chr(("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "_hide($plugins)"
        $s3 = "_SCRIPT_FILE_FULL"
        $s4 = "$user->data->user_login ==="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_fake_plugin_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = "function google_webmaster_tools() {"
        $s3 = "$gwebmasters_code = '<iframe src=\"http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_012 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "function enforce_security(){global $wp_list_table;$test=$wp_list_table;$hidearr=array(base64_decode"
    condition:
        $s0 and $s1
}

rule php_spamseo_fake_plugin_013 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "= @unserialize(file_get_contents(dirname( WPDBASECACHE_FILE )  . '/options.ini'))"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_plugin_014 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "_hide($plugins)"
        $s3 = "window.wp_cfg_'.POPUPLINK_BASENAME.'='.json_encode($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_014_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "window"
        $s2 = "var cfg = window[window.popuplink_cfg_field];"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_plugin_015 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "base64_decode"
        $s2 = "$redirect_url = trailingslashit( home_url( $wp->request"
        $s3 = "$config['init'] = preg_replace('/_/', \"\", $"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_016 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "file_put_contents(\"start.sh\", base64_decode(\"Cgp0YXIgLXp4dmY"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_017 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = "$content .= '<div><a href=\"' . get_the_title($link) . '\">' . trim(get_post_field('post_content', $link)) . '</a></div>';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_018 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "Author URI:"
        $s3 = "Plugin URI: http://google.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_019 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "register_setting("
        $s3 = "google.,/search"
        $s4 = "$plugin_key="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_fake_plugin_020 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "if($testir == '.php')"
        $s6 = "/feed/Article.php?feedit=add&domain="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_fake_plugin_021 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "if(!$is_admin && !empty($"
        $s3 = "header(\"Location"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_fake_plugin_022 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "xx_stripslashes(\"<"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_fake_wp_support_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "__FILE__"
        $s2 = "Author URI: http://www.wordpress.com"
        $s3 = "('','global $O"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_foxgo_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "$Foxgo->fullURL=$Foxgo->translateServer"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_frmDsinjector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "if (!defined('frmDs')){"
    condition:
        $s0 and $s1
}

rule php_spamseo_frmDsinjector_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(gzinflate(base64_decode('pR"
        $s3 = "('pRlrc9"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_frmDsinjector_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(gzinflate(base64_decode('pR"
        $s3 = "('pRn9c9o49ufcz"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_frmDsinjector_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(gzinflate(base64_decode('pR"
        $s3 = "('pRn9c9o49ufczP0PKuPGuHHAGAihiZP"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_frmDsinjector_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(gzinflate(base64_decode('pR"
        $s3 = "('pRlrb9s48nMOu"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_frmDsinjector_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('pRhrc9M69nN3Zv"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_frmDsinjector_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rVdbc6PKEX5WqvIfxirKgI0Bobtl7N06q5yzlex6I8vJg61VYRgkdhFwBvD"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_frmtmp_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "$otvet"
        $s2 = "if (strstr($otvet, 'BOT')) $abt = 1;"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_gen_unicode_vars_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = "@error_reporting(0);@ini_set('display_errors',false);defined("
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "file_put_contents($fileaddr,gzuncompress(base64_decode(file_get_contents(\"http://\".$_GET[\"s\"].\"/ins/\".$z[$i]))));}"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "= create_function('', file_get_c"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$credit=file_get_contents"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "@require_once(\"index\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once(dirname(__FILE__) . '/consumer.php');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$wp__theme_icon=@create_function"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "IpKTsg\";if (!function_exists("
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_010_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "T0iKSk7IA==\";if (!function_exists("
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "=\"\\x65v\\x61l(\\x62a\\x73\\x6564_d\\x65\\x63\\x6fde(\\x27\";"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_012 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "netease/email.163.com.htm"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_spamseo_generic_013 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = /@require(_once)?\(/
        $s2 = "@require_once(\"view\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_014 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$path = '/system/mngr.php?id=' . $this->_id . '&md5=' . md5($this->_read($this->_db_file"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_015 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents('.log')"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_016 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "md5(\"9e4f6c16cc6cb6075b657cb96f8b0d44"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_017 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "?> Buy Cheap</title>"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_021 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('pixyletu"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_spamseo_generic_027 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = /\@include_once\(?\s*\$_SERVER..DOCUMENT_ROOT[^;]+.wp-includes.[^;]+;/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_028 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "= strrev(\"\\x"
        $s2 = "\" . implode(\"\", array("
        $s3 = "strrev(\"\\x65\" . \"\\x63\" . \"\\x61\" . \"\\x6c\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_029 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "href="
        $s1 = "outlet burberry online"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_030 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "stripos($useragent, 'googlebot') || "
        $s4 = "$url = $host.\"?count=\".$count_url.\"&static="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_generic_031 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "_header_response = @get_headers($"
        $s3 = "$LicChkURL_header_response[0], \"200\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = ");exit;"
        $s3 = ".jpg');exit;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_033 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "parent.location.href"
        $s3 = "bot|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_035 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "function mycode($lnks_s, $lnks, $red_template, $ip)"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_036 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "/*~:Fh3&qvgti;Lc5)jMzJS*/$qblmhCz="
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_037 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "get_root(); $ws_file = $cache_dir.'/'.$ws_hash.'.zip'; require($ws_file); die('');"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_generic_038 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "@include_once(\"wp-includes"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_039 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "/*CACHE-CONTROL:"
        $s2 = "RhdGluZy"
        $s3 = "pbmds"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_040 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "SUdsbUlDaGpiM1Z1ZENna1"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_generic_041 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "setTimeout("
        $s2 = /setTimeout\([\w]+\(\),[\d]+\);/
        $s3 = /function [\w]+\(\)[\s]*\{[\s]*[\w]+[\s]*=[\s]*[\w]+\(\);[\s]*[\w]+[\s]*=[\s]*\[[\d]+,[\d]+,[\d]+/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_042 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "= isset($"
        $s2 = "=\"rawurl\" . \"decode\";return $"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_043 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title></title>"
        $s2 = "var parkingData"
        $s3 = "<link media=\"screen\" href=\"/css/style.css?rte"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_044 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "if(navigator.userAgent.toLocaleLowerCase().indexOf(\"baidu\") == -1){document.title ="
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_046 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if (preg_match('/google|yahoo"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_047 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = "if(strpos($key,'baidu')!==false"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_generic_048 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "decrypt"
        $s1 = "function generate_click_id($result) {$p = microtime();"
    condition:
        $s0 and $s1
}

rule php_spamseo_generic_050 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "->stylesheet}.php\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_050_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "= dirname(__FILE__) . DIRECTORY_SEPARATOR . '.' . basename(dirname(__FILE__)) . '.php') && !class_exists('"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_051 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "file_put_contents($path.'/wp-content/template-loader.php',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_generic_051_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "file_put_contents($"
        $s4 = "strpos("
        $s5 = "= explode('} /* update */ ?>',$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_generic_052 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "pVRRb5swEH5epPwHhNCAiuB2Tbe2Eaqml"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_053 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "if (function_exists('fsockopen')) {"
        $s7 = "ob_start('ob_gzzhandle'); return true;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_generic_054 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "echo file_get_contents_curl('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_generic_055 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "str_split('cook5**dn`\\m^cd)i`o*api^*di_`s)kck:pmg8')"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_generic_056 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "google"
        $s4 = "google', time()+"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_generic_057 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "tdNNCsIwEIbh08xqaEgn2nbbH71HMSkJxrS0Qe"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_058 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "VY7RCsIwDEW"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_059 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "vdPBCsIwDAbgp8mpbMxWndfN6XuUta"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_generic_060 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "atob("
        $s1 = "eval(window.atob("
        $s2 = "dmFyIGR5bmFtRWxlbT1mdW5jdGlvbihlL"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_generic_061 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<div"
        $s2 = "(in_array($_SERVER['REQUEST_URI'], array(\"/\")))"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_goo_gl_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "header('Location: http://goo.gl/"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_google_verification_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "echo 'google-site-verification: google'.$_GET['google']"
        $s3 = "if($_GET['uu']"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_google_verification_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "echo 'google-site-verification: google'"
    condition:
        $s0 and $s1
}

rule php_spamseo_google_verification_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "echo 'google-site-verification: google'.$_GET['google']"
        $s3 = "echo GetFileContent(\"sit"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_google_verification_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "echo 'google-site-verification: google'.$_GET['google']"
        $s3 = "if($isClick==\"true\")"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_google_verification_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = "echo 'google-site-verification: google'.$_GET['google'].'.html';exit;"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_grapevine_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "preg_replace"
        $s2 = "@preg_replace(\"@(.+)@ie\", \"\\x65\\166\\x61\\154\\x28"
        $s3 = "\\47\\x43\\155\\x6c\\155\\x49\\103\\x67\\150\\x59\\62\\x78\\150\\x63\\63\\x4e\\146\\x5a\\130\\x68\\160\\x63\\63\\x52\\172\\x4b\\103\\x64\\156\\x63\\155\\x46\\167\\x5a\\130\\x5a\\160"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_header_location_007 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "if (eregi(\"google\", $agent)) { header"
    condition:
        $s0 and $s1
}

rule php_spamseo_header_location_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "if (isset($_GET['jpg']))"
    condition:
        $s0 and $s1
}

rule php_spamseo_header_location_020 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GET"
        $s1 = "; $x0b=$_GET; $"
    condition:
        $s0 and $s1
}

rule php_spamseo_header_location_021 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "=array(101,114,114,111,114,95,114"
    condition:
        $s0 and $s1
}

rule php_spamseo_header_location_022 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "$_SERVER[\"REMOTE_ADDR\"]))$isbot = 1;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_header_location_023 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "=&$_COOKIE;$"
        $s3 = "=http_build_query("
        $s4 = "=false)header("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_header_location_024 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = ");exit;"
        $s3 = "$sh=='127.0.1.5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_header_location_025 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = /\t{20}header\(\"Location:[^;]+;/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_header_location_026 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "){header(\"Location: \".pack("
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_header_location_027 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "exit"
        $s3 = "header('Location: http"
        $s4 = "] * $_POST["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_header_location_028 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "header(\"Location: $urlz[0].$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_header_location_030 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "header('Location:"
        $s3 = "= isset($_SERVER['HTTP_USER_AGENT']) ? strtolower($_SERVER['HTTP_USER_AGENT'])"
        $s4 = "header('Location: '.$location,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_header_location_031 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if (preg_match(\"/googlebot/i\",  $_SERVER[\"HTTP_USER_AGENT\"]"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_header_location_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "if (!isset($_COOKIE["
        $s5 = "header('Location: ' . $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_hiddendiv_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write ('<' + '/d' + 'i' + 'v>');"
    condition:
        $s0 and $s1
}

rule php_spamseo_hiddendiv_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if (function_exists('file_get_contents"
        $s3 = "absolute;"
        $s4 = "top: -"
        $s5 = "left: -"
        $s6 = "echo $result;"
        $s7 = "curl_setopt($ch, CURLOPT_URL, $url);"
        $s8 = "$result = file_get_contents($url);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_spamseo_hiddendiv_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "text/javascript\">document.write(\"<\\/div>\")</script>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_hiddendiv_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "echo '<div style=\"position: absolute;"
        $s3 = "px; text-align:center;\"><a style=\"text-decoration:none;\" href="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_hiddendiv_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if (!isset($_SERVER['REQUEST_URI']) || ltrim($_SERVER['REQUEST_URI"
        $s2 = "print '<div class="
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddendiv_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<div style="
        $s2 = "echo <<<EOT"
        $s3 = "if (strpos ($spide , 'googl"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_hiddendiv_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "array_push($links[count($links)"
    condition:
        $s0 and $s1
}

rule php_spamseo_hiddendiv_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "strtolower($_SERVER['HTTP_USER_AGENT']);"
        $s2 = "if((strpos($tmp, 'bot') == true)){"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddendiv_013 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "while(!feof($"
        $s2 = "GET /{$file} HTTP"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddendiv_014 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<a href=\"http"
        $s2 = "<div"
        $s3 = ";})(351+814*20,'play','one',document);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_hiddendiv_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "display:none;"
        $s2 = "<a href="
        $s3 = "<div style=\"display:none;"
        $s4 = "if (in_array($_SERVER['REQUEST_URI'], array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_hiddendiv_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "<a href="
        $s3 = ".style.display=\"no\" + \"ne\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_hiddeniframe_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "display:"
        $s2 = "width=\"-1\" style=\"visibility:hidden;display:none\"></iframe>"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddenlinks_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "(!is_paged())) { ?><p style=\"color:transparent;"
    condition:
        $s0 and $s1
}

rule php_spamseo_hiddenlinks_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "base64_decode(\"PHAgc3R5bGU9Im92ZXJmbG93OiB"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddenlinks_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('Dc+3kqNIAADQz9mZ6kBAY2sjhBES3pvkCu+9EfD1t/lLXn7E3U9510PRxVv+k8RrTuL/ZX"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_hiddenlinks_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "=$_SERVER['REQUEST_URI']"
        $s3 = "echo $"
        $s4 = "&& !empty($ip) && !empty($useragent"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_hiddenlinks_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "<a href"
        $s3 = "if (!empty($agent)) {"
        $s4 = "if (strpos($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_hiddenlinks_006_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "<a href"
        $s3 = "if (!empty($agent)) {"
        $s4 = "@gethostbyaddr($localIp);"
        $s5 = "function get_next_link"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_hiddenlinks_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if(strstr(strtolower($_SERVER['HTTP_USER_AGENT']), \"google\"))"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_hiddenlinks_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "PGRpdiBzdHlsZT0icG9zaXRpb"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddenstyle_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "\\\" style=\\\"position:absolute; left:-"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddenstyle_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "echo \"<span style=\\\"position: absolute; left: -"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_hiddenstyle_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "document[_0x"
        $s3 = ",\"\\x64\\x69\\x73\\x70\\x6C\\x61\\x79\",\"\\x6E\\x6F\\x6E\\x65\"];if(!navigator.userAgent.match(/google|bot|spider/i)) document[_0x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_iframer_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "<?php echo \"<iframe src="
    condition:
        $s0 and $s1
}

rule php_spamseo_iframer_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGRpd"
        $s4 = "PGRpdiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOy"
        $s5 = "PGRpdiBzdHlsZT0icG9zaXRpb24"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_iframer_002_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGRpd"
        $s4 = "PGRpdiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOy"
        $s5 = "add_filter("
        $s6 = /function [\w]+\(\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*.PGRpdi/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_iframer_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "echo(' <iframe src"
        $s2 = "= @file($way);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_iframer_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(function(p,a,c,k,e,"
        $s2 = "parseInt(c/a)))+((c=c%a)"
        $s3 = "=rand("
        $s4 = "|strpos($url,'.bing.')||strpos($url,'.yahoo.')){"
        $s5 = "{echo \"<script type=\\\"text/javascript\\\"> window.location.href="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_iframer_005 : spamseo
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "<iframe"
        $s2 = /\n{50,}document\.write\(.<iframe\s*width=.0.\s*height=.0.\s*frameborder=.0.\s*src=.[htps]{4,5}/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_iframer_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "base64_decode($_REQUEST"
        $s4 = "file_put_contents("
        $s5 = "print '<iframe style=\"position:absolute;top:-999em;left:-999em;\" scrolling=\"no\" src=\"'.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_iframer_007 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ocument.write"
        $s1 = "url"
        $s2 = /url[\s]*=[\s]*.https?:[^;]+;[\s]*([\w]+[\s]*=[^\n]+;[\s]*){4,}document\.write[\s]*\([\w]+\);[\s]*document\.write[\s]*\([\w]+\);/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_iho_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "proud ofOmar5200 has much to be proud ofOmar5200"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_infector_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = ".'));'); $"
        $s4 = ");} $"
        $s5 = ");} $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_infector_002_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = ".'));'); $"
        $s4 = "','',$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_infector_002_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = ".'));'); $"
        $s4 = ");} $"
        $s5 = "@error_reporting(0);"
        $s6 = "@ini_set('log_errors',0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_infector_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(s(base64_decode('HyqWB2KC"
    condition:
        $s0 and $s1
}

rule php_spamseo_infector_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$file_new_data = $sape_start_marker.$code_inject_sape.$sape_end_marker.$file_new_data;"
    condition:
        $s0 and $s1
}

rule php_spamseo_infector_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "];eval($"
        $s2 = "(implode('', $"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_infector_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "fwrite($in, $code);"
        $s2 = "strpos( preg_replace( $user_agent_to_filter,"
        $s3 = "$in = fopen(\"wp-content/themes/$dir/header.php\", \"a\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_infector_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "file_put_contents($dirPath, base64_decode(substr($content->meta_value,"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_infector_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".chr("
        $s4 = "return \"ok\";}else{return \"true\";}}else return \"false\";}if(file_exists($_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_infector_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "eval(base64_decode"
        $s3 = "@eval(base64_decode('QG9iX3N0YXJ0KCk7QHNldF90aW1lX2xpbWl0KDM2MDApO0Bz"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_infector_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = ";exit();}"
        $s7 = "echo $O"
        $s8 = "header($O"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7 and $s8
}

rule php_spamseo_injection_093 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "var re=/((wd|q|w|p|query)(=)([%A-Z0-9]*)(louis vuitton)"
    condition:
        $s0 and $s1
}

rule php_spamseo_injection_094 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "do_actions_wp("
    condition:
        $s0 and $s1
}

rule php_spamseo_injection_095 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "public/js/wp_js.js\">"
    condition:
        $s0 and $s1
}

rule php_spamseo_injection_097 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x3c\\144\\151\\x76\\40\\163"
        $s2 = "else {if(is_page()||is_single()){"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injection_098 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "\\x68\\x74\\x74\\x70\\x3A\\x2F\\x2F\\x6B\\x6A\\x7A\\x30\\x72"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injection_099 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "'google') !=="
        $s4 = "'Yahoo! Slurp') !== false){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injection_100 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "print(base64_decode(\"PGlmcmFtZSBzY3JvbGxpbmc9I"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injection_101 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGh0bWw+DQoNCg0KPGltZyB1c2VtYXA9IiN"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injection_102 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "'google') !=="
        $s4 = "strtolower($_SERVER['HTTP_USER_AGENT']);if (strpos"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injection_103 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGlmcmFtZSBzcmM9Imh0dHBz"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injection_104 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "<?php echo chr(32).chr(32).chr(32).chr(32).chr(32)"
    condition:
        $s0 and $s1
}

rule php_spamseo_injection_105 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHt2YXIg"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injection_106 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = ";for(var"
        $s2 = ";while(!![]){try{var"
        $s3 = "?![]:!![];};function"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_001_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once(ABSPATH .'wp-includes/'.'pomo/'."
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_001_013 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "$art .= \"<li><a href='\".$dir.MyRandc(5).\"/\".replacex($t[0]).\".html'  title='\".$title_txt[$value].\"'>\".$t[0].\"</a></li>\";"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_001_014 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(\"return eval"
        $s2 = "eval(\"return eval(\\\"$code\\\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "\"(edoced_46esab(lave'));?><?php"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_006_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "]=Array(base64_decode('aXAybG9uZw=='),"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "function __google_analytics_obh ($c){"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "$str = stripslashes('<?php"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_017 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "@file_put_contents($file,\"$p::$tvd\\n\",FILE_APPEND);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_019 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "ikpOyA=\";if"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_020 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "preg_replace(\"/s2ylW0wUhSexgWjoGt=Q/e"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_021 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "lZfNbuRGDITvAfIOhuFDclmM"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_022 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "archive.org_bot')) {echo '';}"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_023 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "print_err(\"IframeFileDynamic(): inject data_before failed pos=$inject_pos\");"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_024 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "echo '<div style=\"position:absolute; top:-'.$r_offset.'px;\">';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_025 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "$x1b('~\\d~',$x0d,$x0e)"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_026 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "domain"
        $s1 = "if (empty($__var_to_echo) && empty($remote_domain)) {"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_027 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "//LINKBLOCK"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_028 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = " = \"\\x70\\x61\\x63\\x6b\";"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_028_01 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "if (file_exists($defaultPo) && preg_match('/' . implode('|', $wp_claws"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "if(file_exists($f) && is_readable($f)) require_once($f);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_033 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "<?php if(BlockForUsersNotForSearchEngine()):?>"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_034_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
        $s2 = "$check_data = ('<!--checker_start ');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_034_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
        $s2 = "echo('<!--checker_start"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_034_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
        $s2 = "decrypt_url"
        $s3 = "$check_data = ('<!--checker_start ');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_035 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ");return base64_decode($a[$i]);} ?> <?"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_036 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "$pageTxt = $req->request(str_rot13('uggc"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_037 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "wp_vcat,1,3) === 'scr' ){ echo $wp_vcat;"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_038 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "define('DZR', base64_decode"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_039 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "$BotredirectUrl = isset($csGlobal['botRedirectUrl']) ? $csGlobal['botRedirectUrl'] : null;"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_042 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "touch($cache_indexes, strtotime($date));"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_044 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "if (!$allow || check_bot_ip($ip) || $agent ) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_044_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "foreach"
        $s1 = "function check_bot_ip($ip) {"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_044_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = "<?php Echo "
        $s2 = "<footer><!-- #colophon --></footer>\" ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_045 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "'.$dir_cloak.$url_part.$ext_file,false,$context);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_045_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "if (stristr($host_referer, 'content-is-there.'))"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_046 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "($stop_agents_masks as $stop_agents_mask) if(eregi($stop_agents_mask, @$"
        $s2 = "if($is_bot){echo \""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_046_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "($stop_agents_masks as $stop_agents_mask) if(eregi($stop_agents_mask, @$"
        $s2 = "@base64_decode(\"PHNjcmlwdD5kb2N1bWVudC53cml0ZWxuK"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_046_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "($stop_agents_masks as $stop_agents_mask) if(eregi($stop_agents_mask, @$"
        $s2 = "{@require_once'"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_047 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$arr = @unserialize(base64_decode($_POST['delete_files']));"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_050 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "if(!function_exists('rss_dlbak')){"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_051 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "\".str_replace(\" \",\"+\",$_GET[\""
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_052 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "page"
        $s1 = "$page = do_rand_vario($page); # [[|]]"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_053 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$ff=fopen($dira.md5('links.txt'),'w');"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_054 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$file = 'laba.txt';"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_055 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "getElementById(\"t\"+\"g\"+\"s\"+\"i\").style.display='none"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_056 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "key3.id = key2.object_id AND key3.post_content LIKE '%torrent%'\");"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_057 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "<?php get_footer(); ?><a style=\"left:-"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_058 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$url = str_replace('LOCATION: ', '', $decoded['redirect']['headers'][0]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_059 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "e\", \"=JojrOlmLLn6KY"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_061 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"<dm_url>http://\".$_SERVER['SERVER_NAME'].$currenturl.$myname.\".php</dm_url>\\n\";"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_062 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo \"<dm_url>\".$currenturl.$myname.\".php</dm_url>\\n\";"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_063 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "googlebot|msnbot|yahoo|search|bing|ask|indexer"
        $s2 = "if($cell_guardian->isBot()){$is_bot = 1;}else{$is_bot = 0;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_065 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "page"
        $s1 = ".html\">'.strtolower(trim($keyitems[$keyarr[$i]])).'</a></strong>"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_066 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$shit = @fgets($flog,"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_067 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$ipcheck = str_replace('<t@k>',\"\",$html);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_068 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo httpcopy(\"http:"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_069 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "stristr($zhizhu_js,'google"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_070 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$folders =  search_dir( \"wp-content/themes\", true"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_071 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "link"
        $s1 = "function ahrefs_chooselinks($links, &$ah) {"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_072 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$prostyn.= \"<a href=http://\".$host.$urit.str_replace"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_073 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = ",\"?bot1\"))&&(!substr_count($"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_074 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('CONFIG_FILE', '/images/config.db');"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_075 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ")));');"
        $s1 = "$wp_add_filter = $erz('$v', 'e'.'va'.'l"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_076 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$websource= GetWebCode($site.$_REQUEST"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_077 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title><?php echo $arr_tit[$id]; ?>,<?php echo $arr_tita[$id];"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_079 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "} else if ($cloackedPage) {"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_080 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "<?php include('_links.php'); ?><!DOCTYPE html>"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_081 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "\"User-Agent: Mozilla/5.0 aol yahoo(compatible; Googlebot/2.1; +http://www.google.com/bot.html)\","
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_081_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "function geturl($url)"
        $s3 = "echo $file.'<font color=\\\"red\\\"> insufficient permission!</font><br>';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_082 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if (($result = file_get_contents('http://' . $sum . '-"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_083 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_loaded','thfr_kete_register_codes', 13);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_086 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "setcookie(\"__utpg\", $active, time() + $temps, \"/\", \""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_087 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "create_function('$'.'v',$"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_089 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "\";echo$str = file_get_contents($file)"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_090 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "array_unshift($templates, ___REALDOCROOT"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_091 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "base64_decode($lpc)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_092 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "@require_once(JPATH_SITE.'/plugins/search/"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_093 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$redirectContext = file_get_contents(REDIRECT_DOMAIN.'/'.(isset($_GET['key'])?$_GET['key']:''));"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_094 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "function GetHttpPage"
        $s2 = "$errstr . \"--->\""
        $s3 = "$jumpdomain = GetHttpPage($jpdomain);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_094_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "function GetHttpPage"
        $s2 = "$errstr . \"--->\""
        $s3 = "header('Location: ' . $jump);exit();"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_094_03 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".location"
        $s1 = "window.location"
        $s2 = "GetHttpPage"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_095 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "$Scripture = array();foreach(scandir($Christ) as $AMEN){"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_096 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "recursive_remove_directory($_SERVER['DOCUMENT_ROOT'].$proxyfile.\"cache\",true);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_097 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "} ob_start('_php_cache_speedup_func_optimizer_');"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_098 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$content=gethttpcnt($website.$otherstring);"
        $s4 = "$content=str_replace(\"\\\"images/\",\"\\\"\" . $website . \"/images/\",$content);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_099 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "$htmls = preg_replace(\"/<\\/body>/i\",\"<a href=\\\"http:"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_101 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "$numAds = count($postDefWPTheme);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_102 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "echo file_get_contents(system_news_path().$uri); die;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_104 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$file_url .= '?n=' . $_SERVER['QUERY_STRING'];"
        $s2 = "$file = file_get_contents($file_url);"
        $s3 = "echo $file;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_106 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if ( !is_user_logged_in() && get_option('ame_ip')!=$ip && $btt==false) {"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_108 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "$web_content = str_replace($content_url,"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_109 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(strpos($houzhui,'index.php') != false"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_110 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "page"
        $s1 = "$pgs[]='<a href=\"'.$page[1].'\">'.$key[1].'</a>';"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_110_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "print 'Domain changed!';}else{print 'Key Error!';}exit(0);} ?>"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_112 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "dir"
        $s1 = "$dir = 'wp-maps'"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_113 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = ";$wpconfigstr=str_replace($settingsstring,$newwpsettings,$source);if(!is_writeable($filename)){@unlink($filename);}file_put_contents($filename"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_114 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "$url_string = 'http://'.base64_decode($api_key2).'/'.$par.'/'.$id;"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_115 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "$ksite = !empty($_GET["
        $s2 = "$content = file_get_contents($fromsite"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_116 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "echo preg_replace(\"/<script.*?<\\/script>/si\", '', $homepage_content);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_117 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "$GLOBALS['user_func'] = @create_function( '', '};'.$value"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_118 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "echo base64_decode(\"77u/PHAgc3R5bGU9InBvc2l0aW9uOm"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_119 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(strstr($htmls,\"#prodescription#\"))"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_120 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "_cntnt=@wp_remote_fopen($uri);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_121 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "$rate_code=base64_decode('PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHN"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_123 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "@file_get_contents('http://'.$hosting_domain.$file.\"?host=$host&ip=$ip&ua=$ua&ref=$ref\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_124 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "= '' . base64_decode('PD9waHA=')"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_125 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = ";echo$str = @file_get_contents($file);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_126 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "'@^'.$target_siteurl.'/*@is';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_128 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "$output = curl_exec($ch);"
        $s2 = "CURLOPT_URL, \"http"
        $s3 = "echo $output;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_129 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "if(strpos($s_http_user_agent, \"googlebot\") !== false|| strpos($s_http_user_agent, \"yahoo\") !== false||"
        $s3 = "echo @file_get_contents(\"http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_131 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "preg_match(\"/(Googlebot|bingbot)(?:"
        $s4 = "$movedb = user_min_browser($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_132 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "$agent_match = preg_match(\"~(Googlebot|Mediapartners|"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_133 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo $htmls;"
        $s2 = "$htmls =  str_replace(\"</script></body></html>\",\"</script><script src=\\\"http:"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_134 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "domain"
        $s1 = "$body=file_get_contents(\"http://\".$domain);"
        $s2 = "\") OR strstr($ip,"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_135 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "preg_replace"
        $s2 = "preg_replace(\"/.+/e\",\"\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66"
        $s3 = "\\x29\\x29\\x29\\x3B\",\".\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_136 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "echo \"<br />httpCode:\".$httpCode;"
        $s2 = "echo $html;"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_137 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "return base64_decode(get_key(\"evalcode\"));"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_138 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "$tmp=getlinks($googlelinks,$links);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_139 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$links = file_get_contents(\"$server\");"
        $s3 = "$donor = $_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_140 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "$contents = curlget($url1.\"/url.php?list=\".$uu);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_141 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "($_SERVER['SERVER_NAME']).\"\\046\\x69\\075\".$x"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_143 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGRpd"
        $s4 = "$this->item->hits"
        $s5 = /PGRpd[^;]*['\"][\s]*.[\s]*[^'\"]/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_143_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGRpd"
        $s4 = "$this->item->hits"
        $s5 = "($cont!="
        $s6 = "if ($cont!="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_143_03 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGRpd"
        $s4 = /['\"]PGRpd[^;]+;[\s]*echo[\s]*base64_decode/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_143_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGRpd"
        $s4 = "$this->item->hits"
        $s5 = "echo base64_decode"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_143_05 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGRpd"
        $s4 = "$this->item->hits"
        $s5 = /if\s*[^\(]*\(\s*[^\$]*\$this->item->\w+\s*[^\{]*\{\s*\$\w+[^']{1,15}'PGR/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_144 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "botvsbrowser.com/rch_pdf/show.php"
        $s2 = "return; // Silence gold !"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_144_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "@require_once('class.wp-includes.php');"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_145 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "elseif (($new_html = __smart_inject($new_html, $materials)) === false) {"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_146 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ob_start"
        $s1 = "return substr_replace($content, \"\\n\" . $script . \"\\n\" . $tag, $tag_pos, strlen($tag));"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_149 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "echo $x"
        $s2 = "error_reporting(0);$x"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_150 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "if(preg_match(\"/googlebot/i\","
        $s2 = "if(strpos($l,'beginlink:')!==false)"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_152 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$string_of_redirect_for_write_in_htaccess=\"RewriteRule ^\".$rand_dir.\"(.*)\\.\".$_POST['redirect_expansion"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "-NO-WAY-"
        $s2 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
        $s3 = /<\?php[\s]*(\$is_bot[^;]+;[\s]*)?\$user_agent_to_filter/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "-NO-WAY-"
        $s2 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
        $s3 = "-NO-"
        $s4 = "$adm_url"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "-NO-WAY-"
        $s2 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
        $s3 = "-NO-"
        $s4 = "@file_get_contents(PATH777 . 'base')));"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153_07 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "-NO-WAY-"
        $s2 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
        $s3 = "-NO-"
        $s4 = /NO.WAY.[^{]+\{[\s]*\}[\s]*\{/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_153_08 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "-NO-WAY-"
        $s2 = /\$user_agent_to_filter,[\s]*['\"].NO.WAY.['\"],[\s]*@?\$_SERVER\[['\"]HTTP_USER_AGENT['\"]\]/
        $s3 = "-NO-"
        $s4 = "-NO-WAY-',@$_SERVER['HTTP_USER_AGENT']);if(strpos($str,'-NO-WAY-"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_154 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "echo \"<true>\".$row[0].\"<true>\";"
        $s3 = "$link = mysql_connect(urldecode($_POST["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_155 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "$res_el['linkerror'] == '3') $double_links[$i] = $all_links_o[($i-1)];"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_156 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "echo \"$content\";"
        $s2 = "function gethttpcnt($url,$timeout ="
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_157 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo kalem('http://'.$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF']).'/request.php?token"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_158 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "$bot = true;"
        $s2 = "if ($body && isset($body['data'])) $data = urldecode($body['data']);"
        $s3 = "\"&ip=$user_ip&version=$version\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_158_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "$contents = @get_data_l().$contents;"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_159 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "= stristr($finish_result[$a]['content'], '<title>Directory Listing Denied</title>');"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_159_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "($not_loading_clean != null) and ($not_loading_clean != 'rvf'))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_159_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "fwrite($fnew, $arr_all_domains[$c][$o]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_159_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "function start_work($off, $unto)"
        $s2 = "$url = \"http://$domen/\".\"$path\".\"/1/$i.php\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_160 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "var _"
        $s2 = "$js = '<script>var _$=[\"location\",\"href\",\"'.$redirect.'\"];window[_$[0]][_$[1]]=_$[2];</script>';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_161 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "echo '<div class=\"_all_wplink"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_161_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<div"
        $s2 = "<div class=\"_all_wplink"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_162 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo $content"
        $s3 = "$contents = file_get_contents($url);"
        $s4 = "x73\\x63\\x72\\x69\\x70\\x74\\x3E\"];document.writeln(_$[0]); </script>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_163 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$_SERVER['PHP_SELF'];"
        $s3 = "charset=gb"
        $s4 = /\][\s]*.[\s]*\$_SERVER\['PHP_SELF'\];[\s]*(\$[\w_]+[\s]*=|function)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_163_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "strpos($key"
        $s2 = ".base64_decode(\"L2"
        $s3 = ".base64_decode(\"L2luZGV4LnBocD9ob3N0PQ==\").$host_name"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_163_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "strpos($key"
        $s2 = ".base64_decode(\"L2"
        $s3 = "charset=gb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_164 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "header(\"Location: http://google.com\"); exit();"
        $s2 = "$write = write_bad($current_url, $parser_url ."
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_165 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "ini_set('user_agent','Mozilla/5.0 "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_166 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$url = \"$host/\".$_SERVER[\"QUERY_STRING\"];"
        $s2 = "function getContent($url,&$result,$proxystr=null){"
        $s3 = "$htmls =  str_replace(\"<a href=\\\"\",\"<a href=\\\"$target?\",$htmls);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_168 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "$str = file_get_contents($"
        $s4 = "ini_set(\"user_agent\",$_SERVER[HTTP_USER_AGENT]);"
        $s5 = ".\"?http://\".$_SERVER['HTTP_HOST'].$_SERVER[\"REQUEST_URI\"]);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_169 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "=@$_GET["
        $s3 = "src=\"'.base64_decode($"
        $s4 = ";echo outdo($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_170 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "$currUrl = $ancienCont.$currUrl;"
        $s2 = "function curPageURL()"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_171 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "foreach ($search_engines as $some_bots) {"
        $s2 = "\"\\${1} \\n\". $links, $data, 1 );"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_172 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "array(); preg_match(\"/RewriteRule"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_173 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "='http"
        $s2 = "if(!is_null($_GET['pageIndex']))"
        $s3 = "file_get_contents($"
        $s4 = "if(!is_null($_GET['p_id']))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_174 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "if(!empty($_SERVER['HTTP_USER_AGENT"
        $s4 = "file_get_contents('http"
        $s5 = "$userAgents = array(\"Google\", \"Slurp\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_175 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "gimmeyourfuckingtemplate"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_176 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fsockopen"
        $s1 = "echo $data . $content;"
        $s2 = "urlencode(base64_encode(serialize($input)));"
        $s3 = "$data = @gzuncompress(substr($response, - $parts[1]));"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_177 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if(!empty($_GET[\"inf0\"])){$"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_178 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "= get_data(\"$"
        $s2 = "('display_errors', '0');$"
        $s3 = "(array('http' => array('timeout' => 10,'method' => 'POST')));$"
        $s4 = "('#<a href(.*)</a>#', \"$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_180 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('init"
        $s3 = "unserialize(get_option('default_pages"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_181 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "echo \"GOOD<br>\".$cache_dir;"
        $s3 = "$body = file_get_contents($cache_dir.\"/\".$post_url_cache.\"_body.js\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_182 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "if(!(strpos($sUserAgent, 'google') === false))"
        $s3 = "&fullpath='.urlencode($_SERVER['REQUEST_URI']).'&check='.isset($_GET['look']).'&ref='.urlencode($sReferer))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_183 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "function RecursiveDelete($sDirectory, $bIsEmpty = false)"
        $s3 = "if(isset($_REQUEST['GetContent']) === true)"
        $s4 = "echo $sOutContent;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_185 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include './tiao.php'"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_186 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $s3 = "$enc1 = $enc2 = $enc3 = $enc4 = \"\";"
        $s4 = "touch($htaccess_path, time() - mt_rand("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_187 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if (preg_match(\"/[^\\/]+\\.html$/\", $url) and file_exists"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_188 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if (( preg_match ('/Trident/i', $useragent) && !preg_match"
        $s3 = "http://\".\"logs\".\"http\".\".com/\".\"logs/?ip="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_189 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "UmFkYXJ8"
        $s2 = ".=substr($"
        $s3 = "=\"\";foreach($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_189_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "UmFkYXJ8"
        $s2 = "*/ eval(base64_decode(\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_189_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "require_once($_SERVER[\"DOCUMENT_ROOT\"].\"/includes/inc.class.php\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_190 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(base64_decode('ZXJyb3JfcmVwb3J0aW5nKDApOwokYm90X2xp"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_191 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "if($wpmudak == \"FALSE\"){$wptraffscript='<script"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_192 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "/joomla/base/adapterobserver.php');"
        $s4 = "@require_once(JPATH_ADAPTERSERVER);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_192_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "equire_on"
        $s2 = "require_once"
        $s3 = "/joomla/base/adapterobserver.php');"
        $s4 = "\\n@require_once(JPATH_ADAPTERSERVER);\","
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_193 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "';$"
        $s2 = "=create_function("
        $s3 = "cFZwdGMrSm1zdjJjL0FxdGE2c"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_194 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if(checkrobot()){"
        $s3 = "echo '"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_195 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = ")+1);break;}}}return$"
        $s2 = "$stringpath ="
        $s3 = "$locationRole ="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_196 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "basename($f, \".php\") == \"index\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_198 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "\".md5(@$_SERVER['REQUEST_URI']));"
        $s3 = "@function_exists(\"curl_init\").\"=\".@ini_get(\"allow_url_fopen\");"
        $s4 = "|google|"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_199 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$tpl"
        $s3 = "_agents_to_filter"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_200 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$idruri = $_SERVER['REQUEST_URI'];"
        $s3 = "chmod($gml.DIRECTORY_SEPARATOR.'.htaccess', 0644);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_200_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "curl_setopt ( $ch, CURLOPT_URL, \"http://www.love8.pw"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_201 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "$query = $_SERVER['REQUEST_URI'];"
        $s4 = "if(stripos($_SERVER['HTTP_USER_AGENT'], 'Googlebot')"
        $s5 = "echo '<script>document.location=("
        $s6 = "if(isset($query) && preg_match($regex,$query)){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_202 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "$htmls =  str_replace(\"/skin/\",$fromsite.\"skin/\",$htmls);"
        $s3 = "$pagetitle = getCode($htmls,\"/<title>(.*?)<\\/title>/\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_203 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "$content = preg_replace(\"#<script(.*?)>([^<]*?)(analytics\\.js|doubleclick\\.net)([^<]*?)</script>#\", \" \", $content);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_204 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "='http"
        $s2 = "$url"
        $s3 = "echo $file_contents;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_205 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = ");exit;"
        $s3 = "echo \"ok-ok\";exit;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_208 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "echo $x"
        $s2 = "('*bot*', $x"
        $s3 = "$_SERVER['HTTP_USER_AGENT'];$x"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_209 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "0777 & fileperms($"
        $s4 = "function smartscan($dir) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_211 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "=str_replace(\"|\",\"\",$"
        $s4 = "@eval(base64_decode($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_212 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$conte"
        $s5 = "timeout"
        $s6 = "($htprefs)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_212_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$conte"
        $s5 = "timeout"
        $s6 = "base64_encode($body), false, $context);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_213 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "mkdir('"
        $s2 = "', 0777);"
        $s3 = ".html', w); fwrite($"
        $s4 = "><script>parent.location.href='http:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_214 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "google|msn|live|altavista"
        $s2 = "{echo'<script"
        $s3 = "$_SERVER['HTTP_REFERER"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_215 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo @base64_decode(\"PG1hcnF1ZWUgc"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_216 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "eval("
        $s2 = ": | :'));"
        $s3 = ".=chr(ord($"
        $s4 = "!Ak&"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_217 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "header(\"Content-type:"
        $s3 = "echo curl_exec($"
        $s4 = "(string)$_SERVER['QUERY_STRING']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_218 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "echo '|success|'.$guid.'|';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_219 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "echo \"ok"
        $s3 = "$indexStr = str_replace(\""
        $s4 = "$installStr = file_get_contents(\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_220 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "location"
        $s2 = "function GetFileContent($url){"
        $s3 = "php?'.trim($query.\"|\".$_SERVER[\"SERVER_NAME\"]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_221 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "extract"
        $s6 = "$matcholddomain"
        $s7 = "@file_get_contents\\(\"http:\\/\\/(.*)\\/code"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_injector_221_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "extract"
        $s6 = "function theme_temp_setup"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_222 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "= getcwd()"
        $s2 = "return preg_replace(\"/(<.*?body.*?>)/i\", \""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_223 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "=&$_COOKIE;$"
        $s3 = "foreach($server as $cn=>$cv)$server[$cn]=$cn.'='.urlencode(strval($cv));$post=implode('&',$server);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_224 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "$ua=$_SERVER['HTTP_USER_AGENT'];"
        $s3 = "echo '<div style=\"display: none;\">"
        $s4 = "if (strrpos($ua, \"Mobile\") == true || strrpos($ua, \"Google\") == true ||"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_226 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "=file_get_contents(\"$root/$rnd_file\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_227 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "header('Location:"
        $s3 = "get_client_ip().';'.$_SERVER['HTTP_USER_AGENT'].\"\\n\", FILE_APPEND"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_228 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "CURLOPT_URL"
        $s2 = "curl_init("
        $s3 = "if ($flag==true) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_229 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "array_push($body,\"%1$tags%3\",$text,\"%2$tags%3\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_230 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "isset($_POST["
        $s2 = "$urls[$request_count] = \"http"
        $s3 = "$domains = preg_split('/\\s*(\\r\\n|\\n|\\r)\\s*/', trim($data), NULL, PREG_SPLIT_NO_EMPTY);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_231 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if (substr($url, 0, 4) == \"<!--\") {echo $url;}"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_232 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if(preg_match("
        $s2 = ",$_SERVER[HTTP_USER_AGENT])){echo \"<a"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_233 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$cloakornotcloak="
        $s3 = "$articlesvalue="
        $s4 = "$maplinksraz="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_234 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*file_get_contents\(.http[^;]+\);[\s]*eval\(\$[\w]+\);[\s]*\?>/
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_235 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGEgaHJlZj0iaHR0cDovL3NleHN1dC5jb20iIHN0e"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_236 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "isset"
        $s2 = "echo \"#Failed: $post_link#"
        $s3 = "print \"#Created post_id: !$post_id!$link!#\\n\";"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_237 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "(ereg(\"Googlebot\""
        $s4 = "$file = file_get_contents("
        $s5 = "echo $file;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_238 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "echo 'Path: ' .  $f . '<br />';"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_239 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "header('Location:"
        $s2 = "$_SERVER['REQUEST_URI'];"
        $s3 = "]->Title?></title>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_240 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "echo ('<script src=\"http://'.$dmn.'/dmn/js.php?q='.$pill.'\"></script>')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_241 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo $content"
        $s3 = "str_replace($list[$i][\"id\"],$list[$i][\"v\"],$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_242 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "str_replace(\".html\""
        $s2 = "@strpos($_SERVER["
        $s3 = "file_get_contents(\"http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_243 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "/js/js.js"
        $s2 = "print('<script"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_244 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "FVbFDuwIDvyceU99CJPmFGbmXFZhTofp67fn4Jtl2eVylcszHf7U"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_245 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "abs(crc32($_SERVER['REQUEST_URI']));"
        $s4 = "if(preg_match_all('!{([^}]+)}!',"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_245_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "abs(crc32($_SERVER['REQUEST_URI']));"
        $s4 = "php /*"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_245_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "abs(crc32($_SERVER['REQUEST_URI']));"
        $s4 = "load_extra_modules()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_246 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PGEgaHJlZj0iaHR0cDovL2phdmhpZGUuY29tIiBzdHlsZT0icG9zaX"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_247 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "echo(result(array("
        $s2 = "array(\"%1title%3%sign% $title%2title%3"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_248 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /;eval\(\$[\w]+\(\$[\w]+\(\$[\w]+\(\$[\w]+\([^;]{1000}/
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_249 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "cHJlc3MtcmVzcG9uc2l2ZS1mcmVlLyI+UmVzcG9uc2l2ZSB"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_249_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_250 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "$seo_plugin=get_option(\"ranking\");"
        $s3 = "(strstr($_SERVER['HTTP_USER_AGENT"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_250_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "$seo_plugin=get_option(\"ranking\");"
        $s3 = "function ranking() {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_251 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\";eval("
        $s2 = "aWYoISRfQ09PS0lFW2Jhc2U2NF9kZWNvZGUo"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_252 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "= <<<EOF"
        $s3 = "<div style=\"overflow:hidden;height:1px;\">"
        $s4 = "$tmp = strtolower($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_253 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo $content"
        $s3 = "if($content!=\"no\"){"
        $s4 = "$page = substr($page,0,strlen($page)-1);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_254 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "%{HTTP_USER_AGENT}"
        $s2 = /RewriteCond\s*\%{HTTP_USER_AGENT}\s*\((bing\||yahoo\||google\|)+[^\)]+\)\s*\[/
        $s3 = "str_replace(\"<IfModule mod_rewrite.c>\\nRewriteCond %{HTTP_USER_AGENT} (google|yahoo|msn|aol|bing)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_255 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo \"#success connection#<"
        $s2 = "if (array_key_exists ('delete', $_REQUEST)"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_256 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "$_SERVER['DOCUMENT_ROOT']"
        $s2 = "$text"
        $s3 = "http_"
        $s4 = /echo\s*'\s*(<item>)?\s*<title>\s*<\s*\!\[CDATA\[[^\]]+\]\s*\]\s*>\s*<\/title>/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_256_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "isset($_SERVER['HTTP_X_FORWARDED_FOR"
        $s3 = "function all_keys"
        $s4 = "$urlfilename = \"url\".$clientid;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_256_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "isset($_SERVER['HTTP_X_FORWARDED_FOR"
        $s3 = "foreach($result->redirect->headers as $header"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_256_04 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "doorway"
        $s2 = "codetodonor"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_257 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "$ptitle = base64_encode(get_bloginfo("
        $s3 = "$url = $protocol . $_SERVER"
        $s4 = "$linkcontent = @file_get_contents($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_258 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = "document.write(unescape("
        $s3 = "if(!$GLOBALS["
        $s4 = "$_SERVER[in("
        $s5 = "empty($_COOKIE[in("
        $s6 = "?><script type="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_259 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "=array($_POST[md5(ThePageURL()"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_260 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "preg_match( \"~(\" . implode( \"|\", explode( \"|\", @$getindex->index"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_262 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "); echo '<nofollow><noindex><script src=\"'.$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_263 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "return (bool)strpos($haystack, $needle);"
        $s5 = "$content = file_get_contents"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_264 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "unlink ( './.htaccess' ); file_put_contents ( './.htaccess"
        $s3 = "file_get_contents ( './.htaccess' ), 'RewriteRule .* index.php [L]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_265 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "echo"
        $s4 = "error_reporting("
        $s5 = "echo '[Successfuly_Added] http://' . $_SERVER['HTTP_HOST'] . '/wp-config.php'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_265_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "!empty($_GET["
        $s3 = "echo"
        $s4 = "error_reporting("
        $s5 = ".urlencode($_SERVER['REMOTE_ADDR']).'&siteurl='.urlencode(get_site_url());$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_266 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "file_put_contents(sprintf('%s/wp-loader.php', $file->getPath()), $"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_267 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "array('id'=>\"href=\\\"\", 'v'=> \"href=\\\"\".\"http://\".$domain.$path.\"?\"),"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_268 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "domain"
        $s1 = "foreach($dirok as $temp"
        $s2 = "function GetDomains($"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_269 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = ".\"/wp-config.php\")){if(unlink($"
        $s4 = "str_replace('</head>','<script type=\"text/javascript\">'.$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_270 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /\$[\w]+[\s]*=[\s]*<<<EOT[^;]+EOT;[\s]*eval/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_271 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "do_action"
        $s3 = "position:absolute;visibility:collapse;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_272 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "style"
        $s2 = "height:0"
        $s3 = "echo (is_front_page()) ? '"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_273 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "@$gitt = file_get_"
        $s5 = "$gitt = curl_exec"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_273_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "@$gitt = file_get_"
        $s5 = "add_filter("
        $s6 = /function [\w]+\(\)[\s]*\{[\s]*error_reporting\(0\);[^<]+@\$gitt[^>]+[^\(]+add_filter\([^;]+\);[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_273_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "@$gitt = file_get_"
        $s5 = "if($_POST)"
        $s6 = "$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_274 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "@system(\"chmod 777 \""
        $s5 = "'find / -type f -name \""
        $s6 = "\"#already exist#:\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_275 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "bDVfZzV0X2MybnQ1bnRzKCQzcmwpOw0KNWNoMiAkYzJudDVudHM7DQo/Pi"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_276 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "function add_backlink_to_post($"
        $s5 = "print\"#Unable to create new post#"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_277 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "(strpos($sec,\"google\")):"
        $s4 = "PGZvbnQgc3R5bGU9Im92ZXJmbG93OiBhdXRvOyBwb3NpdGlvbjogYWJzb2x1dGU7IGhl"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_278 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "if(preg_match("
        $s2 = "echo GetMetodu(\"http"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_279 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "$agent = $_SERVER['HTTP_USER_AGENT'];"
        $s2 = "(strpos($sec,\"google\")): $part"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_280 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "]($xml_link);$google=@$GLOBALS{"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_282 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "function getAgent()"
        $s5 = "function get_url_content($url)"
        $s6 = "echo $htmlcontent;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_283 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "NXlXREpPZGxwSFZYQlBlVUZMSnlrcE93b0siKSk7IA=="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_284 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "HZbFrsUIrkU/p6uUQZj0RmFmPJm0wsycr39XPbdkydtey"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_285 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "base64_encode($useragent);"
        $s3 = "&UserAgent="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_285_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "str_replace(\"{manytext_bing}\",$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_286 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = "else if(strpos($tmp, 'yahoo') !== false){"
        $s3 = "if(strpos($sitename, 'www') == false)"
        $s4 = ".str_replace(\" \",\"-\",$_GET[\"p\"]);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_287 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "$sourceBody"
        $s6 = "function CreateLink($dir"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_288 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "<!-- <urls>"
        $s3 = "),'tmp',0)>0)return 0;if($GLOBALS['_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_288_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "<!-- <urls>"
        $s3 = "),\\'tmp\\',0)>0)return 0;if($GLOBALS[\\'_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_290 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$link = mysql_connect("
        $s2 = "echo \"\\t\\t<td>$col_value</td>\\n\";"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_292 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = /<\?php[\s]*echo[\s]*file_get_contents\(.https?:[^\?;]+\?url=.[\s]*\.\$_SERVER\[.HTTP_HOST.\][\s]*\.[\s]*\$_SERVER\[.REQUEST_URI.\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_293 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "CURLOPT_USERAGENT"
        $s2 = "DIRECTORY_SEPARATOR"
        $s3 = "css"
        $s4 = "lnk"
        $s5 = "$tlng"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_293_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "define('_NET',$NET);"
        $s5 = "function get_cont($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_294 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = ");exit;"
        $s3 = "}($xml_link);$google=@$_SERVER{"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_295 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "file_get_contents"
        $s4 = /function[\s]*[\w]*\(\)[\s]*\{[^\(]+if\(\$[\w]+[\s]*==[\s]*\$[\w]*\)\{[\s]*\$[\w]*[\s]*=[\s]*file_get_contents\(.[^\)]+\);[\s]*echo[\s]*\$[\w]*;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_296 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "if (file_exists($cf) and filemtime($cf) > time() - 3600)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_297 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "if(preg_match(\"/$truecref/i\",$crefs)){return"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_298 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "<<<EOT"
        $s3 = /\$[\w]+[\s]*=[\s]*<<<EOT[\s]*<div>[\s]*<p>[\s]*(<a href[^\n]+\n){10,}<.p>[\s]*<.div>[\s]*EOT;[\s]*eval[^;]+\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_299 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "CURLOPT_URL,str_rot13('ugg"
        $s4 = "preg_replace('/<body([^>]+)>/', '<body\\\\1>'.$server_output"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_300 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "function curl($"
        $s4 = "$timeout"
        $s5 = "echo curl(str_rot13(\"ugg"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_301 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "if( !isset($local_array['hash']) || isset($local_array['hash']) && $local_array['hash'] != $hash_file )"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_302 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "$_F=__FILE__;$_X"
        $s2 = "$_F=__FILE__;$_X='Pz48ZDR2IDRkPSJjcjV"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_303 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = ".base64_decode"
        $s2 = "<?php eval('?>'.base64_decode('Cjw/cGhwCiRjaCA9IGN1cmxfaW5pd"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_304 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "array('http' => array('method' => \"GET"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_305 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo $content"
        $s3 = "if(isset($_GET['check'])){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_306 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$_SERVER['PHP_SELF'];"
        $s3 = "charset=gb"
        $s4 = "@end(explode("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_307 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "].$http_type.$_SERVER[$GLOBALS{"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_308 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = /\$file[\s]*=[\s]*file_get_contents\(.http[^\)]+\.txt.\);[\s]*echo[\s]*\$file;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_309 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "{@setcookie("
        $s3 = "error_reporting(0);if(isset($_COOKIE[\"ping\"])){@setcookie(\"pong\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_310 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "if(preg_match(\"/zh-cn"
        $s4 = "if(stristr($_SERVER['HTTP_USER_AGENT'],'Googlebot')||stristr($_SERVER['HTTP_USER_AGENT'],'yahoo')||stristr"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_311 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "Z2V0RWxlbWVudEJ5SWQ"
        $s2 = "(substr($_SERVER[\"REQUEST_URI"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_312 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "('',"
        $s2 = "./*;*/"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_313 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = /@ini_set\(.display_errors[^:]+file_get_contents\([^&]+\$_SERVER\[.REMOTE_ADDR.\]\.[^;]+str_replace/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_314 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "echo $content;"
        $s2 = "$content .= $line;"
        $s3 = "txt', 'r'))"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_315 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "google"
        $s2 = "google.com/search"
        $s3 = "mb_strtolower($query_pars_2);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_316 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "if(_spider() && _main()) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_317 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "<!-- DNN Platform"
        $s3 = "<title><?php echo $keyword ?></title><meta id"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_318 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "file_get_contents(\"http"
        $s6 = "(stristr($_SERVER['HTTP_USER_AGENT']"
        $s7 = "explode(\"###\",$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_injector_319 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "DVY1EuTYEjzOzoQMYQvixxpibjE6G2Jm1ul/O896RmUlVBZn0v+p3mYs+2Qv"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_321 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "strrev('edoced_46esab');"
        $s2 = "strrev('etalfnizg');"
        $s3 = "(implode('',$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_322 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "){print $c['body'];}}}function request($url){if"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_323 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "rVqJUttIGn4VxcWM7C0H+tDRHQI1siXtGDBkwUw2E1IuHS1sYmxjyQaz"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_324 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "<?php endif; ?>"
        $s3 = "<?php if(preg_match('/robo|bot|crawl|spider|slurp|scooter/i',$_SERVER['HTTP_USER_AGENT']) and !preg_match"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_325 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "echo \""
        $s2 = "exit;"
        $s3 = "base64_encode(time().':;:'.$_POST['log'].':;:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_326 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "rRlrc5tI8q8QhzVoFyHQGzvYSSXKozZxfLZ8e1U"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_327 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "]}=@fsockopen(${$"
        $s4 = "]}));}return(function_exists(${$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_328 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "echo \"<!--google->\";"
        $s3 = "echo \"<!--/google-->\";"
        $s4 = "|google|yandex/i', $_SERVER['HTTP_USER_AGENT']))"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_329 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "@$indexx=\"c"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_330 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "($i){$a=Array('"
        $s3 = /<\?php \$GLOBALS\[[^\]]+\][\s]*=[\s]*Array\([^\)]+\);[\s]*\?>[\s]*<\?php[\s]*function[\s]*[\w]+\(\$[\w]+\)[\s]*\{[\s]*\$[\w]+[\s]*=[\s]*Array[^\)]+\);[\s]*return base64_decode\(\$.\[\$.\]\);\}[\s]*\?>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_331 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "$spath = $_GET['start'];"
        $s2 = "$host = $lhost[rand(0,(count($lhost)-1))];"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_332 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "FZZFssUIkgSP01WmhZisbRZi6YkZNmNiZtbp58"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_333 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "if(strpos($all,\"ja\")>-1 && (strpos($s_ref,\"jp\")>0 || strpos($s_ref,\"yahoo"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_334 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "trim(base64_decode("
        $s4 = "trim(urldecode(base64_decode(trim(@$_GET["
        $s5 = "$ads = trim(base64_decode(file_get_contents('http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_335 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "[\"data\"];die();}');${\"\\x47\\x4c\\x4f\\x42\\x41\\x4c\\x53\"}[\"\\x"
        $s2 = "],\\'request_url\\'=>$params[\"\\x"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_336 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "Google"
        $s2 = "$link = base64_encode($_SERVER[\"SCRIPT_NAME\"].\"?down\".md5(time()));"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_337 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "PFx2Sv86UTJGK5hCt7ozfCGlCqOtrXdd6sJQ8dH+Ympkta0+vP/q"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_338 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "pTtrc5vIsn+FKGyAXY"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_339 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "$value) { if (strpos($visitor, $value) !== false)"
        $s6 = "($db == true) { echo file_get_contents_utf8(\"\\x"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_340 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "eval($"
        $s4 = "getHtml(base64_decode("
        $s5 = "curl_exec($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_341 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "echo $content"
        $s3 = "if($content!=\"no\"){"
        $s4 = "$content = file_get_contents(\"http://"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_343 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "/i',$_SERVER['HTTP_USER_AGENT'])){"
        $s2 = ",$_SERVER['HTTP_USER_AGENT'])){echo \"<a href="
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_344 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "(\"PGh0bWw+PGJvZHkgc3R5bGU9ImJhY2tncm91bmQt"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_346 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$wp_boss->request"
        $s4 = "$result = $wp_boss->request(\"/api/\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_346_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$wp_boss->request"
        $s4 = /require __DIR__ \. ..wp-blog-header.php.;[\s]*\}/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_347 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "function Go($url){ $ch = curl_init(); $ip = rand(0,255).\".\".rand(0,255).\".\".rand(0,255).\".\".rand(0,255) ; $timeout"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_347_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "function authcode($string, $operation = \"DECODE\", $key"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_348 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$Link_Id = $_Post_Th . $_Post_Ts . ':' . '//' . $_Post_Wi . $_Post_In . $_Post_404;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_349 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "];eval($"
        $s2 = "%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_350 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "echo $html;"
        $s4 = "$html = ob_get_clean();"
        $s5 = "$html = str_replace('</body>',"
        $s6 = "</body>', $html);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_350_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "echo $html;"
        $s4 = "$html = ob_get_clean();"
        $s5 = "$html = str_replace('</body>',"
        $s6 = "ob_start();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_350_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "echo $html;"
        $s4 = "$html = ob_get_clean();"
        $s5 = "$html = str_replace('</body>',"
        $s6 = "implode(\"\", array("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_351 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "$_SERVER[\"DOCUMENT_ROOT\"]"
        $s4 = "echo  'INDEX.PHP PATCHED--1111111' . PHP_EOL;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_351_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "LCAgc3RycG9zKCRjb250ZW50LCAkYikgLCAxMDAwMDAwMDAwMCk7DQoNCg0KDQoNCiAgICAgICAgICAgaWYgKHN0cmxlbigkYSk+NikgIGl"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_353 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "document.write("
        $s3 = "value=\"<?php echo $"
        $s4 = "document.write(unescape('%3Ctitle%3E%"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_354 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x65\\x76\\x61\\x6c\\x28"
        $s2 = "\\x65\\x76\\x61\\x6c\\x28\\x67\\x7a\\x75\\x6e\\x63\\x6f\\x6d\\x70\\x72\\x65\\x73\\x73"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_355 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "base64_decode($"
        $s4 = "[*^_^*]'.$shao_pass;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_356 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "ba'.'se'. 32*2"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_357 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "if (preg_match('#<a"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_358 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google"
        $s6 = ")&&strcasecmp(getenv("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_359 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google"
        $s6 = "substr(str_shuffle($mix_strs),mt_rand(0,strlen($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_injector_360 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "preg_replace"
        $s2 = "\\x27\".'aWYoIW"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_361 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "\"http"
        $s2 = "echo $veri;"
        $s3 = "$veri = curl_exec($ch);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_364 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "echo $html;"
        $s4 = "$html = ob_get_clean();"
        $s5 = ", 'wp_footer'), -2000);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_365 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "$ua=$_SERVER['HTTP_USER_AGENT'];"
        $s2 = "$ua2=mb_strtolower($_SERVER['HTTP_USER_AGENT'],\"UTF-8\");"
        $s3 = "elseif (strrpos($ua2, \"mobile\") == true || strrpos($ua2, \"google\") == true || strrpos"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_366 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$icerik = file_get_contents($site);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_367 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "_SERVER['REMOTE_ADDR"
        $s2 = "file_get_contents("
        $s3 = "mod_rewrite.c>\\r\\n\\t"
        $s4 = "(file_exists('.htaccess')) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_368 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /<\?php[\s]*@?eval/
        $s2 = "eval(pack('H*','20247471687078613d277471687078273b66756e6374696f6e206"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_369 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "array("
        $s2 = "curl_exec($"
        $s3 = ",chr(base_convert($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_370 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "<a href="
        $s4 = "if($url_current =="
        $s5 = "$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_injector_371 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /base64_decode\(/i
        $s2 = "FZe3roXalkT/5UX3igDv1HoB3ntP0sJ7z8Z9fZ/OQazFrFk1qrqy8Z/m6+Z6zM7qnzw7KgL737IqlrL65z9iWsHHEWpjE4NrhqLOkiXJpB"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_372 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "32*2"
        $s2 = "PGRpdiBjbGFzcz0iY3hzeCI+PGEgaHJl"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_373 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "echo $link;"
        $s6 = "if($bot == 1){"
        $s7 = "if (isBotes()) {"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_injector_374 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "YSBQb3Rvbmdhbi48L3NwYW4+PC9jZW50ZXI+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjwvYm9keT4KPC9odG1sPg=="
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_375 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_footer"
        $s3 = "<a href="
        $s4 = "() {if (current_user_can('administrator') || current_user_can('editor')) return; ?><div class=\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_376 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "->load_useragent_list("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_injector_gen_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "$__f = implode(\"\", array_map"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "(opera)|(chrome)|"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "$_COOKIE[$__name]"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "$timer_sum_stop = 'ew"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_006 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "1 - file was infected successfully"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_007 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "$process_user = posix_getpwuid(pos"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_009 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "$newcontent = @file_get_contents( $"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_010 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "$newcontent = @curl_exec($rend); @"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_011 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "file_get_contents($"
        $s2 = "@file_get_contents($get);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_gen_014 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "return $d(substr($c, $a, $b));};$II"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_015 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "src=\"'.file_get_contents"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_017 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "explode(\" \", \"98 97 115 101"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_018 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = " @register_shutdown_function(\""
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_019 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "@register_shutdown_function(\"__"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_020 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = "SERVER['REQUEST_URI']), \"rb\")"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_021 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "@$is_human = @detectBot"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_022 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "bbb_get($bbb_url);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_023 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "$urls = explode(\"\\n\", $_POST[urls]);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_024 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "http://js.users.51.la/"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_025 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "else if(strpos($tmp, 'YodaoBot') !== false || strpos($tmp, 'OutfoxBot') !== false){"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_026 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "echo htmlbody($url,$url2,$query"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_027 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "$p=str_replace('<link rel=\"canonical\" href"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_028 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "curl"
        $s1 = "$ids = explode(\"-\",$_GET['p']);"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_029 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "$body = fix_dirs($body, $folder);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_gen_030 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "_*\") as $ff){unlink($ff);}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_gen_031 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "position:"
        $s2 = "_links = array(\"<div style=\\\"position: absolute; left:-100%; top:-100%;\\\"><a href"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_gen_034 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "links.php?d=$donor"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_035 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "<?php $file=file"
        $s2 = "txt'); echo $file['0']; ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_gen_036 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "echo trim($u[\"$index\"]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_gen_037 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_reporting"
        $s1 = "$__var_to_echo = '<script type=\"text/javascript\" src=\""
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_038 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_reporting"
        $s1 = ".php\" . \"?fid=1461819&info=\" . http_build_query( $"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_039 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "style"
        $s1 = "display:"
        $s2 = "echo '<div style=\"display:none\"><a href=\"http"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_injector_gen_040 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "$homepage = file_get_contents('http://"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_gen_042 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$xxx = fwrite($xx"
        $s6 = "$xxx = fwrite($xx"
        $s7 = "file_get_contents(\"http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_injector_gen_042_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "$xxx = fwrite($xx"
        $s6 = "$xxx = fwrite($xx"
        $s7 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_injector_gen_043 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "bot|spider|wget/i',$_SERVER['HTTP_USER_AGENT"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_injector_gen_044 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "echo"
        $s2 = "@file_get_contents("
        $s3 = "$tmp,1);}else{ break;}"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_gen_045 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = "$divclass = sanitize_context_zero(\"PGRpdiBzdHlsZT0icG9z"
    condition:
        $s0 and $s1
}

rule php_spamseo_injector_group_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "fail_reason('Success!"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_injector_group_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "$localpath=getenv(\"SCRIPT_NAME\");$absolutepath"
    condition:
        $s0 and $s1
}

rule php_spamseo_japanesespam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "|| strpos($fromurl, 'yahoo.co.jp') !== false || strpos($fromurl, 'localhost')"
    condition:
        $s0 and $s1
}

rule php_spamseo_japanesespam_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<title>&#12523;&#12452;&#12532;&#12451;&#12488;&#12531;&#38263;&#36001;&#24067;,&#12532;"
    condition:
        $s0 and $s1
}

rule php_spamseo_japanesespam_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<div style=\"display:none;\"></div><iframe "
        $s2 = "echo $urls0.$siteurl.'index.php?"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_japanesespam_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<div style=\"display:none;\"></div><iframe "
        $s2 = "google|youdao|yahoo|bing|118114|"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_japanesespam_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "2015 Nikkei Business Publications, Inc. All Rights Reserved.</div>"
    condition:
        $s0 and $s1
}

rule php_spamseo_japanesespam_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "if((strpos($agent,'bot') > 0 || $aaip ==1)"
        $s3 = "strpos($all,\"ja\")>-1 && (strpos($s_ref,\"jp\")>0"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_jmodule_injector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "$rsa='af(!defahed(\"nums\"))"
    condition:
        $s0 and $s1
}

rule php_spamseo_Joomlainjector_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARLINE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "include_once JPATH_LIBRARIES.'/joomla/base/init.php';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_joomlapharma_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "$zzj='$eleael = tnt_gei("
    condition:
        $s0 and $s1
}

rule php_spamseo_joomlapharma_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "$link=gzinflate(base64_decode(file_get_contents($path.\"/libraries/joomla/environment/\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_jplist_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "= html_x_http_request("
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_jplist_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "$linksplit = trim($_REQUEST[\"LinkSplit\"]);"
    condition:
        $s0 and $s1
}

rule php_spamseo_link_cloaking_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "if(stristr($agent,'google') || stristr($agent,'bing') || stristr($agent,'yahoo') || stristr($agent,'aol')) {"
        $s3 = "  echo '"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_cloaking_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "curl_exec($"
        $s2 = "cloakedCurl"
        $s3 = "if(empty($CLOAKING["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "$fptest = fopen(\"wp-content/jspx.php\", \"w\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "function getlinks($arrUrl,$links)"
        $s2 = "function isCrawler()"
        $s3 = "link .= '<li><a href=\"http://'"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<?php echo '<a href=\"http://"
        $s2 = "</a>';?>"
        $s3 = "viagra"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "base64_decode($_POST["
        $s3 = "preg_replace(\"~(</body>)~i\", \"{$this->js}\\r\\n{$tracker_code"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<div"
        $s2 = "google') !== false || strpos"
        $s3 = "</a> &nbsp;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if(preg_match('/' . implode('|', $uagents) . '/i', $_SERVER['HTTP_USER_AGENT'])) {"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_link_injector_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "preg_replace(\"(<a href=\\\"[^>]*\\?)\",\"<a href=\\\"?\",$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_link_injector_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "style"
        $s2 = "if ( is_front_page() ) { echo ' <p hidden>"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_link_injector_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = ".$_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'] .'QQQ'. $_SERVER['HTTP_USER_AGENT'].'QQQEND',false,$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fopen"
        $s4 = "fwrite"
        $s5 = "error_reporting(0);"
        $s6 = "['post_content'] ="
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_link_injector_011 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "/i',$_SERVER['HTTP_USER_AGENT'])){ ?>"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_link_injector_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "base64_decode("
        $s3 = "eyJsaWNlbnNlIjoiY3JlYXRlX2Z1bmN0aW9uIiwiYWNjb3VudCI6IiR4IiwidGhlbWUiOiJ"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_014 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "aHR0"
        $s2 = "add_filter("
        $s3 = "$fullcontent = $content;"
        $s4 = "is_single() && ! is_user_logged_in() && ! is_feed() && ! stristr( $_SERVER["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_link_injector_014_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "aHR0"
        $s2 = "add_filter("
        $s3 = "$fullcontent = $content;"
        $s4 = "$enc1 = strpos($keyStr,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_link_injector_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "style"
        $s2 = "target=\"_blank\""
        $s3 = "echo '<div style=\"margin-left: 10px; text-align: center; font-size: 10px; color: #999999;\">';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_016 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "aHR0"
        $s2 = "128/2"
        $s3 = "echo ($basefile("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_017 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "32*2"
        $s2 = "PGRpdiBjbGFzcz0iaG0iPiA8YSBocmVmPSJodHRwOi8vaXN0YW5idWxlc2NvcnRhZ2VuY3kuY29tIiB"
        $s3 = "'ba'.'se'. 32*2 .'_' .'de'.'co'.'de';"
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule php_spamseo_link_injector_017_02 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "echo"
        $s1 = "32*2"
        $s2 = "PGRpdiBjbGFzcz0iaG0iPiA8YSBocmVmPSJodHRwOi8vaXN0YW5idWxlc2NvcnRhZ2VuY3kuY29tIiB"
        $s3 = /function \s*\w+\(\)\{\s*if\s*\(isset\(\$_SERVER\[.HTTP_USER_AGENT.\]\)\s*\&\&\s*preg_match.\\".Googleb[^\}]*=\";\s*echo\s*\$\w+/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_link_injector_018 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "base64_decode("
        $s3 = "(preg_match(\"#('|\\\")(http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_linkfeed_ru_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = "class Linkfeed"
    condition:
        $s0 and $s1
}

rule php_spamseo_linkfeed_ru_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "LINKFEED_USER.'/linkfeed.php')"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_LinkMaster_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "echo str_replace('LinkMaster"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_linksdonor_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<div "
        $s1 = "<div style"
        $s2 = "links.php?d=$donor\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_linksdonor_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "if ($vyborka = file(\"cache/$donor\"))"
    condition:
        $s0 and $s1
}

rule php_spamseo_linksdonor_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "print('<a href=\"'.myurls().'\">'.get_anchor"
    condition:
        $s0 and $s1
}

rule php_spamseo_links_cache_xml_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "getLinks('on',$LinksDataForXmlCache[links]"
    condition:
        $s0 and $s1
}

rule php_spamseo_linksuite_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "class LLM_client extends LLM_base {"
    condition:
        $s0 and $s1
}

rule php_spamseo_linkwithin_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_option"
        $s1 = "$af(~$b6d("
    condition:
        $s0 and $s1
}

rule php_spamseo_magentoinjector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include_once"
        $s2 = "@include_once BP . DS . 'app' . DS . 'etc' ."
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_mainlinks_ru_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "\"User-Agent: MainLink"
        $s2 = "\"User-Agent: MainLink"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_mainlinks_ru_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "class MLClient"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_modxinjector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "$linker = str_replace('<replace>', $param, $linker"
        $s3 = "$linker = base64_decode(\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_modxinjector_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "file_put_contents(MODX_CORE_PATH . \"/model/modx/smarty/logo.png\", base64_decode($_"
    condition:
        $s0 and $s1
}

rule php_spamseo_modxinjector_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_replace("
        $s1 = "str_replace(base64_decode(\"PC9ib2R5Pg\"), $contents . base64_decode(\"PC9ib2R5Pg\"),"
    condition:
        $s0 and $s1
}

rule php_spamseo_movies2watch_xyz_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = ".xyz\" target=\"_blank\" style=\"color: "
        $s2 = "movies2watch.xyz"
        $s3 = "<a href=\"http://movies2watch.xyz\" "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_movies2watch_xyz_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<a href="
        $s1 = ".xyz\" target=\"_blank\" style=\"color: "
        $s2 = "movies2watch.xyz"
        $s3 = "<iframe src=\"http://movies2watch.xyz"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_nulled_by_gomafia_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "aHR0cDovL2Nkbi5nb21hZmlhLmNvbQ=="
        $s3 = "gma_styles"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_nulled_by_gomafia_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "aHR0cDovL2Nkbi5nb21hZmlhLmNvbQ=="
        $s3 = "echo @file_get_contents(base64_decode(\"aHR0cDovL"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_payday_loans_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = ">payday loans</a>"
    condition:
        $s0 and $s1
}

rule php_spamseo_payday_loans_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "function callbackx($buffer) {$tx=\"\";if (function_exists(\"is_user_logged_in"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_pornspam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"LOCATION: http://185.36.100.210/"
    condition:
        $s0 and $s1
}

rule php_spamseo_pornspam_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$dw = str_replace(\"##RATING_COUNT##\", $rating_count, $dw);"
    condition:
        $s0 and $s1
}

rule php_spamseo_pornspam_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>FREE PORN"
    condition:
        $s0 and $s1
}

rule php_spamseo_pornspam_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$countNesting = strlen($url) % 2;"
    condition:
        $s0 and $s1
}

rule php_spamseo_pornspam_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "CURLOPT_URL, base64_decode(\""
        $s3 = "echo $wp_post_get_pwdcontent;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_pornspam_006 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = ".$_SERVER['HTTP_REFERER'].\"\\n\",  FILE_APPEND"
        $s3 = "if (filter_var(RC4::Decrypt($key, $val), FILTER_VALIDATE_EMAIL)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_pornspam_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "alert('Install downloaded porn player for watching videos!"
    condition:
        $s0 and $s1
}

rule php_spamseo_pornspam_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "=\"http://"
        $s1 = "<div"
        $s2 = "if ($_SERVER['REQUEST_URI']=='/'){?><div style=\"position:"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_pstmtdredirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "pstMtd"
        $s2 = "google.com\")){wp_redirect(base64_decode("
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_pstmtdredirect_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_SERVER"
        $s1 = "wpt.ninja"
    condition:
        $s0 and $s1
}

rule php_spamseo_randomredirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "$URL = $urls[rand(0, count($urls) - 1)].rand(11, 999);"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action( 'template_redirect','pagegood');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_001_020 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "if($_GET['mode']=='config'){echo"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_001_021 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$location = \"http://best-canadian-pills.rx-medical.com"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_001_022 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "$settings['url']=file_get_contents($geturl);"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_001_024 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "ocation"
        $s2 = "array('64.9.224.0', '64.9.255.255'),"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_002 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "mt_rand(0,count($"
        $s2 = "urls)"
        $s3 = "[$n]"
        $s4 = /<\?php[\s]*(\$[\w]+[\s]*=[\s]*strpos\(\$_SERVER\[.HTTP_USER_AGENT[^;]+;[\s]*)?\$[\w]*urls[\s]*=[\s]*array[\s]*\([\s]*.http/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_002_02 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = /<meta http-equiv[\s]*=[\s]*.refresh.[\s]*content[\s]*=[\s]*.[\d]+;[\s]*url[\s]*=[\s]*<\?php[\s]*echo[\s]*\$target_url;[\s]*\?>/
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_002_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "$rnd=rand(0,count($urls)-1);"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('pVj"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "@$_(\"eva"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_003_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "strre"
        $s2 = "@$_(\""
        $s3 = "$_ = strrev(\"tress"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_003_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('rRhrc5"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(base64_decode(\"DQ"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "define('ADMIN_REDIR_URL',"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_006 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "\"googlebot\",\"baiduspider\",\"sogou\",\"yahoo"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "php error_reporting(0);$a=str_split($password.'2','3"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_008 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "(strpos($useragent"
        $s2 = "function get_naps_bot()"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_009 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "$url = \"www.randomwebsite.com/cgi-bin/random.pl?$url\";"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_010 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo file_"
        $s4 = "echo file_get_contents('1x1.gif',FILE_BINARY);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_011 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "i', $uniq_ref) > 0)||(stristr($uniq_ref,\"google\")))  {header"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_012 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "if (!file_exists('redirect.url') || time() - filemtime('redirect.url') > 60)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_013 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "bOdWQkNnHHvxX0TqPhfTHt9kdnFuZdi8c464HpzXzhalY7iW3IwWnA57YJrelK8XFrYynFRnGombku7d8wwaZWtrECRRwMPvMoyffFZNejQnz01I92DurhRRRWpYUUUUAFFFe1"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_014 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "aHR0cDovL3Byb21vY2FzaW5vLnJ1Lw=="
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_015 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "$baidufromsite=\"http:"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_016 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "<script src=\"http://redirect.lifax."
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_027 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev"
        $s1 = "$_ = strrev(\"tress\\x61\");"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_028 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "if (fromse()&&isindex()){"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_029 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "$url = ( preg_match('/^[a-z2-7]+$/', $_SERVER['QUERY_STRING'])"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_030 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "$getbot = Getbot();"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_030_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "fucksure"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_031 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "Header('Location: '.$li);"
        $s3 = "$lin=$_GET[\"link\"];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_032 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "|^your.*|^zeto.*|^ZTE.*/i', $useragent)) {"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_033 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(stripos($_SERVER['HTTP_USER_AGENT']"
        $s3 = "\".trim($_GET['uu']).\".html\");"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_034 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "$arrquery[1],file_get_contents('http://'.$sites.'/search.php?'.$arrquery[0])));"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_035 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "Header('Location: http://bit.ly"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_036 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "echo \"if(s.indexOf('bing')>0||s.indexOf('aol')>0||s.indexOf('google"
        $s2 = "echo \"self.location='https://www.google.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_037 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "$url_parse = explode($article_url_parse, $_SERVER[ 'REQUEST_URI' ]);"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_038 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "else if ($isJa && !$isoldpage){"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_039 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "window.location=\"http://my.mail.ru/\""
        $s2 = "<?if($_SERVER['HTTP_USER_AGENT'] =="
        $s3 = "<?}else{?>"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_040 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "print <<< EOF"
        $s2 = "<script>window.location = \""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_041 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "window.opener.location.replace('$login_scam_page_link"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_042 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "function check_cookie($url_redirect)"
        $s2 = "check_cookie($another_mobile_redirect);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_043 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "define(\"FRH_TOTAL\", count($scams));"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_044 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:"
        $s2 = "$productId = preg_replace('/[^\\d]/', '',$QUERYSTRING);"
        $s3 = "header('location: http://'.$sites.'/index.php?main_page=product_info&products_id='.$productId);exit;"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_045 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "if(strtolower($URIRedirect)==\"/index.php\")"
        $s2 = "$wp_did_header"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_045_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "header('Location: http://bilgialma.co"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_046 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "$xml = @simplexml_load_file(\"http:"
        $s3 = "?> <meta http-equiv=\"refresh\" content=\"0; url="
        $s4 = "if (!session_id()){session_start(); ob_start();}  if (!preg_match('/facebookexternalhit"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_047 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x72\\x65\\x66\\x65\\x72\\x72\\x65\\x72"
        $s2 = "$replace_routes = array("
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_049 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$raw = base64_decode($encoded);"
        $s2 = "$res .= chr(ord($raw[$i]) ^ ord('x'));"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_050 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header(\"location:"
        $s2 = "php?\".$_SERVER[\"HTTP_HOST\"].$_SERVER[\"REQUEST_URI\"]);"
        $s3 = "i',@$_SERVER[\"HTTP_REFERER\"])) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_051 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "if (wordsFound(preg_quote(urldecode($referer"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_052 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "if(strpos($tmp, 'bot') == false){"
        $s3 = "$content=gethttpcnt($website.stripslashes($_SERVER['QUERY_STRING']));"
        $s4 = "header(\"Location: \" . $oursite . $_SERVER[\"QUERY_STRING\"]);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_053 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "<?php header('Location:"
        $s3 = "api.php?apitoken="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_054 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "document.cookie"
        $s2 = "authtoken=1; path=/;expires="
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_055 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "<body onload=\"location[_0x"
        $s2 = "=[\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\"];"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_056 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "$raw = base64_decode($encoded);"
        $s2 = "$res = ''"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_057 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "--/"
        $s4 = "exit();"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_058 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "=&$_COOKIE;$"
        $s3 = ";if(!empty($R)){foreach($R as $g=>$u){if($T)$T.="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_059 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "$fake_script = gen_rnd_str("
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_060 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "require_once"
        $s2 = "$host=bin2hex($_SERVER[\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_061 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "$url = $urls[array_rand($urls)];"
        $s3 = "header(\"Location: http://$url\");"
        $s4 = "echo \"Loading...please wait\";"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_062 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "$urls = array ("
        $s3 = "shuffle($urls);"
        $s4 = "header('Location: '.trim($urls["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_063 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "$count[$browser] += $data[$browser];"
        $s3 = "header('Location: ' ."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_064 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$url = 'http://'.$dom[mt_rand(0,sizeof($dom)-1)]."
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_065 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = ".\"userid=email\".\" &&\".md5(time()).md5(time()).md5(time()).md5(time());"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_066 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = "<meta http-equiv=\"refresh\" content=\"0;"
        $s3 = "<meta http-equiv=\"refresh\" content=\"0;URL='.trim($urls[rand(0,count($urls)-1)]).'\" />"
        $s4 = "$ip.\"\\r\\n\", FILE_APPEND);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_067 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "stripos($_GET[\"p\"],'ugg"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_068 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "+encodeURIComponent(document.referrer)+\"&default_keyword=\"+encodeURIComponent(document.title),document.currentScript?"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_069 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "if(isgoogle() or strpos($useragent, 'google') or strpos($useragent, 'yahoo') or strpos($useragent, 'msn') or strpos($useragent, 'bing') or strpos($useragent, 'bot')){ } else { $return = true"
        $s4 = "echo 'AliBots WP"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_070 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "array('\\n', '^')"
        $s3 = "(isset($_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_071 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "function mycode($link, $red_template, $ip)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_072 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "show_popup"
        $s3 = ";echo \"<meta http-equiv='refresh' content='0; url=$"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_073 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "require("
        $s2 = "Google')!==false){$"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_074 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "[Math.floor(urls.length*Math.random())];"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_075 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "file_put_contents(\"ips.txt\", @file_get_contents(\"ips.txt\")"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_077 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "sub_id_1='.strval(key($_"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_078 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "else header(\"Location:"
        $s2 = "$mykeys  = $_GET"
        $s3 = "if ((strpos($_SERVER[\"HTTP_REFERER\"], \"qdr:\")) OR (strpos"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_079 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "{header(\"HTTP/1.1 301\");header(\"Location"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_080 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "redirect_counter_bots.txt\",\"a+\");"
        $s2 = "fwrite($fp,\"\\r\\n\".\"(\".date('D M j G:i:s T Y').\")\".$_SERVER['HTTP_USER_AGENT"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_081 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "if ((stripos($_SERVER['REQUEST_URI'], 'spy')!== false || stripos($_SERVER['REQUEST_URI'], 'monitor')!=="
        $s2 = "stripos($_SERVER['HTTP_USER_AGENT'], 'google')=== false) { header(\"Location"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_082 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('pRj9U+O68Wc60//BZFxs35nEc"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_083 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "eval(gzinflate(base64_decode('pRhrc6PI8bNTlf+AVcTALosQellrY3vrVrm7quyto9WmkrK9qhEM0kTAcAOS"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_084 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$this->prepareDir($mimeDesc);"
        $s2 = "$pattern='$%s=%s($%s)';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_085 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "window.location"
        $s1 = "<title></title>"
        $s2 = "setTimeout(onTimer,"
        $s3 = "<td align=center><h1><i><font color=\"grey\">"
        $s4 = "window.location.href = 'http"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_086 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "include"
        $s3 = "header(\"Location: \".$link.\"?\".$_SERVER['QUERY_STRING']);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_087 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "ICdodHRwOi8vd3d3LnRyb3R0eXpvbmUuY29tL3dwLWNvbnRlbnQvcGx1Z2lucy"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_088 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "if(preg_match($botchar, $ua))"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_091 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "echo '<script type=\"text/javascript\" src=\"'.$"
        $s3 = "document.location.hostname\"}; </script> <script src=\"http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_092 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "getenv(\"REMOTE_ADDR\");"
        $s3 = "$randomlink = md5("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_093 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "if(preg_match($bots_ua, $agent)"
        $s3 = "die(\"<h1>500 Internal Server Error"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_094 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if(strstr($domain,'google"
        $s3 = "(isCrawler()&&is_home()&&!is_paged())"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_095 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "if (preg_match(\"#(google"
        $s3 = "header(\"Location: http://yandex.ru/yandsearch?lr=2&text=\".rand("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_096 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "getElementById"
        $s2 = "<body onLoad="
        $s3 = "if(document.getElementById){timer.innerHTML="
        $s4 = "<meta http-equiv=\"refresh\" content=\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_097 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "str_rot13('tmhapbzcerff')"
        $s2 = "str_rot13(strrev('rqbprq_46rfno')); eval($"
        $s3 = "rqbprq_46rfno')); eval($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_097_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "str_rot13('tmhapbzcerff')"
        $s2 = "str_rot13(strrev('rqbprq_46rfno')); eval($"
        $s3 = "<?php error_reporting(0);"
        $s4 = "{return true;}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_098 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "top.location"
        $s3 = ">window.top.location.href=\"http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_099 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "{@setcookie("
        $s3 = "@header(strrev("
        $s4 = "/i',$_SERVER['HTTP_USER_AGENT']) && $_COOKIE["
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_100 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "sgen()"
        $s3 = "bin2hex($_SERVER[\"HTTP_HOST\"]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_101 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "exit;"
        $s3 = "$id, $matches) ) { $url_string ="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_102 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "function sgen()"
        $s3 = "\"abcdefghijklmnopqrstuvwxyz\";"
        $s4 = "header(\"Location: \".$loc);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_103 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "dns_get_record($d[$i % count($d)], DNS_TXT);"
        $s3 = "urlencode(urldecode($_SERVER['QUERY_STRING'])), TRUE,"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_104 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ZWdfbWF0Y2goJyNMb2NhdGlvblw6IChbXFNdKy"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_105 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "@header('Location:'.$f[$_GET['id']]);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_106 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document["
        $s2 = "\\x"
        $s3 = ";document[_"
        $s4 = "\\x3F\\x6B\\x65\\x79\\x3D\""
        $s5 = "\"\\x3B\\x20\\x70\\x61\\x74\\x68\\x3D\",\"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66\",\"\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6E\\x67\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_redirect_107 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "@$_SERVER[base64_decode('SFRUUF9BQ0NFUFRfTEFOR1VBR0U=')];"
        $s4 = "=base64_decode('Zmdj');}else{if(function_exists(base64_decode('Y3VybF9pbml0')))$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_108 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http-equiv=\"refresh\""
        $s1 = "<meta http-equiv=\"refresh\" content=\""
        $s2 = /false\)[\s]*\{[\s]*header\(.Location: index\.php.\);[\s]*exit;[\s]*\}[\s]*\?>[\s]*<head><meta http-equiv=\"refresh/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_109 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "base64_decode"
        $s4 = "(gzinflate"
        $s5 = ";eval (gzinflate (base64_decode (str_rot13 ("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_redirect_110 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "header('Location:"
        $s2 = "header('Location: index.php');"
        $s3 = "<meta http-equiv=\"refresh\" content=\"1;URL=http"
        $s4 = "stripos($_SERVER['HTTP_ACCEPT_LANGUAGE'],"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_111 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "function user_min_browser($agent"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_112 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "!empty($_SERVER[\"HTTP_USER_AGENT\"]) && !preg_match("
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_113 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "PCFET0NUWVBFIEhUTUw+DQo8aHRtbD4NCiAgICA8aGVhZD4N"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_114 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval($"
        $s2 = "$_=($__=@"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_115 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "HTTP_X_FORWARDED_FOR',$_SERVER)){$ip=array_pop(explode"
        $s2 = "explode('|',$pri_addr);if($long_ip >= ip2long($start)"
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_116 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "String"
        $s1 = "String.fromCharCode("
        $s2 = "String.fromCharCode(71,69,84)"
        $s3 = /new XMLHttpRequest\(\);[\s]*[\w]+\.open[\s]*\([\s]*String\.fromCharCode\(71,69,84\)[^}]+responseText;\}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_117 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = "{die(\"writing\\n\");}fwrite($fp,$data);fclose($fp);}function xor_enc"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_118 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = "=\"RewriteCond %{HTTP_USER_AGENT} Googlebot"
        $s5 = "file_get_contents($file_pointer);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_redirect_119 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = ")||stristr(@$_SERVER[\"HTTP_REFERER\"],\"google"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_120 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = ");exit;"
        $s3 = "echo $file;"
        $s4 = ".php\");exit;}"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_121 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_REFERER']"
        $s2 = "301 Moved Permanently"
        $s3 = "if (strpos($_SERVER['REQUEST_URI'], '.html') !== false)"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_122 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "setcookie"
        $s2 = "(preg_match(\"/(\".$white_engine_search.\")/i\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_123 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "(strpos($tmp,"
        $s3 = "location:http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_124 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = "(strpos($tmp,"
        $s3 = "if((strpos($tmp, 'bot"
        $s4 = "$tmp = \"?\" . strtolower($_SERVER['HTTP_USER_AGENT']);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_125 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "HTTP_USER_AGENT"
        $s2 = "{die(\"<html><head><script>document.cookie="
        $s3 = "if(!preg_match('/bot/',@$_SERVER['HTTP_USER_AGENT']) && preg_match"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_126 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "NfZGVjb2RlKGd6aW5mbGF0ZShiYXNlNjRfZGVjb2RlKCRVZVhwbG9pVCkpKSk7CmV4aXQ7"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_128 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_REFERER']"
        $s2 = "google|bing|yandex"
        $s3 = "header(\"Location: http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_129 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "()==false){@header(\"Location: https://bit.ly"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_130 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gzuncompress"
        $s1 = "$url = xor_string($url, $key);"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_131 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "ICAgICAgICAgIGhlYWRlcigiTG9jYXRpb246ICRyZWRpclRvIik7CiAgICAgICAgICAgIGRpZTsKICAgICAgICB9CiAgICB9Cn0="
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_132 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_REFERER']"
        $s2 = "(strpos ($ref, 'google') !=="
        $s3 = "header(\"location:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_134 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header(\"Location:"
        $s2 = "gethostbyaddr($_SERVER["
        $s3 = "(strripos($"
        $s4 = "HTTP/1.1 302 Found"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_135 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_USER_AGENT']"
        $s2 = ")#i',@$_SERVER['HTTP_REFERER'])"
        $s3 = "if(!preg_match('/bot/',@$_SERVER['HTTP_USER_AGENT']) &&"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_136 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "fwrit"
        $s1 = "echo"
        $s2 = "fwrite($fh,\"$rec: $ip#$host#$browser\\r\\n\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_137 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "header('location:"
        $s2 = "if(isset($_GET['kokki']))"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_138 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ahoo"
        $s1 = "google"
        $s2 = "header(\"Location:"
        $s3 = "foreach(explode('|', $words) as $word) {"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_139 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "HN0cmlwb3MoJF9TRVJWRVJb"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_140 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "dns_get_record($d[$i % count($d)], DNS_TXT);"
        $s3 = ".substr(md5(strtolower($"
        $s4 = "array(base64_decode(str_replace("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_141 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "301 Moved Permanently"
        $s3 = /<\?php[\s]*header\(.HTTP[^;]+Moved Permanently.\);[\s]*header\(.Location:[\s]*http[^\)]+\.(su|ru)..\);[\s]*exit;[\s]*\/\*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_142 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "</script><?}"
        $s4 = "window.location='http"
        $s5 = "<? $m = $_REQUEST[\"m\"]; if($m==\"d\"){?>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_redirect_143 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "$_SERVER['HTTP_REFERER']"
        $s2 = "')>-1 || $_SERVER['HTTP_UPGRADE_INSECURE_REQUESTS']==1 || $_COOKIE['"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_144 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "header"
        $s2 = "{ header( \"Location: http://$domain\" );"
        $s3 = "$domain = substr(strrchr($email, \"@\"), 1);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_145 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "$payload = json_decode($_POST['data'], true);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_146 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "setTimeout("
        $s2 = "doc[loc] = \"<?php echo $l; ?>\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_147 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "toppillcaremarket.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_148 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.onload"
        $s3 = "location.href = url"
        $s4 = "Math.round(Math.random() * 9);"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_149 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(strstr(strtolower($_SERVER['HTTP_USER_AGENT']), \"googlebot\"))"
        $s3 = "{ header('Location: http"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_150 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "));die();"
        $s3 = "chr(104).chr(101).chr(97).chr(100).chr(101).chr(114);"
        $s4 = "(base64_decode('TG9jYXRpb246IA==').chr(104).chr(116).chr(116).chr(112).chr(115).chr(58).chr(47).chr(47).chr("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_151 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "explode("
        $s4 = "header("
        $s5 = "md5(@$_GET['pass'])=="
        $s6 = "($function){if($safe_mode=ini_get('safe_mode')&&strtolower($safe_mode)!='off')return false;"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_redirect_152 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "header('Content-Type:"
        $s5 = ");exit;}else{ header"
        $s6 = ");define('BASE_PATH',str_ireplace($_SERVER["
        $s7 = "}.PHP_EOL;}else if(stristr(@"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

// MANUAL FIX NECESSARY
rule php_spamseo_redirect_153 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = /\], true, 404\);\s*print (\$\w+\[\d+\]\.)+\$\w+\[\d+\];\s*\}/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_154 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "<?php class _"
        $s2 = "();endif;"
        $s3 = ")||$GLOBALS["
        $s4 = "(int)round("
        $s5 = "dEc"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_redirect_156 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "xVztjhzHdf0tA36HEbHG7iK7p"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_157 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "echo \"<!DOCTYPE html><iframe src=\\\"https://{$target}\\\" style="
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_158 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "location"
        $s2 = "window.location"
        $s3 = "(':', '', 'aH:R0:"
        $s4 = "print '<script language=\"javascript\">window.location = \"'"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_159 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval/*"
        $s2 = "*/($"
        $s3 = "].\"\\x"
        $s4 = ".\"\\x72\"."
        $s5 = "(0);/*$"
        $s6 = "*/eval/*$"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_redirect_gen_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "<meta HTTP-Equiv=\"refresh\" content=\"0; URL=<?"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_gen_007 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "/go.php?sid="
        $s3 = "if (strstr($old, 'RewriteRule"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_redirect_gen_017 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "$url = $urls[rand(0, count($urls)-1)];"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_gen_018 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "<meta http-equiv=refresh content='0; url=\".$url.\" '>\";exit()"
    condition:
        $s0 and $s1
}

rule php_spamseo_redirect_gen_019 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "preg_match (\"/(google|ask|yahoo|youtube|wikipedia"
        $s4 = "echo \"<script type='text/javascript'>setTimeout(\\\"window.location='\" ."
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_redirect_gen_020 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "($_POST["
        $s2 = ";}function redirect($url){echo \"<script type='text/javascript' src='$url/static/main.js'></script>\";return;}"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redirect_wl_con_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "header (\"Location: http"
        $s2 = "&c=wl_con"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_redrect_youjizz_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<meta"
        $s1 = "if(!allowOnly(array("
        $s2 = "; url=http://youjizz.com"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_related_injector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "echo '<div id=\"Related\">"
    condition:
        $s0 and $s1
}

rule php_spamseo_remote_cloaker_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header("
        $s1 = "$response = @file_get_contents($remote_cloaker"
    condition:
        $s0 and $s1
}

rule php_spamseo_remote_dor_contnet_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "($dor_way);"
        $s2 = "$dor_content=get_content2($dor_way);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_remote_dor_contnet_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "($dor_way);"
        $s2 = "$cont .= 'function get_content2"
        $s3 = "$files_to_write"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_replicas_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "1140696640@qq.com"
    condition:
        $s0 and $s1
}

rule php_spamseo_replicas_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "$arrIdUrl = array(\"0\"=>"
        $s2 = "-adidas-"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_replicas_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "include 'check_is_bot.php';if(empty($is_bot)){echo"
    condition:
        $s0 and $s1
}

rule php_spamseo_require_wp_content_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "require('./wp-content/uploads/ad.php')"
    condition:
        $s0 and $s1
}

rule php_spamseo_require_wp_content_001_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require('./wp-content/"
        $s2 = "require('./wp-content/"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_require_wp_includes_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "@require('wp-includes/"
    condition:
        $s0 and $s1
}

rule php_spamseo_rewriter_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "fopen(\".htaccess\""
        $s4 = "@unlink"
        $s5 = "scandir(sys_get_temp_dir("
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule php_spamseo_rewriter_002_02 : spamseo
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "fopen(\""
        $s2 = "if (file_exists("
        $s3 = "unlink"
        $s4 = /fopen\s*\((\"|')[(\$dir\/\.)]+htaccess(\"|')\s*,\s*(\"|')w(\"|')\s*\)\s*;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_rewriter_002_03 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "if (file_exists("
        $s3 = "fopen(\"../../wp-login.php\", \"r\""
        $s4 = "exec(\\'unzip"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_rewriter_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "trustedhotmart.com"
    condition:
        $s0 and $s1
}

rule php_spamseo_rewriter_003_02 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "globalpharmshop.ru"
    condition:
        $s0 and $s1
}

rule php_spamseo_rough_popup_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "if(!preg_match(\"/google"
        $s3 = "$popup_files[$i] = trim($v[1]);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_SEoDOR_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gent"
        $s1 = "User-Agent: SEoDOR-Client ("
    condition:
        $s0 and $s1
}

rule php_spamseo_seodor_biz_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "substr($_SERVER['REQUEST_URI'], strlen($pathToDor));"
    condition:
        $s0 and $s1
}

rule php_spamseo_serverjump_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Location:"
        $s1 = "eader('Location: "
        $s2 = "header('Location: http:"
        $s3 = "header('Location: http://www.serverjump.com"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_session_id1_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "document"
        $s2 = "SESSION_ID1"
        $s3 = "exit('<script>document.location.href = "
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_setlinks_ru_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "/slsimple.php')"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_setlinks_ru_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = ".\"/slclient.php\")"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_setlinks_ru_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = "\"/slconfig.php\");"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_setlinks_ru_003_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "mysql_query(\"replace into sl_cache values"
    condition:
        $s0 and $s1
}

rule php_spamseo_setlinks_ru_004 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "FILE"
        $s1 = "$server = 'show.setlinks.ru"
    condition:
        $s0 and $s1
}

rule php_spamseo_shadykit_com_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ech"
        $s1 = "shadykit.com"
    condition:
        $s0 and $s1
}

rule php_spamseo_showHide_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "echo"
        $s2 = "showHide"
        $s3 = "echo file_get_contents("
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_sitemap_doorway_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CURL"
        $s1 = "function isspider()"
        $s2 = "<sitemapindex"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_sitemap_doorway_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "sprintf($"
        $s2 = "!preg_match(\"/\\/$/si\","
        $s3 = "$map_index = \"{$dir}sitemap_index.xml"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_sitemap_doorway_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "sitemaps.org"
        $s2 = "$request_url=isset($_GET['url'])?$_GET['url']:'';"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_sitemap_doorway_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "smuri"
        $s2 = "@ignore_user_abort(1);"
        $s3 = "@set_time_limit"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_sitemap_doorway_004_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "smuri"
        $s2 = "error_reporting(0);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_sitemap_doorway_004_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "smuri"
        $s2 = "$add_content, $smstr)){"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_sitemap_doorway_005 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "header("
        $s4 = "HTTP_ACCEPT_LANGUAGE"
        $s5 = "httpbin"
        $s6 = "sprintf(\"<loc>%s</loc>"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_sitemap_doorway_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "gzinflate(base64_decode("
        $s3 = "pTt7U9vIk19FONpIygrZhoQkYEFSgWyoX"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_sitemap_doorway_008 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "QHNldF90aW1lX2xpbWl0KDM2MDApOw0KQGl"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_sitemap_doorway_009 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "header("
        $s4 = "HTTP_ACCEPT_LANGUAGE"
        $s5 = "Googlebot"
        $s6 = ")<1&&function_exists('file_get_contents')){"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_sitemap_doorway_010 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "$url)"
        $s5 = "return $"
        $s6 = "$index_url = \"http://$go_domain/index.php?dom=%s&uri=%s&"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_sitemap_doorway_012 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "* Front to the WordPress application."
        $s2 = "<a href="
        $s3 = "file_get_contents('/chroot"
        $s4 = "mb_convert_encoding($"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_sitemap_doorway_012_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "define"
        $s1 = "* Front to the WordPress application."
        $s2 = "<a href="
        $s3 = "file_get_contents('/chroot"
        $s4 = "display:none"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_sitemap_doorway_013 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get_"
        $s1 = "file_get_c"
        $s2 = "HTTP_USER_AGENT"
        $s3 = "header("
        $s4 = "HTTP_ACCEPT_LANGUAGE"
        $s5 = "base64_encode(@$_SERVER["
        $s6 = "(strpos($pingRes"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_SoakSoak_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_enqueue_scripts', 'FuncQueueObject');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_SoakSoak_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "add_action('wp_enqueue_scripts', 'Func11');"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_spamlinkcheck_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_SERVER["
        $s1 = "function wp_initialize_the_theme_load()"
        $s2 = "$f = dirname(__file__) . \"/footer.php\";"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_static_link_provider_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUE"
        $s1 = "$links=$linkProvider->getLinks($_SERVER['REQUEST_URI'],"
    condition:
        $s0 and $s1
}

rule php_spamseo_static_link_provider_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "class StaticLinkProvider{"
        $s2 = "function getLinks($key, $count, $separator='|'){"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_static_link_provider_003 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".php"
        $s1 = ".php|ryfgddjs1"
    condition:
        $s0 and $s1
}

rule php_spamseo_streamset_mysql_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "define ('streamset', tempnam"
    condition:
        $s0 and $s1
}

rule php_spamseo_stylesshets_com_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "@move_uploaded_file"
        $s2 = "@move_uploaded_file(#userfile_tmp, #abod);"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_stylesshets_com_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "touch("
        $s1 = "touch($htaccess, mktime(12, 17, 11, 12, 31, 2013));"
    condition:
        $s0 and $s1
}

rule php_spamseo_stylesshets_com_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "if(str"
        $s2 = "if(strpos($m[2],\"http://\") !== 0 && strpos($m[2],\"https://\") !== 0 && strpos($m[2],\"//\") !== 0 ){"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_stylesshets_com_004 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = "unset($_GET[$puids_array[$puid_name]]);"
    condition:
        $s0 and $s1
}

rule php_spamseo_stylesshets_com_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "include \"./wp-admin/headers"
    condition:
        $s0 and $s1
}

rule php_spamseo_suspicious_404_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "The requested URL /js/code/a_0.txt was not"
    condition:
        $s0 and $s1
}

rule php_spamseo_tdsredirect_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = "error_reporting(0)"
        $s2 = "<table border=\"0\"><tr><td>TDS</td><td><input type=\"text\" name=\"ptds\" value=\""
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_tdsredirect_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passw"
        $s1 = "$password=$a[4].'.'.$a[3].'.'.$a[2].'.'.$a[1];"
    condition:
        $s0 and $s1
}

rule php_spamseo_theme_link_spam_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "<n uers=\"uggc:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_theme_link_spam_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "shapgvba purpx_urnqre(){vs(!(shapgvba_rkvfgf"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_theme_link_spam_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "<a href=\"<?php echo esc_url( __( 'http://www.wpfree.ru/"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule php_spamseo_theme_link_spam_004 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = /if[\s]*\([\s]*![\s]*function_exists\([^)]+\)\)[\s]*\{[\s]*function [\w]+\(\$content\)/
        $s2 = /if[\s]*\([\s]*![\s]*function_exists\([^)]+\)\)[\s]*\{[\s]*function[\s]*[\w]+\(\$content\)[\s]*\{[\s]*if[\s]*\(is_user_logged_in\(\)\)\{/
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_theme_link_spam_004_02 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = "\\x70\\157\\x73\\151\\164\\x69\\x6f\\x6e\\72\\141\\x62\\x73\\x6f\\154\\165\\164\\145"
    condition:
        $s0 and $s1
}

rule php_spamseo_theme_link_spam_005 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "\\74\\x64\\x69\\x76\\x20\\x73\\164\\x79\\x6c\\145\\75\\x22\\x70\\157\\163\\x69\\164\\151\\x6f\\156\\x3a\\x61\\142\\x73\\157\\x6c\\x75\\164\\x65\\73\\164\\x6f\\x70\\72"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_tiaourl_doorway_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = "$tiaourl ="
    condition:
        $s0 and $s1
}

rule php_spamseo_tiaourl_doorway_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$tiaourl ="
        $s4 = "google"
        $s5 = "$ksite = !empty"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_tiaourl_doorway_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$tiaourl ="
        $s4 = "google"
        $s5 = "$tiaourl = file_get_contents(\"http:"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_tiaourl_doorway_004 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$tiaourl ="
        $s4 = "google"
        $s5 = "function get_url"
        $s6 = "@strtolower($_SERVER"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_tiaourl_doorway_004_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google"
        $s6 = "function get_url1($con_s)"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

// MANUAL FIX NECESSARY
rule php_spamseo_tiaourl_doorway_005 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$tiaourl ="
        $s4 = "google"
        $s5 = "function get_url"
        $s6 = "function get_url_con($con"
        $s7 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*strtolower\(\$_SERVER\[.HTTP_REFERER.\]\);[\s]*if[\s]*\(strpos/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6 and $s7
}

rule php_spamseo_tiaourl_doorway_006 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "$tiaourl ="
        $s4 = "google"
        $s5 = "global $searchsite,"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule php_spamseo_tiaourl_doorway_007 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = "\"http"
        $s5 = "google"
        $s6 = "file_put_contents($_SERVER['DOCUMENT_ROOT'].\"/sitemap.xml\""
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule php_spamseo_unicode_vars_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "#!/usr/bin/php -q"
        $s2 = "eNrtW"
        $s3 = "eNrtWmtTG0my/SuMw7HYMY6de"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_unicode_vars_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "#!/usr/bin/php -q"
        $s2 = "eNrtW"
        $s3 = "eNrtWWtPW1cW/SsERTVo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_unicode_vars_003 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "#!/usr/bin/php -q"
        $s2 = "eNrtW"
        $s3 = "eNrtWetSU1kafRWkrA7UUO"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_uno_decoder_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$String^$Gamma"
        $s2 = "function Uno_"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_urlfilelist_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = "=\"aHR0cDovL3d3dy5"
        $s3 = "?password=systemseo"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_veribot_001_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "veribot()"
        $s2 = "if (veribot"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_veribot_001_002 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "veribot()"
        $s2 = "function veribot()"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_viaWorm_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = "_content = str_replace('position:fixed !important; left:-9999px !important;', '', $__"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_viaWorm_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = "eval(base64_decode"
        $s3 = "viaWorm"
        $s4 = "class viaWorm"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_viaWorm_infector_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ZXZ"
        $s1 = "$worm->hideWormFiles();"
    condition:
        $s0 and $s1
}

rule php_spamseo_visitor_tracker_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "visitorTracker*/@ob_start();@ini_set(\"display_errors\",0);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_visitor_tracker_001_02 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "$SETTS = unserialize(@file_get_contents(SETTINGS_FILE"
        $s3 = "function show_bad_js(){"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_visitor_tracker_001_03 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = "<!--visitorTracker--><?php @ob_start();@ini_set(\"display_errors\",0);"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_visitor_tracker_001_04 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "visitorTracker"
        $s2 = "<!--visitorTracker--><?php ?><!--visitorTracker-->"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_wordpress_hide_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "add_action("
        $s2 = "->user_login !="
        $s3 = "display:none"
        $s4 = "#post-"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule php_spamseo_wpcore_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "require_once( 'wp-core.php"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_wpcore_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "bot"
        $s1 = "Check('wp-login.php', \"'antibot_ajax"
    condition:
        $s0 and $s1
}

rule php_spamseo_wp_cd_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = "if (isset($_REQUEST['action']) && isset($_REQUEST['password']) && ($_REQUEST['password'] =="
        $s2 = "if (preg_match('!<div id=\"wp_cd_code\">(.*?)<"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_wp_cd_002 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "$install_code = str_replace('{$PASSWORD}' , $install_hash, base64_decode( $install_code ));"
    condition:
        $s0 and $s1
}

rule php_spamseo_wp_cd_003 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_exists"
        $s3 = "'/wp-cd.php')"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule php_spamseo_WP_plugin_expired_domain_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "Enmask.Captcha.js"
    condition:
        $s0 and $s1
}

rule php_spamseo_xcalendar_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "equire"
        $s1 = "xcalendar.php"
    condition:
        $s0 and $s1
}

rule php_spamseo_xrenoder_001 : spamseo
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "__FILE__"
        $s1 = "if (strpos(\"@!#%xrenoder^&*()\""
    condition:
        $s0 and $s1
}

rule php_spamseo_xViewState_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "document.write("
        $s2 = "}xViewState();"
    condition:
        $s0 and $s1 and $s2
}

rule php_spamseo_xViewState_002 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = "}dnnViewState();"
    condition:
        $s0 and $s1
}

rule php_spamseo_xyz_link_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "href="
        $s1 = ".xyz\" target=\"_blank\" style=\"color: "
    condition:
        $s0 and $s1
}

rule php_spamseo_zym_decrypt_001 : spamseo
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "['zym_decrypt']"
    condition:
        $s0 and $s1
}

rule pl_backdoor_Asmodeus_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "print \"Asmodeus Perl Remote Shell"
    condition:
        $s0 and $s1
}

rule pl_backdoor_cgitelnetshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CGI"
        $s1 = "CGI-Telnet"
    condition:
        $s0 and $s1
}

rule pl_backdoor_cgitelnetshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec $SHELL || die print CONN"
    condition:
        $s0 and $s1
}

rule pl_backdoor_cgitelnetshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = ">CGI Shell</b> Connected"
    condition:
        $s0 and $s1
}

rule pl_backdoor_cgitelnetshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "print \"<code>Connection closed by foreign host.<br><br></code>\";"
    condition:
        $s0 and $s1
}

rule pl_backdoor_conf_steal_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "symlink('/home/'.$user.'/public_html/configuration.php"
    condition:
        $s0 and $s1
}

rule pl_backdoor_confspy_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passw"
        $s1 = "open(ETC_PASSWD, '/etc/passwd"
    condition:
        $s0 and $s1
}

rule pl_backdoor_connectback_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "door"
        $s1 = "Back Backdoor"
    condition:
        $s0 and $s1
}

rule pl_backdoor_connectback_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "print \"[*] Spawning Shell \\n"
    condition:
        $s0 and $s1
}

rule pl_backdoor_generic_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "system(\"unzip"
        $s2 = "shell_exec(\"unzip"
        $s3 = "proc_open(\"unzip"
        $s4 = "system(\"unzip"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule pl_backdoor_generic_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "/bin/sh"
        $s2 = "system($shell);"
    condition:
        $s0 and $s1 and $s2
}

rule pl_backdoor_IHS_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "print \"IHS BACK-CONNECT BACKDOOR  \\n\\n\";"
    condition:
        $s0 and $s1
}

rule pl_backdoor_priv8_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = "<title>priv8 cgi shell</title>"
    condition:
        $s0 and $s1
}

rule pl_backdoor_reverse_shell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "system('/bin/sh -i');"
    condition:
        $s0 and $s1
}

rule pl_backdoor_revsliderexpoit_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "Revslider/Showbiz shell upload exploit"
    condition:
        $s0 and $s1
}

rule pl_backdoor_revsliderexpoit_001_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "$shell"
        $s2 = "my $shell = \"wp-content/plugins/$plugin/temp/update_extract/$plugin/cmd.php\";"
    condition:
        $s0 and $s1 and $s2
}

rule pl_backdoor_revsliderexpoit_001_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "my $cmd3 = encode_base64(\"uname -n\");"
    condition:
        $s0 and $s1
}

rule pl_backdoor_satanicsocks_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "Satanic Socks Server"
    condition:
        $s0 and $s1
}

rule pl_backdoor_shellbot_001 : backdoor
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system"
        $s1 = "#  ShellBOT by: "
    condition:
        $s0 and $s1
}

rule pl_backdoor_shellbot_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "notice(\"$pn\", \"\\001VERSION"
        $s2 = "sendraw($IRC_cur_socket,\"PRIVMSG $printl :Nenhuma porta aberta foi encontrada\");"
    condition:
        $s0 and $s1 and $s2
}

rule pl_backdoor_shellbot_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "&xml_start($path,$bug,$dork,\"GooGLeCA,GooGLeDE,GooGLeUK"
    condition:
        $s0 and $s1
}

rule pl_backdoor_system_base64_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "decode_base64"
        $s2 = "system(decode_base64($"
    condition:
        $s0 and $s1 and $s2
}

rule pl_backdoor_webr00t_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "webr00t cgi shell"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "# cmd.pl: Run commands on a webserver"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "=\"/usr/sbin/apache2 -k start\";# <-- shell in ps aux"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "prepare(\"SHOW DATABASES\");$sth->execute;print \"<b>DATABASES:</b>"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "''=~('(?{'.('vKY18Fv"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "print \"httpflood from irc\\n\";"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "$login = crypt($WebShell::Configuration::password, $salt);"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "DLCCyber Perl Shell"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "<title>GO.cgi</title>"
    condition:
        $s0 and $s1
}

rule pl_backdoor_webshell_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "print \"\\tcompleted"
        $s2 = "uid=0(root) gid=0(root) groups=0(root)"
    condition:
        $s0 and $s1 and $s2
}

rule pl_backdoor_webshell_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "decode_base64"
        $s2 = "admin\\@$ServerName"
    condition:
        $s0 and $s1 and $s2
}

rule pl_backdoor_webshell_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "POST"
        $s2 = "echo '"
        $s3 = "eval \"$k=\\\"`cgi_decodevar \\\"$v\\\"`\\\"\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule pl_backdoor_webshell_gen_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "} else { syswrite($client, \"\\x05\\xFF\", 2); };"
    condition:
        $s0 and $s1
}

rule pl_exploit_autoroot_001 : exploit
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "print \"# Auto Rooting"
    condition:
        $s0 and $s1
}

rule pl_hacktool_bruteforce_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Brute"
        $s1 = "FBF - FTP Brute Forcer"
    condition:
        $s0 and $s1
}

rule pl_hacktool_bruteforce_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "eval unpack u=>q{_\"G5S92!'971O<"
    condition:
        $s0 and $s1
}

rule pl_hacktool_bruteforce_002_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "HTTP::Request->new(POST"
        $s2 = "wordpress_logged_in"
    condition:
        $s0 and $s1 and $s2
}

rule pl_hacktool_bruteforce_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "print \"Scanning: \".$a.\".0.0.0/8\";"
    condition:
        $s0 and $s1
}

rule pl_hacktool_bruteforce_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "decode_base64"
        $s2 = "QnJ1d"
    condition:
        $s0 and $s1 and $s2
}

rule pl_hacktool_com_mediaexploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "?option=com_media&view=images&tmpl=component&fieldid=&e_name=jform_articletext&asset=com_content&author=&folde"
    condition:
        $s0 and $s1
}

rule pl_hacktool_configuration_stealer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "$kola=$msr.\"/\".$user;"
    condition:
        $s0 and $s1
}

rule pl_hacktool_configuration_stealer_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "config"
        $s1 = "confspy.pl"
    condition:
        $s0 and $s1
}

rule pl_hacktool_configuration_stealer_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = ".'/httpdocs/wp-config.php',$"
    condition:
        $s0 and $s1
}

rule pl_hacktool_configuration_stealer_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/sh"
        $s2 = "NAMED_CONF=\"/etc/named.conf\""
        $s3 = "echo -e '\"uname\":[\"'$(uname -a"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule pl_hacktool_cpanel_attack_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "Cpanel Password Brute Forcer"
    condition:
        $s0 and $s1
}

rule pl_hacktool_ddosperlircbot_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "sendraw($IRC_cur_socket, \"PRIVMSG $printl"
    condition:
        $s0 and $s1
}

rule pl_hacktool_ddosperlircbot_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "decode_base64"
        $s2 = "eval(decode_base64"
        $s3 = "eval(decode_base64('IyEvdXNyL2Jpbi9wZXJs"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule pl_hacktool_defacer_script_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "$dirok=\"\\e[33m[+]\\e[m Ok, Diretory that wanna be Massdeface"
    condition:
        $s0 and $s1
}

rule pl_hacktool_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "print \"\\n\\n\\t.::. Exploit for JCE Joomla Extension"
    condition:
        $s0 and $s1
}

rule pl_hacktool_flooder_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "if ( print $sock $primarypayload ) {"
    condition:
        $s0 and $s1
}

rule pl_hacktool_flooder_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "randpackets:"
        $s2 = "socket(crazy, PF_INET, SOCK_DGRAM, 17)"
    condition:
        $s0 and $s1 and $s2
}

rule pl_hacktool_flooder_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "send(flood, pack(\"a$psize\",\""
    condition:
        $s0 and $s1
}

rule pl_hacktool_flooder_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Hack"
        $s2 = "Created By arage"
    condition:
        $s0 and $s1 and $s2
}

rule pl_hacktool_information_gathering_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "open (d0mains, '/etc/named.conf')"
    condition:
        $s0 and $s1
}

rule pl_hacktool_information_gathering_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "my $glink = (\"www.google.co.uk/search?q=\".&key($dork"
    condition:
        $s0 and $s1
}

rule pl_hacktool_information_gathering_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "print \"\\n\\n WORDPRESS BRUTE"
    condition:
        $s0 and $s1
}

rule pl_hacktool_ircbot_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "[Attack BOT]"
    condition:
        $s0 and $s1
}

rule pl_hacktool_ircbot_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "my $cmd=\"[PHP-SHELL]\";"
    condition:
        $s0 and $s1
}

rule pl_hacktool_ircbot_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "\"JGM9Z3ppbmZsYXRlKHN0cl9yb3QxMyhiYXNlNjRfZGVjb2RlKCJyVWw2UXVOVEVQNWNKUDdE"
    condition:
        $s0 and $s1
}

rule pl_hacktool_ircbot_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "unless ($natrix eq \"!bot\" and $arg =~ /^\\!nick"
    condition:
        $s0 and $s1
}

rule pl_hacktool_ircbot_006 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "!bot @milw0rm"
    condition:
        $s0 and $s1
}

rule pl_hacktool_mumblehard_spammer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "if ($^O eq \"MSWin32\") { $ewblock = 10035; $eiprogr = 10036;"
        $s2 = "my $sender = @{$b->{from}}[int rand scalar @{$b"
    condition:
        $s0 and $s1 and $s2
}

rule pl_hacktool_symlink_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "print $fileHandle \"AddHandler txt .php\\n\";"
    condition:
        $s0 and $s1
}

rule pl_hacktool_symlink_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "!/usr/bin/perl"
        $s1 = "eval eval '\"'."
    condition:
        $s0 and $s1
}

rule pl_hacktool_w3tw0rk_B0T_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/etc/"
        $s1 = "w3tw0rk B0T"
    condition:
        $s0 and $s1
}

rule py_backdoor_ChickenLittleshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "shell"
        $s2 = "(.)(.) [ChickenLittle Shell by Zep] (.)(.)"
    condition:
        $s0 and $s1 and $s2
}

rule py_backdoor_connect_back_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "shell"
        $s2 = "print \"ython connect-back door\""
    condition:
        $s0 and $s1 and $s2
}

rule py_backdoor_connect_back_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)"
    condition:
        $s0 and $s1 and $s2
}

rule py_backdoor_connect_back_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "$cp = <SOCK>; $cp =~ s/\\n//; $cp =~ s/\\r//;"
    condition:
        $s0 and $s1 and $s2
}

rule py_backdoor_dropper_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "&name=r0ot.py"
    condition:
        $s0 and $s1
}

rule py_backdoor_generic_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "shell"
        $s2 = "ython connect-back door\""
    condition:
        $s0 and $s1 and $s2
}

rule py_backdoor_joomra_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "shell"
        $s2 = "clear = \"\\x1b[0m\""
    condition:
        $s0 and $s1 and $s2
}

rule py_backdoor_shell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "system("
        $s1 = "char payload["
    condition:
        $s0 and $s1
}

rule py_backdoor_webshell_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "payload = \"\"\"perl -e 'use Socket;$i=\"%s\";$p=%s;socket(S,PF_INET"
    condition:
        $s0 and $s1
}

rule py_backdoor_webshell_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "blur|9 -quality 75 -interlace line fail.jpg jpeg:fail.jpg;wget {shelltxt}"
    condition:
        $s0 and $s1
}

rule py_backdoor_webshell_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "= \".\".join(map(str,"
        $s3 = "return ''.join([chr(ord(c) ^"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule py_backdoor_webshell_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "\\x"
        $s2 = "for user in `printf \"%s\\n\" \"$lse_shell_users\" | cut"
    condition:
        $s0 and $s1 and $s2
}

rule py_backdoor_webshell_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "($unix)?('echo \"`uname -a`\";echo \"`id`\";/bin/sh'):('cmd.exe');"
    condition:
        $s0 and $s1
}

rule py_backdoor_webshell_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "eval(compile(zlib.decompress(base64.b64decode("
    condition:
        $s0 and $s1
}

rule py_hacktool_bruteforce_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "urllib.urlencode(login_form_seq)"
        $s2 = "\"/admin/\", login_form_data).read()"
    condition:
        $s0 and $s1 and $s2
}

rule py_hacktool_bruteforce_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_put_contents"
        $s3 = "glob.adminka_ip = adminka_list[int(time.time()) % len(adminka_list)]"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule py_hacktool_ddos_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "import socks"
        $s2 = "googlebot.com"
        $s3 = "self.tor = tor"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule py_hacktool_ddos_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "Private DDoS Tool"
    condition:
        $s0 and $s1
}

rule py_hacktool_ddos_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "open('xmlrpc_list.txt'"
    condition:
        $s0 and $s1
}

rule py_hacktool_ddos_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "import http.client"
        $s2 = "GoldenEye(object)"
    condition:
        $s0 and $s1 and $s2
}

rule py_hacktool_ddos_005 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "./torshammer.py"
    condition:
        $s0 and $s1
}

rule py_hacktool_drupal_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "target + \"?q=user/password&\" + payload"
    condition:
        $s0 and $s1
}

rule py_hacktool_drupal_toolkit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = "Black Sniper"
        $s2 = "} Drupal Mass Exploiter"
    condition:
        $s0 and $s1 and $s2
}

rule py_hacktool_exploit_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "data={\"___directive\": \"e3tibG9jayB0eXBlPUFkbWluaHRtbC9yZXBvc"
    condition:
        $s0 and $s1
}

rule py_hacktool_exploit_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "$exploits{$key}{alt};"
    condition:
        $s0 and $s1
}

rule py_hacktool_generic_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "passw"
        $s1 = "print exploit"
    condition:
        $s0 and $s1
}

rule py_hacktool_joomla_rce_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "shell"
        $s2 = "generate_payload"
        $s3 = "eval("
        $s4 = "\\x"
        $s5 = "JDatabaseDriver"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

rule py_hacktool_password_retriever_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "urllib"
        $s2 = "secr7 = re.search (r\"(mosConfig_password = ')"
    condition:
        $s0 and $s1 and $s2
}

rule py_hacktool_password_retriever_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Brute"
        $s1 = "print \"User:\",users,\"Password:\",words"
        $s2 = "= open( 'pwned.log', 'a' )"
    condition:
        $s0 and $s1 and $s2
}

rule py_hacktool_symlink_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(compile(zlib.decompress(base64.b64decode(\"eJydWG1v2zYQ"
    condition:
        $s0 and $s1
}

rule py_hacktool_symlink_001_02 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "use MIME::Base64;use Compress::Zlib;eval(Compress::Zlib::memGunzip(decode_base64(\"H4sIAAAAAAAA"
    condition:
        $s0 and $s1
}

rule py_hacktool_webshell_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "version = \"0.1 [py]\""
    condition:
        $s0 and $s1
}

rule py_hacktool_webshell_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "CGI"
        $s1 = ">Welcome to cgi-shell.py"
    condition:
        $s0 and $s1
}

rule py_hacktool_webshell_003 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "child_stdin, child_stdout = os.popen2(base64.b64decode(cmd))"
    condition:
        $s0 and $s1
}

rule py_hacktool_webshell_004 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "query=$(echo $cmd | base64 --decode)"
    condition:
        $s0 and $s1
}

rule py_hacktool_WHMCS_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "urllib"
        $s2 = "print exploit("
        $s3 = "tbladmins"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule py_hacktool_WP_xmlrpc_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "if html == \"XML-RPC server accepts POST requests only.\":"
    condition:
        $s0 and $s1
}

rule py_hacktool_WSO_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "{hashlib.md5(u.netloc).hexdigest():hashlib.md5(shell_pass).hexdigest()}"
    condition:
        $s0 and $s1
}

rule py_malware_cryptominer_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "= 'fpm-worker-main'"
    condition:
        $s0 and $s1
}

rule py_malware_injector_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "writer.write(base64.b64decode("
    condition:
        $s0 and $s1
}

rule py_malware_injector_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "md5("
        $s1 = "exit"
        $s2 = "write(base64.b64decode("
        $s3 = "SELF_PATH = os.path.abspath(__file__)"
        $s4 = "injfs = ['"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

rule py_malware_injector_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "import urllib"
        $s2 = "return zlib . decompress ( base64 . b64decode ("
    condition:
        $s0 and $s1 and $s2
}

rule py_malware_symlink_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "eval(compile(zlib.decompress(base64.b64decode(\"eJydWN1z4jgSfzZ/hdZTWcOG2JC6vQdC2MrNTO6m"
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_0nOs_001 : rex_sig
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$GLOBALS["
        $s1 = "=urldecode("
        $s2 = /\$content\s*=\s*str_replace\(\$repstr .\$GLOBALS\[.[0O]{9,}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_array_filter_001 : array
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = "});/*"
        $s3 = /\((@?\$\s*(\{['\"])?_(POST|COOKIE)[\w\}\{'\"\s,\$\_\/\*\)\@]{10})/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_array_join_002 : array
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "{1"
        $s1 = /\$\w\w+\s*=\s*(\$\w\w+\{\d+\}\s*\.\s*){6}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_array_join_003 : array
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /@\$/
        $s2 = /['\"]\S{64}/
        $s3 = /\$[\w]+[\s]*=[\s]*\"[^\"]{30,}\";[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\d]+\][\s]*\.[\s]*\$[\w]+\[[\d]+\][^>]+;[\s]*@\$[\w]+\(@?\$[\w]+[^;]*\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_array_join_004 : array
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /(\$\w+)\s*=\s*['\"].{64}/
        $s2 = /\$\w+\s*=\s*(\$\w+\[\d+\]\.){10}/
        $s3 = /\$\w+\s*=\s*['\"a-zA-Z\\.\(\)0-9\*_;]+;/
        $s4 = /\$\w+\s*=\s*['\"a-zA-Z\\.\(\)0-9\*_;]{10,}\.['\"a-zA-Z\\.\(\)0-9\*_;]{10,}['\"];/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_array_join_006 : array
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /(\$\w+)\s*=\s*['\"].{64}/
        $s2 = /=\s*\$\w+\(\$\w+\);\s*\$\w+\s*\(\$\w+\s*,\s*\$\w+\s*(\(\$\w+\))?\s*,\s*\$\w+\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_array_join_007 : array
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$"
        $s1 = "= array("
        $s2 = /\$[^\s]+\s= array\((\"[^\"]{10,}\",){40}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_array_join_008 : array
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "rray"
        $s1 = /= array\('\d\d\d+','\d\d\d+','\d\d\d+','\d\d\d+'\);\$/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_array_join_012 : array
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /\$\w+ *= *['\\"][a-z]{26}[0-9]{10}[_\*@\.,#\/]+['\\"];/
        $s2 = /<\?php\s*function\s*([\w_]+)\s*\(\)\s*\{\s*(\$[\w_]+) *= *(array\()?['\\"][\w_\.\?\*_@=\(\)'\\"\/\+;,#%\$\s]+['\\"\)];/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_aspecrypted_001 : aspecrypted
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "UBound("
        $s1 = /([a-z]\d{2,3}){15}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_aspencrypted_002 : aspencrypted
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ")&Chr("
        $s1 = /e\+\w-v\+\w-a\+\w-l/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_b64_obfuscation_001 : b64
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_replace("
        $s1 = /['\"],\s*['\"]{2},/
        $s2 = /\$[\w]+[\s]*=[\s]*\$[\w]+\(['\"][\w]['\"],[\s]*['\"]{2},[\s]*.{0,5}b.{0,5}a.{0,5}s.{0,5}e.{0,5}6.{0,5}4.{0,5}_.{0,5}d.{0,5}e.{0,5}c.{0,5}o.{0,5}d.{0,5}e.{0,5}\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_b64_obfuscation_002 : b64
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "} . $"
        $s1 = /(\$\w+)\s*=\s*['\"][a-z;_]*([46][a-z_;]*)([46][a-z_;]*)['\"];/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_b64d_obfuscated_003 : b64d
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\", \"\", \""
        $s1 = /\", \"\", \"[\w]{0,2}b[\w]{0,2}a[\w]{0,2}s[\w]{0,2}e[\w]{0,2}6[\w]{0,2}4[\w]{0,2}_[\w]{0,2}d[\w]{0,2}e[\w]{0,2}c[\w]{0,2}o[\w]{0,2}d[\w]{0,2}e[\w]{0,2}\"/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_assert_014 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(''"
        $s2 = ", join('', $"
        $s3 = "=\"\";"
        $s4 = /\.\$[\w]{2}\[[\d]+\],[\s]*[\d]+\),[\s]*[\d]+,/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_backdoor_assertdata_001 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".\"\\x"
        $s2 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $s3 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $s4 = /@\$\w+\(@\$\w+\(@\$\w+\(\$_POST\[(\"d\"|\".x64\"|chr\(100\))/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_backdoor_assertdata_002 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ror_reporting"
        $s1 = /\$\w+\s*=\s*[asert\s\\"\.]+\$[a-zA-Z]{0,8}\.[asert\s\\"\.]+\$[a-zA-Z]{0,8}\.[asert\s\\"\.]+;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_assertdata_003 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = "${"
        $s3 = /\@\${\$\w+\}\(\$\{\$p\.\$o\.\$s\.\$t}\s*\[\w+\]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_backdoor_cgienabler_001 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "AddHandler"
        $s1 = /AddHandler cgi-script (\.evil|\.cin|\.jpg|\.png|\.mcc|\.alfa)/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_cgienabler_001_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "AddType application"
        $s1 = /AddType application.x-httpd-cgi (\.png|\.jpg|\.mcc|\.izri|\.evil|\.alfa|\.cin|\.ss)/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_COOKIE_eval_005_02 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "isset"
        $s1 = "if(isset($_COOKIE[\""
        $s2 = /if\(isset\(\$_COOKIE\[\"[^}\n]+exit;}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_dbload_006 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_function"
        $s1 = "get_option"
        $s2 = /create_function\([\s]*..,[\s]*@join\([\s]*..n.,[\s]*array_map\([\s]*.base64_decode/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_determinator_005 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack("
        $s1 = "versio:"
        $s2 = /\*versio:[^\*]+\*. \$GLOBALS\[.\S+.\][^;]+;\s*if +\(!function_exists\(.\w+.\)\)\{function \w+[^;]+\$GLOBALS\[/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_003 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gister_shutdown_function"
        $s1 = /@[\s]*register_shutdown_function[^;]+(_COOKIE|_SERVER|_REQUEST|_POST)/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_004 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "filter"
        $s1 = "ray_filter"
        $s2 = /@[\s]*array_filter[^;]+(_COOKIE|_SERVER|_REQUEST|_POST)/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_005 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "filter"
        $s1 = "ilter_var"
        $s2 = /@[\s]*filter_var[^;]+(_COOKIE|_SERVER|_REQUEST|_POST)/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_006 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "eval(${$"
        $s2 = "[0].$"
        $s3 = /;if\(isset\(\$\{\$\w+\[\d+\]\.\$\w+\[\d+\]\.\$\w+\[\d+\]/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_007 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = /\^['\"]/
        $s2 = /\$[\w]+\^\/\*[^\x02]{4000}[^\x02]+\.\/\*/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_post_001 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /if\s*\(\s*isset\s*\(\s*\$\s*\{\s*\$\w+\s*\}\s*\[\s*'\w+'\s*\]\s*\)\s*\)\s*\{\s*eval(\s*\(\s*\$\w+)?\s*\(\s*\$\{/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_post_002 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "register_shutdown_function"
        $s1 = /@[\s]*register_shutdown_function[\s]*\([\s]*\$[{\"\s]*_(COOKIE|POST)/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_post_003 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ");$"
        $s1 = "__();"
        $s2 = /[@eval\s\.']{8,}[^\)]+\);.[^_]+__\(\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_POST_085 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "));$"
        $s1 = "=$$"
        $s2 = "])];}if($"
        $s3 = /\$[\w]{20,}=\"(\\x5f|_)(\\x50|P)(\\x4f|O)(\\x53|S)(\\x54|T)\";\$[\w]{20,}=\$\$[\w]{20,};if[^>]+@\$[\w]{20,}\(\);}}}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_REQUEST_001 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "REQUEST"
        $s1 = /eval\(\/\*[\w]+\*\/\$_REQUEST/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_REQUEST_027 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\"^\""
        $s1 = /\$[\w]+='[preglac_'\.\s]{15,};[\s]*\$[\w]+=\"[\w]+\"\^\"[^;]+\\x[\w]{2}[^;]+\";[\s]*\$[\w]+\(/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_REQUEST_029 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = /<\?php[\s]*\$[\w]+[\s]*=[\s]*\$_REQUEST\[[^;]+\];[\s]*eval\(base64_decode\(\$[\w]+\)\);[\s]*\?>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_REQUEST_034 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = /eval\(base64_decode\(\$_REQUEST\['(comment|c_id)'\]\)\)/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_eval_REQUEST_036 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "REQUEST"
        $s2 = "error_reporting(0)"
        $s3 = /eval\(\$_REQUEST\[\w\]/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_backdoor_filesman_002 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "action"
        $s1 = "default_action"
        $s2 = /\$default_action[\s]*=[\s]*['\"\s\.]*F/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_generic_078 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /\$[\w]+[\s]*=[\s]*['\"][^;]{400}[^;]+;[\s]*eval[\s]*\([\s]*base64_decode[\s]*\([\s]*[\w]+[\s]*\([\s]*[\w]+[\s]*\(/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_pregreplace_021 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_"
        $s1 = /<\?php[\s]*@?preg_replace\s*\(\s*[^,;]+\/[^,;]+\/e[^,;]+,\s*\$_/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_rexec_002 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".\"\\x"
        $s2 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $s3 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $s4 = /header\('Status: 404 Not Found',TRUE\);/
        $s5 = /if\(isset\(\$_POST\[chr\(100[^\{]+\{\$\w+=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\./
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5
}

// MANUAL FIX NECESSARY
rule rex_backdoor_uploader_148 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "move_uploaded_file"
        $s1 = "$_FILES["
        $s2 = "echo"
        $s3 = "move_uploaded_file($_FILES['userfile']['tmp_name"
        $s4 = /GIF[\d]+[^\n]+[\s]*<\?php/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_backdoor_uploader_POST_011 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "copy"
        $s1 = "copy($_FILES"
        $s2 = /<\?php[\s]*if[\s]*\([\s]*copy[\s]*\([\s]*\$_FILES[^;]+\$_POST/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_webshell_001 : backdoor
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_rot13"
        $s3 = "onfr64_qrpbqr"
        $s4 = /=str_rot13\([^;]+fge_ebg13[^;]+;\$/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_backdoor_WSO_009 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x7"
        $s1 = /\$[\w]+=['\"][^'\"]{5000}[^'\"]+['\"];[\s]*(\$[\w]+\.?=\"[^\"]+\";[\s]*){10,}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_wso_shell_001 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".\"\\x"
        $s2 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $s3 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $s4 = /(\$+[\w]+=(([']['])|(\.?\".x[a-f0-9]{2}\"\.?)|(\.?chr\([\d]+\)\.?)|(\.?\"[\w#]\"\.?))+;[\s]*){2,}[^\(]+(@?\$[\w]+\(\s)+[^;]+\)\);/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_backdoor_wso_shell_002 : backdoor
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".\"\\x"
        $s2 = /=(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"r\"|\".x72\"|chr\(114\))\.(\"t\"|\".x74\"|chr\(116\));/
        $s3 = /=(\"b\"|\".x62\"|chr\(98\))\.(\"a\"|\".x61\"|chr\(97\))\.(\"s\"|\".x73\"|chr\(115\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"6\"|\".x36\"|chr\(54\))\.(\"4\"|\".x34\"|chr\(52\))\.(\"_\"|\".x5f\"|chr\(95\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\))\.(\"c\"|\".x63\"|chr\(99\))\.(\"o\"|\".x6f\"|chr\(111\))\.(\"d\"|\".x64\"|chr\(100\))\.(\"e\"|\".x65\"|chr\(101\));/
        $s4 = /(\$+[\w]+=(([']['])|(\.?\".x[a-f0-9]{2}\"\.?)|(\.?chr\([\d]+\)\.?)|(\.?\"[\w#]\"\.?))+;[\s]*)+[^#]+\)\);\s*[# ]+/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_backdoor_concatenated_function_001 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_POST"
        $s1 = /\$\w+\s*=\s*(.[base64_dco]+.\.){2,}.[base64_dco]+.;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_concatenated_function_002 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_POST"
        $s1 = /\(\@?\$_POST\[/
        $s2 = /\$\w+\s*=\s*\(?[\"asert'\.]+\)?;\s*\$\w+\(\$_POST\[/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_obfuscated_001 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "@$"
        $s1 = /;\$[\w]+\(\$[\w]+\);if\(\$[\w]+\(@\$[\w]+\[\$[\w]+\]\)==/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_backdoor_obfuscated_002 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ");$"
        $s1 = "'./*"
        $s2 = /\$[\w]+=['\"][^'\"]+['\"]\^['\"]/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_backdoor_weevely_001 : backdoor
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str_replace("
        $s1 = /['\"],\s*['\"]{2},/
        $s2 = /\$[\w]=str_replace\(['\"][\w]['\"],['\"]{2},(\$[\w]\.){5,}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_chr_concatenation_001 : chr
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".chr("
        $s1 = /(chr\(\d{2,3}\) *\.){30}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_chr_concatenation_003 : chr
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".chr("
        $s1 = /(chr\(\d+-\d+\).){10}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_chr_concatenation_004 : chr
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /\s{200}\$/
        $s2 = /chr\([\d]+\)[\s]*\.[\s]*['\"]\\x[\d]+['\"][\s]*\./
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_chr_functions_001 : chr
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = /\.\$\w+;\$\w+\((\$\w+\[[0-9]{1,2}\]\.)+(\$\w+\[[0-9]{1,2}\]),\s*\$\w+\s*,.\d+.\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_chr_iframe_001 : chr
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = /\.\s*chr\(\d+\)\s*\./
        $s2 = /\$[\w]+[\s]*=[\s]*(chr\([\d]+\)[\s]*\.[\s]*){30,}chr\([^;]+;[\s]*(\$[\w]+[\s]*=[\s]*(\$[\w]+\[[\d]+\][\s]*\.[\s]*){8,}[^;]+\];[\s]*)+\$[\w]+\(\$[\w]+\(null,[\s]*\$[\w]+\[[\d]+\][\s]*\.[^\n]+\)\);[\s]*/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_copy_GET_001 : copy
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "copy("
        $s3 = /if\s*\(\s*copy\(\$_GET\[.[^\]]+\],\s*\$_GET\[.[^\]]+\]\s*\)\s*\)\s*echo[^;]+;/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_create_function_001 : create
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_functio"
        $s1 = "=create_function('',"
        $s2 = /=create_function\('',\$\w\w\w+\);\$\w\w\w+\(\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_create_function_002 : create
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "create_functio"
        $s1 = "create_function(\"\",file_get_contents("
        $s2 = /create_function\(\"\",file_get_contents\(\S+\.png\W/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_create_function_003 : create
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "str_"
        $s2 = "str_replace"
        $s3 = /\(['\"][\w]+['\"],[\s]*['\"]['\"][\s]*,[\s]*['\"][\w]{0,8}c[\w]{0,8}r[\w]{0,8}e[\w]{0,8}a[\w]{0,8}t[\w]{0,8}e[\w]{0,8}_[\w]{0,8}f[\w]{0,8}u[\w]{0,8}n[\w]{0,8}c[\w]{0,8}t[\w]{0,8}i[\w]{0,8}o[\w]{0,8}n[\w]{0,8}['\"]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_defaced_generic_007 : defaced
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = /[Hh][Aa4][Cc][Kk]/
        $w0 = /[Hh]acking [Aa]ttempt/
        $w1 = /[Pp]ro[Pp]hoto/
        $w2 = ">Hacker(s)?"
        $w3 = "ackenbe"
        $w4 = "ackett"
        $w5 = "ackney"
        $w6 = ">Stop Hackers?"
        $w7 = "/webalizer/"
        $w8 = "acksaw"
        $w9 = "ccutron"
        $w10 = "ackworth"
        $w11 = "Thacker"
        $w12 = "hackerscreek"
        $w13 = "<!--mstheme-->"
        $w14 = "hack saw"
        $w15 = "ackberry"
        $w16 = "Growth Hacking"
        $w17 = "Grant Hacking"
        $w18 = "<!-- This website is like a Rocket, isn't it? Performance optimized by WP Rocket"
        $s2 = /(<title|<center|<h[\d]|<strong|<b|<TITLE|<CENTER|<H[\d]|<STRONG|<B)>[^';<]{0,30}[Hh][Aa4][Cc][Kk][Ee3Ii1][AaDdNnRr\s]([DdGg\s])?([Oo\s])?/
    condition:
        $s0 and $s1 and $s2 and not $w0 and not $w1 and not $w2 and not $w3 and not $w4 and not $w5 and not $w6 and not $w7 and not $w8 and not $w9 and not $w10 and not $w11 and not $w12 and not $w13 and not $w14 and not $w15 and not $w16 and not $w17 and not $w18
}

// MANUAL FIX NECESSARY
rule rex_defaced_generic_009 : defaced
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = /[Hh][Aa4][Cc][Kk]/
        $w0 = /[Hh]acking [Aa]ttempt/
        $w1 = /[Pp]ro[Pp]hoto/
        $w2 = ">Hacker(s)?"
        $w3 = "ackenbe"
        $w4 = "ackett"
        $w5 = "ackney"
        $w6 = ">Stop Hackers?"
        $w7 = "/webalizer/"
        $w8 = "acksaw"
        $w9 = "ccutron"
        $w10 = "ackworth"
        $w11 = "Thacker"
        $w12 = "hackerscreek"
        $w13 = "<!--mstheme-->"
        $w14 = "hack saw"
        $w15 = "ackberry"
        $w16 = "Growth Hacking"
        $w17 = "Grant Hacking"
        $w18 = "<!-- This website is like a Rocket, isn't it? Performance optimized by WP Rocket"
        $s2 = /<(font|FONT)[^>]+[^\n<]{0,50}[^\w][Hh][Aa4][Cc][Kk][Ee3Ii1\s]/
    condition:
        $s0 and $s1 and $s2 and not $w0 and not $w1 and not $w2 and not $w3 and not $w4 and not $w5 and not $w6 and not $w7 and not $w8 and not $w9 and not $w10 and not $w11 and not $w12 and not $w13 and not $w14 and not $w15 and not $w16 and not $w17 and not $w18
}

// MANUAL FIX NECESSARY
rule rex_defaced_generic_010 : defaced
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ck"
        $s1 = /[Hh][Aa4][Cc][Kk]/
        $w0 = "Hacked by Andreas Rehm"
        $w1 = "Hacked by Lance Rushing"
        $w2 = "hacked by kudo to"
        $w3 = "hacked by Marco Cimmino"
        $w4 = "Coppermine Photo Gallery"
        $w5 = "New York Times hacked"
        $w6 = "### Hacked by SDIC: M17n,"
        $w7 = "HACKED BY BE REBEL TO WORK WITH WEBPACK"
    condition:
        $s0 and $s1 and ($w0 or $w1 or $w2 or $w3 or $w4 or $w5 or $w6 or $w7)
}

// MANUAL FIX NECESSARY
rule rex_defaced_hacked_001 : defaced
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<titl"
        $s1 = /<title>[\s]*[Hh][\s]*[Aa@][\s]*([Cc])?[\s]*[Kk][\s]*[Ee3][\s]*[Dd]/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_defacement_gen_001 : defacement
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = /<[titleTITLE]{5}>[^<]+[hackedHACKED43]{6} [byBY]{2}[^<]+<.[title|TITLE]{5}>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_documentwritetextfile_001 : documentwritetextfile
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = /document.write..<script language=javascript src=.?http:..[^\/]+\/[^\/]+\/[^>]+.txt.?><.script>..;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_docwrite_script_001 : docwrite
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /document.write\s*..<.\s*\+\s*[a-z]\[[0-9]\]\+.\s*.\+[a-z]\[[0-9]\]\+.>[^>]+[a-z]\[[0-9]\][^;]+;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_docwrite_script_002 : docwrite
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /document.write\(.<iframe src=.http:..\d+.\d+.\d+.\d+.\S+.php.\s*style=.[^;]+;.><.iframe>.\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_docwrite_script_003 : docwrite
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /['\"<script\+]{10,}/
        $s3 = /document.write(ln)?\(['\"<script\+]{10,}[^;]+src=.(http|\/\/)[^;]+\?js=\d+[^;]+['\"script\+>]{10,}\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_eval_blackhole_001 : eval
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = /window.document\)eval\(\w+.fromCharCode.apply\(\w+,\w+\)\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_eval_cookie_001 : eval
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "COOKIE"
        $s1 = "_COOKI"
        $s2 = /eval\(\$\w+\(\$_COOKIE/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_eval_cookie_002 : eval
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "COOKIE"
        $s1 = "_COOKI"
        $s2 = /\*\/@\$\w+&&@\$\w+\(\$\w+,\$\w+\);\/\*/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_eval_cookie_003 : eval
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "_COOKIE"
        $s1 = "=$_COOKIE;"
        $s2 = "]);$"
        $s3 = /\$[\w]+[\s]*=[\s]*\$_COOKIE;[\s]*\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*if\(\$[\w]+\)[\s]*\{[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\(\$[\w]+\[[\w]+\]\);[\s]*)+\$[\w]+[\s]*=[\s]*\$[\w]+\(..,[\s]*\$[\w]+\);[\s]*\$[\w]+\(\);[\s]*\}[\s]*/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_eval_cookie_004 : eval
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "COOKIE"
        $s1 = "_COOKI"
        $s2 = /isset\(\$_COOKIE\[[^\]]+\]..\s*\@?\$_COOKIE\[[^\]]+\]\(\$_COOKIE\[[^\]]+\]\)/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_eval_COOKIE_005 : eval
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = ".chr"
        $s2 = /;\$\w+=..x73.\.\$\w+\[\d\d\]\.chr\(/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_eval_multi_base64_001 : eval
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = /(base64_decode..\w{3,}..\.){5,}[^;]+base64_decode..\w{1,}=[^;]+;\s*eval.\$\w+.;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_eval_post_002 : eval
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = /\$[\w]+[\s]*=[\s]*\$_POST;[\s]*(\$[\w]+[\s]*=[\s]*\$[\w]+\[[\w]+\];[\s]*){2,}if[\s]*\([\s]*\$[\w]+\)[\s]*\{[\s]*\$[\w]+\(\$[\w]+\);[\s]*\}[\s]*/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_eval_post_006 : eval
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ");$"
        $s1 = /\$[^a-zA-Z\d\-_\(\)\[\]]{1,10}[\s]*=/
        $s2 = /\$[^a-zA-Z\d\-_\(\)\[\]&#@%\}\{]{1,10}\(\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_eval_var_002 : eval
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eval"
        $s1 = /';eval\(\$/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_eval_var_003 : eval
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "load"
        $s2 = /\$[\w]+[\s]*=[\s]*\$[\w]+\(['\"]\$[\w]+['\"],\$[\w]+\);[\s]*\$[\w]+\(.load.\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_exploit_title_001 : exploit
{
    meta:
        sig_type = "REX_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<title"
        $s1 = /<title>[^<]{0,200}?[Ee3][Xx][Pp][Ll1][Oo0][Ii1][Tt][^aA][^<]{0,200}?<\/title>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_fake_flash_001 : fake
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = "flashplayer\">"
        $s2 = /[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}[^\"]+flashplayer/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_fake_gif_002 : fake
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GIF89"
        $s1 = /\AGIF[^\n]+\s*<.[Hh][Tt][Mm][Ll]/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_fake_gif_004 : fake
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gif89"
        $s1 = /\Agif[^\n]+\s*<.[PHph]{3}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_fake_gif_005 : fake
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gif89"
        $s1 = /\Agif[^\n]+\s*<.[HTMLhtml]{4}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_fake_gif_006 : fake
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "gif89"
        $s1 = /\Agif[^\n]+\s*<%/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_fgc_gif_001 : fgc
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = ".gif"
        $s2 = /file_get_contents\(.\/\S+\.gif.\)/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_fgc_txt_001 : fgc
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "file_"
        $s2 = "file_get_contents"
        $s3 = "echo"
        $s4 = /eval\s*\(\s*file_get_contents\(.http:\/\/\S+\.txt.\)\s*\)\s*;/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_fgc_url_002 : fgc
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = /=\@?file_get_contents\(.http:\/\//
        $w0 = "=file_get_contents('http://maps.google.com/maps"
        $w1 = "class Video"
        $s2 = /\S=file_get_contents\('http:\/\//
    condition:
        $s0 and $s1 and $s2 and not $w0 and not $w1
}

// MANUAL FIX NECESSARY
rule rex_fgc_url_003 : fgc
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file_get_content"
        $s1 = /=\@?file_get_contents\(.http:\/\//
        $s2 = /\S=@file_get_contents\(\"http:\/\//
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_function_array_001 : function
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Array"
        $s1 = /function\s*_[0-9]{3,}\(\$i\)[^;]+Array/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_function_GLOBAL_001 : function
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = "substr"
        $s3 = /\$GLOBALS\[['\"]\w+['\"]\]\(\$GLOBALS\[['\"]\w+['\"]\]\(\$\w+\)\)/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_function_GLOBAL_COOKIE_001 : function
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "GLOBALS"
        $s1 = "$GLOBALS["
        $s2 = /\s{200}[^;]+(\$\w+)\s*=\s*\$GLOBALS\[.[_COKIE'\\"\s\.]+\]/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hex_obfuscated_002 : hex
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "), 0755); $"
        $s2 = ", 0644);"
        $s3 = /.x[\w]{2}.x[\w]{2}.x[\w]{2}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_hex_obfuscated_003 : hex
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = /\"\\\w+\"\.\"\\x\w+\"\./
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_hidden_colored_spam_001 : hidden
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<font color=\"#"
        $s1 = /([\w]{0,2}<font color=\"#[\w]{3,6}\">[\w]{0,2}[\s]*<.font>[\w]{0,2}){5,}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_hidden_div_001 : hidden
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "absolute;"
        $s1 = "<div style=\"position: absolute; "
        $s2 = /<div style=\"position: absolute; (top|left):\s*-\d{3,}px;[^>]+width:\s*\d{3,}px.?\">/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_div_002 : hidden
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "absolute;"
        $s1 = /left:\s*-/
        $s2 = /[\s]{100}<div style=\"position:absolute;[^-]+left:-[\d]{3}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_div_003 : hidden
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "absolute;"
        $s1 = /left:\s*-/
        $s2 = /<div style='left: -\d{4,}px;[^>]+top:\s*-\d{4,}px;?.>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_div_004 : hidden
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "absolute;"
        $s1 = "<div style=\"position: absolute; "
        $s2 = /<div style=\"position: absolute; left: -\d\d\d\dpx\">/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_div_005 : hidden
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "absolute;"
        $s1 = "<div style=\"position:absolute; top:-"
        $s2 = /<div style=\"position:absolute; top:-\d{4,}px;\" id=\"\w+\">\w[^<]+<a href=/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_iframe_tp_001 : hidden
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<iframe"
        $s1 = /index\.php\?tp=[\da-f]{16,}\" width=\"(0|1)\" height=\"(0|1)\" frameborder=\"0\"/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_hidden_spam_div_001 : hidden
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<div style="
        $s2 = /<div style=.display: none[^\n]+\W(cialis|pills|buy-cheap|viagra)\W[^>]+<.div>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_spam_div_002 : hidden
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<div style="
        $s2 = /<div style=.position: absolute[^\n]+\W(cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex)\W[^\n]+\W((cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex)\W[^\n]+)?<.div>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_spam_div_004 : hidden
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<div style="
        $s2 = /<div\s*style\s*=\s*.overflow:hidden;height:\s*-?\d+px;\s*.>(\n+)?\s*<a\s*href=.https?:\/\/[^\/]+\/.\s*title\s*=\s*.((cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex|futbalove\s*dresy|student-loan|home-well-water|work-from-home|payroll-loan|viagra|cheap|zithromax|pharmacy|buy|cheap))\W[^\n]+\W((cialis|pills|buy-cheap|viagra|montelukast|[Rr]eplica|rolex|futbalove\s*dresy|student-loan|home-well-water|work-from-home|payroll-loan|viagra|cheap|zithromax|pharmacy|buy|cheap)\W[^\n]+)?<\/div>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_spam_p_001 : hidden
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<p style"
        $s2 = /<p style=.position:\s*absolute;\s*left:\s*-\d+px;\s*top:\s*-\d+px;.>([\s\w,+]+\<a href=.[^<]+(\s*\w+\s*)+<.a>)+[^>]+<.p>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_hidden_spam_u_001 : hidden
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "styl"
        $s1 = "<u style"
        $s2 = /<u\s*style=.position:absolute;(right|left|top|bottom):-?\d{4,}px/
        $s3 = /<u\s*style=.position:absolute;(right|left|top|bottom):-?\d{4,}px[^<]+(<a href=.http[^>]+\W([oO]nline|viagra|cialis|tadafil)\W[^>]+<.a>\s*)+<.u>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_iframe_generic_007_02 : iframe
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "Twitter"
        $s2 = "document.write('<iframe"
        $s3 = /name=.?Twitter.? scrolling=.?auto.?/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_iframe_generic_018 : iframe
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "hidden;"
        $s2 = "none;"
        $s3 = /<iframe[^>]+visibility:[\s]*hidden;[^>]*display:[\s]*none;[^>]+\.php\?id=\{/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_iframe_cgi_001 : iframe
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = /<iframe src=\"http[^<>]*\.cgi\?\d\"/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_iframe_counter_001 : iframe
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = /<iframe src=\"http\S+\/counter\.php\"/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_iframe_generic_020 : iframe
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<ifram"
        $s1 = "<iframe src="
        $s2 = /<iframe src=\"http:[^:]+(cn|ru):8080.index.php\" width=\d+ height=\d+ style=\"visibility: hidden\"><.iframe>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_include_abs_path_002 : include
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = "require_once("
        $s2 = /require_once[\s\(]*['\"]\/[\w]+\/[\w]+\/[\w\/]+['\"][\s\)]*;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_include_abs_path_003 : include
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = /include_once[\s\(]*['\"]\/[\w]+\/[\w]+\/[\w\/]+['\"][\s\)]*;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_include_image_001 : include
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = /include(_once)?\s*\(?\s*['\"][^'\"]+(jpg|png|gif|bmp|ico|avi|mov|mpg|mpeg|jpeg)['\"]\s*\)?/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_include_images_005 : include
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = "includ"
        $s3 = /@include[\s]*\"[^\"]+x[\w]{2}[^\"]+(i|.x69)(c|.x63)(o|.x6f)\";/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_include_malware_001 : include
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "include"
        $s1 = "@include"
        $s2 = /\s{20}<\?php\s\@include\(.[^;]*\/[^;]+\.php.\);\s\?>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_include_requests_001 : include
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = /include\(\$_(GET|POST|COOKIE)[^;]+\]\s*\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_js_encoded_001 : js
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = "%3C%73%63%72%69%70%74%20%74%79%70%65%3D%22%74"
        $s2 = /document\.write\s*\(\s*unescape\s*\(\s*..3C.73.63.72.69.70.74.20.74.79.70.65.3D.22.74/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_js_injector_001 : js
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = /return \w\w\[\"[\w\d\\]+\"]\(\w\d\);\}function \w\w\(\)\{return \"[^;]{300,}\";\}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_js_injector_002 : js
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = /echo .<script src[\s]*=[\s]*.https?:..[\d]+\.[\d]+\.[\d]+\.[\d][^>]+>[\s]*<.script>.;/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_js_injector_003 : js
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = /<script[^>]+src=.https?:..(goo\.gl|bit\.ly|adf\.ly)[^>]+><.script>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_js_redirectconcat_002 : js
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".location"
        $s1 = "top.location"
        $s2 = "window.top.location"
        $s3 = /window.top.location.href=.(\D+\"\+\"){1,}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_js_redirect_001 : js
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".location"
        $s1 = "window.location"
        $s2 = /if\(navigator.userAgent.match[^;]+(\|\.\*android\.\*|zeto|Toshiba|Smartphone|WindowsPhone|SonyEricsson)[^;]+window.location[^;]+;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_js_redirect_002 : js
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".location"
        $s1 = "top.location"
        $s2 = "window.top.location"
        $s3 = /window\.top\.location\.href=atob\(.{4,}/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_js_spacedcode_001 : js
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".location"
        $s1 = "window.location"
        $s2 = /[\s]{50}<script>[\s]*window.location[\s]*=[\s]*['\"]http/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_link_newlines_002 : link
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "href="
        $s1 = /<b\s*style=.display:none;.>\n(<a href=.http[^<]+\w+[^>]+>[^>]+br>\n){3,}<.b>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_link_sequence_001 : link
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "href="
        $s1 = "<li><a href="
        $s2 = /(<li><a href=(\")*http[^>]+>(\w|\s)+[^<]+<.a><.li>\s*){20}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_location_netspaces_001 : location
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "header(\"Location:"
        $s1 = /header\(.Location.\s*http...com-[^;]+.net.space.php[^;]+\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_long_nonstandard_001 : long
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /^[A-Za-z0-9\+\/]{500}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_malware_assert_013 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "].$"
        $s1 = "(${$"
        $s2 = ";if(isset(${$"
        $s3 = "]}[$"
        $s4 = /\]\.\$\w+\[\d+\]\.\$\w+\[\d+\]/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_malware_eval_concat_001 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /';eval\((\$\w+\.){10,}(\$\w+)\);return \$\w+;\}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_malware_eval_concat_002 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /\@\$\w+\([\"'eval\s\.]+\(.eval\(gzinflate\(base64_decode\(\$/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_malware_eval_strrev_001 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "(implode("
        $s2 = "strrev"
        $s3 = /(\$\w+\s*=\s*strrev\(['\"\._\w]+\);){2}eval\(/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_malware_generic_006 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "(base64_decode("
        $s2 = /eval\(base64_decode\(.?ZX/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_malware_generic_022 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = /echo base64_decode\(.PHNjcmlw/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_malware_generic_030_02 : malware
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/e"
        $s1 = /\/e[\"']\s*,\$/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_malware_injector_033 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /\/\*\w/
        $s2 = /\/\*[a-z0-9]{32}\*\/function [a-zA-Z]{30,}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_malware_injector_034 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "))); $"
        $s2 = /\$\w+\s*=[base64_dco'\s\.]+;\s*\$\w+\s*=[(create_funio\s*'\.)]+;\s*\$\w+\s*=[(gzuncompres\s\.')]+;\s*\$\w+\s*=\s*\$\w+\([\"']{2},\s*\$\w+/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_malware_plchldr_001 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = /eval\(.echo base64_encode\(.[^;]+.\);.\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_malware_plchldr_002 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = "echo base64_encode"
        $s3 = /<\?php\s*echo base64_encode\(.\w[^;]+\);\s*\Z/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_malware_require_001 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = "@require"
        $s3 = /<\?php[\s]*@require\(.\..images.[\d]+.\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_malware_generic_018 : malware
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /<\?(php)?\s*(\/\*\*\/|\/\*[^\*]+\*\/)?\s*eval\(base64_decode\(.JG/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_001 : mlw
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/*/"
        $w0 = "-color: #"
        $s1 = /\/\*\/\w\w\w\w\w\w\*\//
    condition:
        $s0 and $s1 and not $w0
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_002 : mlw
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /#\/\w\w\w\w\w\w#/
        $s2 = /#\/\w\w\w\w\w\w#\s*\n*\?>/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_002_001 : mlw
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /#\/\w\w\w\w\w\w#/
        $s2 = /http:..\H+.php[^;]+\?fid=\w+&info=\"\s*.\s*http_build_query\(\s*\$/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_002_002 : mlw
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /#\/\w\w\w\w\w\w#/
        $s2 = /#[\w]+#[\s]*error_reporting.0.;[\s]*@ini_set..display_errors.,0.;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_002_03 : mlw
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /#\/\w\w\w\w\w\w#/
        $s2 = /#[\w]+#[\s]*if.empty.\$/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_003 : mlw
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /\/\*\w/
        $s2 = /\/\*\/[a-z0-9]{6}\*\//
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_004 : mlw
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<script"
        $s1 = /<\/script><.--\w{48}-->/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_mlw_comment_tag_005 : mlw
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /\/\*\w/
        $s2 = / \/\*\w{48}\*\/if /
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_modified_wp_index_001 : modified
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = /\* Front to the WordPress application\./
        $w0 = "_wejns_wp_whitespace_fix"
        $w1 = "JPRE_SCRIPT_FILENAME'] = $_SERVER['SCRIPT_FILENAME"
        $s2 = /<\?(php)?\s+([\w\$\@]|\/\/)/
    condition:
        $s0 and $s1 and $s2 and not $w0 and not $w1
}

// MANUAL FIX NECESSARY
rule rex_multi_vars_002 : multi
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document.write("
        $s1 = /var [\w]+[\s]*=[\s]*[\w]+([\s]*\+[\s]*[\w]+){10,};[\s]*document.write\([\w\s]*\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_multi_vars_004 : multi
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $w0 = "$jan='';$feb='';$mar='';$apr='';$may='';$jun='';"
        $w1 = "$coupon_code = getToken"
        $s2 = /\$\w\w\w+\s*=\s*'.{1,10}';[^\n]?\$\w\w\w+\s*=\s*'.{1,10}';[^\n]?\$\w\w\w+\s*=\s*'.{1,10}';[^\n]?\$\w\w\w+\s*=\s*'.{1,10}';[^\n]?\$\w\w\w+\s*=\s*'.{1,12}';[^\n]?\$\w\w\w+\s*=\s*'.{1,12}';/
    condition:
        $s0 and $s1 and $s2 and not $w0 and not $w1
}

// MANUAL FIX NECESSARY
rule rex_nuclearkit_001_01 : nuclearkit
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /document.write[^>]+iframe.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_nuclearkit_001_02 : nuclearkit
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /document.write[^>]+iframe.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..,/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_nuclearkit_001_03 : nuclearkit
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /document.write[^>]+.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..,/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_nuclearkit_001_04 : nuclearkit
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /document.write[^>]+.src[^>]+\.\w{2,}.[a-z]{6,}[0-9][0-9]\.(khml|htm|html|php)[^<]+<.iframe>..;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_nuclearkit_002 : nuclearkit
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "document"
        $s1 = "document.write"
        $s2 = /function nnn_action/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_obfuscated_filesman_001 : obfuscated
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "^ chr("
        $s2 = /=[\w]+\(array\(\d/
        $s3 = /\$[\w]+\.\$[\w]+\.\$[\w]+/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_obfuscated_functions_001 : obfuscated
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /@\$/
        $s2 = /@\$\w+\(\$\w+\((\$\w+\(){2,}\$\w+\){3,};/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_obfuscated_functions_002 : obfuscated
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "=range(1,"
        $s2 = /=chr\(\$[\w]+\[96\]\)\.chr\(\$[\w]+\[114\]\)\.chr\(\$[\w]+\[114\]\)\.chr\(\$[\w]+\[100/
        $s3 = /chr\(\$[\w]+\[94\]\)\.chr\(\$[\w]+\[79\]\)\.chr\(\$[\w]+\[78\]\)\.chr\(\$[\w]+\[82/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_pack_001 : pack
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack('"
        $s1 = /pack\('\S+',substr\(\$\w+, -\d+\)\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_pack_002 : pack
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "pack('"
        $s1 = /=pack\('\S+','\d\d\d\d\d\d\d\d+/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_phish_mailer_gen_001 : phish
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ail("
        $s1 = /(\$message[\s]*\.=[\s]*['\"][^;]+\$_POST[^;]+;[\s]*){5,}[^\?]+mail\(/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_phishing_bank_002 : phishing
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = "require"
        $s2 = /require(_once)?[\s]*\"(\.|\\x2e)(\/|\\x2f)(c|\\x63)(r|\\x72)(y|\\x79)(p|\\x70)(t|\\x74)(\.|\\x2e)(p|\\x70)(h|\\x68)(p|\\x70)\";/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_phishing_saved_from_url_001 : phishing
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "http"
        $s1 = "<!-- saved from url=("
        $s2 = /<!-- saved from url=\(\d+\)https?:\/\/[\w\.]*(outlook|youtube|gmail|yahoo|hotmail|card)\.com\//
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_popup_php_001 : popup
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = /<script\s*(type|language)[^\s]+\s*src=.http:..\D+pop(up)?\.php\?u(ser)?=[0-9]+[^>]+><.script>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_preg_replace_003 : preg
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = /preg_replace\(\s*['\"]\/[a-zA-Z0-9][a-zA-Z0-9=]*\/e['\"]/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_preg_replace_005 : preg
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "preg_replace("
        $s1 = /@preg_replace\([^;]+,\$_REQUEST[^;]+error.\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_preg_replace_hexcode_002 : preg
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "\\x"
        $s1 = /\$[\w]+[\s]*=[\s]*[preglac'\"_\.\s]+;[\s]*\$[\w]+[\s]*=[\s]*['\"][^;]+['\"]\^['\"][^;]+['\"];[\s]*\$[\w]+\(\$[\w]+,[\s]*['\"][^;]+['\"]\^['\"][^;]+['\"]\);/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_require_abs_path_001 : require
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = /\@?require(_once)\s*\(\s*['\"]\/var\/www\/\w+/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_require_abs_path_002 : require
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = "<?php"
        $s2 = "@require"
        $s3 = /@require\(['\"][(\w\-)]+\w+\/[\d]+['\"]\);/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_require_css_001 : require
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = /@require(_once)?\(/
        $s2 = /@require\([^ ;]*\/\w+\.css[\"']\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_require_once_pdf_001 : require
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = /@require(_once)?\(/
        $s2 = /@require_once\(\S+\/\S+\/\S+.pdf\S\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_require_php_constant_path_001 : require
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "require"
        $s1 = /@require(_once)?\(/
        $s2 = /@require\(dirname\(__FILE__\)\.['\"]\/[-_\w]+\.php['\"]\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_spaced_code_001 : spaced
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php               "
        $s1 = /<\?php     \s{300,}[\$f]/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_spaced_code_002 : spaced
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = /[ \t]{150,}<\?php/
        $s2 = /\n[ \t]{150,}<\?php/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_spaced_code_002_02 : spaced
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = /[ \t]{150,}<\?php/
        $s2 = /^[ \t]{150,}<\?php/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_spaced_POST_001 : spaced
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "POST"
        $s1 = "$_POST"
        $s2 = " $_POST "
        $s3 = /    \$_POST +\[.\w.\]   /
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_spaced_POST_002 : spaced
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_POST"
        $s1 = /\$_POST {4,}(\)|\[)/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_spamseo_pharmaspam_001 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_LINEMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "base64_decod"
        $s1 = "echo"
        $s2 = "echo base64"
        $s3 = /strtolower\(\$_SERVER\[\"HTTP_USER_AGENT\"\]\)\)\)\{[\s]*echo base64_decode/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_spamseo_redirect_076 : spamseo
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrite"
        $s1 = "RewriteRule"
        $s2 = "RewriteRule ^"
        $s3 = "RewriteRule ^(.*)$ http://"
        $s4 = /RewriteCond %\{HTTP_REFERER\} \^\.\*\(([\w_-]+\|){40}[^\)]+ahoo\|[^\)]+\)[^\)]+\)/
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4
}

// MANUAL FIX NECESSARY
rule rex_spam_seo_links_001 : spam
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "href="
        $s1 = /<a href[^<]+\W?(cialis|pills|buy-cheap|viagra|tadafil|fluoxetine)[^>]+>\W?(cialis|pills|buy-cheap|viagra|tadafil|fluoxetine|domperidone)[^>]+<.a>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_spamtool_001 : spamtool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = /\$\w+ = mail.(stripslashes..\w+., ){2,3}stripslashes..\w+..;/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_spamtool_002 : spamtool
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "mail("
        $s1 = "mail(stripslashes"
        $s2 = /foreach \(\$_POST as \$key => \$value\) \{array_push\(\$data, \$value\);\}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_split_injection_001_01 : split
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?"
        $s1 = /<\?(php)?\s+(\$\w+)=[\"base_dcohr\.\(\)0-9]{14,};\?>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_string_comment_join_001 : string
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = /\$[\w]+[\s]*=[\s]*\$[\w_-]+\(['\"][\w_-]+['\"][\s]*\.[\s]*#[\w_-]+[\s]*\.[\s]*['\"][\w_-]+['\"][\s]*\.[\s]*#[\w_-]+/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_string_rearrangement_001 : string
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<?php"
        $s1 = /(\$\w{2,6}(\{|\[)[0-9]+(\}|\])\.){10,}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_strrevLocation_001 : strrevLocation
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "strrev("
        $s1 = /@header\(strrev[^;]+[Locatinht:]/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_substitute_crypt_001 : substitute
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_POST"
        $s1 = /\(\@?\$_POST\[/
        $s2 = /@\$[\w]+=\$\{[\w]+\}\('',\$\{[\w]+\}\(\$[\w]+,'[\w]{8,}','[\w]{8,}'\)\);@\$[\w]+\(\);/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_system_GET_001 : system
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$_GE"
        $s1 = "$_GET["
        $s2 = "<?php system($_GET"
        $s3 = /<\?php\s+system\(\$_GET\[[^;]+;\s+\?>/
    condition:
        $s0 and $s1 and $s2 and $s3
}

// MANUAL FIX NECESSARY
rule rex_unconditionalredirect_001 : unconditionalredirect
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = /Options All -Indexes\s+RewriteEngine On\s+RewriteRule \^\(\.\*\)\$ http:\/\/[^\$\[ ]+ \[R=301,L\]/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_unwantedad_001 : unwantedad
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/apu.php?zoneid"
        $s1 = /\/apu\.php\?zoneid=(\d{4,5}|\%d)/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_url_short_001 : url
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<iframe"
        $s1 = /<iframe[^>]+src[^>]+(ddns.name|bit.ly|bitly.com|bit.do|goo.gl|is.gd|tr.im)[^<]+<.iframe>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_url_short_002 : url
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<scrip"
        $s1 = /<script[^>]+src[^>]+(bit.ly|bitly.com|bit.do|goo.gl|is.gd|tinyurl.com|g00.co|tr.im|cutt.ly)[^<]+<.script>/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_url_short_redirect_001 : url
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "Rewrit"
        $s1 = "RewriteRule"
        $s2 = /RewriteRule [^\[]+? http:.\/(ow.ly|bit.ly|bitly.com|bit.do|goo.gl|is.gd|tinyurl.com)\//
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_var_obfuscated_001 : var
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "@$"
        $s1 = /function [\w_]+\(\$[\w_]+, \$[\w_]+, \$[\w_]+\) \{[\s]*\$[\w_]+ = ['\"chr\.\s]{5,};[\s]*\$[\w_]+ = ['\"unlik\.\s]{8,};/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_WSO_encrypted_001 : WSO
{
    meta:
        sig_type = "REX_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "eva"
        $s1 = "base64_decode"
        $s2 = /return base64_decode\(\$v[0-9A-Z]{6}\);\}/
    condition:
        $s0 and $s1 and $s2
}

// MANUAL FIX NECESSARY
rule rex_xor_data_001 : xor_obfuscation
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "^"
        $s1 = /\"\s*\^\s{2,}\"/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_xor_data_003 : xor_obfuscation
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "^"
        $s1 = /\"\^\"\\[0-7]{2,3}/
    condition:
        $s0 and $s1
}

// MANUAL FIX NECESSARY
rule rex_xor_warnings_002 : xor_obfuscation
{
    meta:
        sig_type = "REX_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "^"
        $w0 = "//www.adminer.org/"
        $s1 = /['\"][\s]*\.[\s]*[\w]{5,}[\s]*\.[\s]*['\"]/
        $s2 = /\$[\w]+=\$[\w]+\^/
    condition:
        $s0 and $s1 and $s2 and not $w0
}

rule sh_backdoor_dropper_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "shell;curl -o /tmp/shell http"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_dropper_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "python"
        $s1 = "urllib"
        $s2 = "$(echo -n \"curl=$Ecurl|wget=$Ewget|python=$Epy|perl=$Eperl|dir=$DIR\" | base64)"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_dropper_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "/usr/bin/curl --connect-timeout 5 -m 5"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_dropper_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "cmd=\"/usr/bin/curl -o/tmp/rce $rev_host"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_dropper_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = ";wget -q -O wp-index"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_linuxrootkit_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exit"
        $s1 = "if [ -f './libworker.so' ];then killall -9 host;export AU="
    condition:
        $s0 and $s1
}

rule sh_backdoor_linuxrootkit_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "perl nd.pl $1 $mad"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_linuxrootkit_003 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "./esc ft* $rand"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_linuxrootkit_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "wget http"
        $s3 = "ssh root"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_backdoor_uploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "/doc;chmod +x /tmp/doc;perl /tmp/doc;"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_uploader_002 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "rm -rf doc2*"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_uploader_003 : backdoor
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = ".js > /tmp/php-"
        $s2 = "checks=$(ps aux | grep php-"
        $s3 = "rm -rf /tmp/.a /tmp/start_"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_backdoor_uploader_004 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "wget http"
        $s3 = "curl -O http"
        $s4 = "chmod +x"
        $s5 = "perl"
        $s6 = "rm -rf"
    condition:
        $s0 and $s1 and $s2 and $s3 and $s4 and $s5 and $s6
}

rule sh_backdoor_uploader_005 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "if curl $1 > $2; then echo 'curl success'; else wget $1 -O $2; fi;"
    condition:
        $s0 and $s1
}

rule sh_backdoor_uploader_006 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "cd /tmp;mkdir"
        $s3 = "> /dev/null 2>&1 & ';shell_exec($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_backdoor_uploader_007 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "exec"
        $s2 = "cd /tmp;mkdir"
        $s3 = "> /dev/null 2>&1 & echo $!';shell_exec($"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_backdoor_uploader_008 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/sh"
        $s2 = ".css.txt' -O wpcss.php"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_uploader_009 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "url"
        $s1 = "/in; php asu.php < /dev/null"
    condition:
        $s0 and $s1
}

rule sh_backdoor_uploader_010 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "get"
        $s1 = "/in -O x.php; php x.php"
    condition:
        $s0 and $s1
}

rule sh_backdoor_uploader_011 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/sh"
        $s2 = "/z0.txt | sh"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_uploader_012 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/sh"
        $s2 = "-U \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0\" -O wp-theme-setting-v-"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_uploader_013 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "bash -i >& /dev/tcp/$"
    condition:
        $s0 and $s1 and $s2
}

rule sh_backdoor_uploader_014 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "file"
        $s1 = "EDT  + 10 seconds\"); chmod 0777 \"$"
    condition:
        $s0 and $s1
}

rule sh_hacktool_abacusexploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "#define RUN_ROOTSHELL 0x5150"
    condition:
        $s0 and $s1 and $s2
}

rule sh_hacktool_cryptominer_tool_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "for i in `pidof xmrigMiner`; do"
    condition:
        $s0 and $s1 and $s2
}

rule sh_hacktool_cryptominer_tool_002 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "-a xmr-v7 --host"
    condition:
        $s0 and $s1 and $s2
}

rule sh_hacktool_exploit_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/sh"
        $s2 = "mv -f exploit2.c exploit.c"
    condition:
        $s0 and $s1 and $s2
}

rule sh_hacktool_htaccesshack_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "AddType text/plain .php"
    condition:
        $s0 and $s1 and $s2
}

rule sh_hacktool_mailer_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "cat eml.txt | mail -s"
    condition:
        $s0 and $s1 and $s2
}

rule sh_hacktool_roguejs_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "print"
        $s1 = "node32linux > nodejs"
    condition:
        $s0 and $s1
}

rule sh_hacktool_symlink_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "eval \"ln -s /home/$i/public_html/configuration.php ../sym/$i"
    condition:
        $s0 and $s1 and $s2
}

rule sh_malware_component_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "cp "
        $s2 = "/wp-config.php 13.txt;"
    condition:
        $s0 and $s1 and $s2
}

rule sh_malware_component_001_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ".com"
        $s1 = "cp "
        $s2 = "cp wp-system.php /"
    condition:
        $s0 and $s1 and $s2
}

rule sh_malware_component_001_03 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "chmod 0777 links.sh;"
    condition:
        $s0 and $s1
}

rule sh_malware_component_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "*/"
        $s1 = "@fucksheep.org"
    condition:
        $s0 and $s1
}

rule sh_malware_cryptominer_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "#!/bin/"
        $s1 = "stratum+"
    condition:
        $s0 and $s1
}

rule sh_malware_cryptominer_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/bash"
        $s2 = "nohup php -r 'ini_set(\"display_errors"
        $s3 = "killstr \"miner\""
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_cryptominer_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "/bin/sh"
        $s2 = "cryptonight"
        $s3 = "crontab -l 2>/dev/null; echo \"* * * * *"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_cryptominer_005 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "/bin/"
        $s1 = "--auto --any --forever --nicehash --variation ${FORK} --low -o ${POOL}:${PORT} -u ${WALLET}"
    condition:
        $s0 and $s1
}

rule sh_malware_cryptominer_006 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stratum+tcps"
        $s2 = "while [ 1 ]; do"
        $s3 = "./cpuminer-sse2 -a lyra2tdc -o stratum+tcps:"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "d2web.org"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "onion."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_024 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "darknet."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_025 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "tor2web."
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_033 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "/lib/systemd/systemd-init"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_034 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "~/.systemd-init"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_035 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "grep -q \"0.0.0.0 pastebin.com\" /etc/hosts"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_036 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "grep -q \"0.0.0.0 lsd.systemten.org\" /etc/hosts"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_037 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "exec"
        $s1 = "exec &>/dev/null"
        $s2 = "export PATH=$PATH"
        $s3 = "gKZmkK|base64 -d|bash"
    condition:
        $s0 and $s1 and $s2 and $s3
}

rule sh_malware_unix_cryptominer_038 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stratum+tcps"
        $s2 = "tar.gz && tar xf"
    condition:
        $s0 and $s1 and $s2
}

rule vb_backdoor_uploader_001 : backdoor
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "new ActiveXObject(\"WScript.Shell\").Run(\"powershell -noP -sta -w 1 -enc  SQBmACgAJ"
    condition:
        $s0 and $s1
}

rule vb_hacktool_reverse_tcp_001 : hacktool
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = ">"
        $s1 = "AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph"
    condition:
        $s0 and $s1
}

rule vb_injected_WSHshelldropper_001 : injected
{
    meta:
        sig_type = "STR_CLEAR_MULTIMATCH"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "hell"
        $s1 = "WriteData = \"4D5A900"
    condition:
        $s0 and $s1
}

rule vb_malware_generic_002 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<"
        $s1 = "<%"
        $s2 = "VBScript.encode%>"
    condition:
        $s0 and $s1 and $s2
}

rule vb_malware_generic_003 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "<%"
        $s1 = "so\"&\"sos\"&\"pider,goo\"&\"g\"&\"lebot"
    condition:
        $s0 and $s1
}

rule vb_malware_generic_004 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "erver"
        $s1 = "\"fucksure\")>0"
    condition:
        $s0 and $s1
}

rule vb_malware_include_001 : malware
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "inclu"
        $s1 = "<!--#include file=\"images"
    condition:
        $s0 and $s1
}

rule vb_spamseo_redirect_001 : spamseo
{
    meta:
        sig_type = "STR_WARN"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "google"
        $s1 = "if instr(rUrl,\"google\") or instr(rUrl,\"yahoo\") or instr(rUrl,\"bing\") then"
    condition:
        $s0 and $s1
}

rule vbs_malware_dropper_001 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "chr"
        $s1 = "Array(\"%#\", chr("
        $s2 = "ZW0uVGhyZWFkaW5nLlRocmVhZF06OkdldERvbWFpbigpLkxvYWQoJF8wKTskXzEuRW50cnlQb2ludC5pbnZva2UoJG51bGwsJG51bGwpOyIgJiBDaHJ3KDM0KSwwLGZhbHNlDQo="
    condition:
        $s0 and $s1 and $s2
}

rule vbs_malware_dropper_002 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "ass"
        $s1 = "pass"
        $s2 = "powershell.exe -ExecutionPolicy Bypass"
    condition:
        $s0 and $s1 and $s2
}

rule vbs_malware_dropper_002_02 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "4D5A90000300000004000000FFFF0000B800000000000000"
    condition:
        $s0 and $s1 and $s2
}

rule vbs_malware_dropper_002_03 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "$f"
        $s1 = "77,90,144,0,3,0,0,0,4,0,0,0,255,255,0,0,184,0,0,0,0,"
    condition:
        $s0 and $s1
}

rule vbs_malware_dropper_002_04 : malware
{
    meta:
        sig_type = "STR_CLEARFILE"
        sig_origin = "peter-sucuri-Signatures"
        sig_description = ""
    strings:
        $s0 = "str"
        $s1 = "stri"
        $s2 = "Decompress(@(31,139,8,0,0,0,0,0,4,"
    condition:
        $s0 and $s1 and $s2
}

